/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 17 08:48:53 GMT 2015
 */

package weka.classifiers;

import static org.junit.Assert.*;
import org.junit.Test;
import edu.stanford.nlp.util.HashIndex;
import java.awt.Checkbox;
import java.util.Collection;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.junit.runner.RunWith;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.Sourcable;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.Logistic;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.PART;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.RandomTree;
import weka.core.Capabilities;
import weka.core.FastVector;
import weka.core.Instances;
import weka.core.TestInstances;
import weka.core.Version;
import weka.core.converters.TextDirectoryLoader;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.unweightedMicroFmeasure()D: I23 Branch 318 IF_ICMPGE L3316 - false
   */

  @Test
  public void test00()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertNotNull(testInstances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Instances instances0 = testInstances0.generate();
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertNotNull(instances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertNotNull(evaluation0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      double double0 = evaluation0.unweightedMicroFmeasure();
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
  }

  //Test case number: 1
  /*
   * 3 covered goals:
   * Goal 1. weka.classifiers.Evaluation.rootMeanSquaredError()D: root-Branch
   * Goal 2. weka.classifiers.Evaluation.rootMeanPriorSquaredError()D: I7 Branch 201 IFEQ L2266 - true
   * Goal 3. weka.classifiers.Evaluation.rootRelativeSquaredError()D: I7 Branch 202 IFEQ L2279 - true
   */

  @Test
  public void test01()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertNotNull(instances0);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertNotNull(evaluation0);
      
      double double0 = evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.toSummaryString(Ljava/lang/String;Z)Ljava/lang/String;: I12 Branch 226 IFEQ L2512 - false
   * Goal 2. weka.classifiers.Evaluation.toSummaryString(Ljava/lang/String;Z)Ljava/lang/String;: I18 Branch 227 IFEQ L2512 - true
   */

  @Test
  public void test02()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertNotNull(instances0);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertNotNull(evaluation0);
      
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      assertEquals("The kernel to use.", gaussianProcesses0.kernelTipText());
      assertFalse(gaussianProcesses0.getDebug());
      assertEquals("The level of Gaussian Noise (added to the diagonal of the Covariance Matrix), after the target has been normalized/standardized/left unchanged).", gaussianProcesses0.noiseTipText());
      assertEquals(1.0, gaussianProcesses0.getNoise(), 0.01D);
      assertEquals("Determines how/if the data will be transformed.", gaussianProcesses0.filterTypeTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", gaussianProcesses0.debugTipText());
      assertEquals(" Implements Gaussian processes for regression without hyperparameter-tuning. To make choosing an appropriate noise level easier, this implementation applies normalization/standardization to the target attribute as well as the other attributes (if  normalization/standardizaton is turned on). Missing values are replaced by the global mean/mode. Nominal attributes are converted to binary ones. Note that kernel caching is turned off if the kernel used implements CachedKernel.", gaussianProcesses0.globalInfo());
      assertNotNull(gaussianProcesses0);
      assertEquals(2, gaussianProcesses0.FILTER_NONE);
      assertEquals(0, gaussianProcesses0.FILTER_NORMALIZE);
      assertEquals(1, gaussianProcesses0.FILTER_STANDARDIZE);
      
      String string0 = Evaluation.makeOptionString(gaussianProcesses0, false);
      assertEquals("The kernel to use.", gaussianProcesses0.kernelTipText());
      assertFalse(gaussianProcesses0.getDebug());
      assertEquals("The level of Gaussian Noise (added to the diagonal of the Covariance Matrix), after the target has been normalized/standardized/left unchanged).", gaussianProcesses0.noiseTipText());
      assertEquals(1.0, gaussianProcesses0.getNoise(), 0.01D);
      assertEquals("Determines how/if the data will be transformed.", gaussianProcesses0.filterTypeTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", gaussianProcesses0.debugTipText());
      assertEquals(" Implements Gaussian processes for regression without hyperparameter-tuning. To make choosing an appropriate noise level easier, this implementation applies normalization/standardization to the target attribute as well as the other attributes (if  normalization/standardizaton is turned on). Missing values are replaced by the global mean/mode. Nominal attributes are converted to binary ones. Note that kernel caching is turned off if the kernel used implements CachedKernel.", gaussianProcesses0.globalInfo());
      assertEquals("\n\nGeneral options:\n\n-h or -help\n\tOutput help information.\n-synopsis or -info\n\tOutput synopsis for classifier (use in conjunction  with -h)\n-t <name of training file>\n\tSets training file.\n-T <name of test file>\n\tSets test file. If missing, a cross-validation will be performed\n\ton the training data.\n-c <class index>\n\tSets index of class attribute (default: last).\n-x <number of folds>\n\tSets number of folds for cross-validation (default: 10).\n-no-cv\n\tDo not perform any cross validation.\n-split-percentage <percentage>\n\tSets the percentage for the train/test set split, e.g., 66.\n-preserve-order\n\tPreserves the order in the percentage split.\n-s <random number seed>\n\tSets random number seed for cross-validation or percentage split\n\t(default: 1).\n-m <name of file with cost matrix>\n\tSets file with cost matrix.\n-l <name of input file>\n\tSets model input file. In case the filename ends with '.xml',\n\ta PMML file is loaded or, if that fails, options are loaded\n\tfrom the XML file.\n-d <name of output file>\n\tSets model output file. In case the filename ends with '.xml',\n\tonly the options are saved to the XML file, not the model.\n-v\n\tOutputs no statistics for training data.\n-o\n\tOutputs statistics only, not the classifier.\n-i\n\tOutputs detailed information-retrieval statistics for each class.\n-k\n\tOutputs information-theoretic statistics.\n-classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"\n\tUses the specified class for generating the classification output.\n\tE.g.: weka.classifiers.evaluation.output.prediction.PlainText\n-p range\n\tOutputs predictions for test instances (or the train instances if\n\tno test instances provided and -no-cv is used), along with the \n\tattributes in the specified range (and nothing else). \n\tUse '-p 0' if no attributes are desired.\n\tDeprecated: use \"-classifications ...\" instead.\n-distribution\n\tOutputs the distribution instead of only the prediction\n\tin conjunction with the '-p' option (only nominal classes).\n\tDeprecated: use \"-classifications ...\" instead.\n-r\n\tOnly outputs cumulative margin distribution.\n-xml filename | xml-string\n\tRetrieves the options from the XML-data instead of the command line.\n-threshold-file <file>\n\tThe file to save the threshold data to.\n\tThe format is determined by the extensions, e.g., '.arff' for ARFF \n\tformat or '.csv' for CSV.\n-threshold-label <label>\n\tThe class label to determine the threshold data for\n\t(default is the first label)\n\nOptions specific to weka.classifiers.functions.GaussianProcesses:\n\n-D\n\tIf set, classifier is run in debug mode and\n\tmay output additional info to the console\n-L <double>\n\tLevel of Gaussian Noise wrt transformed target. (default 1)\n-N\n\tWhether to 0=normalize/1=standardize/2=neither. (default 0=normalize)\n-K <classname and parameters>\n\tThe Kernel to use.\n\t(default: weka.classifiers.functions.supportVector.PolyKernel)\n\nOptions specific to kernel weka.classifiers.functions.supportVector.PolyKernel:\n\n-D\n\tEnables debugging output (if available) to be printed.\n\t(default: off)\n-no-checks\n\tTurns off all checks - use with caution!\n\t(default: checks on)\n-C <num>\n\tThe size of the cache (a prime number), 0 for full cache and \n\t-1 to turn it off.\n\t(default: 250007)\n-E <num>\n\tThe Exponent to use.\n\t(default: 1.0)\n-L\n\tUse lower-order terms.\n\t(default: no)\n", string0);
      assertNotNull(string0);
      assertEquals(2, gaussianProcesses0.FILTER_NONE);
      assertEquals(0, gaussianProcesses0.FILTER_NORMALIZE);
      assertEquals(1, gaussianProcesses0.FILTER_STANDARDIZE);
      
      String string1 = evaluation0.toSummaryString("\n\nGeneral options:\n\n-h or -help\n\tOutput help information.\n-synopsis or -info\n\tOutput synopsis for classifier (use in conjunction  with -h)\n-t <name of training file>\n\tSets training file.\n-T <name of test file>\n\tSets test file. If missing, a cross-validation will be performed\n\ton the training data.\n-c <class index>\n\tSets index of class attribute (default: last).\n-x <number of folds>\n\tSets number of folds for cross-validation (default: 10).\n-no-cv\n\tDo not perform any cross validation.\n-split-percentage <percentage>\n\tSets the percentage for the train/test set split, e.g., 66.\n-preserve-order\n\tPreserves the order in the percentage split.\n-s <random number seed>\n\tSets random number seed for cross-validation or percentage split\n\t(default: 1).\n-m <name of file with cost matrix>\n\tSets file with cost matrix.\n-l <name of input file>\n\tSets model input file. In case the filename ends with '.xml',\n\ta PMML file is loaded or, if that fails, options are loaded\n\tfrom the XML file.\n-d <name of output file>\n\tSets model output file. In case the filename ends with '.xml',\n\tonly the options are saved to the XML file, not the model.\n-v\n\tOutputs no statistics for training data.\n-o\n\tOutputs statistics only, not the classifier.\n-i\n\tOutputs detailed information-retrieval statistics for each class.\n-k\n\tOutputs information-theoretic statistics.\n-classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"\n\tUses the specified class for generating the classification output.\n\tE.g.: weka.classifiers.evaluation.output.prediction.PlainText\n-p range\n\tOutputs predictions for test instances (or the train instances if\n\tno test instances provided and -no-cv is used), along with the \n\tattributes in the specified range (and nothing else). \n\tUse '-p 0' if no attributes are desired.\n\tDeprecated: use \"-classifications ...\" instead.\n-distribution\n\tOutputs the distribution instead of only the prediction\n\tin conjunction with the '-p' option (only nominal classes).\n\tDeprecated: use \"-classifications ...\" instead.\n-r\n\tOnly outputs cumulative margin distribution.\n-xml filename | xml-string\n\tRetrieves the options from the XML-data instead of the command line.\n-threshold-file <file>\n\tThe file to save the threshold data to.\n\tThe format is determined by the extensions, e.g., '.arff' for ARFF \n\tformat or '.csv' for CSV.\n-threshold-label <label>\n\tThe class label to determine the threshold data for\n\t(default is the first label)\n\nOptions specific to weka.classifiers.functions.GaussianProcesses:\n\n-D\n\tIf set, classifier is run in debug mode and\n\tmay output additional info to the console\n-L <double>\n\tLevel of Gaussian Noise wrt transformed target. (default 1)\n-N\n\tWhether to 0=normalize/1=standardize/2=neither. (default 0=normalize)\n-K <classname and parameters>\n\tThe Kernel to use.\n\t(default: weka.classifiers.functions.supportVector.PolyKernel)\n\nOptions specific to kernel weka.classifiers.functions.supportVector.PolyKernel:\n\n-D\n\tEnables debugging output (if available) to be printed.\n\t(default: off)\n-no-checks\n\tTurns off all checks - use with caution!\n\t(default: checks on)\n-C <num>\n\tThe size of the cache (a prime number), 0 for full cache and \n\t-1 to turn it off.\n\t(default: 250007)\n-E <num>\n\tThe Exponent to use.\n\t(default: 1.0)\n-L\n\tUse lower-order terms.\n\t(default: no)\n", true);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("\n\nGeneral options:\n\n-h or -help\n\tOutput help information.\n-synopsis or -info\n\tOutput synopsis for classifier (use in conjunction  with -h)\n-t <name of training file>\n\tSets training file.\n-T <name of test file>\n\tSets test file. If missing, a cross-validation will be performed\n\ton the training data.\n-c <class index>\n\tSets index of class attribute (default: last).\n-x <number of folds>\n\tSets number of folds for cross-validation (default: 10).\n-no-cv\n\tDo not perform any cross validation.\n-split-percentage <percentage>\n\tSets the percentage for the train/test set split, e.g., 66.\n-preserve-order\n\tPreserves the order in the percentage split.\n-s <random number seed>\n\tSets random number seed for cross-validation or percentage split\n\t(default: 1).\n-m <name of file with cost matrix>\n\tSets file with cost matrix.\n-l <name of input file>\n\tSets model input file. In case the filename ends with '.xml',\n\ta PMML file is loaded or, if that fails, options are loaded\n\tfrom the XML file.\n-d <name of output file>\n\tSets model output file. In case the filename ends with '.xml',\n\tonly the options are saved to the XML file, not the model.\n-v\n\tOutputs no statistics for training data.\n-o\n\tOutputs statistics only, not the classifier.\n-i\n\tOutputs detailed information-retrieval statistics for each class.\n-k\n\tOutputs information-theoretic statistics.\n-classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"\n\tUses the specified class for generating the classification output.\n\tE.g.: weka.classifiers.evaluation.output.prediction.PlainText\n-p range\n\tOutputs predictions for test instances (or the train instances if\n\tno test instances provided and -no-cv is used), along with the \n\tattributes in the specified range (and nothing else). \n\tUse '-p 0' if no attributes are desired.\n\tDeprecated: use \"-classifications ...\" instead.\n-distribution\n\tOutputs the distribution instead of only the prediction\n\tin conjunction with the '-p' option (only nominal classes).\n\tDeprecated: use \"-classifications ...\" instead.\n-r\n\tOnly outputs cumulative margin distribution.\n-xml filename | xml-string\n\tRetrieves the options from the XML-data instead of the command line.\n-threshold-file <file>\n\tThe file to save the threshold data to.\n\tThe format is determined by the extensions, e.g., '.arff' for ARFF \n\tformat or '.csv' for CSV.\n-threshold-label <label>\n\tThe class label to determine the threshold data for\n\t(default is the first label)\n\nOptions specific to weka.classifiers.functions.GaussianProcesses:\n\n-D\n\tIf set, classifier is run in debug mode and\n\tmay output additional info to the console\n-L <double>\n\tLevel of Gaussian Noise wrt transformed target. (default 1)\n-N\n\tWhether to 0=normalize/1=standardize/2=neither. (default 0=normalize)\n-K <classname and parameters>\n\tThe Kernel to use.\n\t(default: weka.classifiers.functions.supportVector.PolyKernel)\n\nOptions specific to kernel weka.classifiers.functions.supportVector.PolyKernel:\n\n-D\n\tEnables debugging output (if available) to be printed.\n\t(default: off)\n-no-checks\n\tTurns off all checks - use with caution!\n\t(default: checks on)\n-C <num>\n\tThe size of the cache (a prime number), 0 for full cache and \n\t-1 to turn it off.\n\t(default: 250007)\n-E <num>\n\tThe Exponent to use.\n\t(default: 1.0)\n-L\n\tUse lower-order terms.\n\t(default: no)\n\nTotal Number of Instances                0     \n", string1);
      assertNotNull(string1);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.setDiscardPredictions(Z)V: I12 Branch 6 IFEQ L449 - true
   */

  @Test
  public void test03()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertNotNull(instances0);
      
      CostMatrix costMatrix0 = new CostMatrix(0);
      assertEquals(0, costMatrix0.size());
      assertEquals(0, costMatrix0.numColumns());
      assertEquals(0, costMatrix0.numRows());
      assertNotNull(costMatrix0);
      
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, costMatrix0.size());
      assertEquals(0, costMatrix0.numColumns());
      assertEquals(0, costMatrix0.numRows());
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertNotNull(evaluation0);
      
      evaluation0.setDiscardPredictions(false);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, costMatrix0.size());
      assertEquals(0, costMatrix0.numColumns());
      assertEquals(0, costMatrix0.numRows());
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
  }

  //Test case number: 4
  /*
   * 6 covered goals:
   * Goal 1. weka.classifiers.Evaluation.toCumulativeMarginDistributionString()Ljava/lang/String;: I7 Branch 222 IFNE L2453 - true
   * Goal 2. weka.classifiers.Evaluation.toCumulativeMarginDistributionString()Ljava/lang/String;: I46 Branch 223 IF_ICMPGT L2459 - true
   * Goal 3. weka.classifiers.Evaluation.toCumulativeMarginDistributionString()Ljava/lang/String;: I46 Branch 223 IF_ICMPGT L2459 - false
   * Goal 4. weka.classifiers.Evaluation.toCumulativeMarginDistributionString()Ljava/lang/String;: I58 Branch 224 IFEQ L2460 - true
   * Goal 5. weka.classifiers.Evaluation.toCumulativeMarginDistributionString()Ljava/lang/String;: I118 Branch 225 IFNE L2466 - true
   * Goal 6. weka.classifiers.Evaluation.toCumulativeMarginDistributionString()Ljava/lang/String;: I118 Branch 225 IFNE L2466 - false
   */

  @Test
  public void test04()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertNotNull(instances0);
      
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertNotNull(evaluation0);
      
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals(" -1       0    \n", string0);
      assertNotNull(string0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.unweightedMicroFmeasure()D: I23 Branch 318 IF_ICMPGE L3316 - true
   */

  @Test
  public void test05()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertNotNull(instances0);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertNotNull(evaluation0);
      
      double double0 = evaluation0.unweightedMicroFmeasure();
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.getHeader()Lweka/core/Instances;: root-Branch
   */

  @Test
  public void test06()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertNotNull(instances0);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertNotNull(evaluation0);
      
      Instances instances1 = evaluation0.getHeader();
      assertTrue(instances1.equals((Object)instances0));
      assertTrue(instances0.equals((Object)instances1));
      assertNotSame(instances1, instances0);
      assertNotSame(instances0, instances1);
      assertEquals(2, instances1.numAttributes());
      assertEquals(0, instances1.numClasses());
      assertEquals(1, instances1.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances1.relationName());
      assertTrue(instances1.checkForStringAttributes());
      assertEquals(0, instances1.size());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01D);
      assertEquals(0, instances1.numInstances());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertNotNull(instances1);
  }

  //Test case number: 7
  /*
   * 13 covered goals:
   * Goal 1. weka.classifiers.Evaluation.trueNegativeRate(I)D: I18 Branch 269 IF_ICMPGE L2891 - true
   * Goal 2. weka.classifiers.Evaluation.trueNegativeRate(I)D: I18 Branch 269 IF_ICMPGE L2891 - false
   * Goal 3. weka.classifiers.Evaluation.trueNegativeRate(I)D: I26 Branch 270 IF_ICMPEQ L2892 - true
   * Goal 4. weka.classifiers.Evaluation.trueNegativeRate(I)D: I26 Branch 270 IF_ICMPEQ L2892 - false
   * Goal 5. weka.classifiers.Evaluation.trueNegativeRate(I)D: I38 Branch 271 IF_ICMPGE L2893 - true
   * Goal 6. weka.classifiers.Evaluation.trueNegativeRate(I)D: I38 Branch 271 IF_ICMPGE L2893 - false
   * Goal 7. weka.classifiers.Evaluation.trueNegativeRate(I)D: I46 Branch 272 IF_ICMPEQ L2894 - true
   * Goal 8. weka.classifiers.Evaluation.trueNegativeRate(I)D: I46 Branch 272 IF_ICMPEQ L2894 - false
   * Goal 9. weka.classifiers.Evaluation.trueNegativeRate(I)D: I91 Branch 273 IFNE L2901 - false
   * Goal 10. weka.classifiers.Evaluation.weightedTrueNegativeRate()D: I21 Branch 274 IF_ICMPGE L2916 - false
   * Goal 11. weka.classifiers.Evaluation.weightedTrueNegativeRate()D: I33 Branch 275 IF_ICMPGE L2917 - true
   * Goal 12. weka.classifiers.Evaluation.weightedTrueNegativeRate()D: I33 Branch 275 IF_ICMPGE L2917 - false
   * Goal 13. weka.classifiers.Evaluation.weightedTrueNegativeRate()D: I85 Branch 276 IF_ICMPGE L2924 - false
   */

  @Test
  public void test07()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertNotNull(testInstances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Instances instances0 = testInstances0.generate();
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertNotNull(instances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertNotNull(evaluation0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      double double0 = evaluation0.weightedTrueNegativeRate();
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.meanAbsoluteError()D: root-Branch
   */

  @Test
  public void test08()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertNotNull(instances0);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertNotNull(evaluation0);
      
      double double0 = evaluation0.meanAbsoluteError();
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals(Double.NaN, double0, 0.01D);
  }

  //Test case number: 9
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.SFEntropyGain()D: I7 Branch 218 IFNE L2423 - false
   * Goal 2. weka.classifiers.Evaluation.SFEntropyGain()D: I13 Branch 219 IFNE L2423 - true
   */

  @Test
  public void test09()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertNotNull(testInstances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Instances instances0 = testInstances0.generate();
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertNotNull(instances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertNotNull(evaluation0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      double double0 = evaluation0.SFEntropyGain();
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0.0, double0, 0.01D);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
  }

  //Test case number: 10
  /*
   * 19 covered goals:
   * Goal 1. weka.classifiers.Evaluation.toMatrixString()Ljava/lang/String;: root-Branch
   * Goal 2. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I126 Branch 239 IFNE L2640 - true
   * Goal 3. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I162 Branch 240 IF_ICMPGE L2647 - true
   * Goal 4. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I162 Branch 240 IF_ICMPGE L2647 - false
   * Goal 5. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I174 Branch 241 IF_ICMPGE L2648 - true
   * Goal 6. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I174 Branch 241 IF_ICMPGE L2648 - false
   * Goal 7. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I192 Branch 242 IFGE L2650 - true
   * Goal 8. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I207 Branch 243 IFLE L2653 - true
   * Goal 9. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I225 Branch 244 IFNE L2657 - false
   * Goal 10. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I236 Branch 245 IFLT L2657 - true
   * Goal 11. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I267 Branch 246 IFEQ L2663 - true
   * Goal 12. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I311 Branch 247 IF_ICMPGE L2667 - true
   * Goal 13. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I311 Branch 247 IF_ICMPGE L2667 - false
   * Goal 14. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I318 Branch 248 IFEQ L2668 - true
   * Goal 15. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I375 Branch 249 IF_ICMPGE L2676 - true
   * Goal 16. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I375 Branch 249 IF_ICMPGE L2676 - false
   * Goal 17. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I387 Branch 250 IF_ICMPGE L2677 - true
   * Goal 18. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I387 Branch 250 IF_ICMPGE L2677 - false
   * Goal 19. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I404 Branch 251 IFEQ L2678 - true
   */

  @Test
  public void test10()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertNotNull(testInstances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Instances instances0 = testInstances0.generate();
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertNotNull(instances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertNotNull(evaluation0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      String string0 = evaluation0.toMatrixString();
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      assertNotNull(string0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.SFEntropyGain()D: I7 Branch 218 IFNE L2423 - true
   */

  @Test
  public void test11()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertNotNull(instances0);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertNotNull(evaluation0);
      
      evaluation0.useNoPriors();
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      
      double double0 = evaluation0.SFEntropyGain();
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.getDiscardPredictions()Z: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertNotNull(instances0);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertNotNull(evaluation0);
      
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertFalse(boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.errorRate()D: I7 Branch 191 IFNE L2138 - false
   */

  @Test
  public void test13()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      assertFalse(m5Rules0.getUnpruned());
      assertEquals("Whether to generate rules (decision list) rather than a tree.", m5Rules0.generateRulesTipText());
      assertFalse(m5Rules0.getDebug());
      assertEquals("Whether to use unsmoothed predictions.", m5Rules0.useUnsmoothedTipText());
      assertFalse(m5Rules0.getBuildRegressionTree());
      assertEquals("The minimum number of instances to allow at a leaf node.", m5Rules0.minNumInstancesTipText());
      assertEquals(4.0, m5Rules0.getMinNumInstances(), 0.01D);
      assertEquals("Whether unpruned tree/rules are to be generated.", m5Rules0.unprunedTipText());
      assertFalse(m5Rules0.getUseUnsmoothed());
      assertEquals("Whether to generate a regression tree/rule instead of a model tree/rule.", m5Rules0.buildRegressionTreeTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", m5Rules0.debugTipText());
      assertNotNull(m5Rules0);
      
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      assertFalse(m5Rules0.getUnpruned());
      assertEquals("Whether to generate rules (decision list) rather than a tree.", m5Rules0.generateRulesTipText());
      assertFalse(m5Rules0.getDebug());
      assertEquals("Whether to use unsmoothed predictions.", m5Rules0.useUnsmoothedTipText());
      assertFalse(m5Rules0.getBuildRegressionTree());
      assertEquals("The minimum number of instances to allow at a leaf node.", m5Rules0.minNumInstancesTipText());
      assertEquals(4.0, m5Rules0.getMinNumInstances(), 0.01D);
      assertEquals("Whether unpruned tree/rules are to be generated.", m5Rules0.unprunedTipText());
      assertFalse(m5Rules0.getUseUnsmoothed());
      assertEquals("Whether to generate a regression tree/rule instead of a model tree/rule.", m5Rules0.buildRegressionTreeTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", m5Rules0.debugTipText());
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertNotNull(capabilities0);
      
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(4, testInstances0.getNumAttributes());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getClassType());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(m5Rules0.getUnpruned());
      assertEquals("Whether to generate rules (decision list) rather than a tree.", m5Rules0.generateRulesTipText());
      assertFalse(m5Rules0.getDebug());
      assertEquals("Whether to use unsmoothed predictions.", m5Rules0.useUnsmoothedTipText());
      assertFalse(m5Rules0.getBuildRegressionTree());
      assertEquals("The minimum number of instances to allow at a leaf node.", m5Rules0.minNumInstancesTipText());
      assertEquals(4.0, m5Rules0.getMinNumInstances(), 0.01D);
      assertEquals("Whether unpruned tree/rules are to be generated.", m5Rules0.unprunedTipText());
      assertFalse(m5Rules0.getUseUnsmoothed());
      assertEquals("Whether to generate a regression tree/rule instead of a model tree/rule.", m5Rules0.buildRegressionTreeTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", m5Rules0.debugTipText());
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertNotNull(testInstances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Instances instances0 = testInstances0.generate();
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(3, instances0.classIndex());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.numClasses());
      assertEquals(20, instances0.numInstances());
      assertEquals(4, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(4, testInstances0.getNumAttributes());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getClassType());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(m5Rules0.getUnpruned());
      assertEquals("Whether to generate rules (decision list) rather than a tree.", m5Rules0.generateRulesTipText());
      assertFalse(m5Rules0.getDebug());
      assertEquals("Whether to use unsmoothed predictions.", m5Rules0.useUnsmoothedTipText());
      assertFalse(m5Rules0.getBuildRegressionTree());
      assertEquals("The minimum number of instances to allow at a leaf node.", m5Rules0.minNumInstancesTipText());
      assertEquals(4.0, m5Rules0.getMinNumInstances(), 0.01D);
      assertEquals("Whether unpruned tree/rules are to be generated.", m5Rules0.unprunedTipText());
      assertFalse(m5Rules0.getUseUnsmoothed());
      assertEquals("Whether to generate a regression tree/rule instead of a model tree/rule.", m5Rules0.buildRegressionTreeTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", m5Rules0.debugTipText());
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertNotNull(instances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(3, instances0.classIndex());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.numClasses());
      assertEquals(20, instances0.numInstances());
      assertEquals(4, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(4, testInstances0.getNumAttributes());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getClassType());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(m5Rules0.getUnpruned());
      assertEquals("Whether to generate rules (decision list) rather than a tree.", m5Rules0.generateRulesTipText());
      assertFalse(m5Rules0.getDebug());
      assertEquals("Whether to use unsmoothed predictions.", m5Rules0.useUnsmoothedTipText());
      assertFalse(m5Rules0.getBuildRegressionTree());
      assertEquals("The minimum number of instances to allow at a leaf node.", m5Rules0.minNumInstancesTipText());
      assertEquals(4.0, m5Rules0.getMinNumInstances(), 0.01D);
      assertEquals("Whether unpruned tree/rules are to be generated.", m5Rules0.unprunedTipText());
      assertFalse(m5Rules0.getUseUnsmoothed());
      assertEquals("Whether to generate a regression tree/rule instead of a model tree/rule.", m5Rules0.buildRegressionTreeTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", m5Rules0.debugTipText());
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertNotNull(evaluation0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      double double0 = evaluation0.errorRate();
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(3, instances0.classIndex());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.numClasses());
      assertEquals(20, instances0.numInstances());
      assertEquals(4, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(4, testInstances0.getNumAttributes());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getClassType());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(m5Rules0.getUnpruned());
      assertEquals("Whether to generate rules (decision list) rather than a tree.", m5Rules0.generateRulesTipText());
      assertFalse(m5Rules0.getDebug());
      assertEquals("Whether to use unsmoothed predictions.", m5Rules0.useUnsmoothedTipText());
      assertFalse(m5Rules0.getBuildRegressionTree());
      assertEquals("The minimum number of instances to allow at a leaf node.", m5Rules0.minNumInstancesTipText());
      assertEquals(4.0, m5Rules0.getMinNumInstances(), 0.01D);
      assertEquals("Whether unpruned tree/rules are to be generated.", m5Rules0.unprunedTipText());
      assertFalse(m5Rules0.getUseUnsmoothed());
      assertEquals("Whether to generate a regression tree/rule instead of a model tree/rule.", m5Rules0.buildRegressionTreeTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", m5Rules0.debugTipText());
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.wekaStaticWrapper(Lweka/classifiers/Sourcable;Ljava/lang/String;)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      assertEquals("Class for building and using a 0-R classifier. Predicts the mean (for a numeric class) or the mode (for a nominal class).", zeroR0.globalInfo());
      assertEquals("If set to true, classifier may output additional info to the console.", zeroR0.debugTipText());
      assertFalse(zeroR0.getDebug());
      assertNotNull(zeroR0);
      
      String string0 = Evaluation.wekaStaticWrapper((Sourcable) zeroR0, "Class for a Naive Bayes classifier using estimator classes. Numeric estimator precision values are chosen based on analysis of the  training data. For this reason, the classifier is not an UpdateableClassifier (which in typical usage are initialized with zero training instancs) -- if you need the UpdateableClassifier functionality, use the NaiveBayesUpdateable classifier. The NaiveBayesUpdateable classifier will  use a default precision of 0.1 for numeric attributes when buildClassifier is called with zero training instances.\n\nFor more information on Naive Bayes classifiers, see\n\n");
      assertEquals("Class for building and using a 0-R classifier. Predicts the mean (for a numeric class) or the mode (for a nominal class).", zeroR0.globalInfo());
      assertEquals("If set to true, classifier may output additional info to the console.", zeroR0.debugTipText());
      assertFalse(zeroR0.getDebug());
      assertEquals("// Generated with Weka 3.7.7\n//\n// This code is public domain and comes with no warranty.\n//\n// Timestamp: Fri Feb 14 20:21:21 GMT 2014\n\npackage weka.classifiers;\n\nimport weka.core.Attribute;\nimport weka.core.Capabilities;\nimport weka.core.Capabilities.Capability;\nimport weka.core.Instance;\nimport weka.core.Instances;\nimport weka.core.RevisionUtils;\nimport weka.classifiers.Classifier;\nimport weka.classifiers.AbstractClassifier;\n\npublic class WekaWrapper\n  extends AbstractClassifier {\n\n  /**\n   * Returns only the toString() method.\n   *\n   * @return a string describing the classifier\n   */\n  public String globalInfo() {\n    return toString();\n  }\n\n  /**\n   * Returns the capabilities of this classifier.\n   *\n   * @return the capabilities\n   */\n  public Capabilities getCapabilities() {\n    weka.core.Capabilities result = new weka.core.Capabilities(this);\n\n    result.enable(weka.core.Capabilities.Capability.NOMINAL_ATTRIBUTES);\n    result.enable(weka.core.Capabilities.Capability.NUMERIC_ATTRIBUTES);\n    result.enable(weka.core.Capabilities.Capability.DATE_ATTRIBUTES);\n    result.enable(weka.core.Capabilities.Capability.STRING_ATTRIBUTES);\n    result.enable(weka.core.Capabilities.Capability.RELATIONAL_ATTRIBUTES);\n    result.enable(weka.core.Capabilities.Capability.MISSING_VALUES);\n    result.enable(weka.core.Capabilities.Capability.NOMINAL_CLASS);\n    result.enable(weka.core.Capabilities.Capability.NUMERIC_CLASS);\n    result.enable(weka.core.Capabilities.Capability.DATE_CLASS);\n    result.enable(weka.core.Capabilities.Capability.MISSING_CLASS_VALUES);\n\n\n    result.setMinimumNumberInstances(0);\n\n    return result;\n  }\n\n  /**\n   * only checks the data against its capabilities.\n   *\n   * @param i the training data\n   */\n  public void buildClassifier(Instances i) throws Exception {\n    // can classifier handle the data?\n    getCapabilities().testWithFail(i);\n  }\n\n  /**\n   * Classifies the given instance.\n   *\n   * @param i the instance to classify\n   * @return the classification result\n   */\n  public double classifyInstance(Instance i) throws Exception {\n    Object[] s = new Object[i.numAttributes()];\n    \n    for (int j = 0; j < s.length; j++) {\n      if (!i.isMissing(j)) {\n        if (i.attribute(j).isNominal())\n          s[j] = new String(i.stringValue(j));\n        else if (i.attribute(j).isNumeric())\n          s[j] = new Double(i.value(j));\n      }\n    }\n    \n    // set class value to missing\n    s[i.classIndex()] = null;\n    \n    return Class for a Naive Bayes classifier using estimator classes. Numeric estimator precision values are chosen based on analysis of the  training data. For this reason, the classifier is not an UpdateableClassifier (which in typical usage are initialized with zero training instancs) -- if you need the UpdateableClassifier functionality, use the NaiveBayesUpdateable classifier. The NaiveBayesUpdateable classifier will  use a default precision of 0.1 for numeric attributes when buildClassifier is called with zero training instances.\n\nFor more information on Naive Bayes classifiers, see\n\n.classify(s);\n  }\n\n  /**\n   * Returns the revision string.\n   * \n   * @return        the revision\n   */\n  public String getRevision() {\n    return RevisionUtils.extract(\"1.0\");\n  }\n\n  /**\n   * Returns only the classnames and what classifier it is based on.\n   *\n   * @return a short description\n   */\n  public String toString() {\n    return \"Auto-generated classifier wrapper, based on weka.classifiers.rules.ZeroR (generated with Weka 3.7.7).\\n\" + this.getClass().getName() + \"/Class for a Naive Bayes classifier using estimator classes. Numeric estimator precision values are chosen based on analysis of the  training data. For this reason, the classifier is not an UpdateableClassifier (which in typical usage are initialized with zero training instancs) -- if you need the UpdateableClassifier functionality, use the NaiveBayesUpdateable classifier. The NaiveBayesUpdateable classifier will  use a default precision of 0.1 for numeric attributes when buildClassifier is called with zero training instances.\n\nFor more information on Naive Bayes classifiers, see\n\n\";\n  }\n\n  /**\n   * Runs the classfier from commandline.\n   *\n   * @param args the commandline arguments\n   */\n  public static void main(String args[]) {\n    runClassifier(new WekaWrapper(), args);\n  }\n}\n\nclass Class for a Naive Bayes classifier using estimator classes. Numeric estimator precision values are chosen based on analysis of the  training data. For this reason, the classifier is not an UpdateableClassifier (which in typical usage are initialized with zero training instancs) -- if you need the UpdateableClassifier functionality, use the NaiveBayesUpdateable classifier. The NaiveBayesUpdateable classifier will  use a default precision of 0.1 for numeric attributes when buildClassifier is called with zero training instances.\n\nFor more information on Naive Bayes classifiers, see\n\n {\n  public static double classify(Object[] i) {\n    return 0.0;\n  }\n}\n", string0);
      assertNotNull(string0);
  }

  //Test case number: 15
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.SFMeanPriorEntropy()D: I7 Branch 214 IFNE L2383 - false
   * Goal 2. weka.classifiers.Evaluation.SFMeanPriorEntropy()D: I13 Branch 215 IFNE L2383 - true
   */

  @Test
  public void test15()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertNotNull(instances0);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertNotNull(evaluation0);
      
      double double0 = evaluation0.SFMeanPriorEntropy();
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals(Double.NaN, double0, 0.01D);
  }

  //Test case number: 16
  /*
   * 16 covered goals:
   * Goal 1. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I58 Branch 1 IFEQ L410 - true
   * Goal 2. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I124 Branch 4 IFNE L419 - false
   * Goal 3. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I12 Branch 319 IFNE L3335 - false
   * Goal 4. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I54 Branch 320 IF_ICMPGE L3345 - true
   * Goal 5. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I54 Branch 320 IF_ICMPGE L3345 - false
   * Goal 6. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I68 Branch 321 IFNE L3347 - false
   * Goal 7. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I105 Branch 322 IF_ICMPGE L3353 - true
   * Goal 8. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I105 Branch 322 IF_ICMPGE L3353 - false
   * Goal 9. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I115 Branch 323 IFNE L3354 - false
   * Goal 10. weka.classifiers.Evaluation.addNumericTrainClass(DD)V: I9 Branch 385 IFLE L3931 - true
   * Goal 11. weka.classifiers.Evaluation.addNumericTrainClass(DD)V: I9 Branch 385 IFLE L3931 - false
   * Goal 12. weka.classifiers.Evaluation.addNumericTrainClass(DD)V: I24 Branch 386 IFGE L3934 - true
   * Goal 13. weka.classifiers.Evaluation.addNumericTrainClass(DD)V: I24 Branch 386 IFGE L3934 - false
   * Goal 14. weka.classifiers.Evaluation.addNumericTrainClass(DD)V: I37 Branch 387 IFNONNULL L3939 - true
   * Goal 15. weka.classifiers.Evaluation.addNumericTrainClass(DD)V: I37 Branch 387 IFNONNULL L3939 - false
   * Goal 16. weka.classifiers.Evaluation.addNumericTrainClass(DD)V: I60 Branch 388 IF_ICMPNE L3943 - true
   */

  @Test
  public void test16()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      assertEquals(4.0, m5Rules0.getMinNumInstances(), 0.01D);
      assertEquals("The minimum number of instances to allow at a leaf node.", m5Rules0.minNumInstancesTipText());
      assertFalse(m5Rules0.getUseUnsmoothed());
      assertFalse(m5Rules0.getDebug());
      assertEquals("Whether to generate rules (decision list) rather than a tree.", m5Rules0.generateRulesTipText());
      assertFalse(m5Rules0.getUnpruned());
      assertEquals("Whether unpruned tree/rules are to be generated.", m5Rules0.unprunedTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", m5Rules0.debugTipText());
      assertEquals("Whether to use unsmoothed predictions.", m5Rules0.useUnsmoothedTipText());
      assertFalse(m5Rules0.getBuildRegressionTree());
      assertEquals("Whether to generate a regression tree/rule instead of a model tree/rule.", m5Rules0.buildRegressionTreeTipText());
      assertNotNull(m5Rules0);
      
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      assertEquals(4.0, m5Rules0.getMinNumInstances(), 0.01D);
      assertEquals("The minimum number of instances to allow at a leaf node.", m5Rules0.minNumInstancesTipText());
      assertFalse(m5Rules0.getUseUnsmoothed());
      assertFalse(m5Rules0.getDebug());
      assertEquals("Whether to generate rules (decision list) rather than a tree.", m5Rules0.generateRulesTipText());
      assertFalse(m5Rules0.getUnpruned());
      assertEquals("Whether unpruned tree/rules are to be generated.", m5Rules0.unprunedTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", m5Rules0.debugTipText());
      assertEquals("Whether to use unsmoothed predictions.", m5Rules0.useUnsmoothedTipText());
      assertFalse(m5Rules0.getBuildRegressionTree());
      assertEquals("Whether to generate a regression tree/rule instead of a model tree/rule.", m5Rules0.buildRegressionTreeTipText());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertFalse(capabilities0.hasDependencies());
      assertNotNull(capabilities0);
      
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(4, testInstances0.getNumAttributes());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(4.0, m5Rules0.getMinNumInstances(), 0.01D);
      assertEquals("The minimum number of instances to allow at a leaf node.", m5Rules0.minNumInstancesTipText());
      assertFalse(m5Rules0.getUseUnsmoothed());
      assertFalse(m5Rules0.getDebug());
      assertEquals("Whether to generate rules (decision list) rather than a tree.", m5Rules0.generateRulesTipText());
      assertFalse(m5Rules0.getUnpruned());
      assertEquals("Whether unpruned tree/rules are to be generated.", m5Rules0.unprunedTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", m5Rules0.debugTipText());
      assertEquals("Whether to use unsmoothed predictions.", m5Rules0.useUnsmoothedTipText());
      assertFalse(m5Rules0.getBuildRegressionTree());
      assertEquals("Whether to generate a regression tree/rule instead of a model tree/rule.", m5Rules0.buildRegressionTreeTipText());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertFalse(capabilities0.hasDependencies());
      assertNotNull(testInstances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Instances instances0 = testInstances0.generate();
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(4, testInstances0.getNumAttributes());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(4.0, m5Rules0.getMinNumInstances(), 0.01D);
      assertEquals("The minimum number of instances to allow at a leaf node.", m5Rules0.minNumInstancesTipText());
      assertFalse(m5Rules0.getUseUnsmoothed());
      assertFalse(m5Rules0.getDebug());
      assertEquals("Whether to generate rules (decision list) rather than a tree.", m5Rules0.generateRulesTipText());
      assertFalse(m5Rules0.getUnpruned());
      assertEquals("Whether unpruned tree/rules are to be generated.", m5Rules0.unprunedTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", m5Rules0.debugTipText());
      assertEquals("Whether to use unsmoothed predictions.", m5Rules0.useUnsmoothedTipText());
      assertFalse(m5Rules0.getBuildRegressionTree());
      assertEquals("Whether to generate a regression tree/rule instead of a model tree/rule.", m5Rules0.buildRegressionTreeTipText());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(3, instances0.classIndex());
      assertEquals(20, instances0.size());
      assertEquals(4, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertFalse(capabilities0.hasDependencies());
      assertNotNull(instances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(4, testInstances0.getNumAttributes());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(4.0, m5Rules0.getMinNumInstances(), 0.01D);
      assertEquals("The minimum number of instances to allow at a leaf node.", m5Rules0.minNumInstancesTipText());
      assertFalse(m5Rules0.getUseUnsmoothed());
      assertFalse(m5Rules0.getDebug());
      assertEquals("Whether to generate rules (decision list) rather than a tree.", m5Rules0.generateRulesTipText());
      assertFalse(m5Rules0.getUnpruned());
      assertEquals("Whether unpruned tree/rules are to be generated.", m5Rules0.unprunedTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", m5Rules0.debugTipText());
      assertEquals("Whether to use unsmoothed predictions.", m5Rules0.useUnsmoothedTipText());
      assertFalse(m5Rules0.getBuildRegressionTree());
      assertEquals("Whether to generate a regression tree/rule instead of a model tree/rule.", m5Rules0.buildRegressionTreeTipText());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(3, instances0.classIndex());
      assertEquals(20, instances0.size());
      assertEquals(4, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertFalse(capabilities0.hasDependencies());
      assertNotNull(evaluation0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      assertEquals("Sets whether the minimum expected cost criteria will be used. If this is false, the training data will be reweighted according to the costs assigned to each class. If true, the minimum expected cost criteria will be used.", costSensitiveClassifier0.minimizeExpectedCostTipText());
      assertEquals("The random number seed to be used.", costSensitiveClassifier0.seedTipText());
      assertFalse(costSensitiveClassifier0.getMinimizeExpectedCost());
      assertEquals("If set to true, classifier may output additional info to the console.", costSensitiveClassifier0.debugTipText());
      assertEquals(1, costSensitiveClassifier0.getSeed());
      assertEquals("Sets the directory where cost files are loaded from. This option is used when the costMatrixSource is set to \"On Demand\".", costSensitiveClassifier0.onDemandDirectoryTipText());
      assertEquals("The base classifier to be used.", costSensitiveClassifier0.classifierTipText());
      assertEquals(0, costSensitiveClassifier0.graphType());
      assertEquals("Sets the cost matrix explicitly. This matrix is used if the costMatrixSource property is set to \"Supplied\".", costSensitiveClassifier0.costMatrixTipText());
      assertFalse(costSensitiveClassifier0.getDebug());
      assertEquals("A metaclassifier that makes its base classifier cost-sensitive. Two methods can be used to introduce cost-sensitivity: reweighting training instances according to the total cost assigned to each class; or predicting the class with minimum expected misclassification cost (rather than the most likely class). Performance can often be improved by using a Bagged classifier to improve the probability estimates of the base classifier.", costSensitiveClassifier0.globalInfo());
      assertNotNull(costSensitiveClassifier0);
      assertEquals(1, costSensitiveClassifier0.MATRIX_ON_DEMAND);
      assertEquals(2, costSensitiveClassifier0.MATRIX_SUPPLIED);
      
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      assertEquals("Sets whether the minimum expected cost criteria will be used. If this is false, the training data will be reweighted according to the costs assigned to each class. If true, the minimum expected cost criteria will be used.", costSensitiveClassifier0.minimizeExpectedCostTipText());
      assertEquals("The random number seed to be used.", costSensitiveClassifier0.seedTipText());
      assertFalse(costSensitiveClassifier0.getMinimizeExpectedCost());
      assertEquals("If set to true, classifier may output additional info to the console.", costSensitiveClassifier0.debugTipText());
      assertEquals(1, costSensitiveClassifier0.getSeed());
      assertEquals("Sets the directory where cost files are loaded from. This option is used when the costMatrixSource is set to \"On Demand\".", costSensitiveClassifier0.onDemandDirectoryTipText());
      assertEquals("The base classifier to be used.", costSensitiveClassifier0.classifierTipText());
      assertEquals(0, costSensitiveClassifier0.graphType());
      assertEquals("Sets the cost matrix explicitly. This matrix is used if the costMatrixSource property is set to \"Supplied\".", costSensitiveClassifier0.costMatrixTipText());
      assertFalse(costSensitiveClassifier0.getDebug());
      assertEquals("A metaclassifier that makes its base classifier cost-sensitive. Two methods can be used to introduce cost-sensitivity: reweighting training instances according to the total cost assigned to each class; or predicting the class with minimum expected misclassification cost (rather than the most likely class). Performance can often be improved by using a Bagged classifier to improve the probability estimates of the base classifier.", costSensitiveClassifier0.globalInfo());
      assertEquals(1, costMatrix0.numColumns());
      assertEquals(1, costMatrix0.numRows());
      assertEquals(1, costMatrix0.size());
      assertNotNull(costMatrix0);
      assertEquals(1, costSensitiveClassifier0.MATRIX_ON_DEMAND);
      assertEquals(2, costSensitiveClassifier0.MATRIX_SUPPLIED);
      
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class has to be nominal if cost matrix given!
         //
      }
  }

  //Test case number: 17
  /*
   * 9 covered goals:
   * Goal 1. weka.classifiers.Evaluation.evaluateModelOnceAndRecordPrediction(Lweka/classifiers/Classifier;Lweka/core/Instance;)D: root-Branch
   * Goal 2. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;Lweka/core/Instances;[Ljava/lang/Object;)[D: I110 Branch 171 IF_ICMPGE L1658 - false
   * Goal 3. weka.classifiers.Evaluation.evaluationForSingleInstance([DLweka/core/Instance;Z)D: I7 Branch 173 IFEQ L1684 - false
   * Goal 4. weka.classifiers.Evaluation.evaluationForSingleInstance([DLweka/core/Instance;Z)D: I25 Branch 174 IFGT L1686 - false
   * Goal 5. weka.classifiers.Evaluation.evaluationForSingleInstance(Lweka/classifiers/Classifier;Lweka/core/Instance;Z)D: I19 Branch 181 IFEQ L1726 - true
   * Goal 6. weka.classifiers.Evaluation.updateStatsForClassifier([DLweka/core/Instance;)V: I13 Branch 362 IFNE L3699 - false
   * Goal 7. weka.classifiers.Evaluation.updateMargins([DID)V: I21 Branch 381 IF_ICMPGE L3881 - false
   * Goal 8. weka.classifiers.Evaluation.updateMargins([DID)V: I29 Branch 382 IF_ICMPEQ L3882 - true
   * Goal 9. weka.classifiers.Evaluation.updateMargins([DID)V: I29 Branch 382 IF_ICMPEQ L3882 - false
   */

  @Test
  public void test17()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertNotNull(testInstances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Instances instances0 = testInstances0.generate();
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertNotNull(instances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertNotNull(evaluation0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      assertEquals(10, cVParameterSelection0.getNumFolds());
      assertEquals("Sets the scheme parameters which are to be set by cross-validation.\nThe format for each string should be:\nparam_char lower_bound upper_bound number_of_steps\neg to search a parameter -P from 1 to 10 by increments of 1:\n    \"P 1 10 10\" ", cVParameterSelection0.CVParametersTipText());
      assertEquals(1, cVParameterSelection0.getSeed());
      assertEquals("If set to true, classifier may output additional info to the console.", cVParameterSelection0.debugTipText());
      assertEquals("The random number seed to be used.", cVParameterSelection0.seedTipText());
      assertEquals(0, cVParameterSelection0.graphType());
      assertEquals("Get the number of folds used for cross-validation.", cVParameterSelection0.numFoldsTipText());
      assertEquals("The base classifier to be used.", cVParameterSelection0.classifierTipText());
      assertFalse(cVParameterSelection0.getDebug());
      assertNotNull(cVParameterSelection0);
      
      Object[] objectArray0 = new Object[10];
      try {
        double[] doubleArray0 = evaluation0.evaluateModel((Classifier) cVParameterSelection0, instances0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
      }
  }

  //Test case number: 18
  /*
   * 69 covered goals:
   * Goal 1. weka.classifiers.Evaluation.toClassDetailsString()Ljava/lang/String;: root-Branch
   * Goal 2. weka.classifiers.Evaluation.weightedRecall()D: root-Branch
   * Goal 3. weka.classifiers.Evaluation.recall(I)D: root-Branch
   * Goal 4. weka.classifiers.Evaluation.areaUnderROC(I)D: I7 Branch 7 IFNONNULL L475 - false
   * Goal 5. weka.classifiers.Evaluation.weightedAreaUnderROC()D: I21 Branch 8 IF_ICMPGE L493 - true
   * Goal 6. weka.classifiers.Evaluation.weightedAreaUnderROC()D: I21 Branch 8 IF_ICMPGE L493 - false
   * Goal 7. weka.classifiers.Evaluation.weightedAreaUnderROC()D: I33 Branch 9 IF_ICMPGE L494 - true
   * Goal 8. weka.classifiers.Evaluation.weightedAreaUnderROC()D: I33 Branch 9 IF_ICMPGE L494 - false
   * Goal 9. weka.classifiers.Evaluation.weightedAreaUnderROC()D: I85 Branch 10 IF_ICMPGE L501 - true
   * Goal 10. weka.classifiers.Evaluation.weightedAreaUnderROC()D: I85 Branch 10 IF_ICMPGE L501 - false
   * Goal 11. weka.classifiers.Evaluation.weightedAreaUnderROC()D: I99 Branch 11 IFNE L503 - true
   * Goal 12. weka.classifiers.Evaluation.areaUnderPRC(I)D: I7 Branch 12 IFNONNULL L521 - false
   * Goal 13. weka.classifiers.Evaluation.weightedAreaUnderPRC()D: I21 Branch 13 IF_ICMPGE L539 - true
   * Goal 14. weka.classifiers.Evaluation.weightedAreaUnderPRC()D: I21 Branch 13 IF_ICMPGE L539 - false
   * Goal 15. weka.classifiers.Evaluation.weightedAreaUnderPRC()D: I33 Branch 14 IF_ICMPGE L540 - true
   * Goal 16. weka.classifiers.Evaluation.weightedAreaUnderPRC()D: I33 Branch 14 IF_ICMPGE L540 - false
   * Goal 17. weka.classifiers.Evaluation.weightedAreaUnderPRC()D: I85 Branch 15 IF_ICMPGE L547 - true
   * Goal 18. weka.classifiers.Evaluation.weightedAreaUnderPRC()D: I85 Branch 15 IF_ICMPGE L547 - false
   * Goal 19. weka.classifiers.Evaluation.weightedAreaUnderPRC()D: I99 Branch 16 IFNE L549 - true
   * Goal 20. weka.classifiers.Evaluation.toClassDetailsString(Ljava/lang/String;)Ljava/lang/String;: I7 Branch 252 IFNE L2714 - true
   * Goal 21. weka.classifiers.Evaluation.toClassDetailsString(Ljava/lang/String;)Ljava/lang/String;: I57 Branch 253 IF_ICMPGE L2721 - true
   * Goal 22. weka.classifiers.Evaluation.toClassDetailsString(Ljava/lang/String;)Ljava/lang/String;: I57 Branch 253 IF_ICMPGE L2721 - false
   * Goal 23. weka.classifiers.Evaluation.toClassDetailsString(Ljava/lang/String;)Ljava/lang/String;: I143 Branch 254 IFEQ L2731 - true
   * Goal 24. weka.classifiers.Evaluation.toClassDetailsString(Ljava/lang/String;)Ljava/lang/String;: I182 Branch 255 IFEQ L2740 - false
   * Goal 25. weka.classifiers.Evaluation.toClassDetailsString(Ljava/lang/String;)Ljava/lang/String;: I219 Branch 256 IFEQ L2746 - false
   * Goal 26. weka.classifiers.Evaluation.truePositiveRate(I)D: I18 Branch 259 IF_ICMPGE L2810 - true
   * Goal 27. weka.classifiers.Evaluation.truePositiveRate(I)D: I18 Branch 259 IF_ICMPGE L2810 - false
   * Goal 28. weka.classifiers.Evaluation.truePositiveRate(I)D: I26 Branch 260 IF_ICMPNE L2811 - true
   * Goal 29. weka.classifiers.Evaluation.truePositiveRate(I)D: I26 Branch 260 IF_ICMPNE L2811 - false
   * Goal 30. weka.classifiers.Evaluation.truePositiveRate(I)D: I64 Branch 261 IFNE L2816 - false
   * Goal 31. weka.classifiers.Evaluation.weightedTruePositiveRate()D: I21 Branch 262 IF_ICMPGE L2831 - true
   * Goal 32. weka.classifiers.Evaluation.weightedTruePositiveRate()D: I21 Branch 262 IF_ICMPGE L2831 - false
   * Goal 33. weka.classifiers.Evaluation.weightedTruePositiveRate()D: I33 Branch 263 IF_ICMPGE L2832 - true
   * Goal 34. weka.classifiers.Evaluation.weightedTruePositiveRate()D: I33 Branch 263 IF_ICMPGE L2832 - false
   * Goal 35. weka.classifiers.Evaluation.weightedTruePositiveRate()D: I85 Branch 264 IF_ICMPGE L2839 - true
   * Goal 36. weka.classifiers.Evaluation.weightedTruePositiveRate()D: I85 Branch 264 IF_ICMPGE L2839 - false
   * Goal 37. weka.classifiers.Evaluation.falsePositiveRate(I)D: I18 Branch 281 IF_ICMPGE L2976 - true
   * Goal 38. weka.classifiers.Evaluation.falsePositiveRate(I)D: I18 Branch 281 IF_ICMPGE L2976 - false
   * Goal 39. weka.classifiers.Evaluation.falsePositiveRate(I)D: I26 Branch 282 IF_ICMPEQ L2977 - true
   * Goal 40. weka.classifiers.Evaluation.falsePositiveRate(I)D: I26 Branch 282 IF_ICMPEQ L2977 - false
   * Goal 41. weka.classifiers.Evaluation.falsePositiveRate(I)D: I38 Branch 283 IF_ICMPGE L2978 - true
   * Goal 42. weka.classifiers.Evaluation.falsePositiveRate(I)D: I38 Branch 283 IF_ICMPGE L2978 - false
   * Goal 43. weka.classifiers.Evaluation.falsePositiveRate(I)D: I46 Branch 284 IF_ICMPNE L2979 - true
   * Goal 44. weka.classifiers.Evaluation.falsePositiveRate(I)D: I46 Branch 284 IF_ICMPNE L2979 - false
   * Goal 45. weka.classifiers.Evaluation.falsePositiveRate(I)D: I91 Branch 285 IFNE L2986 - false
   * Goal 46. weka.classifiers.Evaluation.weightedFalsePositiveRate()D: I21 Branch 286 IF_ICMPGE L3001 - true
   * Goal 47. weka.classifiers.Evaluation.weightedFalsePositiveRate()D: I21 Branch 286 IF_ICMPGE L3001 - false
   * Goal 48. weka.classifiers.Evaluation.weightedFalsePositiveRate()D: I33 Branch 287 IF_ICMPGE L3002 - true
   * Goal 49. weka.classifiers.Evaluation.weightedFalsePositiveRate()D: I33 Branch 287 IF_ICMPGE L3002 - false
   * Goal 50. weka.classifiers.Evaluation.weightedFalsePositiveRate()D: I85 Branch 288 IF_ICMPGE L3009 - true
   * Goal 51. weka.classifiers.Evaluation.weightedFalsePositiveRate()D: I85 Branch 288 IF_ICMPGE L3009 - false
   * Goal 52. weka.classifiers.Evaluation.precision(I)D: I18 Branch 306 IF_ICMPGE L3200 - true
   * Goal 53. weka.classifiers.Evaluation.precision(I)D: I18 Branch 306 IF_ICMPGE L3200 - false
   * Goal 54. weka.classifiers.Evaluation.precision(I)D: I26 Branch 307 IF_ICMPNE L3201 - true
   * Goal 55. weka.classifiers.Evaluation.precision(I)D: I26 Branch 307 IF_ICMPNE L3201 - false
   * Goal 56. weka.classifiers.Evaluation.precision(I)D: I64 Branch 308 IFNE L3206 - false
   * Goal 57. weka.classifiers.Evaluation.weightedPrecision()D: I21 Branch 309 IF_ICMPGE L3221 - true
   * Goal 58. weka.classifiers.Evaluation.weightedPrecision()D: I21 Branch 309 IF_ICMPGE L3221 - false
   * Goal 59. weka.classifiers.Evaluation.weightedPrecision()D: I33 Branch 310 IF_ICMPGE L3222 - true
   * Goal 60. weka.classifiers.Evaluation.weightedPrecision()D: I33 Branch 310 IF_ICMPGE L3222 - false
   * Goal 61. weka.classifiers.Evaluation.weightedPrecision()D: I85 Branch 311 IF_ICMPGE L3229 - true
   * Goal 62. weka.classifiers.Evaluation.weightedPrecision()D: I85 Branch 311 IF_ICMPGE L3229 - false
   * Goal 63. weka.classifiers.Evaluation.fMeasure(I)D: I22 Branch 312 IFNE L3255 - false
   * Goal 64. weka.classifiers.Evaluation.weightedFMeasure()D: I21 Branch 313 IF_ICMPGE L3270 - true
   * Goal 65. weka.classifiers.Evaluation.weightedFMeasure()D: I21 Branch 313 IF_ICMPGE L3270 - false
   * Goal 66. weka.classifiers.Evaluation.weightedFMeasure()D: I33 Branch 314 IF_ICMPGE L3271 - true
   * Goal 67. weka.classifiers.Evaluation.weightedFMeasure()D: I33 Branch 314 IF_ICMPGE L3271 - false
   * Goal 68. weka.classifiers.Evaluation.weightedFMeasure()D: I85 Branch 315 IF_ICMPGE L3278 - true
   * Goal 69. weka.classifiers.Evaluation.weightedFMeasure()D: I85 Branch 315 IF_ICMPGE L3278 - false
   */

  @Test
  public void test18()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertNotNull(testInstances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Instances instances0 = testInstances0.generate();
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertNotNull(instances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertNotNull(evaluation0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      String string0 = evaluation0.toClassDetailsString();
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      assertNotNull(string0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
  }

  //Test case number: 19
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.crossValidateModel(Lweka/classifiers/Classifier;Lweka/core/Instances;ILjava/util/Random;[Ljava/lang/Object;)V: I20 Branch 18 IFEQ L598 - false
   * Goal 2. weka.classifiers.Evaluation.crossValidateModel(Lweka/classifiers/Classifier;Lweka/core/Instances;ILjava/util/Random;[Ljava/lang/Object;)V: I37 Branch 19 IFLE L605 - false
   */

  @Test
  public void test19()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertNotNull(testInstances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      int int0 = Version.MINOR;
      assertEquals(7, int0);
      
      Instances instances0 = testInstances0.generate();
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(2, instances0.numAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertNotNull(instances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(2, instances0.numAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertNotNull(evaluation0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      SMO sMO0 = new SMO();
      assertEquals("The tolerance parameter (shouldn't be changed).", sMO0.toleranceParameterTipText());
      assertFalse(sMO0.getDebug());
      assertEquals(1, sMO0.getRandomSeed());
      assertFalse(sMO0.getChecksTurnedOff());
      assertEquals("Determines how/if the data will be transformed.", sMO0.filterTypeTipText());
      assertEquals(0.001, sMO0.getToleranceParameter(), 0.01D);
      assertEquals(-1, sMO0.getNumFolds());
      assertEquals("The complexity parameter C.", sMO0.cTipText());
      assertEquals("The kernel to use.", sMO0.kernelTipText());
      assertEquals("Whether to fit logistic models to the outputs (for proper probability estimates).", sMO0.buildLogisticModelsTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", sMO0.debugTipText());
      assertEquals("The number of folds for cross-validation used to generate training data for logistic models (-1 means use training data).", sMO0.numFoldsTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", sMO0.epsilonTipText());
      assertFalse(sMO0.getBuildLogisticModels());
      assertEquals(1.0, sMO0.getC(), 0.01D);
      assertEquals("Random number seed for the cross-validation.", sMO0.randomSeedTipText());
      assertEquals(1.0E-12, sMO0.getEpsilon(), 0.01D);
      assertEquals("Turns time-consuming checks off - use with caution.", sMO0.checksTurnedOffTipText());
      assertNotNull(sMO0);
      assertEquals(1, sMO0.FILTER_STANDARDIZE);
      assertEquals(0, sMO0.FILTER_NORMALIZE);
      assertEquals(2, sMO0.FILTER_NONE);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[6];
      try {
        evaluation0.crossValidateModel((Classifier) sMO0, instances0, 7, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.setDiscardPredictions(Z)V: I12 Branch 6 IFEQ L449 - false
   */

  @Test
  public void test20()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertNotNull(instances0);
      
      HashIndex<Checkbox> hashIndex0 = new HashIndex<Checkbox>();
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertNotNull(hashIndex0);
      
      boolean boolean0 = instances0.containsAll((Collection<?>) hashIndex0);
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertTrue(boolean0);
      
      CostMatrix costMatrix0 = new CostMatrix(0);
      assertEquals(0, costMatrix0.size());
      assertEquals(0, costMatrix0.numColumns());
      assertEquals(0, costMatrix0.numRows());
      assertNotNull(costMatrix0);
      
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      assertEquals(0, costMatrix0.size());
      assertEquals(0, costMatrix0.numColumns());
      assertEquals(0, costMatrix0.numRows());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertNotNull(evaluation0);
      
      evaluation0.setDiscardPredictions(true);
      assertEquals(0, costMatrix0.size());
      assertEquals(0, costMatrix0.numColumns());
      assertEquals(0, costMatrix0.numRows());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertTrue(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I380 Branch 351 IFEQ L3567 - false
   */

  @Test
  public void test21()  throws Throwable  {
      RandomTree randomTree0 = new RandomTree();
      assertEquals("The random number seed used for selecting attributes.", randomTree0.seedTipText());
      assertEquals(1, randomTree0.graphType());
      assertEquals(1, randomTree0.numElements());
      assertEquals(0, randomTree0.getMaxDepth());
      assertEquals(1, randomTree0.getSeed());
      assertEquals(1.0, randomTree0.getMinNum(), 0.01D);
      assertEquals("If set to true, classifier may output additional info to the console.", randomTree0.debugTipText());
      assertEquals(0, randomTree0.getKValue());
      assertEquals(1, randomTree0.numNodes());
      assertEquals("The maximum depth of the tree, 0 for unlimited.", randomTree0.maxDepthTipText());
      assertEquals(0, randomTree0.getNumFolds());
      assertEquals("Whether to allow unclassified instances.", randomTree0.allowUnclassifiedInstancesTipText());
      assertEquals("Determines the amount of data used for backfitting. One fold is used for backfitting, the rest for growing the tree. (Default: 0, no backfitting)", randomTree0.numFoldsTipText());
      assertFalse(randomTree0.getDebug());
      assertEquals("Sets the number of randomly chosen attributes. If 0, log_2(number_of_attributes) + 1 is used.", randomTree0.KValueTipText());
      assertEquals("The minimum total weight of the instances in a leaf.", randomTree0.minNumTipText());
      assertFalse(randomTree0.getAllowUnclassifiedInstances());
      assertEquals("Class for constructing a tree that considers K randomly  chosen attributes at each node. Performs no pruning. Also has an option to allow estimation of class probabilities based on a hold-out set (backfitting).", randomTree0.globalInfo());
      assertNotNull(randomTree0);
      
      String string0 = Evaluation.makeOptionString(randomTree0, false);
      assertEquals("The random number seed used for selecting attributes.", randomTree0.seedTipText());
      assertEquals(1, randomTree0.graphType());
      assertEquals(1, randomTree0.numElements());
      assertEquals(0, randomTree0.getMaxDepth());
      assertEquals(1, randomTree0.getSeed());
      assertEquals(1.0, randomTree0.getMinNum(), 0.01D);
      assertEquals("If set to true, classifier may output additional info to the console.", randomTree0.debugTipText());
      assertEquals(0, randomTree0.getKValue());
      assertEquals(1, randomTree0.numNodes());
      assertEquals("The maximum depth of the tree, 0 for unlimited.", randomTree0.maxDepthTipText());
      assertEquals(0, randomTree0.getNumFolds());
      assertEquals("Whether to allow unclassified instances.", randomTree0.allowUnclassifiedInstancesTipText());
      assertEquals("Determines the amount of data used for backfitting. One fold is used for backfitting, the rest for growing the tree. (Default: 0, no backfitting)", randomTree0.numFoldsTipText());
      assertFalse(randomTree0.getDebug());
      assertEquals("Sets the number of randomly chosen attributes. If 0, log_2(number_of_attributes) + 1 is used.", randomTree0.KValueTipText());
      assertEquals("The minimum total weight of the instances in a leaf.", randomTree0.minNumTipText());
      assertFalse(randomTree0.getAllowUnclassifiedInstances());
      assertEquals("Class for constructing a tree that considers K randomly  chosen attributes at each node. Performs no pruning. Also has an option to allow estimation of class probabilities based on a hold-out set (backfitting).", randomTree0.globalInfo());
      assertEquals("\n\nGeneral options:\n\n-h or -help\n\tOutput help information.\n-synopsis or -info\n\tOutput synopsis for classifier (use in conjunction  with -h)\n-t <name of training file>\n\tSets training file.\n-T <name of test file>\n\tSets test file. If missing, a cross-validation will be performed\n\ton the training data.\n-c <class index>\n\tSets index of class attribute (default: last).\n-x <number of folds>\n\tSets number of folds for cross-validation (default: 10).\n-no-cv\n\tDo not perform any cross validation.\n-split-percentage <percentage>\n\tSets the percentage for the train/test set split, e.g., 66.\n-preserve-order\n\tPreserves the order in the percentage split.\n-s <random number seed>\n\tSets random number seed for cross-validation or percentage split\n\t(default: 1).\n-m <name of file with cost matrix>\n\tSets file with cost matrix.\n-l <name of input file>\n\tSets model input file. In case the filename ends with '.xml',\n\ta PMML file is loaded or, if that fails, options are loaded\n\tfrom the XML file.\n-d <name of output file>\n\tSets model output file. In case the filename ends with '.xml',\n\tonly the options are saved to the XML file, not the model.\n-v\n\tOutputs no statistics for training data.\n-o\n\tOutputs statistics only, not the classifier.\n-i\n\tOutputs detailed information-retrieval statistics for each class.\n-k\n\tOutputs information-theoretic statistics.\n-classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"\n\tUses the specified class for generating the classification output.\n\tE.g.: weka.classifiers.evaluation.output.prediction.PlainText\n-p range\n\tOutputs predictions for test instances (or the train instances if\n\tno test instances provided and -no-cv is used), along with the \n\tattributes in the specified range (and nothing else). \n\tUse '-p 0' if no attributes are desired.\n\tDeprecated: use \"-classifications ...\" instead.\n-distribution\n\tOutputs the distribution instead of only the prediction\n\tin conjunction with the '-p' option (only nominal classes).\n\tDeprecated: use \"-classifications ...\" instead.\n-r\n\tOnly outputs cumulative margin distribution.\n-g\n\tOnly outputs the graph representation of the classifier.\n-xml filename | xml-string\n\tRetrieves the options from the XML-data instead of the command line.\n-threshold-file <file>\n\tThe file to save the threshold data to.\n\tThe format is determined by the extensions, e.g., '.arff' for ARFF \n\tformat or '.csv' for CSV.\n-threshold-label <label>\n\tThe class label to determine the threshold data for\n\t(default is the first label)\n\nOptions specific to weka.classifiers.trees.RandomTree:\n\n-K <number of attributes>\n\tNumber of attributes to randomly investigate\n\t(<0 = int(log_2(#attributes)+1)).\n-M <minimum number of instances>\n\tSet minimum number of instances per leaf.\n-S <num>\n\tSeed for random number generator.\n\t(default 1)\n-depth <num>\n\tThe maximum depth of the tree, 0 for unlimited.\n\t(default 0)\n-N <num>\n\tNumber of folds for backfitting (default 0, no backfitting).\n-U\n\tAllow unclassified instances.\n-D\n\tIf set, classifier is run in debug mode and\n\tmay output additional info to the console\n", string0);
      assertNotNull(string0);
  }

  //Test case number: 22
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I155 Branch 5 IF_ICMPEQ L422 - false
   * Goal 2. weka.classifiers.Evaluation.setNumericPriorsFromBuffer()V: I18 Branch 389 IF_ICMPGE L3965 - true
   */

  @Test
  public void test22()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals(0, testInstances0.getNumString());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertNotNull(testInstances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Instances instances0 = testInstances0.generate();
      assertEquals(0, testInstances0.getNumString());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.size());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertNotNull(instances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0, testInstances0.getNumString());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.size());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertNotNull(evaluation0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(0, testInstances0.getNumString());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.size());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      assertEquals("If set to true, classifier may output additional info to the console.", costSensitiveClassifier0.debugTipText());
      assertEquals(1, costSensitiveClassifier0.getSeed());
      assertEquals(0, costSensitiveClassifier0.graphType());
      assertEquals("Sets the directory where cost files are loaded from. This option is used when the costMatrixSource is set to \"On Demand\".", costSensitiveClassifier0.onDemandDirectoryTipText());
      assertEquals("The base classifier to be used.", costSensitiveClassifier0.classifierTipText());
      assertEquals("A metaclassifier that makes its base classifier cost-sensitive. Two methods can be used to introduce cost-sensitivity: reweighting training instances according to the total cost assigned to each class; or predicting the class with minimum expected misclassification cost (rather than the most likely class). Performance can often be improved by using a Bagged classifier to improve the probability estimates of the base classifier.", costSensitiveClassifier0.globalInfo());
      assertFalse(costSensitiveClassifier0.getDebug());
      assertFalse(costSensitiveClassifier0.getMinimizeExpectedCost());
      assertEquals("Sets whether the minimum expected cost criteria will be used. If this is false, the training data will be reweighted according to the costs assigned to each class. If true, the minimum expected cost criteria will be used.", costSensitiveClassifier0.minimizeExpectedCostTipText());
      assertEquals("Sets the cost matrix explicitly. This matrix is used if the costMatrixSource property is set to \"Supplied\".", costSensitiveClassifier0.costMatrixTipText());
      assertEquals("The random number seed to be used.", costSensitiveClassifier0.seedTipText());
      assertNotNull(costSensitiveClassifier0);
      assertEquals(1, costSensitiveClassifier0.MATRIX_ON_DEMAND);
      assertEquals(2, costSensitiveClassifier0.MATRIX_SUPPLIED);
      
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      assertEquals("If set to true, classifier may output additional info to the console.", costSensitiveClassifier0.debugTipText());
      assertEquals(1, costSensitiveClassifier0.getSeed());
      assertEquals(0, costSensitiveClassifier0.graphType());
      assertEquals("Sets the directory where cost files are loaded from. This option is used when the costMatrixSource is set to \"On Demand\".", costSensitiveClassifier0.onDemandDirectoryTipText());
      assertEquals("The base classifier to be used.", costSensitiveClassifier0.classifierTipText());
      assertEquals("A metaclassifier that makes its base classifier cost-sensitive. Two methods can be used to introduce cost-sensitivity: reweighting training instances according to the total cost assigned to each class; or predicting the class with minimum expected misclassification cost (rather than the most likely class). Performance can often be improved by using a Bagged classifier to improve the probability estimates of the base classifier.", costSensitiveClassifier0.globalInfo());
      assertFalse(costSensitiveClassifier0.getDebug());
      assertFalse(costSensitiveClassifier0.getMinimizeExpectedCost());
      assertEquals("Sets whether the minimum expected cost criteria will be used. If this is false, the training data will be reweighted according to the costs assigned to each class. If true, the minimum expected cost criteria will be used.", costSensitiveClassifier0.minimizeExpectedCostTipText());
      assertEquals("Sets the cost matrix explicitly. This matrix is used if the costMatrixSource property is set to \"Supplied\".", costSensitiveClassifier0.costMatrixTipText());
      assertEquals("The random number seed to be used.", costSensitiveClassifier0.seedTipText());
      assertEquals(1, costMatrix0.numColumns());
      assertEquals(1, costMatrix0.numRows());
      assertEquals(1, costMatrix0.size());
      assertNotNull(costMatrix0);
      assertEquals(1, costSensitiveClassifier0.MATRIX_ON_DEMAND);
      assertEquals(2, costSensitiveClassifier0.MATRIX_SUPPLIED);
      
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cost matrix not compatible with data!
         //
      }
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.errorRate()D: I27 Branch 192 IFNONNULL L2141 - false
   */

  @Test
  public void test23()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertNotNull(instances0);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertNotNull(evaluation0);
      
      double double0 = evaluation0.errorRate();
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I436 Branch 352 IFEQ L3587 - true
   */

  @Test
  public void test24()  throws Throwable  {
      String string0 = Evaluation.makeOptionString((Classifier) null, true);
      assertEquals("\n\nGeneral options:\n\n-h or -help\n\tOutput help information.\n-synopsis or -info\n\tOutput synopsis for classifier (use in conjunction  with -h)\n-t <name of training file>\n\tSets training file.\n-T <name of test file>\n\tSets test file. If missing, a cross-validation will be performed\n\ton the training data.\n-c <class index>\n\tSets index of class attribute (default: last).\n-x <number of folds>\n\tSets number of folds for cross-validation (default: 10).\n-no-cv\n\tDo not perform any cross validation.\n-split-percentage <percentage>\n\tSets the percentage for the train/test set split, e.g., 66.\n-preserve-order\n\tPreserves the order in the percentage split.\n-s <random number seed>\n\tSets random number seed for cross-validation or percentage split\n\t(default: 1).\n-m <name of file with cost matrix>\n\tSets file with cost matrix.\n-l <name of input file>\n\tSets model input file. In case the filename ends with '.xml',\n\ta PMML file is loaded or, if that fails, options are loaded\n\tfrom the XML file.\n-d <name of output file>\n\tSets model output file. In case the filename ends with '.xml',\n\tonly the options are saved to the XML file, not the model.\n-v\n\tOutputs no statistics for training data.\n-o\n\tOutputs statistics only, not the classifier.\n-i\n\tOutputs detailed information-retrieval statistics for each class.\n-k\n\tOutputs information-theoretic statistics.\n-classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"\n\tUses the specified class for generating the classification output.\n\tE.g.: weka.classifiers.evaluation.output.prediction.PlainText\n-p range\n\tOutputs predictions for test instances (or the train instances if\n\tno test instances provided and -no-cv is used), along with the \n\tattributes in the specified range (and nothing else). \n\tUse '-p 0' if no attributes are desired.\n\tDeprecated: use \"-classifications ...\" instead.\n-distribution\n\tOutputs the distribution instead of only the prediction\n\tin conjunction with the '-p' option (only nominal classes).\n\tDeprecated: use \"-classifications ...\" instead.\n-r\n\tOnly outputs cumulative margin distribution.\n-xml filename | xml-string\n\tRetrieves the options from the XML-data instead of the command line.\n-threshold-file <file>\n\tThe file to save the threshold data to.\n\tThe format is determined by the extensions, e.g., '.arff' for ARFF \n\tformat or '.csv' for CSV.\n-threshold-label <label>\n\tThe class label to determine the threshold data for\n\t(default is the first label)\n", string0);
      assertNotNull(string0);
  }

  //Test case number: 25
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.confusionMatrix()[[D: I20 Branch 17 IF_ICMPGE L566 - true
   * Goal 2. weka.classifiers.Evaluation.confusionMatrix()[[D: I20 Branch 17 IF_ICMPGE L566 - false
   */

  @Test
  public void test25()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertNotNull(testInstances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Instances instances0 = testInstances0.generate("Average Cost                       ");
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertEquals("Testdata", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertNotNull(instances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertEquals("Testdata", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertNotNull(evaluation0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertEquals("Testdata", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertNotNull(doubleArray0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.getRevision()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertNotNull(instances0);
      
      CostMatrix costMatrix0 = new CostMatrix(0);
      assertEquals(0, costMatrix0.numColumns());
      assertEquals(0, costMatrix0.numRows());
      assertEquals(0, costMatrix0.size());
      assertNotNull(costMatrix0);
      
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      assertEquals(0, costMatrix0.numColumns());
      assertEquals(0, costMatrix0.numRows());
      assertEquals(0, costMatrix0.size());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertNotNull(evaluation0);
      
      String string0 = evaluation0.getRevision();
      assertEquals(0, costMatrix0.numColumns());
      assertEquals(0, costMatrix0.numRows());
      assertEquals(0, costMatrix0.size());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals("9101", string0);
      assertNotNull(string0);
  }

  //Test case number: 27
  /*
   * 3 covered goals:
   * Goal 1. weka.classifiers.Evaluation.avgCost()D: root-Branch
   * Goal 2. weka.classifiers.Evaluation.errorRate()D: I7 Branch 191 IFNE L2138 - true
   * Goal 3. weka.classifiers.Evaluation.errorRate()D: I27 Branch 192 IFNONNULL L2141 - true
   */

  @Test
  public void test27()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertNotNull(instances0);
      
      CostMatrix costMatrix0 = new CostMatrix(0);
      assertEquals(0, costMatrix0.numColumns());
      assertEquals(0, costMatrix0.size());
      assertEquals(0, costMatrix0.numRows());
      assertNotNull(costMatrix0);
      
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals(0, costMatrix0.numColumns());
      assertEquals(0, costMatrix0.size());
      assertEquals(0, costMatrix0.numRows());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertNotNull(evaluation0);
      
      double double0 = evaluation0.errorRate();
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals(0, costMatrix0.numColumns());
      assertEquals(0, costMatrix0.size());
      assertEquals(0, costMatrix0.numRows());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.totalCost()D: root-Branch
   */

  @Test
  public void test28()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertNotNull(instances0);
      
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertNotNull(evaluation0);
      
      double double0 = evaluation0.totalCost();
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.handleCostOption(Ljava/lang/String;I)Lweka/classifiers/CostMatrix;: I6 Branch 165 IFNULL L1574 - true
   */

  @Test
  public void test29()  throws Throwable  {
      CostMatrix costMatrix0 = Evaluation.handleCostOption((String) null, 0);
      assertNull(costMatrix0);
  }

  //Test case number: 30
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.handleCostOption(Ljava/lang/String;I)Lweka/classifiers/CostMatrix;: I12 Branch 166 IFEQ L1574 - true
   */

  @Test
  public void test30()  throws Throwable  {
      CostMatrix costMatrix0 = Evaluation.handleCostOption("", 1292);
      assertNull(costMatrix0);
  }

  //Test case number: 31
  /*
   * 11 covered goals:
   * Goal 1. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I144 Branch 23 IFNE L963 - false
   * Goal 2. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I151 Branch 24 IFEQ L963 - true
   * Goal 3. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I221 Branch 27 IFGT L976 - true
   * Goal 4. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I247 Branch 28 IF_ICMPGE L981 - true
   * Goal 5. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I247 Branch 28 IF_ICMPGE L981 - false
   * Goal 6. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I277 Branch 29 IFLE L986 - true
   * Goal 7. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I394 Branch 32 IFEQ L1017 - true
   * Goal 8. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I471 Branch 35 IFEQ L1030 - true
   * Goal 9. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I490 Branch 36 IFEQ L1034 - true
   * Goal 10. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I503 Branch 37 IFNE L1037 - false
   * Goal 11. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I511 Branch 38 IFNE L1038 - false
   */

  @Test
  public void test31()  throws Throwable  {
      Logistic logistic0 = new Logistic();
      assertEquals("Use conjugate gradient descent rather than BFGS updates; faster for problems with many parameters.", logistic0.useConjugateGradientDescentTipText());
      assertEquals(1.0E-8, logistic0.getRidge(), 0.01D);
      assertEquals("Maximum number of iterations to perform.", logistic0.maxItsTipText());
      assertEquals("Set the Ridge value in the log-likelihood.", logistic0.ridgeTipText());
      assertFalse(logistic0.getUseConjugateGradientDescent());
      assertFalse(logistic0.getDebug());
      assertEquals("Output debug information to the console.", logistic0.debugTipText());
      assertEquals(-1, logistic0.getMaxIts());
      assertNotNull(logistic0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Class for a Naive Bayes classifier using estimator classes. Numeric estimator precision values are chosen based on analysis of the  training data. For this reason, the classifier is not an UpdateableClassifier (which in typical usage are initialized with zero training instances) -- if you need the UpdateableClassifier functionality, use the NaiveBayesUpdateable classifier. The NaiveBayesUpdateable classifier will  use a default precision of 0.1 for numeric attributes when buildClassifier is called with zero training instances.\n\nFor more information on Naive Bayes classifiers, see\n\n";
      stringArray0[1] = "Class for a Naive Bayes classifier using estimator classes. Numeric estimator precision values are chosen based on analysis of the  training data. For this reason, the classifier is not an UpdateableClassifier (which in typical usage are initialized with zero training instances) -- if you need the UpdateableClassifier functionality, use the NaiveBayesUpdateable classifier. The NaiveBayesUpdateable classifier will  use a default precision of 0.1 for numeric attributes when buildClassifier is called with zero training instances.\n\nFor more information on Naive Bayes classifiers, see\n\n";
      try {
        String string0 = Evaluation.evaluateModel((Classifier) logistic0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.Logistic:
         // 
         // -D
         // \tTurn on debugging output.
         // -C
         // \tUse conjugate gradient descent rather than BFGS updates.
         // -R <ridge>
         // \tSet the ridge in the log-likelihood.
         // -M <number>
         // \tSet the maximum number of iterations (default -1, until convergence).
         //
      }
  }

  //Test case number: 32
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.updateNumericScores([D[DD)V: I28 Branch 384 IF_ICMPGE L3905 - true
   * Goal 2. weka.classifiers.Evaluation.updateNumericScores([D[DD)V: I28 Branch 384 IF_ICMPGE L3905 - false
   */

  @Test
  public void test32()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertNotNull(testInstances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Instances instances0 = testInstances0.generate();
      assertEquals(20, instances0.numInstances());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertNotNull(instances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertNotNull(evaluation0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      double[] doubleArray0 = new double[20];
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 366.0162162260516);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
  }

  //Test case number: 33
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.useNoPriors()V: root-Branch
   * Goal 2. weka.classifiers.Evaluation.KBRelativeInformation()D: I35 Branch 211 IFEQ L2357 - false
   */

  @Test
  public void test33()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertNotNull(testInstances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Instances instances0 = testInstances0.generate();
      assertEquals(2, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertNotNull(instances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(2, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertNotNull(evaluation0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      evaluation0.useNoPriors();
      assertEquals(2, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(2, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
  }

  //Test case number: 34
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.sizeOfPredictedRegions()D: I7 Branch 189 IFNE L2031 - false
   * Goal 2. weka.classifiers.Evaluation.sizeOfPredictedRegions()D: I13 Branch 190 IFNE L2031 - true
   */

  @Test
  public void test34()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertNotNull(testInstances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Instances instances0 = testInstances0.generate("Average Cost                       ");
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertNotNull(instances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertNotNull(evaluation0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      double double0 = evaluation0.sizeOfPredictedRegions();
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
  }

  //Test case number: 35
  /*
   * 8 covered goals:
   * Goal 1. weka.classifiers.Evaluation.pctUnclassified()D: root-Branch
   * Goal 2. weka.classifiers.Evaluation.pctCorrect()D: root-Branch
   * Goal 3. weka.classifiers.Evaluation.priorEntropy()D: I7 Branch 203 IFNE L2293 - true
   * Goal 4. weka.classifiers.Evaluation.priorEntropy()D: I35 Branch 204 IFEQ L2298 - true
   * Goal 5. weka.classifiers.Evaluation.priorEntropy()D: I55 Branch 205 IF_ICMPGE L2302 - true
   * Goal 6. weka.classifiers.Evaluation.priorEntropy()D: I55 Branch 205 IF_ICMPGE L2302 - false
   * Goal 7. weka.classifiers.Evaluation.KBRelativeInformation()D: I7 Branch 210 IFNE L2353 - true
   * Goal 8. weka.classifiers.Evaluation.KBRelativeInformation()D: I35 Branch 211 IFEQ L2357 - true
   */

  @Test
  public void test35()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalNumeric());
      //  // Unstable assertion: assertEquals(" ", testInstances0.getWordSeparators());
      //  // Unstable assertion: assertEquals("Testdata", testInstances0.getRelation());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumNominal());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumDate());
      //  // Unstable assertion: assertEquals(1, testInstances0.getSeed());
      //  // Unstable assertion: assertEquals(10, testInstances0.getNumInstancesRelational());
      //  // Unstable assertion: assertEquals(20, testInstances0.getNumInstances());
      //  // Unstable assertion: assertFalse(testInstances0.getNoClass());
      //  // Unstable assertion: assertEquals(-1, testInstances0.getClassIndex());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumNominalValues());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumAttributes());
      //  // Unstable assertion: assertEquals(1, testInstances0.getClassType());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumClasses());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumNumeric());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelational());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalDate());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumRelationalNominalValues());
      //  // Unstable assertion: assertFalse(testInstances0.getMultiInstance());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalNominal());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumString());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalString());
      //  // Unstable assertion: assertNotNull(testInstances0);
      //  // Unstable assertion: assertEquals((-1), testInstances0.CLASS_IS_LAST);
      //  // Unstable assertion: assertEquals((-2), testInstances0.NO_CLASS);
      
      Instances instances0 = testInstances0.generate();
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalNumeric());
      //  // Unstable assertion: assertEquals(" ", testInstances0.getWordSeparators());
      //  // Unstable assertion: assertEquals("Testdata", testInstances0.getRelation());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumNominal());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumDate());
      //  // Unstable assertion: assertEquals(1, testInstances0.getSeed());
      //  // Unstable assertion: assertEquals(10, testInstances0.getNumInstancesRelational());
      //  // Unstable assertion: assertEquals(20, testInstances0.getNumInstances());
      //  // Unstable assertion: assertFalse(testInstances0.getNoClass());
      //  // Unstable assertion: assertEquals(-1, testInstances0.getClassIndex());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumNominalValues());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumAttributes());
      //  // Unstable assertion: assertEquals(1, testInstances0.getClassType());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumClasses());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumNumeric());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelational());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalDate());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumRelationalNominalValues());
      //  // Unstable assertion: assertFalse(testInstances0.getMultiInstance());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalNominal());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumString());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalString());
      //  // Unstable assertion: assertEquals("Testdata", instances0.relationName());
      //  // Unstable assertion: assertEquals(20, instances0.numInstances());
      //  // Unstable assertion: assertEquals(20, instances0.size());
      //  // Unstable assertion: assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals(2, instances0.numAttributes());
      //  // Unstable assertion: assertEquals(2, instances0.numClasses());
      //  // Unstable assertion: assertFalse(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(1, instances0.classIndex());
      //  // Unstable assertion: assertNotNull(instances0);
      //  // Unstable assertion: assertEquals((-1), testInstances0.CLASS_IS_LAST);
      //  // Unstable assertion: assertEquals((-2), testInstances0.NO_CLASS);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalNumeric());
      //  // Unstable assertion: assertEquals(" ", testInstances0.getWordSeparators());
      //  // Unstable assertion: assertEquals("Testdata", testInstances0.getRelation());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumNominal());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumDate());
      //  // Unstable assertion: assertEquals(1, testInstances0.getSeed());
      //  // Unstable assertion: assertEquals(10, testInstances0.getNumInstancesRelational());
      //  // Unstable assertion: assertEquals(20, testInstances0.getNumInstances());
      //  // Unstable assertion: assertFalse(testInstances0.getNoClass());
      //  // Unstable assertion: assertEquals(-1, testInstances0.getClassIndex());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumNominalValues());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumAttributes());
      //  // Unstable assertion: assertEquals(1, testInstances0.getClassType());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumClasses());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumNumeric());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelational());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalDate());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumRelationalNominalValues());
      //  // Unstable assertion: assertFalse(testInstances0.getMultiInstance());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalNominal());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumString());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalString());
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      //  // Unstable assertion: assertFalse(evaluation0.getDiscardPredictions());
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.correct(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.kappa(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      //  // Unstable assertion: assertEquals("Testdata", instances0.relationName());
      //  // Unstable assertion: assertEquals(20, instances0.numInstances());
      //  // Unstable assertion: assertEquals(20, instances0.size());
      //  // Unstable assertion: assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals(2, instances0.numAttributes());
      //  // Unstable assertion: assertEquals(2, instances0.numClasses());
      //  // Unstable assertion: assertFalse(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(1, instances0.classIndex());
      //  // Unstable assertion: assertNotNull(evaluation0);
      //  // Unstable assertion: assertEquals((-1), testInstances0.CLASS_IS_LAST);
      //  // Unstable assertion: assertEquals((-2), testInstances0.NO_CLASS);
      
      double double0 = evaluation0.pctCorrect();
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalNumeric());
      //  // Unstable assertion: assertEquals(" ", testInstances0.getWordSeparators());
      //  // Unstable assertion: assertEquals("Testdata", testInstances0.getRelation());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumNominal());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumDate());
      //  // Unstable assertion: assertEquals(1, testInstances0.getSeed());
      //  // Unstable assertion: assertEquals(10, testInstances0.getNumInstancesRelational());
      //  // Unstable assertion: assertEquals(20, testInstances0.getNumInstances());
      //  // Unstable assertion: assertFalse(testInstances0.getNoClass());
      //  // Unstable assertion: assertEquals(-1, testInstances0.getClassIndex());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumNominalValues());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumAttributes());
      //  // Unstable assertion: assertEquals(1, testInstances0.getClassType());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumClasses());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumNumeric());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelational());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalDate());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumRelationalNominalValues());
      //  // Unstable assertion: assertFalse(testInstances0.getMultiInstance());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalNominal());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumString());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalString());
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      //  // Unstable assertion: assertFalse(evaluation0.getDiscardPredictions());
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.correct(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.kappa(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      //  // Unstable assertion: assertEquals("Testdata", instances0.relationName());
      //  // Unstable assertion: assertEquals(20, instances0.numInstances());
      //  // Unstable assertion: assertEquals(20, instances0.size());
      //  // Unstable assertion: assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals(2, instances0.numAttributes());
      //  // Unstable assertion: assertEquals(2, instances0.numClasses());
      //  // Unstable assertion: assertFalse(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(1, instances0.classIndex());
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      //  // Unstable assertion: assertEquals((-1), testInstances0.CLASS_IS_LAST);
      //  // Unstable assertion: assertEquals((-2), testInstances0.NO_CLASS);
      
      double double1 = evaluation0.KBRelativeInformation();
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalNumeric());
      //  // Unstable assertion: assertEquals(" ", testInstances0.getWordSeparators());
      //  // Unstable assertion: assertEquals("Testdata", testInstances0.getRelation());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumNominal());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumDate());
      //  // Unstable assertion: assertEquals(1, testInstances0.getSeed());
      //  // Unstable assertion: assertEquals(10, testInstances0.getNumInstancesRelational());
      //  // Unstable assertion: assertEquals(20, testInstances0.getNumInstances());
      //  // Unstable assertion: assertFalse(testInstances0.getNoClass());
      //  // Unstable assertion: assertEquals(-1, testInstances0.getClassIndex());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumNominalValues());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumAttributes());
      //  // Unstable assertion: assertEquals(1, testInstances0.getClassType());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumClasses());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumNumeric());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelational());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalDate());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumRelationalNominalValues());
      //  // Unstable assertion: assertFalse(testInstances0.getMultiInstance());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalNominal());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumString());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalString());
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      //  // Unstable assertion: assertFalse(evaluation0.getDiscardPredictions());
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.correct(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.kappa(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      //  // Unstable assertion: assertEquals("Testdata", instances0.relationName());
      //  // Unstable assertion: assertEquals(20, instances0.numInstances());
      //  // Unstable assertion: assertEquals(20, instances0.size());
      //  // Unstable assertion: assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals(2, instances0.numAttributes());
      //  // Unstable assertion: assertEquals(2, instances0.numClasses());
      //  // Unstable assertion: assertFalse(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(1, instances0.classIndex());
      //  // Unstable assertion: assertEquals(0.0, double1, 0.01D);
      //  // Unstable assertion: assertEquals((-1), testInstances0.CLASS_IS_LAST);
      //  // Unstable assertion: assertEquals((-2), testInstances0.NO_CLASS);
      
      double double2 = evaluation0.pctUnclassified();
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertTrue(double2 == double0);
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalNumeric());
      //  // Unstable assertion: assertEquals(" ", testInstances0.getWordSeparators());
      //  // Unstable assertion: assertEquals("Testdata", testInstances0.getRelation());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumNominal());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumDate());
      //  // Unstable assertion: assertEquals(1, testInstances0.getSeed());
      //  // Unstable assertion: assertEquals(10, testInstances0.getNumInstancesRelational());
      //  // Unstable assertion: assertEquals(20, testInstances0.getNumInstances());
      //  // Unstable assertion: assertFalse(testInstances0.getNoClass());
      //  // Unstable assertion: assertEquals(-1, testInstances0.getClassIndex());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumNominalValues());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumAttributes());
      //  // Unstable assertion: assertEquals(1, testInstances0.getClassType());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumClasses());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumNumeric());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelational());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalDate());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumRelationalNominalValues());
      //  // Unstable assertion: assertFalse(testInstances0.getMultiInstance());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalNominal());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumString());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalString());
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      //  // Unstable assertion: assertFalse(evaluation0.getDiscardPredictions());
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.correct(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.kappa(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      //  // Unstable assertion: assertEquals("Testdata", instances0.relationName());
      //  // Unstable assertion: assertEquals(20, instances0.numInstances());
      //  // Unstable assertion: assertEquals(20, instances0.size());
      //  // Unstable assertion: assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals(2, instances0.numAttributes());
      //  // Unstable assertion: assertEquals(2, instances0.numClasses());
      //  // Unstable assertion: assertFalse(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(1, instances0.classIndex());
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertEquals((-1), testInstances0.CLASS_IS_LAST);
      //  // Unstable assertion: assertEquals((-2), testInstances0.NO_CLASS);
  }

  //Test case number: 36
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.KBInformation()D: I7 Branch 206 IFNE L2317 - true
   * Goal 2. weka.classifiers.Evaluation.KBInformation()D: I35 Branch 207 IFEQ L2321 - true
   */

  @Test
  public void test36()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertNotNull(testInstances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Instances instances0 = testInstances0.generate("llqkw");
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertNotNull(instances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertNotNull(evaluation0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      double double0 = evaluation0.KBInformation();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0.0, double0, 0.01D);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
  }

  //Test case number: 37
  /*
   * 36 covered goals:
   * Goal 1. weka.classifiers.Evaluation.numTruePositives(I)D: I15 Branch 257 IF_ICMPGE L2785 - true
   * Goal 2. weka.classifiers.Evaluation.numTruePositives(I)D: I15 Branch 257 IF_ICMPGE L2785 - false
   * Goal 3. weka.classifiers.Evaluation.numTruePositives(I)D: I23 Branch 258 IF_ICMPNE L2786 - true
   * Goal 4. weka.classifiers.Evaluation.numTruePositives(I)D: I23 Branch 258 IF_ICMPNE L2786 - false
   * Goal 5. weka.classifiers.Evaluation.numTrueNegatives(I)D: I15 Branch 265 IF_ICMPGE L2862 - true
   * Goal 6. weka.classifiers.Evaluation.numTrueNegatives(I)D: I15 Branch 265 IF_ICMPGE L2862 - false
   * Goal 7. weka.classifiers.Evaluation.numTrueNegatives(I)D: I23 Branch 266 IF_ICMPEQ L2863 - true
   * Goal 8. weka.classifiers.Evaluation.numTrueNegatives(I)D: I23 Branch 266 IF_ICMPEQ L2863 - false
   * Goal 9. weka.classifiers.Evaluation.numTrueNegatives(I)D: I35 Branch 267 IF_ICMPGE L2864 - true
   * Goal 10. weka.classifiers.Evaluation.numTrueNegatives(I)D: I35 Branch 267 IF_ICMPGE L2864 - false
   * Goal 11. weka.classifiers.Evaluation.numTrueNegatives(I)D: I43 Branch 268 IF_ICMPEQ L2865 - true
   * Goal 12. weka.classifiers.Evaluation.numTrueNegatives(I)D: I43 Branch 268 IF_ICMPEQ L2865 - false
   * Goal 13. weka.classifiers.Evaluation.numFalsePositives(I)D: I15 Branch 277 IF_ICMPGE L2947 - true
   * Goal 14. weka.classifiers.Evaluation.numFalsePositives(I)D: I15 Branch 277 IF_ICMPGE L2947 - false
   * Goal 15. weka.classifiers.Evaluation.numFalsePositives(I)D: I23 Branch 278 IF_ICMPEQ L2948 - true
   * Goal 16. weka.classifiers.Evaluation.numFalsePositives(I)D: I23 Branch 278 IF_ICMPEQ L2948 - false
   * Goal 17. weka.classifiers.Evaluation.numFalsePositives(I)D: I35 Branch 279 IF_ICMPGE L2949 - true
   * Goal 18. weka.classifiers.Evaluation.numFalsePositives(I)D: I35 Branch 279 IF_ICMPGE L2949 - false
   * Goal 19. weka.classifiers.Evaluation.numFalsePositives(I)D: I43 Branch 280 IF_ICMPNE L2950 - true
   * Goal 20. weka.classifiers.Evaluation.numFalsePositives(I)D: I43 Branch 280 IF_ICMPNE L2950 - false
   * Goal 21. weka.classifiers.Evaluation.numFalseNegatives(I)D: I15 Branch 289 IF_ICMPGE L3032 - true
   * Goal 22. weka.classifiers.Evaluation.numFalseNegatives(I)D: I15 Branch 289 IF_ICMPGE L3032 - false
   * Goal 23. weka.classifiers.Evaluation.numFalseNegatives(I)D: I23 Branch 290 IF_ICMPNE L3033 - true
   * Goal 24. weka.classifiers.Evaluation.numFalseNegatives(I)D: I23 Branch 290 IF_ICMPNE L3033 - false
   * Goal 25. weka.classifiers.Evaluation.numFalseNegatives(I)D: I35 Branch 291 IF_ICMPGE L3034 - true
   * Goal 26. weka.classifiers.Evaluation.numFalseNegatives(I)D: I35 Branch 291 IF_ICMPGE L3034 - false
   * Goal 27. weka.classifiers.Evaluation.numFalseNegatives(I)D: I43 Branch 292 IF_ICMPEQ L3035 - true
   * Goal 28. weka.classifiers.Evaluation.numFalseNegatives(I)D: I43 Branch 292 IF_ICMPEQ L3035 - false
   * Goal 29. weka.classifiers.Evaluation.matthewsCorrelationCoefficient(I)D: I65 Branch 301 IFNE L3120 - false
   * Goal 30. weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I21 Branch 302 IF_ICMPGE L3136 - true
   * Goal 31. weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I21 Branch 302 IF_ICMPGE L3136 - false
   * Goal 32. weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I33 Branch 303 IF_ICMPGE L3137 - true
   * Goal 33. weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I33 Branch 303 IF_ICMPGE L3137 - false
   * Goal 34. weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I85 Branch 304 IF_ICMPGE L3144 - true
   * Goal 35. weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I85 Branch 304 IF_ICMPGE L3144 - false
   * Goal 36. weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I99 Branch 305 IFNE L3146 - false
   */

  @Test
  public void test37()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(-1, testInstances0.getClassIndex());
      assertNotNull(testInstances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Instances instances0 = testInstances0.generate();
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(-1, testInstances0.getClassIndex());
      assertNotNull(instances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertNotNull(evaluation0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
  }

  //Test case number: 38
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.crossValidateModel(Ljava/lang/String;Lweka/core/Instances;I[Ljava/lang/String;Ljava/util/Random;)V: root-Branch
   */

  @Test
  public void test38()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertNotNull(instances0);
      
      String[] stringArray0 = textDirectoryLoader0.getOptions();
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertNotNull(stringArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertNotNull(evaluation0);
      
      try {
        evaluation0.crossValidateModel("Stacking:No msdel buik yet.", instances0, 4802, stringArray0, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: Stacking:No msdel buik yet.
         //
      }
  }

  //Test case number: 39
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.weightedTrueNegativeRate()D: I21 Branch 274 IF_ICMPGE L2916 - true
   * Goal 2. weka.classifiers.Evaluation.weightedTrueNegativeRate()D: I85 Branch 276 IF_ICMPGE L2924 - true
   */

  @Test
  public void test39()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertNotNull(instances0);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertNotNull(evaluation0);
      
      double double0 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals(Double.NaN, double0, 0.01D);
  }

  //Test case number: 40
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.num2ShortID(I[CI)Ljava/lang/String;: I16 Branch 357 IFLT L3651 - true
   */

  @Test
  public void test40()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertNotNull(instances0);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertNotNull(evaluation0);
      
      String string0 = evaluation0.num2ShortID('^', (char[]) null, 0);
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  //Test case number: 41
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.evaluateModel(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/String;: root-Branch
   * Goal 2. weka.classifiers.Evaluation.main([Ljava/lang/String;)V: I7 Branch 22 IFNE L801 - true
   */

  @Test
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Evaluation.main(stringArray0);
  }

  //Test case number: 42
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.meanPriorAbsoluteError()D: I7 Branch 199 IFEQ L2229 - true
   */

  @Test
  public void test42()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertNotNull(testInstances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Instances instances0 = testInstances0.generate();
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertNotNull(instances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertNotNull(evaluation0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      double double0 = evaluation0.meanPriorAbsoluteError();
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
  }

  //Test case number: 43
  /*
   * 5 covered goals:
   * Goal 1. weka.classifiers.Evaluation.num2ShortID(I[CI)Ljava/lang/String;: I16 Branch 357 IFLT L3651 - false
   * Goal 2. weka.classifiers.Evaluation.num2ShortID(I[CI)Ljava/lang/String;: I43 Branch 358 IFGE L3654 - true
   * Goal 3. weka.classifiers.Evaluation.num2ShortID(I[CI)Ljava/lang/String;: I43 Branch 358 IFGE L3654 - false
   * Goal 4. weka.classifiers.Evaluation.num2ShortID(I[CI)Ljava/lang/String;: I65 Branch 359 IFLT L3658 - true
   * Goal 5. weka.classifiers.Evaluation.num2ShortID(I[CI)Ljava/lang/String;: I65 Branch 359 IFLT L3658 - false
   */

  @Test
  public void test43()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertNotNull(instances0);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertNotNull(evaluation0);
      
      char[] charArray0 = new char[3];
      String string0 = evaluation0.num2ShortID('x', charArray0, 'x');
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals("                                                                                                                   \u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 44
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.equals(Ljava/lang/Object;)Z: I6 Branch 329 IFNULL L3426 - false
   * Goal 2. weka.classifiers.Evaluation.equals(Ljava/lang/Object;)Z: I15 Branch 330 IFNE L3426 - false
   */

  @Test
  public void test44()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertNotNull(testInstances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Instances instances0 = testInstances0.generate("nearestNeighbourSearchAlgorithmTipText");
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertNotNull(instances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertNotNull(evaluation0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      assertEquals("If set to true, classifier may output additional info to the console.", naiveBayesMultinomialUpdateable0.debugTipText());
      assertFalse(naiveBayesMultinomialUpdateable0.getDebug());
      assertNotNull(naiveBayesMultinomialUpdateable0);
      
      boolean boolean0 = evaluation0.equals((Object) naiveBayesMultinomialUpdateable0);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals("If set to true, classifier may output additional info to the console.", naiveBayesMultinomialUpdateable0.debugTipText());
      assertFalse(naiveBayesMultinomialUpdateable0.getDebug());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(boolean0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
  }

  //Test case number: 45
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.incorrect()D: root-Branch
   */

  @Test
  public void test45()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertNotNull(testInstances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Instances instances0 = testInstances0.generate();
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertNotNull(instances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertNotNull(evaluation0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      double double0 = evaluation0.incorrect();
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
  }

  //Test case number: 46
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.makeDistribution(D)[D: I13 Branch 360 IFEQ L3675 - true
   * Goal 2. weka.classifiers.Evaluation.makeDistribution(D)[D: I25 Branch 361 IFEQ L3678 - false
   */

  @Test
  public void test46()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertNotNull(instances0);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertNotNull(evaluation0);
      
      // Undeclared exception!
      try {
        double[] doubleArray0 = evaluation0.makeDistribution(3029);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3029
         //
      }
  }

  //Test case number: 47
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.getClassPriors()[D: root-Branch
   */

  @Test
  public void test47()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertNotNull(instances0);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertNotNull(evaluation0);
      
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  //Test case number: 48
  /*
   * 5 covered goals:
   * Goal 1. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I360 Branch 350 IFEQ L3562 - false
   * Goal 2. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I514 Branch 354 IFEQ L3599 - false
   * Goal 3. weka.classifiers.Evaluation.getGlobalInfo(Lweka/classifiers/Classifier;)Ljava/lang/String;: I42 Branch 355 IF_ICMPGE L3625 - false
   * Goal 4. weka.classifiers.Evaluation.getGlobalInfo(Lweka/classifiers/Classifier;)Ljava/lang/String;: I65 Branch 356 IFLE L3628 - true
   * Goal 5. weka.classifiers.Evaluation.getGlobalInfo(Lweka/classifiers/Classifier;)Ljava/lang/String;: I65 Branch 356 IFLE L3628 - false
   */

  @Test
  public void test48()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      assertEquals("Class for building and using a 0-R classifier. Predicts the mean (for a numeric class) or the mode (for a nominal class).", zeroR0.globalInfo());
      assertFalse(zeroR0.getDebug());
      assertEquals("If set to true, classifier may output additional info to the console.", zeroR0.debugTipText());
      assertNotNull(zeroR0);
      
      String string0 = Evaluation.makeOptionString(zeroR0, true);
      assertEquals("Class for building and using a 0-R classifier. Predicts the mean (for a numeric class) or the mode (for a nominal class).", zeroR0.globalInfo());
      assertFalse(zeroR0.getDebug());
      assertEquals("If set to true, classifier may output additional info to the console.", zeroR0.debugTipText());
      assertEquals("\n\nGeneral options:\n\n-h or -help\n\tOutput help information.\n-synopsis or -info\n\tOutput synopsis for classifier (use in conjunction  with -h)\n-t <name of training file>\n\tSets training file.\n-T <name of test file>\n\tSets test file. If missing, a cross-validation will be performed\n\ton the training data.\n-c <class index>\n\tSets index of class attribute (default: last).\n-x <number of folds>\n\tSets number of folds for cross-validation (default: 10).\n-no-cv\n\tDo not perform any cross validation.\n-split-percentage <percentage>\n\tSets the percentage for the train/test set split, e.g., 66.\n-preserve-order\n\tPreserves the order in the percentage split.\n-s <random number seed>\n\tSets random number seed for cross-validation or percentage split\n\t(default: 1).\n-m <name of file with cost matrix>\n\tSets file with cost matrix.\n-l <name of input file>\n\tSets model input file. In case the filename ends with '.xml',\n\ta PMML file is loaded or, if that fails, options are loaded\n\tfrom the XML file.\n-d <name of output file>\n\tSets model output file. In case the filename ends with '.xml',\n\tonly the options are saved to the XML file, not the model.\n-v\n\tOutputs no statistics for training data.\n-o\n\tOutputs statistics only, not the classifier.\n-i\n\tOutputs detailed information-retrieval statistics for each class.\n-k\n\tOutputs information-theoretic statistics.\n-classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"\n\tUses the specified class for generating the classification output.\n\tE.g.: weka.classifiers.evaluation.output.prediction.PlainText\n-p range\n\tOutputs predictions for test instances (or the train instances if\n\tno test instances provided and -no-cv is used), along with the \n\tattributes in the specified range (and nothing else). \n\tUse '-p 0' if no attributes are desired.\n\tDeprecated: use \"-classifications ...\" instead.\n-distribution\n\tOutputs the distribution instead of only the prediction\n\tin conjunction with the '-p' option (only nominal classes).\n\tDeprecated: use \"-classifications ...\" instead.\n-r\n\tOnly outputs cumulative margin distribution.\n-z <class name>\n\tOnly outputs the source representation of the classifier,\n\tgiving it the supplied name.\n-xml filename | xml-string\n\tRetrieves the options from the XML-data instead of the command line.\n-threshold-file <file>\n\tThe file to save the threshold data to.\n\tThe format is determined by the extensions, e.g., '.arff' for ARFF \n\tformat or '.csv' for CSV.\n-threshold-label <label>\n\tThe class label to determine the threshold data for\n\t(default is the first label)\n\nOptions specific to weka.classifiers.rules.ZeroR:\n\n-D\n\tIf set, classifier is run in debug mode and\n\tmay output additional info to the console\n\nSynopsis for weka.classifiers.rules.ZeroR:\n\nClass for building and using a 0-R classifier. Predicts the mean (for a numeric class) or the mode (for a nominal class).", string0);
      assertNotNull(string0);
  }

  //Test case number: 49
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.correct()D: root-Branch
   * Goal 2. weka.classifiers.Evaluation.unweightedMacroFmeasure()D: I17 Branch 316 IF_ICMPGE L3294 - true
   */

  @Test
  public void test49()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertNotNull(instances0);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertNotNull(evaluation0);
      
      double double0 = evaluation0.unweightedMacroFmeasure();
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = evaluation0.correct();
      assertFalse(double1 == double0);
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, double1, 0.01D);
  }

  //Test case number: 50
  /*
   * 11 covered goals:
   * Goal 1. weka.classifiers.Evaluation.handleCostOption(Ljava/lang/String;I)Lweka/classifiers/CostMatrix;: I6 Branch 165 IFNULL L1574 - false
   * Goal 2. weka.classifiers.Evaluation.handleCostOption(Ljava/lang/String;I)Lweka/classifiers/CostMatrix;: I12 Branch 166 IFEQ L1574 - false
   * Goal 3. weka.classifiers.Evaluation.predictions()Lweka/core/FastVector;: I7 Branch 187 IFEQ L1845 - true
   * Goal 4. weka.classifiers.Evaluation.KBMeanInformation()D: I7 Branch 208 IFNE L2335 - true
   * Goal 5. weka.classifiers.Evaluation.KBMeanInformation()D: I35 Branch 209 IFEQ L2339 - true
   * Goal 6. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I360 Branch 350 IFEQ L3562 - true
   * Goal 7. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I380 Branch 351 IFEQ L3567 - true
   * Goal 8. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I436 Branch 352 IFEQ L3587 - false
   * Goal 9. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I467 Branch 353 IFEQ L3591 - true
   * Goal 10. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I467 Branch 353 IFEQ L3591 - false
   * Goal 11. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I514 Branch 354 IFEQ L3599 - true
   */

  @Test
  public void test50()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertNotNull(instances0);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertNotNull(evaluation0);
      
      double double0 = evaluation0.KBMeanInformation();
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, double0, 0.01D);
      
      FastVector fastVector0 = evaluation0.predictions();
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertNull(fastVector0);
      
      PART pART0 = new PART();
      assertFalse(pART0.getDebug());
      assertEquals(0.25F, pART0.getConfidenceFactor(), 0.01F);
      assertEquals(2, pART0.getMinNumObj());
      assertEquals("The seed used for randomizing the data when reduced-error pruning is used.", pART0.seedTipText());
      assertFalse(pART0.getReducedErrorPruning());
      assertEquals(3, pART0.getNumFolds());
      assertEquals(1, pART0.getSeed());
      assertEquals("Whether reduced-error pruning is used instead of C.4.5 pruning.", pART0.reducedErrorPruningTipText());
      assertFalse(pART0.getBinarySplits());
      assertEquals("Whether to use binary splits on nominal attributes when building the partial trees.", pART0.binarySplitsTipText());
      assertEquals("The confidence factor used for pruning (smaller values incur more pruning).", pART0.confidenceFactorTipText());
      assertEquals("The minimum number of instances per rule.", pART0.minNumObjTipText());
      assertFalse(pART0.getUnpruned());
      assertEquals("Whether pruning is performed.", pART0.unprunedTipText());
      assertTrue(pART0.getUseMDLcorrection());
      assertEquals("Determines the amount of data used for reduced-error pruning.  One fold is used for pruning, the rest for growing the rules.", pART0.numFoldsTipText());
      assertEquals("Whether MDL correction is used when finding splits on numeric attributes.", pART0.useMDLcorrectionTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", pART0.debugTipText());
      assertNotNull(pART0);
      
      String string0 = Evaluation.makeOptionString(pART0, false);
      assertFalse(pART0.getDebug());
      assertEquals(0.25F, pART0.getConfidenceFactor(), 0.01F);
      assertEquals(2, pART0.getMinNumObj());
      assertEquals("The seed used for randomizing the data when reduced-error pruning is used.", pART0.seedTipText());
      assertFalse(pART0.getReducedErrorPruning());
      assertEquals(3, pART0.getNumFolds());
      assertEquals(1, pART0.getSeed());
      assertEquals("Whether reduced-error pruning is used instead of C.4.5 pruning.", pART0.reducedErrorPruningTipText());
      assertFalse(pART0.getBinarySplits());
      assertEquals("Whether to use binary splits on nominal attributes when building the partial trees.", pART0.binarySplitsTipText());
      assertEquals("The confidence factor used for pruning (smaller values incur more pruning).", pART0.confidenceFactorTipText());
      assertEquals("The minimum number of instances per rule.", pART0.minNumObjTipText());
      assertFalse(pART0.getUnpruned());
      assertEquals("Whether pruning is performed.", pART0.unprunedTipText());
      assertTrue(pART0.getUseMDLcorrection());
      assertEquals("Determines the amount of data used for reduced-error pruning.  One fold is used for pruning, the rest for growing the rules.", pART0.numFoldsTipText());
      assertEquals("Whether MDL correction is used when finding splits on numeric attributes.", pART0.useMDLcorrectionTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", pART0.debugTipText());
      assertEquals("\n\nGeneral options:\n\n-h or -help\n\tOutput help information.\n-synopsis or -info\n\tOutput synopsis for classifier (use in conjunction  with -h)\n-t <name of training file>\n\tSets training file.\n-T <name of test file>\n\tSets test file. If missing, a cross-validation will be performed\n\ton the training data.\n-c <class index>\n\tSets index of class attribute (default: last).\n-x <number of folds>\n\tSets number of folds for cross-validation (default: 10).\n-no-cv\n\tDo not perform any cross validation.\n-split-percentage <percentage>\n\tSets the percentage for the train/test set split, e.g., 66.\n-preserve-order\n\tPreserves the order in the percentage split.\n-s <random number seed>\n\tSets random number seed for cross-validation or percentage split\n\t(default: 1).\n-m <name of file with cost matrix>\n\tSets file with cost matrix.\n-l <name of input file>\n\tSets model input file. In case the filename ends with '.xml',\n\ta PMML file is loaded or, if that fails, options are loaded\n\tfrom the XML file.\n-d <name of output file>\n\tSets model output file. In case the filename ends with '.xml',\n\tonly the options are saved to the XML file, not the model.\n-v\n\tOutputs no statistics for training data.\n-o\n\tOutputs statistics only, not the classifier.\n-i\n\tOutputs detailed information-retrieval statistics for each class.\n-k\n\tOutputs information-theoretic statistics.\n-classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"\n\tUses the specified class for generating the classification output.\n\tE.g.: weka.classifiers.evaluation.output.prediction.PlainText\n-p range\n\tOutputs predictions for test instances (or the train instances if\n\tno test instances provided and -no-cv is used), along with the \n\tattributes in the specified range (and nothing else). \n\tUse '-p 0' if no attributes are desired.\n\tDeprecated: use \"-classifications ...\" instead.\n-distribution\n\tOutputs the distribution instead of only the prediction\n\tin conjunction with the '-p' option (only nominal classes).\n\tDeprecated: use \"-classifications ...\" instead.\n-r\n\tOnly outputs cumulative margin distribution.\n-xml filename | xml-string\n\tRetrieves the options from the XML-data instead of the command line.\n-threshold-file <file>\n\tThe file to save the threshold data to.\n\tThe format is determined by the extensions, e.g., '.arff' for ARFF \n\tformat or '.csv' for CSV.\n-threshold-label <label>\n\tThe class label to determine the threshold data for\n\t(default is the first label)\n\nOptions specific to weka.classifiers.rules.PART:\n\n-C <pruning confidence>\n\tSet confidence threshold for pruning.\n\t(default 0.25)\n-M <minimum number of objects>\n\tSet minimum number of objects per leaf.\n\t(default 2)\n-R\n\tUse reduced error pruning.\n-N <number of folds>\n\tSet number of folds for reduced error\n\tpruning. One fold is used as pruning set.\n\t(default 3)\n-B\n\tUse binary splits only.\n-U\n\tGenerate unpruned decision list.\n-J\n\tDo not use MDL correction for info gain on numeric attributes.\n-Q <seed>\n\tSeed for random data shuffling (default 1).\n", string0);
      assertNotNull(string0);
      
      try {
        CostMatrix costMatrix0 = Evaluation.handleCostOption("\n\nGeneral options:\n\n-h or -help\n\tOutput help information.\n-synopsis or -info\n\tOutput synopsis for classifier (use in conjunction  with -h)\n-t <name of training file>\n\tSets training file.\n-T <name of test file>\n\tSets test file. If missing, a cross-validation will be performed\n\ton the training data.\n-c <class index>\n\tSets index of class attribute (default: last).\n-x <number of folds>\n\tSets number of folds for cross-validation (default: 10).\n-no-cv\n\tDo not perform any cross validation.\n-split-percentage <percentage>\n\tSets the percentage for the train/test set split, e.g., 66.\n-preserve-order\n\tPreserves the order in the percentage split.\n-s <random number seed>\n\tSets random number seed for cross-validation or percentage split\n\t(default: 1).\n-m <name of file with cost matrix>\n\tSets file with cost matrix.\n-l <name of input file>\n\tSets model input file. In case the filename ends with '.xml',\n\ta PMML file is loaded or, if that fails, options are loaded\n\tfrom the XML file.\n-d <name of output file>\n\tSets model output file. In case the filename ends with '.xml',\n\tonly the options are saved to the XML file, not the model.\n-v\n\tOutputs no statistics for training data.\n-o\n\tOutputs statistics only, not the classifier.\n-i\n\tOutputs detailed information-retrieval statistics for each class.\n-k\n\tOutputs information-theoretic statistics.\n-classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"\n\tUses the specified class for generating the classification output.\n\tE.g.: weka.classifiers.evaluation.output.prediction.PlainText\n-p range\n\tOutputs predictions for test instances (or the train instances if\n\tno test instances provided and -no-cv is used), along with the \n\tattributes in the specified range (and nothing else). \n\tUse '-p 0' if no attributes are desired.\n\tDeprecated: use \"-classifications ...\" instead.\n-distribution\n\tOutputs the distribution instead of only the prediction\n\tin conjunction with the '-p' option (only nominal classes).\n\tDeprecated: use \"-classifications ...\" instead.\n-r\n\tOnly outputs cumulative margin distribution.\n-xml filename | xml-string\n\tRetrieves the options from the XML-data instead of the command line.\n-threshold-file <file>\n\tThe file to save the threshold data to.\n\tThe format is determined by the extensions, e.g., '.arff' for ARFF \n\tformat or '.csv' for CSV.\n-threshold-label <label>\n\tThe class label to determine the threshold data for\n\t(default is the first label)\n\nOptions specific to weka.classifiers.rules.PART:\n\n-C <pruning confidence>\n\tSet confidence threshold for pruning.\n\t(default 0.25)\n-M <minimum number of objects>\n\tSet minimum number of objects per leaf.\n\t(default 2)\n-R\n\tUse reduced error pruning.\n-N <number of folds>\n\tSet number of folds for reduced error\n\tpruning. One fold is used as pruning set.\n\t(default 3)\n-B\n\tUse binary splits only.\n-U\n\tGenerate unpruned decision list.\n-J\n\tDo not use MDL correction for info gain on numeric attributes.\n-Q <seed>\n\tSeed for random data shuffling (default 1).\n", 31);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
      }
  }

  //Test case number: 51
  /*
   * 10 covered goals:
   * Goal 1. weka.classifiers.Evaluation.unclassified()D: root-Branch
   * Goal 2. weka.classifiers.Evaluation.toSummaryString()Ljava/lang/String;: root-Branch
   * Goal 3. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I86 Branch 2 IF_ICMPGE L413 - false
   * Goal 4. weka.classifiers.Evaluation.toSummaryString(Ljava/lang/String;Z)Ljava/lang/String;: I12 Branch 226 IFEQ L2512 - true
   * Goal 5. weka.classifiers.Evaluation.toSummaryString(Ljava/lang/String;Z)Ljava/lang/String;: I50 Branch 228 IFLE L2520 - true
   * Goal 6. weka.classifiers.Evaluation.toSummaryString(Ljava/lang/String;Z)Ljava/lang/String;: I625 Branch 237 IFEQ L2592 - true
   * Goal 7. weka.classifiers.Evaluation.toSummaryString(Ljava/lang/String;Z)Ljava/lang/String;: I689 Branch 238 IFLE L2599 - true
   * Goal 8. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I168 Branch 324 IF_ICMPGE L3362 - false
   * Goal 9. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I201 Branch 325 IF_ICMPGE L3366 - false
   * Goal 10. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I211 Branch 326 IFNE L3367 - false
   */

  @Test
  public void test51()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertNotNull(testInstances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Instances instances0 = testInstances0.generate("llqkw");
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertNotNull(instances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertNotNull(evaluation0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      String string0 = evaluation0.toSummaryString();
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      assertNotNull(string0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
  }

  //Test case number: 52
  /*
   * 10 covered goals:
   * Goal 1. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;)V: root-Branch
   * Goal 2. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I58 Branch 1 IFEQ L410 - false
   * Goal 3. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I86 Branch 2 IF_ICMPGE L413 - true
   * Goal 4. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I116 Branch 3 IFNULL L418 - true
   * Goal 5. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;Lweka/core/Instances;[Ljava/lang/Object;)[D: I17 Branch 167 IFLE L1640 - false
   * Goal 6. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;Lweka/core/Instances;[Ljava/lang/Object;)[D: I32 Branch 168 IFEQ L1644 - true
   * Goal 7. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;Lweka/core/Instances;[Ljava/lang/Object;)[D: I110 Branch 171 IF_ICMPGE L1658 - true
   * Goal 8. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I12 Branch 319 IFNE L3335 - true
   * Goal 9. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I168 Branch 324 IF_ICMPGE L3362 - true
   * Goal 10. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I201 Branch 325 IF_ICMPGE L3366 - true
   */

  @Test
  public void test52()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertEquals(0, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertTrue(instances0.checkForStringAttributes());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertNotNull(instances0);
      
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(770, true, true);
      assertTrue(simpleLogistic0.getUseCrossValidation());
      assertEquals(770, simpleLogistic0.getNumBoostingIterations());
      assertEquals(50, simpleLogistic0.getHeuristicStop());
      assertFalse(simpleLogistic0.getUseAIC());
      assertEquals("The AIC is used to determine when to stop LogitBoost iterations (instead of cross-validation or training error).", simpleLogistic0.useAICTipText());
      assertEquals("Sets whether the number of LogitBoost iterations is to be cross-validated or the stopping criterion on the training set should be used. If not set (and no fixed number of iterations was given), the number of LogitBoost iterations is used that minimizes the error on the training set (misclassification error or error on probabilities depending on errorOnProbabilities).", simpleLogistic0.useCrossValidationTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", simpleLogistic0.debugTipText());
      assertEquals("Sets the maximum number of iterations for LogitBoost. Default value is 500, for very small/large datasets a lower/higher value might be preferable.", simpleLogistic0.maxBoostingIterationsTipText());
      assertEquals("Set the beta value used for weight trimming in LogitBoost. Only instances carrying (1 - beta)% of the weight from previous iteration are used in the next iteration. Set to 0 for no weight trimming. The default value is 0.", simpleLogistic0.weightTrimBetaTipText());
      assertFalse(simpleLogistic0.getDebug());
      assertEquals("Use error on the probabilties as error measure when determining the best number of LogitBoost iterations. If set, the number of LogitBoost iterations is chosen that minimizes the root mean squared error (either on the training set or in the cross-validation, depending on useCrossValidation).", simpleLogistic0.errorOnProbabilitiesTipText());
      assertEquals(0.0, simpleLogistic0.getWeightTrimBeta(), 0.01D);
      assertTrue(simpleLogistic0.getErrorOnProbabilities());
      assertEquals("Set fixed number of iterations for LogitBoost. If >= 0, this sets the number of LogitBoost iterations to perform. If < 0, the number is cross-validated or a stopping criterion on the training set is used (depending on the value of useCrossValidation).", simpleLogistic0.numBoostingIterationsTipText());
      assertEquals("If heuristicStop > 0, the heuristic for greedy stopping while cross-validating the number of LogitBoost iterations is enabled. This means LogitBoost is stopped if no new error minimum has been reached in the last heuristicStop iterations. It is recommended to use this heuristic, it gives a large speed-up especially on small datasets. The default value is 50.", simpleLogistic0.heuristicStopTipText());
      assertEquals(500, simpleLogistic0.getMaxBoostingIterations());
      assertNotNull(simpleLogistic0);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertTrue(instances0.checkForStringAttributes());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertNotNull(evaluation0);
      
      Object[] objectArray0 = new Object[14];
      double[] doubleArray0 = evaluation0.evaluateModel((Classifier) simpleLogistic0, instances0, objectArray0);
      assertTrue(simpleLogistic0.getUseCrossValidation());
      assertEquals(770, simpleLogistic0.getNumBoostingIterations());
      assertEquals(50, simpleLogistic0.getHeuristicStop());
      assertFalse(simpleLogistic0.getUseAIC());
      assertEquals("The AIC is used to determine when to stop LogitBoost iterations (instead of cross-validation or training error).", simpleLogistic0.useAICTipText());
      assertEquals("Sets whether the number of LogitBoost iterations is to be cross-validated or the stopping criterion on the training set should be used. If not set (and no fixed number of iterations was given), the number of LogitBoost iterations is used that minimizes the error on the training set (misclassification error or error on probabilities depending on errorOnProbabilities).", simpleLogistic0.useCrossValidationTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", simpleLogistic0.debugTipText());
      assertEquals("Sets the maximum number of iterations for LogitBoost. Default value is 500, for very small/large datasets a lower/higher value might be preferable.", simpleLogistic0.maxBoostingIterationsTipText());
      assertEquals("Set the beta value used for weight trimming in LogitBoost. Only instances carrying (1 - beta)% of the weight from previous iteration are used in the next iteration. Set to 0 for no weight trimming. The default value is 0.", simpleLogistic0.weightTrimBetaTipText());
      assertFalse(simpleLogistic0.getDebug());
      assertEquals("Use error on the probabilties as error measure when determining the best number of LogitBoost iterations. If set, the number of LogitBoost iterations is chosen that minimizes the root mean squared error (either on the training set or in the cross-validation, depending on useCrossValidation).", simpleLogistic0.errorOnProbabilitiesTipText());
      assertEquals(0.0, simpleLogistic0.getWeightTrimBeta(), 0.01D);
      assertTrue(simpleLogistic0.getErrorOnProbabilities());
      assertEquals("Set fixed number of iterations for LogitBoost. If >= 0, this sets the number of LogitBoost iterations to perform. If < 0, the number is cross-validated or a stopping criterion on the training set is used (depending on the value of useCrossValidation).", simpleLogistic0.numBoostingIterationsTipText());
      assertEquals("If heuristicStop > 0, the heuristic for greedy stopping while cross-validating the number of LogitBoost iterations is enabled. This means LogitBoost is stopped if no new error minimum has been reached in the last heuristicStop iterations. It is recommended to use this heuristic, it gives a large speed-up especially on small datasets. The default value is 50.", simpleLogistic0.heuristicStopTipText());
      assertEquals(500, simpleLogistic0.getMaxBoostingIterations());
      assertEquals(0, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertTrue(instances0.checkForStringAttributes());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }
}
