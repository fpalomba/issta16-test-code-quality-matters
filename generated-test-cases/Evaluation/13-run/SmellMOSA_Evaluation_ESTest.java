/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 17 07:47:44 GMT 2015
 */

package weka.classifiers;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.junit.runner.RunWith;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.Sourcable;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.REPTree;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.FastVector;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.TestInstances;
import weka.core.converters.ConverterUtils;
import weka.core.converters.Loader;
import weka.core.converters.TextDirectoryLoader;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.unweightedMacroFmeasure()D: I17 Branch 316 IF_ICMPGE L3294 - false
   * Goal 2. weka.classifiers.Evaluation.unweightedMacroFmeasure()D: I32 Branch 317 IFLE L3296 - true
   */

  @Test
  public void test00()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertNotNull(testInstances0);
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Instances instances0 = testInstances0.generate("\tA file containing stopwords to override the default ones.\n\tUsing this option automatically sets the flag ('-stoplist') to usethe\n\tstoplist if the fle exists.\n\tFormat: one stopword per line, lines starting with '#'\n\tare interpreted as comments and ignored.");
      assertNotNull(instances0);
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, instances0.size());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, instances0.size());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      double double0 = evaluation0.unweightedMacroFmeasure();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, instances0.size());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.setDiscardPredictions(Z)V: I12 Branch 6 IFEQ L449 - true
   */

  @Test
  public void test01()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource((Loader) textDirectoryLoader0);
      assertNotNull(converterUtils_DataSource0);
      assertTrue(converterUtils_DataSource0.isIncremental());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      
      Instances instances0 = converterUtils_DataSource0.getStructure();
      assertNotNull(instances0);
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertTrue(converterUtils_DataSource0.isIncremental());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertTrue(converterUtils_DataSource0.isIncremental());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      
      evaluation0.setDiscardPredictions(false);
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertTrue(converterUtils_DataSource0.isIncremental());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
  }

  //Test case number: 2
  /*
   * 3 covered goals:
   * Goal 1. weka.classifiers.Evaluation.rootMeanSquaredError()D: root-Branch
   * Goal 2. weka.classifiers.Evaluation.rootMeanPriorSquaredError()D: I7 Branch 201 IFEQ L2266 - true
   * Goal 3. weka.classifiers.Evaluation.rootRelativeSquaredError()D: I7 Branch 202 IFEQ L2279 - true
   */

  @Test
  public void test02()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertNotNull(instances0);
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      
      double double0 = evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.weightedFalseNegativeRate()D: I21 Branch 298 IF_ICMPGE L3086 - true
   * Goal 2. weka.classifiers.Evaluation.weightedFalseNegativeRate()D: I85 Branch 300 IF_ICMPGE L3094 - true
   */

  @Test
  public void test03()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertNotNull(instances0);
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      
      double double0 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
  }

  //Test case number: 4
  /*
   * 7 covered goals:
   * Goal 1. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I155 Branch 5 IF_ICMPEQ L422 - true
   * Goal 2. weka.classifiers.Evaluation.toCumulativeMarginDistributionString()Ljava/lang/String;: I7 Branch 222 IFNE L2453 - true
   * Goal 3. weka.classifiers.Evaluation.toCumulativeMarginDistributionString()Ljava/lang/String;: I46 Branch 223 IF_ICMPGT L2459 - true
   * Goal 4. weka.classifiers.Evaluation.toCumulativeMarginDistributionString()Ljava/lang/String;: I46 Branch 223 IF_ICMPGT L2459 - false
   * Goal 5. weka.classifiers.Evaluation.toCumulativeMarginDistributionString()Ljava/lang/String;: I58 Branch 224 IFEQ L2460 - true
   * Goal 6. weka.classifiers.Evaluation.toCumulativeMarginDistributionString()Ljava/lang/String;: I118 Branch 225 IFNE L2466 - true
   * Goal 7. weka.classifiers.Evaluation.toCumulativeMarginDistributionString()Ljava/lang/String;: I118 Branch 225 IFNE L2466 - false
   */

  @Test
  public void test04()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertNotNull(instances0);
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertNotNull(string0);
      assertEquals(" -1       0    \n", string0);
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      
      CostMatrix costMatrix0 = new CostMatrix(0);
      assertNotNull(costMatrix0);
      assertEquals(0, costMatrix0.size());
      assertEquals(0, costMatrix0.numColumns());
      assertEquals(0, costMatrix0.numRows());
      
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      assertTrue(evaluation1.equals((Object)evaluation0));
      assertNotNull(evaluation1);
      assertNotSame(evaluation1, evaluation0);
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(Double.NaN, evaluation1.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation1.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation1.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation1.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation1.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation1.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation1.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation1.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation1.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation1.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation1.SFMeanPriorEntropy(), 0.01D);
      assertFalse(evaluation1.getDiscardPredictions());
      assertEquals(0.0, evaluation1.correct(), 0.01D);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation1.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation1.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation1.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation1.totalCost(), 0.01D);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation1.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation1.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation1.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation1.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation1.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation1.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation1.incorrect(), 0.01D);
      assertEquals(1.0, evaluation1.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation1.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation1.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation1.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation1.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation1.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation1.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation1.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation1.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0, costMatrix0.size());
      assertEquals(0, costMatrix0.numColumns());
      assertEquals(0, costMatrix0.numRows());
  }

  //Test case number: 5
  /*
   * 7 covered goals:
   * Goal 1. weka.classifiers.Evaluation.trueNegativeRate(I)D: I18 Branch 269 IF_ICMPGE L2891 - true
   * Goal 2. weka.classifiers.Evaluation.trueNegativeRate(I)D: I18 Branch 269 IF_ICMPGE L2891 - false
   * Goal 3. weka.classifiers.Evaluation.trueNegativeRate(I)D: I26 Branch 270 IF_ICMPEQ L2892 - false
   * Goal 4. weka.classifiers.Evaluation.trueNegativeRate(I)D: I38 Branch 271 IF_ICMPGE L2893 - true
   * Goal 5. weka.classifiers.Evaluation.trueNegativeRate(I)D: I38 Branch 271 IF_ICMPGE L2893 - false
   * Goal 6. weka.classifiers.Evaluation.trueNegativeRate(I)D: I46 Branch 272 IF_ICMPEQ L2894 - false
   * Goal 7. weka.classifiers.Evaluation.trueNegativeRate(I)D: I91 Branch 273 IFNE L2901 - false
   */

  @Test
  public void test05()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertNotNull(testInstances0);
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(testInstances0.getNoClass());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Instances instances0 = testInstances0.generate();
      assertNotNull(instances0);
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(testInstances0.getNoClass());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(testInstances0.getNoClass());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      double double0 = evaluation0.trueNegativeRate((-105));
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(testInstances0.getNoClass());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.addNumericTrainClass(DD)V: I9 Branch 385 IFLE L3931 - false
   * Goal 2. weka.classifiers.Evaluation.addNumericTrainClass(DD)V: I24 Branch 386 IFGE L3934 - true
   */

  @Test
  public void test06()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertNotNull(testInstances0);
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getClassType());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Instances instances0 = testInstances0.generate();
      assertNotNull(instances0);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getClassType());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getClassType());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      evaluation0.addNumericTrainClass(10.0, 10.0);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getClassType());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
  }

  //Test case number: 7
  /*
   * 9 covered goals:
   * Goal 1. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;Lweka/core/Instances;[Ljava/lang/Object;)[D: I17 Branch 167 IFLE L1640 - false
   * Goal 2. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;Lweka/core/Instances;[Ljava/lang/Object;)[D: I32 Branch 168 IFEQ L1644 - true
   * Goal 3. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;Lweka/core/Instances;[Ljava/lang/Object;)[D: I110 Branch 171 IF_ICMPGE L1658 - false
   * Goal 4. weka.classifiers.Evaluation.evaluationForSingleInstance([DLweka/core/Instance;Z)D: I7 Branch 173 IFEQ L1684 - false
   * Goal 5. weka.classifiers.Evaluation.evaluationForSingleInstance([DLweka/core/Instance;Z)D: I25 Branch 174 IFGT L1686 - false
   * Goal 6. weka.classifiers.Evaluation.updateStatsForClassifier([DLweka/core/Instance;)V: I13 Branch 362 IFNE L3699 - false
   * Goal 7. weka.classifiers.Evaluation.updateMargins([DID)V: I21 Branch 381 IF_ICMPGE L3881 - false
   * Goal 8. weka.classifiers.Evaluation.updateMargins([DID)V: I29 Branch 382 IF_ICMPEQ L3882 - true
   * Goal 9. weka.classifiers.Evaluation.updateMargins([DID)V: I29 Branch 382 IF_ICMPEQ L3882 - false
   */

  @Test
  public void test07()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertNotNull(testInstances0);
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Instances instances0 = testInstances0.generate();
      assertNotNull(instances0);
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      assertNotNull(costSensitiveClassifier0);
      assertEquals(1, costSensitiveClassifier0.getSeed());
      assertEquals("If set to true, classifier may output additional info to the console.", costSensitiveClassifier0.debugTipText());
      assertEquals("A metaclassifier that makes its base classifier cost-sensitive. Two methods can be used to introduce cost-sensitivity: reweighting training instances according to the total cost assigned to each class; or predicting the class with minimum expected misclassification cost (rather than the most likely class). Performance can often be improved by using a Bagged classifier to improve the probability estimates of the base classifier.", costSensitiveClassifier0.globalInfo());
      assertEquals(0, costSensitiveClassifier0.graphType());
      assertEquals("The random number seed to be used.", costSensitiveClassifier0.seedTipText());
      assertFalse(costSensitiveClassifier0.getMinimizeExpectedCost());
      assertEquals("Sets whether the minimum expected cost criteria will be used. If this is false, the training data will be reweighted according to the costs assigned to each class. If true, the minimum expected cost criteria will be used.", costSensitiveClassifier0.minimizeExpectedCostTipText());
      assertEquals("Sets the directory where cost files are loaded from. This option is used when the costMatrixSource is set to \"On Demand\".", costSensitiveClassifier0.onDemandDirectoryTipText());
      assertEquals("The base classifier to be used.", costSensitiveClassifier0.classifierTipText());
      assertEquals("Sets the cost matrix explicitly. This matrix is used if the costMatrixSource property is set to \"Supplied\".", costSensitiveClassifier0.costMatrixTipText());
      assertFalse(costSensitiveClassifier0.getDebug());
      assertEquals(1, costSensitiveClassifier0.MATRIX_ON_DEMAND);
      assertEquals(2, costSensitiveClassifier0.MATRIX_SUPPLIED);
      
      Object[] objectArray0 = new Object[6];
      try {
        double[] doubleArray0 = evaluation0.evaluateModel((Classifier) costSensitiveClassifier0, instances0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
      }
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.unweightedMacroFmeasure()D: I17 Branch 316 IF_ICMPGE L3294 - true
   */

  @Test
  public void test08()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertNotNull(instances0);
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      
      double double0 = evaluation0.unweightedMacroFmeasure();
      assertEquals(Double.NaN, double0, 0.01D);
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.totalCost()D: root-Branch
   */

  @Test
  public void test09()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource((Loader) textDirectoryLoader0);
      assertNotNull(converterUtils_DataSource0);
      assertTrue(converterUtils_DataSource0.isIncremental());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      
      Instances instances0 = converterUtils_DataSource0.getStructure();
      assertNotNull(instances0);
      assertTrue(converterUtils_DataSource0.isIncremental());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertTrue(converterUtils_DataSource0.isIncremental());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      
      double double0 = evaluation0.totalCost();
      assertEquals(0.0, double0, 0.01D);
      assertTrue(converterUtils_DataSource0.isIncremental());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.numInstances()D: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertNotNull(instances0);
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      
      double double0 = evaluation0.numInstances();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
  }

  //Test case number: 11
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.evaluateModelOnceAndRecordPrediction(Lweka/classifiers/Classifier;Lweka/core/Instance;)D: root-Branch
   * Goal 2. weka.classifiers.Evaluation.evaluationForSingleInstance(Lweka/classifiers/Classifier;Lweka/core/Instance;Z)D: I19 Branch 181 IFEQ L1726 - true
   */

  @Test
  public void test11()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertNotNull(instances0);
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      
      double[] doubleArray0 = new double[4];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      assertNotNull(binarySparseInstance0);
      assertEquals(4, binarySparseInstance0.numAttributes());
      assertEquals(0, binarySparseInstance0.numValues());
      assertEquals(0.0, binarySparseInstance0.weight(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, binarySparseInstance0.s_numericAfterDecimalPoint);
      
      Stacking stacking0 = new Stacking();
      assertNotNull(stacking0);
      assertFalse(stacking0.getDebug());
      assertEquals("The random number seed to be used.", stacking0.seedTipText());
      assertEquals("The base classifiers to be used.", stacking0.classifiersTipText());
      assertEquals("The number of execution slots (threads) to use for constructing the ensemble.", stacking0.numExecutionSlotsTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", stacking0.debugTipText());
      assertEquals(1, stacking0.getSeed());
      assertEquals("The meta classifiers to be used.", stacking0.metaClassifierTipText());
      assertEquals("The number of folds used for cross-validation.", stacking0.numFoldsTipText());
      assertEquals(10, stacking0.getNumFolds());
      assertEquals(1, stacking0.getNumExecutionSlots());
      
      try {
        double double0 = evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) stacking0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
      }
  }

  //Test case number: 12
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.KBMeanInformation()D: I7 Branch 208 IFNE L2335 - true
   * Goal 2. weka.classifiers.Evaluation.KBMeanInformation()D: I35 Branch 209 IFEQ L2339 - true
   */

  @Test
  public void test12()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertNotNull(instances0);
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      
      double double0 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I436 Branch 352 IFEQ L3587 - true
   */

  @Test
  public void test13()  throws Throwable  {
      String string0 = Evaluation.makeOptionString((Classifier) null, false);
      assertNotNull(string0);
      assertEquals("\n\nGeneral options:\n\n-h or -help\n\tOutput help information.\n-synopsis or -info\n\tOutput synopsis for classifier (use in conjunction  with -h)\n-t <name of training file>\n\tSets training file.\n-T <name of test file>\n\tSets test file. If missing, a cross-validation will be performed\n\ton the training data.\n-c <class index>\n\tSets index of class attribute (default: last).\n-x <number of folds>\n\tSets number of folds for cross-validation (default: 10).\n-no-cv\n\tDo not perform any cross validation.\n-split-percentage <percentage>\n\tSets the percentage for the train/test set split, e.g., 66.\n-preserve-order\n\tPreserves the order in the percentage split.\n-s <random number seed>\n\tSets random number seed for cross-validation or percentage split\n\t(default: 1).\n-m <name of file with cost matrix>\n\tSets file with cost matrix.\n-l <name of input file>\n\tSets model input file. In case the filename ends with '.xml',\n\ta PMML file is loaded or, if that fails, options are loaded\n\tfrom the XML file.\n-d <name of output file>\n\tSets model output file. In case the filename ends with '.xml',\n\tonly the options are saved to the XML file, not the model.\n-v\n\tOutputs no statistics for training data.\n-o\n\tOutputs statistics only, not the classifier.\n-i\n\tOutputs detailed information-retrieval statistics for each class.\n-k\n\tOutputs information-theoretic statistics.\n-classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"\n\tUses the specified class for generating the classification output.\n\tE.g.: weka.classifiers.evaluation.output.prediction.PlainText\n-p range\n\tOutputs predictions for test instances (or the train instances if\n\tno test instances provided and -no-cv is used), along with the \n\tattributes in the specified range (and nothing else). \n\tUse '-p 0' if no attributes are desired.\n\tDeprecated: use \"-classifications ...\" instead.\n-distribution\n\tOutputs the distribution instead of only the prediction\n\tin conjunction with the '-p' option (only nominal classes).\n\tDeprecated: use \"-classifications ...\" instead.\n-r\n\tOnly outputs cumulative margin distribution.\n-xml filename | xml-string\n\tRetrieves the options from the XML-data instead of the command line.\n-threshold-file <file>\n\tThe file to save the threshold data to.\n\tThe format is determined by the extensions, e.g., '.arff' for ARFF \n\tformat or '.csv' for CSV.\n-threshold-label <label>\n\tThe class label to determine the threshold data for\n\t(default is the first label)\n", string0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.predictions()Lweka/core/FastVector;: I7 Branch 187 IFEQ L1845 - true
   */

  @Test
  public void test14()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertNotNull(testInstances0);
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(testInstances0.getNoClass());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(1, testInstances0.getClassType());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Instances instances0 = testInstances0.generate();
      assertNotNull(instances0);
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(testInstances0.getNoClass());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(1, testInstances0.getClassType());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(testInstances0.getNoClass());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(1, testInstances0.getClassType());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      FastVector fastVector0 = evaluation0.predictions();
      assertNull(fastVector0);
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(testInstances0.getNoClass());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(1, testInstances0.getClassType());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.avgCost()D: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertNotNull(testInstances0);
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Instances instances0 = testInstances0.generate();
      assertNotNull(instances0);
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      assertNotNull(evaluation0);
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      double double0 = evaluation0.avgCost();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
  }

  //Test case number: 16
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.toSummaryString(Ljava/lang/String;Z)Ljava/lang/String;: I12 Branch 226 IFEQ L2512 - false
   * Goal 2. weka.classifiers.Evaluation.toSummaryString(Ljava/lang/String;Z)Ljava/lang/String;: I18 Branch 227 IFEQ L2512 - true
   */

  @Test
  public void test16()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertNotNull(testInstances0);
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Instances instances0 = testInstances0.generate();
      assertNotNull(instances0);
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      String string0 = evaluation0.toSummaryString(true);
      assertNotNull(string0);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
  }

  //Test case number: 17
  /*
   * 4 covered goals:
   * Goal 1. weka.classifiers.Evaluation.falseNegativeRate(I)D: I18 Branch 293 IF_ICMPGE L3061 - true
   * Goal 2. weka.classifiers.Evaluation.falseNegativeRate(I)D: I18 Branch 293 IF_ICMPGE L3061 - false
   * Goal 3. weka.classifiers.Evaluation.falseNegativeRate(I)D: I26 Branch 294 IF_ICMPNE L3062 - true
   * Goal 4. weka.classifiers.Evaluation.falseNegativeRate(I)D: I91 Branch 297 IFNE L3071 - false
   */

  @Test
  public void test17()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      assertNotNull(decisionStump0);
      assertEquals("If set to true, classifier may output additional info to the console.", decisionStump0.debugTipText());
      assertFalse(decisionStump0.getDebug());
      assertEquals("Class for building and using a decision stump. Usually used in conjunction with a boosting algorithm. Does regression (based on mean-squared error) or classification (based on entropy). Missing is treated as a separate value.", decisionStump0.globalInfo());
      
      Capabilities capabilities0 = decisionStump0.getCapabilities();
      assertNotNull(capabilities0);
      assertEquals("If set to true, classifier may output additional info to the console.", decisionStump0.debugTipText());
      assertFalse(decisionStump0.getDebug());
      assertEquals("Class for building and using a decision stump. Usually used in conjunction with a boosting algorithm. Does regression (based on mean-squared error) or classification (based on entropy). Missing is treated as a separate value.", decisionStump0.globalInfo());
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      assertNotNull(testInstances0);
      assertEquals("If set to true, classifier may output additional info to the console.", decisionStump0.debugTipText());
      assertFalse(decisionStump0.getDebug());
      assertEquals("Class for building and using a decision stump. Usually used in conjunction with a boosting algorithm. Does regression (based on mean-squared error) or classification (based on entropy). Missing is treated as a separate value.", decisionStump0.globalInfo());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(4, testInstances0.getNumAttributes());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Instances instances0 = testInstances0.generate();
      assertNotNull(instances0);
      assertEquals("If set to true, classifier may output additional info to the console.", decisionStump0.debugTipText());
      assertFalse(decisionStump0.getDebug());
      assertEquals("Class for building and using a decision stump. Usually used in conjunction with a boosting algorithm. Does regression (based on mean-squared error) or classification (based on entropy). Missing is treated as a separate value.", decisionStump0.globalInfo());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(4, instances0.numClasses());
      assertEquals(3, instances0.classIndex());
      assertEquals(4, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(4, testInstances0.getNumAttributes());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals("If set to true, classifier may output additional info to the console.", decisionStump0.debugTipText());
      assertFalse(decisionStump0.getDebug());
      assertEquals("Class for building and using a decision stump. Usually used in conjunction with a boosting algorithm. Does regression (based on mean-squared error) or classification (based on entropy). Missing is treated as a separate value.", decisionStump0.globalInfo());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(4, instances0.numClasses());
      assertEquals(3, instances0.classIndex());
      assertEquals(4, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(4, testInstances0.getNumAttributes());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      double double0 = evaluation0.falseNegativeRate((-2524));
      assertEquals(0.0, double0, 0.01D);
      assertEquals("If set to true, classifier may output additional info to the console.", decisionStump0.debugTipText());
      assertFalse(decisionStump0.getDebug());
      assertEquals("Class for building and using a decision stump. Usually used in conjunction with a boosting algorithm. Does regression (based on mean-squared error) or classification (based on entropy). Missing is treated as a separate value.", decisionStump0.globalInfo());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(4, instances0.numClasses());
      assertEquals(3, instances0.classIndex());
      assertEquals(4, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(4, testInstances0.getNumAttributes());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.getClassPriors()[D: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertNotNull(testInstances0);
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Instances instances0 = testInstances0.generate();
      assertNotNull(instances0);
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertNotNull(doubleArray0);
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertArrayEquals(new double[] {12.0, 10.0}, doubleArray0, 0.01);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.setDiscardPredictions(Z)V: I12 Branch 6 IFEQ L449 - false
   */

  @Test
  public void test19()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertNotNull(instances0);
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      
      evaluation0.setDiscardPredictions(true);
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertTrue(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
  }

  //Test case number: 20
  /*
   * 5 covered goals:
   * Goal 1. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I58 Branch 1 IFEQ L410 - true
   * Goal 2. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I12 Branch 319 IFNE L3335 - false
   * Goal 3. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I54 Branch 320 IF_ICMPGE L3345 - true
   * Goal 4. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I105 Branch 322 IF_ICMPGE L3353 - true
   * Goal 5. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I380 Branch 351 IFEQ L3567 - true
   */

  @Test
  public void test20()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource((Loader) textDirectoryLoader0);
      assertNotNull(converterUtils_DataSource0);
      assertTrue(converterUtils_DataSource0.isIncremental());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      
      Instances instances0 = converterUtils_DataSource0.getDataSet(0);
      assertNotNull(instances0);
      assertTrue(converterUtils_DataSource0.isIncremental());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals(1, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertTrue(converterUtils_DataSource0.isIncremental());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals(1, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      assertNotNull(regressionByDiscretization0);
      assertEquals(10, regressionByDiscretization0.getNumBins());
      assertEquals("The base classifier to be used.", regressionByDiscretization0.classifierTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", regressionByDiscretization0.useEqualFrequencyTipText());
      assertEquals("Number of bins for discretization.", regressionByDiscretization0.numBinsTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", regressionByDiscretization0.debugTipText());
      assertFalse(regressionByDiscretization0.getMinimizeAbsoluteError());
      assertEquals("Whether to minimize absolute error.", regressionByDiscretization0.minimizeAbsoluteErrorTipText());
      assertEquals("The density estimator to use.", regressionByDiscretization0.estimatorTypeTipText());
      assertFalse(regressionByDiscretization0.getDebug());
      assertFalse(regressionByDiscretization0.getDeleteEmptyBins());
      assertEquals("Whether to delete empty bins after discretization.", regressionByDiscretization0.deleteEmptyBinsTipText());
      assertFalse(regressionByDiscretization0.getUseEqualFrequency());
      assertEquals(0, regressionByDiscretization0.ESTIMATOR_HISTOGRAM);
      assertEquals(1, regressionByDiscretization0.ESTIMATOR_KERNEL);
      assertEquals(2, regressionByDiscretization0.ESTIMATOR_NORMAL);
      
      String string0 = Evaluation.makeOptionString(regressionByDiscretization0, true);
      assertNotNull(string0);
      assertEquals("\n\nGeneral options:\n\n-h or -help\n\tOutput help information.\n-synopsis or -info\n\tOutput synopsis for classifier (use in conjunction  with -h)\n-t <name of training file>\n\tSets training file.\n-T <name of test file>\n\tSets test file. If missing, a cross-validation will be performed\n\ton the training data.\n-c <class index>\n\tSets index of class attribute (default: last).\n-x <number of folds>\n\tSets number of folds for cross-validation (default: 10).\n-no-cv\n\tDo not perform any cross validation.\n-split-percentage <percentage>\n\tSets the percentage for the train/test set split, e.g., 66.\n-preserve-order\n\tPreserves the order in the percentage split.\n-s <random number seed>\n\tSets random number seed for cross-validation or percentage split\n\t(default: 1).\n-m <name of file with cost matrix>\n\tSets file with cost matrix.\n-l <name of input file>\n\tSets model input file. In case the filename ends with '.xml',\n\ta PMML file is loaded or, if that fails, options are loaded\n\tfrom the XML file.\n-d <name of output file>\n\tSets model output file. In case the filename ends with '.xml',\n\tonly the options are saved to the XML file, not the model.\n-v\n\tOutputs no statistics for training data.\n-o\n\tOutputs statistics only, not the classifier.\n-i\n\tOutputs detailed information-retrieval statistics for each class.\n-k\n\tOutputs information-theoretic statistics.\n-classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"\n\tUses the specified class for generating the classification output.\n\tE.g.: weka.classifiers.evaluation.output.prediction.PlainText\n-p range\n\tOutputs predictions for test instances (or the train instances if\n\tno test instances provided and -no-cv is used), along with the \n\tattributes in the specified range (and nothing else). \n\tUse '-p 0' if no attributes are desired.\n\tDeprecated: use \"-classifications ...\" instead.\n-distribution\n\tOutputs the distribution instead of only the prediction\n\tin conjunction with the '-p' option (only nominal classes).\n\tDeprecated: use \"-classifications ...\" instead.\n-r\n\tOnly outputs cumulative margin distribution.\n-xml filename | xml-string\n\tRetrieves the options from the XML-data instead of the command line.\n-threshold-file <file>\n\tThe file to save the threshold data to.\n\tThe format is determined by the extensions, e.g., '.arff' for ARFF \n\tformat or '.csv' for CSV.\n-threshold-label <label>\n\tThe class label to determine the threshold data for\n\t(default is the first label)\n\nOptions specific to weka.classifiers.meta.RegressionByDiscretization:\n\n-B <int>\n\tNumber of bins for equal-width discretization\n\t(default 10).\n\n-E\n\tWhether to delete empty bins after discretization\n\t(default false).\n\n-A\n\tWhether to minimize absolute error, rather than squared error.\n\t(default false).\n\n-F\n\tUse equal-frequency instead of equal-width discretization.\n-K\n\tWhat type of density estimator to use: 0=histogram/1=kernel/2=normal (default: 0).\n-D\n\tIf set, classifier is run in debug mode and\n\tmay output additional info to the console\n-W\n\tFull name of base classifier.\n\t(default: weka.classifiers.trees.J48)\n\nOptions specific to classifier weka.classifiers.trees.J48:\n\n-U\n\tUse unpruned tree.\n-O\n\tDo not collapse tree.\n-C <pruning confidence>\n\tSet confidence threshold for pruning.\n\t(default 0.25)\n-M <minimum number of instances>\n\tSet minimum number of instances per leaf.\n\t(default 2)\n-R\n\tUse reduced error pruning.\n-N <number of folds>\n\tSet number of folds for reduced error\n\tpruning. One fold is used as pruning set.\n\t(default 3)\n-B\n\tUse binary splits only.\n-S\n\tDon't perform subtree raising.\n-L\n\tDo not clean up after the tree has been built.\n-A\n\tLaplace smoothing for predicted probabilities.\n-J\n\tDo not use MDL correction for info gain on numeric attributes.\n-Q <seed>\n\tSeed for random data shuffling (default 1).\n\nSynopsis for weka.classifiers.meta.RegressionByDiscretization:\n\nA regression scheme that employs any classifier on a copy of the data that has the class attribute discretized. The predicted value is the expected value of the mean class value for each discretized interval (based on the predicted probabilities for each interval). This class now also supports conditional density estimation by building a univariate density estimator from the target values in the training data, weighted by the class probabilities. \n\nFor more information on this process, see\n\nEibe Frank, Remco R. Bouckaert: Conditional Density Estimation with Class Probability Estimators. In: First Asian Conference on Machine Learning, Berlin, 65-81, 2009.", string0);
      assertEquals(10, regressionByDiscretization0.getNumBins());
      assertEquals("The base classifier to be used.", regressionByDiscretization0.classifierTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", regressionByDiscretization0.useEqualFrequencyTipText());
      assertEquals("Number of bins for discretization.", regressionByDiscretization0.numBinsTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", regressionByDiscretization0.debugTipText());
      assertFalse(regressionByDiscretization0.getMinimizeAbsoluteError());
      assertEquals("Whether to minimize absolute error.", regressionByDiscretization0.minimizeAbsoluteErrorTipText());
      assertEquals("The density estimator to use.", regressionByDiscretization0.estimatorTypeTipText());
      assertFalse(regressionByDiscretization0.getDebug());
      assertFalse(regressionByDiscretization0.getDeleteEmptyBins());
      assertEquals("Whether to delete empty bins after discretization.", regressionByDiscretization0.deleteEmptyBinsTipText());
      assertFalse(regressionByDiscretization0.getUseEqualFrequency());
      assertEquals(0, regressionByDiscretization0.ESTIMATOR_HISTOGRAM);
      assertEquals(1, regressionByDiscretization0.ESTIMATOR_KERNEL);
      assertEquals(2, regressionByDiscretization0.ESTIMATOR_NORMAL);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.pctCorrect()D: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertNotNull(testInstances0);
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Instances instances0 = testInstances0.generate();
      assertNotNull(instances0);
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, instances0.numAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, instances0.numAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      double double0 = evaluation0.pctCorrect();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, instances0.numAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
  }

  //Test case number: 22
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.SFPriorEntropy()D: I7 Branch 212 IFNE L2370 - false
   * Goal 2. weka.classifiers.Evaluation.SFPriorEntropy()D: I13 Branch 213 IFNE L2370 - true
   */

  @Test
  public void test22()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertNotNull(testInstances0);
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertFalse(testInstances0.getNoClass());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Instances instances0 = testInstances0.generate("Avera6e Cost      ]                ");
      assertNotNull(instances0);
      assertEquals(2, instances0.numAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertFalse(testInstances0.getNoClass());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(2, instances0.numAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertFalse(testInstances0.getNoClass());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertFalse(testInstances0.getNoClass());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
  }

  //Test case number: 23
  /*
   * 3 covered goals:
   * Goal 1. weka.classifiers.Evaluation.meanAbsoluteError()D: root-Branch
   * Goal 2. weka.classifiers.Evaluation.meanPriorAbsoluteError()D: I7 Branch 199 IFEQ L2229 - true
   * Goal 3. weka.classifiers.Evaluation.relativeAbsoluteError()D: I7 Branch 200 IFEQ L2243 - true
   */

  @Test
  public void test23()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertNotNull(testInstances0);
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Instances instances0 = testInstances0.generate();
      assertNotNull(instances0);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      double double0 = evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
  }

  //Test case number: 24
  /*
   * 21 covered goals:
   * Goal 1. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I126 Branch 239 IFNE L2640 - true
   * Goal 2. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I162 Branch 240 IF_ICMPGE L2647 - true
   * Goal 3. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I162 Branch 240 IF_ICMPGE L2647 - false
   * Goal 4. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I174 Branch 241 IF_ICMPGE L2648 - true
   * Goal 5. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I174 Branch 241 IF_ICMPGE L2648 - false
   * Goal 6. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I192 Branch 242 IFGE L2650 - true
   * Goal 7. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I207 Branch 243 IFLE L2653 - true
   * Goal 8. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I225 Branch 244 IFNE L2657 - false
   * Goal 9. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I236 Branch 245 IFLT L2657 - true
   * Goal 10. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I267 Branch 246 IFEQ L2663 - true
   * Goal 11. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I311 Branch 247 IF_ICMPGE L2667 - true
   * Goal 12. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I311 Branch 247 IF_ICMPGE L2667 - false
   * Goal 13. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I318 Branch 248 IFEQ L2668 - true
   * Goal 14. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I375 Branch 249 IF_ICMPGE L2676 - true
   * Goal 15. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I375 Branch 249 IF_ICMPGE L2676 - false
   * Goal 16. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I387 Branch 250 IF_ICMPGE L2677 - true
   * Goal 17. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I387 Branch 250 IF_ICMPGE L2677 - false
   * Goal 18. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I404 Branch 251 IFEQ L2678 - true
   * Goal 19. weka.classifiers.Evaluation.num2ShortID(I[CI)Ljava/lang/String;: I16 Branch 357 IFLT L3651 - false
   * Goal 20. weka.classifiers.Evaluation.num2ShortID(I[CI)Ljava/lang/String;: I43 Branch 358 IFGE L3654 - false
   * Goal 21. weka.classifiers.Evaluation.num2ShortID(I[CI)Ljava/lang/String;: I65 Branch 359 IFLT L3658 - true
   */

  @Test
  public void test24()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertNotNull(testInstances0);
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Instances instances0 = testInstances0.generate("ggs21y>L9N{l-`MK ");
      assertNotNull(instances0);
      assertEquals(2, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(2, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      String string0 = evaluation0.toMatrixString("ggs21y>L9N{l-`MK ");
      assertNotNull(string0);
      assertEquals("ggs21y>L9N{l-`MK \n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      assertEquals(2, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
  }

  //Test case number: 25
  /*
   * 4 covered goals:
   * Goal 1. weka.classifiers.Evaluation.KBInformation()D: I7 Branch 206 IFNE L2317 - true
   * Goal 2. weka.classifiers.Evaluation.KBInformation()D: I35 Branch 207 IFEQ L2321 - true
   * Goal 3. weka.classifiers.Evaluation.KBRelativeInformation()D: I7 Branch 210 IFNE L2353 - true
   * Goal 4. weka.classifiers.Evaluation.KBRelativeInformation()D: I35 Branch 211 IFEQ L2357 - true
   */

  @Test
  public void test25()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertNotNull(instances0);
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(Double.NaN, double0, 0.01D);
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
  }

  //Test case number: 26
  /*
   * 62 covered goals:
   * Goal 1. weka.classifiers.Evaluation.recall(I)D: root-Branch
   * Goal 2. weka.classifiers.Evaluation.areaUnderROC(I)D: I7 Branch 7 IFNONNULL L475 - false
   * Goal 3. weka.classifiers.Evaluation.weightedAreaUnderROC()D: I21 Branch 8 IF_ICMPGE L493 - false
   * Goal 4. weka.classifiers.Evaluation.weightedAreaUnderROC()D: I33 Branch 9 IF_ICMPGE L494 - true
   * Goal 5. weka.classifiers.Evaluation.weightedAreaUnderROC()D: I33 Branch 9 IF_ICMPGE L494 - false
   * Goal 6. weka.classifiers.Evaluation.weightedAreaUnderROC()D: I85 Branch 10 IF_ICMPGE L501 - false
   * Goal 7. weka.classifiers.Evaluation.weightedAreaUnderROC()D: I99 Branch 11 IFNE L503 - true
   * Goal 8. weka.classifiers.Evaluation.areaUnderPRC(I)D: I7 Branch 12 IFNONNULL L521 - false
   * Goal 9. weka.classifiers.Evaluation.weightedAreaUnderPRC()D: I21 Branch 13 IF_ICMPGE L539 - false
   * Goal 10. weka.classifiers.Evaluation.weightedAreaUnderPRC()D: I33 Branch 14 IF_ICMPGE L540 - true
   * Goal 11. weka.classifiers.Evaluation.weightedAreaUnderPRC()D: I33 Branch 14 IF_ICMPGE L540 - false
   * Goal 12. weka.classifiers.Evaluation.weightedAreaUnderPRC()D: I85 Branch 15 IF_ICMPGE L547 - false
   * Goal 13. weka.classifiers.Evaluation.weightedAreaUnderPRC()D: I99 Branch 16 IFNE L549 - true
   * Goal 14. weka.classifiers.Evaluation.toClassDetailsString(Ljava/lang/String;)Ljava/lang/String;: I57 Branch 253 IF_ICMPGE L2721 - false
   * Goal 15. weka.classifiers.Evaluation.toClassDetailsString(Ljava/lang/String;)Ljava/lang/String;: I143 Branch 254 IFEQ L2731 - true
   * Goal 16. weka.classifiers.Evaluation.toClassDetailsString(Ljava/lang/String;)Ljava/lang/String;: I182 Branch 255 IFEQ L2740 - false
   * Goal 17. weka.classifiers.Evaluation.toClassDetailsString(Ljava/lang/String;)Ljava/lang/String;: I219 Branch 256 IFEQ L2746 - false
   * Goal 18. weka.classifiers.Evaluation.weightedTruePositiveRate()D: I21 Branch 262 IF_ICMPGE L2831 - false
   * Goal 19. weka.classifiers.Evaluation.weightedTruePositiveRate()D: I33 Branch 263 IF_ICMPGE L2832 - true
   * Goal 20. weka.classifiers.Evaluation.weightedTruePositiveRate()D: I33 Branch 263 IF_ICMPGE L2832 - false
   * Goal 21. weka.classifiers.Evaluation.weightedTruePositiveRate()D: I85 Branch 264 IF_ICMPGE L2839 - false
   * Goal 22. weka.classifiers.Evaluation.numTrueNegatives(I)D: I15 Branch 265 IF_ICMPGE L2862 - true
   * Goal 23. weka.classifiers.Evaluation.numTrueNegatives(I)D: I15 Branch 265 IF_ICMPGE L2862 - false
   * Goal 24. weka.classifiers.Evaluation.numTrueNegatives(I)D: I23 Branch 266 IF_ICMPEQ L2863 - true
   * Goal 25. weka.classifiers.Evaluation.numTrueNegatives(I)D: I23 Branch 266 IF_ICMPEQ L2863 - false
   * Goal 26. weka.classifiers.Evaluation.numTrueNegatives(I)D: I35 Branch 267 IF_ICMPGE L2864 - true
   * Goal 27. weka.classifiers.Evaluation.numTrueNegatives(I)D: I35 Branch 267 IF_ICMPGE L2864 - false
   * Goal 28. weka.classifiers.Evaluation.numTrueNegatives(I)D: I43 Branch 268 IF_ICMPEQ L2865 - true
   * Goal 29. weka.classifiers.Evaluation.numTrueNegatives(I)D: I43 Branch 268 IF_ICMPEQ L2865 - false
   * Goal 30. weka.classifiers.Evaluation.falsePositiveRate(I)D: I18 Branch 281 IF_ICMPGE L2976 - true
   * Goal 31. weka.classifiers.Evaluation.falsePositiveRate(I)D: I18 Branch 281 IF_ICMPGE L2976 - false
   * Goal 32. weka.classifiers.Evaluation.falsePositiveRate(I)D: I26 Branch 282 IF_ICMPEQ L2977 - true
   * Goal 33. weka.classifiers.Evaluation.falsePositiveRate(I)D: I26 Branch 282 IF_ICMPEQ L2977 - false
   * Goal 34. weka.classifiers.Evaluation.falsePositiveRate(I)D: I38 Branch 283 IF_ICMPGE L2978 - true
   * Goal 35. weka.classifiers.Evaluation.falsePositiveRate(I)D: I38 Branch 283 IF_ICMPGE L2978 - false
   * Goal 36. weka.classifiers.Evaluation.falsePositiveRate(I)D: I46 Branch 284 IF_ICMPNE L2979 - true
   * Goal 37. weka.classifiers.Evaluation.falsePositiveRate(I)D: I46 Branch 284 IF_ICMPNE L2979 - false
   * Goal 38. weka.classifiers.Evaluation.falsePositiveRate(I)D: I91 Branch 285 IFNE L2986 - false
   * Goal 39. weka.classifiers.Evaluation.weightedFalsePositiveRate()D: I21 Branch 286 IF_ICMPGE L3001 - false
   * Goal 40. weka.classifiers.Evaluation.weightedFalsePositiveRate()D: I33 Branch 287 IF_ICMPGE L3002 - true
   * Goal 41. weka.classifiers.Evaluation.weightedFalsePositiveRate()D: I33 Branch 287 IF_ICMPGE L3002 - false
   * Goal 42. weka.classifiers.Evaluation.weightedFalsePositiveRate()D: I85 Branch 288 IF_ICMPGE L3009 - false
   * Goal 43. weka.classifiers.Evaluation.matthewsCorrelationCoefficient(I)D: I65 Branch 301 IFNE L3120 - false
   * Goal 44. weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I21 Branch 302 IF_ICMPGE L3136 - false
   * Goal 45. weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I33 Branch 303 IF_ICMPGE L3137 - true
   * Goal 46. weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I33 Branch 303 IF_ICMPGE L3137 - false
   * Goal 47. weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I85 Branch 304 IF_ICMPGE L3144 - false
   * Goal 48. weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I99 Branch 305 IFNE L3146 - false
   * Goal 49. weka.classifiers.Evaluation.precision(I)D: I18 Branch 306 IF_ICMPGE L3200 - true
   * Goal 50. weka.classifiers.Evaluation.precision(I)D: I18 Branch 306 IF_ICMPGE L3200 - false
   * Goal 51. weka.classifiers.Evaluation.precision(I)D: I26 Branch 307 IF_ICMPNE L3201 - true
   * Goal 52. weka.classifiers.Evaluation.precision(I)D: I26 Branch 307 IF_ICMPNE L3201 - false
   * Goal 53. weka.classifiers.Evaluation.precision(I)D: I64 Branch 308 IFNE L3206 - false
   * Goal 54. weka.classifiers.Evaluation.weightedPrecision()D: I21 Branch 309 IF_ICMPGE L3221 - false
   * Goal 55. weka.classifiers.Evaluation.weightedPrecision()D: I33 Branch 310 IF_ICMPGE L3222 - true
   * Goal 56. weka.classifiers.Evaluation.weightedPrecision()D: I33 Branch 310 IF_ICMPGE L3222 - false
   * Goal 57. weka.classifiers.Evaluation.weightedPrecision()D: I85 Branch 311 IF_ICMPGE L3229 - false
   * Goal 58. weka.classifiers.Evaluation.fMeasure(I)D: I22 Branch 312 IFNE L3255 - false
   * Goal 59. weka.classifiers.Evaluation.weightedFMeasure()D: I21 Branch 313 IF_ICMPGE L3270 - false
   * Goal 60. weka.classifiers.Evaluation.weightedFMeasure()D: I33 Branch 314 IF_ICMPGE L3271 - true
   * Goal 61. weka.classifiers.Evaluation.weightedFMeasure()D: I33 Branch 314 IF_ICMPGE L3271 - false
   * Goal 62. weka.classifiers.Evaluation.weightedFMeasure()D: I85 Branch 315 IF_ICMPGE L3278 - false
   */

  @Test
  public void test26()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertNotNull(testInstances0);
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(testInstances0.getNoClass());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Instances instances0 = testInstances0.generate();
      assertNotNull(instances0);
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.size());
      assertEquals(2, instances0.numAttributes());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(testInstances0.getNoClass());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.size());
      assertEquals(2, instances0.numAttributes());
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(testInstances0.getNoClass());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      String string0 = evaluation0.toClassDetailsString();
      assertNotNull(string0);
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.size());
      assertEquals(2, instances0.numAttributes());
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(testInstances0.getNoClass());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.handleCostOption(Ljava/lang/String;I)Lweka/classifiers/CostMatrix;: I12 Branch 166 IFEQ L1574 - true
   */

  @Test
  public void test27()  throws Throwable  {
      CostMatrix costMatrix0 = Evaluation.handleCostOption("", 4598);
      assertNull(costMatrix0);
  }

  //Test case number: 28
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.handleCostOption(Ljava/lang/String;I)Lweka/classifiers/CostMatrix;: I6 Branch 165 IFNULL L1574 - false
   * Goal 2. weka.classifiers.Evaluation.handleCostOption(Ljava/lang/String;I)Lweka/classifiers/CostMatrix;: I12 Branch 166 IFEQ L1574 - false
   */

  @Test
  public void test28()  throws Throwable  {
      try {
        CostMatrix costMatrix0 = Evaluation.handleCostOption("\tA file containing stopwords to override the default ones.\n\tUsing this option automatically sets the flag ('-stoplist') to use the\n\tstoplist if the file exists.\n\tFormat: one stopword per line, lines starting with '#'\n\tare interpreted as coments and ignored.", 4510);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
      }
  }

  //Test case number: 29
  /*
   * 5 covered goals:
   * Goal 1. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I360 Branch 350 IFEQ L3562 - false
   * Goal 2. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I514 Branch 354 IFEQ L3599 - false
   * Goal 3. weka.classifiers.Evaluation.getGlobalInfo(Lweka/classifiers/Classifier;)Ljava/lang/String;: I42 Branch 355 IF_ICMPGE L3625 - false
   * Goal 4. weka.classifiers.Evaluation.getGlobalInfo(Lweka/classifiers/Classifier;)Ljava/lang/String;: I65 Branch 356 IFLE L3628 - true
   * Goal 5. weka.classifiers.Evaluation.getGlobalInfo(Lweka/classifiers/Classifier;)Ljava/lang/String;: I65 Branch 356 IFLE L3628 - false
   */

  @Test
  public void test29()  throws Throwable  {
      REPTree rEPTree0 = new REPTree();
      assertNotNull(rEPTree0);
      assertEquals("Spread initial count across all values instead of using the count per value.", rEPTree0.spreadInitialCountTipText());
      assertFalse(rEPTree0.getSpreadInitialCount());
      assertEquals(1, rEPTree0.graphType());
      assertEquals("The maximum tree depth (-1 for no restriction).", rEPTree0.maxDepthTipText());
      assertEquals("The seed used for randomizing the data.", rEPTree0.seedTipText());
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", rEPTree0.numFoldsTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", rEPTree0.debugTipText());
      assertEquals(-1, rEPTree0.getMaxDepth());
      assertEquals("Fast decision tree learner. Builds a decision/regression tree using information gain/variance and prunes it using reduced-error pruning (with backfitting).  Only sorts values for numeric attributes once. Missing values are dealt with by splitting the corresponding instances into pieces (i.e. as in C4.5).", rEPTree0.globalInfo());
      assertEquals("Whether pruning is performed.", rEPTree0.noPruningTipText());
      assertEquals("The minimum proportion of the variance on all the data that needs to be present at a node in order for splitting to be performed in regression trees.", rEPTree0.minVariancePropTipText());
      assertEquals(3, rEPTree0.getNumFolds());
      assertEquals(0.0, rEPTree0.getInitialCount(), 0.01D);
      assertFalse(rEPTree0.getDebug());
      assertEquals("The minimum total weight of the instances in a leaf.", rEPTree0.minNumTipText());
      assertFalse(rEPTree0.getNoPruning());
      assertEquals(1, rEPTree0.getSeed());
      assertEquals(0.001, rEPTree0.getMinVarianceProp(), 0.01D);
      assertEquals("Initial class value count.", rEPTree0.initialCountTipText());
      assertEquals(2.0, rEPTree0.getMinNum(), 0.01D);
      
      String string0 = Evaluation.makeOptionString(rEPTree0, true);
      assertNotNull(string0);
      assertEquals("\n\nGeneral options:\n\n-h or -help\n\tOutput help information.\n-synopsis or -info\n\tOutput synopsis for classifier (use in conjunction  with -h)\n-t <name of training file>\n\tSets training file.\n-T <name of test file>\n\tSets test file. If missing, a cross-validation will be performed\n\ton the training data.\n-c <class index>\n\tSets index of class attribute (default: last).\n-x <number of folds>\n\tSets number of folds for cross-validation (default: 10).\n-no-cv\n\tDo not perform any cross validation.\n-split-percentage <percentage>\n\tSets the percentage for the train/test set split, e.g., 66.\n-preserve-order\n\tPreserves the order in the percentage split.\n-s <random number seed>\n\tSets random number seed for cross-validation or percentage split\n\t(default: 1).\n-m <name of file with cost matrix>\n\tSets file with cost matrix.\n-l <name of input file>\n\tSets model input file. In case the filename ends with '.xml',\n\ta PMML file is loaded or, if that fails, options are loaded\n\tfrom the XML file.\n-d <name of output file>\n\tSets model output file. In case the filename ends with '.xml',\n\tonly the options are saved to the XML file, not the model.\n-v\n\tOutputs no statistics for training data.\n-o\n\tOutputs statistics only, not the classifier.\n-i\n\tOutputs detailed information-retrieval statistics for each class.\n-k\n\tOutputs information-theoretic statistics.\n-classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"\n\tUses the specified class for generating the classification output.\n\tE.g.: weka.classifiers.evaluation.output.prediction.PlainText\n-p range\n\tOutputs predictions for test instances (or the train instances if\n\tno test instances provided and -no-cv is used), along with the \n\tattributes in the specified range (and nothing else). \n\tUse '-p 0' if no attributes are desired.\n\tDeprecated: use \"-classifications ...\" instead.\n-distribution\n\tOutputs the distribution instead of only the prediction\n\tin conjunction with the '-p' option (only nominal classes).\n\tDeprecated: use \"-classifications ...\" instead.\n-r\n\tOnly outputs cumulative margin distribution.\n-z <class name>\n\tOnly outputs the source representation of the classifier,\n\tgiving it the supplied name.\n-g\n\tOnly outputs the graph representation of the classifier.\n-xml filename | xml-string\n\tRetrieves the options from the XML-data instead of the command line.\n-threshold-file <file>\n\tThe file to save the threshold data to.\n\tThe format is determined by the extensions, e.g., '.arff' for ARFF \n\tformat or '.csv' for CSV.\n-threshold-label <label>\n\tThe class label to determine the threshold data for\n\t(default is the first label)\n\nOptions specific to weka.classifiers.trees.REPTree:\n\n-M <minimum number of instances>\n\tSet minimum number of instances per leaf (default 2).\n-V <minimum variance for split>\n\tSet minimum numeric class variance proportion\n\tof train variance for split (default 1e-3).\n-N <number of folds>\n\tNumber of folds for reduced error pruning (default 3).\n-S <seed>\n\tSeed for random data shuffling (default 1).\n-P\n\tNo pruning.\n-L\n\tMaximum tree depth (default -1, no maximum)\n-I\n\tInitial class value count (default 0)\n-R\n\tSpread initial count over all class values (i.e. don't use 1 per value)\n\nSynopsis for weka.classifiers.trees.REPTree:\n\nFast decision tree learner. Builds a decision/regression tree using information gain/variance and prunes it using reduced-error pruning (with backfitting).  Only sorts values for numeric attributes once. Missing values are dealt with by splitting the corresponding instances into pieces (i.e. as in C4.5).", string0);
      assertEquals("Spread initial count across all values instead of using the count per value.", rEPTree0.spreadInitialCountTipText());
      assertFalse(rEPTree0.getSpreadInitialCount());
      assertEquals(1, rEPTree0.graphType());
      assertEquals("The maximum tree depth (-1 for no restriction).", rEPTree0.maxDepthTipText());
      assertEquals("The seed used for randomizing the data.", rEPTree0.seedTipText());
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", rEPTree0.numFoldsTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", rEPTree0.debugTipText());
      assertEquals(-1, rEPTree0.getMaxDepth());
      assertEquals("Fast decision tree learner. Builds a decision/regression tree using information gain/variance and prunes it using reduced-error pruning (with backfitting).  Only sorts values for numeric attributes once. Missing values are dealt with by splitting the corresponding instances into pieces (i.e. as in C4.5).", rEPTree0.globalInfo());
      assertEquals("Whether pruning is performed.", rEPTree0.noPruningTipText());
      assertEquals("The minimum proportion of the variance on all the data that needs to be present at a node in order for splitting to be performed in regression trees.", rEPTree0.minVariancePropTipText());
      assertEquals(3, rEPTree0.getNumFolds());
      assertEquals(0.0, rEPTree0.getInitialCount(), 0.01D);
      assertFalse(rEPTree0.getDebug());
      assertEquals("The minimum total weight of the instances in a leaf.", rEPTree0.minNumTipText());
      assertFalse(rEPTree0.getNoPruning());
      assertEquals(1, rEPTree0.getSeed());
      assertEquals(0.001, rEPTree0.getMinVarianceProp(), 0.01D);
      assertEquals("Initial class value count.", rEPTree0.initialCountTipText());
      assertEquals(2.0, rEPTree0.getMinNum(), 0.01D);
  }

  //Test case number: 30
  /*
   * 5 covered goals:
   * Goal 1. weka.classifiers.Evaluation.truePositiveRate(I)D: I18 Branch 259 IF_ICMPGE L2810 - true
   * Goal 2. weka.classifiers.Evaluation.truePositiveRate(I)D: I18 Branch 259 IF_ICMPGE L2810 - false
   * Goal 3. weka.classifiers.Evaluation.truePositiveRate(I)D: I26 Branch 260 IF_ICMPNE L2811 - true
   * Goal 4. weka.classifiers.Evaluation.truePositiveRate(I)D: I26 Branch 260 IF_ICMPNE L2811 - false
   * Goal 5. weka.classifiers.Evaluation.truePositiveRate(I)D: I64 Branch 261 IFNE L2816 - false
   */

  @Test
  public void test30()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertNotNull(testInstances0);
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Instances instances0 = testInstances0.generate();
      assertNotNull(instances0);
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      double double0 = evaluation0.truePositiveRate(0);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
  }

  //Test case number: 31
  /*
   * 17 covered goals:
   * Goal 1. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I144 Branch 23 IFNE L963 - false
   * Goal 2. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I151 Branch 24 IFEQ L963 - true
   * Goal 3. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I221 Branch 27 IFGT L976 - true
   * Goal 4. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I247 Branch 28 IF_ICMPGE L981 - true
   * Goal 5. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I247 Branch 28 IF_ICMPGE L981 - false
   * Goal 6. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I277 Branch 29 IFLE L986 - true
   * Goal 7. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I394 Branch 32 IFEQ L1017 - true
   * Goal 8. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I471 Branch 35 IFEQ L1030 - true
   * Goal 9. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I490 Branch 36 IFEQ L1034 - true
   * Goal 10. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I503 Branch 37 IFNE L1037 - false
   * Goal 11. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I511 Branch 38 IFNE L1038 - false
   * Goal 12. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I360 Branch 350 IFEQ L3562 - true
   * Goal 13. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I380 Branch 351 IFEQ L3567 - false
   * Goal 14. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I436 Branch 352 IFEQ L3587 - false
   * Goal 15. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I467 Branch 353 IFEQ L3591 - true
   * Goal 16. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I467 Branch 353 IFEQ L3591 - false
   * Goal 17. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I514 Branch 354 IFEQ L3599 - true
   */

  @Test
  public void test31()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      assertNotNull(costSensitiveClassifier0);
      assertEquals("Sets the cost matrix explicitly. This matrix is used if the costMatrixSource property is set to \"Supplied\".", costSensitiveClassifier0.costMatrixTipText());
      assertEquals(0, costSensitiveClassifier0.graphType());
      assertEquals(1, costSensitiveClassifier0.getSeed());
      assertEquals("Sets whether the minimum expected cost criteria will be used. If this is false, the training data will be reweighted according to the costs assigned to each class. If true, the minimum expected cost criteria will be used.", costSensitiveClassifier0.minimizeExpectedCostTipText());
      assertFalse(costSensitiveClassifier0.getMinimizeExpectedCost());
      assertEquals("The random number seed to be used.", costSensitiveClassifier0.seedTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", costSensitiveClassifier0.debugTipText());
      assertEquals("A metaclassifier that makes its base classifier cost-sensitive. Two methods can be used to introduce cost-sensitivity: reweighting training instances according to the total cost assigned to each class; or predicting the class with minimum expected misclassification cost (rather than the most likely class). Performance can often be improved by using a Bagged classifier to improve the probability estimates of the base classifier.", costSensitiveClassifier0.globalInfo());
      assertFalse(costSensitiveClassifier0.getDebug());
      assertEquals("Sets the directory where cost files are loaded from. This option is used when the costMatrixSource is set to \"On Demand\".", costSensitiveClassifier0.onDemandDirectoryTipText());
      assertEquals("The base classifier to be used.", costSensitiveClassifier0.classifierTipText());
      assertEquals(2, costSensitiveClassifier0.MATRIX_SUPPLIED);
      assertEquals(1, costSensitiveClassifier0.MATRIX_ON_DEMAND);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = ")E\"Z 0!KisYk`\"{";
      stringArray0[1] = ")E\"Z 0!KisYk`\"{";
      stringArray0[2] = ")E\"Z 0!KisYk`\"{";
      stringArray0[3] = ")E\"Z 0!KisYk`\"{";
      try {
        String string0 = Evaluation.evaluateModel((Classifier) costSensitiveClassifier0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.CostSensitiveClassifier:
         // 
         // -M
         // \tMinimize expected misclassification cost. Default is to
         // \treweight training instances according to costs per class
         // -C <cost file name>
         // \tFile name of a cost matrix to use. If this is not supplied,
         // \ta cost matrix will be loaded on demand. The name of the
         // \ton-demand file is the relation name of the training data
         // \tplus \".cost\", and the path to the on-demand file is
         // \tspecified with the -N option.
         // -N <directory>
         // \tName of a directory to search for cost files when loading
         // \tcosts on demand (default current directory).
         // -cost-matrix <matrix>
         // \tThe cost matrix in Matlab single line format.
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.rules.ZeroR)
         // 
         // Options specific to classifier weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
      }
  }

  //Test case number: 32
  /*
   * 22 covered goals:
   * Goal 1. weka.classifiers.Evaluation.numTruePositives(I)D: I15 Branch 257 IF_ICMPGE L2785 - true
   * Goal 2. weka.classifiers.Evaluation.numTruePositives(I)D: I15 Branch 257 IF_ICMPGE L2785 - false
   * Goal 3. weka.classifiers.Evaluation.numTruePositives(I)D: I23 Branch 258 IF_ICMPNE L2786 - true
   * Goal 4. weka.classifiers.Evaluation.numTruePositives(I)D: I23 Branch 258 IF_ICMPNE L2786 - false
   * Goal 5. weka.classifiers.Evaluation.numFalsePositives(I)D: I15 Branch 277 IF_ICMPGE L2947 - true
   * Goal 6. weka.classifiers.Evaluation.numFalsePositives(I)D: I15 Branch 277 IF_ICMPGE L2947 - false
   * Goal 7. weka.classifiers.Evaluation.numFalsePositives(I)D: I23 Branch 278 IF_ICMPEQ L2948 - true
   * Goal 8. weka.classifiers.Evaluation.numFalsePositives(I)D: I23 Branch 278 IF_ICMPEQ L2948 - false
   * Goal 9. weka.classifiers.Evaluation.numFalsePositives(I)D: I35 Branch 279 IF_ICMPGE L2949 - true
   * Goal 10. weka.classifiers.Evaluation.numFalsePositives(I)D: I35 Branch 279 IF_ICMPGE L2949 - false
   * Goal 11. weka.classifiers.Evaluation.numFalsePositives(I)D: I43 Branch 280 IF_ICMPNE L2950 - true
   * Goal 12. weka.classifiers.Evaluation.numFalsePositives(I)D: I43 Branch 280 IF_ICMPNE L2950 - false
   * Goal 13. weka.classifiers.Evaluation.numFalseNegatives(I)D: I15 Branch 289 IF_ICMPGE L3032 - true
   * Goal 14. weka.classifiers.Evaluation.numFalseNegatives(I)D: I15 Branch 289 IF_ICMPGE L3032 - false
   * Goal 15. weka.classifiers.Evaluation.numFalseNegatives(I)D: I23 Branch 290 IF_ICMPNE L3033 - true
   * Goal 16. weka.classifiers.Evaluation.numFalseNegatives(I)D: I23 Branch 290 IF_ICMPNE L3033 - false
   * Goal 17. weka.classifiers.Evaluation.numFalseNegatives(I)D: I35 Branch 291 IF_ICMPGE L3034 - true
   * Goal 18. weka.classifiers.Evaluation.numFalseNegatives(I)D: I35 Branch 291 IF_ICMPGE L3034 - false
   * Goal 19. weka.classifiers.Evaluation.numFalseNegatives(I)D: I43 Branch 292 IF_ICMPEQ L3035 - true
   * Goal 20. weka.classifiers.Evaluation.numFalseNegatives(I)D: I43 Branch 292 IF_ICMPEQ L3035 - false
   * Goal 21. weka.classifiers.Evaluation.unweightedMicroFmeasure()D: I23 Branch 318 IF_ICMPGE L3316 - true
   * Goal 22. weka.classifiers.Evaluation.unweightedMicroFmeasure()D: I23 Branch 318 IF_ICMPGE L3316 - false
   */

  @Test
  public void test32()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertNotNull(testInstances0);
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Instances instances0 = testInstances0.generate();
      assertNotNull(instances0);
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      double double0 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
  }

  //Test case number: 33
  /*
   * 20 covered goals:
   * Goal 1. weka.classifiers.Evaluation.toClassDetailsString()Ljava/lang/String;: root-Branch
   * Goal 2. weka.classifiers.Evaluation.weightedRecall()D: root-Branch
   * Goal 3. weka.classifiers.Evaluation.weightedAreaUnderROC()D: I21 Branch 8 IF_ICMPGE L493 - true
   * Goal 4. weka.classifiers.Evaluation.weightedAreaUnderROC()D: I85 Branch 10 IF_ICMPGE L501 - true
   * Goal 5. weka.classifiers.Evaluation.weightedAreaUnderPRC()D: I21 Branch 13 IF_ICMPGE L539 - true
   * Goal 6. weka.classifiers.Evaluation.weightedAreaUnderPRC()D: I85 Branch 15 IF_ICMPGE L547 - true
   * Goal 7. weka.classifiers.Evaluation.toClassDetailsString(Ljava/lang/String;)Ljava/lang/String;: I7 Branch 252 IFNE L2714 - true
   * Goal 8. weka.classifiers.Evaluation.toClassDetailsString(Ljava/lang/String;)Ljava/lang/String;: I57 Branch 253 IF_ICMPGE L2721 - true
   * Goal 9. weka.classifiers.Evaluation.weightedTruePositiveRate()D: I21 Branch 262 IF_ICMPGE L2831 - true
   * Goal 10. weka.classifiers.Evaluation.weightedTruePositiveRate()D: I85 Branch 264 IF_ICMPGE L2839 - true
   * Goal 11. weka.classifiers.Evaluation.weightedTrueNegativeRate()D: I21 Branch 274 IF_ICMPGE L2916 - true
   * Goal 12. weka.classifiers.Evaluation.weightedTrueNegativeRate()D: I85 Branch 276 IF_ICMPGE L2924 - true
   * Goal 13. weka.classifiers.Evaluation.weightedFalsePositiveRate()D: I21 Branch 286 IF_ICMPGE L3001 - true
   * Goal 14. weka.classifiers.Evaluation.weightedFalsePositiveRate()D: I85 Branch 288 IF_ICMPGE L3009 - true
   * Goal 15. weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I21 Branch 302 IF_ICMPGE L3136 - true
   * Goal 16. weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I85 Branch 304 IF_ICMPGE L3144 - true
   * Goal 17. weka.classifiers.Evaluation.weightedPrecision()D: I21 Branch 309 IF_ICMPGE L3221 - true
   * Goal 18. weka.classifiers.Evaluation.weightedPrecision()D: I85 Branch 311 IF_ICMPGE L3229 - true
   * Goal 19. weka.classifiers.Evaluation.weightedFMeasure()D: I21 Branch 313 IF_ICMPGE L3270 - true
   * Goal 20. weka.classifiers.Evaluation.weightedFMeasure()D: I85 Branch 315 IF_ICMPGE L3278 - true
   */

  @Test
  public void test33()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource((Loader) textDirectoryLoader0);
      assertNotNull(converterUtils_DataSource0);
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertTrue(converterUtils_DataSource0.isIncremental());
      
      Instances instances0 = converterUtils_DataSource0.getStructure();
      assertNotNull(instances0);
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertTrue(converterUtils_DataSource0.isIncremental());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertTrue(converterUtils_DataSource0.isIncremental());
      
      String string0 = evaluation0.toClassDetailsString();
      assertNotNull(string0);
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertTrue(converterUtils_DataSource0.isIncremental());
      
      double double0 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertTrue(converterUtils_DataSource0.isIncremental());
  }

  //Test case number: 34
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.coverageOfTestCasesByPredictedRegions()D: I7 Branch 188 IFNE L2016 - true
   */

  @Test
  public void test34()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertNotNull(testInstances0);
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Instances instances0 = testInstances0.generate();
      assertNotNull(instances0);
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
  }

  //Test case number: 35
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.SFMeanSchemeEntropy()D: I7 Branch 217 IFNE L2409 - true
   * Goal 2. weka.classifiers.Evaluation.updateNumericScores([D[DD)V: I28 Branch 384 IF_ICMPGE L3905 - true
   */

  @Test
  public void test35()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource((Loader) textDirectoryLoader0);
      assertNotNull(converterUtils_DataSource0);
      assertTrue(converterUtils_DataSource0.isIncremental());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      
      Instances instances0 = converterUtils_DataSource0.getStructure();
      assertNotNull(instances0);
      assertTrue(converterUtils_DataSource0.isIncremental());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertTrue(converterUtils_DataSource0.isIncremental());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      
      double double0 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertTrue(converterUtils_DataSource0.isIncremental());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      
      double[] doubleArray0 = new double[1];
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, Double.NaN);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertTrue(converterUtils_DataSource0.isIncremental());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  //Test case number: 36
  /*
   * 6 covered goals:
   * Goal 1. weka.classifiers.Evaluation.unclassified()D: root-Branch
   * Goal 2. weka.classifiers.Evaluation.toSummaryString(Z)Ljava/lang/String;: root-Branch
   * Goal 3. weka.classifiers.Evaluation.toSummaryString(Ljava/lang/String;Z)Ljava/lang/String;: I12 Branch 226 IFEQ L2512 - true
   * Goal 4. weka.classifiers.Evaluation.toSummaryString(Ljava/lang/String;Z)Ljava/lang/String;: I50 Branch 228 IFLE L2520 - true
   * Goal 5. weka.classifiers.Evaluation.toSummaryString(Ljava/lang/String;Z)Ljava/lang/String;: I625 Branch 237 IFEQ L2592 - true
   * Goal 6. weka.classifiers.Evaluation.toSummaryString(Ljava/lang/String;Z)Ljava/lang/String;: I689 Branch 238 IFLE L2599 - true
   */

  @Test
  public void test36()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertNotNull(testInstances0);
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Instances instances0 = testInstances0.generate();
      assertNotNull(instances0);
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      String string0 = evaluation0.toSummaryString(false);
      assertNotNull(string0);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
  }

  //Test case number: 37
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.incorrect()D: root-Branch
   */

  @Test
  public void test37()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertNotNull(testInstances0);
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Instances instances0 = testInstances0.generate();
      assertNotNull(instances0);
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      double double0 = evaluation0.incorrect();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
  }

  //Test case number: 38
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.getRevision()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test38()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertNotNull(instances0);
      assertEquals(0, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      
      String string0 = evaluation0.getRevision();
      assertNotNull(string0);
      assertEquals("9101", string0);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
  }

  //Test case number: 39
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.handleCostOption(Ljava/lang/String;I)Lweka/classifiers/CostMatrix;: I6 Branch 165 IFNULL L1574 - true
   */

  @Test
  public void test39()  throws Throwable  {
      CostMatrix costMatrix0 = Evaluation.handleCostOption((String) null, 4558);
      assertNull(costMatrix0);
  }

  //Test case number: 40
  /*
   * 4 covered goals:
   * Goal 1. weka.classifiers.Evaluation.addNumericTrainClass(DD)V: I9 Branch 385 IFLE L3931 - true
   * Goal 2. weka.classifiers.Evaluation.addNumericTrainClass(DD)V: I24 Branch 386 IFGE L3934 - false
   * Goal 3. weka.classifiers.Evaluation.addNumericTrainClass(DD)V: I37 Branch 387 IFNONNULL L3939 - false
   * Goal 4. weka.classifiers.Evaluation.addNumericTrainClass(DD)V: I60 Branch 388 IF_ICMPNE L3943 - true
   */

  @Test
  public void test40()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertNotNull(instances0);
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      
      evaluation0.addNumericTrainClass((-1.0E100), 1863.1);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
  }

  //Test case number: 41
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.pctUnclassified()D: root-Branch
   */

  @Test
  public void test41()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertNotNull(instances0);
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      
      double double0 = evaluation0.pctUnclassified();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
  }

  //Test case number: 42
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.SFMeanPriorEntropy()D: I7 Branch 214 IFNE L2383 - false
   * Goal 2. weka.classifiers.Evaluation.SFMeanPriorEntropy()D: I13 Branch 215 IFNE L2383 - true
   */

  @Test
  public void test42()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertNotNull(instances0);
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      
      double double0 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
  }

  //Test case number: 43
  /*
   * 4 covered goals:
   * Goal 1. weka.classifiers.Evaluation.priorEntropy()D: I7 Branch 203 IFNE L2293 - true
   * Goal 2. weka.classifiers.Evaluation.priorEntropy()D: I35 Branch 204 IFEQ L2298 - true
   * Goal 3. weka.classifiers.Evaluation.priorEntropy()D: I55 Branch 205 IF_ICMPGE L2302 - true
   * Goal 4. weka.classifiers.Evaluation.priorEntropy()D: I55 Branch 205 IF_ICMPGE L2302 - false
   */

  @Test
  public void test43()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertNotNull(testInstances0);
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelational());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Instances instances0 = testInstances0.generate();
      assertNotNull(instances0);
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelational());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, instances0.numAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelational());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, instances0.numAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double0, 0.01D);
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelational());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, instances0.numAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
  }

  //Test case number: 44
  /*
   * 5 covered goals:
   * Goal 1. weka.classifiers.Evaluation.getHeader()Lweka/core/Instances;: root-Branch
   * Goal 2. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I86 Branch 2 IF_ICMPGE L413 - false
   * Goal 3. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I168 Branch 324 IF_ICMPGE L3362 - false
   * Goal 4. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I201 Branch 325 IF_ICMPGE L3366 - false
   * Goal 5. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I211 Branch 326 IFNE L3367 - false
   */

  @Test
  public void test44()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertNotNull(testInstances0);
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Instances instances0 = testInstances0.generate();
      assertNotNull(instances0);
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(20, instances0.size());
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(20, instances0.size());
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Instances instances1 = evaluation0.getHeader();
      assertFalse(instances1.equals((Object)instances0));
      assertFalse(instances0.equals((Object)instances1));
      assertNotNull(instances1);
      assertNotSame(instances1, instances0);
      assertNotSame(instances0, instances1);
      assertEquals(2, instances1.numAttributes());
      assertEquals(2, instances1.numClasses());
      assertEquals("Testdata", instances1.relationName());
      assertEquals(1, instances1.classIndex());
      assertEquals(0, instances1.size());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01D);
      assertEquals(0, instances1.numInstances());
      assertFalse(instances1.checkForStringAttributes());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(20, instances0.size());
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
  }

  //Test case number: 45
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.evaluateModel(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/String;: root-Branch
   * Goal 2. weka.classifiers.Evaluation.main([Ljava/lang/String;)V: I7 Branch 22 IFNE L801 - true
   */

  @Test
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[8];
      Evaluation.main(stringArray0);
  }

  //Test case number: 46
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.wekaStaticWrapper(Lweka/classifiers/Sourcable;Ljava/lang/String;)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test46()  throws Throwable  {
      REPTree rEPTree0 = new REPTree();
      assertNotNull(rEPTree0);
      assertEquals(3, rEPTree0.getNumFolds());
      assertEquals("The minimum proportion of the variance on all the data that needs to be present at a node in order for splitting to be performed in regression trees.", rEPTree0.minVariancePropTipText());
      assertEquals("Fast decision tree learner. Builds a decision/regression tree using information gain/variance and prunes it using reduced-error pruning (with backfitting).  Only sorts values for numeric attributes once. Missing values are dealt with by splitting the corresponding instances into pieces (i.e. as in C4.5).", rEPTree0.globalInfo());
      assertFalse(rEPTree0.getDebug());
      assertEquals(0.0, rEPTree0.getInitialCount(), 0.01D);
      assertFalse(rEPTree0.getNoPruning());
      assertEquals(0.001, rEPTree0.getMinVarianceProp(), 0.01D);
      assertEquals("The minimum total weight of the instances in a leaf.", rEPTree0.minNumTipText());
      assertEquals("Initial class value count.", rEPTree0.initialCountTipText());
      assertEquals(1, rEPTree0.getSeed());
      assertEquals("The maximum tree depth (-1 for no restriction).", rEPTree0.maxDepthTipText());
      assertEquals(2.0, rEPTree0.getMinNum(), 0.01D);
      assertEquals("Spread initial count across all values instead of using the count per value.", rEPTree0.spreadInitialCountTipText());
      assertFalse(rEPTree0.getSpreadInitialCount());
      assertEquals(1, rEPTree0.graphType());
      assertEquals("The seed used for randomizing the data.", rEPTree0.seedTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", rEPTree0.debugTipText());
      assertEquals(-1, rEPTree0.getMaxDepth());
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", rEPTree0.numFoldsTipText());
      assertEquals("Whether pruning is performed.", rEPTree0.noPruningTipText());
      
      try {
        String string0 = Evaluation.wekaStaticWrapper((Sourcable) rEPTree0, "Average Cost                       ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // REPTree: No model built yet.
         //
      }
  }

  //Test case number: 47
  /*
   * 5 covered goals:
   * Goal 1. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I116 Branch 3 IFNULL L418 - false
   * Goal 2. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I124 Branch 4 IFNE L419 - true
   * Goal 3. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I155 Branch 5 IF_ICMPEQ L422 - false
   * Goal 4. weka.classifiers.Evaluation.errorRate()D: I7 Branch 191 IFNE L2138 - true
   * Goal 5. weka.classifiers.Evaluation.errorRate()D: I27 Branch 192 IFNONNULL L2141 - false
   */

  @Test
  public void test47()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource((Loader) textDirectoryLoader0);
      assertNotNull(converterUtils_DataSource0);
      assertTrue(converterUtils_DataSource0.isIncremental());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      
      Instances instances0 = converterUtils_DataSource0.getStructure();
      assertNotNull(instances0);
      assertTrue(converterUtils_DataSource0.isIncremental());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertTrue(converterUtils_DataSource0.isIncremental());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      
      double double0 = evaluation0.errorRate();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertTrue(converterUtils_DataSource0.isIncremental());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      assertNotNull(costSensitiveClassifier0);
      assertFalse(costSensitiveClassifier0.getDebug());
      assertEquals("The random number seed to be used.", costSensitiveClassifier0.seedTipText());
      assertEquals("A metaclassifier that makes its base classifier cost-sensitive. Two methods can be used to introduce cost-sensitivity: reweighting training instances according to the total cost assigned to each class; or predicting the class with minimum expected misclassification cost (rather than the most likely class). Performance can often be improved by using a Bagged classifier to improve the probability estimates of the base classifier.", costSensitiveClassifier0.globalInfo());
      assertEquals(1, costSensitiveClassifier0.getSeed());
      assertEquals("If set to true, classifier may output additional info to the console.", costSensitiveClassifier0.debugTipText());
      assertEquals("Sets whether the minimum expected cost criteria will be used. If this is false, the training data will be reweighted according to the costs assigned to each class. If true, the minimum expected cost criteria will be used.", costSensitiveClassifier0.minimizeExpectedCostTipText());
      assertEquals("Sets the cost matrix explicitly. This matrix is used if the costMatrixSource property is set to \"Supplied\".", costSensitiveClassifier0.costMatrixTipText());
      assertFalse(costSensitiveClassifier0.getMinimizeExpectedCost());
      assertEquals(0, costSensitiveClassifier0.graphType());
      assertEquals("Sets the directory where cost files are loaded from. This option is used when the costMatrixSource is set to \"On Demand\".", costSensitiveClassifier0.onDemandDirectoryTipText());
      assertEquals("The base classifier to be used.", costSensitiveClassifier0.classifierTipText());
      assertEquals(1, costSensitiveClassifier0.MATRIX_ON_DEMAND);
      assertEquals(2, costSensitiveClassifier0.MATRIX_SUPPLIED);
      
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      assertNotNull(costMatrix0);
      assertFalse(costSensitiveClassifier0.getDebug());
      assertEquals("The random number seed to be used.", costSensitiveClassifier0.seedTipText());
      assertEquals("A metaclassifier that makes its base classifier cost-sensitive. Two methods can be used to introduce cost-sensitivity: reweighting training instances according to the total cost assigned to each class; or predicting the class with minimum expected misclassification cost (rather than the most likely class). Performance can often be improved by using a Bagged classifier to improve the probability estimates of the base classifier.", costSensitiveClassifier0.globalInfo());
      assertEquals(1, costSensitiveClassifier0.getSeed());
      assertEquals("If set to true, classifier may output additional info to the console.", costSensitiveClassifier0.debugTipText());
      assertEquals("Sets whether the minimum expected cost criteria will be used. If this is false, the training data will be reweighted according to the costs assigned to each class. If true, the minimum expected cost criteria will be used.", costSensitiveClassifier0.minimizeExpectedCostTipText());
      assertEquals("Sets the cost matrix explicitly. This matrix is used if the costMatrixSource property is set to \"Supplied\".", costSensitiveClassifier0.costMatrixTipText());
      assertFalse(costSensitiveClassifier0.getMinimizeExpectedCost());
      assertEquals(0, costSensitiveClassifier0.graphType());
      assertEquals("Sets the directory where cost files are loaded from. This option is used when the costMatrixSource is set to \"On Demand\".", costSensitiveClassifier0.onDemandDirectoryTipText());
      assertEquals("The base classifier to be used.", costSensitiveClassifier0.classifierTipText());
      assertEquals(1, costMatrix0.size());
      assertEquals(1, costMatrix0.numColumns());
      assertEquals(1, costMatrix0.numRows());
      assertEquals(1, costSensitiveClassifier0.MATRIX_ON_DEMAND);
      assertEquals(2, costSensitiveClassifier0.MATRIX_SUPPLIED);
      
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cost matrix not compatible with data!
         //
      }
  }

  //Test case number: 48
  /*
   * 9 covered goals:
   * Goal 1. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;)V: root-Branch
   * Goal 2. weka.classifiers.Evaluation.useNoPriors()V: root-Branch
   * Goal 3. weka.classifiers.Evaluation.correct()D: root-Branch
   * Goal 4. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I58 Branch 1 IFEQ L410 - false
   * Goal 5. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I86 Branch 2 IF_ICMPGE L413 - true
   * Goal 6. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I116 Branch 3 IFNULL L418 - true
   * Goal 7. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I12 Branch 319 IFNE L3335 - true
   * Goal 8. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I168 Branch 324 IF_ICMPGE L3362 - true
   * Goal 9. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I201 Branch 325 IF_ICMPGE L3366 - true
   */

  @Test
  public void test48()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertNotNull(instances0);
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      
      double double0 = evaluation0.correct();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      
      evaluation0.useNoPriors();
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
  }
}
