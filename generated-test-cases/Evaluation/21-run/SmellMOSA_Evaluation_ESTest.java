/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 17 08:24:10 GMT 2015
 */

package weka.classifiers;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.Sourcable;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.J48;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I124 Branch 4 IFNE L419 - false
   */

  @Test
  public void test00()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      assertFalse(simpleLinearRegression0.getDebug());
      assertEquals("Learns a simple linear regression model. Picks the attribute that results in the lowest squared error. Missing values are not allowed. Can only deal with numeric attributes.", simpleLinearRegression0.globalInfo());
      assertEquals(0, simpleLinearRegression0.getAttributeIndex());
      assertFalse(simpleLinearRegression0.foundUsefulAttribute());
      assertEquals("If set to true, classifier may output additional info to the console.", simpleLinearRegression0.debugTipText());
      assertEquals(0.0, simpleLinearRegression0.getSlope(), 0.01D);
      assertEquals(0.0, simpleLinearRegression0.getIntercept(), 0.01D);
      assertNotNull(simpleLinearRegression0);
      
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      assertFalse(simpleLinearRegression0.getDebug());
      assertEquals("Learns a simple linear regression model. Picks the attribute that results in the lowest squared error. Missing values are not allowed. Can only deal with numeric attributes.", simpleLinearRegression0.globalInfo());
      assertEquals(0, simpleLinearRegression0.getAttributeIndex());
      assertFalse(simpleLinearRegression0.foundUsefulAttribute());
      assertEquals("If set to true, classifier may output additional info to the console.", simpleLinearRegression0.debugTipText());
      assertEquals(0.0, simpleLinearRegression0.getSlope(), 0.01D);
      assertEquals(0.0, simpleLinearRegression0.getIntercept(), 0.01D);
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertNotNull(capabilities0);
      
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      assertFalse(simpleLinearRegression0.getDebug());
      assertEquals("Learns a simple linear regression model. Picks the attribute that results in the lowest squared error. Missing values are not allowed. Can only deal with numeric attributes.", simpleLinearRegression0.globalInfo());
      assertEquals(0, simpleLinearRegression0.getAttributeIndex());
      assertFalse(simpleLinearRegression0.foundUsefulAttribute());
      assertEquals("If set to true, classifier may output additional info to the console.", simpleLinearRegression0.debugTipText());
      assertEquals(0.0, simpleLinearRegression0.getSlope(), 0.01D);
      assertEquals(0.0, simpleLinearRegression0.getIntercept(), 0.01D);
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNominal());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getClassType());
      assertEquals(3, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertNotNull(testInstances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Instances instances0 = testInstances0.generate();
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(3, instances0.numAttributes());
      assertEquals(20, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(2, instances0.classIndex());
      assertEquals(1, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertFalse(simpleLinearRegression0.getDebug());
      assertEquals("Learns a simple linear regression model. Picks the attribute that results in the lowest squared error. Missing values are not allowed. Can only deal with numeric attributes.", simpleLinearRegression0.globalInfo());
      assertEquals(0, simpleLinearRegression0.getAttributeIndex());
      assertFalse(simpleLinearRegression0.foundUsefulAttribute());
      assertEquals("If set to true, classifier may output additional info to the console.", simpleLinearRegression0.debugTipText());
      assertEquals(0.0, simpleLinearRegression0.getSlope(), 0.01D);
      assertEquals(0.0, simpleLinearRegression0.getIntercept(), 0.01D);
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNominal());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getClassType());
      assertEquals(3, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertNotNull(instances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      assertFalse(costSensitiveClassifier0.getMinimizeExpectedCost());
      assertEquals("A metaclassifier that makes its base classifier cost-sensitive. Two methods can be used to introduce cost-sensitivity: reweighting training instances according to the total cost assigned to each class; or predicting the class with minimum expected misclassification cost (rather than the most likely class). Performance can often be improved by using a Bagged classifier to improve the probability estimates of the base classifier.", costSensitiveClassifier0.globalInfo());
      assertFalse(costSensitiveClassifier0.getDebug());
      assertEquals("Sets the cost matrix explicitly. This matrix is used if the costMatrixSource property is set to \"Supplied\".", costSensitiveClassifier0.costMatrixTipText());
      assertEquals("The base classifier to be used.", costSensitiveClassifier0.classifierTipText());
      assertEquals("Sets the directory where cost files are loaded from. This option is used when the costMatrixSource is set to \"On Demand\".", costSensitiveClassifier0.onDemandDirectoryTipText());
      assertEquals(0, costSensitiveClassifier0.graphType());
      assertEquals("If set to true, classifier may output additional info to the console.", costSensitiveClassifier0.debugTipText());
      assertEquals(1, costSensitiveClassifier0.getSeed());
      assertEquals("The random number seed to be used.", costSensitiveClassifier0.seedTipText());
      assertEquals("Sets whether the minimum expected cost criteria will be used. If this is false, the training data will be reweighted according to the costs assigned to each class. If true, the minimum expected cost criteria will be used.", costSensitiveClassifier0.minimizeExpectedCostTipText());
      assertNotNull(costSensitiveClassifier0);
      assertEquals(1, costSensitiveClassifier0.MATRIX_ON_DEMAND);
      assertEquals(2, costSensitiveClassifier0.MATRIX_SUPPLIED);
      
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      assertEquals(1, costMatrix0.size());
      assertEquals(1, costMatrix0.numColumns());
      assertEquals(1, costMatrix0.numRows());
      assertFalse(costSensitiveClassifier0.getMinimizeExpectedCost());
      assertEquals("A metaclassifier that makes its base classifier cost-sensitive. Two methods can be used to introduce cost-sensitivity: reweighting training instances according to the total cost assigned to each class; or predicting the class with minimum expected misclassification cost (rather than the most likely class). Performance can often be improved by using a Bagged classifier to improve the probability estimates of the base classifier.", costSensitiveClassifier0.globalInfo());
      assertFalse(costSensitiveClassifier0.getDebug());
      assertEquals("Sets the cost matrix explicitly. This matrix is used if the costMatrixSource property is set to \"Supplied\".", costSensitiveClassifier0.costMatrixTipText());
      assertEquals("The base classifier to be used.", costSensitiveClassifier0.classifierTipText());
      assertEquals("Sets the directory where cost files are loaded from. This option is used when the costMatrixSource is set to \"On Demand\".", costSensitiveClassifier0.onDemandDirectoryTipText());
      assertEquals(0, costSensitiveClassifier0.graphType());
      assertEquals("If set to true, classifier may output additional info to the console.", costSensitiveClassifier0.debugTipText());
      assertEquals(1, costSensitiveClassifier0.getSeed());
      assertEquals("The random number seed to be used.", costSensitiveClassifier0.seedTipText());
      assertEquals("Sets whether the minimum expected cost criteria will be used. If this is false, the training data will be reweighted according to the costs assigned to each class. If true, the minimum expected cost criteria will be used.", costSensitiveClassifier0.minimizeExpectedCostTipText());
      assertNotNull(costMatrix0);
      assertEquals(1, costSensitiveClassifier0.MATRIX_ON_DEMAND);
      assertEquals(2, costSensitiveClassifier0.MATRIX_SUPPLIED);
      
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class has to be nominal if cost matrix given!
         //
      }
  }

  //Test case number: 1
  /*
   * 15 covered goals:
   * Goal 1. weka.classifiers.Evaluation.trueNegativeRate(I)D: I18 Branch 269 IF_ICMPGE L2891 - true
   * Goal 2. weka.classifiers.Evaluation.trueNegativeRate(I)D: I18 Branch 269 IF_ICMPGE L2891 - false
   * Goal 3. weka.classifiers.Evaluation.trueNegativeRate(I)D: I26 Branch 270 IF_ICMPEQ L2892 - true
   * Goal 4. weka.classifiers.Evaluation.trueNegativeRate(I)D: I26 Branch 270 IF_ICMPEQ L2892 - false
   * Goal 5. weka.classifiers.Evaluation.trueNegativeRate(I)D: I38 Branch 271 IF_ICMPGE L2893 - true
   * Goal 6. weka.classifiers.Evaluation.trueNegativeRate(I)D: I38 Branch 271 IF_ICMPGE L2893 - false
   * Goal 7. weka.classifiers.Evaluation.trueNegativeRate(I)D: I46 Branch 272 IF_ICMPEQ L2894 - true
   * Goal 8. weka.classifiers.Evaluation.trueNegativeRate(I)D: I46 Branch 272 IF_ICMPEQ L2894 - false
   * Goal 9. weka.classifiers.Evaluation.trueNegativeRate(I)D: I91 Branch 273 IFNE L2901 - false
   * Goal 10. weka.classifiers.Evaluation.weightedTrueNegativeRate()D: I21 Branch 274 IF_ICMPGE L2916 - true
   * Goal 11. weka.classifiers.Evaluation.weightedTrueNegativeRate()D: I21 Branch 274 IF_ICMPGE L2916 - false
   * Goal 12. weka.classifiers.Evaluation.weightedTrueNegativeRate()D: I33 Branch 275 IF_ICMPGE L2917 - true
   * Goal 13. weka.classifiers.Evaluation.weightedTrueNegativeRate()D: I33 Branch 275 IF_ICMPGE L2917 - false
   * Goal 14. weka.classifiers.Evaluation.weightedTrueNegativeRate()D: I85 Branch 276 IF_ICMPGE L2924 - true
   * Goal 15. weka.classifiers.Evaluation.weightedTrueNegativeRate()D: I85 Branch 276 IF_ICMPGE L2924 - false
   */

  @Test
  public void test01()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertNotNull(testInstances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Instances instances0 = testInstances0.generate("\tOutputs dtailed informtion-retrieval");
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertNotNull(instances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertNotNull(evaluation0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      double double0 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
  }

  //Test case number: 2
  /*
   * 9 covered goals:
   * Goal 1. weka.classifiers.Evaluation.precision(I)D: I18 Branch 306 IF_ICMPGE L3200 - false
   * Goal 2. weka.classifiers.Evaluation.precision(I)D: I26 Branch 307 IF_ICMPNE L3201 - true
   * Goal 3. weka.classifiers.Evaluation.precision(I)D: I26 Branch 307 IF_ICMPNE L3201 - false
   * Goal 4. weka.classifiers.Evaluation.weightedPrecision()D: I21 Branch 309 IF_ICMPGE L3221 - true
   * Goal 5. weka.classifiers.Evaluation.weightedPrecision()D: I21 Branch 309 IF_ICMPGE L3221 - false
   * Goal 6. weka.classifiers.Evaluation.weightedPrecision()D: I33 Branch 310 IF_ICMPGE L3222 - true
   * Goal 7. weka.classifiers.Evaluation.weightedPrecision()D: I33 Branch 310 IF_ICMPGE L3222 - false
   * Goal 8. weka.classifiers.Evaluation.weightedPrecision()D: I85 Branch 311 IF_ICMPGE L3229 - true
   * Goal 9. weka.classifiers.Evaluation.weightedPrecision()D: I85 Branch 311 IF_ICMPGE L3229 - false
   */

  @Test
  public void test02()  throws Throwable  {
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertFalse(adaBoostM1_0.getDebug());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertNotNull(adaBoostM1_0);
      
      Capabilities capabilities0 = adaBoostM1_0.getCapabilities();
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertTrue(capabilities0.hasDependencies());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertFalse(adaBoostM1_0.getDebug());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertNotNull(capabilities0);
      
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(4, testInstances0.getNumAttributes());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertTrue(capabilities0.hasDependencies());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertFalse(adaBoostM1_0.getDebug());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertNotNull(testInstances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Instances instances0 = testInstances0.generate();
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(4, testInstances0.getNumAttributes());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20, instances0.numInstances());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(4, instances0.numAttributes());
      assertEquals(4, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(3, instances0.classIndex());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertTrue(capabilities0.hasDependencies());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertFalse(adaBoostM1_0.getDebug());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertNotNull(instances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(4, testInstances0.getNumAttributes());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20, instances0.numInstances());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(4, instances0.numAttributes());
      assertEquals(4, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(3, instances0.classIndex());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertTrue(capabilities0.hasDependencies());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertFalse(adaBoostM1_0.getDebug());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertNotNull(evaluation0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      double double0 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(4, testInstances0.getNumAttributes());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20, instances0.numInstances());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(4, instances0.numAttributes());
      assertEquals(4, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(3, instances0.classIndex());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertTrue(capabilities0.hasDependencies());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertFalse(adaBoostM1_0.getDebug());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.meanAbsoluteError()D: root-Branch
   * Goal 2. weka.classifiers.Evaluation.relativeAbsoluteError()D: I7 Branch 200 IFEQ L2243 - true
   */

  @Test
  public void test03()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertNotNull(testInstances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Instances instances0 = testInstances0.generate((String) null);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertNotNull(instances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertNotNull(evaluation0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      double double0 = evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.meanPriorAbsoluteError()D: I7 Branch 199 IFEQ L2229 - true
   */

  @Test
  public void test04()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertNotNull(instances0);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertNotNull(evaluation0);
      
      double double0 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.evaluationForSingleInstance(Lweka/classifiers/Classifier;Lweka/core/Instance;Z)D: I19 Branch 181 IFEQ L1726 - true
   */

  @Test
  public void test05()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertNotNull(instances0);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertNotNull(evaluation0);
      
      MultiScheme multiScheme0 = new MultiScheme();
      assertEquals(0, multiScheme0.getNumFolds());
      assertEquals("The classifiers to be chosen from.", multiScheme0.classifiersTipText());
      assertFalse(multiScheme0.getDebug());
      assertEquals("Whether debug information is output to console.", multiScheme0.debugTipText());
      assertEquals("Class for selecting a classifier from among several using cross validation on the training data or the performance on the training data. Performance is measured based on percent correct (classification) or mean-squared error (regression).", multiScheme0.globalInfo());
      assertEquals("The number of folds used for cross-validation (if 0, performance on training data will be used).", multiScheme0.numFoldsTipText());
      assertEquals(1, multiScheme0.getSeed());
      assertEquals("The seed used for randomizing the data for cross-validation.", multiScheme0.seedTipText());
      assertEquals(0, multiScheme0.getBestClassifierIndex());
      assertNotNull(multiScheme0);
      
      int[] intArray0 = new int[5];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1594.54562), intArray0, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, binarySparseInstance0.numAttributes());
      assertEquals(5, binarySparseInstance0.numValues());
      assertEquals((-1594.54562), binarySparseInstance0.weight(), 0.01D);
      assertNotNull(binarySparseInstance0);
      assertEquals(6, binarySparseInstance0.s_numericAfterDecimalPoint);
      
      try {
        double double0 = evaluation0.evaluationForSingleInstance(multiScheme0, binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
      }
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.useNoPriors()V: root-Branch
   */

  @Test
  public void test06()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertTrue(instances0.checkForStringAttributes());
      assertNotNull(instances0);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertNotNull(evaluation0);
      
      evaluation0.useNoPriors();
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(Double.NaN, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.setNumericPriorsFromBuffer()V: I18 Branch 389 IF_ICMPGE L3965 - true
   */

  @Test
  public void test07()  throws Throwable  {
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertFalse(adaBoostM1_0.getDebug());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertNotNull(adaBoostM1_0);
      
      Capabilities capabilities0 = adaBoostM1_0.getCapabilities();
      assertTrue(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertFalse(adaBoostM1_0.getDebug());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertNotNull(capabilities0);
      
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      assertTrue(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertFalse(adaBoostM1_0.getDebug());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(4, testInstances0.getNumAttributes());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertNotNull(testInstances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Instances instances0 = testInstances0.generate();
      assertTrue(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertFalse(adaBoostM1_0.getDebug());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertEquals(4, instances0.numAttributes());
      assertEquals(20, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(4, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(3, instances0.classIndex());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(4, testInstances0.getNumAttributes());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertNotNull(instances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertTrue(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertFalse(adaBoostM1_0.getDebug());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertEquals(4, instances0.numAttributes());
      assertEquals(20, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(4, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(3, instances0.classIndex());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(4, testInstances0.getNumAttributes());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertNotNull(evaluation0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      evaluation0.setNumericPriorsFromBuffer();
      assertTrue(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertFalse(adaBoostM1_0.getDebug());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertEquals(4, instances0.numAttributes());
      assertEquals(20, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(4, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(3, instances0.classIndex());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(4, testInstances0.getNumAttributes());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
  }

  //Test case number: 8
  /*
   * 10 covered goals:
   * Goal 1. weka.classifiers.Evaluation.weightedRecall()D: root-Branch
   * Goal 2. weka.classifiers.Evaluation.truePositiveRate(I)D: I18 Branch 259 IF_ICMPGE L2810 - false
   * Goal 3. weka.classifiers.Evaluation.truePositiveRate(I)D: I26 Branch 260 IF_ICMPNE L2811 - true
   * Goal 4. weka.classifiers.Evaluation.truePositiveRate(I)D: I26 Branch 260 IF_ICMPNE L2811 - false
   * Goal 5. weka.classifiers.Evaluation.weightedTruePositiveRate()D: I21 Branch 262 IF_ICMPGE L2831 - true
   * Goal 6. weka.classifiers.Evaluation.weightedTruePositiveRate()D: I21 Branch 262 IF_ICMPGE L2831 - false
   * Goal 7. weka.classifiers.Evaluation.weightedTruePositiveRate()D: I33 Branch 263 IF_ICMPGE L2832 - true
   * Goal 8. weka.classifiers.Evaluation.weightedTruePositiveRate()D: I33 Branch 263 IF_ICMPGE L2832 - false
   * Goal 9. weka.classifiers.Evaluation.weightedTruePositiveRate()D: I85 Branch 264 IF_ICMPGE L2839 - true
   * Goal 10. weka.classifiers.Evaluation.weightedTruePositiveRate()D: I85 Branch 264 IF_ICMPGE L2839 - false
   */

  @Test
  public void test08()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(testInstances0.getNoClass());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertNotNull(testInstances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Instances instances0 = testInstances0.generate();
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(testInstances0.getNoClass());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertNotNull(instances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(testInstances0.getNoClass());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertNotNull(evaluation0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      double double0 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(testInstances0.getNoClass());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.correct()D: root-Branch
   */

  @Test
  public void test09()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertNotNull(instances0);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertNotNull(evaluation0);
      
      double double0 = evaluation0.correct();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.updateStatsForClassifier([DLweka/core/Instance;)V: I176 Branch 368 IFLT L3741 - true
   */

  @Test
  public void test10()  throws Throwable  {
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      //  // Unstable assertion: assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      //  // Unstable assertion: assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      //  // Unstable assertion: assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getUseResampling());
      //  // Unstable assertion: assertEquals(100, adaBoostM1_0.getWeightThreshold());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getDebug());
      //  // Unstable assertion: assertEquals(10, adaBoostM1_0.getNumIterations());
      //  // Unstable assertion: assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      //  // Unstable assertion: assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      //  // Unstable assertion: assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      //  // Unstable assertion: assertEquals(1, adaBoostM1_0.getSeed());
      //  // Unstable assertion: assertNotNull(adaBoostM1_0);
      
      Capabilities capabilities0 = adaBoostM1_0.getCapabilities();
      //  // Unstable assertion: assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      //  // Unstable assertion: assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      //  // Unstable assertion: assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getUseResampling());
      //  // Unstable assertion: assertEquals(100, adaBoostM1_0.getWeightThreshold());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getDebug());
      //  // Unstable assertion: assertEquals(10, adaBoostM1_0.getNumIterations());
      //  // Unstable assertion: assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      //  // Unstable assertion: assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      //  // Unstable assertion: assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      //  // Unstable assertion: assertEquals(1, adaBoostM1_0.getSeed());
      //  // Unstable assertion: assertTrue(capabilities0.hasDependencies());
      //  // Unstable assertion: assertEquals(1, capabilities0.getMinimumNumberInstances());
      //  // Unstable assertion: assertNotNull(capabilities0);
      
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      //  // Unstable assertion: assertEquals(" ", testInstances0.getWordSeparators());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalNumeric());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalString());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumNominal());
      //  // Unstable assertion: assertEquals("Testdata", testInstances0.getRelation());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumDate());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumNominalValues());
      //  // Unstable assertion: assertEquals(20, testInstances0.getNumInstances());
      //  // Unstable assertion: assertFalse(testInstances0.getNoClass());
      //  // Unstable assertion: assertEquals(1, testInstances0.getClassType());
      //  // Unstable assertion: assertEquals(-1, testInstances0.getClassIndex());
      //  // Unstable assertion: assertEquals(4, testInstances0.getNumAttributes());
      //  // Unstable assertion: assertEquals(4, testInstances0.getNumClasses());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelational());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalDate());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumNumeric());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumRelationalNominalValues());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumString());
      //  // Unstable assertion: assertFalse(testInstances0.getMultiInstance());
      //  // Unstable assertion: assertEquals(10, testInstances0.getNumInstancesRelational());
      //  // Unstable assertion: assertEquals(1, testInstances0.getSeed());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalNominal());
      //  // Unstable assertion: assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      //  // Unstable assertion: assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      //  // Unstable assertion: assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getUseResampling());
      //  // Unstable assertion: assertEquals(100, adaBoostM1_0.getWeightThreshold());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getDebug());
      //  // Unstable assertion: assertEquals(10, adaBoostM1_0.getNumIterations());
      //  // Unstable assertion: assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      //  // Unstable assertion: assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      //  // Unstable assertion: assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      //  // Unstable assertion: assertEquals(1, adaBoostM1_0.getSeed());
      //  // Unstable assertion: assertTrue(capabilities0.hasDependencies());
      //  // Unstable assertion: assertEquals(1, capabilities0.getMinimumNumberInstances());
      //  // Unstable assertion: assertNotNull(testInstances0);
      //  // Unstable assertion: assertEquals((-1), testInstances0.CLASS_IS_LAST);
      //  // Unstable assertion: assertEquals((-2), testInstances0.NO_CLASS);
      
      Instances instances0 = testInstances0.generate();
      //  // Unstable assertion: assertEquals(" ", testInstances0.getWordSeparators());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalNumeric());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalString());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumNominal());
      //  // Unstable assertion: assertEquals("Testdata", testInstances0.getRelation());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumDate());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumNominalValues());
      //  // Unstable assertion: assertEquals(20, testInstances0.getNumInstances());
      //  // Unstable assertion: assertFalse(testInstances0.getNoClass());
      //  // Unstable assertion: assertEquals(1, testInstances0.getClassType());
      //  // Unstable assertion: assertEquals(-1, testInstances0.getClassIndex());
      //  // Unstable assertion: assertEquals(4, testInstances0.getNumAttributes());
      //  // Unstable assertion: assertEquals(4, testInstances0.getNumClasses());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelational());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalDate());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumNumeric());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumRelationalNominalValues());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumString());
      //  // Unstable assertion: assertFalse(testInstances0.getMultiInstance());
      //  // Unstable assertion: assertEquals(10, testInstances0.getNumInstancesRelational());
      //  // Unstable assertion: assertEquals(1, testInstances0.getSeed());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalNominal());
      //  // Unstable assertion: assertFalse(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(3, instances0.classIndex());
      //  // Unstable assertion: assertEquals(4, instances0.numClasses());
      //  // Unstable assertion: assertEquals(4, instances0.numAttributes());
      //  // Unstable assertion: assertEquals("Testdata", instances0.relationName());
      //  // Unstable assertion: assertEquals(20, instances0.size());
      //  // Unstable assertion: assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals(20, instances0.numInstances());
      //  // Unstable assertion: assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      //  // Unstable assertion: assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      //  // Unstable assertion: assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getUseResampling());
      //  // Unstable assertion: assertEquals(100, adaBoostM1_0.getWeightThreshold());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getDebug());
      //  // Unstable assertion: assertEquals(10, adaBoostM1_0.getNumIterations());
      //  // Unstable assertion: assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      //  // Unstable assertion: assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      //  // Unstable assertion: assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      //  // Unstable assertion: assertEquals(1, adaBoostM1_0.getSeed());
      //  // Unstable assertion: assertTrue(capabilities0.hasDependencies());
      //  // Unstable assertion: assertEquals(1, capabilities0.getMinimumNumberInstances());
      //  // Unstable assertion: assertNotNull(instances0);
      //  // Unstable assertion: assertEquals((-1), testInstances0.CLASS_IS_LAST);
      //  // Unstable assertion: assertEquals((-2), testInstances0.NO_CLASS);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      //  // Unstable assertion: assertEquals(" ", testInstances0.getWordSeparators());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalNumeric());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalString());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumNominal());
      //  // Unstable assertion: assertEquals("Testdata", testInstances0.getRelation());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumDate());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumNominalValues());
      //  // Unstable assertion: assertEquals(20, testInstances0.getNumInstances());
      //  // Unstable assertion: assertFalse(testInstances0.getNoClass());
      //  // Unstable assertion: assertEquals(1, testInstances0.getClassType());
      //  // Unstable assertion: assertEquals(-1, testInstances0.getClassIndex());
      //  // Unstable assertion: assertEquals(4, testInstances0.getNumAttributes());
      //  // Unstable assertion: assertEquals(4, testInstances0.getNumClasses());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelational());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalDate());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumNumeric());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumRelationalNominalValues());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumString());
      //  // Unstable assertion: assertFalse(testInstances0.getMultiInstance());
      //  // Unstable assertion: assertEquals(10, testInstances0.getNumInstancesRelational());
      //  // Unstable assertion: assertEquals(1, testInstances0.getSeed());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalNominal());
      //  // Unstable assertion: assertFalse(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(3, instances0.classIndex());
      //  // Unstable assertion: assertEquals(4, instances0.numClasses());
      //  // Unstable assertion: assertEquals(4, instances0.numAttributes());
      //  // Unstable assertion: assertEquals("Testdata", instances0.relationName());
      //  // Unstable assertion: assertEquals(20, instances0.size());
      //  // Unstable assertion: assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals(20, instances0.numInstances());
      //  // Unstable assertion: assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      //  // Unstable assertion: assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      //  // Unstable assertion: assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getUseResampling());
      //  // Unstable assertion: assertEquals(100, adaBoostM1_0.getWeightThreshold());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getDebug());
      //  // Unstable assertion: assertEquals(10, adaBoostM1_0.getNumIterations());
      //  // Unstable assertion: assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      //  // Unstable assertion: assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      //  // Unstable assertion: assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      //  // Unstable assertion: assertEquals(1, adaBoostM1_0.getSeed());
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.correct(), 0.01D);
      //  // Unstable assertion: assertFalse(evaluation0.getDiscardPredictions());
      //  // Unstable assertion: assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.kappa(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertTrue(capabilities0.hasDependencies());
      //  // Unstable assertion: assertEquals(1, capabilities0.getMinimumNumberInstances());
      //  // Unstable assertion: assertNotNull(evaluation0);
      //  // Unstable assertion: assertEquals((-1), testInstances0.CLASS_IS_LAST);
      //  // Unstable assertion: assertEquals((-2), testInstances0.NO_CLASS);
      
      double double0 = evaluation0.avgCost();
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      //  // Unstable assertion: assertEquals(" ", testInstances0.getWordSeparators());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalNumeric());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalString());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumNominal());
      //  // Unstable assertion: assertEquals("Testdata", testInstances0.getRelation());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumDate());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumNominalValues());
      //  // Unstable assertion: assertEquals(20, testInstances0.getNumInstances());
      //  // Unstable assertion: assertFalse(testInstances0.getNoClass());
      //  // Unstable assertion: assertEquals(1, testInstances0.getClassType());
      //  // Unstable assertion: assertEquals(-1, testInstances0.getClassIndex());
      //  // Unstable assertion: assertEquals(4, testInstances0.getNumAttributes());
      //  // Unstable assertion: assertEquals(4, testInstances0.getNumClasses());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelational());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalDate());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumNumeric());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumRelationalNominalValues());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumString());
      //  // Unstable assertion: assertFalse(testInstances0.getMultiInstance());
      //  // Unstable assertion: assertEquals(10, testInstances0.getNumInstancesRelational());
      //  // Unstable assertion: assertEquals(1, testInstances0.getSeed());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalNominal());
      //  // Unstable assertion: assertFalse(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(3, instances0.classIndex());
      //  // Unstable assertion: assertEquals(4, instances0.numClasses());
      //  // Unstable assertion: assertEquals(4, instances0.numAttributes());
      //  // Unstable assertion: assertEquals("Testdata", instances0.relationName());
      //  // Unstable assertion: assertEquals(20, instances0.size());
      //  // Unstable assertion: assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals(20, instances0.numInstances());
      //  // Unstable assertion: assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      //  // Unstable assertion: assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      //  // Unstable assertion: assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getUseResampling());
      //  // Unstable assertion: assertEquals(100, adaBoostM1_0.getWeightThreshold());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getDebug());
      //  // Unstable assertion: assertEquals(10, adaBoostM1_0.getNumIterations());
      //  // Unstable assertion: assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      //  // Unstable assertion: assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      //  // Unstable assertion: assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      //  // Unstable assertion: assertEquals(1, adaBoostM1_0.getSeed());
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.correct(), 0.01D);
      //  // Unstable assertion: assertFalse(evaluation0.getDiscardPredictions());
      //  // Unstable assertion: assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.kappa(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertTrue(capabilities0.hasDependencies());
      //  // Unstable assertion: assertEquals(1, capabilities0.getMinimumNumberInstances());
      //  // Unstable assertion: assertEquals((-1), testInstances0.CLASS_IS_LAST);
      //  // Unstable assertion: assertEquals((-2), testInstances0.NO_CLASS);
      
      DenseInstance denseInstance0 = (DenseInstance)instances0.lastInstance();
      //  // Unstable assertion: assertEquals(3, denseInstance0.classIndex());
      //  // Unstable assertion: assertEquals(4, denseInstance0.numClasses());
      //  // Unstable assertion: assertEquals(4, denseInstance0.numAttributes());
      //  // Unstable assertion: assertEquals(4, denseInstance0.numValues());
      //  // Unstable assertion: assertEquals(1.0, denseInstance0.weight(), 0.01D);
      //  // Unstable assertion: assertEquals(" ", testInstances0.getWordSeparators());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalNumeric());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalString());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumNominal());
      //  // Unstable assertion: assertEquals("Testdata", testInstances0.getRelation());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumDate());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumNominalValues());
      //  // Unstable assertion: assertEquals(20, testInstances0.getNumInstances());
      //  // Unstable assertion: assertFalse(testInstances0.getNoClass());
      //  // Unstable assertion: assertEquals(1, testInstances0.getClassType());
      //  // Unstable assertion: assertEquals(-1, testInstances0.getClassIndex());
      //  // Unstable assertion: assertEquals(4, testInstances0.getNumAttributes());
      //  // Unstable assertion: assertEquals(4, testInstances0.getNumClasses());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelational());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalDate());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumNumeric());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumRelationalNominalValues());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumString());
      //  // Unstable assertion: assertFalse(testInstances0.getMultiInstance());
      //  // Unstable assertion: assertEquals(10, testInstances0.getNumInstancesRelational());
      //  // Unstable assertion: assertEquals(1, testInstances0.getSeed());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalNominal());
      //  // Unstable assertion: assertFalse(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(3, instances0.classIndex());
      //  // Unstable assertion: assertEquals(4, instances0.numClasses());
      //  // Unstable assertion: assertEquals(4, instances0.numAttributes());
      //  // Unstable assertion: assertEquals("Testdata", instances0.relationName());
      //  // Unstable assertion: assertEquals(20, instances0.size());
      //  // Unstable assertion: assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals(20, instances0.numInstances());
      //  // Unstable assertion: assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      //  // Unstable assertion: assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      //  // Unstable assertion: assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getUseResampling());
      //  // Unstable assertion: assertEquals(100, adaBoostM1_0.getWeightThreshold());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getDebug());
      //  // Unstable assertion: assertEquals(10, adaBoostM1_0.getNumIterations());
      //  // Unstable assertion: assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      //  // Unstable assertion: assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      //  // Unstable assertion: assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      //  // Unstable assertion: assertEquals(1, adaBoostM1_0.getSeed());
      //  // Unstable assertion: assertTrue(capabilities0.hasDependencies());
      //  // Unstable assertion: assertEquals(1, capabilities0.getMinimumNumberInstances());
      //  // Unstable assertion: assertNotNull(denseInstance0);
      //  // Unstable assertion: assertEquals(6, denseInstance0.s_numericAfterDecimalPoint);
      //  // Unstable assertion: assertEquals((-1), testInstances0.CLASS_IS_LAST);
      //  // Unstable assertion: assertEquals((-2), testInstances0.NO_CLASS);
      
      double[] doubleArray0 = new double[30];
      doubleArray0[20] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      double double1 = evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) denseInstance0, true);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertEquals(3, denseInstance0.classIndex());
      //  // Unstable assertion: assertEquals(4, denseInstance0.numClasses());
      //  // Unstable assertion: assertEquals(4, denseInstance0.numAttributes());
      //  // Unstable assertion: assertEquals(4, denseInstance0.numValues());
      //  // Unstable assertion: assertEquals(1.0, denseInstance0.weight(), 0.01D);
      //  // Unstable assertion: assertEquals(" ", testInstances0.getWordSeparators());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalNumeric());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalString());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumNominal());
      //  // Unstable assertion: assertEquals("Testdata", testInstances0.getRelation());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumDate());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumNominalValues());
      //  // Unstable assertion: assertEquals(20, testInstances0.getNumInstances());
      //  // Unstable assertion: assertFalse(testInstances0.getNoClass());
      //  // Unstable assertion: assertEquals(1, testInstances0.getClassType());
      //  // Unstable assertion: assertEquals(-1, testInstances0.getClassIndex());
      //  // Unstable assertion: assertEquals(4, testInstances0.getNumAttributes());
      //  // Unstable assertion: assertEquals(4, testInstances0.getNumClasses());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelational());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalDate());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumNumeric());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumRelationalNominalValues());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumString());
      //  // Unstable assertion: assertFalse(testInstances0.getMultiInstance());
      //  // Unstable assertion: assertEquals(10, testInstances0.getNumInstancesRelational());
      //  // Unstable assertion: assertEquals(1, testInstances0.getSeed());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalNominal());
      //  // Unstable assertion: assertFalse(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(3, instances0.classIndex());
      //  // Unstable assertion: assertEquals(4, instances0.numClasses());
      //  // Unstable assertion: assertEquals(4, instances0.numAttributes());
      //  // Unstable assertion: assertEquals("Testdata", instances0.relationName());
      //  // Unstable assertion: assertEquals(20, instances0.size());
      //  // Unstable assertion: assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals(20, instances0.numInstances());
      //  // Unstable assertion: assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      //  // Unstable assertion: assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      //  // Unstable assertion: assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getUseResampling());
      //  // Unstable assertion: assertEquals(100, adaBoostM1_0.getWeightThreshold());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getDebug());
      //  // Unstable assertion: assertEquals(10, adaBoostM1_0.getNumIterations());
      //  // Unstable assertion: assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      //  // Unstable assertion: assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      //  // Unstable assertion: assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      //  // Unstable assertion: assertEquals(1, adaBoostM1_0.getSeed());
      //  // Unstable assertion: assertEquals(1.0, evaluation0.numInstances(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      //  // Unstable assertion: assertEquals(0.3125, evaluation0.meanPriorAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(25.0, evaluation0.sizeOfPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.correct(), 0.01D);
      //  // Unstable assertion: assertFalse(evaluation0.getDiscardPredictions());
      //  // Unstable assertion: assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.unweightedMicroFmeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(1.4150374992788437, evaluation0.SFMeanPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals((-1072.584962500721), evaluation0.SFEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.weightedFalseNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(1074.0, evaluation0.SFSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.incorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.errorRate(), 0.01D);
      //  // Unstable assertion: assertEquals(1.4150374992788437, evaluation0.SFPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals((-1072.584962500721), evaluation0.SFMeanEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.weightedRecall(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.weightedTruePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.weightedPrecision(), 0.01D);
      //  // Unstable assertion: assertEquals(100.0, evaluation0.pctIncorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.weightedFalsePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.pctUnclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.kappa(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.weightedTrueNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.avgCost(), 0.01D);
      //  // Unstable assertion: assertEquals(0.3644344934278313, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.pctCorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(1074.0, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.weightedFMeasure(), 0.01D);
      //  // Unstable assertion: assertTrue(capabilities0.hasDependencies());
      //  // Unstable assertion: assertEquals(1, capabilities0.getMinimumNumberInstances());
      //  // Unstable assertion: assertEquals(6, denseInstance0.s_numericAfterDecimalPoint);
      //  // Unstable assertion: assertEquals((-1), testInstances0.CLASS_IS_LAST);
      //  // Unstable assertion: assertEquals((-2), testInstances0.NO_CLASS);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.crossValidateModel(Ljava/lang/String;Lweka/core/Instances;I[Ljava/lang/String;Ljava/util/Random;)V: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertNotNull(instances0);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertNotNull(evaluation0);
      
      int[] intArray0 = new int[5];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String[] stringArray0 = new String[6];
      try {
        evaluation0.crossValidateModel("", instances0, 0, stringArray0, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: 
         //
      }
  }

  //Test case number: 12
  /*
   * 15 covered goals:
   * Goal 1. weka.classifiers.Evaluation.falsePositiveRate(I)D: I18 Branch 281 IF_ICMPGE L2976 - true
   * Goal 2. weka.classifiers.Evaluation.falsePositiveRate(I)D: I18 Branch 281 IF_ICMPGE L2976 - false
   * Goal 3. weka.classifiers.Evaluation.falsePositiveRate(I)D: I26 Branch 282 IF_ICMPEQ L2977 - true
   * Goal 4. weka.classifiers.Evaluation.falsePositiveRate(I)D: I26 Branch 282 IF_ICMPEQ L2977 - false
   * Goal 5. weka.classifiers.Evaluation.falsePositiveRate(I)D: I38 Branch 283 IF_ICMPGE L2978 - true
   * Goal 6. weka.classifiers.Evaluation.falsePositiveRate(I)D: I38 Branch 283 IF_ICMPGE L2978 - false
   * Goal 7. weka.classifiers.Evaluation.falsePositiveRate(I)D: I46 Branch 284 IF_ICMPNE L2979 - true
   * Goal 8. weka.classifiers.Evaluation.falsePositiveRate(I)D: I46 Branch 284 IF_ICMPNE L2979 - false
   * Goal 9. weka.classifiers.Evaluation.falsePositiveRate(I)D: I91 Branch 285 IFNE L2986 - false
   * Goal 10. weka.classifiers.Evaluation.weightedFalsePositiveRate()D: I21 Branch 286 IF_ICMPGE L3001 - true
   * Goal 11. weka.classifiers.Evaluation.weightedFalsePositiveRate()D: I21 Branch 286 IF_ICMPGE L3001 - false
   * Goal 12. weka.classifiers.Evaluation.weightedFalsePositiveRate()D: I33 Branch 287 IF_ICMPGE L3002 - true
   * Goal 13. weka.classifiers.Evaluation.weightedFalsePositiveRate()D: I33 Branch 287 IF_ICMPGE L3002 - false
   * Goal 14. weka.classifiers.Evaluation.weightedFalsePositiveRate()D: I85 Branch 288 IF_ICMPGE L3009 - true
   * Goal 15. weka.classifiers.Evaluation.weightedFalsePositiveRate()D: I85 Branch 288 IF_ICMPGE L3009 - false
   */

  @Test
  public void test12()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertNotNull(testInstances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Instances instances0 = testInstances0.generate();
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertNotNull(instances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertNotNull(evaluation0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      double double0 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I155 Branch 5 IF_ICMPEQ L422 - true
   */

  @Test
  public void test13()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertNotNull(instances0);
      
      CostMatrix costMatrix0 = new CostMatrix(0);
      assertEquals(0, costMatrix0.size());
      assertEquals(0, costMatrix0.numRows());
      assertEquals(0, costMatrix0.numColumns());
      assertNotNull(costMatrix0);
      
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, costMatrix0.size());
      assertEquals(0, costMatrix0.numRows());
      assertEquals(0, costMatrix0.numColumns());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertNotNull(evaluation0);
  }

  //Test case number: 14
  /*
   * 15 covered goals:
   * Goal 1. weka.classifiers.Evaluation.SFPriorEntropy()D: I7 Branch 212 IFNE L2370 - false
   * Goal 2. weka.classifiers.Evaluation.SFPriorEntropy()D: I13 Branch 213 IFNE L2370 - true
   * Goal 3. weka.classifiers.Evaluation.falseNegativeRate(I)D: I18 Branch 293 IF_ICMPGE L3061 - true
   * Goal 4. weka.classifiers.Evaluation.falseNegativeRate(I)D: I18 Branch 293 IF_ICMPGE L3061 - false
   * Goal 5. weka.classifiers.Evaluation.falseNegativeRate(I)D: I26 Branch 294 IF_ICMPNE L3062 - true
   * Goal 6. weka.classifiers.Evaluation.falseNegativeRate(I)D: I26 Branch 294 IF_ICMPNE L3062 - false
   * Goal 7. weka.classifiers.Evaluation.falseNegativeRate(I)D: I38 Branch 295 IF_ICMPGE L3063 - true
   * Goal 8. weka.classifiers.Evaluation.falseNegativeRate(I)D: I38 Branch 295 IF_ICMPGE L3063 - false
   * Goal 9. weka.classifiers.Evaluation.falseNegativeRate(I)D: I46 Branch 296 IF_ICMPEQ L3064 - true
   * Goal 10. weka.classifiers.Evaluation.falseNegativeRate(I)D: I46 Branch 296 IF_ICMPEQ L3064 - false
   * Goal 11. weka.classifiers.Evaluation.falseNegativeRate(I)D: I91 Branch 297 IFNE L3071 - false
   * Goal 12. weka.classifiers.Evaluation.weightedFalseNegativeRate()D: I21 Branch 298 IF_ICMPGE L3086 - false
   * Goal 13. weka.classifiers.Evaluation.weightedFalseNegativeRate()D: I33 Branch 299 IF_ICMPGE L3087 - true
   * Goal 14. weka.classifiers.Evaluation.weightedFalseNegativeRate()D: I33 Branch 299 IF_ICMPGE L3087 - false
   * Goal 15. weka.classifiers.Evaluation.weightedFalseNegativeRate()D: I85 Branch 300 IF_ICMPGE L3094 - false
   */

  @Test
  public void test14()  throws Throwable  {
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      assertFalse(adaBoostM1_0.getDebug());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertNotNull(adaBoostM1_0);
      
      Capabilities capabilities0 = adaBoostM1_0.getCapabilities();
      assertFalse(adaBoostM1_0.getDebug());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertTrue(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertNotNull(capabilities0);
      
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      assertFalse(adaBoostM1_0.getDebug());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertTrue(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(4, testInstances0.getNumAttributes());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertNotNull(testInstances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Instances instances0 = testInstances0.generate();
      assertEquals(3, instances0.classIndex());
      assertEquals(4, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(4, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertFalse(adaBoostM1_0.getDebug());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertTrue(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(4, testInstances0.getNumAttributes());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertNotNull(instances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(3, instances0.classIndex());
      assertEquals(4, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(4, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertFalse(adaBoostM1_0.getDebug());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertTrue(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(4, testInstances0.getNumAttributes());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertNotNull(evaluation0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(3, instances0.classIndex());
      assertEquals(4, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(4, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertFalse(adaBoostM1_0.getDebug());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertTrue(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(4, testInstances0.getNumAttributes());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      double double1 = evaluation0.weightedFalseNegativeRate();
      assertFalse(double1 == double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertEquals(3, instances0.classIndex());
      assertEquals(4, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(4, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertFalse(adaBoostM1_0.getDebug());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertTrue(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(4, testInstances0.getNumAttributes());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.evaluationForSingleInstance([DLweka/core/Instance;Z)D: I113 Branch 180 IFNONNULL L1700 - true
   */

  @Test
  public void test15()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      assertFalse(simpleLinearRegression0.getDebug());
      assertEquals(0.0, simpleLinearRegression0.getSlope(), 0.01D);
      assertEquals(0.0, simpleLinearRegression0.getIntercept(), 0.01D);
      assertEquals("If set to true, classifier may output additional info to the console.", simpleLinearRegression0.debugTipText());
      assertEquals("Learns a simple linear regression model. Picks the attribute that results in the lowest squared error. Missing values are not allowed. Can only deal with numeric attributes.", simpleLinearRegression0.globalInfo());
      assertEquals(0, simpleLinearRegression0.getAttributeIndex());
      assertFalse(simpleLinearRegression0.foundUsefulAttribute());
      assertNotNull(simpleLinearRegression0);
      
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertFalse(simpleLinearRegression0.getDebug());
      assertEquals(0.0, simpleLinearRegression0.getSlope(), 0.01D);
      assertEquals(0.0, simpleLinearRegression0.getIntercept(), 0.01D);
      assertEquals("If set to true, classifier may output additional info to the console.", simpleLinearRegression0.debugTipText());
      assertEquals("Learns a simple linear regression model. Picks the attribute that results in the lowest squared error. Missing values are not allowed. Can only deal with numeric attributes.", simpleLinearRegression0.globalInfo());
      assertEquals(0, simpleLinearRegression0.getAttributeIndex());
      assertFalse(simpleLinearRegression0.foundUsefulAttribute());
      assertNotNull(capabilities0);
      
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(3, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumRelationalNominal());
      assertFalse(simpleLinearRegression0.getDebug());
      assertEquals(0.0, simpleLinearRegression0.getSlope(), 0.01D);
      assertEquals(0.0, simpleLinearRegression0.getIntercept(), 0.01D);
      assertEquals("If set to true, classifier may output additional info to the console.", simpleLinearRegression0.debugTipText());
      assertEquals("Learns a simple linear regression model. Picks the attribute that results in the lowest squared error. Missing values are not allowed. Can only deal with numeric attributes.", simpleLinearRegression0.globalInfo());
      assertEquals(0, simpleLinearRegression0.getAttributeIndex());
      assertFalse(simpleLinearRegression0.foundUsefulAttribute());
      assertNotNull(testInstances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Instances instances0 = testInstances0.generate();
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(3, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumRelationalNominal());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numClasses());
      assertEquals(2, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(3, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertFalse(simpleLinearRegression0.getDebug());
      assertEquals(0.0, simpleLinearRegression0.getSlope(), 0.01D);
      assertEquals(0.0, simpleLinearRegression0.getIntercept(), 0.01D);
      assertEquals("If set to true, classifier may output additional info to the console.", simpleLinearRegression0.debugTipText());
      assertEquals("Learns a simple linear regression model. Picks the attribute that results in the lowest squared error. Missing values are not allowed. Can only deal with numeric attributes.", simpleLinearRegression0.globalInfo());
      assertEquals(0, simpleLinearRegression0.getAttributeIndex());
      assertFalse(simpleLinearRegression0.foundUsefulAttribute());
      assertNotNull(instances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(3, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumRelationalNominal());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numClasses());
      assertEquals(2, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(3, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertFalse(simpleLinearRegression0.getDebug());
      assertEquals(0.0, simpleLinearRegression0.getSlope(), 0.01D);
      assertEquals(0.0, simpleLinearRegression0.getIntercept(), 0.01D);
      assertEquals("If set to true, classifier may output additional info to the console.", simpleLinearRegression0.debugTipText());
      assertEquals("Learns a simple linear regression model. Picks the attribute that results in the lowest squared error. Missing values are not allowed. Can only deal with numeric attributes.", simpleLinearRegression0.globalInfo());
      assertEquals(0, simpleLinearRegression0.getAttributeIndex());
      assertFalse(simpleLinearRegression0.foundUsefulAttribute());
      assertNotNull(evaluation0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      DenseInstance denseInstance0 = (DenseInstance)instances0.lastInstance();
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(3, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumRelationalNominal());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numClasses());
      assertEquals(2, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(3, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertFalse(simpleLinearRegression0.getDebug());
      assertEquals(0.0, simpleLinearRegression0.getSlope(), 0.01D);
      assertEquals(0.0, simpleLinearRegression0.getIntercept(), 0.01D);
      assertEquals("If set to true, classifier may output additional info to the console.", simpleLinearRegression0.debugTipText());
      assertEquals("Learns a simple linear regression model. Picks the attribute that results in the lowest squared error. Missing values are not allowed. Can only deal with numeric attributes.", simpleLinearRegression0.globalInfo());
      assertEquals(0, simpleLinearRegression0.getAttributeIndex());
      assertFalse(simpleLinearRegression0.foundUsefulAttribute());
      assertEquals(1, denseInstance0.numClasses());
      assertEquals(2, denseInstance0.classIndex());
      assertEquals(1.0, denseInstance0.weight(), 0.01D);
      assertEquals(3, denseInstance0.numValues());
      assertEquals(3, denseInstance0.numAttributes());
      assertNotNull(denseInstance0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals(6, denseInstance0.s_numericAfterDecimalPoint);
      
      double[] doubleArray0 = new double[3];
      double double0 = evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) denseInstance0, true);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(1.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.17499999701976776, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.43750000353902574, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(39.999998995236, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.17499999701976776, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.avgCost(), 0.01D);
      assertEquals(39.999998995236, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.43750000353902574, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.17499999701976776, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.pctUnclassified(), 0.01D);
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(3, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumRelationalNominal());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numClasses());
      assertEquals(2, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(3, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertFalse(simpleLinearRegression0.getDebug());
      assertEquals(0.0, simpleLinearRegression0.getSlope(), 0.01D);
      assertEquals(0.0, simpleLinearRegression0.getIntercept(), 0.01D);
      assertEquals("If set to true, classifier may output additional info to the console.", simpleLinearRegression0.debugTipText());
      assertEquals("Learns a simple linear regression model. Picks the attribute that results in the lowest squared error. Missing values are not allowed. Can only deal with numeric attributes.", simpleLinearRegression0.globalInfo());
      assertEquals(0, simpleLinearRegression0.getAttributeIndex());
      assertFalse(simpleLinearRegression0.foundUsefulAttribute());
      assertEquals(1, denseInstance0.numClasses());
      assertEquals(2, denseInstance0.classIndex());
      assertEquals(1.0, denseInstance0.weight(), 0.01D);
      assertEquals(3, denseInstance0.numValues());
      assertEquals(3, denseInstance0.numAttributes());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals(6, denseInstance0.s_numericAfterDecimalPoint);
      
      double double1 = evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) denseInstance0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.17499999701976776, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(2.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.43750000353902574, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(39.999998995236, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.17499999701976776, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.avgCost(), 0.01D);
      assertEquals(39.999998995236, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.43750000353902574, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.17499999701976776, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.pctUnclassified(), 0.01D);
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(3, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumRelationalNominal());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numClasses());
      assertEquals(2, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(3, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertFalse(simpleLinearRegression0.getDebug());
      assertEquals(0.0, simpleLinearRegression0.getSlope(), 0.01D);
      assertEquals(0.0, simpleLinearRegression0.getIntercept(), 0.01D);
      assertEquals("If set to true, classifier may output additional info to the console.", simpleLinearRegression0.debugTipText());
      assertEquals("Learns a simple linear regression model. Picks the attribute that results in the lowest squared error. Missing values are not allowed. Can only deal with numeric attributes.", simpleLinearRegression0.globalInfo());
      assertEquals(0, simpleLinearRegression0.getAttributeIndex());
      assertFalse(simpleLinearRegression0.foundUsefulAttribute());
      assertEquals(1, denseInstance0.numClasses());
      assertEquals(2, denseInstance0.classIndex());
      assertEquals(1.0, denseInstance0.weight(), 0.01D);
      assertEquals(3, denseInstance0.numValues());
      assertEquals(3, denseInstance0.numAttributes());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals(6, denseInstance0.s_numericAfterDecimalPoint);
  }

  //Test case number: 16
  /*
   * 6 covered goals:
   * Goal 1. weka.classifiers.Evaluation.numTrueNegatives(I)D: I15 Branch 265 IF_ICMPGE L2862 - true
   * Goal 2. weka.classifiers.Evaluation.numTrueNegatives(I)D: I15 Branch 265 IF_ICMPGE L2862 - false
   * Goal 3. weka.classifiers.Evaluation.numTrueNegatives(I)D: I23 Branch 266 IF_ICMPEQ L2863 - false
   * Goal 4. weka.classifiers.Evaluation.numTrueNegatives(I)D: I35 Branch 267 IF_ICMPGE L2864 - true
   * Goal 5. weka.classifiers.Evaluation.numTrueNegatives(I)D: I35 Branch 267 IF_ICMPGE L2864 - false
   * Goal 6. weka.classifiers.Evaluation.numTrueNegatives(I)D: I43 Branch 268 IF_ICMPEQ L2865 - false
   */

  @Test
  public void test16()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertNotNull(testInstances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Instances instances0 = testInstances0.generate((String) null);
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(2, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertNotNull(instances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(2, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertNotNull(evaluation0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      double double0 = evaluation0.numTrueNegatives(2441);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(2, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I360 Branch 350 IFEQ L3562 - false
   */

  @Test
  public void test17()  throws Throwable  {
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      assertEquals(1, adaBoostM1_0.getSeed());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertFalse(adaBoostM1_0.getDebug());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertNotNull(adaBoostM1_0);
      
      String string0 = Evaluation.makeOptionString(adaBoostM1_0, true);
      assertEquals("\n\nGeneral options:\n\n-h or -help\n\tOutput help information.\n-synopsis or -info\n\tOutput synopsis for classifier (use in conjunction  with -h)\n-t <name of training file>\n\tSets training file.\n-T <name of test file>\n\tSets test file. If missing, a cross-validation will be performed\n\ton the training data.\n-c <class index>\n\tSets index of class attribute (default: last).\n-x <number of folds>\n\tSets number of folds for cross-validation (default: 10).\n-no-cv\n\tDo not perform any cross validation.\n-split-percentage <percentage>\n\tSets the percentage for the train/test set split, e.g., 66.\n-preserve-order\n\tPreserves the order in the percentage split.\n-s <random number seed>\n\tSets random number seed for cross-validation or percentage split\n\t(default: 1).\n-m <name of file with cost matrix>\n\tSets file with cost matrix.\n-l <name of input file>\n\tSets model input file. In case the filename ends with '.xml',\n\ta PMML file is loaded or, if that fails, options are loaded\n\tfrom the XML file.\n-d <name of output file>\n\tSets model output file. In case the filename ends with '.xml',\n\tonly the options are saved to the XML file, not the model.\n-v\n\tOutputs no statistics for training data.\n-o\n\tOutputs statistics only, not the classifier.\n-i\n\tOutputs detailed information-retrieval statistics for each class.\n-k\n\tOutputs information-theoretic statistics.\n-classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"\n\tUses the specified class for generating the classification output.\n\tE.g.: weka.classifiers.evaluation.output.prediction.PlainText\n-p range\n\tOutputs predictions for test instances (or the train instances if\n\tno test instances provided and -no-cv is used), along with the \n\tattributes in the specified range (and nothing else). \n\tUse '-p 0' if no attributes are desired.\n\tDeprecated: use \"-classifications ...\" instead.\n-distribution\n\tOutputs the distribution instead of only the prediction\n\tin conjunction with the '-p' option (only nominal classes).\n\tDeprecated: use \"-classifications ...\" instead.\n-r\n\tOnly outputs cumulative margin distribution.\n-z <class name>\n\tOnly outputs the source representation of the classifier,\n\tgiving it the supplied name.\n-xml filename | xml-string\n\tRetrieves the options from the XML-data instead of the command line.\n-threshold-file <file>\n\tThe file to save the threshold data to.\n\tThe format is determined by the extensions, e.g., '.arff' for ARFF \n\tformat or '.csv' for CSV.\n-threshold-label <label>\n\tThe class label to determine the threshold data for\n\t(default is the first label)\n\nOptions specific to weka.classifiers.meta.AdaBoostM1:\n\n-P <num>\n\tPercentage of weight mass to base training on.\n\t(default 100, reduce to around 90 speed up)\n-Q\n\tUse resampling for boosting.\n-S <num>\n\tRandom number seed.\n\t(default 1)\n-I <num>\n\tNumber of iterations.\n\t(default 10)\n-D\n\tIf set, classifier is run in debug mode and\n\tmay output additional info to the console\n-W\n\tFull name of base classifier.\n\t(default: weka.classifiers.trees.DecisionStump)\n\nOptions specific to classifier weka.classifiers.trees.DecisionStump:\n\n-D\n\tIf set, classifier is run in debug mode and\n\tmay output additional info to the console\n\nSynopsis for weka.classifiers.meta.AdaBoostM1:\n\nClass for boosting a nominal class classifier using the Adaboost M1 method. Only nominal class problems can be tackled. Often dramatically improves performance, but sometimes overfits.\n\nFor more information, see\n\nYoav Freund, Robert E. Schapire: Experiments with a new boosting algorithm. In: Thirteenth International Conference on Machine Learning, San Francisco, 148-156, 1996.", string0);
      assertEquals(1, adaBoostM1_0.getSeed());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertFalse(adaBoostM1_0.getDebug());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertNotNull(string0);
  }

  //Test case number: 18
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.toSummaryString(Ljava/lang/String;Z)Ljava/lang/String;: I12 Branch 226 IFEQ L2512 - false
   * Goal 2. weka.classifiers.Evaluation.toSummaryString(Ljava/lang/String;Z)Ljava/lang/String;: I18 Branch 227 IFEQ L2512 - true
   */

  @Test
  public void test18()  throws Throwable  {
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      assertFalse(adaBoostM1_0.getDebug());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertNotNull(adaBoostM1_0);
      
      Capabilities capabilities0 = adaBoostM1_0.getCapabilities();
      assertFalse(adaBoostM1_0.getDebug());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertTrue(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertNotNull(capabilities0);
      
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      assertFalse(adaBoostM1_0.getDebug());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertTrue(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(4, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getNoClass());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertNotNull(testInstances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Instances instances0 = testInstances0.generate();
      assertFalse(adaBoostM1_0.getDebug());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertEquals(4, instances0.numAttributes());
      assertEquals(20, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(4, instances0.numClasses());
      assertEquals(3, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertTrue(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(4, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getNoClass());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertNotNull(instances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertFalse(adaBoostM1_0.getDebug());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(4, instances0.numAttributes());
      assertEquals(20, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(4, instances0.numClasses());
      assertEquals(3, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertTrue(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(4, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getNoClass());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertNotNull(evaluation0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      String string0 = evaluation0.toSummaryString(true);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      assertFalse(adaBoostM1_0.getDebug());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(4, instances0.numAttributes());
      assertEquals(20, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(4, instances0.numClasses());
      assertEquals(3, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertTrue(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(4, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getNoClass());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertNotNull(string0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
  }

  //Test case number: 19
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.sizeOfPredictedRegions()D: I7 Branch 189 IFNE L2031 - false
   * Goal 2. weka.classifiers.Evaluation.sizeOfPredictedRegions()D: I13 Branch 190 IFNE L2031 - true
   */

  @Test
  public void test19()  throws Throwable  {
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      assertFalse(xRFFLoader0.getUseRelativePath());
      assertEquals("Use relative rather than absolute paths", xRFFLoader0.useRelativePathTipText());
      assertEquals("XRFF data files", xRFFLoader0.getFileDescription());
      assertEquals("http://", xRFFLoader0.retrieveURL());
      assertEquals(".xrff", xRFFLoader0.getFileExtension());
      assertNotNull(xRFFLoader0);
      
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      assertEquals(0.0, additiveRegression0.measureNumIterations(), 0.01D);
      assertEquals(10, additiveRegression0.getNumIterations());
      assertFalse(additiveRegression0.getDebug());
      assertEquals("If set to true, classifier may output additional info to the console.", additiveRegression0.debugTipText());
      assertEquals("Shrinkage rate. Smaller values help prevent overfitting and have a smoothing effect (but increase learning time). Default = 1.0, ie. no shrinkage.", additiveRegression0.shrinkageTipText());
      assertEquals("The number of iterations to be performed.", additiveRegression0.numIterationsTipText());
      assertEquals("The base classifier to be used.", additiveRegression0.classifierTipText());
      assertEquals(1.0, additiveRegression0.getShrinkage(), 0.01D);
      assertNotNull(additiveRegression0);
      
      Capabilities capabilities0 = additiveRegression0.getCapabilities();
      assertEquals(0.0, additiveRegression0.measureNumIterations(), 0.01D);
      assertEquals(10, additiveRegression0.getNumIterations());
      assertFalse(additiveRegression0.getDebug());
      assertEquals("If set to true, classifier may output additional info to the console.", additiveRegression0.debugTipText());
      assertEquals("Shrinkage rate. Smaller values help prevent overfitting and have a smoothing effect (but increase learning time). Default = 1.0, ie. no shrinkage.", additiveRegression0.shrinkageTipText());
      assertEquals("The number of iterations to be performed.", additiveRegression0.numIterationsTipText());
      assertEquals("The base classifier to be used.", additiveRegression0.classifierTipText());
      assertEquals(1.0, additiveRegression0.getShrinkage(), 0.01D);
      assertTrue(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertNotNull(capabilities0);
      
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(4, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0.0, additiveRegression0.measureNumIterations(), 0.01D);
      assertEquals(10, additiveRegression0.getNumIterations());
      assertFalse(additiveRegression0.getDebug());
      assertEquals("If set to true, classifier may output additional info to the console.", additiveRegression0.debugTipText());
      assertEquals("Shrinkage rate. Smaller values help prevent overfitting and have a smoothing effect (but increase learning time). Default = 1.0, ie. no shrinkage.", additiveRegression0.shrinkageTipText());
      assertEquals("The number of iterations to be performed.", additiveRegression0.numIterationsTipText());
      assertEquals("The base classifier to be used.", additiveRegression0.classifierTipText());
      assertEquals(1.0, additiveRegression0.getShrinkage(), 0.01D);
      assertTrue(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertNotNull(testInstances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Instances instances0 = testInstances0.generate(".xrff");
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(4, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(4, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("Testdata", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numClasses());
      assertEquals(3, instances0.classIndex());
      assertEquals(20, instances0.size());
      assertEquals(20, instances0.numInstances());
      assertEquals(0.0, additiveRegression0.measureNumIterations(), 0.01D);
      assertEquals(10, additiveRegression0.getNumIterations());
      assertFalse(additiveRegression0.getDebug());
      assertEquals("If set to true, classifier may output additional info to the console.", additiveRegression0.debugTipText());
      assertEquals("Shrinkage rate. Smaller values help prevent overfitting and have a smoothing effect (but increase learning time). Default = 1.0, ie. no shrinkage.", additiveRegression0.shrinkageTipText());
      assertEquals("The number of iterations to be performed.", additiveRegression0.numIterationsTipText());
      assertEquals("The base classifier to be used.", additiveRegression0.classifierTipText());
      assertEquals(1.0, additiveRegression0.getShrinkage(), 0.01D);
      assertTrue(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertNotNull(instances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(4, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(4, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("Testdata", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numClasses());
      assertEquals(3, instances0.classIndex());
      assertEquals(20, instances0.size());
      assertEquals(20, instances0.numInstances());
      assertEquals(0.0, additiveRegression0.measureNumIterations(), 0.01D);
      assertEquals(10, additiveRegression0.getNumIterations());
      assertFalse(additiveRegression0.getDebug());
      assertEquals("If set to true, classifier may output additional info to the console.", additiveRegression0.debugTipText());
      assertEquals("Shrinkage rate. Smaller values help prevent overfitting and have a smoothing effect (but increase learning time). Default = 1.0, ie. no shrinkage.", additiveRegression0.shrinkageTipText());
      assertEquals("The number of iterations to be performed.", additiveRegression0.numIterationsTipText());
      assertEquals("The base classifier to be used.", additiveRegression0.classifierTipText());
      assertEquals(1.0, additiveRegression0.getShrinkage(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertTrue(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertNotNull(evaluation0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      double double0 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(4, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(4, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("Testdata", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numClasses());
      assertEquals(3, instances0.classIndex());
      assertEquals(20, instances0.size());
      assertEquals(20, instances0.numInstances());
      assertEquals(0.0, additiveRegression0.measureNumIterations(), 0.01D);
      assertEquals(10, additiveRegression0.getNumIterations());
      assertFalse(additiveRegression0.getDebug());
      assertEquals("If set to true, classifier may output additional info to the console.", additiveRegression0.debugTipText());
      assertEquals("Shrinkage rate. Smaller values help prevent overfitting and have a smoothing effect (but increase learning time). Default = 1.0, ie. no shrinkage.", additiveRegression0.shrinkageTipText());
      assertEquals("The number of iterations to be performed.", additiveRegression0.numIterationsTipText());
      assertEquals("The base classifier to be used.", additiveRegression0.classifierTipText());
      assertEquals(1.0, additiveRegression0.getShrinkage(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertTrue(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.evaluateModelOnce(DLweka/core/Instance;)V: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertNotNull(instances0);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertNotNull(evaluation0);
      
      double[] doubleArray0 = new double[3];
      int[] intArray0 = new int[5];
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, sparseInstance0.numAttributes());
      assertEquals(0, sparseInstance0.numValues());
      assertEquals(0.0, sparseInstance0.weight(), 0.01D);
      assertNotNull(sparseInstance0);
      assertEquals(6, sparseInstance0.s_numericAfterDecimalPoint);
      
      try {
        evaluation0.evaluateModelOnce(0.0, (Instance) sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
      }
  }

  //Test case number: 21
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.SFMeanEntropyGain()D: I7 Branch 220 IFNE L2437 - false
   * Goal 2. weka.classifiers.Evaluation.SFMeanEntropyGain()D: I13 Branch 221 IFNE L2437 - true
   */

  @Test
  public void test21()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertNotNull(instances0);
      
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertNotNull(evaluation0);
      
      double double0 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double0, 0.01D);
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.getHeader()Lweka/core/Instances;: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertNotNull(instances0);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertNotNull(evaluation0);
      
      Instances instances1 = evaluation0.getHeader();
      assertTrue(instances0.equals((Object)instances1));
      assertTrue(instances1.equals((Object)instances0));
      assertNotSame(instances0, instances1);
      assertNotSame(instances1, instances0);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals(2, instances1.numAttributes());
      assertEquals(0, instances1.size());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01D);
      assertEquals(0, instances1.numInstances());
      assertEquals(1, instances1.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances1.relationName());
      assertTrue(instances1.checkForStringAttributes());
      assertEquals(0, instances1.numClasses());
      assertNotNull(instances1);
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.handleCostOption(Ljava/lang/String;I)Lweka/classifiers/CostMatrix;: I12 Branch 166 IFEQ L1574 - false
   */

  @Test
  public void test23()  throws Throwable  {
      try {
        CostMatrix costMatrix0 = Evaluation.handleCostOption("DfG.|yO", 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
      }
  }

  //Test case number: 24
  /*
   * 12 covered goals:
   * Goal 1. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I144 Branch 23 IFNE L963 - false
   * Goal 2. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I151 Branch 24 IFEQ L963 - true
   * Goal 3. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I221 Branch 27 IFGT L976 - true
   * Goal 4. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I247 Branch 28 IF_ICMPGE L981 - true
   * Goal 5. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I247 Branch 28 IF_ICMPGE L981 - false
   * Goal 6. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I277 Branch 29 IFLE L986 - true
   * Goal 7. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I394 Branch 32 IFEQ L1017 - true
   * Goal 8. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I471 Branch 35 IFEQ L1030 - true
   * Goal 9. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I490 Branch 36 IFEQ L1034 - true
   * Goal 10. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I503 Branch 37 IFNE L1037 - false
   * Goal 11. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I511 Branch 38 IFNE L1038 - false
   * Goal 12. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I514 Branch 354 IFEQ L3599 - true
   */

  @Test
  public void test24()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      assertEquals(0.0, simpleLinearRegression0.getIntercept(), 0.01D);
      assertEquals(0.0, simpleLinearRegression0.getSlope(), 0.01D);
      assertFalse(simpleLinearRegression0.foundUsefulAttribute());
      assertFalse(simpleLinearRegression0.getDebug());
      assertEquals("Learns a simple linear regression model. Picks the attribute that results in the lowest squared error. Missing values are not allowed. Can only deal with numeric attributes.", simpleLinearRegression0.globalInfo());
      assertEquals("If set to true, classifier may output additional info to the console.", simpleLinearRegression0.debugTipText());
      assertEquals(0, simpleLinearRegression0.getAttributeIndex());
      assertNotNull(simpleLinearRegression0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "               ";
      stringArray0[1] = "               ";
      stringArray0[2] = "               ";
      stringArray0[3] = "               ";
      stringArray0[4] = "               ";
      try {
        String string0 = Evaluation.evaluateModel((Classifier) simpleLinearRegression0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.SimpleLinearRegression:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
      }
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.getDiscardPredictions()Z: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertFalse(adaBoostM1_0.getDebug());
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertNotNull(adaBoostM1_0);
      
      Capabilities capabilities0 = adaBoostM1_0.getCapabilities();
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertFalse(adaBoostM1_0.getDebug());
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertTrue(capabilities0.hasDependencies());
      assertNotNull(capabilities0);
      
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(4, testInstances0.getNumAttributes());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertFalse(adaBoostM1_0.getDebug());
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertTrue(capabilities0.hasDependencies());
      assertNotNull(testInstances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Instances instances0 = testInstances0.generate();
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(4, testInstances0.getNumAttributes());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertFalse(adaBoostM1_0.getDebug());
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(4, instances0.numAttributes());
      assertEquals(3, instances0.classIndex());
      assertEquals(4, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertTrue(capabilities0.hasDependencies());
      assertNotNull(instances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(4, testInstances0.getNumAttributes());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertFalse(adaBoostM1_0.getDebug());
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(4, instances0.numAttributes());
      assertEquals(3, instances0.classIndex());
      assertEquals(4, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertTrue(capabilities0.hasDependencies());
      assertNotNull(evaluation0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertFalse(boolean0);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(4, testInstances0.getNumAttributes());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertFalse(adaBoostM1_0.getDebug());
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(4, instances0.numAttributes());
      assertEquals(3, instances0.classIndex());
      assertEquals(4, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertTrue(capabilities0.hasDependencies());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
  }

  //Test case number: 26
  /*
   * 4 covered goals:
   * Goal 1. weka.classifiers.Evaluation.evaluationForSingleInstance([DLweka/core/Instance;Z)D: I25 Branch 174 IFGT L1686 - false
   * Goal 2. weka.classifiers.Evaluation.evaluationForSingleInstance([DLweka/core/Instance;Z)D: I56 Branch 177 IFNONNULL L1691 - true
   * Goal 3. weka.classifiers.Evaluation.updateStatsForClassifier([DLweka/core/Instance;)V: I316 Branch 371 IF_ICMPNE L3764 - false
   * Goal 4. weka.classifiers.Evaluation.updateStatsForClassifier([DLweka/core/Instance;)V: I367 Branch 372 IF_ICMPEQ L3772 - true
   */

  @Test
  public void test26()  throws Throwable  {
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      //  // Unstable assertion: assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      //  // Unstable assertion: assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      //  // Unstable assertion: assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      //  // Unstable assertion: assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      //  // Unstable assertion: assertEquals(1, adaBoostM1_0.getSeed());
      //  // Unstable assertion: assertEquals(10, adaBoostM1_0.getNumIterations());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getUseResampling());
      //  // Unstable assertion: assertEquals(100, adaBoostM1_0.getWeightThreshold());
      //  // Unstable assertion: assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getDebug());
      //  // Unstable assertion: assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      //  // Unstable assertion: assertNotNull(adaBoostM1_0);
      
      Capabilities capabilities0 = adaBoostM1_0.getCapabilities();
      //  // Unstable assertion: assertEquals(1, capabilities0.getMinimumNumberInstances());
      //  // Unstable assertion: assertTrue(capabilities0.hasDependencies());
      //  // Unstable assertion: assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      //  // Unstable assertion: assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      //  // Unstable assertion: assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      //  // Unstable assertion: assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      //  // Unstable assertion: assertEquals(1, adaBoostM1_0.getSeed());
      //  // Unstable assertion: assertEquals(10, adaBoostM1_0.getNumIterations());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getUseResampling());
      //  // Unstable assertion: assertEquals(100, adaBoostM1_0.getWeightThreshold());
      //  // Unstable assertion: assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getDebug());
      //  // Unstable assertion: assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      //  // Unstable assertion: assertNotNull(capabilities0);
      
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      //  // Unstable assertion: assertFalse(capabilities1.equals((Object)capabilities0));
      //  // Unstable assertion: assertFalse(capabilities0.equals((Object)capabilities1));
      //  // Unstable assertion: assertNotSame(capabilities1, capabilities0);
      //  // Unstable assertion: assertNotSame(capabilities0, capabilities1);
      //  // Unstable assertion: assertFalse(capabilities1.hasDependencies());
      //  // Unstable assertion: assertEquals(1, capabilities1.getMinimumNumberInstances());
      //  // Unstable assertion: assertEquals(1, capabilities0.getMinimumNumberInstances());
      //  // Unstable assertion: assertTrue(capabilities0.hasDependencies());
      //  // Unstable assertion: assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      //  // Unstable assertion: assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      //  // Unstable assertion: assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      //  // Unstable assertion: assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      //  // Unstable assertion: assertEquals(1, adaBoostM1_0.getSeed());
      //  // Unstable assertion: assertEquals(10, adaBoostM1_0.getNumIterations());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getUseResampling());
      //  // Unstable assertion: assertEquals(100, adaBoostM1_0.getWeightThreshold());
      //  // Unstable assertion: assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getDebug());
      //  // Unstable assertion: assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      //  // Unstable assertion: assertNotNull(capabilities1);
      
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      //  // Unstable assertion: assertFalse(capabilities1.equals((Object)capabilities0));
      //  // Unstable assertion: assertFalse(capabilities0.equals((Object)capabilities1));
      //  // Unstable assertion: assertNotSame(capabilities1, capabilities0);
      //  // Unstable assertion: assertNotSame(capabilities0, capabilities1);
      //  // Unstable assertion: assertFalse(capabilities1.hasDependencies());
      //  // Unstable assertion: assertEquals(1, capabilities1.getMinimumNumberInstances());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalDate());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelational());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumNumeric());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumRelationalNominalValues());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumNominalValues());
      //  // Unstable assertion: assertEquals(20, testInstances0.getNumInstances());
      //  // Unstable assertion: assertFalse(testInstances0.getNoClass());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumAttributes());
      //  // Unstable assertion: assertEquals(-1, testInstances0.getClassIndex());
      //  // Unstable assertion: assertEquals(4, testInstances0.getNumClasses());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumNominal());
      //  // Unstable assertion: assertEquals(1, testInstances0.getClassType());
      //  // Unstable assertion: assertEquals(" ", testInstances0.getWordSeparators());
      //  // Unstable assertion: assertEquals("Testdata", testInstances0.getRelation());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalNumeric());
      //  // Unstable assertion: assertEquals(1, testInstances0.getSeed());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumDate());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumString());
      //  // Unstable assertion: assertFalse(testInstances0.getMultiInstance());
      //  // Unstable assertion: assertEquals(10, testInstances0.getNumInstancesRelational());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalNominal());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalString());
      //  // Unstable assertion: assertEquals(1, capabilities0.getMinimumNumberInstances());
      //  // Unstable assertion: assertTrue(capabilities0.hasDependencies());
      //  // Unstable assertion: assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      //  // Unstable assertion: assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      //  // Unstable assertion: assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      //  // Unstable assertion: assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      //  // Unstable assertion: assertEquals(1, adaBoostM1_0.getSeed());
      //  // Unstable assertion: assertEquals(10, adaBoostM1_0.getNumIterations());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getUseResampling());
      //  // Unstable assertion: assertEquals(100, adaBoostM1_0.getWeightThreshold());
      //  // Unstable assertion: assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getDebug());
      //  // Unstable assertion: assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      //  // Unstable assertion: assertNotNull(testInstances0);
      //  // Unstable assertion: assertEquals((-1), testInstances0.CLASS_IS_LAST);
      //  // Unstable assertion: assertEquals((-2), testInstances0.NO_CLASS);
      
      Instances instances0 = testInstances0.generate();
      //  // Unstable assertion: assertFalse(capabilities1.equals((Object)capabilities0));
      //  // Unstable assertion: assertFalse(capabilities0.equals((Object)capabilities1));
      //  // Unstable assertion: assertNotSame(capabilities1, capabilities0);
      //  // Unstable assertion: assertNotSame(capabilities0, capabilities1);
      //  // Unstable assertion: assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals(4, instances0.numClasses());
      //  // Unstable assertion: assertEquals(1, instances0.numAttributes());
      //  // Unstable assertion: assertEquals(20, instances0.size());
      //  // Unstable assertion: assertEquals(0, instances0.classIndex());
      //  // Unstable assertion: assertEquals("Testdata", instances0.relationName());
      //  // Unstable assertion: assertFalse(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(20, instances0.numInstances());
      //  // Unstable assertion: assertFalse(capabilities1.hasDependencies());
      //  // Unstable assertion: assertEquals(1, capabilities1.getMinimumNumberInstances());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalDate());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelational());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumNumeric());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumRelationalNominalValues());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumNominalValues());
      //  // Unstable assertion: assertEquals(20, testInstances0.getNumInstances());
      //  // Unstable assertion: assertFalse(testInstances0.getNoClass());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumAttributes());
      //  // Unstable assertion: assertEquals(-1, testInstances0.getClassIndex());
      //  // Unstable assertion: assertEquals(4, testInstances0.getNumClasses());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumNominal());
      //  // Unstable assertion: assertEquals(1, testInstances0.getClassType());
      //  // Unstable assertion: assertEquals(" ", testInstances0.getWordSeparators());
      //  // Unstable assertion: assertEquals("Testdata", testInstances0.getRelation());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalNumeric());
      //  // Unstable assertion: assertEquals(1, testInstances0.getSeed());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumDate());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumString());
      //  // Unstable assertion: assertFalse(testInstances0.getMultiInstance());
      //  // Unstable assertion: assertEquals(10, testInstances0.getNumInstancesRelational());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalNominal());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalString());
      //  // Unstable assertion: assertEquals(1, capabilities0.getMinimumNumberInstances());
      //  // Unstable assertion: assertTrue(capabilities0.hasDependencies());
      //  // Unstable assertion: assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      //  // Unstable assertion: assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      //  // Unstable assertion: assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      //  // Unstable assertion: assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      //  // Unstable assertion: assertEquals(1, adaBoostM1_0.getSeed());
      //  // Unstable assertion: assertEquals(10, adaBoostM1_0.getNumIterations());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getUseResampling());
      //  // Unstable assertion: assertEquals(100, adaBoostM1_0.getWeightThreshold());
      //  // Unstable assertion: assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getDebug());
      //  // Unstable assertion: assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      //  // Unstable assertion: assertNotNull(instances0);
      //  // Unstable assertion: assertEquals((-1), testInstances0.CLASS_IS_LAST);
      //  // Unstable assertion: assertEquals((-2), testInstances0.NO_CLASS);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      //  // Unstable assertion: assertFalse(capabilities1.equals((Object)capabilities0));
      //  // Unstable assertion: assertFalse(capabilities0.equals((Object)capabilities1));
      //  // Unstable assertion: assertNotSame(capabilities1, capabilities0);
      //  // Unstable assertion: assertNotSame(capabilities0, capabilities1);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.correct(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      //  // Unstable assertion: assertFalse(evaluation0.getDiscardPredictions());
      //  // Unstable assertion: assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.kappa(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals(4, instances0.numClasses());
      //  // Unstable assertion: assertEquals(1, instances0.numAttributes());
      //  // Unstable assertion: assertEquals(20, instances0.size());
      //  // Unstable assertion: assertEquals(0, instances0.classIndex());
      //  // Unstable assertion: assertEquals("Testdata", instances0.relationName());
      //  // Unstable assertion: assertFalse(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(20, instances0.numInstances());
      //  // Unstable assertion: assertFalse(capabilities1.hasDependencies());
      //  // Unstable assertion: assertEquals(1, capabilities1.getMinimumNumberInstances());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalDate());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelational());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumNumeric());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumRelationalNominalValues());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumNominalValues());
      //  // Unstable assertion: assertEquals(20, testInstances0.getNumInstances());
      //  // Unstable assertion: assertFalse(testInstances0.getNoClass());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumAttributes());
      //  // Unstable assertion: assertEquals(-1, testInstances0.getClassIndex());
      //  // Unstable assertion: assertEquals(4, testInstances0.getNumClasses());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumNominal());
      //  // Unstable assertion: assertEquals(1, testInstances0.getClassType());
      //  // Unstable assertion: assertEquals(" ", testInstances0.getWordSeparators());
      //  // Unstable assertion: assertEquals("Testdata", testInstances0.getRelation());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalNumeric());
      //  // Unstable assertion: assertEquals(1, testInstances0.getSeed());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumDate());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumString());
      //  // Unstable assertion: assertFalse(testInstances0.getMultiInstance());
      //  // Unstable assertion: assertEquals(10, testInstances0.getNumInstancesRelational());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalNominal());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalString());
      //  // Unstable assertion: assertEquals(1, capabilities0.getMinimumNumberInstances());
      //  // Unstable assertion: assertTrue(capabilities0.hasDependencies());
      //  // Unstable assertion: assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      //  // Unstable assertion: assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      //  // Unstable assertion: assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      //  // Unstable assertion: assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      //  // Unstable assertion: assertEquals(1, adaBoostM1_0.getSeed());
      //  // Unstable assertion: assertEquals(10, adaBoostM1_0.getNumIterations());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getUseResampling());
      //  // Unstable assertion: assertEquals(100, adaBoostM1_0.getWeightThreshold());
      //  // Unstable assertion: assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getDebug());
      //  // Unstable assertion: assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      //  // Unstable assertion: assertNotNull(evaluation0);
      //  // Unstable assertion: assertEquals((-1), testInstances0.CLASS_IS_LAST);
      //  // Unstable assertion: assertEquals((-2), testInstances0.NO_CLASS);
      
      double double0 = evaluation0.avgCost();
      //  // Unstable assertion: assertFalse(capabilities1.equals((Object)capabilities0));
      //  // Unstable assertion: assertFalse(capabilities0.equals((Object)capabilities1));
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      //  // Unstable assertion: assertNotSame(capabilities1, capabilities0);
      //  // Unstable assertion: assertNotSame(capabilities0, capabilities1);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.correct(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      //  // Unstable assertion: assertFalse(evaluation0.getDiscardPredictions());
      //  // Unstable assertion: assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.kappa(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals(4, instances0.numClasses());
      //  // Unstable assertion: assertEquals(1, instances0.numAttributes());
      //  // Unstable assertion: assertEquals(20, instances0.size());
      //  // Unstable assertion: assertEquals(0, instances0.classIndex());
      //  // Unstable assertion: assertEquals("Testdata", instances0.relationName());
      //  // Unstable assertion: assertFalse(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(20, instances0.numInstances());
      //  // Unstable assertion: assertFalse(capabilities1.hasDependencies());
      //  // Unstable assertion: assertEquals(1, capabilities1.getMinimumNumberInstances());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalDate());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelational());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumNumeric());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumRelationalNominalValues());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumNominalValues());
      //  // Unstable assertion: assertEquals(20, testInstances0.getNumInstances());
      //  // Unstable assertion: assertFalse(testInstances0.getNoClass());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumAttributes());
      //  // Unstable assertion: assertEquals(-1, testInstances0.getClassIndex());
      //  // Unstable assertion: assertEquals(4, testInstances0.getNumClasses());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumNominal());
      //  // Unstable assertion: assertEquals(1, testInstances0.getClassType());
      //  // Unstable assertion: assertEquals(" ", testInstances0.getWordSeparators());
      //  // Unstable assertion: assertEquals("Testdata", testInstances0.getRelation());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalNumeric());
      //  // Unstable assertion: assertEquals(1, testInstances0.getSeed());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumDate());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumString());
      //  // Unstable assertion: assertFalse(testInstances0.getMultiInstance());
      //  // Unstable assertion: assertEquals(10, testInstances0.getNumInstancesRelational());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalNominal());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalString());
      //  // Unstable assertion: assertEquals(1, capabilities0.getMinimumNumberInstances());
      //  // Unstable assertion: assertTrue(capabilities0.hasDependencies());
      //  // Unstable assertion: assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      //  // Unstable assertion: assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      //  // Unstable assertion: assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      //  // Unstable assertion: assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      //  // Unstable assertion: assertEquals(1, adaBoostM1_0.getSeed());
      //  // Unstable assertion: assertEquals(10, adaBoostM1_0.getNumIterations());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getUseResampling());
      //  // Unstable assertion: assertEquals(100, adaBoostM1_0.getWeightThreshold());
      //  // Unstable assertion: assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getDebug());
      //  // Unstable assertion: assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      //  // Unstable assertion: assertEquals((-1), testInstances0.CLASS_IS_LAST);
      //  // Unstable assertion: assertEquals((-2), testInstances0.NO_CLASS);
      
      DenseInstance denseInstance0 = (DenseInstance)instances0.lastInstance();
      //  // Unstable assertion: assertFalse(capabilities1.equals((Object)capabilities0));
      //  // Unstable assertion: assertFalse(capabilities0.equals((Object)capabilities1));
      //  // Unstable assertion: assertNotSame(capabilities1, capabilities0);
      //  // Unstable assertion: assertNotSame(capabilities0, capabilities1);
      //  // Unstable assertion: assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals(4, instances0.numClasses());
      //  // Unstable assertion: assertEquals(1, instances0.numAttributes());
      //  // Unstable assertion: assertEquals(20, instances0.size());
      //  // Unstable assertion: assertEquals(0, instances0.classIndex());
      //  // Unstable assertion: assertEquals("Testdata", instances0.relationName());
      //  // Unstable assertion: assertFalse(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(20, instances0.numInstances());
      //  // Unstable assertion: assertFalse(capabilities1.hasDependencies());
      //  // Unstable assertion: assertEquals(1, capabilities1.getMinimumNumberInstances());
      //  // Unstable assertion: assertEquals(1, denseInstance0.numValues());
      //  // Unstable assertion: assertEquals(1.0, denseInstance0.weight(), 0.01D);
      //  // Unstable assertion: assertEquals(4, denseInstance0.numClasses());
      //  // Unstable assertion: assertEquals(0, denseInstance0.classIndex());
      //  // Unstable assertion: assertEquals(1, denseInstance0.numAttributes());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalDate());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelational());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumNumeric());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumRelationalNominalValues());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumNominalValues());
      //  // Unstable assertion: assertEquals(20, testInstances0.getNumInstances());
      //  // Unstable assertion: assertFalse(testInstances0.getNoClass());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumAttributes());
      //  // Unstable assertion: assertEquals(-1, testInstances0.getClassIndex());
      //  // Unstable assertion: assertEquals(4, testInstances0.getNumClasses());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumNominal());
      //  // Unstable assertion: assertEquals(1, testInstances0.getClassType());
      //  // Unstable assertion: assertEquals(" ", testInstances0.getWordSeparators());
      //  // Unstable assertion: assertEquals("Testdata", testInstances0.getRelation());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalNumeric());
      //  // Unstable assertion: assertEquals(1, testInstances0.getSeed());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumDate());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumString());
      //  // Unstable assertion: assertFalse(testInstances0.getMultiInstance());
      //  // Unstable assertion: assertEquals(10, testInstances0.getNumInstancesRelational());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalNominal());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalString());
      //  // Unstable assertion: assertEquals(1, capabilities0.getMinimumNumberInstances());
      //  // Unstable assertion: assertTrue(capabilities0.hasDependencies());
      //  // Unstable assertion: assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      //  // Unstable assertion: assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      //  // Unstable assertion: assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      //  // Unstable assertion: assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      //  // Unstable assertion: assertEquals(1, adaBoostM1_0.getSeed());
      //  // Unstable assertion: assertEquals(10, adaBoostM1_0.getNumIterations());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getUseResampling());
      //  // Unstable assertion: assertEquals(100, adaBoostM1_0.getWeightThreshold());
      //  // Unstable assertion: assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getDebug());
      //  // Unstable assertion: assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      //  // Unstable assertion: assertNotNull(denseInstance0);
      //  // Unstable assertion: assertEquals(6, denseInstance0.s_numericAfterDecimalPoint);
      //  // Unstable assertion: assertEquals((-1), testInstances0.CLASS_IS_LAST);
      //  // Unstable assertion: assertEquals((-2), testInstances0.NO_CLASS);
      
      double[] doubleArray0 = new double[18];
      doubleArray0[3] = Double.NaN;
      double double1 = evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) denseInstance0, true);
      //  // Unstable assertion: assertFalse(capabilities1.equals((Object)capabilities0));
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertFalse(capabilities0.equals((Object)capabilities1));
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertNotSame(capabilities1, capabilities0);
      //  // Unstable assertion: assertNotSame(capabilities0, capabilities1);
      //  // Unstable assertion: assertEquals(100.0, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(100.0, evaluation0.pctCorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0, evaluation0.SFPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(0.4330127018922193, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.numInstances(), 0.01D);
      //  // Unstable assertion: assertEquals(25.0, evaluation0.sizeOfPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      //  // Unstable assertion: assertEquals(0.375, evaluation0.meanPriorAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.weightedRecall(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.weightedPrecision(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.weightedFalseNegativeRate(), 0.01D);
      //  // Unstable assertion: assertFalse(evaluation0.getDiscardPredictions());
      //  // Unstable assertion: assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.avgCost(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.pctUnclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.weightedFalsePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.errorRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.kappa(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.weightedFMeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.correct(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0, evaluation0.SFMeanPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.pctIncorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.weightedTrueNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.weightedTruePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.unweightedMicroFmeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals(4, instances0.numClasses());
      //  // Unstable assertion: assertEquals(1, instances0.numAttributes());
      //  // Unstable assertion: assertEquals(20, instances0.size());
      //  // Unstable assertion: assertEquals(0, instances0.classIndex());
      //  // Unstable assertion: assertEquals("Testdata", instances0.relationName());
      //  // Unstable assertion: assertFalse(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(20, instances0.numInstances());
      //  // Unstable assertion: assertFalse(capabilities1.hasDependencies());
      //  // Unstable assertion: assertEquals(1, capabilities1.getMinimumNumberInstances());
      //  // Unstable assertion: assertEquals(1, denseInstance0.numValues());
      //  // Unstable assertion: assertEquals(1.0, denseInstance0.weight(), 0.01D);
      //  // Unstable assertion: assertEquals(4, denseInstance0.numClasses());
      //  // Unstable assertion: assertEquals(0, denseInstance0.classIndex());
      //  // Unstable assertion: assertEquals(1, denseInstance0.numAttributes());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalDate());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelational());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumNumeric());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumRelationalNominalValues());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumNominalValues());
      //  // Unstable assertion: assertEquals(20, testInstances0.getNumInstances());
      //  // Unstable assertion: assertFalse(testInstances0.getNoClass());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumAttributes());
      //  // Unstable assertion: assertEquals(-1, testInstances0.getClassIndex());
      //  // Unstable assertion: assertEquals(4, testInstances0.getNumClasses());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumNominal());
      //  // Unstable assertion: assertEquals(1, testInstances0.getClassType());
      //  // Unstable assertion: assertEquals(" ", testInstances0.getWordSeparators());
      //  // Unstable assertion: assertEquals("Testdata", testInstances0.getRelation());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalNumeric());
      //  // Unstable assertion: assertEquals(1, testInstances0.getSeed());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumDate());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumString());
      //  // Unstable assertion: assertFalse(testInstances0.getMultiInstance());
      //  // Unstable assertion: assertEquals(10, testInstances0.getNumInstancesRelational());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalNominal());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalString());
      //  // Unstable assertion: assertEquals(1, capabilities0.getMinimumNumberInstances());
      //  // Unstable assertion: assertTrue(capabilities0.hasDependencies());
      //  // Unstable assertion: assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      //  // Unstable assertion: assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      //  // Unstable assertion: assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      //  // Unstable assertion: assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      //  // Unstable assertion: assertEquals(1, adaBoostM1_0.getSeed());
      //  // Unstable assertion: assertEquals(10, adaBoostM1_0.getNumIterations());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getUseResampling());
      //  // Unstable assertion: assertEquals(100, adaBoostM1_0.getWeightThreshold());
      //  // Unstable assertion: assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getDebug());
      //  // Unstable assertion: assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      //  // Unstable assertion: assertEquals(6, denseInstance0.s_numericAfterDecimalPoint);
      //  // Unstable assertion: assertEquals((-1), testInstances0.CLASS_IS_LAST);
      //  // Unstable assertion: assertEquals((-2), testInstances0.NO_CLASS);
      
      double double2 = evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) denseInstance0);
      //  // Unstable assertion: assertFalse(capabilities1.equals((Object)capabilities0));
      //  // Unstable assertion: assertTrue(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(capabilities0.equals((Object)capabilities1));
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertNotSame(capabilities1, capabilities0);
      //  // Unstable assertion: assertNotSame(capabilities0, capabilities1);
      //  // Unstable assertion: assertEquals(100.0, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(100.0, evaluation0.pctCorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(0.4330127018922193, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0, evaluation0.correct(), 0.01D);
      //  // Unstable assertion: assertEquals(25.0, evaluation0.sizeOfPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      //  // Unstable assertion: assertEquals(0.375, evaluation0.meanPriorAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.weightedRecall(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.weightedPrecision(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.weightedFalseNegativeRate(), 0.01D);
      //  // Unstable assertion: assertFalse(evaluation0.getDiscardPredictions());
      //  // Unstable assertion: assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.avgCost(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.pctUnclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(4.0, evaluation0.SFPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.weightedFalsePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.errorRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.kappa(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.weightedFMeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0, evaluation0.SFMeanPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0, evaluation0.numInstances(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.pctIncorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.weightedTrueNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.weightedTruePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.unweightedMicroFmeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals(4, instances0.numClasses());
      //  // Unstable assertion: assertEquals(1, instances0.numAttributes());
      //  // Unstable assertion: assertEquals(20, instances0.size());
      //  // Unstable assertion: assertEquals(0, instances0.classIndex());
      //  // Unstable assertion: assertEquals("Testdata", instances0.relationName());
      //  // Unstable assertion: assertFalse(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(20, instances0.numInstances());
      //  // Unstable assertion: assertFalse(capabilities1.hasDependencies());
      //  // Unstable assertion: assertEquals(1, capabilities1.getMinimumNumberInstances());
      //  // Unstable assertion: assertEquals(1, denseInstance0.numValues());
      //  // Unstable assertion: assertEquals(1.0, denseInstance0.weight(), 0.01D);
      //  // Unstable assertion: assertEquals(4, denseInstance0.numClasses());
      //  // Unstable assertion: assertEquals(0, denseInstance0.classIndex());
      //  // Unstable assertion: assertEquals(1, denseInstance0.numAttributes());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalDate());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelational());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumNumeric());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumRelationalNominalValues());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumNominalValues());
      //  // Unstable assertion: assertEquals(20, testInstances0.getNumInstances());
      //  // Unstable assertion: assertFalse(testInstances0.getNoClass());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumAttributes());
      //  // Unstable assertion: assertEquals(-1, testInstances0.getClassIndex());
      //  // Unstable assertion: assertEquals(4, testInstances0.getNumClasses());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumNominal());
      //  // Unstable assertion: assertEquals(1, testInstances0.getClassType());
      //  // Unstable assertion: assertEquals(" ", testInstances0.getWordSeparators());
      //  // Unstable assertion: assertEquals("Testdata", testInstances0.getRelation());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalNumeric());
      //  // Unstable assertion: assertEquals(1, testInstances0.getSeed());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumDate());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumString());
      //  // Unstable assertion: assertFalse(testInstances0.getMultiInstance());
      //  // Unstable assertion: assertEquals(10, testInstances0.getNumInstancesRelational());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalNominal());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalString());
      //  // Unstable assertion: assertEquals(1, capabilities0.getMinimumNumberInstances());
      //  // Unstable assertion: assertTrue(capabilities0.hasDependencies());
      //  // Unstable assertion: assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      //  // Unstable assertion: assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      //  // Unstable assertion: assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      //  // Unstable assertion: assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      //  // Unstable assertion: assertEquals(1, adaBoostM1_0.getSeed());
      //  // Unstable assertion: assertEquals(10, adaBoostM1_0.getNumIterations());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getUseResampling());
      //  // Unstable assertion: assertEquals(100, adaBoostM1_0.getWeightThreshold());
      //  // Unstable assertion: assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      //  // Unstable assertion: assertFalse(adaBoostM1_0.getDebug());
      //  // Unstable assertion: assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      //  // Unstable assertion: assertEquals(6, denseInstance0.s_numericAfterDecimalPoint);
      //  // Unstable assertion: assertEquals((-1), testInstances0.CLASS_IS_LAST);
      //  // Unstable assertion: assertEquals((-2), testInstances0.NO_CLASS);
  }

  //Test case number: 27
  /*
   * 5 covered goals:
   * Goal 1. weka.classifiers.Evaluation.evaluationForSingleInstance([DLweka/core/Instance;Z)D: I99 Branch 178 IFEQ L1699 - false
   * Goal 2. weka.classifiers.Evaluation.evaluationForSingleInstance([DLweka/core/Instance;Z)D: I105 Branch 179 IFNE L1699 - false
   * Goal 3. weka.classifiers.Evaluation.evaluationForSingleInstance([DLweka/core/Instance;Z)D: I113 Branch 180 IFNONNULL L1700 - false
   * Goal 4. weka.classifiers.Evaluation.makeDistribution(D)[D: I25 Branch 361 IFEQ L3678 - true
   * Goal 5. weka.classifiers.Evaluation.updateStatsForPredictor(DLweka/core/Instance;)V: I24 Branch 380 IFEQ L3848 - true
   */

  @Test
  public void test27()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      assertEquals("Learns a simple linear regression model. Picks the attribute that results in the lowest squared error. Missing values are not allowed. Can only deal with numeric attributes.", simpleLinearRegression0.globalInfo());
      assertEquals(0, simpleLinearRegression0.getAttributeIndex());
      assertFalse(simpleLinearRegression0.getDebug());
      assertFalse(simpleLinearRegression0.foundUsefulAttribute());
      assertEquals("If set to true, classifier may output additional info to the console.", simpleLinearRegression0.debugTipText());
      assertEquals(0.0, simpleLinearRegression0.getSlope(), 0.01D);
      assertEquals(0.0, simpleLinearRegression0.getIntercept(), 0.01D);
      assertNotNull(simpleLinearRegression0);
      
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals("Learns a simple linear regression model. Picks the attribute that results in the lowest squared error. Missing values are not allowed. Can only deal with numeric attributes.", simpleLinearRegression0.globalInfo());
      assertEquals(0, simpleLinearRegression0.getAttributeIndex());
      assertFalse(simpleLinearRegression0.getDebug());
      assertFalse(simpleLinearRegression0.foundUsefulAttribute());
      assertEquals("If set to true, classifier may output additional info to the console.", simpleLinearRegression0.debugTipText());
      assertEquals(0.0, simpleLinearRegression0.getSlope(), 0.01D);
      assertEquals(0.0, simpleLinearRegression0.getIntercept(), 0.01D);
      assertNotNull(capabilities0);
      
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals("Learns a simple linear regression model. Picks the attribute that results in the lowest squared error. Missing values are not allowed. Can only deal with numeric attributes.", simpleLinearRegression0.globalInfo());
      assertEquals(0, simpleLinearRegression0.getAttributeIndex());
      assertFalse(simpleLinearRegression0.getDebug());
      assertFalse(simpleLinearRegression0.foundUsefulAttribute());
      assertEquals("If set to true, classifier may output additional info to the console.", simpleLinearRegression0.debugTipText());
      assertEquals(0.0, simpleLinearRegression0.getSlope(), 0.01D);
      assertEquals(0.0, simpleLinearRegression0.getIntercept(), 0.01D);
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(3, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertNotNull(testInstances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Instances instances0 = testInstances0.generate();
      assertEquals(3, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numClasses());
      assertEquals(2, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals("Learns a simple linear regression model. Picks the attribute that results in the lowest squared error. Missing values are not allowed. Can only deal with numeric attributes.", simpleLinearRegression0.globalInfo());
      assertEquals(0, simpleLinearRegression0.getAttributeIndex());
      assertFalse(simpleLinearRegression0.getDebug());
      assertFalse(simpleLinearRegression0.foundUsefulAttribute());
      assertEquals("If set to true, classifier may output additional info to the console.", simpleLinearRegression0.debugTipText());
      assertEquals(0.0, simpleLinearRegression0.getSlope(), 0.01D);
      assertEquals(0.0, simpleLinearRegression0.getIntercept(), 0.01D);
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(3, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertNotNull(instances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(3, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numClasses());
      assertEquals(2, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals("Learns a simple linear regression model. Picks the attribute that results in the lowest squared error. Missing values are not allowed. Can only deal with numeric attributes.", simpleLinearRegression0.globalInfo());
      assertEquals(0, simpleLinearRegression0.getAttributeIndex());
      assertFalse(simpleLinearRegression0.getDebug());
      assertFalse(simpleLinearRegression0.foundUsefulAttribute());
      assertEquals("If set to true, classifier may output additional info to the console.", simpleLinearRegression0.debugTipText());
      assertEquals(0.0, simpleLinearRegression0.getSlope(), 0.01D);
      assertEquals(0.0, simpleLinearRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(3, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertNotNull(evaluation0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      DenseInstance denseInstance0 = (DenseInstance)instances0.lastInstance();
      assertEquals(3, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numClasses());
      assertEquals(2, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals("Learns a simple linear regression model. Picks the attribute that results in the lowest squared error. Missing values are not allowed. Can only deal with numeric attributes.", simpleLinearRegression0.globalInfo());
      assertEquals(0, simpleLinearRegression0.getAttributeIndex());
      assertFalse(simpleLinearRegression0.getDebug());
      assertFalse(simpleLinearRegression0.foundUsefulAttribute());
      assertEquals("If set to true, classifier may output additional info to the console.", simpleLinearRegression0.debugTipText());
      assertEquals(0.0, simpleLinearRegression0.getSlope(), 0.01D);
      assertEquals(0.0, simpleLinearRegression0.getIntercept(), 0.01D);
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(3, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, denseInstance0.classIndex());
      assertEquals(3, denseInstance0.numAttributes());
      assertEquals(1, denseInstance0.numClasses());
      assertEquals(3, denseInstance0.numValues());
      assertEquals(1.0, denseInstance0.weight(), 0.01D);
      assertNotNull(denseInstance0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals(6, denseInstance0.s_numericAfterDecimalPoint);
      
      double[] doubleArray0 = new double[1];
      double double0 = evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) denseInstance0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(3, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numClasses());
      assertEquals(2, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals("Learns a simple linear regression model. Picks the attribute that results in the lowest squared error. Missing values are not allowed. Can only deal with numeric attributes.", simpleLinearRegression0.globalInfo());
      assertEquals(0, simpleLinearRegression0.getAttributeIndex());
      assertFalse(simpleLinearRegression0.getDebug());
      assertFalse(simpleLinearRegression0.foundUsefulAttribute());
      assertEquals("If set to true, classifier may output additional info to the console.", simpleLinearRegression0.debugTipText());
      assertEquals(0.0, simpleLinearRegression0.getSlope(), 0.01D);
      assertEquals(0.0, simpleLinearRegression0.getIntercept(), 0.01D);
      assertEquals(0.0, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.43750000353902574, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(39.999998995236, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.17499999701976776, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(39.999998995236, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.17499999701976776, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.43750000353902574, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.17499999701976776, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(3, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, denseInstance0.classIndex());
      assertEquals(3, denseInstance0.numAttributes());
      assertEquals(1, denseInstance0.numClasses());
      assertEquals(3, denseInstance0.numValues());
      assertEquals(1.0, denseInstance0.weight(), 0.01D);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals(6, denseInstance0.s_numericAfterDecimalPoint);
  }

  //Test case number: 28
  /*
   * 4 covered goals:
   * Goal 1. weka.classifiers.Evaluation.evaluationForSingleInstance([DLweka/core/Instance;Z)D: I7 Branch 173 IFEQ L1684 - true
   * Goal 2. weka.classifiers.Evaluation.evaluationForSingleInstance([DLweka/core/Instance;Z)D: I99 Branch 178 IFEQ L1699 - true
   * Goal 3. weka.classifiers.Evaluation.updateStatsForPredictor(DLweka/core/Instance;)V: I7 Branch 379 IFNE L3844 - false
   * Goal 4. weka.classifiers.Evaluation.updateStatsForPredictor(DLweka/core/Instance;)V: I24 Branch 380 IFEQ L3848 - false
   */

  @Test
  public void test28()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      //  // Unstable assertion: assertFalse(simpleLinearRegression0.foundUsefulAttribute());
      //  // Unstable assertion: assertEquals(0, simpleLinearRegression0.getAttributeIndex());
      //  // Unstable assertion: assertEquals("If set to true, classifier may output additional info to the console.", simpleLinearRegression0.debugTipText());
      //  // Unstable assertion: assertEquals(0.0, simpleLinearRegression0.getIntercept(), 0.01D);
      //  // Unstable assertion: assertEquals("Learns a simple linear regression model. Picks the attribute that results in the lowest squared error. Missing values are not allowed. Can only deal with numeric attributes.", simpleLinearRegression0.globalInfo());
      //  // Unstable assertion: assertEquals(0.0, simpleLinearRegression0.getSlope(), 0.01D);
      //  // Unstable assertion: assertFalse(simpleLinearRegression0.getDebug());
      //  // Unstable assertion: assertNotNull(simpleLinearRegression0);
      
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      //  // Unstable assertion: assertFalse(capabilities0.hasDependencies());
      //  // Unstable assertion: assertEquals(1, capabilities0.getMinimumNumberInstances());
      //  // Unstable assertion: assertFalse(simpleLinearRegression0.foundUsefulAttribute());
      //  // Unstable assertion: assertEquals(0, simpleLinearRegression0.getAttributeIndex());
      //  // Unstable assertion: assertEquals("If set to true, classifier may output additional info to the console.", simpleLinearRegression0.debugTipText());
      //  // Unstable assertion: assertEquals(0.0, simpleLinearRegression0.getIntercept(), 0.01D);
      //  // Unstable assertion: assertEquals("Learns a simple linear regression model. Picks the attribute that results in the lowest squared error. Missing values are not allowed. Can only deal with numeric attributes.", simpleLinearRegression0.globalInfo());
      //  // Unstable assertion: assertEquals(0.0, simpleLinearRegression0.getSlope(), 0.01D);
      //  // Unstable assertion: assertFalse(simpleLinearRegression0.getDebug());
      //  // Unstable assertion: assertNotNull(capabilities0);
      
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      //  // Unstable assertion: assertEquals(" ", testInstances0.getWordSeparators());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalString());
      //  // Unstable assertion: assertEquals(1, testInstances0.getSeed());
      //  // Unstable assertion: assertEquals(-1, testInstances0.getClassIndex());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumString());
      //  // Unstable assertion: assertFalse(testInstances0.getMultiInstance());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalNominal());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumRelationalNominalValues());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalNumeric());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumClasses());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumNumeric());
      //  // Unstable assertion: assertEquals(20, testInstances0.getNumInstances());
      //  // Unstable assertion: assertFalse(testInstances0.getNoClass());
      //  // Unstable assertion: assertEquals(10, testInstances0.getNumInstancesRelational());
      //  // Unstable assertion: assertEquals(3, testInstances0.getNumAttributes());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumDate());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumNominal());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumNominalValues());
      //  // Unstable assertion: assertEquals(0, testInstances0.getClassType());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelational());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalDate());
      //  // Unstable assertion: assertEquals("Testdata", testInstances0.getRelation());
      //  // Unstable assertion: assertFalse(capabilities0.hasDependencies());
      //  // Unstable assertion: assertEquals(1, capabilities0.getMinimumNumberInstances());
      //  // Unstable assertion: assertFalse(simpleLinearRegression0.foundUsefulAttribute());
      //  // Unstable assertion: assertEquals(0, simpleLinearRegression0.getAttributeIndex());
      //  // Unstable assertion: assertEquals("If set to true, classifier may output additional info to the console.", simpleLinearRegression0.debugTipText());
      //  // Unstable assertion: assertEquals(0.0, simpleLinearRegression0.getIntercept(), 0.01D);
      //  // Unstable assertion: assertEquals("Learns a simple linear regression model. Picks the attribute that results in the lowest squared error. Missing values are not allowed. Can only deal with numeric attributes.", simpleLinearRegression0.globalInfo());
      //  // Unstable assertion: assertEquals(0.0, simpleLinearRegression0.getSlope(), 0.01D);
      //  // Unstable assertion: assertFalse(simpleLinearRegression0.getDebug());
      //  // Unstable assertion: assertNotNull(testInstances0);
      //  // Unstable assertion: assertEquals((-2), testInstances0.NO_CLASS);
      //  // Unstable assertion: assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Instances instances0 = testInstances0.generate();
      //  // Unstable assertion: assertEquals(20, instances0.numInstances());
      //  // Unstable assertion: assertEquals("Testdata", instances0.relationName());
      //  // Unstable assertion: assertFalse(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(20, instances0.size());
      //  // Unstable assertion: assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals(3, instances0.numAttributes());
      //  // Unstable assertion: assertEquals(1, instances0.numClasses());
      //  // Unstable assertion: assertEquals(2, instances0.classIndex());
      //  // Unstable assertion: assertEquals(" ", testInstances0.getWordSeparators());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalString());
      //  // Unstable assertion: assertEquals(1, testInstances0.getSeed());
      //  // Unstable assertion: assertEquals(-1, testInstances0.getClassIndex());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumString());
      //  // Unstable assertion: assertFalse(testInstances0.getMultiInstance());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalNominal());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumRelationalNominalValues());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalNumeric());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumClasses());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumNumeric());
      //  // Unstable assertion: assertEquals(20, testInstances0.getNumInstances());
      //  // Unstable assertion: assertFalse(testInstances0.getNoClass());
      //  // Unstable assertion: assertEquals(10, testInstances0.getNumInstancesRelational());
      //  // Unstable assertion: assertEquals(3, testInstances0.getNumAttributes());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumDate());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumNominal());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumNominalValues());
      //  // Unstable assertion: assertEquals(0, testInstances0.getClassType());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelational());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalDate());
      //  // Unstable assertion: assertEquals("Testdata", testInstances0.getRelation());
      //  // Unstable assertion: assertFalse(capabilities0.hasDependencies());
      //  // Unstable assertion: assertEquals(1, capabilities0.getMinimumNumberInstances());
      //  // Unstable assertion: assertFalse(simpleLinearRegression0.foundUsefulAttribute());
      //  // Unstable assertion: assertEquals(0, simpleLinearRegression0.getAttributeIndex());
      //  // Unstable assertion: assertEquals("If set to true, classifier may output additional info to the console.", simpleLinearRegression0.debugTipText());
      //  // Unstable assertion: assertEquals(0.0, simpleLinearRegression0.getIntercept(), 0.01D);
      //  // Unstable assertion: assertEquals("Learns a simple linear regression model. Picks the attribute that results in the lowest squared error. Missing values are not allowed. Can only deal with numeric attributes.", simpleLinearRegression0.globalInfo());
      //  // Unstable assertion: assertEquals(0.0, simpleLinearRegression0.getSlope(), 0.01D);
      //  // Unstable assertion: assertFalse(simpleLinearRegression0.getDebug());
      //  // Unstable assertion: assertNotNull(instances0);
      //  // Unstable assertion: assertEquals((-2), testInstances0.NO_CLASS);
      //  // Unstable assertion: assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      //  // Unstable assertion: assertEquals(20, instances0.numInstances());
      //  // Unstable assertion: assertEquals("Testdata", instances0.relationName());
      //  // Unstable assertion: assertFalse(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(20, instances0.size());
      //  // Unstable assertion: assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals(3, instances0.numAttributes());
      //  // Unstable assertion: assertEquals(1, instances0.numClasses());
      //  // Unstable assertion: assertEquals(2, instances0.classIndex());
      //  // Unstable assertion: assertEquals(" ", testInstances0.getWordSeparators());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalString());
      //  // Unstable assertion: assertEquals(1, testInstances0.getSeed());
      //  // Unstable assertion: assertEquals(-1, testInstances0.getClassIndex());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumString());
      //  // Unstable assertion: assertFalse(testInstances0.getMultiInstance());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalNominal());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumRelationalNominalValues());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalNumeric());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumClasses());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumNumeric());
      //  // Unstable assertion: assertEquals(20, testInstances0.getNumInstances());
      //  // Unstable assertion: assertFalse(testInstances0.getNoClass());
      //  // Unstable assertion: assertEquals(10, testInstances0.getNumInstancesRelational());
      //  // Unstable assertion: assertEquals(3, testInstances0.getNumAttributes());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumDate());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumNominal());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumNominalValues());
      //  // Unstable assertion: assertEquals(0, testInstances0.getClassType());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelational());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalDate());
      //  // Unstable assertion: assertEquals("Testdata", testInstances0.getRelation());
      //  // Unstable assertion: assertFalse(capabilities0.hasDependencies());
      //  // Unstable assertion: assertEquals(1, capabilities0.getMinimumNumberInstances());
      //  // Unstable assertion: assertFalse(simpleLinearRegression0.foundUsefulAttribute());
      //  // Unstable assertion: assertEquals(0, simpleLinearRegression0.getAttributeIndex());
      //  // Unstable assertion: assertEquals("If set to true, classifier may output additional info to the console.", simpleLinearRegression0.debugTipText());
      //  // Unstable assertion: assertEquals(0.0, simpleLinearRegression0.getIntercept(), 0.01D);
      //  // Unstable assertion: assertEquals("Learns a simple linear regression model. Picks the attribute that results in the lowest squared error. Missing values are not allowed. Can only deal with numeric attributes.", simpleLinearRegression0.globalInfo());
      //  // Unstable assertion: assertEquals(0.0, simpleLinearRegression0.getSlope(), 0.01D);
      //  // Unstable assertion: assertFalse(simpleLinearRegression0.getDebug());
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      //  // Unstable assertion: assertFalse(evaluation0.getDiscardPredictions());
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.correct(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      //  // Unstable assertion: assertNotNull(evaluation0);
      //  // Unstable assertion: assertEquals((-2), testInstances0.NO_CLASS);
      //  // Unstable assertion: assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      double double0 = evaluation0.rootMeanSquaredError();
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      //  // Unstable assertion: assertEquals(20, instances0.numInstances());
      //  // Unstable assertion: assertEquals("Testdata", instances0.relationName());
      //  // Unstable assertion: assertFalse(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(20, instances0.size());
      //  // Unstable assertion: assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals(3, instances0.numAttributes());
      //  // Unstable assertion: assertEquals(1, instances0.numClasses());
      //  // Unstable assertion: assertEquals(2, instances0.classIndex());
      //  // Unstable assertion: assertEquals(" ", testInstances0.getWordSeparators());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalString());
      //  // Unstable assertion: assertEquals(1, testInstances0.getSeed());
      //  // Unstable assertion: assertEquals(-1, testInstances0.getClassIndex());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumString());
      //  // Unstable assertion: assertFalse(testInstances0.getMultiInstance());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalNominal());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumRelationalNominalValues());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalNumeric());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumClasses());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumNumeric());
      //  // Unstable assertion: assertEquals(20, testInstances0.getNumInstances());
      //  // Unstable assertion: assertFalse(testInstances0.getNoClass());
      //  // Unstable assertion: assertEquals(10, testInstances0.getNumInstancesRelational());
      //  // Unstable assertion: assertEquals(3, testInstances0.getNumAttributes());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumDate());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumNominal());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumNominalValues());
      //  // Unstable assertion: assertEquals(0, testInstances0.getClassType());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelational());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalDate());
      //  // Unstable assertion: assertEquals("Testdata", testInstances0.getRelation());
      //  // Unstable assertion: assertFalse(capabilities0.hasDependencies());
      //  // Unstable assertion: assertEquals(1, capabilities0.getMinimumNumberInstances());
      //  // Unstable assertion: assertFalse(simpleLinearRegression0.foundUsefulAttribute());
      //  // Unstable assertion: assertEquals(0, simpleLinearRegression0.getAttributeIndex());
      //  // Unstable assertion: assertEquals("If set to true, classifier may output additional info to the console.", simpleLinearRegression0.debugTipText());
      //  // Unstable assertion: assertEquals(0.0, simpleLinearRegression0.getIntercept(), 0.01D);
      //  // Unstable assertion: assertEquals("Learns a simple linear regression model. Picks the attribute that results in the lowest squared error. Missing values are not allowed. Can only deal with numeric attributes.", simpleLinearRegression0.globalInfo());
      //  // Unstable assertion: assertEquals(0.0, simpleLinearRegression0.getSlope(), 0.01D);
      //  // Unstable assertion: assertFalse(simpleLinearRegression0.getDebug());
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      //  // Unstable assertion: assertFalse(evaluation0.getDiscardPredictions());
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.correct(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      //  // Unstable assertion: assertEquals((-2), testInstances0.NO_CLASS);
      //  // Unstable assertion: assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      DenseInstance denseInstance0 = (DenseInstance)instances0.lastInstance();
      //  // Unstable assertion: assertEquals(20, instances0.numInstances());
      //  // Unstable assertion: assertEquals("Testdata", instances0.relationName());
      //  // Unstable assertion: assertFalse(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(20, instances0.size());
      //  // Unstable assertion: assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals(3, instances0.numAttributes());
      //  // Unstable assertion: assertEquals(1, instances0.numClasses());
      //  // Unstable assertion: assertEquals(2, instances0.classIndex());
      //  // Unstable assertion: assertEquals(" ", testInstances0.getWordSeparators());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalString());
      //  // Unstable assertion: assertEquals(1, testInstances0.getSeed());
      //  // Unstable assertion: assertEquals(-1, testInstances0.getClassIndex());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumString());
      //  // Unstable assertion: assertFalse(testInstances0.getMultiInstance());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalNominal());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumRelationalNominalValues());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalNumeric());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumClasses());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumNumeric());
      //  // Unstable assertion: assertEquals(20, testInstances0.getNumInstances());
      //  // Unstable assertion: assertFalse(testInstances0.getNoClass());
      //  // Unstable assertion: assertEquals(10, testInstances0.getNumInstancesRelational());
      //  // Unstable assertion: assertEquals(3, testInstances0.getNumAttributes());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumDate());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumNominal());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumNominalValues());
      //  // Unstable assertion: assertEquals(0, testInstances0.getClassType());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelational());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalDate());
      //  // Unstable assertion: assertEquals("Testdata", testInstances0.getRelation());
      //  // Unstable assertion: assertFalse(capabilities0.hasDependencies());
      //  // Unstable assertion: assertEquals(1, capabilities0.getMinimumNumberInstances());
      //  // Unstable assertion: assertFalse(simpleLinearRegression0.foundUsefulAttribute());
      //  // Unstable assertion: assertEquals(0, simpleLinearRegression0.getAttributeIndex());
      //  // Unstable assertion: assertEquals("If set to true, classifier may output additional info to the console.", simpleLinearRegression0.debugTipText());
      //  // Unstable assertion: assertEquals(0.0, simpleLinearRegression0.getIntercept(), 0.01D);
      //  // Unstable assertion: assertEquals("Learns a simple linear regression model. Picks the attribute that results in the lowest squared error. Missing values are not allowed. Can only deal with numeric attributes.", simpleLinearRegression0.globalInfo());
      //  // Unstable assertion: assertEquals(0.0, simpleLinearRegression0.getSlope(), 0.01D);
      //  // Unstable assertion: assertFalse(simpleLinearRegression0.getDebug());
      //  // Unstable assertion: assertEquals(3, denseInstance0.numValues());
      //  // Unstable assertion: assertEquals(1.0, denseInstance0.weight(), 0.01D);
      //  // Unstable assertion: assertEquals(1, denseInstance0.numClasses());
      //  // Unstable assertion: assertEquals(2, denseInstance0.classIndex());
      //  // Unstable assertion: assertEquals(3, denseInstance0.numAttributes());
      //  // Unstable assertion: assertNotNull(denseInstance0);
      //  // Unstable assertion: assertEquals((-2), testInstances0.NO_CLASS);
      //  // Unstable assertion: assertEquals((-1), testInstances0.CLASS_IS_LAST);
      //  // Unstable assertion: assertEquals(6, denseInstance0.s_numericAfterDecimalPoint);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      double double1 = evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) denseInstance0, false);
      //  // Unstable assertion: assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertEquals(20, instances0.numInstances());
      //  // Unstable assertion: assertEquals("Testdata", instances0.relationName());
      //  // Unstable assertion: assertFalse(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(20, instances0.size());
      //  // Unstable assertion: assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals(3, instances0.numAttributes());
      //  // Unstable assertion: assertEquals(1, instances0.numClasses());
      //  // Unstable assertion: assertEquals(2, instances0.classIndex());
      //  // Unstable assertion: assertEquals(" ", testInstances0.getWordSeparators());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalString());
      //  // Unstable assertion: assertEquals(1, testInstances0.getSeed());
      //  // Unstable assertion: assertEquals(-1, testInstances0.getClassIndex());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumString());
      //  // Unstable assertion: assertFalse(testInstances0.getMultiInstance());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalNominal());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumRelationalNominalValues());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalNumeric());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumClasses());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumNumeric());
      //  // Unstable assertion: assertEquals(20, testInstances0.getNumInstances());
      //  // Unstable assertion: assertFalse(testInstances0.getNoClass());
      //  // Unstable assertion: assertEquals(10, testInstances0.getNumInstancesRelational());
      //  // Unstable assertion: assertEquals(3, testInstances0.getNumAttributes());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumDate());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumNominal());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumNominalValues());
      //  // Unstable assertion: assertEquals(0, testInstances0.getClassType());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelational());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalDate());
      //  // Unstable assertion: assertEquals("Testdata", testInstances0.getRelation());
      //  // Unstable assertion: assertFalse(capabilities0.hasDependencies());
      //  // Unstable assertion: assertEquals(1, capabilities0.getMinimumNumberInstances());
      //  // Unstable assertion: assertFalse(simpleLinearRegression0.foundUsefulAttribute());
      //  // Unstable assertion: assertEquals(0, simpleLinearRegression0.getAttributeIndex());
      //  // Unstable assertion: assertEquals("If set to true, classifier may output additional info to the console.", simpleLinearRegression0.debugTipText());
      //  // Unstable assertion: assertEquals(0.0, simpleLinearRegression0.getIntercept(), 0.01D);
      //  // Unstable assertion: assertEquals("Learns a simple linear regression model. Picks the attribute that results in the lowest squared error. Missing values are not allowed. Can only deal with numeric attributes.", simpleLinearRegression0.globalInfo());
      //  // Unstable assertion: assertEquals(0.0, simpleLinearRegression0.getSlope(), 0.01D);
      //  // Unstable assertion: assertFalse(simpleLinearRegression0.getDebug());
      //  // Unstable assertion: assertEquals(3, denseInstance0.numValues());
      //  // Unstable assertion: assertEquals(1.0, denseInstance0.weight(), 0.01D);
      //  // Unstable assertion: assertEquals(1, denseInstance0.numClasses());
      //  // Unstable assertion: assertEquals(2, denseInstance0.classIndex());
      //  // Unstable assertion: assertEquals(3, denseInstance0.numAttributes());
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      //  // Unstable assertion: assertFalse(evaluation0.getDiscardPredictions());
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.numInstances(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(100.0, evaluation0.pctUnclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.correct(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.pctIncorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.sizeOfPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFMeanPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.meanPriorAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.unclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.avgCost(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.pctCorrect(), 0.01D);
      //  // Unstable assertion: assertEquals((-2), testInstances0.NO_CLASS);
      //  // Unstable assertion: assertEquals((-1), testInstances0.CLASS_IS_LAST);
      //  // Unstable assertion: assertEquals(6, denseInstance0.s_numericAfterDecimalPoint);
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.wekaStaticWrapper(Lweka/classifiers/Sourcable;Ljava/lang/String;)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test29()  throws Throwable  {
      J48 j48_0 = new J48();
      assertEquals("The confidence factor used for pruning (smaller values incur more pruning).", j48_0.confidenceFactorTipText());
      assertEquals("Whether MDL correction is used when finding splits on numeric attributes.", j48_0.useMDLcorrectionTipText());
      assertFalse(j48_0.getSaveInstanceData());
      assertEquals(1, j48_0.graphType());
      assertFalse(j48_0.getDebug());
      assertEquals(3, j48_0.getNumFolds());
      assertTrue(j48_0.getSubtreeRaising());
      assertEquals("Whether parts are removed that do not reduce training error.", j48_0.collapseTreeTipText());
      assertEquals("Determines the amount of data used for reduced-error pruning.  One fold is used for pruning, the rest for growing the tree.", j48_0.numFoldsTipText());
      assertEquals("The seed used for randomizing the data when reduced-error pruning is used.", j48_0.seedTipText());
      assertEquals(0.25F, j48_0.getConfidenceFactor(), 0.01F);
      assertEquals("Whether to use binary splits on nominal attributes when building the trees.", j48_0.binarySplitsTipText());
      assertFalse(j48_0.getReducedErrorPruning());
      assertFalse(j48_0.getUseLaplace());
      assertFalse(j48_0.getUnpruned());
      assertEquals(2, j48_0.getMinNumObj());
      assertEquals("Whether to consider the subtree raising operation when pruning.", j48_0.subtreeRaisingTipText());
      assertEquals("Whether pruning is performed.", j48_0.unprunedTipText());
      assertEquals("Whether counts at leaves are smoothed based on Laplace.", j48_0.useLaplaceTipText());
      assertTrue(j48_0.getUseMDLcorrection());
      assertEquals("Whether to save the training data for visualization.", j48_0.saveInstanceDataTipText());
      assertEquals("The minimum number of instances per leaf.", j48_0.minNumObjTipText());
      assertTrue(j48_0.getCollapseTree());
      assertEquals("If set to true, classifier may output additional info to the console.", j48_0.debugTipText());
      assertEquals(1, j48_0.getSeed());
      assertEquals("Whether reduced-error pruning is used instead of C.4.5 pruning.", j48_0.reducedErrorPruningTipText());
      assertFalse(j48_0.getBinarySplits());
      assertNotNull(j48_0);
      
      try {
        String string0 = Evaluation.wekaStaticWrapper((Sourcable) j48_0, "               ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 30
  /*
   * 3 covered goals:
   * Goal 1. weka.classifiers.Evaluation.rootMeanSquaredError()D: root-Branch
   * Goal 2. weka.classifiers.Evaluation.rootMeanPriorSquaredError()D: I7 Branch 201 IFEQ L2266 - true
   * Goal 3. weka.classifiers.Evaluation.rootRelativeSquaredError()D: I7 Branch 202 IFEQ L2279 - true
   */

  @Test
  public void test30()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertNotNull(testInstances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Instances instances0 = testInstances0.generate("+`]hroWs7%\"98jj7C|>");
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertNotNull(instances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertNotNull(evaluation0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      double double0 = evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NaN, double0, 0.01D);
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
  }

  //Test case number: 31
  /*
   * 17 covered goals:
   * Goal 1. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I58 Branch 1 IFEQ L410 - true
   * Goal 2. weka.classifiers.Evaluation.SFEntropyGain()D: I7 Branch 218 IFNE L2423 - false
   * Goal 3. weka.classifiers.Evaluation.SFEntropyGain()D: I13 Branch 219 IFNE L2423 - true
   * Goal 4. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I12 Branch 319 IFNE L3335 - false
   * Goal 5. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I54 Branch 320 IF_ICMPGE L3345 - true
   * Goal 6. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I54 Branch 320 IF_ICMPGE L3345 - false
   * Goal 7. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I68 Branch 321 IFNE L3347 - false
   * Goal 8. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I105 Branch 322 IF_ICMPGE L3353 - true
   * Goal 9. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I105 Branch 322 IF_ICMPGE L3353 - false
   * Goal 10. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I115 Branch 323 IFNE L3354 - false
   * Goal 11. weka.classifiers.Evaluation.addNumericTrainClass(DD)V: I9 Branch 385 IFLE L3931 - true
   * Goal 12. weka.classifiers.Evaluation.addNumericTrainClass(DD)V: I9 Branch 385 IFLE L3931 - false
   * Goal 13. weka.classifiers.Evaluation.addNumericTrainClass(DD)V: I24 Branch 386 IFGE L3934 - true
   * Goal 14. weka.classifiers.Evaluation.addNumericTrainClass(DD)V: I24 Branch 386 IFGE L3934 - false
   * Goal 15. weka.classifiers.Evaluation.addNumericTrainClass(DD)V: I37 Branch 387 IFNONNULL L3939 - true
   * Goal 16. weka.classifiers.Evaluation.addNumericTrainClass(DD)V: I37 Branch 387 IFNONNULL L3939 - false
   * Goal 17. weka.classifiers.Evaluation.addNumericTrainClass(DD)V: I60 Branch 388 IF_ICMPNE L3943 - true
   */

  @Test
  public void test31()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      assertEquals("Learns a simple linear regression model. Picks the attribute that results in the lowest squared error. Missing values are not allowed. Can only deal with numeric attributes.", simpleLinearRegression0.globalInfo());
      assertFalse(simpleLinearRegression0.foundUsefulAttribute());
      assertFalse(simpleLinearRegression0.getDebug());
      assertEquals(0.0, simpleLinearRegression0.getSlope(), 0.01D);
      assertEquals("If set to true, classifier may output additional info to the console.", simpleLinearRegression0.debugTipText());
      assertEquals(0.0, simpleLinearRegression0.getIntercept(), 0.01D);
      assertEquals(0, simpleLinearRegression0.getAttributeIndex());
      assertNotNull(simpleLinearRegression0);
      
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertFalse(capabilities0.hasDependencies());
      assertEquals("Learns a simple linear regression model. Picks the attribute that results in the lowest squared error. Missing values are not allowed. Can only deal with numeric attributes.", simpleLinearRegression0.globalInfo());
      assertFalse(simpleLinearRegression0.foundUsefulAttribute());
      assertFalse(simpleLinearRegression0.getDebug());
      assertEquals(0.0, simpleLinearRegression0.getSlope(), 0.01D);
      assertEquals("If set to true, classifier may output additional info to the console.", simpleLinearRegression0.debugTipText());
      assertEquals(0.0, simpleLinearRegression0.getIntercept(), 0.01D);
      assertEquals(0, simpleLinearRegression0.getAttributeIndex());
      assertNotNull(capabilities0);
      
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      assertEquals(0, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(3, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertFalse(capabilities0.hasDependencies());
      assertEquals("Learns a simple linear regression model. Picks the attribute that results in the lowest squared error. Missing values are not allowed. Can only deal with numeric attributes.", simpleLinearRegression0.globalInfo());
      assertFalse(simpleLinearRegression0.foundUsefulAttribute());
      assertFalse(simpleLinearRegression0.getDebug());
      assertEquals(0.0, simpleLinearRegression0.getSlope(), 0.01D);
      assertEquals("If set to true, classifier may output additional info to the console.", simpleLinearRegression0.debugTipText());
      assertEquals(0.0, simpleLinearRegression0.getIntercept(), 0.01D);
      assertEquals(0, simpleLinearRegression0.getAttributeIndex());
      assertNotNull(testInstances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Instances instances0 = testInstances0.generate();
      assertEquals(0, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(3, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.classIndex());
      assertEquals(20, instances0.size());
      assertEquals(3, instances0.numAttributes());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertFalse(capabilities0.hasDependencies());
      assertEquals("Learns a simple linear regression model. Picks the attribute that results in the lowest squared error. Missing values are not allowed. Can only deal with numeric attributes.", simpleLinearRegression0.globalInfo());
      assertFalse(simpleLinearRegression0.foundUsefulAttribute());
      assertFalse(simpleLinearRegression0.getDebug());
      assertEquals(0.0, simpleLinearRegression0.getSlope(), 0.01D);
      assertEquals("If set to true, classifier may output additional info to the console.", simpleLinearRegression0.debugTipText());
      assertEquals(0.0, simpleLinearRegression0.getIntercept(), 0.01D);
      assertEquals(0, simpleLinearRegression0.getAttributeIndex());
      assertNotNull(instances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(3, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.classIndex());
      assertEquals(20, instances0.size());
      assertEquals(3, instances0.numAttributes());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertFalse(capabilities0.hasDependencies());
      assertEquals("Learns a simple linear regression model. Picks the attribute that results in the lowest squared error. Missing values are not allowed. Can only deal with numeric attributes.", simpleLinearRegression0.globalInfo());
      assertFalse(simpleLinearRegression0.foundUsefulAttribute());
      assertFalse(simpleLinearRegression0.getDebug());
      assertEquals(0.0, simpleLinearRegression0.getSlope(), 0.01D);
      assertEquals("If set to true, classifier may output additional info to the console.", simpleLinearRegression0.debugTipText());
      assertEquals(0.0, simpleLinearRegression0.getIntercept(), 0.01D);
      assertEquals(0, simpleLinearRegression0.getAttributeIndex());
      assertNotNull(evaluation0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      double double0 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(3, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.classIndex());
      assertEquals(20, instances0.size());
      assertEquals(3, instances0.numAttributes());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertFalse(capabilities0.hasDependencies());
      assertEquals("Learns a simple linear regression model. Picks the attribute that results in the lowest squared error. Missing values are not allowed. Can only deal with numeric attributes.", simpleLinearRegression0.globalInfo());
      assertFalse(simpleLinearRegression0.foundUsefulAttribute());
      assertFalse(simpleLinearRegression0.getDebug());
      assertEquals(0.0, simpleLinearRegression0.getSlope(), 0.01D);
      assertEquals("If set to true, classifier may output additional info to the console.", simpleLinearRegression0.debugTipText());
      assertEquals(0.0, simpleLinearRegression0.getIntercept(), 0.01D);
      assertEquals(0, simpleLinearRegression0.getAttributeIndex());
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
  }

  //Test case number: 32
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.handleCostOption(Ljava/lang/String;I)Lweka/classifiers/CostMatrix;: I6 Branch 165 IFNULL L1574 - false
   * Goal 2. weka.classifiers.Evaluation.handleCostOption(Ljava/lang/String;I)Lweka/classifiers/CostMatrix;: I12 Branch 166 IFEQ L1574 - true
   */

  @Test
  public void test32()  throws Throwable  {
      CostMatrix costMatrix0 = Evaluation.handleCostOption("", (-875));
      assertNull(costMatrix0);
  }

  //Test case number: 33
  /*
   * 6 covered goals:
   * Goal 1. weka.classifiers.Evaluation.recall(I)D: root-Branch
   * Goal 2. weka.classifiers.Evaluation.truePositiveRate(I)D: I18 Branch 259 IF_ICMPGE L2810 - true
   * Goal 3. weka.classifiers.Evaluation.truePositiveRate(I)D: I64 Branch 261 IFNE L2816 - false
   * Goal 4. weka.classifiers.Evaluation.precision(I)D: I18 Branch 306 IF_ICMPGE L3200 - true
   * Goal 5. weka.classifiers.Evaluation.precision(I)D: I64 Branch 308 IFNE L3206 - false
   * Goal 6. weka.classifiers.Evaluation.fMeasure(I)D: I22 Branch 312 IFNE L3255 - false
   */

  @Test
  public void test33()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertNotNull(instances0);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertNotNull(evaluation0);
      
      double double0 = evaluation0.fMeasure((-1838));
      assertEquals(0.0, double0, 0.01D);
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
  }

  //Test case number: 34
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I436 Branch 352 IFEQ L3587 - true
   */

  @Test
  public void test34()  throws Throwable  {
      String string0 = Evaluation.makeOptionString((Classifier) null, true);
      assertEquals("\n\nGeneral options:\n\n-h or -help\n\tOutput help information.\n-synopsis or -info\n\tOutput synopsis for classifier (use in conjunction  with -h)\n-t <name of training file>\n\tSets training file.\n-T <name of test file>\n\tSets test file. If missing, a cross-validation will be performed\n\ton the training data.\n-c <class index>\n\tSets index of class attribute (default: last).\n-x <number of folds>\n\tSets number of folds for cross-validation (default: 10).\n-no-cv\n\tDo not perform any cross validation.\n-split-percentage <percentage>\n\tSets the percentage for the train/test set split, e.g., 66.\n-preserve-order\n\tPreserves the order in the percentage split.\n-s <random number seed>\n\tSets random number seed for cross-validation or percentage split\n\t(default: 1).\n-m <name of file with cost matrix>\n\tSets file with cost matrix.\n-l <name of input file>\n\tSets model input file. In case the filename ends with '.xml',\n\ta PMML file is loaded or, if that fails, options are loaded\n\tfrom the XML file.\n-d <name of output file>\n\tSets model output file. In case the filename ends with '.xml',\n\tonly the options are saved to the XML file, not the model.\n-v\n\tOutputs no statistics for training data.\n-o\n\tOutputs statistics only, not the classifier.\n-i\n\tOutputs detailed information-retrieval statistics for each class.\n-k\n\tOutputs information-theoretic statistics.\n-classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"\n\tUses the specified class for generating the classification output.\n\tE.g.: weka.classifiers.evaluation.output.prediction.PlainText\n-p range\n\tOutputs predictions for test instances (or the train instances if\n\tno test instances provided and -no-cv is used), along with the \n\tattributes in the specified range (and nothing else). \n\tUse '-p 0' if no attributes are desired.\n\tDeprecated: use \"-classifications ...\" instead.\n-distribution\n\tOutputs the distribution instead of only the prediction\n\tin conjunction with the '-p' option (only nominal classes).\n\tDeprecated: use \"-classifications ...\" instead.\n-r\n\tOnly outputs cumulative margin distribution.\n-xml filename | xml-string\n\tRetrieves the options from the XML-data instead of the command line.\n-threshold-file <file>\n\tThe file to save the threshold data to.\n\tThe format is determined by the extensions, e.g., '.arff' for ARFF \n\tformat or '.csv' for CSV.\n-threshold-label <label>\n\tThe class label to determine the threshold data for\n\t(default is the first label)\n", string0);
      assertNotNull(string0);
  }

  //Test case number: 35
  /*
   * 18 covered goals:
   * Goal 1. weka.classifiers.Evaluation.avgCost()D: root-Branch
   * Goal 2. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I116 Branch 3 IFNULL L418 - false
   * Goal 3. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I124 Branch 4 IFNE L419 - true
   * Goal 4. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I155 Branch 5 IF_ICMPEQ L422 - false
   * Goal 5. weka.classifiers.Evaluation.SFMeanSchemeEntropy()D: I7 Branch 217 IFNE L2409 - true
   * Goal 6. weka.classifiers.Evaluation.makeDistribution(D)[D: I13 Branch 360 IFEQ L3675 - true
   * Goal 7. weka.classifiers.Evaluation.makeDistribution(D)[D: I25 Branch 361 IFEQ L3678 - false
   * Goal 8. weka.classifiers.Evaluation.updateStatsForClassifier([DLweka/core/Instance;)V: I52 Branch 364 IFLE L3707 - false
   * Goal 9. weka.classifiers.Evaluation.updateStatsForClassifier([DLweka/core/Instance;)V: I135 Branch 367 IFGE L3732 - true
   * Goal 10. weka.classifiers.Evaluation.updateStatsForClassifier([DLweka/core/Instance;)V: I176 Branch 368 IFLT L3741 - false
   * Goal 11. weka.classifiers.Evaluation.updateStatsForClassifier([DLweka/core/Instance;)V: I274 Branch 369 IFLT L3758 - false
   * Goal 12. weka.classifiers.Evaluation.updateStatsForClassifier([DLweka/core/Instance;)V: I284 Branch 370 IFLT L3759 - true
   * Goal 13. weka.classifiers.Evaluation.updateStatsForClassifier([DLweka/core/Instance;)V: I284 Branch 370 IFLT L3759 - false
   * Goal 14. weka.classifiers.Evaluation.updateStatsForClassifier([DLweka/core/Instance;)V: I316 Branch 371 IF_ICMPNE L3764 - true
   * Goal 15. weka.classifiers.Evaluation.updateStatsForClassifier([DLweka/core/Instance;)V: I367 Branch 372 IF_ICMPEQ L3772 - false
   * Goal 16. weka.classifiers.Evaluation.updateMargins([DID)V: I38 Branch 383 IFLE L3882 - false
   * Goal 17. weka.classifiers.Evaluation.updateNumericScores([D[DD)V: I28 Branch 384 IF_ICMPGE L3905 - true
   * Goal 18. weka.classifiers.Evaluation.updateNumericScores([D[DD)V: I28 Branch 384 IF_ICMPGE L3905 - false
   */

  @Test
  public void test35()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumAttributes());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelational());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumClasses());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalNominal());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumRelationalNominalValues());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalNumeric());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumNumeric());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumString());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumDate());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalString());
      //  // Unstable assertion: assertFalse(testInstances0.getMultiInstance());
      //  // Unstable assertion: assertFalse(testInstances0.getNoClass());
      //  // Unstable assertion: assertEquals(-1, testInstances0.getClassIndex());
      //  // Unstable assertion: assertEquals(1, testInstances0.getSeed());
      //  // Unstable assertion: assertEquals(1, testInstances0.getClassType());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumNominal());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalDate());
      //  // Unstable assertion: assertEquals(10, testInstances0.getNumInstancesRelational());
      //  // Unstable assertion: assertEquals(" ", testInstances0.getWordSeparators());
      //  // Unstable assertion: assertEquals("Testdata", testInstances0.getRelation());
      //  // Unstable assertion: assertEquals(20, testInstances0.getNumInstances());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumNominalValues());
      //  // Unstable assertion: assertNotNull(testInstances0);
      //  // Unstable assertion: assertEquals((-2), testInstances0.NO_CLASS);
      //  // Unstable assertion: assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Instances instances0 = testInstances0.generate();
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumAttributes());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelational());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumClasses());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalNominal());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumRelationalNominalValues());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalNumeric());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumNumeric());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumString());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumDate());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalString());
      //  // Unstable assertion: assertFalse(testInstances0.getMultiInstance());
      //  // Unstable assertion: assertFalse(testInstances0.getNoClass());
      //  // Unstable assertion: assertEquals(-1, testInstances0.getClassIndex());
      //  // Unstable assertion: assertEquals(1, testInstances0.getSeed());
      //  // Unstable assertion: assertEquals(1, testInstances0.getClassType());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumNominal());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalDate());
      //  // Unstable assertion: assertEquals(10, testInstances0.getNumInstancesRelational());
      //  // Unstable assertion: assertEquals(" ", testInstances0.getWordSeparators());
      //  // Unstable assertion: assertEquals("Testdata", testInstances0.getRelation());
      //  // Unstable assertion: assertEquals(20, testInstances0.getNumInstances());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumNominalValues());
      //  // Unstable assertion: assertFalse(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(20, instances0.size());
      //  // Unstable assertion: assertEquals(20, instances0.numInstances());
      //  // Unstable assertion: assertEquals(2, instances0.numAttributes());
      //  // Unstable assertion: assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals("Testdata", instances0.relationName());
      //  // Unstable assertion: assertEquals(2, instances0.numClasses());
      //  // Unstable assertion: assertEquals(1, instances0.classIndex());
      //  // Unstable assertion: assertNotNull(instances0);
      //  // Unstable assertion: assertEquals((-2), testInstances0.NO_CLASS);
      //  // Unstable assertion: assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumAttributes());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelational());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumClasses());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalNominal());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumRelationalNominalValues());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalNumeric());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumNumeric());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumString());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumDate());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalString());
      //  // Unstable assertion: assertFalse(testInstances0.getMultiInstance());
      //  // Unstable assertion: assertFalse(testInstances0.getNoClass());
      //  // Unstable assertion: assertEquals(-1, testInstances0.getClassIndex());
      //  // Unstable assertion: assertEquals(1, testInstances0.getSeed());
      //  // Unstable assertion: assertEquals(1, testInstances0.getClassType());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumNominal());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalDate());
      //  // Unstable assertion: assertEquals(10, testInstances0.getNumInstancesRelational());
      //  // Unstable assertion: assertEquals(" ", testInstances0.getWordSeparators());
      //  // Unstable assertion: assertEquals("Testdata", testInstances0.getRelation());
      //  // Unstable assertion: assertEquals(20, testInstances0.getNumInstances());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumNominalValues());
      //  // Unstable assertion: assertFalse(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(20, instances0.size());
      //  // Unstable assertion: assertEquals(20, instances0.numInstances());
      //  // Unstable assertion: assertEquals(2, instances0.numAttributes());
      //  // Unstable assertion: assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals("Testdata", instances0.relationName());
      //  // Unstable assertion: assertEquals(2, instances0.numClasses());
      //  // Unstable assertion: assertEquals(1, instances0.classIndex());
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      //  // Unstable assertion: assertFalse(evaluation0.getDiscardPredictions());
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.correct(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.kappa(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertNotNull(evaluation0);
      //  // Unstable assertion: assertEquals((-2), testInstances0.NO_CLASS);
      //  // Unstable assertion: assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      double double0 = evaluation0.avgCost();
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumAttributes());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelational());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumClasses());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalNominal());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumRelationalNominalValues());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalNumeric());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumNumeric());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumString());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumDate());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalString());
      //  // Unstable assertion: assertFalse(testInstances0.getMultiInstance());
      //  // Unstable assertion: assertFalse(testInstances0.getNoClass());
      //  // Unstable assertion: assertEquals(-1, testInstances0.getClassIndex());
      //  // Unstable assertion: assertEquals(1, testInstances0.getSeed());
      //  // Unstable assertion: assertEquals(1, testInstances0.getClassType());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumNominal());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalDate());
      //  // Unstable assertion: assertEquals(10, testInstances0.getNumInstancesRelational());
      //  // Unstable assertion: assertEquals(" ", testInstances0.getWordSeparators());
      //  // Unstable assertion: assertEquals("Testdata", testInstances0.getRelation());
      //  // Unstable assertion: assertEquals(20, testInstances0.getNumInstances());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumNominalValues());
      //  // Unstable assertion: assertFalse(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(20, instances0.size());
      //  // Unstable assertion: assertEquals(20, instances0.numInstances());
      //  // Unstable assertion: assertEquals(2, instances0.numAttributes());
      //  // Unstable assertion: assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals("Testdata", instances0.relationName());
      //  // Unstable assertion: assertEquals(2, instances0.numClasses());
      //  // Unstable assertion: assertEquals(1, instances0.classIndex());
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      //  // Unstable assertion: assertFalse(evaluation0.getDiscardPredictions());
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.correct(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.kappa(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals((-2), testInstances0.NO_CLASS);
      //  // Unstable assertion: assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      DenseInstance denseInstance0 = (DenseInstance)instances0.lastInstance();
      //  // Unstable assertion: assertEquals(2, denseInstance0.numAttributes());
      //  // Unstable assertion: assertEquals(1.0, denseInstance0.weight(), 0.01D);
      //  // Unstable assertion: assertEquals(2, denseInstance0.numClasses());
      //  // Unstable assertion: assertEquals(1, denseInstance0.classIndex());
      //  // Unstable assertion: assertEquals(2, denseInstance0.numValues());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumAttributes());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelational());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumClasses());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalNominal());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumRelationalNominalValues());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalNumeric());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumNumeric());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumString());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumDate());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalString());
      //  // Unstable assertion: assertFalse(testInstances0.getMultiInstance());
      //  // Unstable assertion: assertFalse(testInstances0.getNoClass());
      //  // Unstable assertion: assertEquals(-1, testInstances0.getClassIndex());
      //  // Unstable assertion: assertEquals(1, testInstances0.getSeed());
      //  // Unstable assertion: assertEquals(1, testInstances0.getClassType());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumNominal());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalDate());
      //  // Unstable assertion: assertEquals(10, testInstances0.getNumInstancesRelational());
      //  // Unstable assertion: assertEquals(" ", testInstances0.getWordSeparators());
      //  // Unstable assertion: assertEquals("Testdata", testInstances0.getRelation());
      //  // Unstable assertion: assertEquals(20, testInstances0.getNumInstances());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumNominalValues());
      //  // Unstable assertion: assertFalse(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(20, instances0.size());
      //  // Unstable assertion: assertEquals(20, instances0.numInstances());
      //  // Unstable assertion: assertEquals(2, instances0.numAttributes());
      //  // Unstable assertion: assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals("Testdata", instances0.relationName());
      //  // Unstable assertion: assertEquals(2, instances0.numClasses());
      //  // Unstable assertion: assertEquals(1, instances0.classIndex());
      //  // Unstable assertion: assertNotNull(denseInstance0);
      //  // Unstable assertion: assertEquals(6, denseInstance0.s_numericAfterDecimalPoint);
      //  // Unstable assertion: assertEquals((-2), testInstances0.NO_CLASS);
      //  // Unstable assertion: assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      double double1 = evaluation0.SFMeanSchemeEntropy();
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumAttributes());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelational());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumClasses());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalNominal());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumRelationalNominalValues());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalNumeric());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumNumeric());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumString());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumDate());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalString());
      //  // Unstable assertion: assertFalse(testInstances0.getMultiInstance());
      //  // Unstable assertion: assertFalse(testInstances0.getNoClass());
      //  // Unstable assertion: assertEquals(-1, testInstances0.getClassIndex());
      //  // Unstable assertion: assertEquals(1, testInstances0.getSeed());
      //  // Unstable assertion: assertEquals(1, testInstances0.getClassType());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumNominal());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalDate());
      //  // Unstable assertion: assertEquals(10, testInstances0.getNumInstancesRelational());
      //  // Unstable assertion: assertEquals(" ", testInstances0.getWordSeparators());
      //  // Unstable assertion: assertEquals("Testdata", testInstances0.getRelation());
      //  // Unstable assertion: assertEquals(20, testInstances0.getNumInstances());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumNominalValues());
      //  // Unstable assertion: assertFalse(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(20, instances0.size());
      //  // Unstable assertion: assertEquals(20, instances0.numInstances());
      //  // Unstable assertion: assertEquals(2, instances0.numAttributes());
      //  // Unstable assertion: assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals("Testdata", instances0.relationName());
      //  // Unstable assertion: assertEquals(2, instances0.numClasses());
      //  // Unstable assertion: assertEquals(1, instances0.classIndex());
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      //  // Unstable assertion: assertFalse(evaluation0.getDiscardPredictions());
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.correct(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.kappa(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals((-2), testInstances0.NO_CLASS);
      //  // Unstable assertion: assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      double double2 = evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) denseInstance0, false);
      //  // Unstable assertion: assertArrayEquals(new double[] {Double.NaN, Double.NaN, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertEquals(0.0, double2, 0.01D);
      //  // Unstable assertion: assertEquals(2, denseInstance0.numAttributes());
      //  // Unstable assertion: assertEquals(1.0, denseInstance0.weight(), 0.01D);
      //  // Unstable assertion: assertEquals(2, denseInstance0.numClasses());
      //  // Unstable assertion: assertEquals(1, denseInstance0.classIndex());
      //  // Unstable assertion: assertEquals(2, denseInstance0.numValues());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumAttributes());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelational());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumClasses());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumRelationalNominal());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumRelationalNominalValues());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalNumeric());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumNumeric());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumString());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumDate());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalString());
      //  // Unstable assertion: assertFalse(testInstances0.getMultiInstance());
      //  // Unstable assertion: assertFalse(testInstances0.getNoClass());
      //  // Unstable assertion: assertEquals(-1, testInstances0.getClassIndex());
      //  // Unstable assertion: assertEquals(1, testInstances0.getSeed());
      //  // Unstable assertion: assertEquals(1, testInstances0.getClassType());
      //  // Unstable assertion: assertEquals(1, testInstances0.getNumNominal());
      //  // Unstable assertion: assertEquals(0, testInstances0.getNumRelationalDate());
      //  // Unstable assertion: assertEquals(10, testInstances0.getNumInstancesRelational());
      //  // Unstable assertion: assertEquals(" ", testInstances0.getWordSeparators());
      //  // Unstable assertion: assertEquals("Testdata", testInstances0.getRelation());
      //  // Unstable assertion: assertEquals(20, testInstances0.getNumInstances());
      //  // Unstable assertion: assertEquals(2, testInstances0.getNumNominalValues());
      //  // Unstable assertion: assertFalse(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(20, instances0.size());
      //  // Unstable assertion: assertEquals(20, instances0.numInstances());
      //  // Unstable assertion: assertEquals(2, instances0.numAttributes());
      //  // Unstable assertion: assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals("Testdata", instances0.relationName());
      //  // Unstable assertion: assertEquals(2, instances0.numClasses());
      //  // Unstable assertion: assertEquals(1, instances0.classIndex());
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      //  // Unstable assertion: assertFalse(evaluation0.getDiscardPredictions());
      //  // Unstable assertion: assertEquals(1.137503523749935, evaluation0.SFPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.numInstances(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.unweightedMicroFmeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.weightedTrueNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.pctCorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.incorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.weightedFMeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.errorRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.pctUnclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5454545454545454, evaluation0.meanPriorAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.weightedFalseNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.correct(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.weightedTruePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.weightedFalsePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.avgCost(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.weightedRecall(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(50.0, evaluation0.sizeOfPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.kappa(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5454545454545454, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(100.0, evaluation0.pctIncorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.weightedPrecision(), 0.01D);
      //  // Unstable assertion: assertEquals(1.137503523749935, evaluation0.SFMeanPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(6, denseInstance0.s_numericAfterDecimalPoint);
      //  // Unstable assertion: assertEquals((-2), testInstances0.NO_CLASS);
      //  // Unstable assertion: assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      //  // Unstable assertion: assertFalse(costSensitiveClassifier0.getMinimizeExpectedCost());
      //  // Unstable assertion: assertEquals("The random number seed to be used.", costSensitiveClassifier0.seedTipText());
      //  // Unstable assertion: assertFalse(costSensitiveClassifier0.getDebug());
      //  // Unstable assertion: assertEquals("Sets the cost matrix explicitly. This matrix is used if the costMatrixSource property is set to \"Supplied\".", costSensitiveClassifier0.costMatrixTipText());
      //  // Unstable assertion: assertEquals(0, costSensitiveClassifier0.graphType());
      //  // Unstable assertion: assertEquals(1, costSensitiveClassifier0.getSeed());
      //  // Unstable assertion: assertEquals("The base classifier to be used.", costSensitiveClassifier0.classifierTipText());
      //  // Unstable assertion: assertEquals("Sets the directory where cost files are loaded from. This option is used when the costMatrixSource is set to \"On Demand\".", costSensitiveClassifier0.onDemandDirectoryTipText());
      //  // Unstable assertion: assertEquals("A metaclassifier that makes its base classifier cost-sensitive. Two methods can be used to introduce cost-sensitivity: reweighting training instances according to the total cost assigned to each class; or predicting the class with minimum expected misclassification cost (rather than the most likely class). Performance can often be improved by using a Bagged classifier to improve the probability estimates of the base classifier.", costSensitiveClassifier0.globalInfo());
      //  // Unstable assertion: assertEquals("If set to true, classifier may output additional info to the console.", costSensitiveClassifier0.debugTipText());
      //  // Unstable assertion: assertEquals("Sets whether the minimum expected cost criteria will be used. If this is false, the training data will be reweighted according to the costs assigned to each class. If true, the minimum expected cost criteria will be used.", costSensitiveClassifier0.minimizeExpectedCostTipText());
      //  // Unstable assertion: assertNotNull(costSensitiveClassifier0);
      //  // Unstable assertion: assertEquals(2, costSensitiveClassifier0.MATRIX_SUPPLIED);
      //  // Unstable assertion: assertEquals(1, costSensitiveClassifier0.MATRIX_ON_DEMAND);
      
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      //  // Unstable assertion: assertEquals(1, costMatrix0.numRows());
      //  // Unstable assertion: assertEquals(1, costMatrix0.size());
      //  // Unstable assertion: assertEquals(1, costMatrix0.numColumns());
      //  // Unstable assertion: assertFalse(costSensitiveClassifier0.getMinimizeExpectedCost());
      //  // Unstable assertion: assertEquals("The random number seed to be used.", costSensitiveClassifier0.seedTipText());
      //  // Unstable assertion: assertFalse(costSensitiveClassifier0.getDebug());
      //  // Unstable assertion: assertEquals("Sets the cost matrix explicitly. This matrix is used if the costMatrixSource property is set to \"Supplied\".", costSensitiveClassifier0.costMatrixTipText());
      //  // Unstable assertion: assertEquals(0, costSensitiveClassifier0.graphType());
      //  // Unstable assertion: assertEquals(1, costSensitiveClassifier0.getSeed());
      //  // Unstable assertion: assertEquals("The base classifier to be used.", costSensitiveClassifier0.classifierTipText());
      //  // Unstable assertion: assertEquals("Sets the directory where cost files are loaded from. This option is used when the costMatrixSource is set to \"On Demand\".", costSensitiveClassifier0.onDemandDirectoryTipText());
      //  // Unstable assertion: assertEquals("A metaclassifier that makes its base classifier cost-sensitive. Two methods can be used to introduce cost-sensitivity: reweighting training instances according to the total cost assigned to each class; or predicting the class with minimum expected misclassification cost (rather than the most likely class). Performance can often be improved by using a Bagged classifier to improve the probability estimates of the base classifier.", costSensitiveClassifier0.globalInfo());
      //  // Unstable assertion: assertEquals("If set to true, classifier may output additional info to the console.", costSensitiveClassifier0.debugTipText());
      //  // Unstable assertion: assertEquals("Sets whether the minimum expected cost criteria will be used. If this is false, the training data will be reweighted according to the costs assigned to each class. If true, the minimum expected cost criteria will be used.", costSensitiveClassifier0.minimizeExpectedCostTipText());
      //  // Unstable assertion: assertNotNull(costMatrix0);
      //  // Unstable assertion: assertEquals(2, costSensitiveClassifier0.MATRIX_SUPPLIED);
      //  // Unstable assertion: assertEquals(1, costSensitiveClassifier0.MATRIX_ON_DEMAND);
      
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cost matrix not compatible with data!
         //
      }
  }

  //Test case number: 36
  /*
   * 18 covered goals:
   * Goal 1. weka.classifiers.Evaluation.evaluateModelOnceAndRecordPrediction([DLweka/core/Instance;)D: root-Branch
   * Goal 2. weka.classifiers.Evaluation.evaluationForSingleInstance([DLweka/core/Instance;Z)D: I7 Branch 173 IFEQ L1684 - false
   * Goal 3. weka.classifiers.Evaluation.evaluationForSingleInstance([DLweka/core/Instance;Z)D: I25 Branch 174 IFGT L1686 - true
   * Goal 4. weka.classifiers.Evaluation.evaluationForSingleInstance([DLweka/core/Instance;Z)D: I42 Branch 175 IFEQ L1690 - true
   * Goal 5. weka.classifiers.Evaluation.evaluationForSingleInstance([DLweka/core/Instance;Z)D: I42 Branch 175 IFEQ L1690 - false
   * Goal 6. weka.classifiers.Evaluation.evaluationForSingleInstance([DLweka/core/Instance;Z)D: I48 Branch 176 IFNE L1690 - false
   * Goal 7. weka.classifiers.Evaluation.evaluationForSingleInstance([DLweka/core/Instance;Z)D: I56 Branch 177 IFNONNULL L1691 - false
   * Goal 8. weka.classifiers.Evaluation.updateStatsForClassifier([DLweka/core/Instance;)V: I13 Branch 362 IFNE L3699 - false
   * Goal 9. weka.classifiers.Evaluation.updateStatsForClassifier([DLweka/core/Instance;)V: I41 Branch 363 IF_ICMPGE L3706 - true
   * Goal 10. weka.classifiers.Evaluation.updateStatsForClassifier([DLweka/core/Instance;)V: I41 Branch 363 IF_ICMPGE L3706 - false
   * Goal 11. weka.classifiers.Evaluation.updateStatsForClassifier([DLweka/core/Instance;)V: I52 Branch 364 IFLE L3707 - true
   * Goal 12. weka.classifiers.Evaluation.updateStatsForClassifier([DLweka/core/Instance;)V: I86 Branch 365 IFNULL L3716 - true
   * Goal 13. weka.classifiers.Evaluation.updateStatsForClassifier([DLweka/core/Instance;)V: I135 Branch 367 IFGE L3732 - false
   * Goal 14. weka.classifiers.Evaluation.updateMargins([DID)V: I21 Branch 381 IF_ICMPGE L3881 - true
   * Goal 15. weka.classifiers.Evaluation.updateMargins([DID)V: I21 Branch 381 IF_ICMPGE L3881 - false
   * Goal 16. weka.classifiers.Evaluation.updateMargins([DID)V: I29 Branch 382 IF_ICMPEQ L3882 - true
   * Goal 17. weka.classifiers.Evaluation.updateMargins([DID)V: I29 Branch 382 IF_ICMPEQ L3882 - false
   * Goal 18. weka.classifiers.Evaluation.updateMargins([DID)V: I38 Branch 383 IFLE L3882 - true
   */

  @Test
  public void test36()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertNotNull(testInstances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Instances instances0 = testInstances0.generate("U{SM~");
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertNotNull(instances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertNotNull(evaluation0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      
      double[] doubleArray0 = new double[19];
      doubleArray0[7] = 223.6994194;
      DenseInstance denseInstance0 = (DenseInstance)instances0.get(8);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, denseInstance0.numAttributes());
      assertEquals(1, denseInstance0.classIndex());
      assertEquals(2, denseInstance0.numClasses());
      assertEquals(1.0, denseInstance0.weight(), 0.01D);
      assertEquals(2, denseInstance0.numValues());
      assertNotNull(denseInstance0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals(6, denseInstance0.s_numericAfterDecimalPoint);
      
      double double0 = evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) denseInstance0, false);
      assertEquals(7.0, double0, 0.01D);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(1.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(1.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(100.0, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.pctCorrect(), 0.01D);
      assertEquals(2, denseInstance0.numAttributes());
      assertEquals(1, denseInstance0.classIndex());
      assertEquals(2, denseInstance0.numClasses());
      assertEquals(1.0, denseInstance0.weight(), 0.01D);
      assertEquals(2, denseInstance0.numValues());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals(6, denseInstance0.s_numericAfterDecimalPoint);
      
      double double1 = evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) denseInstance0);
      assertTrue(double1 == double0);
      assertEquals(7.0, double1, 0.01D);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.avgCost(), 0.01D);
      assertEquals(2.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(2.0, evaluation0.unclassified(), 0.01D);
      assertEquals(100.0, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.pctCorrect(), 0.01D);
      assertEquals(2, denseInstance0.numAttributes());
      assertEquals(1, denseInstance0.classIndex());
      assertEquals(2, denseInstance0.numClasses());
      assertEquals(1.0, denseInstance0.weight(), 0.01D);
      assertEquals(2, denseInstance0.numValues());
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals(6, denseInstance0.s_numericAfterDecimalPoint);
  }

  //Test case number: 37
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.numInstances()D: root-Branch
   */

  @Test
  public void test37()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertNotNull(instances0);
      
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertNotNull(evaluation0);
      
      double double0 = evaluation0.numInstances();
      assertEquals(0.0, double0, 0.01D);
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
  }

  //Test case number: 38
  /*
   * 6 covered goals:
   * Goal 1. weka.classifiers.Evaluation.handleCostOption(Ljava/lang/String;I)Lweka/classifiers/CostMatrix;: I6 Branch 165 IFNULL L1574 - true
   * Goal 2. weka.classifiers.Evaluation.KBInformation()D: I7 Branch 206 IFNE L2317 - true
   * Goal 3. weka.classifiers.Evaluation.KBInformation()D: I35 Branch 207 IFEQ L2321 - true
   * Goal 4. weka.classifiers.Evaluation.KBMeanInformation()D: I7 Branch 208 IFNE L2335 - true
   * Goal 5. weka.classifiers.Evaluation.KBMeanInformation()D: I35 Branch 209 IFEQ L2339 - true
   * Goal 6. weka.classifiers.Evaluation.numTruePositives(I)D: I15 Branch 257 IF_ICMPGE L2785 - true
   */

  @Test
  public void test38()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertEquals(0, instances0.numInstances());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertNotNull(instances0);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertNotNull(evaluation0);
      
      double double0 = evaluation0.KBInformation();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      
      double double1 = evaluation0.KBMeanInformation();
      assertFalse(double1 == double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      
      double double2 = evaluation0.numTruePositives(0);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertEquals(0.0, double2, 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      
      CostMatrix costMatrix0 = Evaluation.handleCostOption((String) null, 0);
      assertNull(costMatrix0);
  }

  //Test case number: 39
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.evaluateModel(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/String;: root-Branch
   * Goal 2. weka.classifiers.Evaluation.main([Ljava/lang/String;)V: I7 Branch 22 IFNE L801 - true
   */

  @Test
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[10];
      Evaluation.main(stringArray0);
  }

  //Test case number: 40
  /*
   * 6 covered goals:
   * Goal 1. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I360 Branch 350 IFEQ L3562 - true
   * Goal 2. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I380 Branch 351 IFEQ L3567 - true
   * Goal 3. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I436 Branch 352 IFEQ L3587 - false
   * Goal 4. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I467 Branch 353 IFEQ L3591 - true
   * Goal 5. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I467 Branch 353 IFEQ L3591 - false
   * Goal 6. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I514 Branch 354 IFEQ L3599 - false
   */

  @Test
  public void test40()  throws Throwable  {
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(433, true, true);
      assertEquals("Use error on the probabilties as error measure when determining the best number of LogitBoost iterations. If set, the number of LogitBoost iterations is chosen that minimizes the root mean squared error (either on the training set or in the cross-validation, depending on useCrossValidation).", simpleLogistic0.errorOnProbabilitiesTipText());
      assertFalse(simpleLogistic0.getDebug());
      assertEquals("Set fixed number of iterations for LogitBoost. If >= 0, this sets the number of LogitBoost iterations to perform. If < 0, the number is cross-validated or a stopping criterion on the training set is used (depending on the value of useCrossValidation).", simpleLogistic0.numBoostingIterationsTipText());
      assertEquals("If heuristicStop > 0, the heuristic for greedy stopping while cross-validating the number of LogitBoost iterations is enabled. This means LogitBoost is stopped if no new error minimum has been reached in the last heuristicStop iterations. It is recommended to use this heuristic, it gives a large speed-up especially on small datasets. The default value is 50.", simpleLogistic0.heuristicStopTipText());
      assertEquals("Sets whether the number of LogitBoost iterations is to be cross-validated or the stopping criterion on the training set should be used. If not set (and no fixed number of iterations was given), the number of LogitBoost iterations is used that minimizes the error on the training set (misclassification error or error on probabilities depending on errorOnProbabilities).", simpleLogistic0.useCrossValidationTipText());
      assertEquals(500, simpleLogistic0.getMaxBoostingIterations());
      assertEquals("Set the beta value used for weight trimming in LogitBoost. Only instances carrying (1 - beta)% of the weight from previous iteration are used in the next iteration. Set to 0 for no weight trimming. The default value is 0.", simpleLogistic0.weightTrimBetaTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", simpleLogistic0.debugTipText());
      assertEquals(433, simpleLogistic0.getNumBoostingIterations());
      assertEquals("The AIC is used to determine when to stop LogitBoost iterations (instead of cross-validation or training error).", simpleLogistic0.useAICTipText());
      assertTrue(simpleLogistic0.getUseCrossValidation());
      assertEquals(0.0, simpleLogistic0.getWeightTrimBeta(), 0.01D);
      assertEquals(50, simpleLogistic0.getHeuristicStop());
      assertTrue(simpleLogistic0.getErrorOnProbabilities());
      assertEquals("Sets the maximum number of iterations for LogitBoost. Default value is 500, for very small/large datasets a lower/higher value might be preferable.", simpleLogistic0.maxBoostingIterationsTipText());
      assertFalse(simpleLogistic0.getUseAIC());
      assertNotNull(simpleLogistic0);
      
      String string0 = Evaluation.makeOptionString(simpleLogistic0, true);
      assertEquals("\n\nGeneral options:\n\n-h or -help\n\tOutput help information.\n-synopsis or -info\n\tOutput synopsis for classifier (use in conjunction  with -h)\n-t <name of training file>\n\tSets training file.\n-T <name of test file>\n\tSets test file. If missing, a cross-validation will be performed\n\ton the training data.\n-c <class index>\n\tSets index of class attribute (default: last).\n-x <number of folds>\n\tSets number of folds for cross-validation (default: 10).\n-no-cv\n\tDo not perform any cross validation.\n-split-percentage <percentage>\n\tSets the percentage for the train/test set split, e.g., 66.\n-preserve-order\n\tPreserves the order in the percentage split.\n-s <random number seed>\n\tSets random number seed for cross-validation or percentage split\n\t(default: 1).\n-m <name of file with cost matrix>\n\tSets file with cost matrix.\n-l <name of input file>\n\tSets model input file. In case the filename ends with '.xml',\n\ta PMML file is loaded or, if that fails, options are loaded\n\tfrom the XML file.\n-d <name of output file>\n\tSets model output file. In case the filename ends with '.xml',\n\tonly the options are saved to the XML file, not the model.\n-v\n\tOutputs no statistics for training data.\n-o\n\tOutputs statistics only, not the classifier.\n-i\n\tOutputs detailed information-retrieval statistics for each class.\n-k\n\tOutputs information-theoretic statistics.\n-classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"\n\tUses the specified class for generating the classification output.\n\tE.g.: weka.classifiers.evaluation.output.prediction.PlainText\n-p range\n\tOutputs predictions for test instances (or the train instances if\n\tno test instances provided and -no-cv is used), along with the \n\tattributes in the specified range (and nothing else). \n\tUse '-p 0' if no attributes are desired.\n\tDeprecated: use \"-classifications ...\" instead.\n-distribution\n\tOutputs the distribution instead of only the prediction\n\tin conjunction with the '-p' option (only nominal classes).\n\tDeprecated: use \"-classifications ...\" instead.\n-r\n\tOnly outputs cumulative margin distribution.\n-xml filename | xml-string\n\tRetrieves the options from the XML-data instead of the command line.\n-threshold-file <file>\n\tThe file to save the threshold data to.\n\tThe format is determined by the extensions, e.g., '.arff' for ARFF \n\tformat or '.csv' for CSV.\n-threshold-label <label>\n\tThe class label to determine the threshold data for\n\t(default is the first label)\n\nOptions specific to weka.classifiers.functions.SimpleLogistic:\n\n-I <iterations>\n\tSet fixed number of iterations for LogitBoost\n-S\n\tUse stopping criterion on training set (instead of\n\tcross-validation)\n-P\n\tUse error on probabilities (rmse) instead of\n\tmisclassification error for stopping criterion\n-M <iterations>\n\tSet maximum number of boosting iterations\n-H <iterations>\n\tSet parameter for heuristic for early stopping of\n\tLogitBoost.\n\tIf enabled, the minimum is selected greedily, stopping\n\tif the current minimum has not changed for iter iterations.\n\tBy default, heuristic is enabled with value 50. Set to\n\tzero to disable heuristic.\n-W <beta>\n\tSet beta for weight trimming for LogitBoost. Set to 0 for no weight trimming.\n\n-A\n\tThe AIC is used to choose the best iteration (instead of CV or training error).\n\n\nSynopsis for weka.classifiers.functions.SimpleLogistic:\n\nClassifier for building linear logistic regression models. LogitBoost with simple regression functions as base learners is used for fitting the logistic models. The optimal number of LogitBoost iterations to perform is cross-validated, which leads to automatic attribute selection. For more information see:\nNiels Landwehr, Mark Hall, Eibe Frank (2005). Logistic Model Trees.\n\nMarc Sumner, Eibe Frank, Mark Hall: Speeding up Logistic Model Tree Induction. In: 9th European Conference on Principles and Practice of Knowledge Discovery in Databases, 675-683, 2005.", string0);
      assertEquals("Use error on the probabilties as error measure when determining the best number of LogitBoost iterations. If set, the number of LogitBoost iterations is chosen that minimizes the root mean squared error (either on the training set or in the cross-validation, depending on useCrossValidation).", simpleLogistic0.errorOnProbabilitiesTipText());
      assertFalse(simpleLogistic0.getDebug());
      assertEquals("Set fixed number of iterations for LogitBoost. If >= 0, this sets the number of LogitBoost iterations to perform. If < 0, the number is cross-validated or a stopping criterion on the training set is used (depending on the value of useCrossValidation).", simpleLogistic0.numBoostingIterationsTipText());
      assertEquals("If heuristicStop > 0, the heuristic for greedy stopping while cross-validating the number of LogitBoost iterations is enabled. This means LogitBoost is stopped if no new error minimum has been reached in the last heuristicStop iterations. It is recommended to use this heuristic, it gives a large speed-up especially on small datasets. The default value is 50.", simpleLogistic0.heuristicStopTipText());
      assertEquals("Sets whether the number of LogitBoost iterations is to be cross-validated or the stopping criterion on the training set should be used. If not set (and no fixed number of iterations was given), the number of LogitBoost iterations is used that minimizes the error on the training set (misclassification error or error on probabilities depending on errorOnProbabilities).", simpleLogistic0.useCrossValidationTipText());
      assertEquals(500, simpleLogistic0.getMaxBoostingIterations());
      assertEquals("Set the beta value used for weight trimming in LogitBoost. Only instances carrying (1 - beta)% of the weight from previous iteration are used in the next iteration. Set to 0 for no weight trimming. The default value is 0.", simpleLogistic0.weightTrimBetaTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", simpleLogistic0.debugTipText());
      assertEquals(433, simpleLogistic0.getNumBoostingIterations());
      assertEquals("The AIC is used to determine when to stop LogitBoost iterations (instead of cross-validation or training error).", simpleLogistic0.useAICTipText());
      assertTrue(simpleLogistic0.getUseCrossValidation());
      assertEquals(0.0, simpleLogistic0.getWeightTrimBeta(), 0.01D);
      assertEquals(50, simpleLogistic0.getHeuristicStop());
      assertTrue(simpleLogistic0.getErrorOnProbabilities());
      assertEquals("Sets the maximum number of iterations for LogitBoost. Default value is 500, for very small/large datasets a lower/higher value might be preferable.", simpleLogistic0.maxBoostingIterationsTipText());
      assertFalse(simpleLogistic0.getUseAIC());
      assertNotNull(string0);
  }

  //Test case number: 41
  /*
   * 4 covered goals:
   * Goal 1. weka.classifiers.Evaluation.weightedAreaUnderROC()D: I21 Branch 8 IF_ICMPGE L493 - true
   * Goal 2. weka.classifiers.Evaluation.weightedAreaUnderROC()D: I85 Branch 10 IF_ICMPGE L501 - true
   * Goal 3. weka.classifiers.Evaluation.weightedFalseNegativeRate()D: I21 Branch 298 IF_ICMPGE L3086 - true
   * Goal 4. weka.classifiers.Evaluation.weightedFalseNegativeRate()D: I85 Branch 300 IF_ICMPGE L3094 - true
   */

  @Test
  public void test41()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      //  // Unstable assertion: assertFalse(textDirectoryLoader0.getDebug());
      //  // Unstable assertion: assertFalse(textDirectoryLoader0.getOutputFilename());
      //  // Unstable assertion: assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      //  // Unstable assertion: assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      //  // Unstable assertion: assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      //  // Unstable assertion: assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      //  // Unstable assertion: assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      //  // Unstable assertion: assertEquals("", textDirectoryLoader0.getCharSet());
      //  // Unstable assertion: assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      //  // Unstable assertion: assertEquals(0, instances0.numClasses());
      //  // Unstable assertion: assertEquals(0, instances0.numInstances());
      //  // Unstable assertion: assertTrue(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(0, instances0.size());
      //  // Unstable assertion: assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals(2, instances0.numAttributes());
      //  // Unstable assertion: assertEquals(1, instances0.classIndex());
      //  // Unstable assertion: assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      //  // Unstable assertion: assertFalse(textDirectoryLoader0.getDebug());
      //  // Unstable assertion: assertFalse(textDirectoryLoader0.getOutputFilename());
      //  // Unstable assertion: assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      //  // Unstable assertion: assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      //  // Unstable assertion: assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      //  // Unstable assertion: assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      //  // Unstable assertion: assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      //  // Unstable assertion: assertEquals("", textDirectoryLoader0.getCharSet());
      //  // Unstable assertion: assertNotNull(instances0);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      //  // Unstable assertion: assertEquals(0, instances0.numClasses());
      //  // Unstable assertion: assertEquals(0, instances0.numInstances());
      //  // Unstable assertion: assertTrue(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(0, instances0.size());
      //  // Unstable assertion: assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals(2, instances0.numAttributes());
      //  // Unstable assertion: assertEquals(1, instances0.classIndex());
      //  // Unstable assertion: assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      //  // Unstable assertion: assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.kappa(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.correct(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      //  // Unstable assertion: assertFalse(evaluation0.getDiscardPredictions());
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertFalse(textDirectoryLoader0.getDebug());
      //  // Unstable assertion: assertFalse(textDirectoryLoader0.getOutputFilename());
      //  // Unstable assertion: assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      //  // Unstable assertion: assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      //  // Unstable assertion: assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      //  // Unstable assertion: assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      //  // Unstable assertion: assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      //  // Unstable assertion: assertEquals("", textDirectoryLoader0.getCharSet());
      //  // Unstable assertion: assertNotNull(evaluation0);
      
      double double0 = evaluation0.weightedAreaUnderROC();
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      //  // Unstable assertion: assertEquals(0, instances0.numClasses());
      //  // Unstable assertion: assertEquals(0, instances0.numInstances());
      //  // Unstable assertion: assertTrue(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(0, instances0.size());
      //  // Unstable assertion: assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals(2, instances0.numAttributes());
      //  // Unstable assertion: assertEquals(1, instances0.classIndex());
      //  // Unstable assertion: assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      //  // Unstable assertion: assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.kappa(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.correct(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      //  // Unstable assertion: assertFalse(evaluation0.getDiscardPredictions());
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertFalse(textDirectoryLoader0.getDebug());
      //  // Unstable assertion: assertFalse(textDirectoryLoader0.getOutputFilename());
      //  // Unstable assertion: assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      //  // Unstable assertion: assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      //  // Unstable assertion: assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      //  // Unstable assertion: assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      //  // Unstable assertion: assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      //  // Unstable assertion: assertEquals("", textDirectoryLoader0.getCharSet());
      
      double double1 = evaluation0.weightedFalseNegativeRate();
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertEquals(0, instances0.numClasses());
      //  // Unstable assertion: assertEquals(0, instances0.numInstances());
      //  // Unstable assertion: assertTrue(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(0, instances0.size());
      //  // Unstable assertion: assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals(2, instances0.numAttributes());
      //  // Unstable assertion: assertEquals(1, instances0.classIndex());
      //  // Unstable assertion: assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      //  // Unstable assertion: assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.kappa(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.correct(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      //  // Unstable assertion: assertFalse(evaluation0.getDiscardPredictions());
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertFalse(textDirectoryLoader0.getDebug());
      //  // Unstable assertion: assertFalse(textDirectoryLoader0.getOutputFilename());
      //  // Unstable assertion: assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      //  // Unstable assertion: assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      //  // Unstable assertion: assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      //  // Unstable assertion: assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      //  // Unstable assertion: assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      //  // Unstable assertion: assertEquals("", textDirectoryLoader0.getCharSet());
  }

  //Test case number: 42
  /*
   * 17 covered goals:
   * Goal 1. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;)V: root-Branch
   * Goal 2. weka.classifiers.Evaluation.unclassified()D: root-Branch
   * Goal 3. weka.classifiers.Evaluation.toSummaryString(Z)Ljava/lang/String;: root-Branch
   * Goal 4. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I58 Branch 1 IFEQ L410 - false
   * Goal 5. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I86 Branch 2 IF_ICMPGE L413 - true
   * Goal 6. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I86 Branch 2 IF_ICMPGE L413 - false
   * Goal 7. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I116 Branch 3 IFNULL L418 - true
   * Goal 8. weka.classifiers.Evaluation.toSummaryString(Ljava/lang/String;Z)Ljava/lang/String;: I12 Branch 226 IFEQ L2512 - true
   * Goal 9. weka.classifiers.Evaluation.toSummaryString(Ljava/lang/String;Z)Ljava/lang/String;: I50 Branch 228 IFLE L2520 - true
   * Goal 10. weka.classifiers.Evaluation.toSummaryString(Ljava/lang/String;Z)Ljava/lang/String;: I625 Branch 237 IFEQ L2592 - true
   * Goal 11. weka.classifiers.Evaluation.toSummaryString(Ljava/lang/String;Z)Ljava/lang/String;: I689 Branch 238 IFLE L2599 - true
   * Goal 12. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I12 Branch 319 IFNE L3335 - true
   * Goal 13. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I168 Branch 324 IF_ICMPGE L3362 - true
   * Goal 14. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I168 Branch 324 IF_ICMPGE L3362 - false
   * Goal 15. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I201 Branch 325 IF_ICMPGE L3366 - true
   * Goal 16. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I201 Branch 325 IF_ICMPGE L3366 - false
   * Goal 17. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I211 Branch 326 IFNE L3367 - false
   */

  @Test
  public void test42()  throws Throwable  {
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertFalse(adaBoostM1_0.getDebug());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertNotNull(adaBoostM1_0);
      
      Capabilities capabilities0 = adaBoostM1_0.getCapabilities();
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertFalse(adaBoostM1_0.getDebug());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertTrue(capabilities0.hasDependencies());
      assertNotNull(capabilities0);
      
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertFalse(adaBoostM1_0.getDebug());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertTrue(capabilities0.hasDependencies());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(4, testInstances0.getNumAttributes());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertNotNull(testInstances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Instances instances0 = testInstances0.generate();
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertFalse(adaBoostM1_0.getDebug());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertTrue(capabilities0.hasDependencies());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(4, testInstances0.getNumAttributes());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(20, instances0.numInstances());
      assertEquals(3, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(4, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(4, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertNotNull(instances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertFalse(adaBoostM1_0.getDebug());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertTrue(capabilities0.hasDependencies());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(4, testInstances0.getNumAttributes());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(20, instances0.numInstances());
      assertEquals(3, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(4, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(4, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertNotNull(evaluation0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      
      String string0 = evaluation0.toSummaryString(false);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertFalse(adaBoostM1_0.getDebug());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertTrue(capabilities0.hasDependencies());
      assertEquals(1, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(4, testInstances0.getNumAttributes());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumRelationalDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(20, instances0.numInstances());
      assertEquals(3, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(4, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(4, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertNotNull(string0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
  }

  //Test case number: 43
  /*
   * 3 covered goals:
   * Goal 1. weka.classifiers.Evaluation.getGlobalInfo(Lweka/classifiers/Classifier;)Ljava/lang/String;: I42 Branch 355 IF_ICMPGE L3625 - false
   * Goal 2. weka.classifiers.Evaluation.getGlobalInfo(Lweka/classifiers/Classifier;)Ljava/lang/String;: I65 Branch 356 IFLE L3628 - true
   * Goal 3. weka.classifiers.Evaluation.getGlobalInfo(Lweka/classifiers/Classifier;)Ljava/lang/String;: I65 Branch 356 IFLE L3628 - false
   */

  @Test
  public void test43()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      assertEquals("If set to true, classifier may output additional info to the console.", decisionStump0.debugTipText());
      assertEquals("Class for building and using a decision stump. Usually used in conjunction with a boosting algorithm. Does regression (based on mean-squared error) or classification (based on entropy). Missing is treated as a separate value.", decisionStump0.globalInfo());
      assertFalse(decisionStump0.getDebug());
      assertNotNull(decisionStump0);
      
      String string0 = Evaluation.getGlobalInfo(decisionStump0);
      assertEquals("\nSynopsis for weka.classifiers.trees.DecisionStump:\n\nClass for building and using a decision stump. Usually used in conjunction with a boosting algorithm. Does regression (based on mean-squared error) or classification (based on entropy). Missing is treated as a separate value.", string0);
      assertEquals("If set to true, classifier may output additional info to the console.", decisionStump0.debugTipText());
      assertEquals("Class for building and using a decision stump. Usually used in conjunction with a boosting algorithm. Does regression (based on mean-squared error) or classification (based on entropy). Missing is treated as a separate value.", decisionStump0.globalInfo());
      assertFalse(decisionStump0.getDebug());
      assertNotNull(string0);
  }
}
