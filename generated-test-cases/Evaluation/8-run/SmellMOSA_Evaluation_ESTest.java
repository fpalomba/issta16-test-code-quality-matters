/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 17 07:32:47 GMT 2015
 */

package weka.classifiers;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.junit.runner.RunWith;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.Sourcable;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.J48;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.FastVector;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.TestInstances;
import weka.core.converters.ConverterUtils;
import weka.core.converters.Loader;
import weka.core.converters.TextDirectoryLoader;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 5 covered goals:
   * Goal 1. weka.classifiers.Evaluation.evaluationForSingleInstance([DLweka/core/Instance;Z)D: I25 Branch 174 IFGT L1686 - false
   * Goal 2. weka.classifiers.Evaluation.updateStatsForClassifier([DLweka/core/Instance;)V: I13 Branch 362 IFNE L3699 - false
   * Goal 3. weka.classifiers.Evaluation.updateMargins([DID)V: I21 Branch 381 IF_ICMPGE L3881 - false
   * Goal 4. weka.classifiers.Evaluation.updateMargins([DID)V: I29 Branch 382 IF_ICMPEQ L3882 - true
   * Goal 5. weka.classifiers.Evaluation.updateMargins([DID)V: I29 Branch 382 IF_ICMPEQ L3882 - false
   */

  @Test
  public void test00()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(testInstances0);
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      
      Instances instances0 = testInstances0.generate();
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(instances0);
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(evaluation0);
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      assertNotNull(cVParameterSelection0);
      assertEquals("The base classifier to be used.", cVParameterSelection0.classifierTipText());
      assertEquals(0, cVParameterSelection0.graphType());
      assertEquals("Get the number of folds used for cross-validation.", cVParameterSelection0.numFoldsTipText());
      assertFalse(cVParameterSelection0.getDebug());
      assertEquals(10, cVParameterSelection0.getNumFolds());
      assertEquals(1, cVParameterSelection0.getSeed());
      assertEquals("If set to true, classifier may output additional info to the console.", cVParameterSelection0.debugTipText());
      assertEquals("The random number seed to be used.", cVParameterSelection0.seedTipText());
      assertEquals("Sets the scheme parameters which are to be set by cross-validation.\nThe format for each string should be:\nparam_char lower_bound upper_bound number_of_steps\neg to search a parameter -P from 1 to 10 by increments of 1:\n    \"P 1 10 10\" ", cVParameterSelection0.CVParametersTipText());
      
      Object[] objectArray0 = new Object[7];
      try {
        double[] doubleArray0 = evaluation0.evaluateModel((Classifier) cVParameterSelection0, instances0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
      }
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.confusionMatrix()[[D: I20 Branch 17 IF_ICMPGE L566 - true
   * Goal 2. weka.classifiers.Evaluation.confusionMatrix()[[D: I20 Branch 17 IF_ICMPGE L566 - false
   */

  @Test
  public void test01()  throws Throwable  {
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      assertNotNull(precomputedKernelMatrixKernel0);
      assertEquals("Turns time-consuming checks off - use with caution.", precomputedKernelMatrixKernel0.checksTurnedOffTipText());
      assertEquals("This kernel is based on a static kernel matrix that is read from a file. Instances must have a single nominal attribute (excluding the class). This attribute must be the first attribute in the file and its values are used to reference rows/columns in the kernel matrix. The second attribute must be the class attribute.", precomputedKernelMatrixKernel0.globalInfo());
      assertEquals(0, precomputedKernelMatrixKernel0.numCacheHits());
      assertEquals("Turns on the output of debugging information.", precomputedKernelMatrixKernel0.debugTipText());
      assertEquals(0, precomputedKernelMatrixKernel0.numEvals());
      assertFalse(precomputedKernelMatrixKernel0.getChecksTurnedOff());
      assertEquals("The file holding the kernel matrix.", precomputedKernelMatrixKernel0.kernelMatrixFileTipText());
      assertFalse(precomputedKernelMatrixKernel0.getDebug());
      
      Capabilities capabilities0 = precomputedKernelMatrixKernel0.getCapabilities();
      assertNotNull(capabilities0);
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals("Turns time-consuming checks off - use with caution.", precomputedKernelMatrixKernel0.checksTurnedOffTipText());
      assertEquals("This kernel is based on a static kernel matrix that is read from a file. Instances must have a single nominal attribute (excluding the class). This attribute must be the first attribute in the file and its values are used to reference rows/columns in the kernel matrix. The second attribute must be the class attribute.", precomputedKernelMatrixKernel0.globalInfo());
      assertEquals(0, precomputedKernelMatrixKernel0.numCacheHits());
      assertEquals("Turns on the output of debugging information.", precomputedKernelMatrixKernel0.debugTipText());
      assertEquals(0, precomputedKernelMatrixKernel0.numEvals());
      assertFalse(precomputedKernelMatrixKernel0.getChecksTurnedOff());
      assertEquals("The file holding the kernel matrix.", precomputedKernelMatrixKernel0.kernelMatrixFileTipText());
      assertFalse(precomputedKernelMatrixKernel0.getDebug());
      
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(testInstances0);
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getClassType());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals("Turns time-consuming checks off - use with caution.", precomputedKernelMatrixKernel0.checksTurnedOffTipText());
      assertEquals("This kernel is based on a static kernel matrix that is read from a file. Instances must have a single nominal attribute (excluding the class). This attribute must be the first attribute in the file and its values are used to reference rows/columns in the kernel matrix. The second attribute must be the class attribute.", precomputedKernelMatrixKernel0.globalInfo());
      assertEquals(0, precomputedKernelMatrixKernel0.numCacheHits());
      assertEquals("Turns on the output of debugging information.", precomputedKernelMatrixKernel0.debugTipText());
      assertEquals(0, precomputedKernelMatrixKernel0.numEvals());
      assertFalse(precomputedKernelMatrixKernel0.getChecksTurnedOff());
      assertEquals("The file holding the kernel matrix.", precomputedKernelMatrixKernel0.kernelMatrixFileTipText());
      assertFalse(precomputedKernelMatrixKernel0.getDebug());
      
      Instances instances0 = testInstances0.generate();
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(instances0);
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getClassType());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(4, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.size());
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals("Turns time-consuming checks off - use with caution.", precomputedKernelMatrixKernel0.checksTurnedOffTipText());
      assertEquals("This kernel is based on a static kernel matrix that is read from a file. Instances must have a single nominal attribute (excluding the class). This attribute must be the first attribute in the file and its values are used to reference rows/columns in the kernel matrix. The second attribute must be the class attribute.", precomputedKernelMatrixKernel0.globalInfo());
      assertEquals(0, precomputedKernelMatrixKernel0.numCacheHits());
      assertEquals("Turns on the output of debugging information.", precomputedKernelMatrixKernel0.debugTipText());
      assertEquals(0, precomputedKernelMatrixKernel0.numEvals());
      assertFalse(precomputedKernelMatrixKernel0.getChecksTurnedOff());
      assertEquals("The file holding the kernel matrix.", precomputedKernelMatrixKernel0.kernelMatrixFileTipText());
      assertFalse(precomputedKernelMatrixKernel0.getDebug());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(evaluation0);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getClassType());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(4, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.size());
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals("Turns time-consuming checks off - use with caution.", precomputedKernelMatrixKernel0.checksTurnedOffTipText());
      assertEquals("This kernel is based on a static kernel matrix that is read from a file. Instances must have a single nominal attribute (excluding the class). This attribute must be the first attribute in the file and its values are used to reference rows/columns in the kernel matrix. The second attribute must be the class attribute.", precomputedKernelMatrixKernel0.globalInfo());
      assertEquals(0, precomputedKernelMatrixKernel0.numCacheHits());
      assertEquals("Turns on the output of debugging information.", precomputedKernelMatrixKernel0.debugTipText());
      assertEquals(0, precomputedKernelMatrixKernel0.numEvals());
      assertFalse(precomputedKernelMatrixKernel0.getChecksTurnedOff());
      assertEquals("The file holding the kernel matrix.", precomputedKernelMatrixKernel0.kernelMatrixFileTipText());
      assertFalse(precomputedKernelMatrixKernel0.getDebug());
      
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(doubleArray0);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getClassType());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(4, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.size());
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals("Turns time-consuming checks off - use with caution.", precomputedKernelMatrixKernel0.checksTurnedOffTipText());
      assertEquals("This kernel is based on a static kernel matrix that is read from a file. Instances must have a single nominal attribute (excluding the class). This attribute must be the first attribute in the file and its values are used to reference rows/columns in the kernel matrix. The second attribute must be the class attribute.", precomputedKernelMatrixKernel0.globalInfo());
      assertEquals(0, precomputedKernelMatrixKernel0.numCacheHits());
      assertEquals("Turns on the output of debugging information.", precomputedKernelMatrixKernel0.debugTipText());
      assertEquals(0, precomputedKernelMatrixKernel0.numEvals());
      assertFalse(precomputedKernelMatrixKernel0.getChecksTurnedOff());
      assertEquals("The file holding the kernel matrix.", precomputedKernelMatrixKernel0.kernelMatrixFileTipText());
      assertFalse(precomputedKernelMatrixKernel0.getDebug());
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.num2ShortID(I[CI)Ljava/lang/String;: I16 Branch 357 IFLT L3651 - true
   */

  @Test
  public void test02()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertNotNull(instances0);
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      
      char[] charArray0 = new char[20];
      String string0 = evaluation0.num2ShortID('w', charArray0, 1);
      assertNotNull(string0);
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("\u0000", string0);
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.SFMeanPriorEntropy()D: I7 Branch 214 IFNE L2383 - false
   * Goal 2. weka.classifiers.Evaluation.SFMeanPriorEntropy()D: I13 Branch 215 IFNE L2383 - true
   */

  @Test
  public void test03()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertNotNull(instances0);
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      
      double double0 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(Double.NaN, double0, 0.01D);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I514 Branch 354 IFEQ L3599 - false
   */

  @Test
  public void test04()  throws Throwable  {
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      assertNotNull(classificationViaRegression0);
      assertEquals("The base classifier to be used.", classificationViaRegression0.classifierTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", classificationViaRegression0.debugTipText());
      assertFalse(classificationViaRegression0.getDebug());
      
      String string0 = Evaluation.makeOptionString(classificationViaRegression0, true);
      assertNotNull(string0);
      assertEquals("The base classifier to be used.", classificationViaRegression0.classifierTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", classificationViaRegression0.debugTipText());
      assertFalse(classificationViaRegression0.getDebug());
      assertEquals("\n\nGeneral options:\n\n-h or -help\n\tOutput help information.\n-synopsis or -info\n\tOutput synopsis for classifier (use in conjunction  with -h)\n-t <name of training file>\n\tSets training file.\n-T <name of test file>\n\tSets test file. If missing, a cross-validation will be performed\n\ton the training data.\n-c <class index>\n\tSets index of class attribute (default: last).\n-x <number of folds>\n\tSets number of folds for cross-validation (default: 10).\n-no-cv\n\tDo not perform any cross validation.\n-split-percentage <percentage>\n\tSets the percentage for the train/test set split, e.g., 66.\n-preserve-order\n\tPreserves the order in the percentage split.\n-s <random number seed>\n\tSets random number seed for cross-validation or percentage split\n\t(default: 1).\n-m <name of file with cost matrix>\n\tSets file with cost matrix.\n-l <name of input file>\n\tSets model input file. In case the filename ends with '.xml',\n\ta PMML file is loaded or, if that fails, options are loaded\n\tfrom the XML file.\n-d <name of output file>\n\tSets model output file. In case the filename ends with '.xml',\n\tonly the options are saved to the XML file, not the model.\n-v\n\tOutputs no statistics for training data.\n-o\n\tOutputs statistics only, not the classifier.\n-i\n\tOutputs detailed information-retrieval statistics for each class.\n-k\n\tOutputs information-theoretic statistics.\n-classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"\n\tUses the specified class for generating the classification output.\n\tE.g.: weka.classifiers.evaluation.output.prediction.PlainText\n-p range\n\tOutputs predictions for test instances (or the train instances if\n\tno test instances provided and -no-cv is used), along with the \n\tattributes in the specified range (and nothing else). \n\tUse '-p 0' if no attributes are desired.\n\tDeprecated: use \"-classifications ...\" instead.\n-distribution\n\tOutputs the distribution instead of only the prediction\n\tin conjunction with the '-p' option (only nominal classes).\n\tDeprecated: use \"-classifications ...\" instead.\n-r\n\tOnly outputs cumulative margin distribution.\n-xml filename | xml-string\n\tRetrieves the options from the XML-data instead of the command line.\n-threshold-file <file>\n\tThe file to save the threshold data to.\n\tThe format is determined by the extensions, e.g., '.arff' for ARFF \n\tformat or '.csv' for CSV.\n-threshold-label <label>\n\tThe class label to determine the threshold data for\n\t(default is the first label)\n\nOptions specific to weka.classifiers.meta.ClassificationViaRegression:\n\n-D\n\tIf set, classifier is run in debug mode and\n\tmay output additional info to the console\n-W\n\tFull name of base classifier.\n\t(default: weka.classifiers.trees.M5P)\n\nOptions specific to classifier weka.classifiers.trees.M5P:\n\n-N\n\tUse unpruned tree/rules\n-U\n\tUse unsmoothed predictions\n-R\n\tBuild regression tree/rule rather than a model tree/rule\n-M <minimum number of instances>\n\tSet minimum number of instances per leaf\n\t(default 4)\n-L\n\tSave instances at the nodes in\n\tthe tree (for visualization purposes)\n\nSynopsis for weka.classifiers.meta.ClassificationViaRegression:\n\nClass for doing classification using regression methods. Class is binarized and one regression model is built for each class value. For more information, see, for example\n\nE. Frank, Y. Wang, S. Inglis, G. Holmes, I.H. Witten (1998). Using model trees for classification. Machine Learning. 32(1):63-76.", string0);
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.errorRate()D: I7 Branch 191 IFNE L2138 - true
   * Goal 2. weka.classifiers.Evaluation.errorRate()D: I27 Branch 192 IFNONNULL L2141 - false
   */

  @Test
  public void test05()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      assertNotNull(instances0);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      
      double double0 = evaluation0.errorRate();
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals(Double.NaN, double0, 0.01D);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.toSummaryString(Ljava/lang/String;Z)Ljava/lang/String;: I12 Branch 226 IFEQ L2512 - true
   */

  @Test
  public void test06()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(testInstances0);
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      
      Instances instances0 = testInstances0.generate();
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(instances0);
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(evaluation0);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      
      String string0 = evaluation0.toSummaryString(false);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(string0);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.correct()D: root-Branch
   */

  @Test
  public void test07()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertNotNull(instances0);
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      
      double double0 = evaluation0.correct();
      assertEquals(1, instances0.classIndex());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 8
  /*
   * 3 covered goals:
   * Goal 1. weka.classifiers.Evaluation.evaluateModelOnce([DLweka/core/Instance;)D: root-Branch
   * Goal 2. weka.classifiers.Evaluation.evaluationForSingleInstance([DLweka/core/Instance;Z)D: I7 Branch 173 IFEQ L1684 - false
   * Goal 3. weka.classifiers.Evaluation.evaluationForSingleInstance([DLweka/core/Instance;Z)D: I25 Branch 174 IFGT L1686 - true
   */

  @Test
  public void test08()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertNotNull(instances0);
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      
      CostMatrix costMatrix0 = Evaluation.handleCostOption((String) null, 9);
      assertNull(costMatrix0);
      
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      assertNotNull(evaluation0);
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 9;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      assertEquals(6, binarySparseInstance0.s_numericAfterDecimalPoint);
      assertNotNull(binarySparseInstance0);
      assertEquals(1, binarySparseInstance0.numValues());
      assertEquals(8, binarySparseInstance0.numAttributes());
      assertEquals(0.0, binarySparseInstance0.weight(), 0.01D);
      assertArrayEquals(new double[] {9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      try {
        double double0 = evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
      }
  }

  //Test case number: 9
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.SFMeanEntropyGain()D: I7 Branch 220 IFNE L2437 - false
   * Goal 2. weka.classifiers.Evaluation.SFMeanEntropyGain()D: I13 Branch 221 IFNE L2437 - true
   */

  @Test
  public void test09()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertNotNull(instances0);
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      
      double double0 = evaluation0.SFMeanEntropyGain();
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals(Double.NaN, double0, 0.01D);
  }

  //Test case number: 10
  /*
   * 5 covered goals:
   * Goal 1. weka.classifiers.Evaluation.num2ShortID(I[CI)Ljava/lang/String;: I16 Branch 357 IFLT L3651 - false
   * Goal 2. weka.classifiers.Evaluation.num2ShortID(I[CI)Ljava/lang/String;: I43 Branch 358 IFGE L3654 - true
   * Goal 3. weka.classifiers.Evaluation.num2ShortID(I[CI)Ljava/lang/String;: I43 Branch 358 IFGE L3654 - false
   * Goal 4. weka.classifiers.Evaluation.num2ShortID(I[CI)Ljava/lang/String;: I65 Branch 359 IFLT L3658 - true
   * Goal 5. weka.classifiers.Evaluation.num2ShortID(I[CI)Ljava/lang/String;: I65 Branch 359 IFLT L3658 - false
   */

  @Test
  public void test10()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertNotNull(instances0);
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      
      char[] charArray0 = new char[14];
      String string0 = evaluation0.num2ShortID('w', charArray0, 'w');
      assertNotNull(string0);
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("                                                                                                                     \u0000\u0000", string0);
  }

  //Test case number: 11
  /*
   * 3 covered goals:
   * Goal 1. weka.classifiers.Evaluation.meanAbsoluteError()D: root-Branch
   * Goal 2. weka.classifiers.Evaluation.meanPriorAbsoluteError()D: I7 Branch 199 IFEQ L2229 - true
   * Goal 3. weka.classifiers.Evaluation.relativeAbsoluteError()D: I7 Branch 200 IFEQ L2243 - true
   */

  @Test
  public void test11()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(testInstances0);
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      
      Instances instances0 = testInstances0.generate();
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(instances0);
      assertEquals(20, instances0.size());
      assertEquals(20, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(evaluation0);
      assertEquals(20, instances0.size());
      assertEquals(20, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      
      double double0 = evaluation0.relativeAbsoluteError();
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals(20, instances0.size());
      assertEquals(20, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(Double.NaN, double0, 0.01D);
  }

  //Test case number: 12
  /*
   * 7 covered goals:
   * Goal 1. weka.classifiers.Evaluation.kappa()D: I30 Branch 193 IF_ICMPGE L2158 - true
   * Goal 2. weka.classifiers.Evaluation.kappa()D: I30 Branch 193 IF_ICMPGE L2158 - false
   * Goal 3. weka.classifiers.Evaluation.kappa()D: I43 Branch 194 IF_ICMPGE L2159 - true
   * Goal 4. weka.classifiers.Evaluation.kappa()D: I43 Branch 194 IF_ICMPGE L2159 - false
   * Goal 5. weka.classifiers.Evaluation.kappa()D: I116 Branch 195 IF_ICMPGE L2166 - true
   * Goal 6. weka.classifiers.Evaluation.kappa()D: I116 Branch 195 IF_ICMPGE L2166 - false
   * Goal 7. weka.classifiers.Evaluation.kappa()D: I169 Branch 196 IFGE L2173 - true
   */

  @Test
  public void test12()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(testInstances0);
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      
      Instances instances0 = testInstances0.generate("w2<");
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(instances0);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(evaluation0);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      
      double double0 = evaluation0.kappa();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1.0, double0, 0.01D);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.predictions()Lweka/core/FastVector;: I7 Branch 187 IFEQ L1845 - true
   */

  @Test
  public void test13()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertNotNull(instances0);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      
      FastVector fastVector0 = evaluation0.predictions();
      assertNull(fastVector0);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.setDiscardPredictions(Z)V: I12 Branch 6 IFEQ L449 - false
   */

  @Test
  public void test14()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(testInstances0);
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      
      Instances instances0 = testInstances0.generate();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(instances0);
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(evaluation0);
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      
      evaluation0.setDiscardPredictions(true);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertTrue(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
  }

  //Test case number: 15
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.equals(Ljava/lang/Object;)Z: I6 Branch 329 IFNULL L3426 - false
   * Goal 2. weka.classifiers.Evaluation.equals(Ljava/lang/Object;)Z: I15 Branch 330 IFNE L3426 - false
   */

  @Test
  public void test15()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertNotNull(instances0);
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(0, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      
      boolean boolean0 = evaluation0.equals((Object) textDirectoryLoader0);
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertFalse(boolean0);
  }

  //Test case number: 16
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.SFPriorEntropy()D: I7 Branch 212 IFNE L2370 - false
   * Goal 2. weka.classifiers.Evaluation.SFPriorEntropy()D: I13 Branch 213 IFNE L2370 - true
   */

  @Test
  public void test16()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertNotNull(instances0);
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 17
  /*
   * 8 covered goals:
   * Goal 1. weka.classifiers.Evaluation.trueNegativeRate(I)D: I26 Branch 270 IF_ICMPEQ L2892 - true
   * Goal 2. weka.classifiers.Evaluation.trueNegativeRate(I)D: I46 Branch 272 IF_ICMPEQ L2894 - true
   * Goal 3. weka.classifiers.Evaluation.weightedTrueNegativeRate()D: I21 Branch 274 IF_ICMPGE L2916 - true
   * Goal 4. weka.classifiers.Evaluation.weightedTrueNegativeRate()D: I21 Branch 274 IF_ICMPGE L2916 - false
   * Goal 5. weka.classifiers.Evaluation.weightedTrueNegativeRate()D: I33 Branch 275 IF_ICMPGE L2917 - true
   * Goal 6. weka.classifiers.Evaluation.weightedTrueNegativeRate()D: I33 Branch 275 IF_ICMPGE L2917 - false
   * Goal 7. weka.classifiers.Evaluation.weightedTrueNegativeRate()D: I85 Branch 276 IF_ICMPGE L2924 - true
   * Goal 8. weka.classifiers.Evaluation.weightedTrueNegativeRate()D: I85 Branch 276 IF_ICMPGE L2924 - false
   */

  @Test
  public void test17()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(testInstances0);
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      
      Instances instances0 = testInstances0.generate("@L");
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(instances0);
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(evaluation0);
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      
      double double0 = evaluation0.weightedTrueNegativeRate();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.incorrect()D: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(testInstances0);
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      
      Instances instances0 = testInstances0.generate("2@Ls");
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(instances0);
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(evaluation0);
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      
      double double0 = evaluation0.incorrect();
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 19
  /*
   * 3 covered goals:
   * Goal 1. weka.classifiers.Evaluation.getGlobalInfo(Lweka/classifiers/Classifier;)Ljava/lang/String;: I42 Branch 355 IF_ICMPGE L3625 - false
   * Goal 2. weka.classifiers.Evaluation.getGlobalInfo(Lweka/classifiers/Classifier;)Ljava/lang/String;: I65 Branch 356 IFLE L3628 - true
   * Goal 3. weka.classifiers.Evaluation.getGlobalInfo(Lweka/classifiers/Classifier;)Ljava/lang/String;: I65 Branch 356 IFLE L3628 - false
   */

  @Test
  public void test19()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      assertNotNull(zeroR0);
      assertFalse(zeroR0.getDebug());
      assertEquals("If set to true, classifier may output additional info to the console.", zeroR0.debugTipText());
      assertEquals("Class for building and using a 0-R classifier. Predicts the mean (for a numeric class) or the mode (for a nominal class).", zeroR0.globalInfo());
      
      String string0 = Evaluation.getGlobalInfo(zeroR0);
      assertNotNull(string0);
      assertFalse(zeroR0.getDebug());
      assertEquals("If set to true, classifier may output additional info to the console.", zeroR0.debugTipText());
      assertEquals("Class for building and using a 0-R classifier. Predicts the mean (for a numeric class) or the mode (for a nominal class).", zeroR0.globalInfo());
      assertEquals("\nSynopsis for weka.classifiers.rules.ZeroR:\n\nClass for building and using a 0-R classifier. Predicts the mean (for a numeric class) or the mode (for a nominal class).", string0);
  }

  //Test case number: 20
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I58 Branch 1 IFEQ L410 - true
   * Goal 2. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I124 Branch 4 IFNE L419 - false
   */

  @Test
  public void test20()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      assertEquals(2, gaussianProcesses0.FILTER_NONE);
      assertEquals(1, gaussianProcesses0.FILTER_STANDARDIZE);
      assertEquals(0, gaussianProcesses0.FILTER_NORMALIZE);
      assertNotNull(gaussianProcesses0);
      assertFalse(gaussianProcesses0.getDebug());
      assertEquals("The kernel to use.", gaussianProcesses0.kernelTipText());
      assertEquals("Determines how/if the data will be transformed.", gaussianProcesses0.filterTypeTipText());
      assertEquals("The level of Gaussian Noise (added to the diagonal of the Covariance Matrix), after the target has been normalized/standardized/left unchanged).", gaussianProcesses0.noiseTipText());
      assertEquals(" Implements Gaussian processes for regression without hyperparameter-tuning. To make choosing an appropriate noise level easier, this implementation applies normalization/standardization to the target attribute as well as the other attributes (if  normalization/standardizaton is turned on). Missing values are replaced by the global mean/mode. Nominal attributes are converted to binary ones. Note that kernel caching is turned off if the kernel used implements CachedKernel.", gaussianProcesses0.globalInfo());
      assertEquals(1.0, gaussianProcesses0.getNoise(), 0.01D);
      assertEquals("If set to true, classifier may output additional info to the console.", gaussianProcesses0.debugTipText());
      
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      assertEquals(2, gaussianProcesses0.FILTER_NONE);
      assertEquals(1, gaussianProcesses0.FILTER_STANDARDIZE);
      assertEquals(0, gaussianProcesses0.FILTER_NORMALIZE);
      assertNotNull(capabilities0);
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertTrue(capabilities0.hasDependencies());
      assertFalse(gaussianProcesses0.getDebug());
      assertEquals("The kernel to use.", gaussianProcesses0.kernelTipText());
      assertEquals("Determines how/if the data will be transformed.", gaussianProcesses0.filterTypeTipText());
      assertEquals("The level of Gaussian Noise (added to the diagonal of the Covariance Matrix), after the target has been normalized/standardized/left unchanged).", gaussianProcesses0.noiseTipText());
      assertEquals(" Implements Gaussian processes for regression without hyperparameter-tuning. To make choosing an appropriate noise level easier, this implementation applies normalization/standardization to the target attribute as well as the other attributes (if  normalization/standardizaton is turned on). Missing values are replaced by the global mean/mode. Nominal attributes are converted to binary ones. Note that kernel caching is turned off if the kernel used implements CachedKernel.", gaussianProcesses0.globalInfo());
      assertEquals(1.0, gaussianProcesses0.getNoise(), 0.01D);
      assertEquals("If set to true, classifier may output additional info to the console.", gaussianProcesses0.debugTipText());
      
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals(2, gaussianProcesses0.FILTER_NONE);
      assertEquals(1, gaussianProcesses0.FILTER_STANDARDIZE);
      assertEquals(0, gaussianProcesses0.FILTER_NORMALIZE);
      assertNotNull(testInstances0);
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertTrue(capabilities0.hasDependencies());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(3, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(gaussianProcesses0.getDebug());
      assertEquals("The kernel to use.", gaussianProcesses0.kernelTipText());
      assertEquals("Determines how/if the data will be transformed.", gaussianProcesses0.filterTypeTipText());
      assertEquals("The level of Gaussian Noise (added to the diagonal of the Covariance Matrix), after the target has been normalized/standardized/left unchanged).", gaussianProcesses0.noiseTipText());
      assertEquals(" Implements Gaussian processes for regression without hyperparameter-tuning. To make choosing an appropriate noise level easier, this implementation applies normalization/standardization to the target attribute as well as the other attributes (if  normalization/standardizaton is turned on). Missing values are replaced by the global mean/mode. Nominal attributes are converted to binary ones. Note that kernel caching is turned off if the kernel used implements CachedKernel.", gaussianProcesses0.globalInfo());
      assertEquals(1.0, gaussianProcesses0.getNoise(), 0.01D);
      assertEquals("If set to true, classifier may output additional info to the console.", gaussianProcesses0.debugTipText());
      
      Instances instances0 = testInstances0.generate();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals(2, gaussianProcesses0.FILTER_NONE);
      assertEquals(1, gaussianProcesses0.FILTER_STANDARDIZE);
      assertEquals(0, gaussianProcesses0.FILTER_NORMALIZE);
      assertNotNull(instances0);
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertTrue(capabilities0.hasDependencies());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(3, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(1, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(gaussianProcesses0.getDebug());
      assertEquals("The kernel to use.", gaussianProcesses0.kernelTipText());
      assertEquals("Determines how/if the data will be transformed.", gaussianProcesses0.filterTypeTipText());
      assertEquals("The level of Gaussian Noise (added to the diagonal of the Covariance Matrix), after the target has been normalized/standardized/left unchanged).", gaussianProcesses0.noiseTipText());
      assertEquals(" Implements Gaussian processes for regression without hyperparameter-tuning. To make choosing an appropriate noise level easier, this implementation applies normalization/standardization to the target attribute as well as the other attributes (if  normalization/standardizaton is turned on). Missing values are replaced by the global mean/mode. Nominal attributes are converted to binary ones. Note that kernel caching is turned off if the kernel used implements CachedKernel.", gaussianProcesses0.globalInfo());
      assertEquals(1.0, gaussianProcesses0.getNoise(), 0.01D);
      assertEquals("If set to true, classifier may output additional info to the console.", gaussianProcesses0.debugTipText());
      assertEquals(3, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertEquals(2, instances0.classIndex());
      
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      assertEquals(1, costSensitiveClassifier0.MATRIX_ON_DEMAND);
      assertEquals(2, costSensitiveClassifier0.MATRIX_SUPPLIED);
      assertNotNull(costSensitiveClassifier0);
      assertEquals(1, costSensitiveClassifier0.getSeed());
      assertFalse(costSensitiveClassifier0.getDebug());
      assertEquals("The random number seed to be used.", costSensitiveClassifier0.seedTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", costSensitiveClassifier0.debugTipText());
      assertEquals("A metaclassifier that makes its base classifier cost-sensitive. Two methods can be used to introduce cost-sensitivity: reweighting training instances according to the total cost assigned to each class; or predicting the class with minimum expected misclassification cost (rather than the most likely class). Performance can often be improved by using a Bagged classifier to improve the probability estimates of the base classifier.", costSensitiveClassifier0.globalInfo());
      assertEquals("Sets whether the minimum expected cost criteria will be used. If this is false, the training data will be reweighted according to the costs assigned to each class. If true, the minimum expected cost criteria will be used.", costSensitiveClassifier0.minimizeExpectedCostTipText());
      assertFalse(costSensitiveClassifier0.getMinimizeExpectedCost());
      assertEquals("Sets the directory where cost files are loaded from. This option is used when the costMatrixSource is set to \"On Demand\".", costSensitiveClassifier0.onDemandDirectoryTipText());
      assertEquals("The base classifier to be used.", costSensitiveClassifier0.classifierTipText());
      assertEquals(0, costSensitiveClassifier0.graphType());
      assertEquals("Sets the cost matrix explicitly. This matrix is used if the costMatrixSource property is set to \"Supplied\".", costSensitiveClassifier0.costMatrixTipText());
      
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      assertEquals(1, costSensitiveClassifier0.MATRIX_ON_DEMAND);
      assertEquals(2, costSensitiveClassifier0.MATRIX_SUPPLIED);
      assertNotNull(costMatrix0);
      assertEquals(1, costMatrix0.numRows());
      assertEquals(1, costMatrix0.size());
      assertEquals(1, costMatrix0.numColumns());
      assertEquals(1, costSensitiveClassifier0.getSeed());
      assertFalse(costSensitiveClassifier0.getDebug());
      assertEquals("The random number seed to be used.", costSensitiveClassifier0.seedTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", costSensitiveClassifier0.debugTipText());
      assertEquals("A metaclassifier that makes its base classifier cost-sensitive. Two methods can be used to introduce cost-sensitivity: reweighting training instances according to the total cost assigned to each class; or predicting the class with minimum expected misclassification cost (rather than the most likely class). Performance can often be improved by using a Bagged classifier to improve the probability estimates of the base classifier.", costSensitiveClassifier0.globalInfo());
      assertEquals("Sets whether the minimum expected cost criteria will be used. If this is false, the training data will be reweighted according to the costs assigned to each class. If true, the minimum expected cost criteria will be used.", costSensitiveClassifier0.minimizeExpectedCostTipText());
      assertFalse(costSensitiveClassifier0.getMinimizeExpectedCost());
      assertEquals("Sets the directory where cost files are loaded from. This option is used when the costMatrixSource is set to \"On Demand\".", costSensitiveClassifier0.onDemandDirectoryTipText());
      assertEquals("The base classifier to be used.", costSensitiveClassifier0.classifierTipText());
      assertEquals(0, costSensitiveClassifier0.graphType());
      assertEquals("Sets the cost matrix explicitly. This matrix is used if the costMatrixSource property is set to \"Supplied\".", costSensitiveClassifier0.costMatrixTipText());
      
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class has to be nominal if cost matrix given!
         //
      }
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.unweightedMicroFmeasure()D: I23 Branch 318 IF_ICMPGE L3316 - false
   */

  @Test
  public void test21()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(testInstances0);
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      
      Instances instances0 = testInstances0.generate();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(instances0);
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(evaluation0);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      
      double double0 = evaluation0.unweightedMicroFmeasure();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(Double.NaN, double0, 0.01D);
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.rootMeanSquaredError()D: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      assertNotNull(instances0);
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      
      double double0 = evaluation0.rootMeanSquaredError();
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  //Test case number: 23
  /*
   * 3 covered goals:
   * Goal 1. weka.classifiers.Evaluation.rootMeanPriorSquaredError()D: I7 Branch 201 IFEQ L2266 - true
   * Goal 2. weka.classifiers.Evaluation.SFEntropyGain()D: I7 Branch 218 IFNE L2423 - false
   * Goal 3. weka.classifiers.Evaluation.SFEntropyGain()D: I13 Branch 219 IFNE L2423 - true
   */

  @Test
  public void test23()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertNotNull(instances0);
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      
      double double0 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = evaluation0.SFEntropyGain();
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.getHeader()Lweka/core/Instances;: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(testInstances0);
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      
      Instances instances0 = testInstances0.generate();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(instances0);
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(evaluation0);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      
      Instances instances1 = evaluation0.getHeader();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotSame(instances1, instances0);
      assertNotSame(instances0, instances1);
      assertNotNull(instances1);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, instances1.numClasses());
      assertFalse(instances1.checkForStringAttributes());
      assertEquals(0, instances1.numInstances());
      assertEquals(0, instances1.size());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01D);
      assertEquals(2, instances1.numAttributes());
      assertEquals(1, instances1.classIndex());
      assertEquals("Testdata", instances1.relationName());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertFalse(instances1.equals((Object)instances0));
      assertFalse(instances0.equals((Object)instances1));
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;Lweka/core/Instances;[Ljava/lang/Object;)[D: I110 Branch 171 IF_ICMPGE L1658 - true
   */

  @Test
  public void test25()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertNotNull(instances0);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      assertEquals(2, regressionByDiscretization0.ESTIMATOR_NORMAL);
      assertEquals(1, regressionByDiscretization0.ESTIMATOR_KERNEL);
      assertEquals(0, regressionByDiscretization0.ESTIMATOR_HISTOGRAM);
      assertNotNull(regressionByDiscretization0);
      assertFalse(regressionByDiscretization0.getUseEqualFrequency());
      assertEquals("Whether to delete empty bins after discretization.", regressionByDiscretization0.deleteEmptyBinsTipText());
      assertFalse(regressionByDiscretization0.getMinimizeAbsoluteError());
      assertEquals("Whether to minimize absolute error.", regressionByDiscretization0.minimizeAbsoluteErrorTipText());
      assertEquals("Number of bins for discretization.", regressionByDiscretization0.numBinsTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", regressionByDiscretization0.debugTipText());
      assertEquals(10, regressionByDiscretization0.getNumBins());
      assertFalse(regressionByDiscretization0.getDebug());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", regressionByDiscretization0.useEqualFrequencyTipText());
      assertEquals("The density estimator to use.", regressionByDiscretization0.estimatorTypeTipText());
      assertEquals("The base classifier to be used.", regressionByDiscretization0.classifierTipText());
      assertFalse(regressionByDiscretization0.getDeleteEmptyBins());
      
      Object[] objectArray0 = new Object[5];
      double[] doubleArray0 = evaluation0.evaluateModel((Classifier) regressionByDiscretization0, instances0, objectArray0);
      assertEquals(2, regressionByDiscretization0.ESTIMATOR_NORMAL);
      assertEquals(1, regressionByDiscretization0.ESTIMATOR_KERNEL);
      assertEquals(0, regressionByDiscretization0.ESTIMATOR_HISTOGRAM);
      assertNotNull(doubleArray0);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(regressionByDiscretization0.getUseEqualFrequency());
      assertEquals("Whether to delete empty bins after discretization.", regressionByDiscretization0.deleteEmptyBinsTipText());
      assertFalse(regressionByDiscretization0.getMinimizeAbsoluteError());
      assertEquals("Whether to minimize absolute error.", regressionByDiscretization0.minimizeAbsoluteErrorTipText());
      assertEquals("Number of bins for discretization.", regressionByDiscretization0.numBinsTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", regressionByDiscretization0.debugTipText());
      assertEquals(10, regressionByDiscretization0.getNumBins());
      assertFalse(regressionByDiscretization0.getDebug());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", regressionByDiscretization0.useEqualFrequencyTipText());
      assertEquals("The density estimator to use.", regressionByDiscretization0.estimatorTypeTipText());
      assertEquals("The base classifier to be used.", regressionByDiscretization0.classifierTipText());
      assertFalse(regressionByDiscretization0.getDeleteEmptyBins());
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  //Test case number: 26
  /*
   * 4 covered goals:
   * Goal 1. weka.classifiers.Evaluation.SFSchemeEntropy()D: I7 Branch 216 IFNE L2396 - true
   * Goal 2. weka.classifiers.Evaluation.addNumericTrainClass(DD)V: I24 Branch 386 IFGE L3934 - false
   * Goal 3. weka.classifiers.Evaluation.setNumericPriorsFromBuffer()V: I18 Branch 389 IF_ICMPGE L3965 - true
   * Goal 4. weka.classifiers.Evaluation.setNumericPriorsFromBuffer()V: I18 Branch 389 IF_ICMPGE L3965 - false
   */

  @Test
  public void test26()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(testInstances0);
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getNoClass());
      
      Instances instances0 = testInstances0.generate("K:qWSbqw..pEq-`)e4l");
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(instances0);
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(evaluation0);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      
      evaluation0.addNumericTrainClass((-1.0), 2250);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 27
  /*
   * 3 covered goals:
   * Goal 1. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I116 Branch 3 IFNULL L418 - false
   * Goal 2. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I124 Branch 4 IFNE L419 - true
   * Goal 3. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I155 Branch 5 IF_ICMPEQ L422 - false
   */

  @Test
  public void test27()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(testInstances0);
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(testInstances0.getNoClass());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      
      Instances instances0 = testInstances0.generate();
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(instances0);
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumNumeric());
      assertFalse(testInstances0.getNoClass());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      assertEquals(2, costSensitiveClassifier0.MATRIX_SUPPLIED);
      assertEquals(1, costSensitiveClassifier0.MATRIX_ON_DEMAND);
      assertNotNull(costSensitiveClassifier0);
      assertEquals(0, costSensitiveClassifier0.graphType());
      assertEquals("Sets the directory where cost files are loaded from. This option is used when the costMatrixSource is set to \"On Demand\".", costSensitiveClassifier0.onDemandDirectoryTipText());
      assertEquals("The base classifier to be used.", costSensitiveClassifier0.classifierTipText());
      assertEquals(1, costSensitiveClassifier0.getSeed());
      assertEquals("If set to true, classifier may output additional info to the console.", costSensitiveClassifier0.debugTipText());
      assertEquals("A metaclassifier that makes its base classifier cost-sensitive. Two methods can be used to introduce cost-sensitivity: reweighting training instances according to the total cost assigned to each class; or predicting the class with minimum expected misclassification cost (rather than the most likely class). Performance can often be improved by using a Bagged classifier to improve the probability estimates of the base classifier.", costSensitiveClassifier0.globalInfo());
      assertFalse(costSensitiveClassifier0.getDebug());
      assertEquals("Sets the cost matrix explicitly. This matrix is used if the costMatrixSource property is set to \"Supplied\".", costSensitiveClassifier0.costMatrixTipText());
      assertFalse(costSensitiveClassifier0.getMinimizeExpectedCost());
      assertEquals("The random number seed to be used.", costSensitiveClassifier0.seedTipText());
      assertEquals("Sets whether the minimum expected cost criteria will be used. If this is false, the training data will be reweighted according to the costs assigned to each class. If true, the minimum expected cost criteria will be used.", costSensitiveClassifier0.minimizeExpectedCostTipText());
      
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      assertEquals(2, costSensitiveClassifier0.MATRIX_SUPPLIED);
      assertEquals(1, costSensitiveClassifier0.MATRIX_ON_DEMAND);
      assertNotNull(costMatrix0);
      assertEquals(1, costMatrix0.numRows());
      assertEquals(1, costMatrix0.size());
      assertEquals(1, costMatrix0.numColumns());
      assertEquals(0, costSensitiveClassifier0.graphType());
      assertEquals("Sets the directory where cost files are loaded from. This option is used when the costMatrixSource is set to \"On Demand\".", costSensitiveClassifier0.onDemandDirectoryTipText());
      assertEquals("The base classifier to be used.", costSensitiveClassifier0.classifierTipText());
      assertEquals(1, costSensitiveClassifier0.getSeed());
      assertEquals("If set to true, classifier may output additional info to the console.", costSensitiveClassifier0.debugTipText());
      assertEquals("A metaclassifier that makes its base classifier cost-sensitive. Two methods can be used to introduce cost-sensitivity: reweighting training instances according to the total cost assigned to each class; or predicting the class with minimum expected misclassification cost (rather than the most likely class). Performance can often be improved by using a Bagged classifier to improve the probability estimates of the base classifier.", costSensitiveClassifier0.globalInfo());
      assertFalse(costSensitiveClassifier0.getDebug());
      assertEquals("Sets the cost matrix explicitly. This matrix is used if the costMatrixSource property is set to \"Supplied\".", costSensitiveClassifier0.costMatrixTipText());
      assertFalse(costSensitiveClassifier0.getMinimizeExpectedCost());
      assertEquals("The random number seed to be used.", costSensitiveClassifier0.seedTipText());
      assertEquals("Sets whether the minimum expected cost criteria will be used. If this is false, the training data will be reweighted according to the costs assigned to each class. If true, the minimum expected cost criteria will be used.", costSensitiveClassifier0.minimizeExpectedCostTipText());
      
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cost matrix not compatible with data!
         //
      }
  }

  //Test case number: 28
  /*
   * 3 covered goals:
   * Goal 1. weka.classifiers.Evaluation.unweightedMacroFmeasure()D: I17 Branch 316 IF_ICMPGE L3294 - true
   * Goal 2. weka.classifiers.Evaluation.unweightedMacroFmeasure()D: I17 Branch 316 IF_ICMPGE L3294 - false
   * Goal 3. weka.classifiers.Evaluation.unweightedMacroFmeasure()D: I32 Branch 317 IFLE L3296 - true
   */

  @Test
  public void test28()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(testInstances0);
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      
      Instances instances0 = testInstances0.generate();
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(instances0);
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(evaluation0);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      
      double double0 = evaluation0.unweightedMacroFmeasure();
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.useNoPriors()V: root-Branch
   */

  @Test
  public void test29()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertNotNull(instances0);
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      
      evaluation0.useNoPriors();
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
  }

  //Test case number: 30
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.pctUnclassified()D: root-Branch
   */

  @Test
  public void test30()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertNotNull(instances0);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      
      double double0 = evaluation0.pctUnclassified();
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(Double.NaN, double0, 0.01D);
  }

  //Test case number: 31
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.totalCost()D: root-Branch
   */

  @Test
  public void test31()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertNotNull(instances0);
      assertEquals(0, instances0.numInstances());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(0, instances0.numInstances());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      
      double double0 = evaluation0.totalCost();
      assertEquals(0, instances0.numInstances());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 32
  /*
   * 6 covered goals:
   * Goal 1. weka.classifiers.Evaluation.toMatrixString()Ljava/lang/String;: root-Branch
   * Goal 2. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I126 Branch 239 IFNE L2640 - true
   * Goal 3. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I162 Branch 240 IF_ICMPGE L2647 - true
   * Goal 4. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I267 Branch 246 IFEQ L2663 - true
   * Goal 5. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I311 Branch 247 IF_ICMPGE L2667 - true
   * Goal 6. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I375 Branch 249 IF_ICMPGE L2676 - true
   */

  @Test
  public void test32()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertNotNull(instances0);
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      
      String string0 = evaluation0.toMatrixString();
      assertNotNull(string0);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("=== Confusion Matrix ===\n\n   <-- classified as\n", string0);
  }

  //Test case number: 33
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.crossValidateModel(Lweka/classifiers/Classifier;Lweka/core/Instances;ILjava/util/Random;[Ljava/lang/Object;)V: I20 Branch 18 IFEQ L598 - false
   * Goal 2. weka.classifiers.Evaluation.crossValidateModel(Lweka/classifiers/Classifier;Lweka/core/Instances;ILjava/util/Random;[Ljava/lang/Object;)V: I37 Branch 19 IFLE L605 - false
   */

  @Test
  public void test33()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      assertNotNull(instances0);
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      
      Object[] objectArray0 = new Object[10];
      try {
        evaluation0.crossValidateModel((Classifier) null, instances0, 23, (Random) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 34
  /*
   * 54 covered goals:
   * Goal 1. weka.classifiers.Evaluation.recall(I)D: root-Branch
   * Goal 2. weka.classifiers.Evaluation.pctCorrect()D: root-Branch
   * Goal 3. weka.classifiers.Evaluation.areaUnderROC(I)D: I7 Branch 7 IFNONNULL L475 - false
   * Goal 4. weka.classifiers.Evaluation.weightedAreaUnderROC()D: I21 Branch 8 IF_ICMPGE L493 - false
   * Goal 5. weka.classifiers.Evaluation.weightedAreaUnderROC()D: I33 Branch 9 IF_ICMPGE L494 - true
   * Goal 6. weka.classifiers.Evaluation.weightedAreaUnderROC()D: I33 Branch 9 IF_ICMPGE L494 - false
   * Goal 7. weka.classifiers.Evaluation.weightedAreaUnderROC()D: I85 Branch 10 IF_ICMPGE L501 - false
   * Goal 8. weka.classifiers.Evaluation.weightedAreaUnderROC()D: I99 Branch 11 IFNE L503 - true
   * Goal 9. weka.classifiers.Evaluation.areaUnderPRC(I)D: I7 Branch 12 IFNONNULL L521 - false
   * Goal 10. weka.classifiers.Evaluation.weightedAreaUnderPRC()D: I21 Branch 13 IF_ICMPGE L539 - false
   * Goal 11. weka.classifiers.Evaluation.weightedAreaUnderPRC()D: I33 Branch 14 IF_ICMPGE L540 - true
   * Goal 12. weka.classifiers.Evaluation.weightedAreaUnderPRC()D: I33 Branch 14 IF_ICMPGE L540 - false
   * Goal 13. weka.classifiers.Evaluation.weightedAreaUnderPRC()D: I85 Branch 15 IF_ICMPGE L547 - false
   * Goal 14. weka.classifiers.Evaluation.weightedAreaUnderPRC()D: I99 Branch 16 IFNE L549 - true
   * Goal 15. weka.classifiers.Evaluation.toClassDetailsString(Ljava/lang/String;)Ljava/lang/String;: I57 Branch 253 IF_ICMPGE L2721 - false
   * Goal 16. weka.classifiers.Evaluation.toClassDetailsString(Ljava/lang/String;)Ljava/lang/String;: I143 Branch 254 IFEQ L2731 - true
   * Goal 17. weka.classifiers.Evaluation.toClassDetailsString(Ljava/lang/String;)Ljava/lang/String;: I182 Branch 255 IFEQ L2740 - false
   * Goal 18. weka.classifiers.Evaluation.toClassDetailsString(Ljava/lang/String;)Ljava/lang/String;: I219 Branch 256 IFEQ L2746 - false
   * Goal 19. weka.classifiers.Evaluation.truePositiveRate(I)D: I18 Branch 259 IF_ICMPGE L2810 - true
   * Goal 20. weka.classifiers.Evaluation.truePositiveRate(I)D: I18 Branch 259 IF_ICMPGE L2810 - false
   * Goal 21. weka.classifiers.Evaluation.truePositiveRate(I)D: I26 Branch 260 IF_ICMPNE L2811 - true
   * Goal 22. weka.classifiers.Evaluation.truePositiveRate(I)D: I26 Branch 260 IF_ICMPNE L2811 - false
   * Goal 23. weka.classifiers.Evaluation.truePositiveRate(I)D: I64 Branch 261 IFNE L2816 - false
   * Goal 24. weka.classifiers.Evaluation.weightedTruePositiveRate()D: I21 Branch 262 IF_ICMPGE L2831 - false
   * Goal 25. weka.classifiers.Evaluation.weightedTruePositiveRate()D: I33 Branch 263 IF_ICMPGE L2832 - true
   * Goal 26. weka.classifiers.Evaluation.weightedTruePositiveRate()D: I33 Branch 263 IF_ICMPGE L2832 - false
   * Goal 27. weka.classifiers.Evaluation.weightedTruePositiveRate()D: I85 Branch 264 IF_ICMPGE L2839 - false
   * Goal 28. weka.classifiers.Evaluation.falsePositiveRate(I)D: I18 Branch 281 IF_ICMPGE L2976 - true
   * Goal 29. weka.classifiers.Evaluation.falsePositiveRate(I)D: I18 Branch 281 IF_ICMPGE L2976 - false
   * Goal 30. weka.classifiers.Evaluation.falsePositiveRate(I)D: I26 Branch 282 IF_ICMPEQ L2977 - true
   * Goal 31. weka.classifiers.Evaluation.falsePositiveRate(I)D: I26 Branch 282 IF_ICMPEQ L2977 - false
   * Goal 32. weka.classifiers.Evaluation.falsePositiveRate(I)D: I38 Branch 283 IF_ICMPGE L2978 - true
   * Goal 33. weka.classifiers.Evaluation.falsePositiveRate(I)D: I38 Branch 283 IF_ICMPGE L2978 - false
   * Goal 34. weka.classifiers.Evaluation.falsePositiveRate(I)D: I46 Branch 284 IF_ICMPNE L2979 - true
   * Goal 35. weka.classifiers.Evaluation.falsePositiveRate(I)D: I46 Branch 284 IF_ICMPNE L2979 - false
   * Goal 36. weka.classifiers.Evaluation.falsePositiveRate(I)D: I91 Branch 285 IFNE L2986 - false
   * Goal 37. weka.classifiers.Evaluation.weightedFalsePositiveRate()D: I21 Branch 286 IF_ICMPGE L3001 - false
   * Goal 38. weka.classifiers.Evaluation.weightedFalsePositiveRate()D: I33 Branch 287 IF_ICMPGE L3002 - true
   * Goal 39. weka.classifiers.Evaluation.weightedFalsePositiveRate()D: I33 Branch 287 IF_ICMPGE L3002 - false
   * Goal 40. weka.classifiers.Evaluation.weightedFalsePositiveRate()D: I85 Branch 288 IF_ICMPGE L3009 - false
   * Goal 41. weka.classifiers.Evaluation.precision(I)D: I18 Branch 306 IF_ICMPGE L3200 - true
   * Goal 42. weka.classifiers.Evaluation.precision(I)D: I18 Branch 306 IF_ICMPGE L3200 - false
   * Goal 43. weka.classifiers.Evaluation.precision(I)D: I26 Branch 307 IF_ICMPNE L3201 - true
   * Goal 44. weka.classifiers.Evaluation.precision(I)D: I26 Branch 307 IF_ICMPNE L3201 - false
   * Goal 45. weka.classifiers.Evaluation.precision(I)D: I64 Branch 308 IFNE L3206 - false
   * Goal 46. weka.classifiers.Evaluation.weightedPrecision()D: I21 Branch 309 IF_ICMPGE L3221 - false
   * Goal 47. weka.classifiers.Evaluation.weightedPrecision()D: I33 Branch 310 IF_ICMPGE L3222 - true
   * Goal 48. weka.classifiers.Evaluation.weightedPrecision()D: I33 Branch 310 IF_ICMPGE L3222 - false
   * Goal 49. weka.classifiers.Evaluation.weightedPrecision()D: I85 Branch 311 IF_ICMPGE L3229 - false
   * Goal 50. weka.classifiers.Evaluation.fMeasure(I)D: I22 Branch 312 IFNE L3255 - false
   * Goal 51. weka.classifiers.Evaluation.weightedFMeasure()D: I21 Branch 313 IF_ICMPGE L3270 - false
   * Goal 52. weka.classifiers.Evaluation.weightedFMeasure()D: I33 Branch 314 IF_ICMPGE L3271 - true
   * Goal 53. weka.classifiers.Evaluation.weightedFMeasure()D: I33 Branch 314 IF_ICMPGE L3271 - false
   * Goal 54. weka.classifiers.Evaluation.weightedFMeasure()D: I85 Branch 315 IF_ICMPGE L3278 - false
   */

  @Test
  public void test34()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(testInstances0);
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(testInstances0.getNoClass());
      
      Instances instances0 = testInstances0.generate();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(instances0);
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(evaluation0);
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(testInstances0.getNoClass());
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      
      double double0 = evaluation0.pctCorrect();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(testInstances0.getNoClass());
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(Double.NaN, double0, 0.01D);
      
      String string0 = evaluation0.toClassDetailsString("   ");
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(string0);
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(testInstances0.getNoClass());
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("   \n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  //Test case number: 35
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.main([Ljava/lang/String;)V: I7 Branch 22 IFNE L801 - true
   */

  @Test
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Evaluation.main(stringArray0);
  }

  //Test case number: 36
  /*
   * 6 covered goals:
   * Goal 1. weka.classifiers.Evaluation.toCumulativeMarginDistributionString()Ljava/lang/String;: I7 Branch 222 IFNE L2453 - true
   * Goal 2. weka.classifiers.Evaluation.toCumulativeMarginDistributionString()Ljava/lang/String;: I46 Branch 223 IF_ICMPGT L2459 - true
   * Goal 3. weka.classifiers.Evaluation.toCumulativeMarginDistributionString()Ljava/lang/String;: I46 Branch 223 IF_ICMPGT L2459 - false
   * Goal 4. weka.classifiers.Evaluation.toCumulativeMarginDistributionString()Ljava/lang/String;: I58 Branch 224 IFEQ L2460 - true
   * Goal 5. weka.classifiers.Evaluation.toCumulativeMarginDistributionString()Ljava/lang/String;: I118 Branch 225 IFNE L2466 - true
   * Goal 6. weka.classifiers.Evaluation.toCumulativeMarginDistributionString()Ljava/lang/String;: I118 Branch 225 IFNE L2466 - false
   */

  @Test
  public void test36()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertNotNull(instances0);
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertNotNull(string0);
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(" -1       0    \n", string0);
  }

  //Test case number: 37
  /*
   * 5 covered goals:
   * Goal 1. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I360 Branch 350 IFEQ L3562 - false
   * Goal 2. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I380 Branch 351 IFEQ L3567 - false
   * Goal 3. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I436 Branch 352 IFEQ L3587 - false
   * Goal 4. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I467 Branch 353 IFEQ L3591 - true
   * Goal 5. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I467 Branch 353 IFEQ L3591 - false
   */

  @Test
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "LmJ";
      J48 j48_0 = new J48();
      assertNotNull(j48_0);
      assertEquals(1, j48_0.graphType());
      assertEquals(1, j48_0.getSeed());
      assertTrue(j48_0.getSubtreeRaising());
      assertEquals("Whether to use binary splits on nominal attributes when building the trees.", j48_0.binarySplitsTipText());
      assertEquals("Whether pruning is performed.", j48_0.unprunedTipText());
      assertFalse(j48_0.getDebug());
      assertEquals("Whether to consider the subtree raising operation when pruning.", j48_0.subtreeRaisingTipText());
      assertEquals("The seed used for randomizing the data when reduced-error pruning is used.", j48_0.seedTipText());
      assertEquals("Whether to save the training data for visualization.", j48_0.saveInstanceDataTipText());
      assertEquals("Determines the amount of data used for reduced-error pruning.  One fold is used for pruning, the rest for growing the tree.", j48_0.numFoldsTipText());
      assertFalse(j48_0.getSaveInstanceData());
      assertFalse(j48_0.getUnpruned());
      assertEquals("Whether MDL correction is used when finding splits on numeric attributes.", j48_0.useMDLcorrectionTipText());
      assertEquals(0.25F, j48_0.getConfidenceFactor(), 0.01F);
      assertFalse(j48_0.getReducedErrorPruning());
      assertEquals("The confidence factor used for pruning (smaller values incur more pruning).", j48_0.confidenceFactorTipText());
      assertEquals("Whether parts are removed that do not reduce training error.", j48_0.collapseTreeTipText());
      assertFalse(j48_0.getUseLaplace());
      assertEquals("If set to true, classifier may output additional info to the console.", j48_0.debugTipText());
      assertEquals(3, j48_0.getNumFolds());
      assertEquals("Whether counts at leaves are smoothed based on Laplace.", j48_0.useLaplaceTipText());
      assertTrue(j48_0.getCollapseTree());
      assertEquals("The minimum number of instances per leaf.", j48_0.minNumObjTipText());
      assertTrue(j48_0.getUseMDLcorrection());
      assertEquals(2, j48_0.getMinNumObj());
      assertEquals("Whether reduced-error pruning is used instead of C.4.5 pruning.", j48_0.reducedErrorPruningTipText());
      assertFalse(j48_0.getBinarySplits());
      
      try {
        String string0 = Evaluation.evaluateModel((Classifier) j48_0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.trees.J48:
         // 
         // -U
         // \tUse unpruned tree.
         // -O
         // \tDo not collapse tree.
         // -C <pruning confidence>
         // \tSet confidence threshold for pruning.
         // \t(default 0.25)
         // -M <minimum number of instances>
         // \tSet minimum number of instances per leaf.
         // \t(default 2)
         // -R
         // \tUse reduced error pruning.
         // -N <number of folds>
         // \tSet number of folds for reduced error
         // \tpruning. One fold is used as pruning set.
         // \t(default 3)
         // -B
         // \tUse binary splits only.
         // -S
         // \tDon't perform subtree raising.
         // -L
         // \tDo not clean up after the tree has been built.
         // -A
         // \tLaplace smoothing for predicted probabilities.
         // -J
         // \tDo not use MDL correction for info gain on numeric attributes.
         // -Q <seed>
         // \tSeed for random data shuffling (default 1).
         //
      }
  }

  //Test case number: 38
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.evaluateModelOnce(Lweka/classifiers/Classifier;Lweka/core/Instance;)D: root-Branch
   * Goal 2. weka.classifiers.Evaluation.unweightedMicroFmeasure()D: I23 Branch 318 IF_ICMPGE L3316 - true
   */

  @Test
  public void test38()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      assertNotNull(instances0);
      assertEquals(0, instances0.numClasses());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(0, instances0.numClasses());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      
      MultiScheme multiScheme0 = new MultiScheme();
      assertNotNull(multiScheme0);
      assertEquals(0, multiScheme0.getNumFolds());
      assertEquals("Class for selecting a classifier from among several using cross validation on the training data or the performance on the training data. Performance is measured based on percent correct (classification) or mean-squared error (regression).", multiScheme0.globalInfo());
      assertEquals("Whether debug information is output to console.", multiScheme0.debugTipText());
      assertEquals("The seed used for randomizing the data for cross-validation.", multiScheme0.seedTipText());
      assertEquals(1, multiScheme0.getSeed());
      assertEquals("The number of folds used for cross-validation (if 0, performance on training data will be used).", multiScheme0.numFoldsTipText());
      assertEquals(0, multiScheme0.getBestClassifierIndex());
      assertEquals("The classifiers to be chosen from.", multiScheme0.classifiersTipText());
      assertFalse(multiScheme0.getDebug());
      
      double double0 = evaluation0.unweightedMicroFmeasure();
      assertEquals(0, instances0.numClasses());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, double0, 0.01D);
      
      int[] intArray0 = new int[8];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-836.9367890338001), intArray0, 0);
      assertEquals(6, binarySparseInstance0.s_numericAfterDecimalPoint);
      assertNotNull(binarySparseInstance0);
      assertEquals((-836.9367890338001), binarySparseInstance0.weight(), 0.01D);
      assertEquals(0, binarySparseInstance0.numAttributes());
      assertEquals(8, binarySparseInstance0.numValues());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      try {
        double double1 = evaluation0.evaluateModelOnce((Classifier) multiScheme0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
      }
  }

  //Test case number: 39
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.handleCostOption(Ljava/lang/String;I)Lweka/classifiers/CostMatrix;: I12 Branch 166 IFEQ L1574 - true
   */

  @Test
  public void test39()  throws Throwable  {
      CostMatrix costMatrix0 = Evaluation.handleCostOption("", (-4193));
      assertNull(costMatrix0);
  }

  //Test case number: 40
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.pctIncorrect()D: root-Branch
   */

  @Test
  public void test40()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(testInstances0);
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      
      Instances instances0 = testInstances0.generate();
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(instances0);
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(evaluation0);
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      
      double double0 = evaluation0.pctIncorrect();
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  //Test case number: 41
  /*
   * 5 covered goals:
   * Goal 1. weka.classifiers.Evaluation.KBInformation()D: I7 Branch 206 IFNE L2317 - true
   * Goal 2. weka.classifiers.Evaluation.KBInformation()D: I35 Branch 207 IFEQ L2321 - true
   * Goal 3. weka.classifiers.Evaluation.KBRelativeInformation()D: I7 Branch 210 IFNE L2353 - true
   * Goal 4. weka.classifiers.Evaluation.KBRelativeInformation()D: I35 Branch 211 IFEQ L2357 - true
   * Goal 5. weka.classifiers.Evaluation.SFMeanSchemeEntropy()D: I7 Branch 217 IFNE L2409 - true
   */

  @Test
  public void test41()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      //  // Unstable assertion: assertNotNull(textDirectoryLoader0);
      //  // Unstable assertion: assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      //  // Unstable assertion: assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      //  // Unstable assertion: assertFalse(textDirectoryLoader0.getDebug());
      //  // Unstable assertion: assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      //  // Unstable assertion: assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      //  // Unstable assertion: assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      //  // Unstable assertion: assertFalse(textDirectoryLoader0.getOutputFilename());
      //  // Unstable assertion: assertEquals("", textDirectoryLoader0.getCharSet());
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      //  // Unstable assertion: assertNotNull(instances0);
      //  // Unstable assertion: assertEquals(0, instances0.numInstances());
      //  // Unstable assertion: assertEquals(2, instances0.numAttributes());
      //  // Unstable assertion: assertEquals(0, instances0.size());
      //  // Unstable assertion: assertTrue(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      //  // Unstable assertion: assertEquals(1, instances0.classIndex());
      //  // Unstable assertion: assertEquals(0, instances0.numClasses());
      //  // Unstable assertion: assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      //  // Unstable assertion: assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      //  // Unstable assertion: assertFalse(textDirectoryLoader0.getDebug());
      //  // Unstable assertion: assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      //  // Unstable assertion: assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      //  // Unstable assertion: assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      //  // Unstable assertion: assertFalse(textDirectoryLoader0.getOutputFilename());
      //  // Unstable assertion: assertEquals("", textDirectoryLoader0.getCharSet());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      //  // Unstable assertion: assertNotNull(evaluation0);
      //  // Unstable assertion: assertEquals(0, instances0.numInstances());
      //  // Unstable assertion: assertEquals(2, instances0.numAttributes());
      //  // Unstable assertion: assertEquals(0, instances0.size());
      //  // Unstable assertion: assertTrue(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      //  // Unstable assertion: assertEquals(1, instances0.classIndex());
      //  // Unstable assertion: assertEquals(0, instances0.numClasses());
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.kappa(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.correct(), 0.01D);
      //  // Unstable assertion: assertFalse(evaluation0.getDiscardPredictions());
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      //  // Unstable assertion: assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      //  // Unstable assertion: assertFalse(textDirectoryLoader0.getDebug());
      //  // Unstable assertion: assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      //  // Unstable assertion: assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      //  // Unstable assertion: assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      //  // Unstable assertion: assertFalse(textDirectoryLoader0.getOutputFilename());
      //  // Unstable assertion: assertEquals("", textDirectoryLoader0.getCharSet());
      
      double double0 = evaluation0.SFMeanSchemeEntropy();
      //  // Unstable assertion: assertEquals(0, instances0.numInstances());
      //  // Unstable assertion: assertEquals(2, instances0.numAttributes());
      //  // Unstable assertion: assertEquals(0, instances0.size());
      //  // Unstable assertion: assertTrue(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      //  // Unstable assertion: assertEquals(1, instances0.classIndex());
      //  // Unstable assertion: assertEquals(0, instances0.numClasses());
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.kappa(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.correct(), 0.01D);
      //  // Unstable assertion: assertFalse(evaluation0.getDiscardPredictions());
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      //  // Unstable assertion: assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      //  // Unstable assertion: assertFalse(textDirectoryLoader0.getDebug());
      //  // Unstable assertion: assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      //  // Unstable assertion: assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      //  // Unstable assertion: assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      //  // Unstable assertion: assertFalse(textDirectoryLoader0.getOutputFilename());
      //  // Unstable assertion: assertEquals("", textDirectoryLoader0.getCharSet());
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = evaluation0.KBRelativeInformation();
      //  // Unstable assertion: assertEquals(0, instances0.numInstances());
      //  // Unstable assertion: assertEquals(2, instances0.numAttributes());
      //  // Unstable assertion: assertEquals(0, instances0.size());
      //  // Unstable assertion: assertTrue(instances0.checkForStringAttributes());
      //  // Unstable assertion: assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      //  // Unstable assertion: assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      //  // Unstable assertion: assertEquals(1, instances0.classIndex());
      //  // Unstable assertion: assertEquals(0, instances0.numClasses());
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, evaluation0.kappa(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, evaluation0.correct(), 0.01D);
      //  // Unstable assertion: assertFalse(evaluation0.getDiscardPredictions());
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      //  // Unstable assertion: assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      //  // Unstable assertion: assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      //  // Unstable assertion: assertFalse(textDirectoryLoader0.getDebug());
      //  // Unstable assertion: assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      //  // Unstable assertion: assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      //  // Unstable assertion: assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      //  // Unstable assertion: assertFalse(textDirectoryLoader0.getOutputFilename());
      //  // Unstable assertion: assertEquals("", textDirectoryLoader0.getCharSet());
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  //Test case number: 42
  /*
   * 7 covered goals:
   * Goal 1. weka.classifiers.Evaluation.toSummaryString(Z)Ljava/lang/String;: root-Branch
   * Goal 2. weka.classifiers.Evaluation.setDiscardPredictions(Z)V: I12 Branch 6 IFEQ L449 - true
   * Goal 3. weka.classifiers.Evaluation.toSummaryString(Ljava/lang/String;Z)Ljava/lang/String;: I12 Branch 226 IFEQ L2512 - false
   * Goal 4. weka.classifiers.Evaluation.toSummaryString(Ljava/lang/String;Z)Ljava/lang/String;: I18 Branch 227 IFEQ L2512 - true
   * Goal 5. weka.classifiers.Evaluation.toSummaryString(Ljava/lang/String;Z)Ljava/lang/String;: I50 Branch 228 IFLE L2520 - true
   * Goal 6. weka.classifiers.Evaluation.toSummaryString(Ljava/lang/String;Z)Ljava/lang/String;: I625 Branch 237 IFEQ L2592 - true
   * Goal 7. weka.classifiers.Evaluation.toSummaryString(Ljava/lang/String;Z)Ljava/lang/String;: I689 Branch 238 IFLE L2599 - true
   */

  @Test
  public void test42()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(testInstances0);
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumNominalValues());
      
      Instances instances0 = testInstances0.generate();
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(instances0);
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(2, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumNominalValues());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(evaluation0);
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(2, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      
      String string0 = evaluation0.toSummaryString(true);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(string0);
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(2, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      evaluation0.setDiscardPredictions(false);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(2, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
  }

  //Test case number: 43
  /*
   * 4 covered goals:
   * Goal 1. weka.classifiers.Evaluation.priorEntropy()D: I7 Branch 203 IFNE L2293 - true
   * Goal 2. weka.classifiers.Evaluation.priorEntropy()D: I35 Branch 204 IFEQ L2298 - true
   * Goal 3. weka.classifiers.Evaluation.priorEntropy()D: I55 Branch 205 IF_ICMPGE L2302 - true
   * Goal 4. weka.classifiers.Evaluation.priorEntropy()D: I55 Branch 205 IF_ICMPGE L2302 - false
   */

  @Test
  public void test43()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(testInstances0);
      assertEquals(2, testInstances0.getNumClasses());
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      
      Instances instances0 = testInstances0.generate();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(instances0);
      assertEquals(2, testInstances0.getNumClasses());
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(evaluation0);
      assertEquals(2, testInstances0.getNumClasses());
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      
      double double0 = evaluation0.priorEntropy();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals(2, testInstances0.getNumClasses());
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.9940302114769565, double0, 0.01D);
  }

  //Test case number: 44
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.wekaStaticWrapper(Lweka/classifiers/Sourcable;Ljava/lang/String;)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test44()  throws Throwable  {
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      assertNotNull(adaBoostM1_0);
      assertEquals(10, adaBoostM1_0.getNumIterations());
      assertEquals(1, adaBoostM1_0.getSeed());
      assertFalse(adaBoostM1_0.getUseResampling());
      assertEquals("The random number seed to be used.", adaBoostM1_0.seedTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", adaBoostM1_0.debugTipText());
      assertEquals("Weight threshold for weight pruning.", adaBoostM1_0.weightThresholdTipText());
      assertEquals(100, adaBoostM1_0.getWeightThreshold());
      assertEquals("The number of iterations to be performed.", adaBoostM1_0.numIterationsTipText());
      assertEquals("The base classifier to be used.", adaBoostM1_0.classifierTipText());
      assertEquals("Whether resampling is used instead of reweighting.", adaBoostM1_0.useResamplingTipText());
      assertFalse(adaBoostM1_0.getDebug());
      
      try {
        String string0 = Evaluation.wekaStaticWrapper((Sourcable) adaBoostM1_0, "Class coSplexity | scheme          ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
      }
  }

  //Test case number: 45
  /*
   * 3 covered goals:
   * Goal 1. weka.classifiers.Evaluation.makeDistribution(D)[D: I13 Branch 360 IFEQ L3675 - false
   * Goal 2. weka.classifiers.Evaluation.updateNumericScores([D[DD)V: I28 Branch 384 IF_ICMPGE L3905 - true
   * Goal 3. weka.classifiers.Evaluation.updateNumericScores([D[DD)V: I28 Branch 384 IF_ICMPGE L3905 - false
   */

  @Test
  public void test45()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(testInstances0);
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      
      Instances instances0 = testInstances0.generate("ialim");
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(instances0);
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(evaluation0);
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      
      double[] doubleArray0 = evaluation0.makeDistribution(Double.NaN);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(doubleArray0);
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1974));
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  //Test case number: 46
  /*
   * 17 covered goals:
   * Goal 1. weka.classifiers.Evaluation.toClassDetailsString()Ljava/lang/String;: root-Branch
   * Goal 2. weka.classifiers.Evaluation.unclassified()D: root-Branch
   * Goal 3. weka.classifiers.Evaluation.weightedRecall()D: root-Branch
   * Goal 4. weka.classifiers.Evaluation.weightedAreaUnderROC()D: I21 Branch 8 IF_ICMPGE L493 - true
   * Goal 5. weka.classifiers.Evaluation.weightedAreaUnderROC()D: I85 Branch 10 IF_ICMPGE L501 - true
   * Goal 6. weka.classifiers.Evaluation.weightedAreaUnderPRC()D: I21 Branch 13 IF_ICMPGE L539 - true
   * Goal 7. weka.classifiers.Evaluation.weightedAreaUnderPRC()D: I85 Branch 15 IF_ICMPGE L547 - true
   * Goal 8. weka.classifiers.Evaluation.toClassDetailsString(Ljava/lang/String;)Ljava/lang/String;: I7 Branch 252 IFNE L2714 - true
   * Goal 9. weka.classifiers.Evaluation.toClassDetailsString(Ljava/lang/String;)Ljava/lang/String;: I57 Branch 253 IF_ICMPGE L2721 - true
   * Goal 10. weka.classifiers.Evaluation.weightedTruePositiveRate()D: I21 Branch 262 IF_ICMPGE L2831 - true
   * Goal 11. weka.classifiers.Evaluation.weightedTruePositiveRate()D: I85 Branch 264 IF_ICMPGE L2839 - true
   * Goal 12. weka.classifiers.Evaluation.weightedFalsePositiveRate()D: I21 Branch 286 IF_ICMPGE L3001 - true
   * Goal 13. weka.classifiers.Evaluation.weightedFalsePositiveRate()D: I85 Branch 288 IF_ICMPGE L3009 - true
   * Goal 14. weka.classifiers.Evaluation.weightedPrecision()D: I21 Branch 309 IF_ICMPGE L3221 - true
   * Goal 15. weka.classifiers.Evaluation.weightedPrecision()D: I85 Branch 311 IF_ICMPGE L3229 - true
   * Goal 16. weka.classifiers.Evaluation.weightedFMeasure()D: I21 Branch 313 IF_ICMPGE L3270 - true
   * Goal 17. weka.classifiers.Evaluation.weightedFMeasure()D: I85 Branch 315 IF_ICMPGE L3278 - true
   */

  @Test
  public void test46()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertNotNull(instances0);
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertNotNull(evaluation0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      
      String string0 = evaluation0.toClassDetailsString();
      assertNotNull(string0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double double0 = evaluation0.unclassified();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals("_Users_fabiopalomba_Documents_workspace_LunchEvosuite", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 47
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.handleCostOption(Ljava/lang/String;I)Lweka/classifiers/CostMatrix;: I6 Branch 165 IFNULL L1574 - true
   */

  @Test
  public void test47()  throws Throwable  {
      CostMatrix costMatrix0 = Evaluation.handleCostOption((String) null, 0);
      assertNull(costMatrix0);
  }

  //Test case number: 48
  /*
   * 15 covered goals:
   * Goal 1. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I144 Branch 23 IFNE L963 - false
   * Goal 2. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I151 Branch 24 IFEQ L963 - true
   * Goal 3. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I221 Branch 27 IFGT L976 - true
   * Goal 4. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I247 Branch 28 IF_ICMPGE L981 - true
   * Goal 5. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I247 Branch 28 IF_ICMPGE L981 - false
   * Goal 6. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I277 Branch 29 IFLE L986 - true
   * Goal 7. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I394 Branch 32 IFEQ L1017 - true
   * Goal 8. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I471 Branch 35 IFEQ L1030 - true
   * Goal 9. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I490 Branch 36 IFEQ L1034 - true
   * Goal 10. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I503 Branch 37 IFNE L1037 - false
   * Goal 11. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I511 Branch 38 IFNE L1038 - false
   * Goal 12. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I360 Branch 350 IFEQ L3562 - true
   * Goal 13. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I380 Branch 351 IFEQ L3567 - true
   * Goal 14. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I436 Branch 352 IFEQ L3587 - true
   * Goal 15. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I514 Branch 354 IFEQ L3599 - true
   */

  @Test
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      try {
        String string0 = Evaluation.evaluateModel((Classifier) null, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
      }
  }

  //Test case number: 49
  /*
   * 3 covered goals:
   * Goal 1. weka.classifiers.Evaluation.avgCost()D: root-Branch
   * Goal 2. weka.classifiers.Evaluation.handleCostOption(Ljava/lang/String;I)Lweka/classifiers/CostMatrix;: I6 Branch 165 IFNULL L1574 - false
   * Goal 3. weka.classifiers.Evaluation.handleCostOption(Ljava/lang/String;I)Lweka/classifiers/CostMatrix;: I12 Branch 166 IFEQ L1574 - false
   */

  @Test
  public void test49()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(testInstances0);
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      
      Instances instances0 = testInstances0.generate();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(instances0);
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numAttributes());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(evaluation0);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numAttributes());
      
      double double0 = evaluation0.avgCost();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numAttributes());
      assertEquals(Double.NaN, double0, 0.01D);
      
      try {
        CostMatrix costMatrix0 = Evaluation.handleCostOption(",+xF.#{7n(]g", (-4242));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
      }
  }

  //Test case number: 50
  /*
   * 3 covered goals:
   * Goal 1. weka.classifiers.Evaluation.evaluateModel(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/String;: root-Branch
   * Goal 2. weka.classifiers.Evaluation.KBMeanInformation()D: I7 Branch 208 IFNE L2335 - true
   * Goal 3. weka.classifiers.Evaluation.KBMeanInformation()D: I35 Branch 209 IFEQ L2339 - true
   */

  @Test
  public void test50()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(testInstances0);
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getSeed());
      
      Instances instances0 = testInstances0.generate();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(instances0);
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numAttributes());
      
      String[] stringArray0 = new String[4];
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(evaluation0);
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numAttributes());
      
      double double0 = evaluation0.KBMeanInformation();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(-1, testInstances0.getClassIndex());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumDate());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numAttributes());
      assertEquals(Double.NaN, double0, 0.01D);
      
      try {
        String string0 = Evaluation.evaluateModel("Average CoZt                      ", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name Average CoZt                      .
         //
      }
  }

  //Test case number: 51
  /*
   * 30 covered goals:
   * Goal 1. weka.classifiers.Evaluation.numTruePositives(I)D: I15 Branch 257 IF_ICMPGE L2785 - true
   * Goal 2. weka.classifiers.Evaluation.numTruePositives(I)D: I15 Branch 257 IF_ICMPGE L2785 - false
   * Goal 3. weka.classifiers.Evaluation.numTruePositives(I)D: I23 Branch 258 IF_ICMPNE L2786 - true
   * Goal 4. weka.classifiers.Evaluation.numTruePositives(I)D: I23 Branch 258 IF_ICMPNE L2786 - false
   * Goal 5. weka.classifiers.Evaluation.numTrueNegatives(I)D: I23 Branch 266 IF_ICMPEQ L2863 - true
   * Goal 6. weka.classifiers.Evaluation.numTrueNegatives(I)D: I43 Branch 268 IF_ICMPEQ L2865 - true
   * Goal 7. weka.classifiers.Evaluation.numFalsePositives(I)D: I15 Branch 277 IF_ICMPGE L2947 - true
   * Goal 8. weka.classifiers.Evaluation.numFalsePositives(I)D: I15 Branch 277 IF_ICMPGE L2947 - false
   * Goal 9. weka.classifiers.Evaluation.numFalsePositives(I)D: I23 Branch 278 IF_ICMPEQ L2948 - true
   * Goal 10. weka.classifiers.Evaluation.numFalsePositives(I)D: I23 Branch 278 IF_ICMPEQ L2948 - false
   * Goal 11. weka.classifiers.Evaluation.numFalsePositives(I)D: I35 Branch 279 IF_ICMPGE L2949 - true
   * Goal 12. weka.classifiers.Evaluation.numFalsePositives(I)D: I35 Branch 279 IF_ICMPGE L2949 - false
   * Goal 13. weka.classifiers.Evaluation.numFalsePositives(I)D: I43 Branch 280 IF_ICMPNE L2950 - true
   * Goal 14. weka.classifiers.Evaluation.numFalsePositives(I)D: I43 Branch 280 IF_ICMPNE L2950 - false
   * Goal 15. weka.classifiers.Evaluation.numFalseNegatives(I)D: I15 Branch 289 IF_ICMPGE L3032 - true
   * Goal 16. weka.classifiers.Evaluation.numFalseNegatives(I)D: I15 Branch 289 IF_ICMPGE L3032 - false
   * Goal 17. weka.classifiers.Evaluation.numFalseNegatives(I)D: I23 Branch 290 IF_ICMPNE L3033 - true
   * Goal 18. weka.classifiers.Evaluation.numFalseNegatives(I)D: I23 Branch 290 IF_ICMPNE L3033 - false
   * Goal 19. weka.classifiers.Evaluation.numFalseNegatives(I)D: I35 Branch 291 IF_ICMPGE L3034 - true
   * Goal 20. weka.classifiers.Evaluation.numFalseNegatives(I)D: I35 Branch 291 IF_ICMPGE L3034 - false
   * Goal 21. weka.classifiers.Evaluation.numFalseNegatives(I)D: I43 Branch 292 IF_ICMPEQ L3035 - true
   * Goal 22. weka.classifiers.Evaluation.numFalseNegatives(I)D: I43 Branch 292 IF_ICMPEQ L3035 - false
   * Goal 23. weka.classifiers.Evaluation.matthewsCorrelationCoefficient(I)D: I65 Branch 301 IFNE L3120 - false
   * Goal 24. weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I21 Branch 302 IF_ICMPGE L3136 - true
   * Goal 25. weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I21 Branch 302 IF_ICMPGE L3136 - false
   * Goal 26. weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I33 Branch 303 IF_ICMPGE L3137 - true
   * Goal 27. weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I33 Branch 303 IF_ICMPGE L3137 - false
   * Goal 28. weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I85 Branch 304 IF_ICMPGE L3144 - true
   * Goal 29. weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I85 Branch 304 IF_ICMPGE L3144 - false
   * Goal 30. weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I99 Branch 305 IFNE L3146 - false
   */

  @Test
  public void test51()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(testInstances0);
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      
      Instances instances0 = testInstances0.generate("zCP7pdL1M]7");
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(instances0);
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(evaluation0);
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  //Test case number: 52
  /*
   * 5 covered goals:
   * Goal 1. weka.classifiers.Evaluation.evaluateModelOnceAndRecordPrediction(Lweka/classifiers/Classifier;Lweka/core/Instance;)D: root-Branch
   * Goal 2. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;Lweka/core/Instances;[Ljava/lang/Object;)[D: I17 Branch 167 IFLE L1640 - false
   * Goal 3. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;Lweka/core/Instances;[Ljava/lang/Object;)[D: I32 Branch 168 IFEQ L1644 - true
   * Goal 4. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;Lweka/core/Instances;[Ljava/lang/Object;)[D: I110 Branch 171 IF_ICMPGE L1658 - false
   * Goal 5. weka.classifiers.Evaluation.evaluationForSingleInstance(Lweka/classifiers/Classifier;Lweka/core/Instance;Z)D: I19 Branch 181 IFEQ L1726 - true
   */

  @Test
  public void test52()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(testInstances0);
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      
      Instances instances0 = testInstances0.generate("ialim");
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(instances0);
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(evaluation0);
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      
      SGD sGD0 = new SGD();
      assertEquals(2, sGD0.SQUAREDLOSS);
      assertEquals(0, sGD0.HINGE);
      assertEquals(1, sGD0.LOGLOSS);
      assertNotNull(sGD0);
      assertEquals(500, sGD0.getEpochs());
      assertEquals(0.01, sGD0.getLearningRate(), 0.01D);
      assertFalse(sGD0.getDontNormalize());
      assertEquals("The loss function to use. Hinge loss (SVM), log loss (logistic regression) or squared loss (regression).", sGD0.lossFunctionTipText());
      assertFalse(sGD0.getDontReplaceMissing());
      assertEquals("Implements stochastic gradient descent for learning various linear models (binary class SVM, binary class logistic regression and linear regression). Globally replaces all missing values and transforms nominal attributes into binary ones. It also normalizes all attributes, so the coefficients in the output are based on the normalized data.\nFor numeric class attributes, the squared loss function (2) must be used.", sGD0.globalInfo());
      assertEquals(1, sGD0.getSeed());
      assertEquals("The number of epochs to perform (batch learning). The total number of iterations is epochs * num instances.", sGD0.epochsTipText());
      assertEquals("The learning rate. If normalization is turned off (as it is automatically for streaming data), thenthe default learning rate will need to be reduced (try 0.0001).", sGD0.learningRateTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", sGD0.debugTipText());
      assertEquals("Turn off global replacement of missing values", sGD0.dontReplaceMissingTipText());
      assertFalse(sGD0.getDebug());
      assertEquals("The regularization constant. (default = 0.0001)", sGD0.lambdaTipText());
      assertEquals(1.0E-4, sGD0.getLambda(), 0.01D);
      assertEquals("Turn normalization off", sGD0.dontNormalizeTipText());
      assertEquals("The random number seed to be used.", sGD0.seedTipText());
      
      Object[] objectArray0 = new Object[20];
      try {
        double[] doubleArray0 = evaluation0.evaluateModel((Classifier) sGD0, instances0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 53
  /*
   * 6 covered goals:
   * Goal 1. weka.classifiers.Evaluation.numTrueNegatives(I)D: I15 Branch 265 IF_ICMPGE L2862 - true
   * Goal 2. weka.classifiers.Evaluation.numTrueNegatives(I)D: I15 Branch 265 IF_ICMPGE L2862 - false
   * Goal 3. weka.classifiers.Evaluation.numTrueNegatives(I)D: I23 Branch 266 IF_ICMPEQ L2863 - false
   * Goal 4. weka.classifiers.Evaluation.numTrueNegatives(I)D: I35 Branch 267 IF_ICMPGE L2864 - true
   * Goal 5. weka.classifiers.Evaluation.numTrueNegatives(I)D: I35 Branch 267 IF_ICMPGE L2864 - false
   * Goal 6. weka.classifiers.Evaluation.numTrueNegatives(I)D: I43 Branch 268 IF_ICMPEQ L2865 - false
   */

  @Test
  public void test53()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(testInstances0);
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumAttributes());
      
      Instances instances0 = testInstances0.generate("        else if (i.attribute(j).isNumeric())\n");
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(instances0);
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.numInstances());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(evaluation0);
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.numInstances());
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      
      double double0 = evaluation0.numTrueNegatives((-1982));
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.numInstances());
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 54
  /*
   * 7 covered goals:
   * Goal 1. weka.classifiers.Evaluation.trueNegativeRate(I)D: I18 Branch 269 IF_ICMPGE L2891 - true
   * Goal 2. weka.classifiers.Evaluation.trueNegativeRate(I)D: I18 Branch 269 IF_ICMPGE L2891 - false
   * Goal 3. weka.classifiers.Evaluation.trueNegativeRate(I)D: I26 Branch 270 IF_ICMPEQ L2892 - false
   * Goal 4. weka.classifiers.Evaluation.trueNegativeRate(I)D: I38 Branch 271 IF_ICMPGE L2893 - true
   * Goal 5. weka.classifiers.Evaluation.trueNegativeRate(I)D: I38 Branch 271 IF_ICMPGE L2893 - false
   * Goal 6. weka.classifiers.Evaluation.trueNegativeRate(I)D: I46 Branch 272 IF_ICMPEQ L2894 - false
   * Goal 7. weka.classifiers.Evaluation.trueNegativeRate(I)D: I91 Branch 273 IFNE L2901 - false
   */

  @Test
  public void test54()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(testInstances0);
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      
      Instances instances0 = testInstances0.generate("LmJ");
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(instances0);
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(evaluation0);
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      
      double double0 = evaluation0.trueNegativeRate(11853);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 55
  /*
   * 3 covered goals:
   * Goal 1. weka.classifiers.Evaluation.getClassPriors()[D: root-Branch
   * Goal 2. weka.classifiers.Evaluation.sizeOfPredictedRegions()D: I7 Branch 189 IFNE L2031 - false
   * Goal 3. weka.classifiers.Evaluation.sizeOfPredictedRegions()D: I13 Branch 190 IFNE L2031 - true
   */

  @Test
  public void test55()  throws Throwable  {
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      assertNotNull(precomputedKernelMatrixKernel0);
      assertEquals("The file holding the kernel matrix.", precomputedKernelMatrixKernel0.kernelMatrixFileTipText());
      assertEquals(0, precomputedKernelMatrixKernel0.numCacheHits());
      assertEquals("Turns on the output of debugging information.", precomputedKernelMatrixKernel0.debugTipText());
      assertEquals(0, precomputedKernelMatrixKernel0.numEvals());
      assertFalse(precomputedKernelMatrixKernel0.getChecksTurnedOff());
      assertEquals("Turns time-consuming checks off - use with caution.", precomputedKernelMatrixKernel0.checksTurnedOffTipText());
      assertEquals("This kernel is based on a static kernel matrix that is read from a file. Instances must have a single nominal attribute (excluding the class). This attribute must be the first attribute in the file and its values are used to reference rows/columns in the kernel matrix. The second attribute must be the class attribute.", precomputedKernelMatrixKernel0.globalInfo());
      assertFalse(precomputedKernelMatrixKernel0.getDebug());
      
      Capabilities capabilities0 = precomputedKernelMatrixKernel0.getCapabilities();
      assertNotNull(capabilities0);
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals("The file holding the kernel matrix.", precomputedKernelMatrixKernel0.kernelMatrixFileTipText());
      assertEquals(0, precomputedKernelMatrixKernel0.numCacheHits());
      assertEquals("Turns on the output of debugging information.", precomputedKernelMatrixKernel0.debugTipText());
      assertEquals(0, precomputedKernelMatrixKernel0.numEvals());
      assertFalse(precomputedKernelMatrixKernel0.getChecksTurnedOff());
      assertEquals("Turns time-consuming checks off - use with caution.", precomputedKernelMatrixKernel0.checksTurnedOffTipText());
      assertEquals("This kernel is based on a static kernel matrix that is read from a file. Instances must have a single nominal attribute (excluding the class). This attribute must be the first attribute in the file and its values are used to reference rows/columns in the kernel matrix. The second attribute must be the class attribute.", precomputedKernelMatrixKernel0.globalInfo());
      assertFalse(precomputedKernelMatrixKernel0.getDebug());
      
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(testInstances0);
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals("The file holding the kernel matrix.", precomputedKernelMatrixKernel0.kernelMatrixFileTipText());
      assertEquals(0, precomputedKernelMatrixKernel0.numCacheHits());
      assertEquals("Turns on the output of debugging information.", precomputedKernelMatrixKernel0.debugTipText());
      assertEquals(0, precomputedKernelMatrixKernel0.numEvals());
      assertFalse(precomputedKernelMatrixKernel0.getChecksTurnedOff());
      assertEquals("Turns time-consuming checks off - use with caution.", precomputedKernelMatrixKernel0.checksTurnedOffTipText());
      assertEquals("This kernel is based on a static kernel matrix that is read from a file. Instances must have a single nominal attribute (excluding the class). This attribute must be the first attribute in the file and its values are used to reference rows/columns in the kernel matrix. The second attribute must be the class attribute.", precomputedKernelMatrixKernel0.globalInfo());
      assertFalse(precomputedKernelMatrixKernel0.getDebug());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      
      Instances instances0 = testInstances0.generate();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(instances0);
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals("The file holding the kernel matrix.", precomputedKernelMatrixKernel0.kernelMatrixFileTipText());
      assertEquals(0, precomputedKernelMatrixKernel0.numCacheHits());
      assertEquals("Turns on the output of debugging information.", precomputedKernelMatrixKernel0.debugTipText());
      assertEquals(0, precomputedKernelMatrixKernel0.numEvals());
      assertFalse(precomputedKernelMatrixKernel0.getChecksTurnedOff());
      assertEquals("Turns time-consuming checks off - use with caution.", precomputedKernelMatrixKernel0.checksTurnedOffTipText());
      assertEquals("This kernel is based on a static kernel matrix that is read from a file. Instances must have a single nominal attribute (excluding the class). This attribute must be the first attribute in the file and its values are used to reference rows/columns in the kernel matrix. The second attribute must be the class attribute.", precomputedKernelMatrixKernel0.globalInfo());
      assertFalse(precomputedKernelMatrixKernel0.getDebug());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(4, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(evaluation0);
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals("The file holding the kernel matrix.", precomputedKernelMatrixKernel0.kernelMatrixFileTipText());
      assertEquals(0, precomputedKernelMatrixKernel0.numCacheHits());
      assertEquals("Turns on the output of debugging information.", precomputedKernelMatrixKernel0.debugTipText());
      assertEquals(0, precomputedKernelMatrixKernel0.numEvals());
      assertFalse(precomputedKernelMatrixKernel0.getChecksTurnedOff());
      assertEquals("Turns time-consuming checks off - use with caution.", precomputedKernelMatrixKernel0.checksTurnedOffTipText());
      assertEquals("This kernel is based on a static kernel matrix that is read from a file. Instances must have a single nominal attribute (excluding the class). This attribute must be the first attribute in the file and its values are used to reference rows/columns in the kernel matrix. The second attribute must be the class attribute.", precomputedKernelMatrixKernel0.globalInfo());
      assertFalse(precomputedKernelMatrixKernel0.getDebug());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(4, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(doubleArray0);
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals("The file holding the kernel matrix.", precomputedKernelMatrixKernel0.kernelMatrixFileTipText());
      assertEquals(0, precomputedKernelMatrixKernel0.numCacheHits());
      assertEquals("Turns on the output of debugging information.", precomputedKernelMatrixKernel0.debugTipText());
      assertEquals(0, precomputedKernelMatrixKernel0.numEvals());
      assertFalse(precomputedKernelMatrixKernel0.getChecksTurnedOff());
      assertEquals("Turns time-consuming checks off - use with caution.", precomputedKernelMatrixKernel0.checksTurnedOffTipText());
      assertEquals("This kernel is based on a static kernel matrix that is read from a file. Instances must have a single nominal attribute (excluding the class). This attribute must be the first attribute in the file and its values are used to reference rows/columns in the kernel matrix. The second attribute must be the class attribute.", precomputedKernelMatrixKernel0.globalInfo());
      assertFalse(precomputedKernelMatrixKernel0.getDebug());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(4, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertArrayEquals(new double[] {8.0, 5.0, 5.0, 6.0}, doubleArray0, 0.01);
      
      double double0 = evaluation0.sizeOfPredictedRegions();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals("The file holding the kernel matrix.", precomputedKernelMatrixKernel0.kernelMatrixFileTipText());
      assertEquals(0, precomputedKernelMatrixKernel0.numCacheHits());
      assertEquals("Turns on the output of debugging information.", precomputedKernelMatrixKernel0.debugTipText());
      assertEquals(0, precomputedKernelMatrixKernel0.numEvals());
      assertFalse(precomputedKernelMatrixKernel0.getChecksTurnedOff());
      assertEquals("Turns time-consuming checks off - use with caution.", precomputedKernelMatrixKernel0.checksTurnedOffTipText());
      assertEquals("This kernel is based on a static kernel matrix that is read from a file. Instances must have a single nominal attribute (excluding the class). This attribute must be the first attribute in the file and its values are used to reference rows/columns in the kernel matrix. The second attribute must be the class attribute.", precomputedKernelMatrixKernel0.globalInfo());
      assertFalse(precomputedKernelMatrixKernel0.getDebug());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertEquals(1, instances0.classIndex());
      assertEquals(4, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  //Test case number: 56
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.makeDistribution(D)[D: I13 Branch 360 IFEQ L3675 - true
   * Goal 2. weka.classifiers.Evaluation.makeDistribution(D)[D: I25 Branch 361 IFEQ L3678 - false
   */

  @Test
  public void test56()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(testInstances0);
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getClassType());
      
      Instances instances0 = testInstances0.generate();
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(instances0);
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getClassType());
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertNotNull(evaluation0);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(1, testInstances0.getClassType());
      
      // Undeclared exception!
      try {
        double[] doubleArray0 = evaluation0.makeDistribution((-2310));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2310
         //
      }
  }

  //Test case number: 57
  /*
   * 16 covered goals:
   * Goal 1. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;)V: root-Branch
   * Goal 2. weka.classifiers.Evaluation.getDiscardPredictions()Z: root-Branch
   * Goal 3. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I58 Branch 1 IFEQ L410 - false
   * Goal 4. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I86 Branch 2 IF_ICMPGE L413 - true
   * Goal 5. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I86 Branch 2 IF_ICMPGE L413 - false
   * Goal 6. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I116 Branch 3 IFNULL L418 - true
   * Goal 7. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I12 Branch 319 IFNE L3335 - true
   * Goal 8. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I168 Branch 324 IF_ICMPGE L3362 - true
   * Goal 9. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I168 Branch 324 IF_ICMPGE L3362 - false
   * Goal 10. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I201 Branch 325 IF_ICMPGE L3366 - true
   * Goal 11. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I201 Branch 325 IF_ICMPGE L3366 - false
   * Goal 12. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I211 Branch 326 IFNE L3367 - false
   * Goal 13. weka.classifiers.Evaluation.addNumericTrainClass(DD)V: I9 Branch 385 IFLE L3931 - true
   * Goal 14. weka.classifiers.Evaluation.addNumericTrainClass(DD)V: I24 Branch 386 IFGE L3934 - true
   * Goal 15. weka.classifiers.Evaluation.addNumericTrainClass(DD)V: I37 Branch 387 IFNONNULL L3939 - false
   * Goal 16. weka.classifiers.Evaluation.addNumericTrainClass(DD)V: I60 Branch 388 IF_ICMPNE L3943 - true
   */

  @Test
  public void test57()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(testInstances0);
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      
      Instances instances0 = testInstances0.generate();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(instances0);
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertNotNull(evaluation0);
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
      assertFalse(boolean0);
      
      evaluation0.addNumericTrainClass(0.0, 0.0);
      assertEquals((-1), testInstances0.CLASS_IS_LAST);
      assertEquals((-2), testInstances0.NO_CLASS);
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(-1, testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(Double.NaN, evaluation0.pctUnclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01D);
      assertEquals(0.0, evaluation0.numInstances(), 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01D);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootRelativeSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01D);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01D);
      assertEquals(1.0, evaluation0.kappa(), 0.01D);
      assertEquals(0.0, evaluation0.incorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01D);
      assertEquals(Double.NaN, evaluation0.avgCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01D);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(0.0, evaluation0.totalCost(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.weightedMatthewsCorrelation(), 0.01D);
      assertEquals(Double.NaN, evaluation0.relativeAbsoluteError(), 0.01D);
      assertEquals(0.0, evaluation0.correct(), 0.01D);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01D);
  }
}
