/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 17 10:09:37 GMT 2015
 */

package weka.classifiers;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.junit.runner.RunWith;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.Sourcable;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.meta.Bagging;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.ZeroR;
import weka.core.Capabilities;
import weka.core.ChebyshevDistance;
import weka.core.DenseInstance;
import weka.core.FastVector;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.TestInstances;
import weka.core.converters.ConverterUtils;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.balltrees.BallNode;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.setNumericPriorsFromBuffer()V: I18 Branch 389 IF_ICMPGE L3965 - true
   */

  @Test
  public void test00()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.makeDistribution(D)[D: I13 Branch 360 IFEQ L3675 - true
   * Goal 2. weka.classifiers.Evaluation.makeDistribution(D)[D: I25 Branch 361 IFEQ L3678 - false
   */

  @Test
  public void test01()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try {
        double[] doubleArray0 = evaluation0.makeDistribution((-1681));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1681
         //
      }
  }

  //Test case number: 2
  /*
   * 3 covered goals:
   * Goal 1. weka.classifiers.Evaluation.getGlobalInfo(Lweka/classifiers/Classifier;)Ljava/lang/String;: I42 Branch 355 IF_ICMPGE L3625 - false
   * Goal 2. weka.classifiers.Evaluation.getGlobalInfo(Lweka/classifiers/Classifier;)Ljava/lang/String;: I65 Branch 356 IFLE L3628 - true
   * Goal 3. weka.classifiers.Evaluation.getGlobalInfo(Lweka/classifiers/Classifier;)Ljava/lang/String;: I65 Branch 356 IFLE L3628 - false
   */

  @Test
  public void test02()  throws Throwable  {
      Bagging bagging0 = new Bagging();
      String string0 = Evaluation.makeOptionString(bagging0, true);
      assertEquals("\n\nGeneral options:\n\n-h or -help\n\tOutput help information.\n-synopsis or -info\n\tOutput synopsis for classifier (use in conjunction  with -h)\n-t <name of training file>\n\tSets training file.\n-T <name of test file>\n\tSets test file. If missing, a cross-validation will be performed\n\ton the training data.\n-c <class index>\n\tSets index of class attribute (default: last).\n-x <number of folds>\n\tSets number of folds for cross-validation (default: 10).\n-no-cv\n\tDo not perform any cross validation.\n-split-percentage <percentage>\n\tSets the percentage for the train/test set split, e.g., 66.\n-preserve-order\n\tPreserves the order in the percentage split.\n-s <random number seed>\n\tSets random number seed for cross-validation or percentage split\n\t(default: 1).\n-m <name of file with cost matrix>\n\tSets file with cost matrix.\n-l <name of input file>\n\tSets model input file. In case the filename ends with '.xml',\n\ta PMML file is loaded or, if that fails, options are loaded\n\tfrom the XML file.\n-d <name of output file>\n\tSets model output file. In case the filename ends with '.xml',\n\tonly the options are saved to the XML file, not the model.\n-v\n\tOutputs no statistics for training data.\n-o\n\tOutputs statistics only, not the classifier.\n-i\n\tOutputs detailed information-retrieval statistics for each class.\n-k\n\tOutputs information-theoretic statistics.\n-classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"\n\tUses the specified class for generating the classification output.\n\tE.g.: weka.classifiers.evaluation.output.prediction.PlainText\n-p range\n\tOutputs predictions for test instances (or the train instances if\n\tno test instances provided and -no-cv is used), along with the \n\tattributes in the specified range (and nothing else). \n\tUse '-p 0' if no attributes are desired.\n\tDeprecated: use \"-classifications ...\" instead.\n-distribution\n\tOutputs the distribution instead of only the prediction\n\tin conjunction with the '-p' option (only nominal classes).\n\tDeprecated: use \"-classifications ...\" instead.\n-r\n\tOnly outputs cumulative margin distribution.\n-xml filename | xml-string\n\tRetrieves the options from the XML-data instead of the command line.\n-threshold-file <file>\n\tThe file to save the threshold data to.\n\tThe format is determined by the extensions, e.g., '.arff' for ARFF \n\tformat or '.csv' for CSV.\n-threshold-label <label>\n\tThe class label to determine the threshold data for\n\t(default is the first label)\n\nOptions specific to weka.classifiers.meta.Bagging:\n\n-P\n\tSize of each bag, as a percentage of the\n\ttraining set size. (default 100)\n-O\n\tCalculate the out of bag error.\n-S <num>\n\tRandom number seed.\n\t(default 1)\n-num-slots <num>\n\tNumber of execution slots.\n\t(default 1 - i.e. no parallelism)\n-I <num>\n\tNumber of iterations.\n\t(default 10)\n-D\n\tIf set, classifier is run in debug mode and\n\tmay output additional info to the console\n-W\n\tFull name of base classifier.\n\t(default: weka.classifiers.trees.REPTree)\n\nOptions specific to classifier weka.classifiers.trees.REPTree:\n\n-M <minimum number of instances>\n\tSet minimum number of instances per leaf (default 2).\n-V <minimum variance for split>\n\tSet minimum numeric class variance proportion\n\tof train variance for split (default 1e-3).\n-N <number of folds>\n\tNumber of folds for reduced error pruning (default 3).\n-S <seed>\n\tSeed for random data shuffling (default 1).\n-P\n\tNo pruning.\n-L\n\tMaximum tree depth (default -1, no maximum)\n-I\n\tInitial class value count (default 0)\n-R\n\tSpread initial count over all class values (i.e. don't use 1 per value)\n\nSynopsis for weka.classifiers.meta.Bagging:\n\nClass for bagging a classifier to reduce variance. Can do classification and regression depending on the base learner. \n\nFor more information, see\n\nLeo Breiman (1996). Bagging predictors. Machine Learning. 24(2):123-140.", string0);
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I436 Branch 352 IFEQ L3587 - true
   * Goal 2. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I514 Branch 354 IFEQ L3599 - false
   */

  @Test
  public void test03()  throws Throwable  {
      String string0 = Evaluation.makeOptionString((Classifier) null, true);
      assertEquals("\n\nGeneral options:\n\n-h or -help\n\tOutput help information.\n-synopsis or -info\n\tOutput synopsis for classifier (use in conjunction  with -h)\n-t <name of training file>\n\tSets training file.\n-T <name of test file>\n\tSets test file. If missing, a cross-validation will be performed\n\ton the training data.\n-c <class index>\n\tSets index of class attribute (default: last).\n-x <number of folds>\n\tSets number of folds for cross-validation (default: 10).\n-no-cv\n\tDo not perform any cross validation.\n-split-percentage <percentage>\n\tSets the percentage for the train/test set split, e.g., 66.\n-preserve-order\n\tPreserves the order in the percentage split.\n-s <random number seed>\n\tSets random number seed for cross-validation or percentage split\n\t(default: 1).\n-m <name of file with cost matrix>\n\tSets file with cost matrix.\n-l <name of input file>\n\tSets model input file. In case the filename ends with '.xml',\n\ta PMML file is loaded or, if that fails, options are loaded\n\tfrom the XML file.\n-d <name of output file>\n\tSets model output file. In case the filename ends with '.xml',\n\tonly the options are saved to the XML file, not the model.\n-v\n\tOutputs no statistics for training data.\n-o\n\tOutputs statistics only, not the classifier.\n-i\n\tOutputs detailed information-retrieval statistics for each class.\n-k\n\tOutputs information-theoretic statistics.\n-classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"\n\tUses the specified class for generating the classification output.\n\tE.g.: weka.classifiers.evaluation.output.prediction.PlainText\n-p range\n\tOutputs predictions for test instances (or the train instances if\n\tno test instances provided and -no-cv is used), along with the \n\tattributes in the specified range (and nothing else). \n\tUse '-p 0' if no attributes are desired.\n\tDeprecated: use \"-classifications ...\" instead.\n-distribution\n\tOutputs the distribution instead of only the prediction\n\tin conjunction with the '-p' option (only nominal classes).\n\tDeprecated: use \"-classifications ...\" instead.\n-r\n\tOnly outputs cumulative margin distribution.\n-xml filename | xml-string\n\tRetrieves the options from the XML-data instead of the command line.\n-threshold-file <file>\n\tThe file to save the threshold data to.\n\tThe format is determined by the extensions, e.g., '.arff' for ARFF \n\tformat or '.csv' for CSV.\n-threshold-label <label>\n\tThe class label to determine the threshold data for\n\t(default is the first label)\n", string0);
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I360 Branch 350 IFEQ L3562 - false
   * Goal 2. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I380 Branch 351 IFEQ L3567 - true
   */

  @Test
  public void test04()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      String string0 = Evaluation.makeOptionString(zeroR0, false);
      assertEquals("\n\nGeneral options:\n\n-h or -help\n\tOutput help information.\n-synopsis or -info\n\tOutput synopsis for classifier (use in conjunction  with -h)\n-t <name of training file>\n\tSets training file.\n-T <name of test file>\n\tSets test file. If missing, a cross-validation will be performed\n\ton the training data.\n-c <class index>\n\tSets index of class attribute (default: last).\n-x <number of folds>\n\tSets number of folds for cross-validation (default: 10).\n-no-cv\n\tDo not perform any cross validation.\n-split-percentage <percentage>\n\tSets the percentage for the train/test set split, e.g., 66.\n-preserve-order\n\tPreserves the order in the percentage split.\n-s <random number seed>\n\tSets random number seed for cross-validation or percentage split\n\t(default: 1).\n-m <name of file with cost matrix>\n\tSets file with cost matrix.\n-l <name of input file>\n\tSets model input file. In case the filename ends with '.xml',\n\ta PMML file is loaded or, if that fails, options are loaded\n\tfrom the XML file.\n-d <name of output file>\n\tSets model output file. In case the filename ends with '.xml',\n\tonly the options are saved to the XML file, not the model.\n-v\n\tOutputs no statistics for training data.\n-o\n\tOutputs statistics only, not the classifier.\n-i\n\tOutputs detailed information-retrieval statistics for each class.\n-k\n\tOutputs information-theoretic statistics.\n-classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"\n\tUses the specified class for generating the classification output.\n\tE.g.: weka.classifiers.evaluation.output.prediction.PlainText\n-p range\n\tOutputs predictions for test instances (or the train instances if\n\tno test instances provided and -no-cv is used), along with the \n\tattributes in the specified range (and nothing else). \n\tUse '-p 0' if no attributes are desired.\n\tDeprecated: use \"-classifications ...\" instead.\n-distribution\n\tOutputs the distribution instead of only the prediction\n\tin conjunction with the '-p' option (only nominal classes).\n\tDeprecated: use \"-classifications ...\" instead.\n-r\n\tOnly outputs cumulative margin distribution.\n-z <class name>\n\tOnly outputs the source representation of the classifier,\n\tgiving it the supplied name.\n-xml filename | xml-string\n\tRetrieves the options from the XML-data instead of the command line.\n-threshold-file <file>\n\tThe file to save the threshold data to.\n\tThe format is determined by the extensions, e.g., '.arff' for ARFF \n\tformat or '.csv' for CSV.\n-threshold-label <label>\n\tThe class label to determine the threshold data for\n\t(default is the first label)\n\nOptions specific to weka.classifiers.rules.ZeroR:\n\n-D\n\tIf set, classifier is run in debug mode and\n\tmay output additional info to the console\n", string0);
  }

  //Test case number: 5
  /*
   * 21 covered goals:
   * Goal 1. weka.classifiers.Evaluation.equals(Ljava/lang/Object;)Z: I34 Branch 331 IF_ICMPEQ L3430 - true
   * Goal 2. weka.classifiers.Evaluation.equals(Ljava/lang/Object;)Z: I48 Branch 332 IF_ICMPEQ L3432 - true
   * Goal 3. weka.classifiers.Evaluation.equals(Ljava/lang/Object;)Z: I63 Branch 333 IFEQ L3435 - true
   * Goal 4. weka.classifiers.Evaluation.equals(Ljava/lang/Object;)Z: I78 Branch 334 IFEQ L3437 - true
   * Goal 5. weka.classifiers.Evaluation.equals(Ljava/lang/Object;)Z: I93 Branch 335 IFEQ L3439 - true
   * Goal 6. weka.classifiers.Evaluation.equals(Ljava/lang/Object;)Z: I108 Branch 336 IFEQ L3441 - true
   * Goal 7. weka.classifiers.Evaluation.equals(Ljava/lang/Object;)Z: I123 Branch 337 IFEQ L3443 - true
   * Goal 8. weka.classifiers.Evaluation.equals(Ljava/lang/Object;)Z: I138 Branch 338 IFEQ L3446 - true
   * Goal 9. weka.classifiers.Evaluation.equals(Ljava/lang/Object;)Z: I153 Branch 339 IFEQ L3448 - true
   * Goal 10. weka.classifiers.Evaluation.equals(Ljava/lang/Object;)Z: I168 Branch 340 IFEQ L3450 - true
   * Goal 11. weka.classifiers.Evaluation.equals(Ljava/lang/Object;)Z: I183 Branch 341 IFEQ L3452 - true
   * Goal 12. weka.classifiers.Evaluation.equals(Ljava/lang/Object;)Z: I198 Branch 342 IFEQ L3454 - true
   * Goal 13. weka.classifiers.Evaluation.equals(Ljava/lang/Object;)Z: I213 Branch 343 IFEQ L3456 - true
   * Goal 14. weka.classifiers.Evaluation.equals(Ljava/lang/Object;)Z: I228 Branch 344 IFEQ L3458 - true
   * Goal 15. weka.classifiers.Evaluation.equals(Ljava/lang/Object;)Z: I243 Branch 345 IFEQ L3460 - true
   * Goal 16. weka.classifiers.Evaluation.equals(Ljava/lang/Object;)Z: I255 Branch 346 IFEQ L3463 - false
   * Goal 17. weka.classifiers.Evaluation.equals(Ljava/lang/Object;)Z: I267 Branch 347 IF_ICMPGE L3464 - true
   * Goal 18. weka.classifiers.Evaluation.equals(Ljava/lang/Object;)Z: I267 Branch 347 IF_ICMPGE L3464 - false
   * Goal 19. weka.classifiers.Evaluation.equals(Ljava/lang/Object;)Z: I279 Branch 348 IF_ICMPGE L3465 - true
   * Goal 20. weka.classifiers.Evaluation.equals(Ljava/lang/Object;)Z: I279 Branch 348 IF_ICMPGE L3465 - false
   * Goal 21. weka.classifiers.Evaluation.equals(Ljava/lang/Object;)Z: I298 Branch 349 IFEQ L3466 - true
   */

  @Test
  public void test05()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.equals((Object) evaluation0);
      assertTrue(boolean0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.equals(Ljava/lang/Object;)Z: I15 Branch 330 IFNE L3426 - true
   * Goal 2. weka.classifiers.Evaluation.equals(Ljava/lang/Object;)Z: I34 Branch 331 IF_ICMPEQ L3430 - false
   */

  @Test
  public void test06()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instances instances1 = converterUtils_DataSource0.getStructure(0);
      Evaluation evaluation1 = new Evaluation(instances1);
      boolean boolean0 = evaluation1.equals((Object) evaluation0);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01D);
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.equals(Ljava/lang/Object;)Z: I6 Branch 329 IFNULL L3426 - false
   * Goal 2. weka.classifiers.Evaluation.equals(Ljava/lang/Object;)Z: I15 Branch 330 IFNE L3426 - false
   */

  @Test
  public void test07()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance(instances0);
      boolean boolean0 = evaluation0.equals((Object) chebyshevDistance0);
      assertFalse(boolean0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.equals(Ljava/lang/Object;)Z: I6 Branch 329 IFNULL L3426 - true
   */

  @Test
  public void test08()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("-R");
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.unweightedMacroFmeasure()D: I17 Branch 316 IF_ICMPGE L3294 - true
   */

  @Test
  public void test09()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.unweightedMacroFmeasure();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
  }

  //Test case number: 10
  /*
   * 9 covered goals:
   * Goal 1. weka.classifiers.Evaluation.falseNegativeRate(I)D: I18 Branch 293 IF_ICMPGE L3061 - true
   * Goal 2. weka.classifiers.Evaluation.falseNegativeRate(I)D: I18 Branch 293 IF_ICMPGE L3061 - false
   * Goal 3. weka.classifiers.Evaluation.falseNegativeRate(I)D: I26 Branch 294 IF_ICMPNE L3062 - true
   * Goal 4. weka.classifiers.Evaluation.falseNegativeRate(I)D: I26 Branch 294 IF_ICMPNE L3062 - false
   * Goal 5. weka.classifiers.Evaluation.falseNegativeRate(I)D: I38 Branch 295 IF_ICMPGE L3063 - true
   * Goal 6. weka.classifiers.Evaluation.falseNegativeRate(I)D: I38 Branch 295 IF_ICMPGE L3063 - false
   * Goal 7. weka.classifiers.Evaluation.falseNegativeRate(I)D: I46 Branch 296 IF_ICMPEQ L3064 - true
   * Goal 8. weka.classifiers.Evaluation.falseNegativeRate(I)D: I46 Branch 296 IF_ICMPEQ L3064 - false
   * Goal 9. weka.classifiers.Evaluation.falseNegativeRate(I)D: I91 Branch 297 IFNE L3071 - false
   */

  @Test
  public void test10()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("x$w");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falseNegativeRate(0);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
  }

  //Test case number: 11
  /*
   * 15 covered goals:
   * Goal 1. weka.classifiers.Evaluation.trueNegativeRate(I)D: I18 Branch 269 IF_ICMPGE L2891 - true
   * Goal 2. weka.classifiers.Evaluation.trueNegativeRate(I)D: I18 Branch 269 IF_ICMPGE L2891 - false
   * Goal 3. weka.classifiers.Evaluation.trueNegativeRate(I)D: I26 Branch 270 IF_ICMPEQ L2892 - true
   * Goal 4. weka.classifiers.Evaluation.trueNegativeRate(I)D: I26 Branch 270 IF_ICMPEQ L2892 - false
   * Goal 5. weka.classifiers.Evaluation.trueNegativeRate(I)D: I38 Branch 271 IF_ICMPGE L2893 - true
   * Goal 6. weka.classifiers.Evaluation.trueNegativeRate(I)D: I38 Branch 271 IF_ICMPGE L2893 - false
   * Goal 7. weka.classifiers.Evaluation.trueNegativeRate(I)D: I46 Branch 272 IF_ICMPEQ L2894 - true
   * Goal 8. weka.classifiers.Evaluation.trueNegativeRate(I)D: I46 Branch 272 IF_ICMPEQ L2894 - false
   * Goal 9. weka.classifiers.Evaluation.trueNegativeRate(I)D: I91 Branch 273 IFNE L2901 - false
   * Goal 10. weka.classifiers.Evaluation.weightedTrueNegativeRate()D: I21 Branch 274 IF_ICMPGE L2916 - true
   * Goal 11. weka.classifiers.Evaluation.weightedTrueNegativeRate()D: I21 Branch 274 IF_ICMPGE L2916 - false
   * Goal 12. weka.classifiers.Evaluation.weightedTrueNegativeRate()D: I33 Branch 275 IF_ICMPGE L2917 - true
   * Goal 13. weka.classifiers.Evaluation.weightedTrueNegativeRate()D: I33 Branch 275 IF_ICMPGE L2917 - false
   * Goal 14. weka.classifiers.Evaluation.weightedTrueNegativeRate()D: I85 Branch 276 IF_ICMPGE L2924 - true
   * Goal 15. weka.classifiers.Evaluation.weightedTrueNegativeRate()D: I85 Branch 276 IF_ICMPGE L2924 - false
   */

  @Test
  public void test11()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("-R");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTrueNegativeRate();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.toClassDetailsString(Ljava/lang/String;)Ljava/lang/String;: I7 Branch 252 IFNE L2714 - false
   */

  @Test
  public void test12()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(")nG.+&UP*L?G0`2;}z");
      Evaluation evaluation0 = new Evaluation(instances0);
      try {
        String string0 = evaluation0.toClassDetailsString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
      }
  }

  //Test case number: 13
  /*
   * 16 covered goals:
   * Goal 1. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I162 Branch 240 IF_ICMPGE L2647 - false
   * Goal 2. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I174 Branch 241 IF_ICMPGE L2648 - true
   * Goal 3. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I174 Branch 241 IF_ICMPGE L2648 - false
   * Goal 4. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I192 Branch 242 IFGE L2650 - true
   * Goal 5. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I207 Branch 243 IFLE L2653 - true
   * Goal 6. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I225 Branch 244 IFNE L2657 - false
   * Goal 7. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I236 Branch 245 IFLT L2657 - true
   * Goal 8. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I311 Branch 247 IF_ICMPGE L2667 - false
   * Goal 9. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I318 Branch 248 IFEQ L2668 - true
   * Goal 10. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I375 Branch 249 IF_ICMPGE L2676 - false
   * Goal 11. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I387 Branch 250 IF_ICMPGE L2677 - true
   * Goal 12. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I387 Branch 250 IF_ICMPGE L2677 - false
   * Goal 13. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I404 Branch 251 IFEQ L2678 - true
   * Goal 14. weka.classifiers.Evaluation.num2ShortID(I[CI)Ljava/lang/String;: I16 Branch 357 IFLT L3651 - false
   * Goal 15. weka.classifiers.Evaluation.num2ShortID(I[CI)Ljava/lang/String;: I43 Branch 358 IFGE L3654 - false
   * Goal 16. weka.classifiers.Evaluation.num2ShortID(I[CI)Ljava/lang/String;: I65 Branch 359 IFLT L3658 - true
   */

  @Test
  public void test13()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("-R");
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toMatrixString("Can't open file ");
      assertEquals("Can't open file \n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.toCumulativeMarginDistributionString()Ljava/lang/String;: I58 Branch 224 IFEQ L2460 - false
   */

  @Test
  public void test14()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      evaluation0.m_MarginCounts = doubleArray0;
      try {
        String string0 = evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
      }
  }

  //Test case number: 15
  /*
   * 6 covered goals:
   * Goal 1. weka.classifiers.Evaluation.toCumulativeMarginDistributionString()Ljava/lang/String;: I7 Branch 222 IFNE L2453 - true
   * Goal 2. weka.classifiers.Evaluation.toCumulativeMarginDistributionString()Ljava/lang/String;: I46 Branch 223 IF_ICMPGT L2459 - true
   * Goal 3. weka.classifiers.Evaluation.toCumulativeMarginDistributionString()Ljava/lang/String;: I46 Branch 223 IF_ICMPGT L2459 - false
   * Goal 4. weka.classifiers.Evaluation.toCumulativeMarginDistributionString()Ljava/lang/String;: I58 Branch 224 IFEQ L2460 - true
   * Goal 5. weka.classifiers.Evaluation.toCumulativeMarginDistributionString()Ljava/lang/String;: I118 Branch 225 IFNE L2466 - true
   * Goal 6. weka.classifiers.Evaluation.toCumulativeMarginDistributionString()Ljava/lang/String;: I118 Branch 225 IFNE L2466 - false
   */

  @Test
  public void test15()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.SFMeanSchemeEntropy()D: I7 Branch 217 IFNE L2409 - true
   */

  @Test
  public void test16()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.SFSchemeEntropy()D: I7 Branch 216 IFNE L2396 - true
   */

  @Test
  public void test17()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
  }

  //Test case number: 18
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.SFPriorEntropy()D: I7 Branch 212 IFNE L2370 - false
   * Goal 2. weka.classifiers.Evaluation.SFPriorEntropy()D: I13 Branch 213 IFNE L2370 - true
   */

  @Test
  public void test18()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Average column entropy curves");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 19
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.KBMeanInformation()D: I7 Branch 208 IFNE L2335 - true
   * Goal 2. weka.classifiers.Evaluation.KBMeanInformation()D: I35 Branch 209 IFEQ L2339 - true
   */

  @Test
  public void test19()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBMeanInformation();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
  }

  //Test case number: 20
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.KBInformation()D: I7 Branch 206 IFNE L2317 - true
   * Goal 2. weka.classifiers.Evaluation.KBInformation()D: I35 Branch 207 IFEQ L2321 - true
   */

  @Test
  public void test20()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("-R");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBInformation();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01D);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.priorEntropy()D: I7 Branch 203 IFNE L2293 - false
   */

  @Test
  public void test21()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("J6!?U6N(!Y2wx`Y");
      Evaluation evaluation0 = new Evaluation(instances0);
      try {
        double double0 = evaluation0.priorEntropy();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute entropy of class prior: class numeric!
         //
      }
  }

  //Test case number: 22
  /*
   * 4 covered goals:
   * Goal 1. weka.classifiers.Evaluation.priorEntropy()D: I7 Branch 203 IFNE L2293 - true
   * Goal 2. weka.classifiers.Evaluation.priorEntropy()D: I35 Branch 204 IFEQ L2298 - true
   * Goal 3. weka.classifiers.Evaluation.priorEntropy()D: I55 Branch 205 IF_ICMPGE L2302 - true
   * Goal 4. weka.classifiers.Evaluation.priorEntropy()D: I55 Branch 205 IF_ICMPGE L2302 - false
   */

  @Test
  public void test22()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("-R");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double0, 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.correlationCoefficient()D: I7 Branch 197 IFEQ L2188 - false
   */

  @Test
  public void test23()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("main");
      Evaluation evaluation0 = new Evaluation(instances0);
      try {
        double double0 = evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
      }
  }

  //Test case number: 24
  /*
   * 7 covered goals:
   * Goal 1. weka.classifiers.Evaluation.kappa()D: I30 Branch 193 IF_ICMPGE L2158 - true
   * Goal 2. weka.classifiers.Evaluation.kappa()D: I30 Branch 193 IF_ICMPGE L2158 - false
   * Goal 3. weka.classifiers.Evaluation.kappa()D: I43 Branch 194 IF_ICMPGE L2159 - true
   * Goal 4. weka.classifiers.Evaluation.kappa()D: I43 Branch 194 IF_ICMPGE L2159 - false
   * Goal 5. weka.classifiers.Evaluation.kappa()D: I116 Branch 195 IF_ICMPGE L2166 - true
   * Goal 6. weka.classifiers.Evaluation.kappa()D: I116 Branch 195 IF_ICMPGE L2166 - false
   * Goal 7. weka.classifiers.Evaluation.kappa()D: I169 Branch 196 IFGE L2173 - true
   */

  @Test
  public void test24()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("numExecutionSlotsTipText");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.kappa();
      assertEquals(1.0, double0, 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.coverageOfTestCasesByPredictedRegions()D: I7 Branch 188 IFNE L2016 - true
   */

  @Test
  public void test25()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.predictions()Lweka/core/FastVector;: I7 Branch 187 IFEQ L1845 - true
   */

  @Test
  public void test26()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FastVector fastVector0 = evaluation0.predictions();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
  }

  //Test case number: 27
  /*
   * 3 covered goals:
   * Goal 1. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;Lweka/core/Instances;[Ljava/lang/Object;)[D: I17 Branch 167 IFLE L1640 - false
   * Goal 2. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;Lweka/core/Instances;[Ljava/lang/Object;)[D: I32 Branch 168 IFEQ L1644 - true
   * Goal 3. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;Lweka/core/Instances;[Ljava/lang/Object;)[D: I110 Branch 171 IF_ICMPGE L1658 - true
   */

  @Test
  public void test27()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Object[] objectArray0 = new Object[10];
      double[] doubleArray0 = evaluation0.evaluateModel((Classifier) costSensitiveClassifier0, instances0, objectArray0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.handleCostOption(Ljava/lang/String;I)Lweka/classifiers/CostMatrix;: I12 Branch 166 IFEQ L1574 - false
   */

  @Test
  public void test28()  throws Throwable  {
      try {
        CostMatrix costMatrix0 = Evaluation.handleCostOption("=", (-64));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
      }
  }

  //Test case number: 29
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.handleCostOption(Ljava/lang/String;I)Lweka/classifiers/CostMatrix;: I6 Branch 165 IFNULL L1574 - false
   * Goal 2. weka.classifiers.Evaluation.handleCostOption(Ljava/lang/String;I)Lweka/classifiers/CostMatrix;: I12 Branch 166 IFEQ L1574 - true
   */

  @Test
  public void test29()  throws Throwable  {
      CostMatrix costMatrix0 = Evaluation.handleCostOption("", (-64));
      assertNull(costMatrix0);
  }

  //Test case number: 30
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.handleCostOption(Ljava/lang/String;I)Lweka/classifiers/CostMatrix;: I6 Branch 165 IFNULL L1574 - true
   */

  @Test
  public void test30()  throws Throwable  {
      CostMatrix costMatrix0 = Evaluation.handleCostOption((String) null, 4591);
      assertNull(costMatrix0);
  }

  //Test case number: 31
  /*
   * 17 covered goals:
   * Goal 1. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I144 Branch 23 IFNE L963 - false
   * Goal 2. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I151 Branch 24 IFEQ L963 - true
   * Goal 3. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I221 Branch 27 IFGT L976 - true
   * Goal 4. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I247 Branch 28 IF_ICMPGE L981 - true
   * Goal 5. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I247 Branch 28 IF_ICMPGE L981 - false
   * Goal 6. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I277 Branch 29 IFLE L986 - true
   * Goal 7. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I394 Branch 32 IFEQ L1017 - true
   * Goal 8. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I471 Branch 35 IFEQ L1030 - true
   * Goal 9. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I490 Branch 36 IFEQ L1034 - true
   * Goal 10. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I503 Branch 37 IFNE L1037 - false
   * Goal 11. weka.classifiers.Evaluation.evaluateModel(Lweka/classifiers/Classifier;[Ljava/lang/String;)Ljava/lang/String;: I511 Branch 38 IFNE L1038 - false
   * Goal 12. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I360 Branch 350 IFEQ L3562 - true
   * Goal 13. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I380 Branch 351 IFEQ L3567 - false
   * Goal 14. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I436 Branch 352 IFEQ L3587 - false
   * Goal 15. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I467 Branch 353 IFEQ L3591 - true
   * Goal 16. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I467 Branch 353 IFEQ L3591 - false
   * Goal 17. weka.classifiers.Evaluation.makeOptionString(Lweka/classifiers/Classifier;Z)Ljava/lang/String;: I514 Branch 354 IFEQ L3599 - true
   */

  @Test
  public void test31()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "%G}`L]+;jWPaHdpcq&";
      stringArray0[1] = "%G}`L]+;jWPaHdpcq&";
      stringArray0[2] = "H${PftjfK&J{";
      try {
        String string0 = Evaluation.evaluateModel((Classifier) inputMappedClassifier0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.misc.InputMappedClassifier:
         // 
         // -I
         // \tIgnore case when matching attribute names and nominal values.
         // -M
         // \tSuppress the output of the mapping report.
         // -trim
         // \tTrim white space from either end of names before matching.
         // -L <path to model to load>
         // \tPath to a model to load. If set, this model
         // \twill be used for prediction and any base classifier
         // \tspecification will be ignored. Environment variables
         // \tmay be used in the path (e.g. ${HOME}/myModel.model)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.rules.ZeroR)
         // 
         // Options specific to classifier weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
      }
  }

  //Test case number: 32
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.crossValidateModel(Lweka/classifiers/Classifier;Lweka/core/Instances;ILjava/util/Random;[Ljava/lang/Object;)V: I20 Branch 18 IFEQ L598 - false
   */

  @Test
  public void test32()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("-R");
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = (MockRandom)instances0.getRandomNumberGenerator((-380L));
      DecisionTable decisionTable0 = new DecisionTable();
      Object[] objectArray0 = new Object[2];
      try {
        evaluation0.crossValidateModel((Classifier) decisionTable0, instances0, 114, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 33
  /*
   * 13 covered goals:
   * Goal 1. weka.classifiers.Evaluation.crossValidateModel(Lweka/classifiers/Classifier;Lweka/core/Instances;ILjava/util/Random;[Ljava/lang/Object;)V: I20 Branch 18 IFEQ L598 - true
   * Goal 2. weka.classifiers.Evaluation.crossValidateModel(Lweka/classifiers/Classifier;Lweka/core/Instances;ILjava/util/Random;[Ljava/lang/Object;)V: I37 Branch 19 IFLE L605 - false
   * Goal 3. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I54 Branch 320 IF_ICMPGE L3345 - false
   * Goal 4. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I68 Branch 321 IFNE L3347 - false
   * Goal 5. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I105 Branch 322 IF_ICMPGE L3353 - false
   * Goal 6. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I115 Branch 323 IFNE L3354 - false
   * Goal 7. weka.classifiers.Evaluation.addNumericTrainClass(DD)V: I9 Branch 385 IFLE L3931 - true
   * Goal 8. weka.classifiers.Evaluation.addNumericTrainClass(DD)V: I9 Branch 385 IFLE L3931 - false
   * Goal 9. weka.classifiers.Evaluation.addNumericTrainClass(DD)V: I24 Branch 386 IFGE L3934 - true
   * Goal 10. weka.classifiers.Evaluation.addNumericTrainClass(DD)V: I24 Branch 386 IFGE L3934 - false
   * Goal 11. weka.classifiers.Evaluation.addNumericTrainClass(DD)V: I37 Branch 387 IFNONNULL L3939 - true
   * Goal 12. weka.classifiers.Evaluation.addNumericTrainClass(DD)V: I37 Branch 387 IFNONNULL L3939 - false
   * Goal 13. weka.classifiers.Evaluation.addNumericTrainClass(DD)V: I60 Branch 388 IF_ICMPNE L3943 - true
   */

  @Test
  public void test33()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(")nG.+&UP*L?G0`2;}z");
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[6];
      try {
        evaluation0.crossValidateModel((Classifier) sMOreg0, instances0, 0, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 34
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.setDiscardPredictions(Z)V: I12 Branch 6 IFEQ L449 - false
   */

  @Test
  public void test34()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(true);
      assertTrue(evaluation0.getDiscardPredictions());
  }

  //Test case number: 35
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.setDiscardPredictions(Z)V: I12 Branch 6 IFEQ L449 - true
   */

  @Test
  public void test35()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(false);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
  }

  //Test case number: 36
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I155 Branch 5 IF_ICMPEQ L422 - true
   */

  @Test
  public void test36()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
  }

  //Test case number: 37
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I124 Branch 4 IFNE L419 - false
   */

  @Test
  public void test37()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(")nG.+&UP*L?G0`2;}z");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class has to be nominal if cost matrix given!
         //
      }
  }

  //Test case number: 38
  /*
   * 3 covered goals:
   * Goal 1. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I116 Branch 3 IFNULL L418 - false
   * Goal 2. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I124 Branch 4 IFNE L419 - true
   * Goal 3. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I155 Branch 5 IF_ICMPEQ L422 - false
   */

  @Test
  public void test38()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cost matrix not compatible with data!
         //
      }
  }

  //Test case number: 39
  /*
   * 5 covered goals:
   * Goal 1. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I58 Branch 1 IFEQ L410 - true
   * Goal 2. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I126 Branch 239 IFNE L2640 - false
   * Goal 3. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I12 Branch 319 IFNE L3335 - false
   * Goal 4. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I54 Branch 320 IF_ICMPGE L3345 - true
   * Goal 5. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I105 Branch 322 IF_ICMPGE L3353 - true
   */

  @Test
  public void test39()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instances instances1 = converterUtils_DataSource0.getStructure(0);
      Evaluation evaluation0 = new Evaluation(instances1);
      try {
        String string0 = evaluation0.toMatrixString("D6nu0");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
      }
  }

  //Test case number: 40
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.pctCorrect()D: root-Branch
   */

  @Test
  public void test40()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.pctCorrect();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  //Test case number: 41
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.avgCost()D: root-Branch
   */

  @Test
  public void test41()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.avgCost();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
  }

  //Test case number: 42
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.getRevision()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test42()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.getRevision();
      assertEquals("9101", string0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
  }

  //Test case number: 43
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.evaluateModelOnce(Lweka/classifiers/Classifier;Lweka/core/Instance;)D: root-Branch
   * Goal 2. weka.classifiers.Evaluation.evaluationForSingleInstance(Lweka/classifiers/Classifier;Lweka/core/Instance;Z)D: I19 Branch 181 IFEQ L1726 - true
   */

  @Test
  public void test43()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("-.R");
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      int[] intArray0 = new int[27];
      DenseInstance denseInstance0 = (DenseInstance)BallNode.calcCentroidPivot(114, 0, intArray0, instances0);
      try {
        double double0 = evaluation0.evaluateModelOnce((Classifier) decisionTable0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
      }
  }

  //Test case number: 44
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.toSummaryString()Ljava/lang/String;: root-Branch
   * Goal 2. weka.classifiers.Evaluation.toSummaryString(Ljava/lang/String;Z)Ljava/lang/String;: I12 Branch 226 IFEQ L2512 - true
   */

  @Test
  public void test44()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString();
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
  }

  //Test case number: 45
  /*
   * 3 covered goals:
   * Goal 1. weka.classifiers.Evaluation.meanAbsoluteError()D: root-Branch
   * Goal 2. weka.classifiers.Evaluation.meanPriorAbsoluteError()D: I7 Branch 199 IFEQ L2229 - true
   * Goal 3. weka.classifiers.Evaluation.relativeAbsoluteError()D: I7 Branch 200 IFEQ L2243 - true
   */

  @Test
  public void test45()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01D);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01D);
  }

  //Test case number: 46
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.getHeader()Lweka/core/Instances;: root-Branch
   */

  @Test
  public void test46()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Instances instances1 = evaluation0.getHeader();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
  }

  //Test case number: 47
  /*
   * 7 covered goals:
   * Goal 1. weka.classifiers.Evaluation.unclassified()D: root-Branch
   * Goal 2. weka.classifiers.Evaluation.toSummaryString(Z)Ljava/lang/String;: root-Branch
   * Goal 3. weka.classifiers.Evaluation.toSummaryString(Ljava/lang/String;Z)Ljava/lang/String;: I12 Branch 226 IFEQ L2512 - false
   * Goal 4. weka.classifiers.Evaluation.toSummaryString(Ljava/lang/String;Z)Ljava/lang/String;: I18 Branch 227 IFEQ L2512 - true
   * Goal 5. weka.classifiers.Evaluation.toSummaryString(Ljava/lang/String;Z)Ljava/lang/String;: I50 Branch 228 IFLE L2520 - true
   * Goal 6. weka.classifiers.Evaluation.toSummaryString(Ljava/lang/String;Z)Ljava/lang/String;: I625 Branch 237 IFEQ L2592 - true
   * Goal 7. weka.classifiers.Evaluation.toSummaryString(Ljava/lang/String;Z)Ljava/lang/String;: I689 Branch 238 IFLE L2599 - true
   */

  @Test
  public void test47()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString(true);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.unclassified(), 0.01D);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
  }

  //Test case number: 48
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.crossValidateModel(Ljava/lang/String;Lweka/core/Instances;I[Ljava/lang/String;Ljava/util/Random;)V: root-Branch
   */

  @Test
  public void test48()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[8];
      MockRandom mockRandom0 = new MockRandom();
      try {
        evaluation0.crossValidateModel("setNumFolds", instances0, 1193, stringArray0, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: setNumFolds
         //
      }
  }

  //Test case number: 49
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.getClassPriors()[D: root-Branch
   */

  @Test
  public void test49()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertNotNull(doubleArray0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
  }

  //Test case number: 50
  /*
   * 6 covered goals:
   * Goal 1. weka.classifiers.Evaluation.toMatrixString()Ljava/lang/String;: root-Branch
   * Goal 2. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I126 Branch 239 IFNE L2640 - true
   * Goal 3. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I162 Branch 240 IF_ICMPGE L2647 - true
   * Goal 4. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I267 Branch 246 IFEQ L2663 - true
   * Goal 5. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I311 Branch 247 IF_ICMPGE L2667 - true
   * Goal 6. weka.classifiers.Evaluation.toMatrixString(Ljava/lang/String;)Ljava/lang/String;: I375 Branch 249 IF_ICMPGE L2676 - true
   */

  @Test
  public void test50()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toMatrixString();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals("=== Confusion Matrix ===\n\n   <-- classified as\n", string0);
  }

  //Test case number: 51
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.pctUnclassified()D: root-Branch
   */

  @Test
  public void test51()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.pctUnclassified();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01D);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  //Test case number: 52
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.incorrect()D: root-Branch
   */

  @Test
  public void test52()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.incorrect();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
  }

  //Test case number: 53
  /*
   * 105 covered goals:
   * Goal 1. weka.classifiers.Evaluation.toClassDetailsString()Ljava/lang/String;: root-Branch
   * Goal 2. weka.classifiers.Evaluation.weightedRecall()D: root-Branch
   * Goal 3. weka.classifiers.Evaluation.recall(I)D: root-Branch
   * Goal 4. weka.classifiers.Evaluation.areaUnderROC(I)D: I7 Branch 7 IFNONNULL L475 - false
   * Goal 5. weka.classifiers.Evaluation.weightedAreaUnderROC()D: I21 Branch 8 IF_ICMPGE L493 - true
   * Goal 6. weka.classifiers.Evaluation.weightedAreaUnderROC()D: I21 Branch 8 IF_ICMPGE L493 - false
   * Goal 7. weka.classifiers.Evaluation.weightedAreaUnderROC()D: I33 Branch 9 IF_ICMPGE L494 - true
   * Goal 8. weka.classifiers.Evaluation.weightedAreaUnderROC()D: I33 Branch 9 IF_ICMPGE L494 - false
   * Goal 9. weka.classifiers.Evaluation.weightedAreaUnderROC()D: I85 Branch 10 IF_ICMPGE L501 - true
   * Goal 10. weka.classifiers.Evaluation.weightedAreaUnderROC()D: I85 Branch 10 IF_ICMPGE L501 - false
   * Goal 11. weka.classifiers.Evaluation.weightedAreaUnderROC()D: I99 Branch 11 IFNE L503 - true
   * Goal 12. weka.classifiers.Evaluation.areaUnderPRC(I)D: I7 Branch 12 IFNONNULL L521 - false
   * Goal 13. weka.classifiers.Evaluation.weightedAreaUnderPRC()D: I21 Branch 13 IF_ICMPGE L539 - true
   * Goal 14. weka.classifiers.Evaluation.weightedAreaUnderPRC()D: I21 Branch 13 IF_ICMPGE L539 - false
   * Goal 15. weka.classifiers.Evaluation.weightedAreaUnderPRC()D: I33 Branch 14 IF_ICMPGE L540 - true
   * Goal 16. weka.classifiers.Evaluation.weightedAreaUnderPRC()D: I33 Branch 14 IF_ICMPGE L540 - false
   * Goal 17. weka.classifiers.Evaluation.weightedAreaUnderPRC()D: I85 Branch 15 IF_ICMPGE L547 - true
   * Goal 18. weka.classifiers.Evaluation.weightedAreaUnderPRC()D: I85 Branch 15 IF_ICMPGE L547 - false
   * Goal 19. weka.classifiers.Evaluation.weightedAreaUnderPRC()D: I99 Branch 16 IFNE L549 - true
   * Goal 20. weka.classifiers.Evaluation.toClassDetailsString(Ljava/lang/String;)Ljava/lang/String;: I7 Branch 252 IFNE L2714 - true
   * Goal 21. weka.classifiers.Evaluation.toClassDetailsString(Ljava/lang/String;)Ljava/lang/String;: I57 Branch 253 IF_ICMPGE L2721 - true
   * Goal 22. weka.classifiers.Evaluation.toClassDetailsString(Ljava/lang/String;)Ljava/lang/String;: I57 Branch 253 IF_ICMPGE L2721 - false
   * Goal 23. weka.classifiers.Evaluation.toClassDetailsString(Ljava/lang/String;)Ljava/lang/String;: I143 Branch 254 IFEQ L2731 - true
   * Goal 24. weka.classifiers.Evaluation.toClassDetailsString(Ljava/lang/String;)Ljava/lang/String;: I182 Branch 255 IFEQ L2740 - false
   * Goal 25. weka.classifiers.Evaluation.toClassDetailsString(Ljava/lang/String;)Ljava/lang/String;: I219 Branch 256 IFEQ L2746 - false
   * Goal 26. weka.classifiers.Evaluation.numTruePositives(I)D: I15 Branch 257 IF_ICMPGE L2785 - true
   * Goal 27. weka.classifiers.Evaluation.numTruePositives(I)D: I15 Branch 257 IF_ICMPGE L2785 - false
   * Goal 28. weka.classifiers.Evaluation.numTruePositives(I)D: I23 Branch 258 IF_ICMPNE L2786 - true
   * Goal 29. weka.classifiers.Evaluation.numTruePositives(I)D: I23 Branch 258 IF_ICMPNE L2786 - false
   * Goal 30. weka.classifiers.Evaluation.truePositiveRate(I)D: I18 Branch 259 IF_ICMPGE L2810 - true
   * Goal 31. weka.classifiers.Evaluation.truePositiveRate(I)D: I18 Branch 259 IF_ICMPGE L2810 - false
   * Goal 32. weka.classifiers.Evaluation.truePositiveRate(I)D: I26 Branch 260 IF_ICMPNE L2811 - true
   * Goal 33. weka.classifiers.Evaluation.truePositiveRate(I)D: I26 Branch 260 IF_ICMPNE L2811 - false
   * Goal 34. weka.classifiers.Evaluation.truePositiveRate(I)D: I64 Branch 261 IFNE L2816 - false
   * Goal 35. weka.classifiers.Evaluation.weightedTruePositiveRate()D: I21 Branch 262 IF_ICMPGE L2831 - true
   * Goal 36. weka.classifiers.Evaluation.weightedTruePositiveRate()D: I21 Branch 262 IF_ICMPGE L2831 - false
   * Goal 37. weka.classifiers.Evaluation.weightedTruePositiveRate()D: I33 Branch 263 IF_ICMPGE L2832 - true
   * Goal 38. weka.classifiers.Evaluation.weightedTruePositiveRate()D: I33 Branch 263 IF_ICMPGE L2832 - false
   * Goal 39. weka.classifiers.Evaluation.weightedTruePositiveRate()D: I85 Branch 264 IF_ICMPGE L2839 - true
   * Goal 40. weka.classifiers.Evaluation.weightedTruePositiveRate()D: I85 Branch 264 IF_ICMPGE L2839 - false
   * Goal 41. weka.classifiers.Evaluation.numTrueNegatives(I)D: I15 Branch 265 IF_ICMPGE L2862 - true
   * Goal 42. weka.classifiers.Evaluation.numTrueNegatives(I)D: I15 Branch 265 IF_ICMPGE L2862 - false
   * Goal 43. weka.classifiers.Evaluation.numTrueNegatives(I)D: I23 Branch 266 IF_ICMPEQ L2863 - true
   * Goal 44. weka.classifiers.Evaluation.numTrueNegatives(I)D: I23 Branch 266 IF_ICMPEQ L2863 - false
   * Goal 45. weka.classifiers.Evaluation.numTrueNegatives(I)D: I35 Branch 267 IF_ICMPGE L2864 - true
   * Goal 46. weka.classifiers.Evaluation.numTrueNegatives(I)D: I35 Branch 267 IF_ICMPGE L2864 - false
   * Goal 47. weka.classifiers.Evaluation.numTrueNegatives(I)D: I43 Branch 268 IF_ICMPEQ L2865 - true
   * Goal 48. weka.classifiers.Evaluation.numTrueNegatives(I)D: I43 Branch 268 IF_ICMPEQ L2865 - false
   * Goal 49. weka.classifiers.Evaluation.numFalsePositives(I)D: I15 Branch 277 IF_ICMPGE L2947 - true
   * Goal 50. weka.classifiers.Evaluation.numFalsePositives(I)D: I15 Branch 277 IF_ICMPGE L2947 - false
   * Goal 51. weka.classifiers.Evaluation.numFalsePositives(I)D: I23 Branch 278 IF_ICMPEQ L2948 - true
   * Goal 52. weka.classifiers.Evaluation.numFalsePositives(I)D: I23 Branch 278 IF_ICMPEQ L2948 - false
   * Goal 53. weka.classifiers.Evaluation.numFalsePositives(I)D: I35 Branch 279 IF_ICMPGE L2949 - true
   * Goal 54. weka.classifiers.Evaluation.numFalsePositives(I)D: I35 Branch 279 IF_ICMPGE L2949 - false
   * Goal 55. weka.classifiers.Evaluation.numFalsePositives(I)D: I43 Branch 280 IF_ICMPNE L2950 - true
   * Goal 56. weka.classifiers.Evaluation.numFalsePositives(I)D: I43 Branch 280 IF_ICMPNE L2950 - false
   * Goal 57. weka.classifiers.Evaluation.falsePositiveRate(I)D: I18 Branch 281 IF_ICMPGE L2976 - true
   * Goal 58. weka.classifiers.Evaluation.falsePositiveRate(I)D: I18 Branch 281 IF_ICMPGE L2976 - false
   * Goal 59. weka.classifiers.Evaluation.falsePositiveRate(I)D: I26 Branch 282 IF_ICMPEQ L2977 - true
   * Goal 60. weka.classifiers.Evaluation.falsePositiveRate(I)D: I26 Branch 282 IF_ICMPEQ L2977 - false
   * Goal 61. weka.classifiers.Evaluation.falsePositiveRate(I)D: I38 Branch 283 IF_ICMPGE L2978 - true
   * Goal 62. weka.classifiers.Evaluation.falsePositiveRate(I)D: I38 Branch 283 IF_ICMPGE L2978 - false
   * Goal 63. weka.classifiers.Evaluation.falsePositiveRate(I)D: I46 Branch 284 IF_ICMPNE L2979 - true
   * Goal 64. weka.classifiers.Evaluation.falsePositiveRate(I)D: I46 Branch 284 IF_ICMPNE L2979 - false
   * Goal 65. weka.classifiers.Evaluation.falsePositiveRate(I)D: I91 Branch 285 IFNE L2986 - false
   * Goal 66. weka.classifiers.Evaluation.weightedFalsePositiveRate()D: I21 Branch 286 IF_ICMPGE L3001 - true
   * Goal 67. weka.classifiers.Evaluation.weightedFalsePositiveRate()D: I21 Branch 286 IF_ICMPGE L3001 - false
   * Goal 68. weka.classifiers.Evaluation.weightedFalsePositiveRate()D: I33 Branch 287 IF_ICMPGE L3002 - true
   * Goal 69. weka.classifiers.Evaluation.weightedFalsePositiveRate()D: I33 Branch 287 IF_ICMPGE L3002 - false
   * Goal 70. weka.classifiers.Evaluation.weightedFalsePositiveRate()D: I85 Branch 288 IF_ICMPGE L3009 - true
   * Goal 71. weka.classifiers.Evaluation.weightedFalsePositiveRate()D: I85 Branch 288 IF_ICMPGE L3009 - false
   * Goal 72. weka.classifiers.Evaluation.numFalseNegatives(I)D: I15 Branch 289 IF_ICMPGE L3032 - true
   * Goal 73. weka.classifiers.Evaluation.numFalseNegatives(I)D: I15 Branch 289 IF_ICMPGE L3032 - false
   * Goal 74. weka.classifiers.Evaluation.numFalseNegatives(I)D: I23 Branch 290 IF_ICMPNE L3033 - true
   * Goal 75. weka.classifiers.Evaluation.numFalseNegatives(I)D: I23 Branch 290 IF_ICMPNE L3033 - false
   * Goal 76. weka.classifiers.Evaluation.numFalseNegatives(I)D: I35 Branch 291 IF_ICMPGE L3034 - true
   * Goal 77. weka.classifiers.Evaluation.numFalseNegatives(I)D: I35 Branch 291 IF_ICMPGE L3034 - false
   * Goal 78. weka.classifiers.Evaluation.numFalseNegatives(I)D: I43 Branch 292 IF_ICMPEQ L3035 - true
   * Goal 79. weka.classifiers.Evaluation.numFalseNegatives(I)D: I43 Branch 292 IF_ICMPEQ L3035 - false
   * Goal 80. weka.classifiers.Evaluation.matthewsCorrelationCoefficient(I)D: I65 Branch 301 IFNE L3120 - false
   * Goal 81. weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I21 Branch 302 IF_ICMPGE L3136 - true
   * Goal 82. weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I21 Branch 302 IF_ICMPGE L3136 - false
   * Goal 83. weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I33 Branch 303 IF_ICMPGE L3137 - true
   * Goal 84. weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I33 Branch 303 IF_ICMPGE L3137 - false
   * Goal 85. weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I85 Branch 304 IF_ICMPGE L3144 - true
   * Goal 86. weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I85 Branch 304 IF_ICMPGE L3144 - false
   * Goal 87. weka.classifiers.Evaluation.weightedMatthewsCorrelation()D: I99 Branch 305 IFNE L3146 - false
   * Goal 88. weka.classifiers.Evaluation.precision(I)D: I18 Branch 306 IF_ICMPGE L3200 - true
   * Goal 89. weka.classifiers.Evaluation.precision(I)D: I18 Branch 306 IF_ICMPGE L3200 - false
   * Goal 90. weka.classifiers.Evaluation.precision(I)D: I26 Branch 307 IF_ICMPNE L3201 - true
   * Goal 91. weka.classifiers.Evaluation.precision(I)D: I26 Branch 307 IF_ICMPNE L3201 - false
   * Goal 92. weka.classifiers.Evaluation.precision(I)D: I64 Branch 308 IFNE L3206 - false
   * Goal 93. weka.classifiers.Evaluation.weightedPrecision()D: I21 Branch 309 IF_ICMPGE L3221 - true
   * Goal 94. weka.classifiers.Evaluation.weightedPrecision()D: I21 Branch 309 IF_ICMPGE L3221 - false
   * Goal 95. weka.classifiers.Evaluation.weightedPrecision()D: I33 Branch 310 IF_ICMPGE L3222 - true
   * Goal 96. weka.classifiers.Evaluation.weightedPrecision()D: I33 Branch 310 IF_ICMPGE L3222 - false
   * Goal 97. weka.classifiers.Evaluation.weightedPrecision()D: I85 Branch 311 IF_ICMPGE L3229 - true
   * Goal 98. weka.classifiers.Evaluation.weightedPrecision()D: I85 Branch 311 IF_ICMPGE L3229 - false
   * Goal 99. weka.classifiers.Evaluation.fMeasure(I)D: I22 Branch 312 IFNE L3255 - false
   * Goal 100. weka.classifiers.Evaluation.weightedFMeasure()D: I21 Branch 313 IF_ICMPGE L3270 - true
   * Goal 101. weka.classifiers.Evaluation.weightedFMeasure()D: I21 Branch 313 IF_ICMPGE L3270 - false
   * Goal 102. weka.classifiers.Evaluation.weightedFMeasure()D: I33 Branch 314 IF_ICMPGE L3271 - true
   * Goal 103. weka.classifiers.Evaluation.weightedFMeasure()D: I33 Branch 314 IF_ICMPGE L3271 - false
   * Goal 104. weka.classifiers.Evaluation.weightedFMeasure()D: I85 Branch 315 IF_ICMPGE L3278 - true
   * Goal 105. weka.classifiers.Evaluation.weightedFMeasure()D: I85 Branch 315 IF_ICMPGE L3278 - false
   */

  @Test
  public void test53()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("getClass");
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01D);
  }

  //Test case number: 54
  /*
   * 5 covered goals:
   * Goal 1. weka.classifiers.Evaluation.numInstances()D: root-Branch
   * Goal 2. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I86 Branch 2 IF_ICMPGE L413 - false
   * Goal 3. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I168 Branch 324 IF_ICMPGE L3362 - false
   * Goal 4. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I201 Branch 325 IF_ICMPGE L3366 - false
   * Goal 5. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I211 Branch 326 IFNE L3367 - false
   */

  @Test
  public void test54()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("main");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numInstances();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
  }

  //Test case number: 55
  /*
   * 1 covered goal:
   * Goal 1. weka.classifiers.Evaluation.wekaStaticWrapper(Lweka/classifiers/Sourcable;Ljava/lang/String;)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test55()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      String string0 = Evaluation.wekaStaticWrapper((Sourcable) zeroR0, (String) null);
      assertEquals("// Generated with Weka 3.7.7\n//\n// This code is public domain and comes with no warranty.\n//\n// Timestamp: Fri Feb 14 20:21:21 GMT 2014\n\npackage weka.classifiers;\n\nimport weka.core.Attribute;\nimport weka.core.Capabilities;\nimport weka.core.Capabilities.Capability;\nimport weka.core.Instance;\nimport weka.core.Instances;\nimport weka.core.RevisionUtils;\nimport weka.classifiers.Classifier;\nimport weka.classifiers.AbstractClassifier;\n\npublic class WekaWrapper\n  extends AbstractClassifier {\n\n  /**\n   * Returns only the toString() method.\n   *\n   * @return a string describing the classifier\n   */\n  public String globalInfo() {\n    return toString();\n  }\n\n  /**\n   * Returns the capabilities of this classifier.\n   *\n   * @return the capabilities\n   */\n  public Capabilities getCapabilities() {\n    weka.core.Capabilities result = new weka.core.Capabilities(this);\n\n    result.enable(weka.core.Capabilities.Capability.NOMINAL_ATTRIBUTES);\n    result.enable(weka.core.Capabilities.Capability.NUMERIC_ATTRIBUTES);\n    result.enable(weka.core.Capabilities.Capability.DATE_ATTRIBUTES);\n    result.enable(weka.core.Capabilities.Capability.STRING_ATTRIBUTES);\n    result.enable(weka.core.Capabilities.Capability.RELATIONAL_ATTRIBUTES);\n    result.enable(weka.core.Capabilities.Capability.MISSING_VALUES);\n    result.enable(weka.core.Capabilities.Capability.NOMINAL_CLASS);\n    result.enable(weka.core.Capabilities.Capability.NUMERIC_CLASS);\n    result.enable(weka.core.Capabilities.Capability.DATE_CLASS);\n    result.enable(weka.core.Capabilities.Capability.MISSING_CLASS_VALUES);\n\n\n    result.setMinimumNumberInstances(0);\n\n    return result;\n  }\n\n  /**\n   * only checks the data against its capabilities.\n   *\n   * @param i the training data\n   */\n  public void buildClassifier(Instances i) throws Exception {\n    // can classifier handle the data?\n    getCapabilities().testWithFail(i);\n  }\n\n  /**\n   * Classifies the given instance.\n   *\n   * @param i the instance to classify\n   * @return the classification result\n   */\n  public double classifyInstance(Instance i) throws Exception {\n    Object[] s = new Object[i.numAttributes()];\n    \n    for (int j = 0; j < s.length; j++) {\n      if (!i.isMissing(j)) {\n        if (i.attribute(j).isNominal())\n          s[j] = new String(i.stringValue(j));\n        else if (i.attribute(j).isNumeric())\n          s[j] = new Double(i.value(j));\n      }\n    }\n    \n    // set class value to missing\n    s[i.classIndex()] = null;\n    \n    return null.classify(s);\n  }\n\n  /**\n   * Returns the revision string.\n   * \n   * @return        the revision\n   */\n  public String getRevision() {\n    return RevisionUtils.extract(\"1.0\");\n  }\n\n  /**\n   * Returns only the classnames and what classifier it is based on.\n   *\n   * @return a short description\n   */\n  public String toString() {\n    return \"Auto-generated classifier wrapper, based on weka.classifiers.rules.ZeroR (generated with Weka 3.7.7).\\n\" + this.getClass().getName() + \"/null\";\n  }\n\n  /**\n   * Runs the classfier from commandline.\n   *\n   * @param args the commandline arguments\n   */\n  public static void main(String args[]) {\n    runClassifier(new WekaWrapper(), args);\n  }\n}\n\nclass null {\n  public static double classify(Object[] i) {\n    return 0.0;\n  }\n}\n", string0);
  }

  //Test case number: 56
  /*
   * 2 covered goals:
   * Goal 1. weka.classifiers.Evaluation.evaluateModel(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/String;: root-Branch
   * Goal 2. weka.classifiers.Evaluation.main([Ljava/lang/String;)V: I7 Branch 22 IFNE L801 - true
   */

  @Test
  public void test56()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Evaluation.main(stringArray0);
  }

  //Test case number: 57
  /*
   * 10 covered goals:
   * Goal 1. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;)V: root-Branch
   * Goal 2. weka.classifiers.Evaluation.rootMeanSquaredError()D: root-Branch
   * Goal 3. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I58 Branch 1 IFEQ L410 - false
   * Goal 4. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I86 Branch 2 IF_ICMPGE L413 - true
   * Goal 5. weka.classifiers.Evaluation.<init>(Lweka/core/Instances;Lweka/classifiers/CostMatrix;)V: I116 Branch 3 IFNULL L418 - true
   * Goal 6. weka.classifiers.Evaluation.rootMeanPriorSquaredError()D: I7 Branch 201 IFEQ L2266 - true
   * Goal 7. weka.classifiers.Evaluation.rootRelativeSquaredError()D: I7 Branch 202 IFEQ L2279 - true
   * Goal 8. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I12 Branch 319 IFNE L3335 - true
   * Goal 9. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I168 Branch 324 IF_ICMPGE L3362 - true
   * Goal 10. weka.classifiers.Evaluation.setPriors(Lweka/core/Instances;)V: I201 Branch 325 IF_ICMPGE L3366 - true
   */

  @Test
  public void test57()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01D);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01D);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01D);
  }
}
