/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 18 06:42:21 GMT 2015
 */

package wheel.json;

import static org.junit.Assert.*;
import org.junit.Test;
import edu.stanford.nlp.ling.CategoryWordTag;
import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.ling.IndexedWord;
import edu.stanford.nlp.ling.LabeledWord;
import edu.stanford.nlp.ling.StringLabel;
import edu.stanford.nlp.ling.Tag;
import edu.stanford.nlp.ling.Word;
import edu.stanford.nlp.ling.WordLemmaTag;
import edu.stanford.nlp.util.ArrayCoreMap;
import edu.stanford.nlp.util.CoreMap;
import edu.stanford.nlp.util.HasInterval;
import java.io.CharArrayWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I84 Branch 135 IFEQ L1367 - false
   */

  @Test
  public void test00()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("W5u.yJ__0", (Object) "W5u.yJ__0");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(398);
      CharArrayWriter charArrayWriter1 = (CharArrayWriter)jSONObject0.write((Writer) charArrayWriter0);
      assertEquals(27, charArrayWriter0.size());
      assertEquals("{\"W5u.yJ__0\":[\"W5u.yJ__0\"]}", charArrayWriter1.toString());
  }

  //Test case number: 1
  /*
   * 7 covered goals:
   * Goal 1. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I21 Branch 132 IFEQ L1357 - true
   * Goal 2. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I21 Branch 132 IFEQ L1357 - false
   * Goal 3. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I28 Branch 133 IFEQ L1358 - true
   * Goal 4. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I28 Branch 133 IFEQ L1358 - false
   * Goal 5. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I65 Branch 134 IFEQ L1365 - true
   * Goal 6. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I65 Branch 134 IFEQ L1365 - false
   * Goal 7. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I84 Branch 135 IFEQ L1367 - true
   */

  @Test
  public void test01()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{}", 0L);
      HashMap<WordLemmaTag, CategoryWordTag> hashMap0 = new HashMap<WordLemmaTag, CategoryWordTag>();
      JSONObject jSONObject2 = jSONObject1.put("] is not a JSONArray.", (Map) hashMap0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = (CharArrayWriter)jSONObject2.write((Writer) charArrayWriter0);
      assertEquals(35, charArrayWriter0.size());
      assertEquals("{\"] is not a JSONArray.\":{},\"{}\":0}", charArrayWriter0.toString());
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I140 Branch 130 IFEQ L1332 - false
   */

  @Test
  public void test02()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      String string0 = JSONObject.valueToString(linkedList0, 0, 740);
      assertEquals("[]", string0);
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I11 Branch 103 IFNE L1190 - false
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I121 Branch 129 IFEQ L1329 - false
   */

  @Test
  public void test03()  throws Throwable  {
      HashMap<CoreLabel.GenericAnnotation<Boolean>, LabeledWord> hashMap0 = new HashMap<CoreLabel.GenericAnnotation<Boolean>, LabeledWord>();
      String string0 = JSONObject.valueToString(hashMap0, 0, 0);
      assertEquals("{}", string0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I13 Branch 122 IFEQ L1304 - false
   */

  @Test
  public void test04()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, (-1211), (-1211));
      assertEquals("null", string0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I6 Branch 121 IFNULL L1304 - true
   */

  @Test
  public void test05()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-718), 613);
      assertEquals("null", string0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I138 Branch 119 IFEQ L1278 - false
   */

  @Test
  public void test06()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I121 Branch 118 IFEQ L1275 - false
   */

  @Test
  public void test07()  throws Throwable  {
      HashMap<JSONObject, Tag> hashMap0 = new HashMap<JSONObject, Tag>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I108 Branch 117 IFEQ L1271 - false
   */

  @Test
  public void test08()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("*f", (Object) jSONObject0);
      // Undeclared exception!
      try {
        String string0 = jSONObject0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 9
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I6 Branch 1 IFNULL L115 - true
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I13 Branch 111 IFEQ L1253 - false
   */

  @Test
  public void test09()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I6 Branch 110 IFNULL L1253 - true
   */

  @Test
  public void test10()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  //Test case number: 11
  /*
   * 8 covered goals:
   * Goal 1. wheel.json.JSONObject.toString()Ljava/lang/String;: I19 Branch 101 IFEQ L1140 - true
   * Goal 2. wheel.json.JSONObject.toString()Ljava/lang/String;: I19 Branch 101 IFEQ L1140 - false
   * Goal 3. wheel.json.JSONObject.toString()Ljava/lang/String;: I28 Branch 102 IF_ICMPLE L1141 - true
   * Goal 4. wheel.json.JSONObject.toString()Ljava/lang/String;: I28 Branch 102 IF_ICMPLE L1141 - false
   * Goal 5. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I82 Branch 114 IFEQ L1268 - false
   * Goal 6. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I96 Branch 115 IFNE L1271 - true
   * Goal 7. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I102 Branch 116 IFNE L1271 - true
   * Goal 8. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I156 Branch 120 IFEQ L1281 - false
   */

  @Test
  public void test11()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "BO");
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
      assertEquals("{\"bytes\":[66,79],\"class\":\"class java.lang.String\",\"empty\":false}", string0);
  }

  //Test case number: 12
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I12 Branch 99 IFNE L1113 - true
   * Goal 2. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I34 Branch 100 IF_ICMPGE L1117 - true
   * Goal 3. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I34 Branch 100 IF_ICMPGE L1117 - false
   */

  @Test
  public void test12()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(false);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray2);
      assertEquals(1, jSONArray2.length());
  }

  //Test case number: 13
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I6 Branch 98 IFNULL L1113 - false
   * Goal 2. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I12 Branch 99 IFNE L1113 - false
   */

  @Test
  public void test13()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I6 Branch 98 IFNULL L1113 - true
   */

  @Test
  public void test14()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I54 Branch 96 IFNE L1095 - true
   */

  @Test
  public void test15()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.POSITIVE_INFINITY);
      try {
        JSONObject jSONObject1 = jSONObject0.put("h_", (Object) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
      }
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I30 Branch 94 IFEQ L1090 - false
   */

  @Test
  public void test16()  throws Throwable  {
      HashMap<StringLabel, Long> hashMap0 = new HashMap<StringLabel, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try {
        JSONObject jSONObject1 = jSONObject0.put("I;[1?7LZG!;/", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
      }
  }

  //Test case number: 17
  /*
   * 8 covered goals:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I77 Branch 62 IFLE L674 - true
   * Goal 2. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I91 Branch 85 IF_ICMPNE L1037 - true
   * Goal 3. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I196 Branch 89 IF_ICMPLT L1058 - false
   * Goal 4. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I202 Branch 90 IF_ICMPGE L1058 - true
   * Goal 5. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I45 Branch 95 IFEQ L1094 - false
   * Goal 6. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I54 Branch 96 IFNE L1095 - false
   * Goal 7. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I61 Branch 97 IFEQ L1095 - true
   * Goal 8. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I89 Branch 127 IFEQ L1323 - false
   */

  @Test
  public void test17()  throws Throwable  {
      HashMap<Object, HasInterval<Integer>> hashMap0 = new HashMap<Object, HasInterval<Integer>>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(1295.022911125592);
      JSONObject jSONObject1 = jSONObject0.append(" %/\u65E5\u53F7]", (Object) float0);
      String string0 = JSONObject.valueToString(jSONObject1, (-645), (-1));
      assertEquals("{\" %/\u65E5\u53F7]\": [1295.023]}", string0);
  }

  //Test case number: 18
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 78 LOOKUPSWITCH L1030 Case 10 - true
   * Goal 2. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 82 LOOKUPSWITCH L1030 Case 47 - true
   * Goal 3. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I91 Branch 85 IF_ICMPNE L1037 - false
   * Goal 4. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I41 Branch 104 IF_ICMPNE L1197 - false
   */

  @Test
  public void test18()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("</go\"ernor>\nP   <dependent>", 0);
      String string0 = jSONObject0.toString(9, (-1163));
      assertEquals("{\"<\\/go\\\"ernor>\\nP   <dependent>\": 0}", string0);
  }

  //Test case number: 19
  /*
   * 8 covered goals:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 76 LOOKUPSWITCH L1030 Case 8 - true
   * Goal 2. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 77 LOOKUPSWITCH L1030 Case 9 - true
   * Goal 3. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 79 LOOKUPSWITCH L1030 Case 12 - true
   * Goal 4. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 80 LOOKUPSWITCH L1030 Case 13 - true
   * Goal 5. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I177 Branch 86 IF_ICMPLT L1058 - true
   * Goal 6. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I183 Branch 87 IF_ICMPLT L1058 - false
   * Goal 7. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I189 Branch 88 IF_ICMPLT L1058 - true
   * Goal 8. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I189 Branch 88 IF_ICMPLT L1058 - false
   */

  @Test
  public void test19()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try {
        boolean boolean0 = jSONObject0.getBoolean("\u0001\b\u0007\u0000 \u0001\u0001\tQ\u0001\u0001\u0000\u0001\t\u0106\u0001\u0001\u0000\u013F\u0001\u0002\u0000\u0186\u0001\u0001\u0000\u0001\u0001\u000F\u0000\u0001\u0001\b\u0000\u037D\u0001\u0001\u0000@\u0001\u0001\u0000\u0211\u0001\u0001\u0000\u01E4\u0001\u0002\u0000\u0666\u0001\u0001\u0000\u0001\t\u0001\u0001\u0001\u0000\u0001\u0001\u0003\u0000\u0002\u0001\u0005\u0000\u0001\u0001\u0001\u0000\u0001\u0001\u0001\t\u0001\u0000\u0002\u0001\u0001\u0000\u0003\u0001\u0001\u0000\u0001\t\u048F\u0001\u0002\u0000%\u0001\u0001\u0000\u01AC\u0001\u0001\u0000\u00E5\u0001\u0001\t\u026B\u0001\u0001\u0000\u08C7\u0001\u0001\t\u0001\u0001\u0002\t\u0002\u0000\u0004\u0001\u0002\t\u0003\u0001\u0004\u0000\u0005\u0001\u0001\t\u0002\u0001\u0001\u0000\u0001\u0001\u0002\u0000\u0001\u0001\u0001\t\u02A7\u0001\u0001\u0000\u00DB\u0001\u0001\t\u0001\u0000\u0012\u0001\u0001\u0000\u01D5\u0001\u0002\u0000@\u0001\u0001\u0000\u01F5\u0001\u0001\t\u073C\u0001\u0004\t\u0003\u0000\u0002\u0001\u0001\u0000\u0001\u0001\u0001\t\u0001\u0001\u0001\u0000\u0001\t\u0001\u0000\u0001\u0001\u0003\t\u0001\u0000\u0001\t\u0005\u0000\u0090\u0001\u0001\u0000n\u0001\u0002\u0000s\u0001\u0001\u0000\u00AD\u0001\u0001\u0000\u001B\u0001\u0001\u0000\u0018\u0001\u0001\u0000 \u0001\u0002\u0000\u0094\u0001\u0001\u0000\u0007\u0001\u0001\u00001\u0001\u0002\u00004\u0001\u0001\u0000\u00A4\u0001\u0001\u0000\u053C\u0001\u0004\t\u0002\u0001\u0001\u0000\u0001\t\u0001\u0000\u0003\t2\u0001\u0001\u0000E\u0001\u0001\t\u0003\u0001\u0001\u00001\u0001\u0002\u0000'\u0001\u0001\u00007\u0001\u0001\t\r\u0001\u0001\u0000\u000F\u0001\u0001\u0000\u0015\u0001\u0001\u0000\u0004\u0001\u0001\u00001\u0001\u0001\u0000-\u0001\u0001\u0000\t\u0001\u0002\u0000\u0017\u0001\u0002\u0000\u001D\u0001\u0001\u0000-\u0001\u0002\u0000\u0002\u0001\u0001\u0000\r\u0001\u0001\u0000,\u0001\u0001\u0000\u008B\u0001\u0001\u0000\u026C\u0001\u0001\t\u0001\u0000\u0001\u0001\u0001\t\r\u0001\u0001\u0000\u0002\u0001\u0001\u0000 \u0001\u0001\u0000\u0002\u0001\u0001\u0000\u001C\u0001\u0001\t\u0001\u0000\t\u0001\u0001\u0000\u0017\u0001\u0002\u0000\u0007\u0001\u0001\u0000\u000B\u0001\u0001\u0000\u0004\u0001\u0001\u0000#\u0001\u0002\u0000\u0011\u0001\u0001\u0000\u0004\u0001\u0001\u0000\u0005\u0001\u0001\u0000\u0007\u0001\u0001\u0000\u0001\u0001\u0001\u0000\u0003\u0001\u0002\u0000\u000F\u0001\u0001\u0000\u0001\u0001\u0001\u0000\u001C\u0001\u0002\u0000\u0002\u0001\u0001\u0000\u0015\u0001\u0001\u0000&\u0001\u0001\u0000!\u0001\u0001\u0000\u0129\u0001\u0001\t\u0004\u0001\u0002\u0000\u0001\t\f\u0001\u0001\t\u0003\u0000\f\u0001\u0002\u0000\u0007\u0001\u0003\u0000\u0003\u0001\u0001\u0000\u0003\u0001\u0002\u0000\u0014\u0001\u0002\u0000\u0003\u0001\u0001\u0000\u0001\u0001\u0001\u0000\u0001\u0001\u0002\u0000\u0002\u0001\u0001\t\u0001\u0000\u0002\u0001\u0002\u0000\u000B\u0001\u0003\u0000\r\u0001\u0003\u0000\u0007\u0001\u0001\u0000\u0002\u0001\u0001\u0000\u0004\u0001\u0001\u0000\u0016\u0001\u0001\u0000\u0013\u0001\u0001\u0000\u0084\u0001\u0001\t\u0002\u0000\u0003\u0001\u0001\t\u0001\u0000\u0001\u0001\u0002\t\u0003\u0001\u0006\u0000\u000B\u0001\u0002\u0000\u0004\u0001\u0001\u0000\u0002\u0001\u0001\u0000\u0001\t\u0001\u0000\u0001\u0001\u0001\u0000\u0002\u0001\u0001\t\u0001\u0000\u0007\u0001\u0002\u0000\u0006\u0001\u0002\u0000\u0001\t\u0005\u0001\u0001\u0000\u0002\u0001\u0002\u0000\u0002\u0001\u0001\u0000\u0007\u0001\u0001\u0000\b\u0001\u0001\u0000<\u0001\u0001\t\u0001\u0000\u0003\u0001\u0003\u0000\u0001\t\u0002\u0000\u0004\u0001\u0001\u0000\u0001\t\u0002\u0001\u0003\u0000\u0003\u0001\u0001\t\u0003\u0001\u0001\u0000\u0006\u0001\u0002\u0000\u0004\u0001\u0001\u0000\u0001\u0001\u0001\u0000\u0001\t\b\u0001\u0001\t\u0005\u0001\u0001\u0000\u001F\u0001\u0001\t\u0002\u0000\u0001\t\u0002\u0000\u0001\u0001\u0003\u0000\u0003\u0001\u0001\u0000\u0001\u0001\u0002\u0000\u0004\u0001\u0001\u0000\u0001\u0001\u0001\u0000\u0006\u0001\u0001\u0000\u000E\u0001\u0002\u0000\u0002\t\u0003\u0000\u0002\u0001\u0001\u0000\u0002\t\u0003\u0001\u0003\u0000\u0002\u0001\u0001\t\u0006\u0001\u0002\t\u0003\u0000\u0003\u0001\u0001\u0000\u0003\u0001\u0001\t\u0001\u0000\u0007\u0001\u0002\u0000\u0001\t\u0001\u0000\u0001\u0001\u0001\t\u0002\u0000\u0001\t\u0002\u0000\u0001\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\u0001\\b\\u0007\\u0000 \\u0001\\u0001\\tQ\\u0001\\u0001\\u0000\\u0001\\t\u0106\\u0001\\u0001\\u0000\u013F\\u0001\\u0002\\u0000\u0186\\u0001\\u0001\\u0000\\u0001\\u0001\\u000f\\u0000\\u0001\\u0001\\b\\u0000\u037D\\u0001\\u0001\\u0000@\\u0001\\u0001\\u0000\u0211\\u0001\\u0001\\u0000\u01E4\\u0001\\u0002\\u0000\u0666\\u0001\\u0001\\u0000\\u0001\\t\\u0001\\u0001\\u0001\\u0000\\u0001\\u0001\\u0003\\u0000\\u0002\\u0001\\u0005\\u0000\\u0001\\u0001\\u0001\\u0000\\u0001\\u0001\\u0001\\t\\u0001\\u0000\\u0002\\u0001\\u0001\\u0000\\u0003\\u0001\\u0001\\u0000\\u0001\\t\u048F\\u0001\\u0002\\u0000%\\u0001\\u0001\\u0000\u01AC\\u0001\\u0001\\u0000\u00E5\\u0001\\u0001\\t\u026B\\u0001\\u0001\\u0000\u08C7\\u0001\\u0001\\t\\u0001\\u0001\\u0002\\t\\u0002\\u0000\\u0004\\u0001\\u0002\\t\\u0003\\u0001\\u0004\\u0000\\u0005\\u0001\\u0001\\t\\u0002\\u0001\\u0001\\u0000\\u0001\\u0001\\u0002\\u0000\\u0001\\u0001\\u0001\\t\u02A7\\u0001\\u0001\\u0000\u00DB\\u0001\\u0001\\t\\u0001\\u0000\\u0012\\u0001\\u0001\\u0000\u01D5\\u0001\\u0002\\u0000@\\u0001\\u0001\\u0000\u01F5\\u0001\\u0001\\t\u073C\\u0001\\u0004\\t\\u0003\\u0000\\u0002\\u0001\\u0001\\u0000\\u0001\\u0001\\u0001\\t\\u0001\\u0001\\u0001\\u0000\\u0001\\t\\u0001\\u0000\\u0001\\u0001\\u0003\\t\\u0001\\u0000\\u0001\\t\\u0005\\u0000\\u0090\\u0001\\u0001\\u0000n\\u0001\\u0002\\u0000s\\u0001\\u0001\\u0000\u00AD\\u0001\\u0001\\u0000\\u001b\\u0001\\u0001\\u0000\\u0018\\u0001\\u0001\\u0000 \\u0001\\u0002\\u0000\\u0094\\u0001\\u0001\\u0000\\u0007\\u0001\\u0001\\u00001\\u0001\\u0002\\u00004\\u0001\\u0001\\u0000\u00A4\\u0001\\u0001\\u0000\u053C\\u0001\\u0004\\t\\u0002\\u0001\\u0001\\u0000\\u0001\\t\\u0001\\u0000\\u0003\\t2\\u0001\\u0001\\u0000E\\u0001\\u0001\\t\\u0003\\u0001\\u0001\\u00001\\u0001\\u0002\\u0000'\\u0001\\u0001\\u00007\\u0001\\u0001\\t\\r\\u0001\\u0001\\u0000\\u000f\\u0001\\u0001\\u0000\\u0015\\u0001\\u0001\\u0000\\u0004\\u0001\\u0001\\u00001\\u0001\\u0001\\u0000-\\u0001\\u0001\\u0000\\t\\u0001\\u0002\\u0000\\u0017\\u0001\\u0002\\u0000\\u001d\\u0001\\u0001\\u0000-\\u0001\\u0002\\u0000\\u0002\\u0001\\u0001\\u0000\\r\\u0001\\u0001\\u0000,\\u0001\\u0001\\u0000\\u008b\\u0001\\u0001\\u0000\u026C\\u0001\\u0001\\t\\u0001\\u0000\\u0001\\u0001\\u0001\\t\\r\\u0001\\u0001\\u0000\\u0002\\u0001\\u0001\\u0000 \\u0001\\u0001\\u0000\\u0002\\u0001\\u0001\\u0000\\u001c\\u0001\\u0001\\t\\u0001\\u0000\\t\\u0001\\u0001\\u0000\\u0017\\u0001\\u0002\\u0000\\u0007\\u0001\\u0001\\u0000\\u000b\\u0001\\u0001\\u0000\\u0004\\u0001\\u0001\\u0000#\\u0001\\u0002\\u0000\\u0011\\u0001\\u0001\\u0000\\u0004\\u0001\\u0001\\u0000\\u0005\\u0001\\u0001\\u0000\\u0007\\u0001\\u0001\\u0000\\u0001\\u0001\\u0001\\u0000\\u0003\\u0001\\u0002\\u0000\\u000f\\u0001\\u0001\\u0000\\u0001\\u0001\\u0001\\u0000\\u001c\\u0001\\u0002\\u0000\\u0002\\u0001\\u0001\\u0000\\u0015\\u0001\\u0001\\u0000&\\u0001\\u0001\\u0000!\\u0001\\u0001\\u0000\u0129\\u0001\\u0001\\t\\u0004\\u0001\\u0002\\u0000\\u0001\\t\\f\\u0001\\u0001\\t\\u0003\\u0000\\f\\u0001\\u0002\\u0000\\u0007\\u0001\\u0003\\u0000\\u0003\\u0001\\u0001\\u0000\\u0003\\u0001\\u0002\\u0000\\u0014\\u0001\\u0002\\u0000\\u0003\\u0001\\u0001\\u0000\\u0001\\u0001\\u0001\\u0000\\u0001\\u0001\\u0002\\u0000\\u0002\\u0001\\u0001\\t\\u0001\\u0000\\u0002\\u0001\\u0002\\u0000\\u000b\\u0001\\u0003\\u0000\\r\\u0001\\u0003\\u0000\\u0007\\u0001\\u0001\\u0000\\u0002\\u0001\\u0001\\u0000\\u0004\\u0001\\u0001\\u0000\\u0016\\u0001\\u0001\\u0000\\u0013\\u0001\\u0001\\u0000\\u0084\\u0001\\u0001\\t\\u0002\\u0000\\u0003\\u0001\\u0001\\t\\u0001\\u0000\\u0001\\u0001\\u0002\\t\\u0003\\u0001\\u0006\\u0000\\u000b\\u0001\\u0002\\u0000\\u0004\\u0001\\u0001\\u0000\\u0002\\u0001\\u0001\\u0000\\u0001\\t\\u0001\\u0000\\u0001\\u0001\\u0001\\u0000\\u0002\\u0001\\u0001\\t\\u0001\\u0000\\u0007\\u0001\\u0002\\u0000\\u0006\\u0001\\u0002\\u0000\\u0001\\t\\u0005\\u0001\\u0001\\u0000\\u0002\\u0001\\u0002\\u0000\\u0002\\u0001\\u0001\\u0000\\u0007\\u0001\\u0001\\u0000\\b\\u0001\\u0001\\u0000<\\u0001\\u0001\\t\\u0001\\u0000\\u0003\\u0001\\u0003\\u0000\\u0001\\t\\u0002\\u0000\\u0004\\u0001\\u0001\\u0000\\u0001\\t\\u0002\\u0001\\u0003\\u0000\\u0003\\u0001\\u0001\\t\\u0003\\u0001\\u0001\\u0000\\u0006\\u0001\\u0002\\u0000\\u0004\\u0001\\u0001\\u0000\\u0001\\u0001\\u0001\\u0000\\u0001\\t\\b\\u0001\\u0001\\t\\u0005\\u0001\\u0001\\u0000\\u001f\\u0001\\u0001\\t\\u0002\\u0000\\u0001\\t\\u0002\\u0000\\u0001\\u0001\\u0003\\u0000\\u0003\\u0001\\u0001\\u0000\\u0001\\u0001\\u0002\\u0000\\u0004\\u0001\\u0001\\u0000\\u0001\\u0001\\u0001\\u0000\\u0006\\u0001\\u0001\\u0000\\u000e\\u0001\\u0002\\u0000\\u0002\\t\\u0003\\u0000\\u0002\\u0001\\u0001\\u0000\\u0002\\t\\u0003\\u0001\\u0003\\u0000\\u0002\\u0001\\u0001\\t\\u0006\\u0001\\u0002\\t\\u0003\\u0000\\u0003\\u0001\\u0001\\u0000\\u0003\\u0001\\u0001\\t\\u0001\\u0000\\u0007\\u0001\\u0002\\u0000\\u0001\\t\\u0001\\u0000\\u0001\\u0001\\u0001\\t\\u0002\\u0000\\u0001\\t\\u0002\\u0000\\u0001\\t\"] not found.
         //
      }
  }

  //Test case number: 20
  /*
   * 11 covered goals:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I6 Branch 73 IFNULL L1015 - true
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I6 Branch 110 IFNULL L1253 - false
   * Goal 3. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I13 Branch 111 IFEQ L1253 - true
   * Goal 4. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I25 Branch 112 IFEQ L1256 - true
   * Goal 5. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I82 Branch 114 IFEQ L1268 - true
   * Goal 6. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I96 Branch 115 IFNE L1271 - false
   * Goal 7. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I102 Branch 116 IFNE L1271 - false
   * Goal 8. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I108 Branch 117 IFEQ L1271 - true
   * Goal 9. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I121 Branch 118 IFEQ L1275 - true
   * Goal 10. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I138 Branch 119 IFEQ L1278 - true
   * Goal 11. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I156 Branch 120 IFEQ L1281 - true
   */

  @Test
  public void test20()  throws Throwable  {
      CategoryWordTag categoryWordTag0 = new CategoryWordTag();
      String string0 = JSONObject.valueToString(categoryWordTag0);
      assertEquals("\"\"", string0);
  }

  //Test case number: 21
  /*
   * 5 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONObject;[Ljava/lang/String;)V: I15 Branch 3 IF_ICMPGE L162 - true
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONObject;[Ljava/lang/String;)V: I15 Branch 3 IF_ICMPGE L162 - false
   * Goal 3. wheel.json.JSONObject.opt(Ljava/lang/String;)Ljava/lang/Object;: I6 Branch 63 IFNONNULL L688 - false
   * Goal 4. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 71 IFNULL L999 - true
   * Goal 5. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I11 Branch 72 IFNULL L999 - true
   */

  @Test
  public void test21()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String[] stringArray0 = new String[10];
      stringArray0[0] = "@<T";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  //Test case number: 22
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.remove(Ljava/lang/String;)Ljava/lang/Object;: root-Branch
   * Goal 2. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I20 Branch 70 IFNULL L978 - true
   * Goal 3. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I6 Branch 91 IFNULL L1088 - true
   */

  @Test
  public void test22()  throws Throwable  {
      HashMap<StringLabel, Long> hashMap0 = new HashMap<StringLabel, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("$6", (Object) null);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Z)Lwheel/json/JSONObject;: I8 Branch 68 IFEQ L902 - false
   */

  @Test
  public void test23()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = jSONObject0.put("{}", (boolean) boolean0);
      assertEquals(1, jSONObject1.length());
  }

  //Test case number: 24
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/util/Map;)V: I11 Branch 16 IFNONNULL L234 - false
   * Goal 2. wheel.json.JSONObject.put(Ljava/lang/String;Z)Lwheel/json/JSONObject;: I8 Branch 68 IFEQ L902 - true
   */

  @Test
  public void test24()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("@<T", false);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I12 Branch 67 IFNULL L889 - false
   */

  @Test
  public void test25()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("|g~]N=\"cH%", (-416L));
      String string0 = jSONObject1.optString("|g~]N=\"cH%");
      assertEquals("-416", string0);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 66 IFEQ L829 - false
   */

  @Test
  public void test26()  throws Throwable  {
      HashMap<ArrayCoreMap, JSONArray> hashMap0 = new HashMap<ArrayCoreMap, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("wIi)Ld+%CKtrIao@", (Object) jSONObject0);
      JSONObject jSONObject2 = jSONObject0.optJSONObject("wIi)Ld+%CKtrIao@");
      assertEquals(1, jSONObject0.length());
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 66 IFEQ L829 - true
   */

  @Test
  public void test27()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("gethashCode");
      assertNull(jSONObject1);
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 65 IFEQ L815 - true
   */

  @Test
  public void test28()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("gettuoLowerCase");
      assertNull(jSONArray0);
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optDouble(Ljava/lang/String;D)D: I13 Branch 64 IFEQ L764 - false
   */

  @Test
  public void test29()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("|g~]N=\"cH%", (-3739L));
      double double0 = jSONObject1.optDouble("|g~]N=\"cH%", (double) (-3739));
      assertEquals((-3739.0), double0, 0.01D);
  }

  //Test case number: 30
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I45 Branch 60 IFGE L670 - false
   * Goal 2. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I54 Branch 61 IFLE L671 - true
   * Goal 3. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I54 Branch 61 IFLE L671 - false
   * Goal 4. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I77 Branch 62 IFLE L674 - false
   */

  @Test
  public void test30()  throws Throwable  {
      Double double0 = new Double(0.0);
      String string0 = JSONObject.valueToString(double0, 4170, 4170);
      assertEquals("0", string0);
  }

  //Test case number: 31
  /*
   * 6 covered goals:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I31 Branch 58 IFLE L670 - false
   * Goal 2. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I38 Branch 59 IFGE L670 - false
   * Goal 3. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I45 Branch 60 IFGE L670 - true
   * Goal 4. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I14 Branch 92 IFEQ L1089 - false
   * Goal 5. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I23 Branch 93 IFNE L1090 - false
   * Goal 6. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I30 Branch 94 IFEQ L1090 - true
   */

  @Test
  public void test31()  throws Throwable  {
      Double double0 = new Double((-3.4587292534E10));
      String string0 = JSONObject.valueToString(double0, 15, 0);
      assertEquals("-3.4587292534E10", string0);
  }

  //Test case number: 32
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I6 Branch 57 IFNONNULL L662 - false
   */

  @Test
  public void test32()  throws Throwable  {
      try {
        String string0 = JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
      }
  }

  //Test case number: 33
  /*
   * 7 covered goals:
   * Goal 1. wheel.json.JSONObject.toString(I)Ljava/lang/String;: root-Branch
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I76 Branch 126 IFEQ L1320 - false
   * Goal 3. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I105 Branch 128 IFEQ L1326 - true
   * Goal 4. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I121 Branch 129 IFEQ L1329 - true
   * Goal 5. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I140 Branch 130 IFEQ L1332 - true
   * Goal 6. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I160 Branch 131 IFEQ L1335 - true
   * Goal 7. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I160 Branch 131 IFEQ L1335 - false
   */

  @Test
  public void test33()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "femaleNameList");
      String string0 = jSONObject0.toString(3127);
  }

  //Test case number: 34
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I37 Branch 56 IFNE L651 - false
   */

  @Test
  public void test34()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  //Test case number: 35
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I40 Branch 53 IFNE L574 - false
   */

  @Test
  public void test35()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  //Test case number: 36
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I6 Branch 52 IFNONNULL L568 - false
   */

  @Test
  public void test36()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  //Test case number: 37
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I6 Branch 52 IFNONNULL L568 - true
   * Goal 2. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I40 Branch 53 IFNE L574 - true
   * Goal 3. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I60 Branch 54 IF_ICMPGE L578 - true
   * Goal 4. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I60 Branch 54 IF_ICMPGE L578 - false
   */

  @Test
  public void test37()  throws Throwable  {
      CategoryWordTag categoryWordTag0 = new CategoryWordTag();
      String[] stringArray0 = JSONObject.getNames((Object) categoryWordTag0);
      assertNotNull(stringArray0);
  }

  //Test case number: 38
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I11 Branch 50 IFNE L548 - false
   */

  @Test
  public void test38()  throws Throwable  {
      HashMap<StringLabel, Short> hashMap0 = new HashMap<StringLabel, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  //Test case number: 39
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I11 Branch 50 IFNE L548 - true
   * Goal 2. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I37 Branch 51 IFEQ L554 - true
   * Goal 3. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I37 Branch 51 IFEQ L554 - false
   */

  @Test
  public void test39()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("not", (Object) jSONObject0);
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertNotNull(stringArray0);
  }

  //Test case number: 40
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 48 IFEQ L517 - true
   */

  @Test
  public void test40()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("'", (Object) "'");
      try {
        JSONObject jSONObject2 = jSONObject0.getJSONObject("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'\"] is not a JSONObject.
         //
      }
  }

  //Test case number: 41
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 47 IFEQ L499 - true
   */

  @Test
  public void test41()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("|g~]N=\"cH%", (-3739L));
      try {
        JSONArray jSONArray0 = jSONObject0.getJSONArray("|g~]N=\"cH%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"|g~]N=\\\"cH%\"] is not a JSONArray.
         //
      }
  }

  //Test case number: 42
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.optInt(Ljava/lang/String;I)I: root-Branch
   * Goal 2. wheel.json.JSONObject.optInt(Ljava/lang/String;)I: root-Branch
   * Goal 3. wheel.json.JSONObject.getInt(Ljava/lang/String;)I: I13 Branch 46 IFEQ L484 - false
   */

  @Test
  public void test42()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("|g~]N=\"cH%", (-3739L));
      int int0 = jSONObject1.optInt("|g~]N=\"cH%");
      assertEquals((-3739), int0);
  }

  //Test case number: 43
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getInt(Ljava/lang/String;)I: I13 Branch 46 IFEQ L484 - true
   */

  @Test
  public void test43()  throws Throwable  {
      HashMap<Tag, Object> hashMap0 = new HashMap<Tag, Object>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getlongValue", (Map) hashMap0);
      try {
        int int0 = jSONObject1.getInt("getlongValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getlongValue\"] is not a number.
         //
      }
  }

  //Test case number: 44
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getDouble(Ljava/lang/String;)D: I13 Branch 45 IFEQ L463 - false
   */

  @Test
  public void test44()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("|g~]N=\"cH%", (-416L));
      double double0 = jSONObject1.getDouble("|g~]N=\"cH%");
      assertEquals((-416.0), double0, 0.01D);
  }

  //Test case number: 45
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I47 Branch 43 IFEQ L443 - true
   */

  @Test
  public void test45()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("|g~]N=\"cH%", (-3739L));
      boolean boolean0 = jSONObject0.optBoolean("|g~]N=\"cH%", false);
      assertFalse(boolean0);
  }

  //Test case number: 46
  /*
   * 6 covered goals:
   * Goal 1. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I20 Branch 40 IFEQ L439 - false
   * Goal 2. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I28 Branch 41 IFLE L439 - true
   * Goal 3. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I41 Branch 42 IFNE L443 - false
   * Goal 4. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I47 Branch 43 IFEQ L443 - false
   * Goal 5. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I55 Branch 44 IFLE L443 - true
   * Goal 6. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I12 Branch 74 IFNE L1015 - false
   */

  @Test
  public void test46()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("", (Object) "");
      boolean boolean0 = jSONObject0.optBoolean("", true);
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  //Test case number: 47
  /*
   * 5 covered goals:
   * Goal 1. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I14 Branch 39 IFNE L439 - false
   * Goal 2. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I20 Branch 40 IFEQ L439 - true
   * Goal 3. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I41 Branch 42 IFNE L443 - true
   * Goal 4. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 71 IFNULL L999 - false
   * Goal 5. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I11 Branch 72 IFNULL L999 - false
   */

  @Test
  public void test47()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = jSONObject0.putOpt("{}", (Object) boolean0);
      boolean boolean1 = jSONObject0.optBoolean("{}", true);
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean1);
  }

  //Test case number: 48
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I54 Branch 36 IFLE L401 - false
   * Goal 2. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I77 Branch 37 IFLE L404 - false
   */

  @Test
  public void test48()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  //Test case number: 49
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I13 Branch 32 IFEQ L393 - false
   */

  @Test
  public void test49()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  //Test case number: 50
  /*
   * 7 covered goals:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I7 Branch 31 IFNE L393 - false
   * Goal 2. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I13 Branch 32 IFEQ L393 - true
   * Goal 3. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I31 Branch 33 IFLE L400 - false
   * Goal 4. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I38 Branch 34 IFGE L400 - false
   * Goal 5. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I45 Branch 35 IFGE L400 - false
   * Goal 6. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I54 Branch 36 IFLE L401 - true
   * Goal 7. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I77 Branch 37 IFLE L404 - true
   */

  @Test
  public void test50()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1293.3752541009);
      assertEquals("1293.3752541009", string0);
  }

  //Test case number: 51
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 29 IFNONNULL L374 - true
   * Goal 2. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I39 Branch 30 IFEQ L376 - true
   */

  @Test
  public void test51()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("hO0bWt$e$6sNg-", (Object) jSONObject0);
      try {
        JSONObject jSONObject2 = jSONObject1.append("hO0bWt$e$6sNg-", (Object) "getvalueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[hO0bWt$e$6sNg-] is not a JSONArray.
         //
      }
  }

  //Test case number: 52
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 26 IFNONNULL L346 - false
   * Goal 2. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I26 Branch 27 IFEQ L347 - true
   * Goal 3. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I52 Branch 28 IFEQ L350 - true
   */

  @Test
  public void test52()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("not", (Object) jSONObject0);
      JSONObject jSONObject2 = jSONObject1.accumulate("not", (Object) "not");
      assertSame(jSONObject2, jSONObject1);
  }

  //Test case number: 53
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 26 IFNONNULL L346 - true
   * Goal 2. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I52 Branch 28 IFEQ L350 - false
   * Goal 3. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 29 IFNONNULL L374 - false
   */

  @Test
  public void test53()  throws Throwable  {
      HashMap<ArrayCoreMap, JSONArray> hashMap0 = new HashMap<ArrayCoreMap, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      ArrayCoreMap arrayCoreMap0 = new ArrayCoreMap(1908);
      CoreLabel coreLabel0 = new CoreLabel((CoreMap) arrayCoreMap0);
      JSONObject jSONObject1 = jSONObject0.append("morphFeatureFile", (Object) coreLabel0);
      JSONObject jSONObject2 = jSONObject0.accumulate("morphFeatureFile", (Object) "-2228");
      assertSame(jSONObject0, jSONObject2);
  }

  //Test case number: 54
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/lang/Object;[Ljava/lang/String;)V: I20 Branch 25 IF_ICMPGE L304 - true
   * Goal 2. wheel.json.JSONObject.<init>(Ljava/lang/Object;[Ljava/lang/String;)V: I20 Branch 25 IF_ICMPGE L304 - false
   */

  @Test
  public void test54()  throws Throwable  {
      IndexedWord indexedWord0 = new IndexedWord("q#9_?XNQzc{_bB`d7", 0, 1360);
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject((Object) indexedWord0, stringArray0);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 55
  /*
   * 8 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I86 Branch 10 IF_ICMPEQ L202 - true
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I105 Branch 11 LOOKUPSWITCH L211 Case 44 - true
   * Goal 3. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I105 Branch 11 LOOKUPSWITCH L211 Case 44 - false
   * Goal 4. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I105 Branch 12 LOOKUPSWITCH L211 Case 59 - false
   * Goal 5. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I105 Branch 13 LOOKUPSWITCH L211 Case 125 - true
   * Goal 6. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I105 Branch 13 LOOKUPSWITCH L211 Case 125 - false
   * Goal 7. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I105 Branch 14 LOOKUPSWITCH L211 Default-Case - false
   * Goal 8. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I114 Branch 15 IF_ICMPNE L214 - true
   */

  @Test
  public void test55()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\n\"ma\": [],\n\"W5u.yJ__0\": 0\n}");
      assertEquals(2, jSONObject0.length());
  }

  //Test case number: 56
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 7 LOOKUPSWITCH L183 Default-Case - true
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I61 Branch 8 IF_ICMPNE L198 - true
   * Goal 3. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I86 Branch 10 IF_ICMPEQ L202 - false
   */

  @Test
  public void test56()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{QF#q?~Q@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 9 of {QF#q?~Q@
         //
      }
  }

  //Test case number: 57
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 5 LOOKUPSWITCH L183 Case 0 - false
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 6 LOOKUPSWITCH L183 Case 125 - true
   */

  @Test
  public void test57()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 58
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I12 Branch 4 IF_ICMPEQ L178 - true
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 5 LOOKUPSWITCH L183 Case 0 - true
   * Goal 3. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 6 LOOKUPSWITCH L183 Case 125 - false
   * Goal 4. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 7 LOOKUPSWITCH L183 Default-Case - false
   */

  @Test
  public void test58()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
      }
  }

  //Test case number: 59
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/lang/String;)V: root-Branch
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I12 Branch 4 IF_ICMPEQ L178 - false
   */

  @Test
  public void test59()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("S>R.Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of S>R.Z
         //
      }
  }

  //Test case number: 60
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.isNull(Ljava/lang/String;)Z: root-Branch
   * Goal 2. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I6 Branch 1 IFNULL L115 - false
   * Goal 3. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I12 Branch 2 IF_ACMPNE L115 - true
   */

  @Test
  public void test60()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("'", 0);
      boolean boolean0 = jSONObject1.isNull("'");
      assertFalse(boolean0);
  }

  //Test case number: 61
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject$Null.toString()Ljava/lang/String;: root-Branch
   * Goal 2. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I18 Branch 55 IFEQ L648 - true
   * Goal 3. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I18 Branch 55 IFEQ L648 - false
   * Goal 4. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I37 Branch 56 IFNE L651 - true
   */

  @Test
  public void test61()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<HashMap<LabeledWord, Tag>, Object> hashMap0 = new HashMap<HashMap<LabeledWord, Tag>, Object>();
      JSONObject jSONObject1 = jSONObject0.put("1f", (Map) hashMap0);
      JSONArray jSONArray0 = jSONObject1.names();
      LinkedHashSet<HashMap<LabeledWord, Word>> linkedHashSet0 = new LinkedHashSet<HashMap<LabeledWord, Word>>();
      JSONArray jSONArray1 = jSONArray0.put(4026, (Collection) linkedHashSet0);
      JSONObject jSONObject2 = jSONArray1.toJSONObject(jSONArray0);
      assertEquals(3, jSONObject2.length());
  }

  //Test case number: 62
  /*
   * 25 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/util/Collection;)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.keys()Ljava/util/Iterator;: root-Branch
   * Goal 3. wheel.json.JSONObject.put(Ljava/lang/String;I)Lwheel/json/JSONObject;: root-Branch
   * Goal 4. wheel.json.JSONObject.length()I: root-Branch
   * Goal 5. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I6 Branch 57 IFNONNULL L662 - true
   * Goal 6. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I31 Branch 58 IFLE L670 - true
   * Goal 7. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I11 Branch 103 IFNE L1190 - true
   * Goal 8. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I41 Branch 104 IF_ICMPNE L1197 - true
   * Goal 9. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I84 Branch 105 IFEQ L1204 - true
   * Goal 10. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I84 Branch 105 IFEQ L1204 - false
   * Goal 11. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I98 Branch 106 IF_ICMPLE L1206 - true
   * Goal 12. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I98 Branch 106 IF_ICMPLE L1206 - false
   * Goal 13. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I125 Branch 107 IF_ICMPGE L1211 - true
   * Goal 14. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I125 Branch 107 IF_ICMPGE L1211 - false
   * Goal 15. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I177 Branch 108 IF_ICMPLE L1219 - false
   * Goal 16. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I194 Branch 109 IF_ICMPGE L1221 - true
   * Goal 17. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I194 Branch 109 IF_ICMPGE L1221 - false
   * Goal 18. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I6 Branch 121 IFNULL L1304 - false
   * Goal 19. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I13 Branch 122 IFEQ L1304 - true
   * Goal 20. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I25 Branch 123 IFEQ L1308 - true
   * Goal 21. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I62 Branch 125 IFEQ L1317 - true
   * Goal 22. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I62 Branch 125 IFEQ L1317 - false
   * Goal 23. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I76 Branch 126 IFEQ L1320 - true
   * Goal 24. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I89 Branch 127 IFEQ L1323 - true
   * Goal 25. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I105 Branch 128 IFEQ L1326 - false
   */

  @Test
  public void test62()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("W5u.yJ__0", 0);
      LinkedHashSet<Long> linkedHashSet0 = new LinkedHashSet<Long>();
      JSONObject jSONObject2 = jSONObject1.put("+=,>NP 1=#", (Collection) linkedHashSet0);
      String string0 = jSONObject0.toString(0, 111);
      assertEquals("{\n                                                                                                               \"+=,>NP 1=#\": [],\n                                                                                                               \"W5u.yJ__0\": 0\n                                                                                                               }", string0);
  }

  //Test case number: 63
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.optBoolean(Ljava/lang/String;Z)Z: root-Branch
   * Goal 2. wheel.json.JSONObject.optBoolean(Ljava/lang/String;)Z: root-Branch
   */

  @Test
  public void test63()  throws Throwable  {
      HashMap<StringLabel, Long> hashMap0 = new HashMap<StringLabel, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("Igu`qso5q");
      assertFalse(boolean0);
  }

  //Test case number: 64
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.optLong(Ljava/lang/String;J)J: root-Branch
   * Goal 2. wheel.json.JSONObject.optLong(Ljava/lang/String;)J: root-Branch
   * Goal 3. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 81 LOOKUPSWITCH L1030 Case 34 - true
   * Goal 4. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 84 LOOKUPSWITCH L1030 Default-Case - false
   */

  @Test
  public void test64()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("|g~]N=\"cH%");
      assertEquals(0L, long0);
  }

  //Test case number: 65
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.optString(Ljava/lang/String;)Ljava/lang/String;: root-Branch
   * Goal 2. wheel.json.JSONObject.optString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I12 Branch 67 IFNULL L889 - true
   */

  @Test
  public void test65()  throws Throwable  {
      IndexedWord indexedWord0 = new IndexedWord("KH59Y^#Ntra5", 54, 49);
      JSONObject jSONObject0 = new JSONObject((Object) indexedWord0);
      String string0 = jSONObject0.optString("z?Jmw.JT&UaPS6<j!");
      assertEquals(1, jSONObject0.length());
      assertEquals("", string0);
  }

  //Test case number: 66
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/util/Map;)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.getDouble(Ljava/lang/String;)D: I13 Branch 45 IFEQ L463 - true
   * Goal 3. wheel.json.JSONObject.getLong(Ljava/lang/String;)J: I13 Branch 49 IFEQ L536 - true
   */

  @Test
  public void test66()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<WordLemmaTag, CategoryWordTag> hashMap0 = new HashMap<WordLemmaTag, CategoryWordTag>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (Map) hashMap0);
      try {
        long long0 = jSONObject0.getLong("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] is not a number.
         //
      }
  }

  //Test case number: 67
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;D)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I78 Branch 19 IFLE L270 - false
   * Goal 3. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I107 Branch 22 IFNE L273 - true
   * Goal 4. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 69 IFNONNULL L975 - false
   */

  @Test
  public void test67()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "] not found.");
      try {
        JSONObject jSONObject1 = jSONObject0.put((String) null, (double) 88L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
      }
  }

  //Test case number: 68
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;J)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.get(Ljava/lang/String;)Ljava/lang/Object;: I12 Branch 38 IFNONNULL L421 - true
   * Goal 3. wheel.json.JSONObject.getLong(Ljava/lang/String;)J: I13 Branch 49 IFEQ L536 - false
   */

  @Test
  public void test68()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{}", 0L);
      long long0 = jSONObject1.getLong("{}");
      assertEquals(0L, long0);
  }

  //Test case number: 69
  /*
   * 18 covered goals:
   * Goal 1. wheel.json.JSONObject.getString(Ljava/lang/String;)Ljava/lang/String;: root-Branch
   * Goal 2. wheel.json.JSONObject.get(Ljava/lang/String;)Ljava/lang/Object;: I12 Branch 38 IFNONNULL L421 - false
   * Goal 3. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I6 Branch 73 IFNULL L1015 - false
   * Goal 4. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I12 Branch 74 IFNE L1015 - true
   * Goal 5. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I51 Branch 75 IF_ICMPGE L1027 - true
   * Goal 6. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I51 Branch 75 IF_ICMPGE L1027 - false
   * Goal 7. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 76 LOOKUPSWITCH L1030 Case 8 - false
   * Goal 8. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 77 LOOKUPSWITCH L1030 Case 9 - false
   * Goal 9. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 78 LOOKUPSWITCH L1030 Case 10 - false
   * Goal 10. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 79 LOOKUPSWITCH L1030 Case 12 - false
   * Goal 11. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 80 LOOKUPSWITCH L1030 Case 13 - false
   * Goal 12. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 81 LOOKUPSWITCH L1030 Case 34 - false
   * Goal 13. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 82 LOOKUPSWITCH L1030 Case 47 - false
   * Goal 14. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 83 LOOKUPSWITCH L1030 Case 92 - false
   * Goal 15. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 84 LOOKUPSWITCH L1030 Default-Case - true
   * Goal 16. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I177 Branch 86 IF_ICMPLT L1058 - false
   * Goal 17. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I183 Branch 87 IF_ICMPLT L1058 - true
   * Goal 18. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I196 Branch 89 IF_ICMPLT L1058 - true
   */

  @Test
  public void test69()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try {
        String string0 = jSONObject0.getString("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
      }
  }

  //Test case number: 70
  /*
   * 20 covered goals:
   * Goal 1. wheel.json.JSONObject.optDouble(Ljava/lang/String;)D: root-Branch
   * Goal 2. wheel.json.JSONObject.<init>()V: root-Branch
   * Goal 3. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I33 Branch 17 IF_ICMPGE L263 - true
   * Goal 4. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I33 Branch 17 IF_ICMPGE L263 - false
   * Goal 5. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I58 Branch 18 IFLE L268 - true
   * Goal 6. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I58 Branch 18 IFLE L268 - false
   * Goal 7. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I78 Branch 19 IFLE L270 - true
   * Goal 8. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I92 Branch 20 IFLE L273 - true
   * Goal 9. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I92 Branch 20 IFLE L273 - false
   * Goal 10. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I100 Branch 21 IFEQ L273 - false
   * Goal 11. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I107 Branch 22 IFNE L273 - false
   * Goal 12. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I116 Branch 23 IF_ICMPNE L276 - true
   * Goal 13. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I135 Branch 24 IFNE L278 - false
   * Goal 14. wheel.json.JSONObject.opt(Ljava/lang/String;)Ljava/lang/Object;: I6 Branch 63 IFNONNULL L688 - true
   * Goal 15. wheel.json.JSONObject.optDouble(Ljava/lang/String;D)D: I13 Branch 64 IFEQ L764 - true
   * Goal 16. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 69 IFNONNULL L975 - true
   * Goal 17. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I20 Branch 70 IFNULL L978 - false
   * Goal 18. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I6 Branch 91 IFNULL L1088 - false
   * Goal 19. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I14 Branch 92 IFEQ L1089 - true
   * Goal 20. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I45 Branch 95 IFEQ L1094 - true
   */

  @Test
  public void test70()  throws Throwable  {
      WordLemmaTag wordLemmaTag0 = new WordLemmaTag();
      JSONObject jSONObject0 = new JSONObject((Object) wordLemmaTag0);
      double double0 = jSONObject0.optDouble("getlongBitsToDouble");
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(1, jSONObject0.length());
  }

  //Test case number: 71
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.has(Ljava/lang/String;)Z: root-Branch
   * Goal 2. wheel.json.JSONObject.<init>(Ljava/util/Map;)V: I11 Branch 16 IFNONNULL L234 - true
   */

  @Test
  public void test71()  throws Throwable  {
      HashMap<StringLabel, Long> hashMap0 = new HashMap<StringLabel, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has("@1HF]7XCqD`XEEvAnv");
      assertFalse(boolean0);
  }
}
