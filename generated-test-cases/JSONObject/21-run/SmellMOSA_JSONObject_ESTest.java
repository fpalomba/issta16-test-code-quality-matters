/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 18 03:46:05 GMT 2015
 */

package wheel.json;

import static org.junit.Assert.*;
import org.junit.Test;
import edu.stanford.nlp.ling.CategoryWordTag;
import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.ling.IndexedWord;
import edu.stanford.nlp.ling.Label;
import edu.stanford.nlp.ling.LabeledWord;
import edu.stanford.nlp.ling.StringLabel;
import edu.stanford.nlp.ling.Tag;
import edu.stanford.nlp.ling.TaggedWord;
import edu.stanford.nlp.ling.TaggedWordFactory;
import edu.stanford.nlp.ling.Word;
import edu.stanford.nlp.ling.WordLemmaTag;
import edu.stanford.nlp.ling.WordTag;
import edu.stanford.nlp.stats.IntCounter;
import edu.stanford.nlp.trees.Tree;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 29 IFNONNULL L374 - true
   * Goal 2. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I39 Branch 30 IFEQ L376 - true
   */

  @Test
  public void test00()  throws Throwable  {
      IndexedWord indexedWord0 = IndexedWord.NO_WORD;
      assertNull(indexedWord0.docID());
      assertEquals(-1, indexedWord0.sentIndex());
      assertEquals(-1, indexedWord0.beginPosition());
      assertEquals("", indexedWord0.originalText());
      assertNull(indexedWord0.lemma());
      assertNull(indexedWord0.value());
      assertEquals(0, indexedWord0.copyCount());
      assertEquals(-1, indexedWord0.endPosition());
      assertEquals(3, indexedWord0.size());
      assertNull(indexedWord0.word());
      assertNull(indexedWord0.ner());
      assertEquals(-1, indexedWord0.index());
      assertNull(indexedWord0.tag());
      assertNotNull(indexedWord0);
      
      JSONObject jSONObject0 = new JSONObject((Object) indexedWord0);
      assertNull(indexedWord0.docID());
      assertEquals(-1, indexedWord0.sentIndex());
      assertEquals(-1, indexedWord0.beginPosition());
      assertEquals("", indexedWord0.originalText());
      assertNull(indexedWord0.lemma());
      assertNull(indexedWord0.value());
      assertEquals(0, indexedWord0.copyCount());
      assertEquals(-1, indexedWord0.endPosition());
      assertEquals(3, indexedWord0.size());
      assertNull(indexedWord0.word());
      assertNull(indexedWord0.ner());
      assertEquals(-1, indexedWord0.index());
      assertNull(indexedWord0.tag());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("", (Object) linkedList0);
      assertNull(indexedWord0.docID());
      assertEquals(-1, indexedWord0.sentIndex());
      assertEquals(-1, indexedWord0.beginPosition());
      assertEquals("", indexedWord0.originalText());
      assertNull(indexedWord0.lemma());
      assertNull(indexedWord0.value());
      assertEquals(0, indexedWord0.copyCount());
      assertEquals(-1, indexedWord0.endPosition());
      assertEquals(3, indexedWord0.size());
      assertNull(indexedWord0.word());
      assertNull(indexedWord0.ner());
      assertEquals(-1, indexedWord0.index());
      assertNull(indexedWord0.tag());
      assertEquals(0, linkedList0.size());
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      
      try {
        JSONObject jSONObject2 = jSONObject1.append("", (Object) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
      }
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 66 IFEQ L829 - true
   */

  @Test
  public void test01()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.optJSONObject("-P2AP2CABB");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(jSONObject1);
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I6 Branch 1 IFNULL L115 - false
   * Goal 2. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I12 Branch 2 IF_ACMPNE L115 - true
   */

  @Test
  public void test02()  throws Throwable  {
      Byte byte0 = new Byte((byte)25);
      assertEquals((byte)25, (byte)byte0);
      
      JSONObject jSONObject0 = new JSONObject((Object) byte0);
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      HashMap<Word, WordTag> hashMap0 = new HashMap<Word, WordTag>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject1 = jSONObject0.put("}r", (Map) hashMap0);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      boolean boolean0 = jSONObject1.isNull("}r");
      assertFalse(boolean0);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getInt(Ljava/lang/String;)I: I13 Branch 46 IFEQ L484 - false
   */

  @Test
  public void test03()  throws Throwable  {
      Long long0 = new Long((-1845L));
      assertEquals((-1845L), (long)long0);
      
      JSONObject jSONObject0 = new JSONObject((Object) long0);
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("nfA XX!V:hl v", (double) (-1845L));
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject1.getInt("nfA XX!V:hl v");
      assertEquals((-1845), int0);
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I6 Branch 52 IFNONNULL L568 - false
   */

  @Test
  public void test04()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getString(Ljava/lang/String;)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test05()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      try {
        String string0 = jSONObject0.getString("RjH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"RjH\"] not found.
         //
      }
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I30 Branch 94 IFEQ L1090 - false
   */

  @Test
  public void test06()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      try {
        JSONObject jSONObject1 = jSONObject0.put("em>u", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
      }
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getLong(Ljava/lang/String;)J: I13 Branch 49 IFEQ L536 - true
   */

  @Test
  public void test07()  throws Throwable  {
      HashMap<TaggedWord, Tree> hashMap0 = new HashMap<TaggedWord, Tree>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put(")NM&Z\"", (Map) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      
      long long0 = jSONObject1.optLong(")NM&Z\"");
      assertEquals(0L, long0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I6 Branch 57 IFNONNULL L662 - false
   */

  @Test
  public void test08()  throws Throwable  {
      try {
        String string0 = JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
      }
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I121 Branch 129 IFEQ L1329 - false
   */

  @Test
  public void test09()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = JSONObject.valueToString(hashMap0, 4244, 4244);
      assertEquals("{}", string0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(string0);
  }

  //Test case number: 10
  @Test
  public void test10()  throws Throwable  {
      TaggedWord taggedWord0 = new TaggedWord("] is not a number.");
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals("] is not a number.", taggedWord0.word());
      assertEquals("] is not a number.", taggedWord0.value());
      assertEquals(-1, taggedWord0.endPosition());
      assertNull(taggedWord0.tag());
      assertNotNull(taggedWord0);
      
      JSONObject jSONObject0 = new JSONObject((Object) taggedWord0);
      assertEquals(1, jSONObject0.length());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals("] is not a number.", taggedWord0.word());
      assertEquals("] is not a number.", taggedWord0.value());
      assertEquals(-1, taggedWord0.endPosition());
      assertNull(taggedWord0.tag());
      assertNotNull(jSONObject0);
      
      HashMap<CategoryWordTag, StringLabel> hashMap0 = new HashMap<CategoryWordTag, StringLabel>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", (Map) hashMap0);
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject0.length());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals("] is not a number.", taggedWord0.word());
      assertEquals("] is not a number.", taggedWord0.value());
      assertEquals(-1, taggedWord0.endPosition());
      assertNull(taggedWord0.tag());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject1.optInt("] is not a number.");
      assertEquals(0, int0);
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject0.length());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals("] is not a number.", taggedWord0.word());
      assertEquals("] is not a number.", taggedWord0.value());
      assertEquals(-1, taggedWord0.endPosition());
      assertNull(taggedWord0.tag());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 11
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.optDouble(Ljava/lang/String;)D: root-Branch
   * Goal 2. wheel.json.JSONObject.optDouble(Ljava/lang/String;D)D: I13 Branch 64 IFEQ L764 - false
   */

  @Test
  public void test11()  throws Throwable  {
      TaggedWord taggedWord0 = new TaggedWord("] is not a number.");
      assertEquals("] is not a number.", taggedWord0.value());
      assertEquals(-1, taggedWord0.endPosition());
      assertNull(taggedWord0.tag());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals("] is not a number.", taggedWord0.word());
      assertNotNull(taggedWord0);
      
      JSONObject jSONObject0 = new JSONObject((Object) taggedWord0);
      assertEquals(1, jSONObject0.length());
      assertEquals("] is not a number.", taggedWord0.value());
      assertEquals(-1, taggedWord0.endPosition());
      assertNull(taggedWord0.tag());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals("] is not a number.", taggedWord0.word());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", 0.0);
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject0.length());
      assertEquals("] is not a number.", taggedWord0.value());
      assertEquals(-1, taggedWord0.endPosition());
      assertNull(taggedWord0.tag());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals("] is not a number.", taggedWord0.word());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      
      double double0 = jSONObject1.optDouble("] is not a number.");
      assertEquals(0.0, double0, 0.01D);
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject0.length());
      assertEquals("] is not a number.", taggedWord0.value());
      assertEquals(-1, taggedWord0.endPosition());
      assertNull(taggedWord0.tag());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals("] is not a number.", taggedWord0.word());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 12
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I11 Branch 103 IFNE L1190 - false
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I89 Branch 127 IFEQ L1323 - false
   */

  @Test
  public void test12()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = JSONObject.valueToString(jSONObject0, 1597, 1597);
      assertEquals("{}", string0);
      assertEquals(0, jSONObject0.length());
      assertNotNull(string0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I6 Branch 98 IFNULL L1113 - true
   */

  @Test
  public void test13()  throws Throwable  {
      Double double0 = new Double((double) 2595);
      assertEquals(2595.0, (double)double0, 0.01D);
      
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject((Object) double0, stringArray0);
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I11 Branch 50 IFNE L548 - false
   */

  @Test
  public void test14()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertNull(stringArray0);
  }

  //Test case number: 15
  /*
   * 6 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I12 Branch 4 IF_ICMPEQ L178 - true
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 5 LOOKUPSWITCH L183 Case 0 - false
   * Goal 3. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 6 LOOKUPSWITCH L183 Case 125 - false
   * Goal 4. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 7 LOOKUPSWITCH L183 Default-Case - true
   * Goal 5. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I61 Branch 8 IF_ICMPNE L198 - true
   * Goal 6. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I86 Branch 10 IF_ICMPEQ L202 - false
   */

  @Test
  public void test15()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{S)I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {S)I
         //
      }
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I84 Branch 135 IFEQ L1367 - false
   */

  @Test
  public void test16()  throws Throwable  {
      WordLemmaTag wordLemmaTag0 = new WordLemmaTag("3s=&", "3s=&", "3s=&");
      assertEquals("3s=&", wordLemmaTag0.value());
      assertEquals("3s=&", wordLemmaTag0.tag());
      assertEquals("3s=&", wordLemmaTag0.lemma());
      assertEquals("3s=&", wordLemmaTag0.word());
      assertNotNull(wordLemmaTag0);
      
      JSONObject jSONObject0 = new JSONObject((Object) wordLemmaTag0);
      assertEquals("3s=&", wordLemmaTag0.value());
      assertEquals("3s=&", wordLemmaTag0.tag());
      assertEquals("3s=&", wordLemmaTag0.lemma());
      assertEquals("3s=&", wordLemmaTag0.word());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      LabeledWord labeledWord0 = new LabeledWord();
      assertNull(labeledWord0.word());
      assertEquals(-1, labeledWord0.beginPosition());
      assertEquals(-1, labeledWord0.endPosition());
      assertNull(labeledWord0.value());
      assertNotNull(labeledWord0);
      
      String string0 = labeledWord0.toString();
      assertEquals("null/null", string0);
      assertNull(labeledWord0.word());
      assertEquals(-1, labeledWord0.beginPosition());
      assertEquals(-1, labeledWord0.endPosition());
      assertNull(labeledWord0.value());
      assertNotNull(string0);
      
      JSONObject jSONObject1 = jSONObject0.append("null/null", (Object) wordLemmaTag0);
      assertEquals(2, jSONObject1.length());
      assertEquals("3s=&", wordLemmaTag0.value());
      assertEquals("3s=&", wordLemmaTag0.tag());
      assertEquals("3s=&", wordLemmaTag0.lemma());
      assertEquals("3s=&", wordLemmaTag0.word());
      assertEquals(2, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3s=&");
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)jSONObject0.write((Writer) mockPrintWriter0);
      assertEquals("3s=&", wordLemmaTag0.value());
      assertEquals("3s=&", wordLemmaTag0.tag());
      assertEquals("3s=&", wordLemmaTag0.lemma());
      assertEquals("3s=&", wordLemmaTag0.word());
      assertEquals(2, jSONObject0.length());
      assertSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(mockPrintWriter1, mockPrintWriter0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(mockPrintWriter1);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optLong(Ljava/lang/String;)J: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      Float float0 = new Float(1447.9275F);
      assertEquals(1447.9275F, (float)float0, 0.01F);
      
      JSONObject jSONObject0 = new JSONObject((Object) float0);
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      long long0 = jSONObject0.optLong("After UCPTransformer:             ");
      assertEquals(0L, long0);
      assertEquals(3, jSONObject0.length());
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getDouble(Ljava/lang/String;)D: I13 Branch 45 IFEQ L463 - false
   */

  @Test
  public void test18()  throws Throwable  {
      HashMap<JSONArray, Short> hashMap0 = new HashMap<JSONArray, Short>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("geltsetWord", (long) 4508);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      
      double double0 = jSONObject1.getDouble("geltsetWord");
      assertEquals(4508.0, double0, 0.01D);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optString(Ljava/lang/String;)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      HashMap<HashMap<StringLabel, Word>, LinkedList<CoreLabel>> hashMap0 = new HashMap<HashMap<StringLabel, Word>, LinkedList<CoreLabel>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject0);
      
      String string0 = jSONObject0.optString((String) null);
      assertEquals("", string0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(string0);
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 47 IFEQ L499 - true
   */

  @Test
  public void test20()  throws Throwable  {
      Tag tag0 = new Tag();
      assertEquals(-1, tag0.endPosition());
      assertNull(tag0.tag());
      assertNull(tag0.value());
      assertEquals(-1, tag0.beginPosition());
      assertNotNull(tag0);
      
      JSONObject jSONObject0 = new JSONObject((Object) tag0);
      assertEquals(1, jSONObject0.length());
      assertEquals(-1, tag0.endPosition());
      assertNull(tag0.tag());
      assertNull(tag0.value());
      assertEquals(-1, tag0.beginPosition());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("Incompatible CRFClassifier: labelIndices length does not match", (-2755));
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertEquals(-1, tag0.endPosition());
      assertNull(tag0.tag());
      assertNull(tag0.value());
      assertEquals(-1, tag0.beginPosition());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      try {
        JSONArray jSONArray0 = jSONObject0.getJSONArray("Incompatible CRFClassifier: labelIndices length does not match");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Incompatible CRFClassifier: labelIndices length does not match\"] is not a JSONArray.
         //
      }
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I6 Branch 73 IFNULL L1015 - true
   */

  @Test
  public void test21()  throws Throwable  {
      Float float0 = new Float(1447.9275F);
      assertEquals(1447.9275F, (float)float0, 0.01F);
      
      JSONObject jSONObject0 = new JSONObject((Object) float0);
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      try {
        Object object0 = jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
      }
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optLong(Ljava/lang/String;J)J: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      Float float0 = new Float(1447.9275F);
      assertEquals(1447.9275F, (float)float0, 0.01F);
      
      JSONObject jSONObject0 = new JSONObject((Object) float0);
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      long long0 = jSONObject0.optLong("After UCPTransformer:             ", (-2619L));
      assertEquals((-2619L), long0);
      assertEquals(3, jSONObject0.length());
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 48 IFEQ L517 - false
   */

  @Test
  public void test23()  throws Throwable  {
      TaggedWord taggedWord0 = new TaggedWord("] is not a number.");
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("] is not a number.", taggedWord0.value());
      assertEquals("] is not a number.", taggedWord0.word());
      assertEquals(-1, taggedWord0.beginPosition());
      assertNull(taggedWord0.tag());
      assertNotNull(taggedWord0);
      
      JSONObject jSONObject0 = new JSONObject((Object) taggedWord0);
      assertEquals(1, jSONObject0.length());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("] is not a number.", taggedWord0.value());
      assertEquals("] is not a number.", taggedWord0.word());
      assertEquals(-1, taggedWord0.beginPosition());
      assertNull(taggedWord0.tag());
      assertNotNull(jSONObject0);
      
      HashMap<CategoryWordTag, StringLabel> hashMap0 = new HashMap<CategoryWordTag, StringLabel>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", (Map) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(2, jSONObject0.length());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("] is not a number.", taggedWord0.value());
      assertEquals("] is not a number.", taggedWord0.word());
      assertEquals(-1, taggedWord0.beginPosition());
      assertNull(taggedWord0.tag());
      assertEquals(2, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject1.getJSONObject("] is not a number.");
      assertEquals(0, jSONObject2.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(2, jSONObject0.length());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("] is not a number.", taggedWord0.value());
      assertEquals("] is not a number.", taggedWord0.word());
      assertEquals(-1, taggedWord0.beginPosition());
      assertNull(taggedWord0.tag());
      assertEquals(2, jSONObject1.length());
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject2);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject1.equals((Object)jSONObject2));
  }

  //Test case number: 24
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I14 Branch 39 IFNE L439 - false
   * Goal 2. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I20 Branch 40 IFEQ L439 - true
   * Goal 3. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I41 Branch 42 IFNE L443 - false
   * Goal 4. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I47 Branch 43 IFEQ L443 - true
   */

  @Test
  public void test24()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.append("getparseByte", (Object) "getparseByte");
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      boolean boolean0 = jSONObject1.optBoolean("getparseByte", true);
      assertTrue(boolean0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I156 Branch 120 IFEQ L1281 - false
   */

  @Test
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "NP-LGS";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("NP-LGS");
      assertNotNull(mockPrintWriter0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "NP-LGS");
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)jSONObject0.write((Writer) mockPrintWriter0);
      assertEquals(3, jSONObject0.length());
      assertSame(mockPrintWriter1, mockPrintWriter0);
      assertSame(mockPrintWriter0, mockPrintWriter1);
      assertNotNull(mockPrintWriter1);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I45 Branch 35 IFGE L400 - true
   */

  @Test
  public void test26()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-3.4587292534E10));
      assertEquals("-3.4587292534E10", string0);
      assertNotNull(string0);
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;I)Lwheel/json/JSONObject;: root-Branch
   */

  @Test
  public void test27()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("toH", 90);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.isNull(Ljava/lang/String;)Z: root-Branch
   */

  @Test
  public void test28()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("Rv^i_4cE^y");
      assertFalse(boolean0);
      
      JSONObject jSONObject0 = new JSONObject((Object) boolean0);
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      boolean boolean1 = jSONObject0.isNull("Rv^i_4cE^y");
      assertTrue(boolean1);
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0.equals((Object)boolean1));
  }

  //Test case number: 29
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;J)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.getJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 48 IFEQ L517 - true
   * Goal 3. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 83 LOOKUPSWITCH L1030 Case 92 - true
   */

  @Test
  public void test29()  throws Throwable  {
      String string0 = "\\u";
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put(string0, 3000L);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      try {
        JSONObject jSONObject2 = jSONObject1.getJSONObject(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\\u\"] is not a JSONObject.
         //
      }
  }

  //Test case number: 30
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.has(Ljava/lang/String;)Z: root-Branch
   */

  @Test
  public void test30()  throws Throwable  {
      Tag tag0 = new Tag();
      assertEquals(-1, tag0.beginPosition());
      assertNull(tag0.tag());
      assertEquals(-1, tag0.endPosition());
      assertNull(tag0.value());
      assertNotNull(tag0);
      
      JSONObject jSONObject0 = new JSONObject((Object) tag0);
      assertEquals(-1, tag0.beginPosition());
      assertNull(tag0.tag());
      assertEquals(-1, tag0.endPosition());
      assertNull(tag0.value());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = jSONObject0.has("crfSegmenterProp");
      assertFalse(boolean0);
      assertEquals(-1, tag0.beginPosition());
      assertNull(tag0.tag());
      assertEquals(-1, tag0.endPosition());
      assertNull(tag0.value());
      assertEquals(1, jSONObject0.length());
  }

  //Test case number: 31
  /*
   * 6 covered goals:
   * Goal 1. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I21 Branch 132 IFEQ L1357 - true
   * Goal 2. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I21 Branch 132 IFEQ L1357 - false
   * Goal 3. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I28 Branch 133 IFEQ L1358 - true
   * Goal 4. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I28 Branch 133 IFEQ L1358 - false
   * Goal 5. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I65 Branch 134 IFEQ L1365 - true
   * Goal 6. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I84 Branch 135 IFEQ L1367 - true
   */

  @Test
  public void test31()  throws Throwable  {
      Float float0 = new Float(1449.7645F);
      assertEquals(1449.7645F, (float)float0, 0.01F);
      
      JSONObject jSONObject0 = new JSONObject((Object) float0);
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("After UCPTransformer:             ");
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)jSONObject0.write((Writer) mockPrintWriter0);
      assertEquals(3, jSONObject0.length());
      assertSame(mockPrintWriter1, mockPrintWriter0);
      assertSame(mockPrintWriter0, mockPrintWriter1);
      assertNotNull(mockPrintWriter1);
  }

  //Test case number: 32
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I40 Branch 53 IFNE L574 - false
   */

  @Test
  public void test32()  throws Throwable  {
      Tag tag0 = new Tag("After UCPTransformer:             ");
      assertEquals(-1, tag0.beginPosition());
      assertEquals("After UCPTransformer:             ", tag0.tag());
      assertEquals("After UCPTransformer:             ", tag0.value());
      assertEquals(-1, tag0.endPosition());
      assertNotNull(tag0);
      
      String[] stringArray0 = JSONObject.getNames((Object) tag0);
      assertEquals(-1, tag0.beginPosition());
      assertEquals("After UCPTransformer:             ", tag0.tag());
      assertEquals("After UCPTransformer:             ", tag0.value());
      assertEquals(-1, tag0.endPosition());
      assertNull(stringArray0);
  }

  //Test case number: 33
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I125 Branch 107 IF_ICMPGE L1211 - false
   * Goal 2. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I194 Branch 109 IF_ICMPGE L1221 - false
   * Goal 3. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I160 Branch 131 IFEQ L1335 - false
   */

  @Test
  public void test33()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = jSONObject0.toString(0, 300);
      assertEquals("{\n                                                                                                                                                                                                                                                                                                            \"bytes\": [],\n                                                                                                                                                                                                                                                                                                            \"class\": \"class java.lang.String\",\n                                                                                                                                                                                                                                                                                                            \"empty\": true\n                                                                                                                                                                                                                                                                                                            }", string0);
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  //Test case number: 34
  /*
   * 10 covered goals:
   * Goal 1. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I26 Branch 27 IFEQ L347 - false
   * Goal 2. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I11 Branch 50 IFNE L548 - true
   * Goal 3. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I37 Branch 51 IFEQ L554 - true
   * Goal 4. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I37 Branch 51 IFEQ L554 - false
   * Goal 5. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I54 Branch 61 IFLE L671 - false
   * Goal 6. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I77 Branch 62 IFLE L674 - false
   * Goal 7. wheel.json.JSONObject.optJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 65 IFEQ L815 - true
   * Goal 8. wheel.json.JSONObject.optString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I12 Branch 67 IFNULL L889 - true
   * Goal 9. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I41 Branch 104 IF_ICMPNE L1197 - false
   * Goal 10. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I62 Branch 125 IFEQ L1317 - false
   */

  @Test
  public void test34()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONObject0.optJSONArray("toS");
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray1);
      
      JSONObject jSONObject1 = jSONObject0.put(",GsQVk", (double) (-1L));
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      
      String string0 = jSONObject1.optString("toS", "toS");
      assertEquals("toS", string0);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(string0);
      
      String string1 = jSONObject1.toString(20, 20);
      assertEquals("{\",GsQVk\": -1}", string1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertNotSame(string1, string0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject2 = jSONObject0.accumulate("{\",GsQVk\": -1}", (Object) jSONArray0);
      assertEquals(2, jSONObject2.length());
      assertEquals(0, jSONArray0.length());
      assertEquals(2, jSONObject0.length());
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject2);
  }

  //Test case number: 35
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optDouble(Ljava/lang/String;D)D: I13 Branch 64 IFEQ L764 - true
   */

  @Test
  public void test35()  throws Throwable  {
      HashMap<LabeledWord, CoreLabel> hashMap0 = new HashMap<LabeledWord, CoreLabel>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject0);
      
      double double0 = jSONObject0.optDouble("3q3Mv}", 0.0);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  //Test case number: 36
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I6 Branch 121 IFNULL L1304 - true
   */

  @Test
  public void test36()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 1597, 1597);
      assertEquals("null", string0);
      assertNotNull(string0);
  }

  //Test case number: 37
  /*
   * 7 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/util/Map;)V: I11 Branch 16 IFNONNULL L234 - false
   * Goal 2. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I6 Branch 52 IFNONNULL L568 - true
   * Goal 3. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I40 Branch 53 IFNE L574 - true
   * Goal 4. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I60 Branch 54 IF_ICMPGE L578 - true
   * Goal 5. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I60 Branch 54 IF_ICMPGE L578 - false
   * Goal 6. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I18 Branch 55 IFEQ L648 - false
   * Goal 7. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I37 Branch 56 IFNE L651 - true
   */

  @Test
  public void test37()  throws Throwable  {
      Byte byte0 = new Byte((byte)25);
      assertEquals((byte)25, (byte)byte0);
      
      JSONObject jSONObject0 = new JSONObject((Object) byte0);
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      assertNotNull(stringArray0);
      
      HashMap<Word, WordTag> hashMap0 = new HashMap<Word, WordTag>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject1 = jSONObject0.put("}r", (Map) hashMap0);
      assertEquals(2, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      
      LinkedList<WordLemmaTag> linkedList0 = new LinkedList<WordLemmaTag>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(2, jSONArray0.length());
      assertEquals(2, jSONObject0.length());
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONArray0);
      
      JSONObject jSONObject2 = jSONObject0.accumulate("}r", (Object) linkedList0);
      assertEquals(2, jSONObject2.length());
      assertEquals(0, linkedList0.size());
      assertEquals(2, jSONObject0.length());
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertNotNull(jSONObject2);
      
      JSONObject jSONObject3 = jSONObject0.put("}r", (Map) null);
      assertEquals(2, jSONObject3.length());
      assertEquals(2, jSONObject0.length());
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertNotNull(jSONObject3);
  }

  //Test case number: 38
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I18 Branch 55 IFEQ L648 - true
   * Goal 2. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I37 Branch 56 IFNE L651 - false
   */

  @Test
  public void test38()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
  }

  //Test case number: 39
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I54 Branch 36 IFLE L401 - false
   * Goal 2. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I77 Branch 37 IFLE L404 - false
   */

  @Test
  public void test39()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      assertNotNull(string0);
  }

  //Test case number: 40
  /*
   * 8 covered goals:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I31 Branch 58 IFLE L670 - false
   * Goal 2. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I38 Branch 59 IFGE L670 - false
   * Goal 3. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I45 Branch 60 IFGE L670 - false
   * Goal 4. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I54 Branch 61 IFLE L671 - true
   * Goal 5. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I77 Branch 62 IFLE L674 - true
   * Goal 6. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I45 Branch 95 IFEQ L1094 - false
   * Goal 7. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I54 Branch 96 IFNE L1095 - false
   * Goal 8. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I61 Branch 97 IFEQ L1095 - true
   */

  @Test
  public void test40()  throws Throwable  {
      Float float0 = new Float(1447.9275F);
      assertEquals(1447.9275F, (float)float0, 0.01F);
      
      String string0 = JSONObject.numberToString((Number) float0);
      assertEquals("1447.9275", string0);
      assertNotNull(string0);
  }

  //Test case number: 41
  /*
   * 18 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/util/Collection;)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.length()I: root-Branch
   * Goal 3. wheel.json.JSONObject.toString(I)Ljava/lang/String;: root-Branch
   * Goal 4. wheel.json.JSONObject.<init>(Ljava/lang/Object;[Ljava/lang/String;)V: I20 Branch 25 IF_ICMPGE L304 - true
   * Goal 5. wheel.json.JSONObject.<init>(Ljava/lang/Object;[Ljava/lang/String;)V: I20 Branch 25 IF_ICMPGE L304 - false
   * Goal 6. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I52 Branch 28 IFEQ L350 - true
   * Goal 7. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I11 Branch 103 IFNE L1190 - true
   * Goal 8. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I41 Branch 104 IF_ICMPNE L1197 - true
   * Goal 9. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I84 Branch 105 IFEQ L1204 - true
   * Goal 10. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I84 Branch 105 IFEQ L1204 - false
   * Goal 11. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I98 Branch 106 IF_ICMPLE L1206 - true
   * Goal 12. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I98 Branch 106 IF_ICMPLE L1206 - false
   * Goal 13. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I125 Branch 107 IF_ICMPGE L1211 - true
   * Goal 14. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I177 Branch 108 IF_ICMPLE L1219 - false
   * Goal 15. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I194 Branch 109 IF_ICMPGE L1221 - true
   * Goal 16. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I13 Branch 122 IFEQ L1304 - false
   * Goal 17. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I76 Branch 126 IFEQ L1320 - false
   * Goal 18. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I105 Branch 128 IFEQ L1326 - false
   */

  @Test
  public void test41()  throws Throwable  {
      IntCounter<WordTag> intCounter0 = new IntCounter<WordTag>();
      assertEquals(0.0, intCounter0.totalCount(), 0.01D);
      assertEquals(0.0, intCounter0.defaultReturnValue(), 0.01D);
      assertEquals(0, intCounter0.totalIntCount());
      assertEquals(0, intCounter0.size());
      assertTrue(intCounter0.isEmpty());
      assertEquals(0.0, intCounter0.totalDoubleCount(), 0.01D);
      assertEquals("{}", intCounter0.toString());
      assertEquals(Double.NaN, intCounter0.averageCount(), 0.01D);
      assertNotNull(intCounter0);
      
      Set<WordTag> set0 = intCounter0.keysAbove((-385));
      assertEquals(0.0, intCounter0.totalCount(), 0.01D);
      assertEquals(0.0, intCounter0.defaultReturnValue(), 0.01D);
      assertEquals(0, intCounter0.totalIntCount());
      assertEquals(0, intCounter0.size());
      assertTrue(intCounter0.isEmpty());
      assertEquals(0.0, intCounter0.totalDoubleCount(), 0.01D);
      assertEquals("{}", intCounter0.toString());
      assertEquals(Double.NaN, intCounter0.averageCount(), 0.01D);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "gXt";
      stringArray0[6] = "l_]B\"[TgUZM^|O";
      stringArray0[2] = "gXt";
      stringArray0[4] = "gXt";
      stringArray0[2] = "l_]B\"[TgUZM^|O";
      JSONObject jSONObject0 = new JSONObject((Object) short0, stringArray0);
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
      
      JSONObject jSONObject1 = jSONObject0.put("gXt", object0);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject1.put("l_]B\"[TgUZM^|O", (Collection) set0);
      assertEquals(2, jSONObject1.length());
      assertEquals(0.0, intCounter0.totalCount(), 0.01D);
      assertEquals(0.0, intCounter0.defaultReturnValue(), 0.01D);
      assertEquals(0, intCounter0.totalIntCount());
      assertEquals(0, intCounter0.size());
      assertTrue(intCounter0.isEmpty());
      assertEquals(0.0, intCounter0.totalDoubleCount(), 0.01D);
      assertEquals("{}", intCounter0.toString());
      assertEquals(Double.NaN, intCounter0.averageCount(), 0.01D);
      assertEquals(2, jSONObject2.length());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertNotNull(jSONObject2);
      
      Boolean boolean0 = Boolean.valueOf("gXt");
      assertFalse(boolean0);
      
      JSONObject jSONObject3 = jSONObject2.accumulate("gXt", (Object) boolean0);
      assertEquals(2, jSONObject1.length());
      assertEquals(0.0, intCounter0.totalCount(), 0.01D);
      assertEquals(0.0, intCounter0.defaultReturnValue(), 0.01D);
      assertEquals(0, intCounter0.totalIntCount());
      assertEquals(0, intCounter0.size());
      assertTrue(intCounter0.isEmpty());
      assertEquals(0.0, intCounter0.totalDoubleCount(), 0.01D);
      assertEquals("{}", intCounter0.toString());
      assertEquals(Double.NaN, intCounter0.averageCount(), 0.01D);
      assertEquals(2, jSONObject2.length());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(2, jSONObject3.length());
      assertEquals(2, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject3);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertNotNull(jSONObject3);
      
      String string0 = jSONObject3.toString((-385));
      assertEquals("{\n\"l_]B\\\"[TgUZM^|O\": [],\n\"gXt\": [\nnull,\nfalse\n]\n}", string0);
      assertEquals(2, jSONObject1.length());
      assertEquals(0.0, intCounter0.totalCount(), 0.01D);
      assertEquals(0.0, intCounter0.defaultReturnValue(), 0.01D);
      assertEquals(0, intCounter0.totalIntCount());
      assertEquals(0, intCounter0.size());
      assertTrue(intCounter0.isEmpty());
      assertEquals(0.0, intCounter0.totalDoubleCount(), 0.01D);
      assertEquals("{}", intCounter0.toString());
      assertEquals(Double.NaN, intCounter0.averageCount(), 0.01D);
      assertEquals(2, jSONObject2.length());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(2, jSONObject3.length());
      assertEquals(2, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject3);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertNotNull(string0);
  }

  //Test case number: 42
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 78 LOOKUPSWITCH L1030 Case 10 - true
   */

  @Test
  public void test42()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "c,;2 hHq^G ");
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      try {
        JSONObject jSONObject1 = jSONObject0.getJSONObject(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
      }
  }

  //Test case number: 43
  @Test
  public void test43()  throws Throwable  {
      HashMap<StringLabel, Word> hashMap0 = new HashMap<StringLabel, Word>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String[] stringArray0 = new String[4];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertEquals(0, jSONObject0.length());
      assertNotSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject0.equals((Object)jSONObject1));
  }

  //Test case number: 44
  /*
   * 7 covered goals:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I7 Branch 31 IFNE L393 - false
   * Goal 2. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I13 Branch 32 IFEQ L393 - true
   * Goal 3. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I31 Branch 33 IFLE L400 - false
   * Goal 4. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I38 Branch 34 IFGE L400 - false
   * Goal 5. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I45 Branch 35 IFGE L400 - false
   * Goal 6. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I54 Branch 36 IFLE L401 - true
   * Goal 7. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I77 Branch 37 IFLE L404 - true
   */

  @Test
  public void test44()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-794.5757360820245));
      assertEquals("-794.5757360820245", string0);
      assertNotNull(string0);
  }

  //Test case number: 45
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I140 Branch 130 IFEQ L1332 - false
   */

  @Test
  public void test45()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = JSONObject.valueToString(linkedList0, 1597, 1597);
      assertEquals("[]", string0);
      assertEquals(0, linkedList0.size());
      assertNotNull(string0);
  }

  //Test case number: 46
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 26 IFNONNULL L346 - true
   * Goal 2. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I52 Branch 28 IFEQ L350 - false
   * Goal 3. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I6 Branch 110 IFNULL L1253 - true
   */

  @Test
  public void test46()  throws Throwable  {
      HashMap<TaggedWord, Tree> hashMap0 = new HashMap<TaggedWord, Tree>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.append(")NM&Z\"", (Object) null);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject1.accumulate(")NM&Z\"", (Object) null);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertNotNull(jSONObject2);
      
      String string0 = jSONObject2.toString();
      assertEquals("{\")NM&Z\\\"\":[null,null]}", string0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertNotNull(string0);
  }

  //Test case number: 47
  /*
   * 5 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;D)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 29 IFNONNULL L374 - false
   * Goal 3. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I14 Branch 92 IFEQ L1089 - false
   * Goal 4. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I23 Branch 93 IFNE L1090 - false
   * Goal 5. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I30 Branch 94 IFEQ L1090 - true
   */

  @Test
  public void test47()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "mqin");
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Short short0 = new Short((short)153);
      assertEquals((short)153, (short)short0);
      
      JSONObject jSONObject1 = jSONObject0.append("mqin", (Object) short0);
      assertEquals(4, jSONObject0.length());
      assertEquals(4, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject1.put("mqin", (-0.8310960396777949));
      assertEquals(4, jSONObject0.length());
      assertEquals(4, jSONObject2.length());
      assertEquals(4, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject2);
  }

  //Test case number: 48
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Z)Lwheel/json/JSONObject;: I8 Branch 68 IFEQ L902 - true
   * Goal 2. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I12 Branch 74 IFNE L1015 - false
   * Goal 3. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I6 Branch 91 IFNULL L1088 - true
   */

  @Test
  public void test48()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("", false);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      
      JSONObject.testValidity((Object) null);
      try {
        double double0 = jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
      }
  }

  //Test case number: 49
  /*
   * 9 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/util/Map;)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.<init>(Ljava/lang/String;)V: root-Branch
   * Goal 3. wheel.json.JSONObject.optInt(Ljava/lang/String;I)I: root-Branch
   * Goal 4. wheel.json.JSONObject.optInt(Ljava/lang/String;)I: root-Branch
   * Goal 5. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I12 Branch 4 IF_ICMPEQ L178 - false
   * Goal 6. wheel.json.JSONObject.get(Ljava/lang/String;)Ljava/lang/Object;: I12 Branch 38 IFNONNULL L421 - true
   * Goal 7. wheel.json.JSONObject.getDouble(Ljava/lang/String;)D: I13 Branch 45 IFEQ L463 - true
   * Goal 8. wheel.json.JSONObject.getInt(Ljava/lang/String;)I: I13 Branch 46 IFEQ L484 - true
   * Goal 9. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 81 LOOKUPSWITCH L1030 Case 34 - true
   */

  @Test
  public void test49()  throws Throwable  {
      Float float0 = new Float(1449.7645F);
      assertEquals(1449.7645F, (float)float0, 0.01F);
      
      JSONObject jSONObject0 = new JSONObject((Object) float0);
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      HashMap<JSONArray, Tree> hashMap0 = new HashMap<JSONArray, Tree>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject1 = jSONObject0.put("v{R2\"aaLV=&A,<", (Map) hashMap0);
      assertEquals(4, jSONObject1.length());
      assertEquals(4, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject0.optInt("v{R2\"aaLV=&A,<");
      assertEquals(0, int0);
      assertEquals(4, jSONObject0.length());
      assertSame(jSONObject0, jSONObject1);
      
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("v{R2\"aaLV=&A,<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of v{R2\"aaLV=&A,<
         //
      }
  }

  //Test case number: 50
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.optBoolean(Ljava/lang/String;Z)Z: root-Branch
   * Goal 2. wheel.json.JSONObject.optBoolean(Ljava/lang/String;)Z: root-Branch
   * Goal 3. wheel.json.JSONObject.get(Ljava/lang/String;)Ljava/lang/Object;: I12 Branch 38 IFNONNULL L421 - false
   */

  @Test
  public void test50()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = jSONObject0.optBoolean("a=sL<{T;A_1");
      assertFalse(boolean0);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 51
  /*
   * 28 covered goals:
   * Goal 1. wheel.json.JSONObject.remove(Ljava/lang/String;)Ljava/lang/Object;: root-Branch
   * Goal 2. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I33 Branch 17 IF_ICMPGE L263 - true
   * Goal 3. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I33 Branch 17 IF_ICMPGE L263 - false
   * Goal 4. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I58 Branch 18 IFLE L268 - true
   * Goal 5. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I58 Branch 18 IFLE L268 - false
   * Goal 6. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I78 Branch 19 IFLE L270 - true
   * Goal 7. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I78 Branch 19 IFLE L270 - false
   * Goal 8. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I92 Branch 20 IFLE L273 - true
   * Goal 9. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I92 Branch 20 IFLE L273 - false
   * Goal 10. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I100 Branch 21 IFEQ L273 - false
   * Goal 11. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I107 Branch 22 IFNE L273 - true
   * Goal 12. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I107 Branch 22 IFNE L273 - false
   * Goal 13. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I116 Branch 23 IF_ICMPNE L276 - true
   * Goal 14. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I135 Branch 24 IFNE L278 - false
   * Goal 15. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 26 IFNONNULL L346 - false
   * Goal 16. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I26 Branch 27 IFEQ L347 - true
   * Goal 17. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I6 Branch 57 IFNONNULL L662 - true
   * Goal 18. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I31 Branch 58 IFLE L670 - true
   * Goal 19. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I20 Branch 70 IFNULL L978 - true
   * Goal 20. wheel.json.JSONObject.toString()Ljava/lang/String;: I19 Branch 101 IFEQ L1140 - false
   * Goal 21. wheel.json.JSONObject.toString()Ljava/lang/String;: I28 Branch 102 IF_ICMPLE L1141 - true
   * Goal 22. wheel.json.JSONObject.toString()Ljava/lang/String;: I28 Branch 102 IF_ICMPLE L1141 - false
   * Goal 23. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I82 Branch 114 IFEQ L1268 - false
   * Goal 24. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I96 Branch 115 IFNE L1271 - true
   * Goal 25. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I108 Branch 117 IFEQ L1271 - true
   * Goal 26. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I121 Branch 118 IFEQ L1275 - true
   * Goal 27. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I138 Branch 119 IFEQ L1278 - true
   * Goal 28. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I156 Branch 120 IFEQ L1281 - true
   */

  @Test
  public void test51()  throws Throwable  {
      Float float0 = new Float(1447.9275F);
      assertEquals(1447.9275F, (float)float0, 0.01F);
      
      JSONObject jSONObject0 = new JSONObject((Object) float0);
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("After UCPTransformer:             ", (Object) null);
      assertEquals(3, jSONObject0.length());
      assertEquals(3, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      
      JSONObject jSONObject2 = jSONObject0.accumulate("After UCPTransformer:             ", (Object) long0);
      assertEquals(4, jSONObject2.length());
      assertEquals(4, jSONObject0.length());
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertNotNull(jSONObject2);
      
      String string0 = jSONObject0.toString();
      assertEquals("{\"infinite\":false,\"naN\":false,\"class\":\"class java.lang.Float\",\"After UCPTransformer:             \":0}", string0);
      assertEquals(4, jSONObject0.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertNotNull(string0);
  }

  //Test case number: 52
  /*
   * 29 covered goals:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I6 Branch 73 IFNULL L1015 - false
   * Goal 2. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I12 Branch 74 IFNE L1015 - true
   * Goal 3. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I51 Branch 75 IF_ICMPGE L1027 - true
   * Goal 4. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I51 Branch 75 IF_ICMPGE L1027 - false
   * Goal 5. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 76 LOOKUPSWITCH L1030 Case 8 - false
   * Goal 6. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 77 LOOKUPSWITCH L1030 Case 9 - false
   * Goal 7. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 78 LOOKUPSWITCH L1030 Case 10 - false
   * Goal 8. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 79 LOOKUPSWITCH L1030 Case 12 - false
   * Goal 9. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 80 LOOKUPSWITCH L1030 Case 13 - false
   * Goal 10. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 81 LOOKUPSWITCH L1030 Case 34 - false
   * Goal 11. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 82 LOOKUPSWITCH L1030 Case 47 - true
   * Goal 12. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 82 LOOKUPSWITCH L1030 Case 47 - false
   * Goal 13. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 83 LOOKUPSWITCH L1030 Case 92 - false
   * Goal 14. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 84 LOOKUPSWITCH L1030 Default-Case - true
   * Goal 15. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 84 LOOKUPSWITCH L1030 Default-Case - false
   * Goal 16. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I91 Branch 85 IF_ICMPNE L1037 - true
   * Goal 17. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I177 Branch 86 IF_ICMPLT L1058 - false
   * Goal 18. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I183 Branch 87 IF_ICMPLT L1058 - true
   * Goal 19. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I196 Branch 89 IF_ICMPLT L1058 - true
   * Goal 20. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I6 Branch 121 IFNULL L1304 - false
   * Goal 21. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I13 Branch 122 IFEQ L1304 - true
   * Goal 22. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I25 Branch 123 IFEQ L1308 - true
   * Goal 23. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I62 Branch 125 IFEQ L1317 - true
   * Goal 24. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I76 Branch 126 IFEQ L1320 - true
   * Goal 25. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I89 Branch 127 IFEQ L1323 - true
   * Goal 26. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I105 Branch 128 IFEQ L1326 - true
   * Goal 27. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I121 Branch 129 IFEQ L1329 - true
   * Goal 28. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I140 Branch 130 IFEQ L1332 - true
   * Goal 29. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I160 Branch 131 IFEQ L1335 - true
   */

  @Test
  public void test52()  throws Throwable  {
      TaggedWordFactory taggedWordFactory0 = new TaggedWordFactory();
      assertEquals(2, taggedWordFactory0.TAG_LABEL);
      assertNotNull(taggedWordFactory0);
      
      TaggedWord taggedWord0 = (TaggedWord)taggedWordFactory0.newLabel("[bky_3U");
      assertEquals(2, taggedWordFactory0.TAG_LABEL);
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("[bky_3U", taggedWord0.word());
      assertEquals("[bky_3U", taggedWord0.value());
      assertEquals(-1, taggedWord0.beginPosition());
      assertNull(taggedWord0.tag());
      assertNotNull(taggedWord0);
      
      LabeledWord labeledWord0 = new LabeledWord((Label) taggedWord0, (Label) taggedWord0);
      assertEquals(2, taggedWordFactory0.TAG_LABEL);
      assertEquals("[bky_3U", labeledWord0.word());
      assertEquals(-1, labeledWord0.beginPosition());
      assertEquals("[bky_3U", labeledWord0.value());
      assertEquals(-1, labeledWord0.endPosition());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("[bky_3U", taggedWord0.word());
      assertEquals("[bky_3U", taggedWord0.value());
      assertEquals(-1, taggedWord0.beginPosition());
      assertNull(taggedWord0.tag());
      assertNotNull(labeledWord0);
      
      String string0 = JSONObject.valueToString(labeledWord0, (-414), (-414));
      assertEquals("\"[bky_3U/[bky_3U/null\"", string0);
      assertEquals(2, taggedWordFactory0.TAG_LABEL);
      assertEquals("[bky_3U", labeledWord0.word());
      assertEquals(-1, labeledWord0.beginPosition());
      assertEquals("[bky_3U", labeledWord0.value());
      assertEquals(-1, labeledWord0.endPosition());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("[bky_3U", taggedWord0.word());
      assertEquals("[bky_3U", taggedWord0.value());
      assertEquals(-1, taggedWord0.beginPosition());
      assertNull(taggedWord0.tag());
      assertNotNull(string0);
  }

  //Test case number: 53
  /*
   * 17 covered goals:
   * Goal 1. wheel.json.JSONObject.keys()Ljava/util/Iterator;: root-Branch
   * Goal 2. wheel.json.JSONObject.<init>()V: root-Branch
   * Goal 3. wheel.json.JSONObject.<init>(Lwheel/json/JSONObject;[Ljava/lang/String;)V: I15 Branch 3 IF_ICMPGE L162 - true
   * Goal 4. wheel.json.JSONObject.<init>(Lwheel/json/JSONObject;[Ljava/lang/String;)V: I15 Branch 3 IF_ICMPGE L162 - false
   * Goal 5. wheel.json.JSONObject.<init>(Ljava/util/Map;)V: I11 Branch 16 IFNONNULL L234 - true
   * Goal 6. wheel.json.JSONObject.opt(Ljava/lang/String;)Ljava/lang/Object;: I6 Branch 63 IFNONNULL L688 - true
   * Goal 7. wheel.json.JSONObject.opt(Ljava/lang/String;)Ljava/lang/Object;: I6 Branch 63 IFNONNULL L688 - false
   * Goal 8. wheel.json.JSONObject.put(Ljava/lang/String;Z)Lwheel/json/JSONObject;: I8 Branch 68 IFEQ L902 - false
   * Goal 9. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 69 IFNONNULL L975 - true
   * Goal 10. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I20 Branch 70 IFNULL L978 - false
   * Goal 11. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 71 IFNULL L999 - true
   * Goal 12. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 71 IFNULL L999 - false
   * Goal 13. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I11 Branch 72 IFNULL L999 - true
   * Goal 14. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I11 Branch 72 IFNULL L999 - false
   * Goal 15. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I6 Branch 91 IFNULL L1088 - false
   * Goal 16. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I14 Branch 92 IFEQ L1089 - true
   * Goal 17. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I45 Branch 95 IFEQ L1094 - true
   */

  @Test
  public void test53()  throws Throwable  {
      HashMap<StringLabel, Word> hashMap0 = new HashMap<StringLabel, Word>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("l", true);
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "After UCPTransformer:             ";
      stringArray0[2] = "l";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      assertNotNull(jSONObject2);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      
      Iterator iterator0 = jSONObject2.keys();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      assertNotNull(iterator0);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }
}
