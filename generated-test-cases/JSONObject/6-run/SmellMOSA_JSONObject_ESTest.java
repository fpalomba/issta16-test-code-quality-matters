/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 18 02:54:58 GMT 2015
 */

package wheel.json;

import static org.junit.Assert.*;
import org.junit.Test;
import edu.stanford.nlp.ling.CategoryWordTag;
import edu.stanford.nlp.ling.IndexedWord;
import edu.stanford.nlp.ling.Label;
import edu.stanford.nlp.ling.LabeledWord;
import edu.stanford.nlp.ling.StringLabel;
import edu.stanford.nlp.ling.Tag;
import edu.stanford.nlp.ling.TaggedWord;
import edu.stanford.nlp.ling.Word;
import edu.stanford.nlp.ling.WordFactory;
import edu.stanford.nlp.ling.WordLemmaTag;
import edu.stanford.nlp.ling.WordTag;
import edu.stanford.nlp.util.ArrayCoreMap;
import edu.stanford.nlp.util.CoreMap;
import edu.stanford.nlp.util.HasInterval;
import edu.stanford.nlp.util.HashableCoreMap;
import java.io.File;
import java.io.OutputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  //Test case number: 0
  @Test
  public void test00()  throws Throwable  {
      HashMap<Word, Tag> hashMap0 = new HashMap<Word, Tag>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      
      int int0 = jSONObject0.optInt("{}");
      assertEquals(0, int0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      
      TaggedWord taggedWord0 = new TaggedWord("{}");
      assertNotNull(taggedWord0);
      assertEquals("{}", taggedWord0.value());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("{}", taggedWord0.word());
      assertNull(taggedWord0.tag());
      
      JSONObject jSONObject1 = jSONObject0.append("{}", (Object) taggedWord0);
      assertNotNull(jSONObject1);
      assertEquals("{}", taggedWord0.value());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("{}", taggedWord0.word());
      assertNull(taggedWord0.tag());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      long long0 = jSONObject0.optLong("{}", (long) 0);
      assertEquals(0L, long0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optLong(Ljava/lang/String;)J: root-Branch
   */

  @Test
  public void test01()  throws Throwable  {
      HashMap<LinkedList<TaggedWord>, HasInterval<Integer>> hashMap0 = new HashMap<LinkedList<TaggedWord>, HasInterval<Integer>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 2
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I14 Branch 39 IFNE L439 - false
   * Goal 2. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I20 Branch 40 IFEQ L439 - true
   * Goal 3. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I41 Branch 42 IFNE L443 - false
   * Goal 4. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I47 Branch 43 IFEQ L443 - true
   */

  @Test
  public void test02()  throws Throwable  {
      WordFactory wordFactory0 = new WordFactory();
      assertNotNull(wordFactory0);
      
      Word word0 = (Word)wordFactory0.newLabel("getgetBytes", 5353);
      assertNotNull(word0);
      assertEquals("getgetBytes", word0.value());
      assertEquals(-1, word0.beginPosition());
      assertEquals("getgetBytes", word0.word());
      assertEquals(-1, word0.endPosition());
      
      TaggedWord taggedWord0 = new TaggedWord((Label) word0, (Label) word0);
      assertNotNull(taggedWord0);
      assertEquals("getgetBytes", word0.value());
      assertEquals(-1, word0.beginPosition());
      assertEquals("getgetBytes", word0.word());
      assertEquals(-1, word0.endPosition());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("getgetBytes", taggedWord0.value());
      assertEquals("getgetBytes", taggedWord0.tag());
      assertEquals("getgetBytes", taggedWord0.word());
      assertEquals(-1, taggedWord0.beginPosition());
      
      String[] stringArray0 = new String[2];
      stringArray0[1] = "getgetBytes";
      JSONObject jSONObject0 = new JSONObject((Object) taggedWord0, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals("getgetBytes", word0.value());
      assertEquals(-1, word0.beginPosition());
      assertEquals("getgetBytes", word0.word());
      assertEquals(-1, word0.endPosition());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("getgetBytes", taggedWord0.value());
      assertEquals("getgetBytes", taggedWord0.tag());
      assertEquals("getgetBytes", taggedWord0.word());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals(0, jSONObject0.length());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("getgetBytes", object0);
      assertNotNull(jSONObject1);
      assertEquals("getgetBytes", word0.value());
      assertEquals(-1, word0.beginPosition());
      assertEquals("getgetBytes", word0.word());
      assertEquals(-1, word0.endPosition());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("getgetBytes", taggedWord0.value());
      assertEquals("getgetBytes", taggedWord0.tag());
      assertEquals("getgetBytes", taggedWord0.word());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      boolean boolean0 = jSONObject0.optBoolean("getgetBytes", true);
      assertTrue(boolean0);
      assertEquals("getgetBytes", word0.value());
      assertEquals(-1, word0.beginPosition());
      assertEquals("getgetBytes", word0.word());
      assertEquals(-1, word0.endPosition());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("getgetBytes", taggedWord0.value());
      assertEquals("getgetBytes", taggedWord0.tag());
      assertEquals("getgetBytes", taggedWord0.word());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optDouble(Ljava/lang/String;D)D: I13 Branch 64 IFEQ L764 - false
   */

  @Test
  public void test03()  throws Throwable  {
      HashMap<CategoryWordTag, StringLabel> hashMap0 = new HashMap<CategoryWordTag, StringLabel>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("C9<8|kY-", 0.0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      double double0 = jSONObject1.optDouble("C9<8|kY-");
      assertEquals(0.0, double0, 0.01D);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I13 Branch 122 IFEQ L1304 - false
   */

  @Test
  public void test04()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
      
      String string0 = JSONObject.valueToString(object0, 0, 0);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I84 Branch 135 IFEQ L1367 - false
   */

  @Test
  public void test05()  throws Throwable  {
      HashMap<LinkedList<ArrayCoreMap>, LabeledWord> hashMap0 = new HashMap<LinkedList<ArrayCoreMap>, LabeledWord>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject1 = jSONObject0.append("J1x<", (Object) "J1x<");
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("J1x<");
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)jSONObject0.write((Writer) mockPrintWriter0);
      assertNotNull(mockPrintWriter1);
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(mockPrintWriter1, mockPrintWriter0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I12 Branch 99 IFNE L1113 - false
   */

  @Test
  public void test06()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
      
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, jSONArray0.length());
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I39 Branch 30 IFEQ L376 - false
   */

  @Test
  public void test07()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01D);
      
      JSONObject jSONObject0 = new JSONObject((Object) double0);
      assertNotNull(jSONObject0);
      assertEquals(3, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.append("uk&", (Object) jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(4, jSONObject0.length());
      assertEquals(4, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      
      JSONObject jSONObject2 = jSONObject0.append("uk&", (Object) boolean0);
      assertNotNull(jSONObject2);
      assertEquals(4, jSONObject0.length());
      assertEquals(4, jSONObject2.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I65 Branch 134 IFEQ L1365 - false
   */

  @Test
  public void test08()  throws Throwable  {
      int int0 = Pattern.UNIX_LINES;
      assertEquals(1, int0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.putOpt(",Odw|l", (Object) jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      StringWriter stringWriter0 = new StringWriter(1);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      // Undeclared exception!
      try {
        Writer writer0 = jSONObject0.write((Writer) stringWriter0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I52 Branch 28 IFEQ L350 - false
   */

  @Test
  public void test09()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.append("XW)(JT3f", (Object) "XW)(JT3f");
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      JSONObject jSONObject2 = jSONObject1.accumulate("XW)(JT3f", (Object) float0);
      assertNotNull(jSONObject2);
      assertEquals(1, jSONObject2.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 10
  /*
   * 5 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I86 Branch 10 IF_ICMPEQ L202 - true
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I105 Branch 11 LOOKUPSWITCH L211 Case 44 - false
   * Goal 3. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I105 Branch 12 LOOKUPSWITCH L211 Case 59 - false
   * Goal 4. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I105 Branch 13 LOOKUPSWITCH L211 Case 125 - false
   * Goal 5. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I105 Branch 14 LOOKUPSWITCH L211 Default-Case - true
   */

  @Test
  public void test10()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{wt:`jo7!Hrv.cis:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 17 of {wt:`jo7!Hrv.cis:
         //
      }
  }

  //Test case number: 11
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 6 LOOKUPSWITCH L183 Case 125 - true
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 7 LOOKUPSWITCH L183 Default-Case - false
   */

  @Test
  public void test11()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I121 Branch 118 IFEQ L1275 - false
   */

  @Test
  public void test12()  throws Throwable  {
      HashMap<ArrayCoreMap, Byte> hashMap0 = new HashMap<ArrayCoreMap, Byte>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  //Test case number: 13
  /*
   * 6 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I12 Branch 4 IF_ICMPEQ L178 - true
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 5 LOOKUPSWITCH L183 Case 0 - false
   * Goal 3. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 6 LOOKUPSWITCH L183 Case 125 - false
   * Goal 4. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 7 LOOKUPSWITCH L183 Default-Case - true
   * Goal 5. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I61 Branch 8 IF_ICMPNE L198 - true
   * Goal 6. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I86 Branch 10 IF_ICMPEQ L202 - false
   */

  @Test
  public void test13()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{wW}p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {wW}p
         //
      }
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject$Null.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      JSONArray jSONArray1 = jSONArray0.put(674, (double) 674);
      assertNotNull(jSONArray1);
      assertEquals(675, jSONArray0.length());
      assertEquals(675, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray1);
      assertNotNull(jSONObject0);
      assertEquals(675, jSONArray0.length());
      assertEquals(675, jSONArray1.length());
      assertEquals(2, jSONObject0.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getLong(Ljava/lang/String;)J: I13 Branch 49 IFEQ L536 - false
   */

  @Test
  public void test15()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("+#`/MCH;,+{a)nQ", 0.4);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      long long0 = jSONObject1.optLong("+#`/MCH;,+{a)nQ", (long) 779);
      assertEquals(0L, long0);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I45 Branch 35 IFGE L400 - true
   */

  @Test
  public void test16()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1.0E-100);
      assertNotNull(string0);
      assertEquals("1.0E-100", string0);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I6 Branch 110 IFNULL L1253 - true
   */

  @Test
  public void test17()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.append("iKVhOCi}ksrY~", (Object) null);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      String string0 = JSONObject.valueToString(jSONObject1);
      assertNotNull(string0);
      assertEquals("{\"iKVhOCi}ksrY~\":[null]}", string0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I189 Branch 88 IF_ICMPLT L1058 - false
   */

  @Test
  public void test18()  throws Throwable  {
      Word word0 = new Word("\u00BD", 6459, 6459);
      assertNotNull(word0);
      assertEquals(6459, word0.beginPosition());
      assertEquals(6459, word0.endPosition());
      assertEquals("\u00BD", word0.value());
      assertEquals("\u00BD", word0.word());
      
      JSONObject jSONObject0 = new JSONObject((Object) word0);
      assertNotNull(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(6459, word0.beginPosition());
      assertEquals(6459, word0.endPosition());
      assertEquals("\u00BD", word0.value());
      assertEquals("\u00BD", word0.word());
      
      boolean boolean0 = jSONObject0.optBoolean("\u00BD");
      assertFalse(boolean0);
      assertEquals(1, jSONObject0.length());
      assertEquals(6459, word0.beginPosition());
      assertEquals(6459, word0.endPosition());
      assertEquals("\u00BD", word0.value());
      assertEquals("\u00BD", word0.word());
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 47 IFEQ L499 - true
   */

  @Test
  public void test19()  throws Throwable  {
      HashMap<LinkedList<WordTag>, ArrayCoreMap> hashMap0 = new HashMap<LinkedList<WordTag>, ArrayCoreMap>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.accumulate("}[7tjYq7WP", (Object) jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      try {
        JSONArray jSONArray0 = jSONObject0.getJSONArray("}[7tjYq7WP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"}[7tjYq7WP\"] is not a JSONArray.
         //
      }
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I11 Branch 50 IFNE L548 - false
   */

  @Test
  public void test20()  throws Throwable  {
      HashMap<LinkedList<ArrayCoreMap>, LabeledWord> hashMap0 = new HashMap<LinkedList<ArrayCoreMap>, LabeledWord>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I23 Branch 93 IFNE L1090 - true
   */

  @Test
  public void test21()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01D);
      
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject((Object) double0, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(8, jSONObject0.length());
  }

  //Test case number: 22
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I6 Branch 98 IFNULL L1113 - false
   * Goal 2. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I12 Branch 99 IFNE L1113 - true
   * Goal 3. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I34 Branch 100 IF_ICMPGE L1117 - true
   * Goal 4. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I34 Branch 100 IF_ICMPGE L1117 - false
   */

  @Test
  public void test22()  throws Throwable  {
      HashMap<Float, LinkedList<Tag>> hashMap0 = new HashMap<Float, LinkedList<Tag>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      JSONArray jSONArray1 = jSONArray0.put(2253);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray1.length());
      assertEquals(1, jSONArray0.length());
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray2);
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertEquals(0, jSONObject0.length());
      assertEquals(1, jSONArray2.length());
      assertEquals(1, jSONArray0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 77 LOOKUPSWITCH L1030 Case 9 - true
   */

  @Test
  public void test23()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      try {
        Object object0 = jSONObject0.get("%15s\t%.4f\t%.4f\t%.4f\t%.0f\t%.0f\t%.0f\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"%15s\\t%.4f\\t%.4f\\t%.4f\\t%.0f\\t%.0f\\t%.0f\\n\"] not found.
         //
      }
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I13 Branch 111 IFEQ L1253 - false
   */

  @Test
  public void test24()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
      
      String string0 = JSONObject.valueToString(object0);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I37 Branch 56 IFNE L651 - false
   */

  @Test
  public void test25()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 26
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 29 IFNONNULL L374 - true
   * Goal 2. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I39 Branch 30 IFEQ L376 - true
   */

  @Test
  public void test26()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "__r");
      assertFalse(boolean0);
      
      LinkedList<LabeledWord> linkedList0 = new LinkedList<LabeledWord>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String[] stringArray0 = new String[10];
      stringArray0[1] = "__r";
      stringArray0[6] = "__r";
      JSONObject jSONObject0 = new JSONObject((Object) linkedList0, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("__r", false);
      assertNotNull(jSONObject1);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      
      try {
        JSONObject jSONObject2 = jSONObject1.append("__r", (Object) short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[__r] is not a JSONArray.
         //
      }
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getInt(Ljava/lang/String;)I: I13 Branch 46 IFEQ L484 - true
   */

  @Test
  public void test27()  throws Throwable  {
      HashMap<LinkedList<ArrayCoreMap>, LabeledWord> hashMap0 = new HashMap<LinkedList<ArrayCoreMap>, LabeledWord>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.append("*Gp)LU_f:USz\"X;Oh!I", (Object) "*Gp)LU_f:USz\"X;Oh!I");
      assertNotNull(jSONObject1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      try {
        int int0 = jSONObject1.getInt("*Gp)LU_f:USz\"X;Oh!I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"*Gp)LU_f:USz\\\"X;Oh!I\"] is not a number.
         //
      }
  }

  //Test case number: 28
  @Test
  public void test28()  throws Throwable  {
      Short short0 = new Short((short)4167);
      assertEquals((short)4167, (short)short0);
      
      JSONObject jSONObject0 = new JSONObject((Object) short0);
      assertNotNull(jSONObject0);
      assertEquals(1, jSONObject0.length());
      
      String string0 = jSONObject0.toString((int) short0);
      assertNotNull(string0);
      assertEquals("{\"class\": \"class java.lang.Short\"}", string0);
      assertEquals(1, jSONObject0.length());
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I121 Branch 129 IFEQ L1329 - false
   */

  @Test
  public void test29()  throws Throwable  {
      WordTag wordTag0 = WordTag.valueOf("b!sMt(w", "b!sMt(w");
      assertNotNull(wordTag0);
      assertEquals("", wordTag0.value());
      assertEquals("!sMt(w", wordTag0.tag());
      assertEquals("", wordTag0.word());
      
      JSONObject jSONObject0 = new JSONObject((Object) wordTag0);
      assertNotNull(jSONObject0);
      assertEquals("", wordTag0.value());
      assertEquals("!sMt(w", wordTag0.tag());
      assertEquals("", wordTag0.word());
      assertEquals(1, jSONObject0.length());
      
      int int0 = jSONObject0.optInt("b!sMt(w");
      assertEquals(0, int0);
      assertEquals("", wordTag0.value());
      assertEquals("!sMt(w", wordTag0.tag());
      assertEquals("", wordTag0.word());
      assertEquals(1, jSONObject0.length());
      
      HashMap<JSONArray, WordLemmaTag> hashMap0 = new HashMap<JSONArray, WordLemmaTag>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.putOpt("b!sMt(w", (Object) hashMap0);
      assertNotNull(jSONObject1);
      assertEquals(2, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", wordTag0.value());
      assertEquals("!sMt(w", wordTag0.tag());
      assertEquals("", wordTag0.word());
      assertEquals(2, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      String string0 = jSONObject1.toString(0);
      assertNotNull(string0);
      assertEquals("{\n\"b!sMt(w\": {},\n\"class\": \"class edu.stanford.nlp.ling.WordTag\"\n}", string0);
      assertEquals(2, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", wordTag0.value());
      assertEquals("!sMt(w", wordTag0.tag());
      assertEquals("", wordTag0.word());
      assertEquals(2, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 30
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I91 Branch 85 IF_ICMPNE L1037 - false
   */

  @Test
  public void test30()  throws Throwable  {
      WordLemmaTag wordLemmaTag0 = new WordLemmaTag(" ;USM(<", " ;USM(<", " ;USM(<");
      assertNotNull(wordLemmaTag0);
      assertEquals(" ;USM(<", wordLemmaTag0.value());
      assertEquals(" ;USM(<", wordLemmaTag0.tag());
      assertEquals(" ;USM(<", wordLemmaTag0.word());
      assertEquals(" ;USM(<", wordLemmaTag0.lemma());
      
      String string0 = JSONObject.valueToString(wordLemmaTag0);
      assertNotNull(string0);
      assertEquals("\" ;USM(<\\/ ;USM(<\\/ ;USM(<\"", string0);
      assertEquals(" ;USM(<", wordLemmaTag0.value());
      assertEquals(" ;USM(<", wordLemmaTag0.tag());
      assertEquals(" ;USM(<", wordLemmaTag0.word());
      assertEquals(" ;USM(<", wordLemmaTag0.lemma());
  }

  //Test case number: 31
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.getJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 48 IFEQ L517 - false
   * Goal 2. wheel.json.JSONObject.optJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 66 IFEQ L829 - false
   */

  @Test
  public void test31()  throws Throwable  {
      HashMap<Word, Tag> hashMap0 = new HashMap<Word, Tag>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<Object, HashableCoreMap> hashMap1 = new HashMap<Object, HashableCoreMap>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("isvalueOf", (Map) hashMap1);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONObject jSONObject2 = jSONObject1.getJSONObject("isvalueOf");
      assertNotNull(jSONObject2);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertEquals(1, jSONObject0.length());
      assertEquals(0, jSONObject2.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      
      JSONObject jSONObject3 = jSONObject0.optJSONObject("isvalueOf");
      assertNotNull(jSONObject3);
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject3.length());
      assertNotSame(jSONObject0, jSONObject3);
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject3, jSONObject1);
      assertNotSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
  }

  //Test case number: 32
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I54 Branch 61 IFLE L671 - false
   * Goal 2. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I77 Branch 62 IFLE L674 - false
   */

  @Test
  public void test32()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
      assertEquals("0", string0);
  }

  //Test case number: 33
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I45 Branch 60 IFGE L670 - true
   */

  @Test
  public void test33()  throws Throwable  {
      float float0 = Float.MAX_VALUE;
      assertEquals(3.4028235E38F, float0, 0.01F);
      
      String string0 = JSONObject.numberToString((Number) 3.4028235E38F);
      assertNotNull(string0);
      assertEquals("3.4028235E38", string0);
  }

  //Test case number: 34
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.optBoolean(Ljava/lang/String;Z)Z: root-Branch
   * Goal 2. wheel.json.JSONObject.optBoolean(Ljava/lang/String;)Z: root-Branch
   * Goal 3. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I14 Branch 39 IFNE L439 - true
   */

  @Test
  public void test34()  throws Throwable  {
      HashMap<LinkedList<WordTag>, ArrayCoreMap> hashMap0 = new HashMap<LinkedList<WordTag>, ArrayCoreMap>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("}[tjYq7WP", false);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      boolean boolean0 = jSONObject0.optBoolean("}[tjYq7WP");
      assertFalse(boolean0);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 35
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.getString(Ljava/lang/String;)Ljava/lang/String;: root-Branch
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I138 Branch 119 IFEQ L1278 - true
   * Goal 3. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I156 Branch 120 IFEQ L1281 - true
   */

  @Test
  public void test35()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.append("XW)(JT3f", (Object) "XW)(JT3f");
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      String string0 = jSONObject0.getString("XW)(JT3f");
      assertNotNull(string0);
      assertEquals("[\"XW)(JT3f\"]", string0);
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 36
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.toString()Ljava/lang/String;: I28 Branch 102 IF_ICMPLE L1141 - false
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I102 Branch 116 IFNE L1271 - true
   * Goal 3. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I108 Branch 117 IFEQ L1271 - false
   */

  @Test
  public void test36()  throws Throwable  {
      HashMap<LinkedList<ArrayCoreMap>, LabeledWord> hashMap0 = new HashMap<LinkedList<ArrayCoreMap>, LabeledWord>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("9B#09^4Uxie", (long) (-292));
      assertNotNull(jSONObject1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONObject jSONObject2 = jSONObject0.append(")MFDD", (Object) jSONObject1);
      assertNotNull(jSONObject2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(2, jSONObject2.length());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      
      // Undeclared exception!
      try {
        String string0 = jSONObject1.optString(")MFDD");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 37
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I54 Branch 36 IFLE L401 - false
   * Goal 2. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I77 Branch 37 IFLE L404 - false
   */

  @Test
  public void test37()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1.0);
      assertNotNull(string0);
      assertEquals("1", string0);
  }

  //Test case number: 38
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 26 IFNONNULL L346 - true
   * Goal 2. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I52 Branch 28 IFEQ L350 - true
   */

  @Test
  public void test38()  throws Throwable  {
      HashMap<LinkedList<WordTag>, ArrayCoreMap> hashMap0 = new HashMap<LinkedList<WordTag>, ArrayCoreMap>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.accumulate("}[tjYq7WP", (Object) jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONObject jSONObject2 = jSONObject0.accumulate("}[tjYq7WP", (Object) jSONObject0);
      assertNotNull(jSONObject2);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
  }

  //Test case number: 39
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I6 Branch 1 IFNULL L115 - false
   * Goal 2. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I12 Branch 2 IF_ACMPNE L115 - true
   */

  @Test
  public void test39()  throws Throwable  {
      HashMap<LinkedList<WordTag>, ArrayCoreMap> hashMap0 = new HashMap<LinkedList<WordTag>, ArrayCoreMap>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject1 = jSONObject0.accumulate("}[tjYq7WP", (Object) jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      boolean boolean0 = jSONObject0.isNull("}[tjYq7WP");
      assertFalse(boolean0);
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 40
  /*
   * 6 covered goals:
   * Goal 1. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I6 Branch 98 IFNULL L1113 - true
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I96 Branch 115 IFNE L1271 - false
   * Goal 3. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I102 Branch 116 IFNE L1271 - false
   * Goal 4. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I108 Branch 117 IFEQ L1271 - true
   * Goal 5. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I121 Branch 118 IFEQ L1275 - true
   * Goal 6. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I138 Branch 119 IFEQ L1278 - false
   */

  @Test
  public void test40()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      ArrayList<CoreMap> arrayList0 = new ArrayList<CoreMap>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.append("getfactory", (Object) arrayList0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      String string0 = jSONObject0.optString("getfactory");
      assertNotNull(string0);
      assertEquals("[[]]", string0);
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject0, jSONObject1);
      
      JSONArray jSONArray0 = jSONObject0.optJSONArray("[[]]");
      assertNull(jSONArray0);
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject0, jSONObject1);
      
      JSONArray jSONArray1 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray1);
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 41
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I45 Branch 95 IFEQ L1094 - false
   * Goal 2. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I54 Branch 96 IFNE L1095 - false
   * Goal 3. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I61 Branch 97 IFEQ L1095 - true
   */

  @Test
  public void test41()  throws Throwable  {
      String string0 = JSONObject.valueToString(1.4688752F);
      assertNotNull(string0);
      assertEquals("1.4688752", string0);
  }

  //Test case number: 42
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I11 Branch 50 IFNE L548 - true
   * Goal 2. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I37 Branch 51 IFEQ L554 - true
   * Goal 3. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I37 Branch 51 IFEQ L554 - false
   */

  @Test
  public void test42()  throws Throwable  {
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("Null key.", (Map) hashMap0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      String string0 = jSONObject0.optString("Null key.", "Null key.");
      assertNotNull(string0);
      assertEquals("{}", string0);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertNotNull(stringArray0);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 43
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I11 Branch 103 IFNE L1190 - false
   * Goal 2. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I41 Branch 104 IF_ICMPNE L1197 - false
   * Goal 3. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I89 Branch 127 IFEQ L1323 - false
   */

  @Test
  public void test43()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      int int0 = jSONObject0.optInt("chanel");
      assertEquals(0, int0);
      assertEquals(0, jSONObject0.length());
      
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject1 = jSONObject0.put("chanel", (Map) hashMap0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      String string0 = jSONObject0.toString(0);
      assertNotNull(string0);
      assertEquals("{\"chanel\": {}}", string0);
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 44
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/util/Collection;)Lwheel/json/JSONObject;: root-Branch
   */

  @Test
  public void test44()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      LinkedList<CategoryWordTag> linkedList0 = new LinkedList<CategoryWordTag>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      JSONObject jSONObject1 = jSONObject0.put("?9SSPw", (Collection) linkedList0);
      assertNotNull(jSONObject1);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 45
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 65 IFEQ L815 - true
   */

  @Test
  public void test45()  throws Throwable  {
      HashMap<LinkedList<WordTag>, ArrayCoreMap> hashMap0 = new HashMap<LinkedList<WordTag>, ArrayCoreMap>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONArray jSONArray0 = jSONObject0.optJSONArray("S,!4V");
      assertNull(jSONArray0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 46
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I6 Branch 57 IFNONNULL L662 - false
   */

  @Test
  public void test46()  throws Throwable  {
      try {
        String string0 = JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
      }
  }

  //Test case number: 47
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I82 Branch 114 IFEQ L1268 - true
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I96 Branch 115 IFNE L1271 - true
   * Goal 3. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I28 Branch 133 IFEQ L1358 - false
   */

  @Test
  public void test47()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      String string0 = JSONObject.quote("getfactory");
      assertNotNull(string0);
      assertEquals("\"getfactory\"", string0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONObject jSONObject1 = jSONObject0.put("\"getfactory\"", (-451));
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONObject jSONObject2 = jSONObject1.put("getfactory", false);
      assertNotNull(jSONObject2);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject2.length());
      assertEquals(2, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      
      MockFile mockFile0 = new MockFile("getfactory");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("getfactory", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertEquals("getfactory", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter((File) mockFile0);
      assertNotNull(mockFileWriter0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals("getfactory", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals("getfactory", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      
      MockFileWriter mockFileWriter1 = (MockFileWriter)jSONObject1.write((Writer) mockFileWriter0);
      assertNotNull(mockFileWriter1);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals("getfactory", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals("getfactory", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertSame(mockFileWriter0, mockFileWriter1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(mockFileWriter1, mockFileWriter0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
  }

  //Test case number: 48
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;J)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.getJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 47 IFEQ L499 - false
   * Goal 3. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I11 Branch 72 IFNULL L999 - false
   */

  @Test
  public void test48()  throws Throwable  {
      HashMap<LinkedList<ArrayCoreMap>, LabeledWord> hashMap0 = new HashMap<LinkedList<ArrayCoreMap>, LabeledWord>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(2, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.append("isdoubleToString", (Object) "isdoubleToString");
      assertNotNull(jSONObject1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(3, jSONObject1.length());
      assertEquals(3, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      JSONObject jSONObject2 = jSONObject1.put("getquote", 811L);
      assertNotNull(jSONObject2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(4, jSONObject1.length());
      assertEquals(4, jSONObject2.length());
      assertEquals(4, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      
      TaggedWord taggedWord0 = new TaggedWord();
      assertNotNull(taggedWord0);
      assertEquals(-1, taggedWord0.beginPosition());
      assertNull(taggedWord0.value());
      assertNull(taggedWord0.tag());
      assertNull(taggedWord0.word());
      assertEquals(-1, taggedWord0.endPosition());
      
      JSONObject jSONObject3 = jSONObject2.putOpt("getquote", (Object) taggedWord0);
      assertNotNull(jSONObject3);
      assertEquals(4, jSONObject3.length());
      assertEquals(-1, taggedWord0.beginPosition());
      assertNull(taggedWord0.value());
      assertNull(taggedWord0.tag());
      assertNull(taggedWord0.word());
      assertEquals(-1, taggedWord0.endPosition());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(4, jSONObject1.length());
      assertEquals(4, jSONObject2.length());
      assertEquals(4, jSONObject0.length());
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject3);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      
      JSONArray jSONArray0 = jSONObject3.getJSONArray("isdoubleToString");
      assertNotNull(jSONArray0);
      assertEquals(1, jSONArray0.length());
      assertEquals(4, jSONObject3.length());
      assertEquals(-1, taggedWord0.beginPosition());
      assertNull(taggedWord0.value());
      assertNull(taggedWord0.tag());
      assertNull(taggedWord0.word());
      assertEquals(-1, taggedWord0.endPosition());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(4, jSONObject1.length());
      assertEquals(4, jSONObject2.length());
      assertEquals(4, jSONObject0.length());
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject3);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
  }

  //Test case number: 49
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/lang/String;)V: root-Branch
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I12 Branch 4 IF_ICMPEQ L178 - false
   */

  @Test
  public void test49()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("xAITALl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of xAITALl
         //
      }
  }

  //Test case number: 50
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I6 Branch 52 IFNONNULL L568 - false
   */

  @Test
  public void test50()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  //Test case number: 51
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I18 Branch 55 IFEQ L648 - true
   * Goal 2. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I18 Branch 55 IFEQ L648 - false
   * Goal 3. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I37 Branch 56 IFNE L651 - true
   */

  @Test
  public void test51()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("", true);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      JSONArray jSONArray0 = jSONObject1.names();
      assertNotNull(jSONArray0);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 52
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 78 LOOKUPSWITCH L1030 Case 10 - true
   */

  @Test
  public void test52()  throws Throwable  {
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      JSONObject jSONObject0 = new JSONObject((Object) float0);
      assertNotNull(jSONObject0);
      assertEquals(3, jSONObject0.length());
      
      int int0 = jSONObject0.optInt("5Xl_T{r5/*&");
      assertEquals(0, int0);
      assertEquals(3, jSONObject0.length());
      
      String string0 = jSONObject0.toString(0);
      assertNotNull(string0);
      assertEquals("{\n\"infinite\": false,\n\"naN\": false,\n\"class\": \"class java.lang.Float\"\n}", string0);
      assertEquals(3, jSONObject0.length());
      
      try {
        JSONObject jSONObject1 = jSONObject0.getJSONObject("{\n\"infinite\": false,\n\"naN\": false,\n\"class\": \"class java.lang.Float\"\n}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n\\\"infinite\\\": false,\\n\\\"naN\\\": false,\\n\\\"class\\\": \\\"class java.lang.Float\\\"\\n}\"] not found.
         //
      }
  }

  //Test case number: 53
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.optDouble(Ljava/lang/String;)D: root-Branch
   * Goal 2. wheel.json.JSONObject.optDouble(Ljava/lang/String;D)D: I13 Branch 64 IFEQ L764 - true
   * Goal 3. wheel.json.JSONObject.optJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 65 IFEQ L815 - false
   */

  @Test
  public void test53()  throws Throwable  {
      HashMap<LinkedList<ArrayCoreMap>, LabeledWord> hashMap0 = new HashMap<LinkedList<ArrayCoreMap>, LabeledWord>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.append("*Gp)LU_f:USz\"X;Oh!I", (Object) "*Gp)LU_f:USz\"X;Oh!I");
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      double double0 = jSONObject1.optDouble("*Gp)LU_f:USz\"X;Oh!I");
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONArray jSONArray0 = jSONObject1.optJSONArray("*Gp)LU_f:USz\"X;Oh!I");
      assertNotNull(jSONArray0);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  //Test case number: 54
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 71 IFNULL L999 - false
   * Goal 2. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I11 Branch 72 IFNULL L999 - true
   */

  @Test
  public void test54()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "xAITALl";
      JSONObject jSONObject0 = new JSONObject((Object) "xAITALl", stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, jSONObject0.length());
      assertEquals(0, jSONObject1.length());
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
  }

  //Test case number: 55
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Z)Lwheel/json/JSONObject;: I8 Branch 68 IFEQ L902 - false
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I6 Branch 121 IFNULL L1304 - true
   */

  @Test
  public void test55()  throws Throwable  {
      HashMap<LinkedList<ArrayCoreMap>, LabeledWord> hashMap0 = new HashMap<LinkedList<ArrayCoreMap>, LabeledWord>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      int int0 = jSONObject0.optInt((String) null, (-292));
      assertEquals((-292), int0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("null", true);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      JSONObject jSONObject2 = jSONObject0.append("D", (Object) null);
      assertNotNull(jSONObject2);
      assertEquals(2, jSONObject2.length());
      assertEquals(2, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      
      String string0 = jSONObject2.toString((-292));
      assertNotNull(string0);
      assertEquals("{\n\"null\": true,\n\"D\": [null]\n}", string0);
      assertEquals(2, jSONObject2.length());
      assertEquals(2, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 56
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.remove(Ljava/lang/String;)Ljava/lang/Object;: root-Branch
   * Goal 2. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I20 Branch 70 IFNULL L978 - true
   * Goal 3. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I6 Branch 91 IFNULL L1088 - true
   * Goal 4. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I30 Branch 94 IFEQ L1090 - false
   */

  @Test
  public void test56()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[4] = "F]],,,z*";
      JSONObject jSONObject0 = new JSONObject((Object) "F]],,,z*", stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.accumulate("F]],,,z*", (Object) null);
      assertNotNull(jSONObject1);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      try {
        JSONObject jSONObject2 = jSONObject0.put("F]],,,z*", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
      }
  }

  //Test case number: 57
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 81 LOOKUPSWITCH L1030 Case 34 - true
   */

  @Test
  public void test57()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".JNBu=QtX$rvmSme/&_";
      JSONObject jSONObject0 = new JSONObject((Object) ".JNBu=QtX$rvmSme/&_", stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      try {
        JSONObject jSONObject1 = jSONObject0.getJSONObject("Y(\"KSIOI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Y(\\\"KSIOI\"] not found.
         //
      }
  }

  //Test case number: 58
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.has(Ljava/lang/String;)Z: root-Branch
   * Goal 2. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 69 IFNONNULL L975 - false
   */

  @Test
  public void test58()  throws Throwable  {
      HashMap<LinkedList<ArrayCoreMap>, LabeledWord> hashMap0 = new HashMap<LinkedList<ArrayCoreMap>, LabeledWord>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      boolean boolean0 = jSONObject0.has("kZ<.olj7hng2[l*");
      assertFalse(boolean0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      try {
        JSONObject jSONObject1 = jSONObject0.append((String) null, (Object) "kZ<.olj7hng2[l*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
      }
  }

  //Test case number: 59
  /*
   * 7 covered goals:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I7 Branch 31 IFNE L393 - false
   * Goal 2. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I13 Branch 32 IFEQ L393 - true
   * Goal 3. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I31 Branch 33 IFLE L400 - false
   * Goal 4. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I38 Branch 34 IFGE L400 - false
   * Goal 5. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I45 Branch 35 IFGE L400 - false
   * Goal 6. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I54 Branch 36 IFLE L401 - true
   * Goal 7. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I77 Branch 37 IFLE L404 - true
   */

  @Test
  public void test59()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-47.820770849200315));
      assertNotNull(string0);
      assertEquals("-47.820770849200315", string0);
  }

  //Test case number: 60
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONObject;[Ljava/lang/String;)V: I15 Branch 3 IF_ICMPGE L162 - true
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONObject;[Ljava/lang/String;)V: I15 Branch 3 IF_ICMPGE L162 - false
   * Goal 3. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 71 IFNULL L999 - true
   */

  @Test
  public void test60()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject((Object) "xAITALl", stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, jSONObject0.length());
      assertEquals(0, jSONObject1.length());
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
  }

  //Test case number: 61
  /*
   * 10 covered goals:
   * Goal 1. wheel.json.JSONObject.isNull(Ljava/lang/String;)Z: root-Branch
   * Goal 2. wheel.json.JSONObject.optString(Ljava/lang/String;)Ljava/lang/String;: root-Branch
   * Goal 3. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I6 Branch 1 IFNULL L115 - true
   * Goal 4. wheel.json.JSONObject.opt(Ljava/lang/String;)Ljava/lang/Object;: I6 Branch 63 IFNONNULL L688 - false
   * Goal 5. wheel.json.JSONObject.optString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I12 Branch 67 IFNULL L889 - true
   * Goal 6. wheel.json.JSONObject.optString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I12 Branch 67 IFNULL L889 - false
   * Goal 7. wheel.json.JSONObject.put(Ljava/lang/String;Z)Lwheel/json/JSONObject;: I8 Branch 68 IFEQ L902 - true
   * Goal 8. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I6 Branch 73 IFNULL L1015 - true
   * Goal 9. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I105 Branch 128 IFEQ L1326 - false
   * Goal 10. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I140 Branch 130 IFEQ L1332 - false
   */

  @Test
  public void test61()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      String string0 = jSONObject0.optString("*", "*");
      assertNotNull(string0);
      assertEquals("*", string0);
      assertEquals(0, jSONObject0.length());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*");
      assertFalse(boolean0);
      
      boolean boolean1 = jSONObject0.isNull("*");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("getfactory", false);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      ArrayList<CoreMap> arrayList0 = new ArrayList<CoreMap>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      JSONObject jSONObject2 = jSONObject0.append("*", (Object) arrayList0);
      assertNotNull(jSONObject2);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject2.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      
      long long0 = jSONObject0.optLong((String) null, (long) 3684);
      assertEquals(3684L, long0);
      assertEquals(2, jSONObject0.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      
      String string1 = jSONObject0.optString("getfactory");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("false", string1);
      assertEquals(2, jSONObject0.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertNotSame(string1, string0);
      
      String string2 = jSONObject0.toString(3684);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("{\nngetfactory\": false\n}", string2);
      assertEquals(2, jSONObject0.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }

  //Test case number: 62
  /*
   * 6 covered goals:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I40 Branch 53 IFNE L574 - true
   * Goal 2. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I60 Branch 54 IF_ICMPGE L578 - true
   * Goal 3. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I60 Branch 54 IF_ICMPGE L578 - false
   * Goal 4. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I183 Branch 87 IF_ICMPLT L1058 - false
   * Goal 5. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I189 Branch 88 IF_ICMPLT L1058 - true
   * Goal 6. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I194 Branch 109 IF_ICMPGE L1221 - false
   */

  @Test
  public void test62()  throws Throwable  {
      WordLemmaTag wordLemmaTag0 = new WordLemmaTag("W{fy-m}3aGx", "W{fy-m}3aGx", "W{fy-m}3aGx");
      assertNotNull(wordLemmaTag0);
      assertEquals("W{fy-m}3aGx", wordLemmaTag0.lemma());
      assertEquals("W{fy-m}3aGx", wordLemmaTag0.tag());
      assertEquals("W{fy-m}3aGx", wordLemmaTag0.value());
      assertEquals("W{fy-m}3aGx", wordLemmaTag0.word());
      
      JSONObject jSONObject0 = new JSONObject((Object) wordLemmaTag0);
      assertNotNull(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals("W{fy-m}3aGx", wordLemmaTag0.lemma());
      assertEquals("W{fy-m}3aGx", wordLemmaTag0.tag());
      assertEquals("W{fy-m}3aGx", wordLemmaTag0.value());
      assertEquals("W{fy-m}3aGx", wordLemmaTag0.word());
      
      JSONObject jSONObject1 = jSONObject0.put("W{fy-m}3aGx", 0.95);
      assertNotNull(jSONObject1);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertEquals("W{fy-m}3aGx", wordLemmaTag0.lemma());
      assertEquals("W{fy-m}3aGx", wordLemmaTag0.tag());
      assertEquals("W{fy-m}3aGx", wordLemmaTag0.value());
      assertEquals("W{fy-m}3aGx", wordLemmaTag0.word());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      String string0 = jSONObject1.toString(928, 928);
      assertNotNull(string0);
      assertEquals("{\n{fy-m}3aGx\": 0.95,\nclass\": \"class edu.stanford.nlp.ling.WordLemmaTag\"\n}", string0);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertEquals("W{fy-m}3aGx", wordLemmaTag0.lemma());
      assertEquals("W{fy-m}3aGx", wordLemmaTag0.tag());
      assertEquals("W{fy-m}3aGx", wordLemmaTag0.value());
      assertEquals("W{fy-m}3aGx", wordLemmaTag0.word());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      int int0 = jSONObject1.optInt("\u0093", 928);
      assertEquals(928, int0);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertEquals("W{fy-m}3aGx", wordLemmaTag0.lemma());
      assertEquals("W{fy-m}3aGx", wordLemmaTag0.tag());
      assertEquals("W{fy-m}3aGx", wordLemmaTag0.value());
      assertEquals("W{fy-m}3aGx", wordLemmaTag0.word());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      String[] stringArray0 = JSONObject.getNames((Object) "W{fy-m}3aGx");
      assertNotNull(stringArray0);
  }

  //Test case number: 63
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I6 Branch 52 IFNONNULL L568 - true
   * Goal 2. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I40 Branch 53 IFNE L574 - false
   */

  @Test
  public void test63()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  //Test case number: 64
  /*
   * 18 covered goals:
   * Goal 1. wheel.json.JSONObject.getInt(Ljava/lang/String;)I: I13 Branch 46 IFEQ L484 - false
   * Goal 2. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I31 Branch 58 IFLE L670 - false
   * Goal 3. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I38 Branch 59 IFGE L670 - false
   * Goal 4. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I45 Branch 60 IFGE L670 - false
   * Goal 5. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I54 Branch 61 IFLE L671 - true
   * Goal 6. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I77 Branch 62 IFLE L674 - true
   * Goal 7. wheel.json.JSONObject.toString()Ljava/lang/String;: I19 Branch 101 IFEQ L1140 - true
   * Goal 8. wheel.json.JSONObject.toString()Ljava/lang/String;: I19 Branch 101 IFEQ L1140 - false
   * Goal 9. wheel.json.JSONObject.toString()Ljava/lang/String;: I28 Branch 102 IF_ICMPLE L1141 - true
   * Goal 10. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I6 Branch 110 IFNULL L1253 - false
   * Goal 11. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I13 Branch 111 IFEQ L1253 - true
   * Goal 12. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I25 Branch 112 IFEQ L1256 - true
   * Goal 13. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I82 Branch 114 IFEQ L1268 - false
   * Goal 14. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I21 Branch 132 IFEQ L1357 - true
   * Goal 15. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I21 Branch 132 IFEQ L1357 - false
   * Goal 16. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I28 Branch 133 IFEQ L1358 - true
   * Goal 17. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I65 Branch 134 IFEQ L1365 - true
   * Goal 18. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I84 Branch 135 IFEQ L1367 - true
   */

  @Test
  public void test64()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("isnotify", 2077.6437232);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      MockFile mockFile0 = new MockFile("isnotify", "isnotify");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("isnotify/isnotify", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("isnotify", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertEquals("isnotify", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      
      String string0 = jSONObject1.toString();
      assertNotNull(string0);
      assertEquals("{\"isnotify\":2077.6437232}", string0);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream((File) mockFile0);
      assertNotNull(mockFileOutputStream0);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("isnotify/isnotify", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("isnotify", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals("isnotify", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((OutputStream) mockFileOutputStream0);
      assertNotNull(mockPrintWriter0);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("isnotify/isnotify", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("isnotify", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals("isnotify", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)jSONObject1.write((Writer) mockPrintWriter0);
      assertNotNull(mockPrintWriter1);
      assertEquals(1, jSONObject1.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("isnotify/isnotify", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("isnotify", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals("isnotify", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1, jSONObject0.length());
      assertSame(mockPrintWriter1, mockPrintWriter0);
      assertSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      int int0 = jSONObject1.optInt("isnotify");
      assertEquals(2077, int0);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 65
  /*
   * 17 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;D)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/util/Map;)Lwheel/json/JSONObject;: root-Branch
   * Goal 3. wheel.json.JSONObject.optLong(Ljava/lang/String;J)J: root-Branch
   * Goal 4. wheel.json.JSONObject.optInt(Ljava/lang/String;I)I: root-Branch
   * Goal 5. wheel.json.JSONObject.optInt(Ljava/lang/String;)I: root-Branch
   * Goal 6. wheel.json.JSONObject.<init>(Ljava/util/Map;)V: I11 Branch 16 IFNONNULL L234 - true
   * Goal 7. wheel.json.JSONObject.<init>(Ljava/lang/Object;[Ljava/lang/String;)V: I20 Branch 25 IF_ICMPGE L304 - true
   * Goal 8. wheel.json.JSONObject.<init>(Ljava/lang/Object;[Ljava/lang/String;)V: I20 Branch 25 IF_ICMPGE L304 - false
   * Goal 9. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 26 IFNONNULL L346 - false
   * Goal 10. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I26 Branch 27 IFEQ L347 - true
   * Goal 11. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 29 IFNONNULL L374 - false
   * Goal 12. wheel.json.JSONObject.get(Ljava/lang/String;)Ljava/lang/Object;: I12 Branch 38 IFNONNULL L421 - false
   * Goal 13. wheel.json.JSONObject.getDouble(Ljava/lang/String;)D: I13 Branch 45 IFEQ L463 - true
   * Goal 14. wheel.json.JSONObject.getLong(Ljava/lang/String;)J: I13 Branch 49 IFEQ L536 - true
   * Goal 15. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I14 Branch 92 IFEQ L1089 - false
   * Goal 16. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I23 Branch 93 IFNE L1090 - false
   * Goal 17. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I30 Branch 94 IFEQ L1090 - true
   */

  @Test
  public void test65()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".JNu=tX$rvmSme/&Z";
      JSONObject jSONObject0 = new JSONObject((Object) ".JNu=tX$rvmSme/&Z", stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      IndexedWord indexedWord0 = IndexedWord.NO_WORD;
      assertNotNull(indexedWord0);
      assertNull(indexedWord0.lemma());
      assertEquals("", indexedWord0.originalText());
      assertNull(indexedWord0.ner());
      assertEquals(3, indexedWord0.size());
      assertNull(indexedWord0.tag());
      assertEquals(-1, indexedWord0.endPosition());
      assertNull(indexedWord0.word());
      assertNull(indexedWord0.value());
      assertNull(indexedWord0.docID());
      assertEquals(-1, indexedWord0.beginPosition());
      assertEquals(-1, indexedWord0.index());
      assertEquals(-1, indexedWord0.sentIndex());
      assertEquals(0, indexedWord0.copyCount());
      
      JSONObject jSONObject1 = jSONObject0.accumulate("gambo", (Object) indexedWord0);
      assertNotNull(jSONObject1);
      assertNull(indexedWord0.lemma());
      assertEquals("", indexedWord0.originalText());
      assertNull(indexedWord0.ner());
      assertEquals(3, indexedWord0.size());
      assertNull(indexedWord0.tag());
      assertEquals(-1, indexedWord0.endPosition());
      assertNull(indexedWord0.word());
      assertNull(indexedWord0.value());
      assertNull(indexedWord0.docID());
      assertEquals(-1, indexedWord0.beginPosition());
      assertEquals(-1, indexedWord0.index());
      assertEquals(-1, indexedWord0.sentIndex());
      assertEquals(0, indexedWord0.copyCount());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      stringArray0[1] = "gambo";
      JSONObject jSONObject2 = new JSONObject((Object) ".JNu=tX$rvmSme/&Z", stringArray0);
      assertNotNull(jSONObject2);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertEquals(0, jSONObject2.length());
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      
      int int0 = jSONObject2.optInt("gambo");
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertEquals(0, int0);
      assertEquals(0, jSONObject2.length());
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject3 = jSONObject0.append(".JNu=tX$rvmSme/&Z", (Object) ".JNu=tX$rvmSme/&Z");
      assertNotNull(jSONObject3);
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertEquals(2, jSONObject3.length());
      assertEquals(2, jSONObject0.length());
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject0);
      assertNotSame(jSONObject3, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      
      long long0 = jSONObject0.optLong("gambo", (long) 0);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertEquals(0L, long0);
      assertEquals(2, jSONObject0.length());
      assertSame(jSONObject0, jSONObject3);
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      
      JSONObject jSONObject4 = jSONObject2.put(".JNu=tX$rvmSme/&Z", (Map) hashMap0);
      assertNotNull(jSONObject4);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject3));
      assertFalse(jSONObject4.equals((Object)jSONObject3));
      assertFalse(jSONObject4.equals((Object)jSONObject0));
      assertFalse(jSONObject4.equals((Object)jSONObject1));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject2.length());
      assertEquals(1, jSONObject4.length());
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject4);
      assertNotSame(jSONObject2, jSONObject3);
      assertNotSame(jSONObject4, jSONObject3);
      assertNotSame(jSONObject4, jSONObject0);
      assertSame(jSONObject4, jSONObject2);
      assertNotSame(jSONObject4, jSONObject1);
      
      JSONObject jSONObject5 = jSONObject3.put("gambo", (double) 0);
      assertNotNull(jSONObject5);
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject4));
      assertFalse(jSONObject0.equals((Object)jSONObject4));
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject5.equals((Object)jSONObject2));
      assertFalse(jSONObject5.equals((Object)jSONObject4));
      assertEquals(2, jSONObject3.length());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject5.length());
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject0);
      assertNotSame(jSONObject3, jSONObject2);
      assertNotSame(jSONObject3, jSONObject4);
      assertSame(jSONObject3, jSONObject5);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject5);
      assertNotSame(jSONObject0, jSONObject4);
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject5, jSONObject2);
      assertSame(jSONObject5, jSONObject1);
      assertNotSame(jSONObject5, jSONObject4);
      assertSame(jSONObject5, jSONObject0);
      assertSame(jSONObject5, jSONObject3);
  }

  //Test case number: 66
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/util/Map;)V: I11 Branch 16 IFNONNULL L234 - false
   * Goal 2. wheel.json.JSONObject.optJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 66 IFEQ L829 - true
   */

  @Test
  public void test66()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.optJSONObject("jxITALl");
      assertNull(jSONObject1);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 67
  /*
   * 31 covered goals:
   * Goal 1. wheel.json.JSONObject.keys()Ljava/util/Iterator;: root-Branch
   * Goal 2. wheel.json.JSONObject.length()I: root-Branch
   * Goal 3. wheel.json.JSONObject.toString(I)Ljava/lang/String;: root-Branch
   * Goal 4. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I33 Branch 17 IF_ICMPGE L263 - true
   * Goal 5. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I33 Branch 17 IF_ICMPGE L263 - false
   * Goal 6. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I58 Branch 18 IFLE L268 - true
   * Goal 7. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I58 Branch 18 IFLE L268 - false
   * Goal 8. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I78 Branch 19 IFLE L270 - true
   * Goal 9. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I78 Branch 19 IFLE L270 - false
   * Goal 10. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I92 Branch 20 IFLE L273 - true
   * Goal 11. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I92 Branch 20 IFLE L273 - false
   * Goal 12. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I100 Branch 21 IFEQ L273 - false
   * Goal 13. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I107 Branch 22 IFNE L273 - true
   * Goal 14. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I107 Branch 22 IFNE L273 - false
   * Goal 15. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I116 Branch 23 IF_ICMPNE L276 - true
   * Goal 16. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I135 Branch 24 IFNE L278 - false
   * Goal 17. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I6 Branch 57 IFNONNULL L662 - true
   * Goal 18. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I31 Branch 58 IFLE L670 - true
   * Goal 19. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I11 Branch 103 IFNE L1190 - true
   * Goal 20. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I41 Branch 104 IF_ICMPNE L1197 - true
   * Goal 21. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I84 Branch 105 IFEQ L1204 - true
   * Goal 22. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I84 Branch 105 IFEQ L1204 - false
   * Goal 23. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I98 Branch 106 IF_ICMPLE L1206 - true
   * Goal 24. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I98 Branch 106 IF_ICMPLE L1206 - false
   * Goal 25. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I125 Branch 107 IF_ICMPGE L1211 - true
   * Goal 26. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I125 Branch 107 IF_ICMPGE L1211 - false
   * Goal 27. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I177 Branch 108 IF_ICMPLE L1219 - false
   * Goal 28. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I194 Branch 109 IF_ICMPGE L1221 - true
   * Goal 29. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I62 Branch 125 IFEQ L1317 - false
   * Goal 30. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I76 Branch 126 IFEQ L1320 - false
   * Goal 31. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I160 Branch 131 IFEQ L1335 - false
   */

  @Test
  public void test67()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "xAITALl");
      assertNotNull(jSONObject0);
      assertEquals(3, jSONObject0.length());
      
      String string0 = jSONObject0.toString(20);
      assertNotNull(string0);
      assertEquals("{\n                    \"bytes\": [\n                                        120,\n                                        65,\n                                        73,\n                                        84,\n                                        65,\n                                        76,\n                                        108\n                    ],\n                    \"class\": \"class java.lang.String\",\n                    \"empty\": false\n}", string0);
      assertEquals(3, jSONObject0.length());
  }

  //Test case number: 68
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I7 Branch 31 IFNE L393 - true
   */

  @Test
  public void test68()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.POSITIVE_INFINITY);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  //Test case number: 69
  /*
   * 40 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>()V: root-Branch
   * Goal 2. wheel.json.JSONObject.put(Ljava/lang/String;I)Lwheel/json/JSONObject;: root-Branch
   * Goal 3. wheel.json.JSONObject.get(Ljava/lang/String;)Ljava/lang/Object;: I12 Branch 38 IFNONNULL L421 - true
   * Goal 4. wheel.json.JSONObject.getJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 48 IFEQ L517 - true
   * Goal 5. wheel.json.JSONObject.opt(Ljava/lang/String;)Ljava/lang/Object;: I6 Branch 63 IFNONNULL L688 - true
   * Goal 6. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 69 IFNONNULL L975 - true
   * Goal 7. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I20 Branch 70 IFNULL L978 - false
   * Goal 8. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I6 Branch 73 IFNULL L1015 - false
   * Goal 9. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I12 Branch 74 IFNE L1015 - true
   * Goal 10. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I12 Branch 74 IFNE L1015 - false
   * Goal 11. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I51 Branch 75 IF_ICMPGE L1027 - true
   * Goal 12. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I51 Branch 75 IF_ICMPGE L1027 - false
   * Goal 13. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 76 LOOKUPSWITCH L1030 Case 8 - false
   * Goal 14. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 77 LOOKUPSWITCH L1030 Case 9 - false
   * Goal 15. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 78 LOOKUPSWITCH L1030 Case 10 - false
   * Goal 16. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 79 LOOKUPSWITCH L1030 Case 12 - false
   * Goal 17. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 80 LOOKUPSWITCH L1030 Case 13 - false
   * Goal 18. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 81 LOOKUPSWITCH L1030 Case 34 - false
   * Goal 19. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 82 LOOKUPSWITCH L1030 Case 47 - true
   * Goal 20. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 82 LOOKUPSWITCH L1030 Case 47 - false
   * Goal 21. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 83 LOOKUPSWITCH L1030 Case 92 - false
   * Goal 22. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 84 LOOKUPSWITCH L1030 Default-Case - true
   * Goal 23. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 84 LOOKUPSWITCH L1030 Default-Case - false
   * Goal 24. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I91 Branch 85 IF_ICMPNE L1037 - true
   * Goal 25. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I177 Branch 86 IF_ICMPLT L1058 - false
   * Goal 26. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I183 Branch 87 IF_ICMPLT L1058 - true
   * Goal 27. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I196 Branch 89 IF_ICMPLT L1058 - true
   * Goal 28. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I6 Branch 91 IFNULL L1088 - false
   * Goal 29. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I14 Branch 92 IFEQ L1089 - true
   * Goal 30. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I45 Branch 95 IFEQ L1094 - true
   * Goal 31. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I6 Branch 121 IFNULL L1304 - false
   * Goal 32. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I13 Branch 122 IFEQ L1304 - true
   * Goal 33. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I25 Branch 123 IFEQ L1308 - true
   * Goal 34. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I62 Branch 125 IFEQ L1317 - true
   * Goal 35. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I76 Branch 126 IFEQ L1320 - true
   * Goal 36. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I89 Branch 127 IFEQ L1323 - true
   * Goal 37. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I105 Branch 128 IFEQ L1326 - true
   * Goal 38. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I121 Branch 129 IFEQ L1329 - true
   * Goal 39. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I140 Branch 130 IFEQ L1332 - true
   * Goal 40. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I160 Branch 131 IFEQ L1335 - true
   */

  @Test
  public void test69()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("", 0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      MockFile mockFile0 = new MockFile("CpCp2Cp3C", "CpCp2Cp3C");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("CpCp2Cp3C/CpCp2Cp3C", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("CpCp2Cp3C", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("CpCp2Cp3C", mockFile0.getParent());
      
      String string0 = JSONObject.valueToString(mockFile0, 0, 0);
      assertNotNull(string0);
      assertEquals("\"CpCp2Cp3C/CpCp2Cp3C\"", string0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("CpCp2Cp3C/CpCp2Cp3C", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("CpCp2Cp3C", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("CpCp2Cp3C", mockFile0.getParent());
      
      try {
        JSONObject jSONObject2 = jSONObject1.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
      }
  }
}
