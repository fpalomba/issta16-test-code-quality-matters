/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 18 04:03:42 GMT 2015
 */

package wheel.json;

import static org.junit.Assert.*;
import org.junit.Test;
import edu.stanford.nlp.ling.CategoryWordTag;
import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.ling.IndexedWord;
import edu.stanford.nlp.ling.LabeledWord;
import edu.stanford.nlp.ling.StringLabel;
import edu.stanford.nlp.ling.Tag;
import edu.stanford.nlp.ling.Word;
import edu.stanford.nlp.ling.WordLemmaTag;
import edu.stanford.nlp.ling.WordTag;
import edu.stanford.nlp.process.CoreLabelTokenFactory;
import edu.stanford.nlp.sequences.SeqClassifierFlags;
import edu.stanford.nlp.util.HashIndex;
import java.io.CharArrayWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I6 Branch 52 IFNONNULL L568 - false
   */

  @Test
  public void test00()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I12 Branch 99 IFNE L1113 - false
   */

  @Test
  public void test01()  throws Throwable  {
      HashMap<CategoryWordTag, StringLabel> hashMap0 = new HashMap<CategoryWordTag, StringLabel>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, jSONArray0.length());
      assertNull(jSONArray1);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optDouble(Ljava/lang/String;)D: root-Branch
   */

  @Test
  public void test02()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      double double0 = jSONObject0.optDouble("6");
      assertEquals(0, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01D);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I6 Branch 121 IFNULL L1304 - true
   */

  @Test
  public void test03()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 2297, 2297);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I6 Branch 1 IFNULL L115 - false
   * Goal 2. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I12 Branch 2 IF_ACMPNE L115 - true
   */

  @Test
  public void test04()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("3lx", (Object) jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      boolean boolean0 = jSONObject1.isNull("3lx");
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(boolean0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  //Test case number: 5
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I40 Branch 53 IFNE L574 - true
   * Goal 2. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I60 Branch 54 IF_ICMPGE L578 - true
   * Goal 3. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I60 Branch 54 IF_ICMPGE L578 - false
   */

  @Test
  public void test05()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) ")*rLO2*G6;Yv,ga7R{");
      assertNotNull(stringArray0);
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I54 Branch 61 IFLE L671 - false
   * Goal 2. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I77 Branch 62 IFLE L674 - false
   */

  @Test
  public void test06()  throws Throwable  {
      SeqClassifierFlags seqClassifierFlags0 = new SeqClassifierFlags();
      assertEquals("", seqClassifierFlags0.toString());
      assertNotNull(seqClassifierFlags0);
      assertEquals(1000, seqClassifierFlags0.wordSegBeamSize);
      assertEquals(10, seqClassifierFlags0.totalDataSlice);
      assertFalse(seqClassifierFlags0.useLastRealWord);
      assertEquals(1.0, seqClassifierFlags0.alignDDAlpha, 0.01D);
      assertEquals(25, seqClassifierFlags0.QNsize);
      assertFalse(seqClassifierFlags0.useParenMatching);
      assertEquals(0.0, seqClassifierFlags0.removeTopNPercent, 0.01D);
      assertFalse(seqClassifierFlags0.groupByFeatureTemplate);
      assertEquals((-1), seqClassifierFlags0.arbitraryInputLayerSize);
      assertFalse(seqClassifierFlags0.useTopics);
      assertFalse(seqClassifierFlags0.useDisjunctiveShapeInteraction);
      assertFalse(seqClassifierFlags0.printNR);
      assertFalse(seqClassifierFlags0.strictlyZeroethOrder);
      assertEquals(0, seqClassifierFlags0.numTimesPruneFeatures);
      assertFalse(seqClassifierFlags0.bioSubmitOutput);
      assertEquals(1, seqClassifierFlags0.numDatasetsPerFile);
      assertEquals(0.1, seqClassifierFlags0.initialGain, 0.01D);
      assertFalse(seqClassifierFlags0.transitionEdgeOnly);
      assertFalse(seqClassifierFlags0.dropoutApprox);
      assertFalse(seqClassifierFlags0.useNoisyLabel);
      assertTrue(seqClassifierFlags0.applyNERPenalty);
      assertTrue(seqClassifierFlags0.useQN);
      assertEquals(1, seqClassifierFlags0.selfTrainWindowSize);
      assertFalse(seqClassifierFlags0.usePrediction2);
      assertFalse(seqClassifierFlags0.useASBCSuf1);
      assertFalse(seqClassifierFlags0.useSeenFeaturesOnly);
      assertFalse(seqClassifierFlags0.regularizeSoftmaxTieParam);
      assertFalse(seqClassifierFlags0.purgeDatasets);
      assertFalse(seqClassifierFlags0.casedDistSim);
      assertFalse(seqClassifierFlags0.evaluateBackground);
      assertFalse(seqClassifierFlags0.useNoisyNonNoisyFeature);
      assertFalse(seqClassifierFlags0.useTypeySequences);
      assertTrue(seqClassifierFlags0.useInternal);
      assertFalse(seqClassifierFlags0.removeStrictGoodCoNLLDuplicates);
      assertFalse(seqClassifierFlags0.useTypeSeqs2);
      assertFalse(seqClassifierFlags0.useUnknown);
      assertFalse(seqClassifierFlags0.useTypeSeqs3);
      assertFalse(seqClassifierFlags0.printWeights);
      assertFalse(seqClassifierFlags0.printTrainLabels);
      assertFalse(seqClassifierFlags0.useGoodForNamesCpC);
      assertFalse(seqClassifierFlags0.sighanPostProcessing);
      assertFalse(seqClassifierFlags0.combo);
      assertFalse(seqClassifierFlags0.randomLopFeatureSplit);
      assertFalse(seqClassifierFlags0.retainEntitySubclassification);
      assertFalse(seqClassifierFlags0.useNumberFeature);
      assertFalse(seqClassifierFlags0.useMidDotShape);
      assertEquals(0, seqClassifierFlags0.startEvaluateIters);
      assertFalse(seqClassifierFlags0.useIsDateRange);
      assertFalse(seqClassifierFlags0.dualDecompAlignment);
      assertEquals((-1), seqClassifierFlags0.purgeFeatures);
      assertFalse(seqClassifierFlags0.useMoreAbbr);
      assertEquals(0, seqClassifierFlags0.hybridCutoffIteration);
      assertFalse(seqClassifierFlags0.usePhraseWordTags);
      assertFalse(seqClassifierFlags0.useRobustQN);
      assertFalse(seqClassifierFlags0.useHk);
      assertFalse(seqClassifierFlags0.readStdin);
      assertFalse(seqClassifierFlags0.useABSTR);
      assertFalse(seqClassifierFlags0.useDict2);
      assertFalse(seqClassifierFlags0.useNegDict2);
      assertFalse(seqClassifierFlags0.randomLopWeights);
      assertFalse(seqClassifierFlags0.removeBackgroundSingletonFeatures);
      assertFalse(seqClassifierFlags0.useTitle);
      assertFalse(seqClassifierFlags0.useNegDict4);
      assertFalse(seqClassifierFlags0.useRad2b);
      assertFalse(seqClassifierFlags0.useNegDict3);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSize, 0.01D);
      assertFalse(seqClassifierFlags0.useLC);
      assertFalse(seqClassifierFlags0.blockInitialize);
      assertEquals(0.9, seqClassifierFlags0.selfTrainConfidenceThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useWideDisjunctive);
      assertFalse(seqClassifierFlags0.useCTBPre1);
      assertFalse(seqClassifierFlags0.useWEB);
      assertEquals(0, seqClassifierFlags0.multiThreadGibbs);
      assertFalse(seqClassifierFlags0.doAdaptation);
      assertFalse(seqClassifierFlags0.subCWGaz);
      assertEquals(0, seqClassifierFlags0.maxDocSize);
      assertFalse(seqClassifierFlags0.useDictCTB2);
      assertFalse(seqClassifierFlags0.useEntityTypeSequences);
      assertFalse(seqClassifierFlags0.skipOutputRegularization);
      assertFalse(seqClassifierFlags0.useHybrid);
      assertFalse(seqClassifierFlags0.useReverse);
      assertEquals((-1), seqClassifierFlags0.samplingSpeedUpThreshold);
      assertFalse(seqClassifierFlags0.useCRFforUnsup);
      assertEquals(0.0, seqClassifierFlags0.alignmentPruneThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useOrdinal);
      assertFalse(seqClassifierFlags0.useSentenceNumber);
      assertFalse(seqClassifierFlags0.useMSRChar2);
      assertFalse(seqClassifierFlags0.useQuartic);
      assertFalse(seqClassifierFlags0.useWord2);
      assertFalse(seqClassifierFlags0.useWord3);
      assertFalse(seqClassifierFlags0.useWord4);
      assertEquals(0, seqClassifierFlags0.scaledSGDMethod);
      assertFalse(seqClassifierFlags0.useAbbr1);
      assertFalse(seqClassifierFlags0.useKL);
      assertFalse(seqClassifierFlags0.useBagOfWords);
      assertFalse(seqClassifierFlags0.strictlySecondOrder);
      assertFalse(seqClassifierFlags0.useWord1);
      assertFalse(seqClassifierFlags0.prependEmbedding);
      assertFalse(seqClassifierFlags0.dump);
      assertFalse(seqClassifierFlags0.strictGoodCoNLL);
      assertEquals(0.0, seqClassifierFlags0.l1reg, 0.01D);
      assertFalse(seqClassifierFlags0.useNegCTBDict2);
      assertFalse(seqClassifierFlags0.useNegCTBDict3);
      assertFalse(seqClassifierFlags0.useNB);
      assertFalse(seqClassifierFlags0.useNegCTBDict4);
      assertFalse(seqClassifierFlags0.useChPos);
      assertFalse(seqClassifierFlags0.useNegHKDict4);
      assertFalse(seqClassifierFlags0.useNegHKDict3);
      assertFalse(seqClassifierFlags0.useNegHKDict2);
      assertFalse(seqClassifierFlags0.useHardGE);
      assertEquals(1.0, seqClassifierFlags0.lambdaCH, 0.01D);
      assertFalse(seqClassifierFlags0.greekifyNGrams);
      assertEquals((-1), seqClassifierFlags0.SGDPasses);
      assertFalse(seqClassifierFlags0.useRadical);
      assertFalse(seqClassifierFlags0.usePre);
      assertFalse(seqClassifierFlags0.useShapeStrings);
      assertFalse(seqClassifierFlags0.useWordn);
      assertFalse(seqClassifierFlags0.useGazettes);
      assertFalse(seqClassifierFlags0.intern2);
      assertEquals(0, seqClassifierFlags0.numOfSlices);
      assertFalse(seqClassifierFlags0.useShapeConjunctions);
      assertFalse(seqClassifierFlags0.appendLC);
      assertFalse(seqClassifierFlags0.normalizeTerms);
      assertFalse(seqClassifierFlags0.useWEBFreqDict);
      assertFalse(seqClassifierFlags0.useUnicodeBlock);
      assertFalse(seqClassifierFlags0.fakeDataset);
      assertFalse(seqClassifierFlags0.noMidNGrams);
      assertFalse(seqClassifierFlags0.useDictleng);
      assertFalse(seqClassifierFlags0.useEntityRule);
      assertFalse(seqClassifierFlags0.useCTBSuf1);
      assertFalse(seqClassifierFlags0.checkGradient);
      assertFalse(seqClassifierFlags0.noEdgeFeature);
      assertFalse(seqClassifierFlags0.useGazettePhrases);
      assertFalse(seqClassifierFlags0.dehyphenateNGrams);
      assertEquals(1, seqClassifierFlags0.numLopExpert);
      assertEquals(1, seqClassifierFlags0.numRuns);
      assertFalse(seqClassifierFlags0.justify);
      assertFalse(seqClassifierFlags0.keepEnglishWhitespaces);
      assertEquals(1, seqClassifierFlags0.selfTrainIterations);
      assertFalse(seqClassifierFlags0.usePrevNextLemmas);
      assertFalse(seqClassifierFlags0.useChromaticSampling);
      assertEquals(1, seqClassifierFlags0.multiThreadPerceptron);
      assertFalse(seqClassifierFlags0.keepAllWhitespaces);
      assertFalse(seqClassifierFlags0.keepEmptySentences);
      assertFalse(seqClassifierFlags0.useHKSuf1);
      assertFalse(seqClassifierFlags0.printLabelValue);
      assertEquals(1, seqClassifierFlags0.bisequencePriorType);
      assertEquals(4, seqClassifierFlags0.disjunctionWidth);
      assertFalse(seqClassifierFlags0.lazyUpdate);
      assertFalse(seqClassifierFlags0.useAcqPrior);
      assertFalse(seqClassifierFlags0.factorInBiEdgePotential);
      assertFalse(seqClassifierFlags0.useABSTRFreqDict);
      assertFalse(seqClassifierFlags0.useShapeStrings4);
      assertFalse(seqClassifierFlags0.useFeaturesC5gram);
      assertEquals(0.0, seqClassifierFlags0.priorAlpha, 0.01D);
      assertEquals(100, seqClassifierFlags0.printClassifierParam);
      assertEquals(0.0, seqClassifierFlags0.featureWeightThreshold, 0.01D);
      assertTrue(seqClassifierFlags0.useCWSFeatures);
      assertFalse(seqClassifierFlags0.perceptronDebug);
      assertTrue(seqClassifierFlags0.averagePerceptron);
      assertFalse(seqClassifierFlags0.useBilingualNERPrior);
      assertFalse(seqClassifierFlags0.matchNERIncentive);
      assertFalse(seqClassifierFlags0.useShapeStrings5);
      assertFalse(seqClassifierFlags0.tuneSGD);
      assertFalse(seqClassifierFlags0.useShapeStrings3);
      assertFalse(seqClassifierFlags0.useSegmentation);
      assertFalse(seqClassifierFlags0.useShapeStrings1);
      assertEquals(0.0, seqClassifierFlags0.newgeneThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useIsURL);
      assertFalse(seqClassifierFlags0.usePrevSequences);
      assertFalse(seqClassifierFlags0.learnENBasedOnCH);
      assertFalse(seqClassifierFlags0.useBeginSent);
      assertFalse(seqClassifierFlags0.useDualDecomp);
      assertFalse(seqClassifierFlags0.useAbbr);
      assertFalse(seqClassifierFlags0.useYear);
      assertFalse(seqClassifierFlags0.checkNameList);
      assertEquals(0, seqClassifierFlags0.featureCountThresh);
      assertFalse(seqClassifierFlags0.includeFullCRFInLOP);
      assertFalse(seqClassifierFlags0.useNegPKDict2);
      assertFalse(seqClassifierFlags0.useNegPKDict4);
      assertTrue(seqClassifierFlags0.learnCHBasedOnEN);
      assertFalse(seqClassifierFlags0.useNegPKDict3);
      assertFalse(seqClassifierFlags0.deleteBlankLines);
      assertFalse(seqClassifierFlags0.useObservedSequencesOnly);
      assertFalse(seqClassifierFlags0.useNERPriorBIO);
      assertEquals(0, seqClassifierFlags0.dualDecompMaxItr);
      assertFalse(seqClassifierFlags0.useBerkeleyCompetitivePosterior);
      assertFalse(seqClassifierFlags0.gradientDebug);
      assertFalse(seqClassifierFlags0.useOccurrencePatterns);
      assertFalse(seqClassifierFlags0.useNPHead);
      assertFalse(seqClassifierFlags0.useTags);
      assertFalse(seqClassifierFlags0.useGenericFeatures);
      assertEquals(0.01, seqClassifierFlags0.epsilon, 0.01D);
      assertFalse(seqClassifierFlags0.useDictHK2);
      assertEquals(0, seqClassifierFlags0.maxRight);
      assertFalse(seqClassifierFlags0.sparseOutputLayer);
      assertFalse(seqClassifierFlags0.useAs);
      assertFalse(seqClassifierFlags0.useHKPre1);
      assertFalse(seqClassifierFlags0.useGENIA);
      assertFalse(seqClassifierFlags0.iobWrapper);
      assertEquals(0.0, seqClassifierFlags0.featureDiffThresh, 0.01D);
      assertEquals(1.0, seqClassifierFlags0.lambdaEN, 0.01D);
      assertEquals((-1), seqClassifierFlags0.tuneSampleSize);
      assertEquals(1, seqClassifierFlags0.featureThreshold);
      assertEquals(1.0, seqClassifierFlags0.adaptSigma, 0.01D);
      assertEquals(0, seqClassifierFlags0.nerSkipFirstK);
      assertFalse(seqClassifierFlags0.doGibbs);
      assertFalse(seqClassifierFlags0.timitDatum);
      assertFalse(seqClassifierFlags0.addCapitalFeatures);
      assertTrue(seqClassifierFlags0.useSequences);
      assertEquals(1, seqClassifierFlags0.CRForder);
      assertEquals(50, seqClassifierFlags0.SGD2QNhessSamples);
      assertEquals(0, seqClassifierFlags0.evaluateIters);
      assertFalse(seqClassifierFlags0.useInPlaceSGD);
      assertEquals(2, seqClassifierFlags0.CRFwindow);
      assertFalse(seqClassifierFlags0.doFE);
      assertFalse(seqClassifierFlags0.strictlyFirstOrder);
      assertFalse(seqClassifierFlags0.useHuber);
      assertEquals(0.001, seqClassifierFlags0.adaGradEps, 0.01D);
      assertEquals(1.0E-4, seqClassifierFlags0.tolerance, 0.01D);
      assertFalse(seqClassifierFlags0.useCTBChar2);
      assertFalse(seqClassifierFlags0.useFeaturesC4gram);
      assertFalse(seqClassifierFlags0.useFeaturesCpC4gram);
      assertFalse(seqClassifierFlags0.useClassFeature);
      assertFalse(seqClassifierFlags0.useMsr);
      assertFalse(seqClassifierFlags0.useLemmaAsWord);
      assertFalse(seqClassifierFlags0.useWordTag);
      assertEquals(1, seqClassifierFlags0.terminateOnEvalImprovementNumOfEpoch);
      assertFalse(seqClassifierFlags0.selfTest);
      assertFalse(seqClassifierFlags0.useEmbedding);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSizeAlignment, 0.01D);
      assertEquals(1.0, seqClassifierFlags0.randomizedRatio, 0.01D);
      assertTrue(seqClassifierFlags0.useExternal);
      assertTrue(seqClassifierFlags0.biAlignmentPriorIsPMI);
      assertEquals(1, seqClassifierFlags0.multiThreadGrad);
      assertFalse(seqClassifierFlags0.useDictASBC2);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesBigram);
      assertFalse(seqClassifierFlags0.useObservedFeaturesOnly);
      assertEquals(Double.POSITIVE_INFINITY, seqClassifierFlags0.searchGraphPrune, 0.01D);
      assertFalse(seqClassifierFlags0.estimateInitial);
      assertFalse(seqClassifierFlags0.powerAlignProbAsAddition);
      assertFalse(seqClassifierFlags0.useExtraTaggySequences);
      assertEquals((-1), seqClassifierFlags0.maxIterations);
      assertEquals((-1), seqClassifierFlags0.labelDictionaryCutoff);
      assertFalse(seqClassifierFlags0.printFirstOrderProbs);
      assertFalse(seqClassifierFlags0.usePhraseWordSpecialTags);
      assertFalse(seqClassifierFlags0.dampDDStepSizeWithAlignmentProb);
      assertFalse(seqClassifierFlags0.useNegASBCDict2);
      assertEquals((-1), seqClassifierFlags0.numHiddenUnits);
      assertFalse(seqClassifierFlags0.useNegASBCDict4);
      assertFalse(seqClassifierFlags0.useNegASBCDict3);
      assertFalse(seqClassifierFlags0.useABGENE);
      assertFalse(seqClassifierFlags0.booleanFeatures);
      assertFalse(seqClassifierFlags0.useAltGazFeatures);
      assertFalse(seqClassifierFlags0.memoryThrift);
      assertFalse(seqClassifierFlags0.useHKChar2);
      assertFalse(seqClassifierFlags0.useNext);
      assertEquals(10, seqClassifierFlags0.wideDisjunctionWidth);
      assertEquals(2, seqClassifierFlags0.maxLeft);
      assertFalse(seqClassifierFlags0.groupByHiddenUnit);
      assertFalse(seqClassifierFlags0.groupByInput);
      assertFalse(seqClassifierFlags0.useRandomSeed);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions3);
      assertFalse(seqClassifierFlags0.alternateTraining);
      assertFalse(seqClassifierFlags0.pctSegmenterScaleByCRF);
      assertFalse(seqClassifierFlags0.lowercaseNGrams);
      assertFalse(seqClassifierFlags0.useSemPrior);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions2);
      assertFalse(seqClassifierFlags0.useRule);
      assertFalse(seqClassifierFlags0.useDistSim);
      assertFalse(seqClassifierFlags0.useEntityTypes);
      assertEquals(Integer.MAX_VALUE, seqClassifierFlags0.printFeaturesUpto);
      assertFalse(seqClassifierFlags0.terminateOnAvgImprovement);
      assertTrue(seqClassifierFlags0.useDenero);
      assertFalse(seqClassifierFlags0.suppressTestDebug);
      assertFalse(seqClassifierFlags0.useAdaDelta);
      assertFalse(seqClassifierFlags0.useChunkySequences);
      assertFalse(seqClassifierFlags0.makeConsistent);
      assertTrue(seqClassifierFlags0.keepOBInMemory);
      assertFalse(seqClassifierFlags0.verboseForTrueCasing);
      assertEquals(1.0, seqClassifierFlags0.sigma, 0.01D);
      assertFalse(seqClassifierFlags0.strictlyThirdOrder);
      assertFalse(seqClassifierFlags0.useReverseAffix);
      assertFalse(seqClassifierFlags0.useEitherSideWord);
      assertEquals(1, seqClassifierFlags0.nerSlowerTimes);
      assertFalse(seqClassifierFlags0.splitOnHead);
      assertFalse(seqClassifierFlags0.dualDecompNotBIO);
      assertFalse(seqClassifierFlags0.printXML);
      assertFalse(seqClassifierFlags0.useKBest);
      assertFalse(seqClassifierFlags0.useYetMoreCpCShapes);
      assertEquals(0, seqClassifierFlags0.interimOutputFreq);
      assertFalse(seqClassifierFlags0.initWithNERPosterior);
      assertFalse(seqClassifierFlags0.useFeaturesCpC5gram);
      assertFalse(seqClassifierFlags0.usePhraseWords);
      assertTrue(seqClassifierFlags0.useOutputLayer);
      assertEquals(100, seqClassifierFlags0.numSamples);
      assertFalse(seqClassifierFlags0.intern);
      assertFalse(seqClassifierFlags0.useANTE);
      assertFalse(seqClassifierFlags0.printProbs);
      assertFalse(seqClassifierFlags0.useFilter);
      assertFalse(seqClassifierFlags0.announceObjectBankEntries);
      assertFalse(seqClassifierFlags0.useUnicodeType);
      assertFalse(seqClassifierFlags0.useProtoFeatures);
      assertFalse(seqClassifierFlags0.conjoinShapeNGrams);
      assertEquals(8, seqClassifierFlags0.distSimMaxBits);
      assertFalse(seqClassifierFlags0.groupByOutputClass);
      assertFalse(seqClassifierFlags0.saveFeatureIndexToDisk);
      assertFalse(seqClassifierFlags0.useUniformPrior);
      assertFalse(seqClassifierFlags0.useMoreGazFeatures);
      assertFalse(seqClassifierFlags0.useWordPairs);
      assertFalse(seqClassifierFlags0.usePrediction);
      assertFalse(seqClassifierFlags0.useBig5);
      assertFalse(seqClassifierFlags0.useGazFeatures);
      assertFalse(seqClassifierFlags0.useTaggySequences);
      assertFalse(seqClassifierFlags0.useNextVB);
      assertFalse(seqClassifierFlags0.sloppyGazette);
      assertEquals(3, seqClassifierFlags0.charHalfWindow);
      assertFalse(seqClassifierFlags0.useTOK);
      assertEquals(1, seqClassifierFlags0.numStartLayers);
      assertFalse(seqClassifierFlags0.useUnicodeType5gram);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions3);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions2);
      assertFalse(seqClassifierFlags0.useSMD);
      assertFalse(seqClassifierFlags0.nonLinearCRF);
      assertFalse(seqClassifierFlags0.testObjFunction);
      assertFalse(seqClassifierFlags0.normalizeTimex);
      assertFalse(seqClassifierFlags0.weightByEntropy);
      assertFalse(seqClassifierFlags0.useCWSWordFeatures);
      assertTrue(seqClassifierFlags0.useKnownLCWords);
      assertEquals(0, seqClassifierFlags0.removeTopN);
      assertTrue(seqClassifierFlags0.initWithPosterior);
      assertFalse(seqClassifierFlags0.useMinimalAbbr1);
      assertFalse(seqClassifierFlags0.useFeaturesC6gram);
      assertFalse(seqClassifierFlags0.usePKSuf1);
      assertFalse(seqClassifierFlags0.useHeadGov);
      assertFalse(seqClassifierFlags0.cleanGazette);
      assertTrue(seqClassifierFlags0.useViterbi);
      assertTrue(seqClassifierFlags0.splitDocuments);
      assertFalse(seqClassifierFlags0.doFeatureDiscovery);
      assertFalse(seqClassifierFlags0.usePrevVB);
      assertFalse(seqClassifierFlags0.usePKPre1);
      assertFalse(seqClassifierFlags0.useACR);
      assertFalse(seqClassifierFlags0.useSequentialScanSampling);
      assertFalse(seqClassifierFlags0.numberEquivalenceDistSim);
      assertFalse(seqClassifierFlags0.useTaggySequencesShapeInteraction);
      assertFalse(seqClassifierFlags0.useWordnetFeatures);
      assertTrue(seqClassifierFlags0.useWord);
      assertFalse(seqClassifierFlags0.lowerNewgeneThreshold);
      assertFalse(seqClassifierFlags0.useSGD);
      assertTrue(seqClassifierFlags0.restrictLabels);
      assertFalse(seqClassifierFlags0.dualDecompDebug);
      assertFalse(seqClassifierFlags0.pctSegmenterLenAdjust);
      assertFalse(seqClassifierFlags0.usePhraseFeatures);
      assertEquals(0, seqClassifierFlags0.featureCountThreshold);
      assertFalse(seqClassifierFlags0.augmentedDateChars);
      assertFalse(seqClassifierFlags0.useASBCChar2);
      assertFalse(seqClassifierFlags0.useFeaturesCpC6gram);
      assertEquals(15, seqClassifierFlags0.stochasticBatchSize);
      assertEquals(0.0, seqClassifierFlags0.annealingRate, 0.01D);
      assertFalse(seqClassifierFlags0.useRad2);
      assertEquals(0, seqClassifierFlags0.ocrFold);
      assertFalse(seqClassifierFlags0.useRad1);
      assertFalse(seqClassifierFlags0.factorInAlignmentProb);
      assertFalse(seqClassifierFlags0.useGEforSup);
      assertFalse(seqClassifierFlags0.cacheNGrams);
      assertFalse(seqClassifierFlags0.useCorefFeatures);
      assertFalse(seqClassifierFlags0.noNeighborConstraints);
      assertEquals(1.0, seqClassifierFlags0.dropoutScale, 0.01D);
      assertFalse(seqClassifierFlags0.useSuf);
      assertFalse(seqClassifierFlags0.backpropLopTraining);
      assertFalse(seqClassifierFlags0.useDisjShape);
      assertFalse(seqClassifierFlags0.useScaledSGD);
      assertFalse(seqClassifierFlags0.testVariance);
      assertEquals(0.1, seqClassifierFlags0.gainSGD, 0.01D);
      assertEquals((-1), seqClassifierFlags0.wordShape);
      assertEquals(1, seqClassifierFlags0.endFold);
      assertFalse(seqClassifierFlags0.usePKChar2);
      assertEquals(30, seqClassifierFlags0.beamSize);
      assertEquals(0, seqClassifierFlags0.multiThreadClassifier);
      assertEquals(0.0, seqClassifierFlags0.dropoutRate, 0.01D);
      assertFalse(seqClassifierFlags0.useOnlySeenWeights);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions);
      assertEquals(10, seqClassifierFlags0.totalFeatureSlice);
      assertFalse(seqClassifierFlags0.usePosition);
      assertEquals(1, seqClassifierFlags0.numTimesRemoveTopN);
      assertFalse(seqClassifierFlags0.useRule2);
      assertFalse(seqClassifierFlags0.useSGDtoQN);
      assertFalse(seqClassifierFlags0.useNERPrior);
      assertEquals((-1), seqClassifierFlags0.maxNGramLeng);
      assertFalse(seqClassifierFlags0.softmaxOutputLayer);
      assertFalse(seqClassifierFlags0.useOutDict2);
      assertFalse(seqClassifierFlags0.twoStage);
      assertFalse(seqClassifierFlags0.largeChSegFile);
      assertFalse(seqClassifierFlags0.outputIterationsToFile);
      assertFalse(seqClassifierFlags0.useLabelSource);
      assertFalse(seqClassifierFlags0.useWordShapeGaz);
      assertFalse(seqClassifierFlags0.useABSTRFreq);
      assertFalse(seqClassifierFlags0.useFirstWord);
      assertEquals(0.0, seqClassifierFlags0.softmaxTieLambda, 0.01D);
      assertEquals(0.0, seqClassifierFlags0.pctSegmenterScale, 0.01D);
      assertFalse(seqClassifierFlags0.iobTags);
      assertEquals(0.1, seqClassifierFlags0.initRate, 0.01D);
      assertFalse(seqClassifierFlags0.useFREQ);
      assertFalse(seqClassifierFlags0.useSymWordPairs);
      assertEquals(1, seqClassifierFlags0.startFold);
      assertTrue(seqClassifierFlags0.initViterbi);
      assertFalse(seqClassifierFlags0.useNeighborNGrams);
      assertFalse(seqClassifierFlags0.useDisjunctive);
      assertFalse(seqClassifierFlags0.useAdaDiff);
      assertEquals(1, seqClassifierFlags0.numFolds);
      assertFalse(seqClassifierFlags0.normalize);
      assertFalse(seqClassifierFlags0.verboseMode);
      assertFalse(seqClassifierFlags0.usePrev);
      assertFalse(seqClassifierFlags0.expandMidDot);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesAll);
      assertFalse(seqClassifierFlags0.useLemmas);
      assertEquals(25, seqClassifierFlags0.QNsize2);
      assertFalse(seqClassifierFlags0.usePk);
      assertFalse(seqClassifierFlags0.useStochasticQN);
      assertEquals(0, seqClassifierFlags0.maxQNItr);
      assertFalse(seqClassifierFlags0.useOWLQN);
      assertFalse(seqClassifierFlags0.powerAlignProb);
      assertFalse(seqClassifierFlags0.restrictTransitionsTimit);
      assertFalse(seqClassifierFlags0.useSymTags);
      assertEquals(8, seqClassifierFlags0.maxAllowedChromaticSize);
      assertFalse(seqClassifierFlags0.useNextSequences);
      assertEquals(1.0, seqClassifierFlags0.unsupDropoutScale, 0.01D);
      assertEquals((-1), seqClassifierFlags0.QNPasses);
      assertFalse(seqClassifierFlags0.printFactorTable);
      assertFalse(seqClassifierFlags0.evaluateTrain);
      assertFalse(seqClassifierFlags0.useNextRealWord);
      assertFalse(seqClassifierFlags0.useSum);
      assertFalse(seqClassifierFlags0.tieOutputLayer);
      assertFalse(seqClassifierFlags0.mergeTags);
      assertFalse(seqClassifierFlags0.use4Clique);
      assertFalse(seqClassifierFlags0.useSigmoid);
      assertFalse(seqClassifierFlags0.useIfInteger);
      assertFalse(seqClassifierFlags0.use2W);
      assertFalse(seqClassifierFlags0.useBigramInTwoClique);
      assertTrue(seqClassifierFlags0.useMemoryEvaluator);
      assertFalse(seqClassifierFlags0.useDictPK2);
      assertFalse(seqClassifierFlags0.hardcodeSoftmaxOutputWeights);
      assertEquals(1, seqClassifierFlags0.kBest);
      assertTrue(seqClassifierFlags0.includeC2EViterbi);
      assertFalse(seqClassifierFlags0.useASBCPre1);
      assertEquals(0.95, seqClassifierFlags0.adaDeltaRho, 0.01D);
      assertEquals(0.5, seqClassifierFlags0.alignmentDecodeThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useBerkeleyAlignerForViterbi);
      assertFalse(seqClassifierFlags0.secondOrderNonLinear);
      assertTrue(seqClassifierFlags0.separateASCIIandRange);
      assertFalse(seqClassifierFlags0.useFloat);
      assertFalse(seqClassifierFlags0.useBoundarySequences);
      assertFalse(seqClassifierFlags0.dontExtendTaggy);
      assertFalse(seqClassifierFlags0.useVB);
      assertFalse(seqClassifierFlags0.useMinimalAbbr);
      assertFalse(seqClassifierFlags0.useCommonWordsFeature);
      assertFalse(seqClassifierFlags0.useAdaGradFOBOS);
      assertFalse(seqClassifierFlags0.addBiasToEmbedding);
      assertTrue(seqClassifierFlags0.useHiddenLayer);
      assertFalse(seqClassifierFlags0.baseline);
      assertFalse(seqClassifierFlags0.useUnicodeType4gram);
      assertEquals(0, seqClassifierFlags0.numOfFeatureSlices);
      assertFalse(seqClassifierFlags0.useLongSequences);
      assertFalse(seqClassifierFlags0.useNPGovernor);
      assertEquals(0.0, seqClassifierFlags0.priorLambda, 0.01D);
      assertFalse(seqClassifierFlags0.useTrainLexicon);
      assertFalse(seqClassifierFlags0.geDebug);
      assertFalse(seqClassifierFlags0.useEitherSideDisjunctive);
      assertFalse(seqClassifierFlags0.useTypeSeqs);
      assertFalse(seqClassifierFlags0.useMUCFeatures);
      assertFalse(seqClassifierFlags0.useChunks);
      assertFalse(seqClassifierFlags0.useMoreTags);
      assertFalse(seqClassifierFlags0.ocrTrain);
      assertFalse(seqClassifierFlags0.useURLSequences);
      assertFalse(seqClassifierFlags0.testHessSamples);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions3);
      assertFalse(seqClassifierFlags0.useNGrams);
      assertFalse(seqClassifierFlags0.terminateOnEvalImprovement);
      assertFalse(seqClassifierFlags0.suppressMidDotPostprocessing);
      
      double double0 = seqClassifierFlags0.adaptSigma;
      assertEquals("", seqClassifierFlags0.toString());
      assertEquals(1.0, double0, 0.01D);
      assertEquals(1000, seqClassifierFlags0.wordSegBeamSize);
      assertEquals(10, seqClassifierFlags0.totalDataSlice);
      assertFalse(seqClassifierFlags0.useLastRealWord);
      assertEquals(1.0, seqClassifierFlags0.alignDDAlpha, 0.01D);
      assertEquals(25, seqClassifierFlags0.QNsize);
      assertFalse(seqClassifierFlags0.useParenMatching);
      assertEquals(0.0, seqClassifierFlags0.removeTopNPercent, 0.01D);
      assertFalse(seqClassifierFlags0.groupByFeatureTemplate);
      assertEquals((-1), seqClassifierFlags0.arbitraryInputLayerSize);
      assertFalse(seqClassifierFlags0.useTopics);
      assertFalse(seqClassifierFlags0.useDisjunctiveShapeInteraction);
      assertFalse(seqClassifierFlags0.printNR);
      assertFalse(seqClassifierFlags0.strictlyZeroethOrder);
      assertEquals(0, seqClassifierFlags0.numTimesPruneFeatures);
      assertFalse(seqClassifierFlags0.bioSubmitOutput);
      assertEquals(1, seqClassifierFlags0.numDatasetsPerFile);
      assertEquals(0.1, seqClassifierFlags0.initialGain, 0.01D);
      assertFalse(seqClassifierFlags0.transitionEdgeOnly);
      assertFalse(seqClassifierFlags0.dropoutApprox);
      assertFalse(seqClassifierFlags0.useNoisyLabel);
      assertTrue(seqClassifierFlags0.applyNERPenalty);
      assertTrue(seqClassifierFlags0.useQN);
      assertEquals(1, seqClassifierFlags0.selfTrainWindowSize);
      assertFalse(seqClassifierFlags0.usePrediction2);
      assertFalse(seqClassifierFlags0.useASBCSuf1);
      assertFalse(seqClassifierFlags0.useSeenFeaturesOnly);
      assertFalse(seqClassifierFlags0.regularizeSoftmaxTieParam);
      assertFalse(seqClassifierFlags0.purgeDatasets);
      assertFalse(seqClassifierFlags0.casedDistSim);
      assertFalse(seqClassifierFlags0.evaluateBackground);
      assertFalse(seqClassifierFlags0.useNoisyNonNoisyFeature);
      assertFalse(seqClassifierFlags0.useTypeySequences);
      assertTrue(seqClassifierFlags0.useInternal);
      assertFalse(seqClassifierFlags0.removeStrictGoodCoNLLDuplicates);
      assertFalse(seqClassifierFlags0.useTypeSeqs2);
      assertFalse(seqClassifierFlags0.useUnknown);
      assertFalse(seqClassifierFlags0.useTypeSeqs3);
      assertFalse(seqClassifierFlags0.printWeights);
      assertFalse(seqClassifierFlags0.printTrainLabels);
      assertFalse(seqClassifierFlags0.useGoodForNamesCpC);
      assertFalse(seqClassifierFlags0.sighanPostProcessing);
      assertFalse(seqClassifierFlags0.combo);
      assertFalse(seqClassifierFlags0.randomLopFeatureSplit);
      assertFalse(seqClassifierFlags0.retainEntitySubclassification);
      assertFalse(seqClassifierFlags0.useNumberFeature);
      assertFalse(seqClassifierFlags0.useMidDotShape);
      assertEquals(0, seqClassifierFlags0.startEvaluateIters);
      assertFalse(seqClassifierFlags0.useIsDateRange);
      assertFalse(seqClassifierFlags0.dualDecompAlignment);
      assertEquals((-1), seqClassifierFlags0.purgeFeatures);
      assertFalse(seqClassifierFlags0.useMoreAbbr);
      assertEquals(0, seqClassifierFlags0.hybridCutoffIteration);
      assertFalse(seqClassifierFlags0.usePhraseWordTags);
      assertFalse(seqClassifierFlags0.useRobustQN);
      assertFalse(seqClassifierFlags0.useHk);
      assertFalse(seqClassifierFlags0.readStdin);
      assertFalse(seqClassifierFlags0.useABSTR);
      assertFalse(seqClassifierFlags0.useDict2);
      assertFalse(seqClassifierFlags0.useNegDict2);
      assertFalse(seqClassifierFlags0.randomLopWeights);
      assertFalse(seqClassifierFlags0.removeBackgroundSingletonFeatures);
      assertFalse(seqClassifierFlags0.useTitle);
      assertFalse(seqClassifierFlags0.useNegDict4);
      assertFalse(seqClassifierFlags0.useRad2b);
      assertFalse(seqClassifierFlags0.useNegDict3);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSize, 0.01D);
      assertFalse(seqClassifierFlags0.useLC);
      assertFalse(seqClassifierFlags0.blockInitialize);
      assertEquals(0.9, seqClassifierFlags0.selfTrainConfidenceThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useWideDisjunctive);
      assertFalse(seqClassifierFlags0.useCTBPre1);
      assertFalse(seqClassifierFlags0.useWEB);
      assertEquals(0, seqClassifierFlags0.multiThreadGibbs);
      assertFalse(seqClassifierFlags0.doAdaptation);
      assertFalse(seqClassifierFlags0.subCWGaz);
      assertEquals(0, seqClassifierFlags0.maxDocSize);
      assertFalse(seqClassifierFlags0.useDictCTB2);
      assertFalse(seqClassifierFlags0.useEntityTypeSequences);
      assertFalse(seqClassifierFlags0.skipOutputRegularization);
      assertFalse(seqClassifierFlags0.useHybrid);
      assertFalse(seqClassifierFlags0.useReverse);
      assertEquals((-1), seqClassifierFlags0.samplingSpeedUpThreshold);
      assertFalse(seqClassifierFlags0.useCRFforUnsup);
      assertEquals(0.0, seqClassifierFlags0.alignmentPruneThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useOrdinal);
      assertFalse(seqClassifierFlags0.useSentenceNumber);
      assertFalse(seqClassifierFlags0.useMSRChar2);
      assertFalse(seqClassifierFlags0.useQuartic);
      assertFalse(seqClassifierFlags0.useWord2);
      assertFalse(seqClassifierFlags0.useWord3);
      assertFalse(seqClassifierFlags0.useWord4);
      assertEquals(0, seqClassifierFlags0.scaledSGDMethod);
      assertFalse(seqClassifierFlags0.useAbbr1);
      assertFalse(seqClassifierFlags0.useKL);
      assertFalse(seqClassifierFlags0.useBagOfWords);
      assertFalse(seqClassifierFlags0.strictlySecondOrder);
      assertFalse(seqClassifierFlags0.useWord1);
      assertFalse(seqClassifierFlags0.prependEmbedding);
      assertFalse(seqClassifierFlags0.dump);
      assertFalse(seqClassifierFlags0.strictGoodCoNLL);
      assertEquals(0.0, seqClassifierFlags0.l1reg, 0.01D);
      assertFalse(seqClassifierFlags0.useNegCTBDict2);
      assertFalse(seqClassifierFlags0.useNegCTBDict3);
      assertFalse(seqClassifierFlags0.useNB);
      assertFalse(seqClassifierFlags0.useNegCTBDict4);
      assertFalse(seqClassifierFlags0.useChPos);
      assertFalse(seqClassifierFlags0.useNegHKDict4);
      assertFalse(seqClassifierFlags0.useNegHKDict3);
      assertFalse(seqClassifierFlags0.useNegHKDict2);
      assertFalse(seqClassifierFlags0.useHardGE);
      assertEquals(1.0, seqClassifierFlags0.lambdaCH, 0.01D);
      assertFalse(seqClassifierFlags0.greekifyNGrams);
      assertEquals((-1), seqClassifierFlags0.SGDPasses);
      assertFalse(seqClassifierFlags0.useRadical);
      assertFalse(seqClassifierFlags0.usePre);
      assertFalse(seqClassifierFlags0.useShapeStrings);
      assertFalse(seqClassifierFlags0.useWordn);
      assertFalse(seqClassifierFlags0.useGazettes);
      assertFalse(seqClassifierFlags0.intern2);
      assertEquals(0, seqClassifierFlags0.numOfSlices);
      assertFalse(seqClassifierFlags0.useShapeConjunctions);
      assertFalse(seqClassifierFlags0.appendLC);
      assertFalse(seqClassifierFlags0.normalizeTerms);
      assertFalse(seqClassifierFlags0.useWEBFreqDict);
      assertFalse(seqClassifierFlags0.useUnicodeBlock);
      assertFalse(seqClassifierFlags0.fakeDataset);
      assertFalse(seqClassifierFlags0.noMidNGrams);
      assertFalse(seqClassifierFlags0.useDictleng);
      assertFalse(seqClassifierFlags0.useEntityRule);
      assertFalse(seqClassifierFlags0.useCTBSuf1);
      assertFalse(seqClassifierFlags0.checkGradient);
      assertFalse(seqClassifierFlags0.noEdgeFeature);
      assertFalse(seqClassifierFlags0.useGazettePhrases);
      assertFalse(seqClassifierFlags0.dehyphenateNGrams);
      assertEquals(1, seqClassifierFlags0.numLopExpert);
      assertEquals(1, seqClassifierFlags0.numRuns);
      assertFalse(seqClassifierFlags0.justify);
      assertFalse(seqClassifierFlags0.keepEnglishWhitespaces);
      assertEquals(1, seqClassifierFlags0.selfTrainIterations);
      assertFalse(seqClassifierFlags0.usePrevNextLemmas);
      assertFalse(seqClassifierFlags0.useChromaticSampling);
      assertEquals(1, seqClassifierFlags0.multiThreadPerceptron);
      assertFalse(seqClassifierFlags0.keepAllWhitespaces);
      assertFalse(seqClassifierFlags0.keepEmptySentences);
      assertFalse(seqClassifierFlags0.useHKSuf1);
      assertFalse(seqClassifierFlags0.printLabelValue);
      assertEquals(1, seqClassifierFlags0.bisequencePriorType);
      assertEquals(4, seqClassifierFlags0.disjunctionWidth);
      assertFalse(seqClassifierFlags0.lazyUpdate);
      assertFalse(seqClassifierFlags0.useAcqPrior);
      assertFalse(seqClassifierFlags0.factorInBiEdgePotential);
      assertFalse(seqClassifierFlags0.useABSTRFreqDict);
      assertFalse(seqClassifierFlags0.useShapeStrings4);
      assertFalse(seqClassifierFlags0.useFeaturesC5gram);
      assertEquals(0.0, seqClassifierFlags0.priorAlpha, 0.01D);
      assertEquals(100, seqClassifierFlags0.printClassifierParam);
      assertEquals(0.0, seqClassifierFlags0.featureWeightThreshold, 0.01D);
      assertTrue(seqClassifierFlags0.useCWSFeatures);
      assertFalse(seqClassifierFlags0.perceptronDebug);
      assertTrue(seqClassifierFlags0.averagePerceptron);
      assertFalse(seqClassifierFlags0.useBilingualNERPrior);
      assertFalse(seqClassifierFlags0.matchNERIncentive);
      assertFalse(seqClassifierFlags0.useShapeStrings5);
      assertFalse(seqClassifierFlags0.tuneSGD);
      assertFalse(seqClassifierFlags0.useShapeStrings3);
      assertFalse(seqClassifierFlags0.useSegmentation);
      assertFalse(seqClassifierFlags0.useShapeStrings1);
      assertEquals(0.0, seqClassifierFlags0.newgeneThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useIsURL);
      assertFalse(seqClassifierFlags0.usePrevSequences);
      assertFalse(seqClassifierFlags0.learnENBasedOnCH);
      assertFalse(seqClassifierFlags0.useBeginSent);
      assertFalse(seqClassifierFlags0.useDualDecomp);
      assertFalse(seqClassifierFlags0.useAbbr);
      assertFalse(seqClassifierFlags0.useYear);
      assertFalse(seqClassifierFlags0.checkNameList);
      assertEquals(0, seqClassifierFlags0.featureCountThresh);
      assertFalse(seqClassifierFlags0.includeFullCRFInLOP);
      assertFalse(seqClassifierFlags0.useNegPKDict2);
      assertFalse(seqClassifierFlags0.useNegPKDict4);
      assertTrue(seqClassifierFlags0.learnCHBasedOnEN);
      assertFalse(seqClassifierFlags0.useNegPKDict3);
      assertFalse(seqClassifierFlags0.deleteBlankLines);
      assertFalse(seqClassifierFlags0.useObservedSequencesOnly);
      assertFalse(seqClassifierFlags0.useNERPriorBIO);
      assertEquals(0, seqClassifierFlags0.dualDecompMaxItr);
      assertFalse(seqClassifierFlags0.useBerkeleyCompetitivePosterior);
      assertFalse(seqClassifierFlags0.gradientDebug);
      assertFalse(seqClassifierFlags0.useOccurrencePatterns);
      assertFalse(seqClassifierFlags0.useNPHead);
      assertFalse(seqClassifierFlags0.useTags);
      assertFalse(seqClassifierFlags0.useGenericFeatures);
      assertEquals(0.01, seqClassifierFlags0.epsilon, 0.01D);
      assertFalse(seqClassifierFlags0.useDictHK2);
      assertEquals(0, seqClassifierFlags0.maxRight);
      assertFalse(seqClassifierFlags0.sparseOutputLayer);
      assertFalse(seqClassifierFlags0.useAs);
      assertFalse(seqClassifierFlags0.useHKPre1);
      assertFalse(seqClassifierFlags0.useGENIA);
      assertFalse(seqClassifierFlags0.iobWrapper);
      assertEquals(0.0, seqClassifierFlags0.featureDiffThresh, 0.01D);
      assertEquals(1.0, seqClassifierFlags0.lambdaEN, 0.01D);
      assertEquals((-1), seqClassifierFlags0.tuneSampleSize);
      assertEquals(1, seqClassifierFlags0.featureThreshold);
      assertEquals(1.0, seqClassifierFlags0.adaptSigma, 0.01D);
      assertEquals(0, seqClassifierFlags0.nerSkipFirstK);
      assertFalse(seqClassifierFlags0.doGibbs);
      assertFalse(seqClassifierFlags0.timitDatum);
      assertFalse(seqClassifierFlags0.addCapitalFeatures);
      assertTrue(seqClassifierFlags0.useSequences);
      assertEquals(1, seqClassifierFlags0.CRForder);
      assertEquals(50, seqClassifierFlags0.SGD2QNhessSamples);
      assertEquals(0, seqClassifierFlags0.evaluateIters);
      assertFalse(seqClassifierFlags0.useInPlaceSGD);
      assertEquals(2, seqClassifierFlags0.CRFwindow);
      assertFalse(seqClassifierFlags0.doFE);
      assertFalse(seqClassifierFlags0.strictlyFirstOrder);
      assertFalse(seqClassifierFlags0.useHuber);
      assertEquals(0.001, seqClassifierFlags0.adaGradEps, 0.01D);
      assertEquals(1.0E-4, seqClassifierFlags0.tolerance, 0.01D);
      assertFalse(seqClassifierFlags0.useCTBChar2);
      assertFalse(seqClassifierFlags0.useFeaturesC4gram);
      assertFalse(seqClassifierFlags0.useFeaturesCpC4gram);
      assertFalse(seqClassifierFlags0.useClassFeature);
      assertFalse(seqClassifierFlags0.useMsr);
      assertFalse(seqClassifierFlags0.useLemmaAsWord);
      assertFalse(seqClassifierFlags0.useWordTag);
      assertEquals(1, seqClassifierFlags0.terminateOnEvalImprovementNumOfEpoch);
      assertFalse(seqClassifierFlags0.selfTest);
      assertFalse(seqClassifierFlags0.useEmbedding);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSizeAlignment, 0.01D);
      assertEquals(1.0, seqClassifierFlags0.randomizedRatio, 0.01D);
      assertTrue(seqClassifierFlags0.useExternal);
      assertTrue(seqClassifierFlags0.biAlignmentPriorIsPMI);
      assertEquals(1, seqClassifierFlags0.multiThreadGrad);
      assertFalse(seqClassifierFlags0.useDictASBC2);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesBigram);
      assertFalse(seqClassifierFlags0.useObservedFeaturesOnly);
      assertEquals(Double.POSITIVE_INFINITY, seqClassifierFlags0.searchGraphPrune, 0.01D);
      assertFalse(seqClassifierFlags0.estimateInitial);
      assertFalse(seqClassifierFlags0.powerAlignProbAsAddition);
      assertFalse(seqClassifierFlags0.useExtraTaggySequences);
      assertEquals((-1), seqClassifierFlags0.maxIterations);
      assertEquals((-1), seqClassifierFlags0.labelDictionaryCutoff);
      assertFalse(seqClassifierFlags0.printFirstOrderProbs);
      assertFalse(seqClassifierFlags0.usePhraseWordSpecialTags);
      assertFalse(seqClassifierFlags0.dampDDStepSizeWithAlignmentProb);
      assertFalse(seqClassifierFlags0.useNegASBCDict2);
      assertEquals((-1), seqClassifierFlags0.numHiddenUnits);
      assertFalse(seqClassifierFlags0.useNegASBCDict4);
      assertFalse(seqClassifierFlags0.useNegASBCDict3);
      assertFalse(seqClassifierFlags0.useABGENE);
      assertFalse(seqClassifierFlags0.booleanFeatures);
      assertFalse(seqClassifierFlags0.useAltGazFeatures);
      assertFalse(seqClassifierFlags0.memoryThrift);
      assertFalse(seqClassifierFlags0.useHKChar2);
      assertFalse(seqClassifierFlags0.useNext);
      assertEquals(10, seqClassifierFlags0.wideDisjunctionWidth);
      assertEquals(2, seqClassifierFlags0.maxLeft);
      assertFalse(seqClassifierFlags0.groupByHiddenUnit);
      assertFalse(seqClassifierFlags0.groupByInput);
      assertFalse(seqClassifierFlags0.useRandomSeed);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions3);
      assertFalse(seqClassifierFlags0.alternateTraining);
      assertFalse(seqClassifierFlags0.pctSegmenterScaleByCRF);
      assertFalse(seqClassifierFlags0.lowercaseNGrams);
      assertFalse(seqClassifierFlags0.useSemPrior);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions2);
      assertFalse(seqClassifierFlags0.useRule);
      assertFalse(seqClassifierFlags0.useDistSim);
      assertFalse(seqClassifierFlags0.useEntityTypes);
      assertEquals(Integer.MAX_VALUE, seqClassifierFlags0.printFeaturesUpto);
      assertFalse(seqClassifierFlags0.terminateOnAvgImprovement);
      assertTrue(seqClassifierFlags0.useDenero);
      assertFalse(seqClassifierFlags0.suppressTestDebug);
      assertFalse(seqClassifierFlags0.useAdaDelta);
      assertFalse(seqClassifierFlags0.useChunkySequences);
      assertFalse(seqClassifierFlags0.makeConsistent);
      assertTrue(seqClassifierFlags0.keepOBInMemory);
      assertFalse(seqClassifierFlags0.verboseForTrueCasing);
      assertEquals(1.0, seqClassifierFlags0.sigma, 0.01D);
      assertFalse(seqClassifierFlags0.strictlyThirdOrder);
      assertFalse(seqClassifierFlags0.useReverseAffix);
      assertFalse(seqClassifierFlags0.useEitherSideWord);
      assertEquals(1, seqClassifierFlags0.nerSlowerTimes);
      assertFalse(seqClassifierFlags0.splitOnHead);
      assertFalse(seqClassifierFlags0.dualDecompNotBIO);
      assertFalse(seqClassifierFlags0.printXML);
      assertFalse(seqClassifierFlags0.useKBest);
      assertFalse(seqClassifierFlags0.useYetMoreCpCShapes);
      assertEquals(0, seqClassifierFlags0.interimOutputFreq);
      assertFalse(seqClassifierFlags0.initWithNERPosterior);
      assertFalse(seqClassifierFlags0.useFeaturesCpC5gram);
      assertFalse(seqClassifierFlags0.usePhraseWords);
      assertTrue(seqClassifierFlags0.useOutputLayer);
      assertEquals(100, seqClassifierFlags0.numSamples);
      assertFalse(seqClassifierFlags0.intern);
      assertFalse(seqClassifierFlags0.useANTE);
      assertFalse(seqClassifierFlags0.printProbs);
      assertFalse(seqClassifierFlags0.useFilter);
      assertFalse(seqClassifierFlags0.announceObjectBankEntries);
      assertFalse(seqClassifierFlags0.useUnicodeType);
      assertFalse(seqClassifierFlags0.useProtoFeatures);
      assertFalse(seqClassifierFlags0.conjoinShapeNGrams);
      assertEquals(8, seqClassifierFlags0.distSimMaxBits);
      assertFalse(seqClassifierFlags0.groupByOutputClass);
      assertFalse(seqClassifierFlags0.saveFeatureIndexToDisk);
      assertFalse(seqClassifierFlags0.useUniformPrior);
      assertFalse(seqClassifierFlags0.useMoreGazFeatures);
      assertFalse(seqClassifierFlags0.useWordPairs);
      assertFalse(seqClassifierFlags0.usePrediction);
      assertFalse(seqClassifierFlags0.useBig5);
      assertFalse(seqClassifierFlags0.useGazFeatures);
      assertFalse(seqClassifierFlags0.useTaggySequences);
      assertFalse(seqClassifierFlags0.useNextVB);
      assertFalse(seqClassifierFlags0.sloppyGazette);
      assertEquals(3, seqClassifierFlags0.charHalfWindow);
      assertFalse(seqClassifierFlags0.useTOK);
      assertEquals(1, seqClassifierFlags0.numStartLayers);
      assertFalse(seqClassifierFlags0.useUnicodeType5gram);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions3);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions2);
      assertFalse(seqClassifierFlags0.useSMD);
      assertFalse(seqClassifierFlags0.nonLinearCRF);
      assertFalse(seqClassifierFlags0.testObjFunction);
      assertFalse(seqClassifierFlags0.normalizeTimex);
      assertFalse(seqClassifierFlags0.weightByEntropy);
      assertFalse(seqClassifierFlags0.useCWSWordFeatures);
      assertTrue(seqClassifierFlags0.useKnownLCWords);
      assertEquals(0, seqClassifierFlags0.removeTopN);
      assertTrue(seqClassifierFlags0.initWithPosterior);
      assertFalse(seqClassifierFlags0.useMinimalAbbr1);
      assertFalse(seqClassifierFlags0.useFeaturesC6gram);
      assertFalse(seqClassifierFlags0.usePKSuf1);
      assertFalse(seqClassifierFlags0.useHeadGov);
      assertFalse(seqClassifierFlags0.cleanGazette);
      assertTrue(seqClassifierFlags0.useViterbi);
      assertTrue(seqClassifierFlags0.splitDocuments);
      assertFalse(seqClassifierFlags0.doFeatureDiscovery);
      assertFalse(seqClassifierFlags0.usePrevVB);
      assertFalse(seqClassifierFlags0.usePKPre1);
      assertFalse(seqClassifierFlags0.useACR);
      assertFalse(seqClassifierFlags0.useSequentialScanSampling);
      assertFalse(seqClassifierFlags0.numberEquivalenceDistSim);
      assertFalse(seqClassifierFlags0.useTaggySequencesShapeInteraction);
      assertFalse(seqClassifierFlags0.useWordnetFeatures);
      assertTrue(seqClassifierFlags0.useWord);
      assertFalse(seqClassifierFlags0.lowerNewgeneThreshold);
      assertFalse(seqClassifierFlags0.useSGD);
      assertTrue(seqClassifierFlags0.restrictLabels);
      assertFalse(seqClassifierFlags0.dualDecompDebug);
      assertFalse(seqClassifierFlags0.pctSegmenterLenAdjust);
      assertFalse(seqClassifierFlags0.usePhraseFeatures);
      assertEquals(0, seqClassifierFlags0.featureCountThreshold);
      assertFalse(seqClassifierFlags0.augmentedDateChars);
      assertFalse(seqClassifierFlags0.useASBCChar2);
      assertFalse(seqClassifierFlags0.useFeaturesCpC6gram);
      assertEquals(15, seqClassifierFlags0.stochasticBatchSize);
      assertEquals(0.0, seqClassifierFlags0.annealingRate, 0.01D);
      assertFalse(seqClassifierFlags0.useRad2);
      assertEquals(0, seqClassifierFlags0.ocrFold);
      assertFalse(seqClassifierFlags0.useRad1);
      assertFalse(seqClassifierFlags0.factorInAlignmentProb);
      assertFalse(seqClassifierFlags0.useGEforSup);
      assertFalse(seqClassifierFlags0.cacheNGrams);
      assertFalse(seqClassifierFlags0.useCorefFeatures);
      assertFalse(seqClassifierFlags0.noNeighborConstraints);
      assertEquals(1.0, seqClassifierFlags0.dropoutScale, 0.01D);
      assertFalse(seqClassifierFlags0.useSuf);
      assertFalse(seqClassifierFlags0.backpropLopTraining);
      assertFalse(seqClassifierFlags0.useDisjShape);
      assertFalse(seqClassifierFlags0.useScaledSGD);
      assertFalse(seqClassifierFlags0.testVariance);
      assertEquals(0.1, seqClassifierFlags0.gainSGD, 0.01D);
      assertEquals((-1), seqClassifierFlags0.wordShape);
      assertEquals(1, seqClassifierFlags0.endFold);
      assertFalse(seqClassifierFlags0.usePKChar2);
      assertEquals(30, seqClassifierFlags0.beamSize);
      assertEquals(0, seqClassifierFlags0.multiThreadClassifier);
      assertEquals(0.0, seqClassifierFlags0.dropoutRate, 0.01D);
      assertFalse(seqClassifierFlags0.useOnlySeenWeights);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions);
      assertEquals(10, seqClassifierFlags0.totalFeatureSlice);
      assertFalse(seqClassifierFlags0.usePosition);
      assertEquals(1, seqClassifierFlags0.numTimesRemoveTopN);
      assertFalse(seqClassifierFlags0.useRule2);
      assertFalse(seqClassifierFlags0.useSGDtoQN);
      assertFalse(seqClassifierFlags0.useNERPrior);
      assertEquals((-1), seqClassifierFlags0.maxNGramLeng);
      assertFalse(seqClassifierFlags0.softmaxOutputLayer);
      assertFalse(seqClassifierFlags0.useOutDict2);
      assertFalse(seqClassifierFlags0.twoStage);
      assertFalse(seqClassifierFlags0.largeChSegFile);
      assertFalse(seqClassifierFlags0.outputIterationsToFile);
      assertFalse(seqClassifierFlags0.useLabelSource);
      assertFalse(seqClassifierFlags0.useWordShapeGaz);
      assertFalse(seqClassifierFlags0.useABSTRFreq);
      assertFalse(seqClassifierFlags0.useFirstWord);
      assertEquals(0.0, seqClassifierFlags0.softmaxTieLambda, 0.01D);
      assertEquals(0.0, seqClassifierFlags0.pctSegmenterScale, 0.01D);
      assertFalse(seqClassifierFlags0.iobTags);
      assertEquals(0.1, seqClassifierFlags0.initRate, 0.01D);
      assertFalse(seqClassifierFlags0.useFREQ);
      assertFalse(seqClassifierFlags0.useSymWordPairs);
      assertEquals(1, seqClassifierFlags0.startFold);
      assertTrue(seqClassifierFlags0.initViterbi);
      assertFalse(seqClassifierFlags0.useNeighborNGrams);
      assertFalse(seqClassifierFlags0.useDisjunctive);
      assertFalse(seqClassifierFlags0.useAdaDiff);
      assertEquals(1, seqClassifierFlags0.numFolds);
      assertFalse(seqClassifierFlags0.normalize);
      assertFalse(seqClassifierFlags0.verboseMode);
      assertFalse(seqClassifierFlags0.usePrev);
      assertFalse(seqClassifierFlags0.expandMidDot);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesAll);
      assertFalse(seqClassifierFlags0.useLemmas);
      assertEquals(25, seqClassifierFlags0.QNsize2);
      assertFalse(seqClassifierFlags0.usePk);
      assertFalse(seqClassifierFlags0.useStochasticQN);
      assertEquals(0, seqClassifierFlags0.maxQNItr);
      assertFalse(seqClassifierFlags0.useOWLQN);
      assertFalse(seqClassifierFlags0.powerAlignProb);
      assertFalse(seqClassifierFlags0.restrictTransitionsTimit);
      assertFalse(seqClassifierFlags0.useSymTags);
      assertEquals(8, seqClassifierFlags0.maxAllowedChromaticSize);
      assertFalse(seqClassifierFlags0.useNextSequences);
      assertEquals(1.0, seqClassifierFlags0.unsupDropoutScale, 0.01D);
      assertEquals((-1), seqClassifierFlags0.QNPasses);
      assertFalse(seqClassifierFlags0.printFactorTable);
      assertFalse(seqClassifierFlags0.evaluateTrain);
      assertFalse(seqClassifierFlags0.useNextRealWord);
      assertFalse(seqClassifierFlags0.useSum);
      assertFalse(seqClassifierFlags0.tieOutputLayer);
      assertFalse(seqClassifierFlags0.mergeTags);
      assertFalse(seqClassifierFlags0.use4Clique);
      assertFalse(seqClassifierFlags0.useSigmoid);
      assertFalse(seqClassifierFlags0.useIfInteger);
      assertFalse(seqClassifierFlags0.use2W);
      assertFalse(seqClassifierFlags0.useBigramInTwoClique);
      assertTrue(seqClassifierFlags0.useMemoryEvaluator);
      assertFalse(seqClassifierFlags0.useDictPK2);
      assertFalse(seqClassifierFlags0.hardcodeSoftmaxOutputWeights);
      assertEquals(1, seqClassifierFlags0.kBest);
      assertTrue(seqClassifierFlags0.includeC2EViterbi);
      assertFalse(seqClassifierFlags0.useASBCPre1);
      assertEquals(0.95, seqClassifierFlags0.adaDeltaRho, 0.01D);
      assertEquals(0.5, seqClassifierFlags0.alignmentDecodeThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useBerkeleyAlignerForViterbi);
      assertFalse(seqClassifierFlags0.secondOrderNonLinear);
      assertTrue(seqClassifierFlags0.separateASCIIandRange);
      assertFalse(seqClassifierFlags0.useFloat);
      assertFalse(seqClassifierFlags0.useBoundarySequences);
      assertFalse(seqClassifierFlags0.dontExtendTaggy);
      assertFalse(seqClassifierFlags0.useVB);
      assertFalse(seqClassifierFlags0.useMinimalAbbr);
      assertFalse(seqClassifierFlags0.useCommonWordsFeature);
      assertFalse(seqClassifierFlags0.useAdaGradFOBOS);
      assertFalse(seqClassifierFlags0.addBiasToEmbedding);
      assertTrue(seqClassifierFlags0.useHiddenLayer);
      assertFalse(seqClassifierFlags0.baseline);
      assertFalse(seqClassifierFlags0.useUnicodeType4gram);
      assertEquals(0, seqClassifierFlags0.numOfFeatureSlices);
      assertFalse(seqClassifierFlags0.useLongSequences);
      assertFalse(seqClassifierFlags0.useNPGovernor);
      assertEquals(0.0, seqClassifierFlags0.priorLambda, 0.01D);
      assertFalse(seqClassifierFlags0.useTrainLexicon);
      assertFalse(seqClassifierFlags0.geDebug);
      assertFalse(seqClassifierFlags0.useEitherSideDisjunctive);
      assertFalse(seqClassifierFlags0.useTypeSeqs);
      assertFalse(seqClassifierFlags0.useMUCFeatures);
      assertFalse(seqClassifierFlags0.useChunks);
      assertFalse(seqClassifierFlags0.useMoreTags);
      assertFalse(seqClassifierFlags0.ocrTrain);
      assertFalse(seqClassifierFlags0.useURLSequences);
      assertFalse(seqClassifierFlags0.testHessSamples);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions3);
      assertFalse(seqClassifierFlags0.useNGrams);
      assertFalse(seqClassifierFlags0.terminateOnEvalImprovement);
      assertFalse(seqClassifierFlags0.suppressMidDotPostprocessing);
      
      String string0 = JSONObject.numberToString((Number) 1.0);
      assertNotNull(string0);
      assertEquals("1", string0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I105 Branch 128 IFEQ L1326 - false
   */

  @Test
  public void test07()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      int int0 = jSONObject0.length();
      assertEquals(0, jSONObject0.length());
      assertEquals(0, int0);
      
      JSONObject jSONObject1 = jSONObject0.append("1", (Object) "1");
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      String string0 = JSONObject.valueToString(jSONObject1, 0, 0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(string0);
      assertEquals("{\"1\": [\"1\"]}", string0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getLong(Ljava/lang/String;)J: I13 Branch 49 IFEQ L536 - true
   */

  @Test
  public void test08()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      HashMap<WordTag, IndexedWord> hashMap0 = new HashMap<WordTag, IndexedWord>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject1 = jSONObject0.put("JSON does not allow non-finite numbers.", (Map) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      try {
        long long0 = jSONObject0.getLong("JSON does not allow non-finite numbers.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSON does not allow non-finite numbers.\"] is not a number.
         //
      }
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I30 Branch 94 IFEQ L1090 - false
   */

  @Test
  public void test09()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      try {
        JSONObject jSONObject1 = jSONObject0.put("T2$\"STZ){kI$wL", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
      }
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I6 Branch 98 IFNULL L1113 - true
   */

  @Test
  public void test10()  throws Throwable  {
      HashMap<Double, WordTag> hashMap0 = new HashMap<Double, WordTag>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I13 Branch 122 IFEQ L1304 - false
   */

  @Test
  public void test11()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
      
      String string0 = JSONObject.valueToString(object0, 962, 962);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I12 Branch 67 IFNULL L889 - false
   */

  @Test
  public void test12()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      WordLemmaTag wordLemmaTag0 = new WordLemmaTag("JSON does not allow non-finite numbers.");
      assertEquals("JSON does not allow non-finite numbers.", wordLemmaTag0.word());
      assertEquals("JSON does not allow non-finite numbers.", wordLemmaTag0.value());
      assertNull(wordLemmaTag0.lemma());
      assertNull(wordLemmaTag0.tag());
      assertNotNull(wordLemmaTag0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("JSON does not allow non-finite numbers.", (Object) wordLemmaTag0);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals("JSON does not allow non-finite numbers.", wordLemmaTag0.word());
      assertEquals("JSON does not allow non-finite numbers.", wordLemmaTag0.value());
      assertNull(wordLemmaTag0.lemma());
      assertNull(wordLemmaTag0.tag());
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      String string0 = jSONObject1.optString("JSON does not allow non-finite numbers.", "JSON does not allow non-finite numbers.");
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals("JSON does not allow non-finite numbers.", wordLemmaTag0.word());
      assertEquals("JSON does not allow non-finite numbers.", wordLemmaTag0.value());
      assertNull(wordLemmaTag0.lemma());
      assertNull(wordLemmaTag0.tag());
      assertNotNull(string0);
      assertEquals("JSON does not allow non-finite numbers./null/null", string0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I37 Branch 56 IFNE L651 - false
   */

  @Test
  public void test13()  throws Throwable  {
      HashMap<LabeledWord, LabeledWord> hashMap0 = new HashMap<LabeledWord, LabeledWord>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I45 Branch 35 IFGE L400 - true
   */

  @Test
  public void test14()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1.0E-8);
      assertNotNull(string0);
      assertEquals("1.0E-8", string0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I13 Branch 32 IFEQ L393 - false
   */

  @Test
  public void test15()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  //Test case number: 16
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 6 LOOKUPSWITCH L183 Case 125 - true
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 7 LOOKUPSWITCH L183 Default-Case - false
   */

  @Test
  public void test16()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      assertTrue(jSONTokener0.more());
      assertNotNull(jSONTokener0);
      
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
      assertFalse(jSONTokener0.more());
      assertNotNull(jSONObject0);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getLong(Ljava/lang/String;)J: I13 Branch 49 IFEQ L536 - false
   */

  @Test
  public void test17()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("pUN", (long) 5640);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      long long0 = jSONObject0.getLong("pUN");
      assertEquals(1, jSONObject0.length());
      assertEquals(5640L, long0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 47 IFEQ L499 - false
   */

  @Test
  public void test18()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      HashIndex<StringLabel> hashIndex0 = new HashIndex<StringLabel>();
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertNotNull(hashIndex0);
      
      JSONObject jSONObject1 = jSONObject0.put("T2$\"STZ){kI$wL", (Collection) hashIndex0);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      JSONArray jSONArray0 = jSONObject1.getJSONArray("T2$\"STZ){kI$wL");
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 77 LOOKUPSWITCH L1030 Case 9 - true
   */

  @Test
  public void test19()  throws Throwable  {
      Double double0 = new Double((double) 0);
      assertEquals(0.0, (double)double0, 0.01D);
      
      String[] stringArray0 = new String[18];
      JSONObject jSONObject0 = new JSONObject((Object) double0, stringArray0);
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      try {
        JSONArray jSONArray0 = jSONObject0.getJSONArray("\tSpecific name: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\tSpecific name: \"] not found.
         //
      }
  }

  //Test case number: 20
  /*
   * 5 covered goals:
   * Goal 1. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I21 Branch 132 IFEQ L1357 - true
   * Goal 2. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I21 Branch 132 IFEQ L1357 - false
   * Goal 3. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I28 Branch 133 IFEQ L1358 - true
   * Goal 4. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I65 Branch 134 IFEQ L1365 - true
   * Goal 5. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I84 Branch 135 IFEQ L1367 - true
   */

  @Test
  public void test20()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      
      JSONObject jSONObject0 = new JSONObject((Object) boolean0);
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      CharArrayWriter charArrayWriter1 = (CharArrayWriter)jSONObject0.write((Writer) charArrayWriter0);
      assertEquals("{\"class\":\"class java.lang.Boolean\"}", charArrayWriter1.toString());
      assertEquals(35, charArrayWriter1.size());
      assertEquals(35, charArrayWriter0.size());
      assertEquals("{\"class\":\"class java.lang.Boolean\"}", charArrayWriter0.toString());
      assertEquals(1, jSONObject0.length());
      assertNotNull(charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertSame(charArrayWriter0, charArrayWriter1);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 48 IFEQ L517 - true
   */

  @Test
  public void test21()  throws Throwable  {
      HashMap<Integer, CategoryWordTag> hashMap0 = new HashMap<Integer, CategoryWordTag>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      assertEquals(2, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject0);
      
      Long long0 = new Long((-5L));
      assertEquals((-5L), (long)long0);
      
      JSONObject jSONObject1 = jSONObject0.put("fals>", (Object) long0);
      assertEquals(3, jSONObject1.length());
      assertEquals(3, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      try {
        JSONObject jSONObject2 = jSONObject1.getJSONObject("fals>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fals>\"] is not a JSONObject.
         //
      }
  }

  //Test case number: 22
  /*
   * 12 covered goals:
   * Goal 1. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I41 Branch 104 IF_ICMPNE L1197 - true
   * Goal 2. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I84 Branch 105 IFEQ L1204 - true
   * Goal 3. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I84 Branch 105 IFEQ L1204 - false
   * Goal 4. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I98 Branch 106 IF_ICMPLE L1206 - true
   * Goal 5. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I98 Branch 106 IF_ICMPLE L1206 - false
   * Goal 6. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I125 Branch 107 IF_ICMPGE L1211 - true
   * Goal 7. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I125 Branch 107 IF_ICMPGE L1211 - false
   * Goal 8. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I177 Branch 108 IF_ICMPLE L1219 - false
   * Goal 9. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I194 Branch 109 IF_ICMPGE L1221 - true
   * Goal 10. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I194 Branch 109 IF_ICMPGE L1221 - false
   * Goal 11. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I76 Branch 126 IFEQ L1320 - false
   * Goal 12. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I89 Branch 127 IFEQ L1323 - false
   */

  @Test
  public void test22()  throws Throwable  {
      HashMap<Integer, CategoryWordTag> hashMap0 = new HashMap<Integer, CategoryWordTag>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      assertEquals(2, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(jSONObject0);
      
      String string0 = JSONObject.valueToString(jSONObject0, (-25), 110);
      assertEquals(2, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(string0);
      assertEquals("{\n                                                                                     \"class\": \"class java.util.HashMap\",\n                                                                                     \"empty\": true\n                                                                                                              }", string0);
  }

  //Test case number: 23
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 29 IFNONNULL L374 - true
   * Goal 2. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I39 Branch 30 IFEQ L376 - true
   */

  @Test
  public void test23()  throws Throwable  {
      HashMap<StringLabel, CategoryWordTag> hashMap0 = new HashMap<StringLabel, CategoryWordTag>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("  Using defaultRule", (Object) jSONObject0);
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      HashMap<LabeledWord, IndexedWord> hashMap1 = new HashMap<LabeledWord, IndexedWord>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      try {
        JSONObject jSONObject2 = jSONObject1.append("  Using defaultRule", (Object) hashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[  Using defaultRule] is not a JSONArray.
         //
      }
  }

  //Test case number: 24
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I45 Branch 95 IFEQ L1094 - false
   * Goal 2. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I54 Branch 96 IFNE L1095 - false
   * Goal 3. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I61 Branch 97 IFEQ L1095 - true
   */

  @Test
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[15];
      JSONObject jSONObject0 = new JSONObject((Object) "Kz8h#;aSt4;Q.oSQ1U", stringArray0);
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Float float0 = new Float((float) (short) (-3737));
      assertEquals((-3737.0F), (float)float0, 0.01F);
      
      JSONObject jSONObject1 = jSONObject0.put("Kz8h#;aSt4;Q.oSQ1U", (Object) float0);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I140 Branch 130 IFEQ L1332 - false
   */

  @Test
  public void test25()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      int int0 = jSONObject0.optInt("bSr4", (-4));
      assertEquals(0, jSONObject0.length());
      assertEquals((-4), int0);
      
      LinkedList<Word> linkedList0 = new LinkedList<Word>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = JSONObject.valueToString(linkedList0, (-4), (-4));
      assertEquals(0, linkedList0.size());
      assertNotNull(string0);
      assertEquals("[]", string0);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I6 Branch 57 IFNONNULL L662 - false
   */

  @Test
  public void test26()  throws Throwable  {
      try {
        String string0 = JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
      }
  }

  //Test case number: 27
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I6 Branch 52 IFNONNULL L568 - true
   * Goal 2. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I40 Branch 53 IFNE L574 - false
   */

  @Test
  public void test27()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optDouble(Ljava/lang/String;D)D: I13 Branch 64 IFEQ L764 - false
   */

  @Test
  public void test28()  throws Throwable  {
      HashMap<String, IndexedWord> hashMap0 = new HashMap<String, IndexedWord>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("<ft", (-867));
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      double double0 = jSONObject0.optDouble("<ft", (double) (-867));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals((-867.0), double0, 0.01D);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I52 Branch 28 IFEQ L350 - false
   */

  @Test
  public void test29()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      HashIndex<Tag> hashIndex0 = new HashIndex<Tag>();
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertNotNull(hashIndex0);
      
      JSONObject jSONObject1 = jSONObject0.put("`LhOA#/", (Collection) hashIndex0);
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONObject jSONObject2 = jSONObject1.accumulate("`LhOA#/", (Object) "`LhOA#/");
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject2);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
  }

  //Test case number: 30
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I6 Branch 91 IFNULL L1088 - true
   */

  @Test
  public void test30()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject((Object) boolean0, stringArray0);
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("isparseBoolean", (Object) stringArray0[3]);
      assertEquals(0, jSONObject1.length());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 31
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 47 IFEQ L499 - true
   */

  @Test
  public void test31()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("U0si", 60L);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      try {
        JSONArray jSONArray0 = jSONObject0.getJSONArray("U0si");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"U0si\"] is not a JSONArray.
         //
      }
  }

  //Test case number: 32
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.has(Ljava/lang/String;)Z: root-Branch
   */

  @Test
  public void test32()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = jSONObject0.has("di");
      assertEquals(0, jSONObject0.length());
      assertFalse(boolean0);
  }

  //Test case number: 33
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optDouble(Ljava/lang/String;D)D: I13 Branch 64 IFEQ L764 - true
   */

  @Test
  public void test33()  throws Throwable  {
      HashMap<StringLabel, CategoryWordTag> hashMap0 = new HashMap<StringLabel, CategoryWordTag>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      double double0 = jSONObject0.optDouble("  2Using efaultRule", (double) 1L);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertEquals(1.0, double0, 0.01D);
  }

  //Test case number: 34
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.optLong(Ljava/lang/String;)J: root-Branch
   * Goal 2. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 69 IFNONNULL L975 - false
   * Goal 3. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I13 Branch 111 IFEQ L1253 - false
   * Goal 4. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I108 Branch 117 IFEQ L1271 - false
   */

  @Test
  public void test34()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "TD|)4W4RETrQ-:|}");
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      long long0 = jSONObject0.optLong("TD|)4W4RETrQ-:|}");
      assertEquals(3, jSONObject0.length());
      assertEquals(0L, long0);
      
      JSONArray jSONArray1 = jSONArray0.put(136, (Object) jSONArray0);
      assertEquals(137, jSONArray1.length());
      assertEquals(137, jSONArray0.length());
      assertNotNull(jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      
      try {
        JSONObject jSONObject1 = jSONArray1.toJSONObject(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
      }
  }

  //Test case number: 35
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I11 Branch 50 IFNE L548 - false
   */

  @Test
  public void test35()  throws Throwable  {
      String string0 = JSONObject.quote("+");
      assertNotNull(string0);
      assertEquals("\"+\"", string0);
      
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject((Object) "\"+\"", stringArray0);
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertNull(stringArray1);
  }

  //Test case number: 36
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Z)Lwheel/json/JSONObject;: I8 Branch 68 IFEQ L902 - true
   */

  @Test
  public void test36()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("`)zX9PWJ=u}", false);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 37
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/util/Map;)V: I11 Branch 16 IFNONNULL L234 - false
   */

  @Test
  public void test37()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
  }

  //Test case number: 38
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I12 Branch 4 IF_ICMPEQ L178 - false
   */

  @Test
  public void test38()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("<ft");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of <ft
         //
      }
  }

  //Test case number: 39
  /*
   * 6 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I12 Branch 4 IF_ICMPEQ L178 - true
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 5 LOOKUPSWITCH L183 Case 0 - false
   * Goal 3. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 6 LOOKUPSWITCH L183 Case 125 - false
   * Goal 4. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 7 LOOKUPSWITCH L183 Default-Case - true
   * Goal 5. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I61 Branch 8 IF_ICMPNE L198 - true
   * Goal 6. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I86 Branch 10 IF_ICMPEQ L202 - false
   */

  @Test
  public void test39()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{>H<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {>H<
         //
      }
  }

  //Test case number: 40
  @Test
  public void test40()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      int int0 = jSONObject0.optInt("", (-15));
      assertEquals(0, jSONObject0.length());
      assertEquals((-15), int0);
  }

  //Test case number: 41
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I11 Branch 50 IFNE L548 - true
   * Goal 2. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I37 Branch 51 IFEQ L554 - true
   * Goal 3. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I37 Branch 51 IFEQ L554 - false
   */

  @Test
  public void test41()  throws Throwable  {
      HashMap<StringLabel, CategoryWordTag> hashMap0 = new HashMap<StringLabel, CategoryWordTag>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      HashMap<LabeledWord, IndexedWord> hashMap1 = new HashMap<LabeledWord, IndexedWord>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("  2Using efaul@~ule", (Object) hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNotNull(stringArray0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 42
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getString(Ljava/lang/String;)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test42()  throws Throwable  {
      HashMap<String, IndexedWord> hashMap0 = new HashMap<String, IndexedWord>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject0);
      
      try {
        String string0 = jSONObject0.getString("<ft");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<ft\"] not found.
         //
      }
  }

  //Test case number: 43
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getInt(Ljava/lang/String;)I: I13 Branch 46 IFEQ L484 - false
   */

  @Test
  public void test43()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("Kz8h#;aSt4;Q.oSQ1U", 68);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      int int0 = jSONObject0.optInt("Kz8h#;aSt4;Q.oSQ1U", 68);
      assertEquals(1, jSONObject0.length());
      assertEquals(68, int0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 44
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I121 Branch 129 IFEQ L1329 - false
   */

  @Test
  public void test44()  throws Throwable  {
      HashMap<Byte, LabeledWord> hashMap0 = new HashMap<Byte, LabeledWord>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = JSONObject.valueToString(hashMap0, 0, 0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  //Test case number: 45
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optBoolean(Ljava/lang/String;)Z: root-Branch
   */

  @Test
  public void test45()  throws Throwable  {
      HashMap<String, IndexedWord> hashMap0 = new HashMap<String, IndexedWord>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.append("<ft", (Object) "<ft");
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      boolean boolean0 = jSONObject1.optBoolean("<ft");
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(boolean0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 46
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.toString()Ljava/lang/String;: I28 Branch 102 IF_ICMPLE L1141 - false
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I82 Branch 114 IFEQ L1268 - false
   * Goal 3. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I102 Branch 116 IFNE L1271 - true
   * Goal 4. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I121 Branch 118 IFEQ L1275 - false
   */

  @Test
  public void test46()  throws Throwable  {
      HashMap<StringLabel, CategoryWordTag> hashMap0 = new HashMap<StringLabel, CategoryWordTag>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject0);
      
      HashMap<LabeledWord, IndexedWord> hashMap1 = new HashMap<LabeledWord, IndexedWord>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("alot", (Object) hashMap1);
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONObject jSONObject2 = jSONObject0.put("  2Using efaul@Rule", (long) 253);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject2.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      
      String string0 = JSONObject.valueToString(jSONObject2);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject2.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(string0);
      assertEquals("{\"  2Using efaul@Rule\":253,\"alot\":{}}", string0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
  }

  //Test case number: 47
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 81 LOOKUPSWITCH L1030 Case 34 - true
   */

  @Test
  public void test47()  throws Throwable  {
      HashMap<LabeledWord, LabeledWord> hashMap0 = new HashMap<LabeledWord, LabeledWord>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      try {
        double double0 = jSONObject0.getDouble("~G%hoyGt\"m8Rs%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"~G%hoyGt\\\"m8Rs%\"] not found.
         //
      }
  }

  //Test case number: 48
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 78 LOOKUPSWITCH L1030 Case 10 - true
   */

  @Test
  public void test48()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSONObject jSONObject0 = new JSONObject(object0);
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      long long0 = jSONObject0.optLong(",\n", (-140737488364545L));
      assertEquals(1, jSONObject0.length());
      assertEquals((-140737488364545L), long0);
  }

  //Test case number: 49
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I77 Branch 37 IFLE L404 - true
   */

  @Test
  public void test49()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-11.225051522322763));
      assertNotNull(string0);
      assertEquals("-11.225051522322763", string0);
  }

  //Test case number: 50
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 66 IFEQ L829 - true
   */

  @Test
  public void test50()  throws Throwable  {
      LabeledWord labeledWord0 = new LabeledWord();
      assertNull(labeledWord0.value());
      assertEquals(-1, labeledWord0.endPosition());
      assertNull(labeledWord0.word());
      assertEquals(-1, labeledWord0.beginPosition());
      assertNotNull(labeledWord0);
      
      JSONObject jSONObject0 = new JSONObject((Object) labeledWord0);
      assertEquals(1, jSONObject0.length());
      assertNull(labeledWord0.value());
      assertEquals(-1, labeledWord0.endPosition());
      assertNull(labeledWord0.word());
      assertEquals(-1, labeledWord0.beginPosition());
      assertNotNull(jSONObject0);
      
      String string0 = jSONObject0.optString(".", ".");
      assertEquals(1, jSONObject0.length());
      assertNull(labeledWord0.value());
      assertEquals(-1, labeledWord0.endPosition());
      assertNull(labeledWord0.word());
      assertEquals(-1, labeledWord0.beginPosition());
      assertNotNull(string0);
      assertEquals(".", string0);
      
      JSONObject jSONObject1 = jSONObject0.optJSONObject(".");
      assertEquals(1, jSONObject0.length());
      assertNull(labeledWord0.value());
      assertEquals(-1, labeledWord0.endPosition());
      assertNull(labeledWord0.word());
      assertEquals(-1, labeledWord0.beginPosition());
      assertNull(jSONObject1);
  }

  //Test case number: 51
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.isNull(Ljava/lang/String;)Z: root-Branch
   * Goal 2. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I6 Branch 1 IFNULL L115 - true
   */

  @Test
  public void test51()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = jSONObject0.isNull("x");
      assertEquals(0, jSONObject0.length());
      assertTrue(boolean0);
  }

  //Test case number: 52
  /*
   * 12 covered goals:
   * Goal 1. wheel.json.JSONObject.remove(Ljava/lang/String;)Ljava/lang/Object;: root-Branch
   * Goal 2. wheel.json.JSONObject$Null.toString()Ljava/lang/String;: root-Branch
   * Goal 3. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I20 Branch 70 IFNULL L978 - true
   * Goal 4. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I11 Branch 72 IFNULL L999 - true
   * Goal 5. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I91 Branch 85 IF_ICMPNE L1037 - false
   * Goal 6. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I6 Branch 98 IFNULL L1113 - false
   * Goal 7. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I12 Branch 99 IFNE L1113 - true
   * Goal 8. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I34 Branch 100 IF_ICMPGE L1117 - true
   * Goal 9. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I34 Branch 100 IF_ICMPGE L1117 - false
   * Goal 10. wheel.json.JSONObject.toString()Ljava/lang/String;: I19 Branch 101 IFEQ L1140 - true
   * Goal 11. wheel.json.JSONObject.toString()Ljava/lang/String;: I19 Branch 101 IFEQ L1140 - false
   * Goal 12. wheel.json.JSONObject.toString()Ljava/lang/String;: I28 Branch 102 IF_ICMPLE L1141 - true
   */

  @Test
  public void test52()  throws Throwable  {
      HashMap<StringLabel, CategoryWordTag> hashMap0 = new HashMap<StringLabel, CategoryWordTag>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("*tL`(d0Cxo]jaaCM1", (Object) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject1.length());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      Word word0 = new Word("*tL`(d0Cxo]jaaCM1", 233, 233);
      assertEquals("*tL`(d0Cxo]jaaCM1", word0.value());
      assertEquals("*tL`(d0Cxo]jaaCM1", word0.word());
      assertEquals(233, word0.endPosition());
      assertEquals(233, word0.beginPosition());
      assertNotNull(word0);
      
      CategoryWordTag categoryWordTag0 = new CategoryWordTag("*tL`(d0Cxo]jaaCM1", "<", "*tL`(d0Cxo]jaaCM1");
      assertEquals("*tL`(d0Cxo]jaaCM1", categoryWordTag0.value());
      assertEquals("*tL`(d0Cxo]jaaCM1", categoryWordTag0.tag());
      assertEquals(-1, categoryWordTag0.endPosition());
      assertEquals("*tL`(d0Cxo]jaaCM1", categoryWordTag0.category());
      assertEquals("<", categoryWordTag0.word());
      assertEquals(-1, categoryWordTag0.beginPosition());
      assertNotNull(categoryWordTag0);
      assertTrue(categoryWordTag0.printWordTag);
      assertFalse(categoryWordTag0.suppressTerminalDetails);
      
      CategoryWordTag categoryWordTag1 = hashMap0.put((StringLabel) word0, categoryWordTag0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("*tL`(d0Cxo]jaaCM1", word0.value());
      assertEquals("*tL`(d0Cxo]jaaCM1", word0.word());
      assertEquals(233, word0.endPosition());
      assertEquals(233, word0.beginPosition());
      assertEquals("*tL`(d0Cxo]jaaCM1", categoryWordTag0.value());
      assertEquals("*tL`(d0Cxo]jaaCM1", categoryWordTag0.tag());
      assertEquals(-1, categoryWordTag0.endPosition());
      assertEquals("*tL`(d0Cxo]jaaCM1", categoryWordTag0.category());
      assertEquals("<", categoryWordTag0.word());
      assertEquals(-1, categoryWordTag0.beginPosition());
      assertNull(categoryWordTag1);
      assertTrue(categoryWordTag0.printWordTag);
      assertFalse(categoryWordTag0.suppressTerminalDetails);
      
      JSONArray jSONArray1 = jSONArray0.put((Map) hashMap0);
      assertEquals(1, jSONArray0.length());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      JSONArray jSONArray2 = jSONArray1.put(233, (double) 233);
      assertEquals(234, jSONArray0.length());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(234, jSONArray2.length());
      assertEquals(234, jSONArray1.length());
      assertNotNull(jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      
      JSONArray jSONArray3 = jSONObject0.toJSONArray(jSONArray1);
      assertEquals(234, jSONArray0.length());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(234, jSONArray3.length());
      assertEquals(0, jSONObject0.length());
      assertEquals(234, jSONArray1.length());
      assertNotNull(jSONArray3);
      assertFalse(jSONArray0.equals((Object)jSONArray3));
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray0));
      assertFalse(jSONArray1.equals((Object)jSONArray3));
      assertNotSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray3, jSONArray1);
      assertNotSame(jSONArray3, jSONArray2);
      assertNotSame(jSONArray3, jSONArray0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray3);
      
      JSONObject jSONObject2 = jSONArray3.toJSONObject(jSONArray2);
      assertEquals(234, jSONArray0.length());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(234, jSONArray3.length());
      assertEquals(0, jSONObject2.length());
      assertEquals(0, jSONObject0.length());
      assertEquals(234, jSONArray2.length());
      assertEquals(234, jSONArray1.length());
      assertNotNull(jSONObject2);
      assertFalse(jSONArray0.equals((Object)jSONArray3));
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertFalse(jSONArray1.equals((Object)jSONArray3));
      assertNotSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray3, jSONArray1);
      assertNotSame(jSONArray3, jSONArray2);
      assertNotSame(jSONArray3, jSONArray0);
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray3);
  }

  //Test case number: 53
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I23 Branch 93 IFNE L1090 - true
   */

  @Test
  public void test53()  throws Throwable  {
      SeqClassifierFlags seqClassifierFlags0 = new SeqClassifierFlags();
      assertEquals("", seqClassifierFlags0.toString());
      assertNotNull(seqClassifierFlags0);
      assertTrue(seqClassifierFlags0.useViterbi);
      assertFalse(seqClassifierFlags0.useFirstWord);
      assertFalse(seqClassifierFlags0.useVB);
      assertFalse(seqClassifierFlags0.usePrevVB);
      assertFalse(seqClassifierFlags0.usePKPre1);
      assertEquals(0.0, seqClassifierFlags0.featureWeightThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.iobTags);
      assertTrue(seqClassifierFlags0.useWord);
      assertEquals(0, seqClassifierFlags0.ocrFold);
      assertFalse(seqClassifierFlags0.useABSTRFreqDict);
      assertFalse(seqClassifierFlags0.useACR);
      assertFalse(seqClassifierFlags0.useSGD);
      assertFalse(seqClassifierFlags0.useRad2);
      assertFalse(seqClassifierFlags0.useEitherSideDisjunctive);
      assertFalse(seqClassifierFlags0.useRad1);
      assertFalse(seqClassifierFlags0.testObjFunction);
      assertFalse(seqClassifierFlags0.useIsURL);
      assertFalse(seqClassifierFlags0.useFeaturesCpC6gram);
      assertFalse(seqClassifierFlags0.useAdaDiff);
      assertFalse(seqClassifierFlags0.useNeighborNGrams);
      assertEquals(1, seqClassifierFlags0.terminateOnEvalImprovementNumOfEpoch);
      assertEquals(0.0, seqClassifierFlags0.annealingRate, 0.01D);
      assertTrue(seqClassifierFlags0.averagePerceptron);
      assertFalse(seqClassifierFlags0.useChunks);
      assertTrue(seqClassifierFlags0.useCWSFeatures);
      assertFalse(seqClassifierFlags0.mergeTags);
      assertEquals(1.0, seqClassifierFlags0.unsupDropoutScale, 0.01D);
      assertFalse(seqClassifierFlags0.useNPHead);
      assertFalse(seqClassifierFlags0.backpropLopTraining);
      assertFalse(seqClassifierFlags0.groupByOutputClass);
      assertFalse(seqClassifierFlags0.useCorefFeatures);
      assertFalse(seqClassifierFlags0.useNegPKDict4);
      assertEquals(1.0, seqClassifierFlags0.lambdaEN, 0.01D);
      assertFalse(seqClassifierFlags0.justify);
      assertFalse(seqClassifierFlags0.useTaggySequences);
      assertFalse(seqClassifierFlags0.useFilter);
      assertFalse(seqClassifierFlags0.useCTBSuf1);
      assertFalse(seqClassifierFlags0.conjoinShapeNGrams);
      assertEquals(0.5, seqClassifierFlags0.alignmentDecodeThreshold, 0.01D);
      assertEquals(0, seqClassifierFlags0.maxQNItr);
      assertFalse(seqClassifierFlags0.useNegPKDict2);
      assertFalse(seqClassifierFlags0.useNegPKDict3);
      assertFalse(seqClassifierFlags0.useDisjShape);
      assertFalse(seqClassifierFlags0.useProtoFeatures);
      assertEquals(0, seqClassifierFlags0.removeTopN);
      assertEquals(0, seqClassifierFlags0.interimOutputFreq);
      assertFalse(seqClassifierFlags0.useLabelSource);
      assertFalse(seqClassifierFlags0.useOnlySeenWeights);
      assertEquals(1, seqClassifierFlags0.bisequencePriorType);
      assertFalse(seqClassifierFlags0.verboseMode);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesAll);
      assertFalse(seqClassifierFlags0.useBilingualNERPrior);
      assertFalse(seqClassifierFlags0.useCWSWordFeatures);
      assertFalse(seqClassifierFlags0.perceptronDebug);
      assertFalse(seqClassifierFlags0.terminateOnAvgImprovement);
      assertFalse(seqClassifierFlags0.useInPlaceSGD);
      assertFalse(seqClassifierFlags0.useWordTag);
      assertFalse(seqClassifierFlags0.lazyUpdate);
      assertFalse(seqClassifierFlags0.dontExtendTaggy);
      assertEquals(1, seqClassifierFlags0.startFold);
      assertFalse(seqClassifierFlags0.powerAlignProb);
      assertFalse(seqClassifierFlags0.useFREQ);
      assertFalse(seqClassifierFlags0.largeChSegFile);
      assertTrue(seqClassifierFlags0.useExternal);
      assertFalse(seqClassifierFlags0.useMoreTags);
      assertFalse(seqClassifierFlags0.useChunkySequences);
      assertFalse(seqClassifierFlags0.useBerkeleyAlignerForViterbi);
      assertFalse(seqClassifierFlags0.learnENBasedOnCH);
      assertEquals(1.0, seqClassifierFlags0.randomizedRatio, 0.01D);
      assertFalse(seqClassifierFlags0.useSemPrior);
      assertFalse(seqClassifierFlags0.useLemmaAsWord);
      assertFalse(seqClassifierFlags0.groupByHiddenUnit);
      assertFalse(seqClassifierFlags0.announceObjectBankEntries);
      assertEquals(30, seqClassifierFlags0.beamSize);
      assertFalse(seqClassifierFlags0.suppressMidDotPostprocessing);
      assertEquals(0, seqClassifierFlags0.maxRight);
      assertFalse(seqClassifierFlags0.useYetMoreCpCShapes);
      assertFalse(seqClassifierFlags0.strictlyThirdOrder);
      assertFalse(seqClassifierFlags0.useNGrams);
      assertFalse(seqClassifierFlags0.useABGENE);
      assertEquals(1.0, seqClassifierFlags0.sigma, 0.01D);
      assertFalse(seqClassifierFlags0.useHuber);
      assertTrue(seqClassifierFlags0.biAlignmentPriorIsPMI);
      assertFalse(seqClassifierFlags0.useAltGazFeatures);
      assertEquals(0.0, seqClassifierFlags0.priorAlpha, 0.01D);
      assertFalse(seqClassifierFlags0.useScaledSGD);
      assertFalse(seqClassifierFlags0.usePhraseWordSpecialTags);
      assertFalse(seqClassifierFlags0.geDebug);
      assertFalse(seqClassifierFlags0.usePrev);
      assertFalse(seqClassifierFlags0.gradientDebug);
      assertEquals(0, seqClassifierFlags0.featureCountThresh);
      assertFalse(seqClassifierFlags0.dampDDStepSizeWithAlignmentProb);
      assertFalse(seqClassifierFlags0.estimateInitial);
      assertFalse(seqClassifierFlags0.noNeighborConstraints);
      assertFalse(seqClassifierFlags0.secondOrderNonLinear);
      assertFalse(seqClassifierFlags0.useObservedFeaturesOnly);
      assertFalse(seqClassifierFlags0.ocrTrain);
      assertFalse(seqClassifierFlags0.restrictTransitionsTimit);
      assertFalse(seqClassifierFlags0.printLabelValue);
      assertEquals(1, seqClassifierFlags0.numLopExpert);
      assertFalse(seqClassifierFlags0.terminateOnEvalImprovement);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSizeAlignment, 0.01D);
      assertFalse(seqClassifierFlags0.useGENIA);
      assertEquals((-1), seqClassifierFlags0.labelDictionaryCutoff);
      assertFalse(seqClassifierFlags0.useHKChar2);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions);
      assertFalse(seqClassifierFlags0.useDictHK2);
      assertFalse(seqClassifierFlags0.use2W);
      assertFalse(seqClassifierFlags0.sparseOutputLayer);
      assertEquals(1, seqClassifierFlags0.numTimesRemoveTopN);
      assertFalse(seqClassifierFlags0.strictlyFirstOrder);
      assertTrue(seqClassifierFlags0.includeC2EViterbi);
      assertFalse(seqClassifierFlags0.useNERPriorBIO);
      assertFalse(seqClassifierFlags0.doFE);
      assertFalse(seqClassifierFlags0.useMsr);
      assertFalse(seqClassifierFlags0.useIfInteger);
      assertEquals(0, seqClassifierFlags0.evaluateIters);
      assertFalse(seqClassifierFlags0.baseline);
      assertFalse(seqClassifierFlags0.keepEnglishWhitespaces);
      assertFalse(seqClassifierFlags0.useCTBChar2);
      assertFalse(seqClassifierFlags0.tieOutputLayer);
      assertTrue(seqClassifierFlags0.splitDocuments);
      assertFalse(seqClassifierFlags0.useNegHKDict2);
      assertFalse(seqClassifierFlags0.useSeenFeaturesOnly);
      assertFalse(seqClassifierFlags0.useNegHKDict3);
      assertFalse(seqClassifierFlags0.useHardGE);
      assertFalse(seqClassifierFlags0.useEitherSideWord);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions3);
      assertFalse(seqClassifierFlags0.evaluateBackground);
      assertFalse(seqClassifierFlags0.useNegHKDict4);
      assertFalse(seqClassifierFlags0.suppressTestDebug);
      assertFalse(seqClassifierFlags0.useNB);
      assertFalse(seqClassifierFlags0.fakeDataset);
      assertFalse(seqClassifierFlags0.useAdaGradFOBOS);
      assertFalse(seqClassifierFlags0.useNegCTBDict4);
      assertFalse(seqClassifierFlags0.useGenericFeatures);
      assertFalse(seqClassifierFlags0.useNegCTBDict3);
      assertFalse(seqClassifierFlags0.printXML);
      assertFalse(seqClassifierFlags0.useNegCTBDict2);
      assertFalse(seqClassifierFlags0.useTypeSeqs);
      assertFalse(seqClassifierFlags0.readStdin);
      assertFalse(seqClassifierFlags0.useABSTR);
      assertFalse(seqClassifierFlags0.useNPGovernor);
      assertFalse(seqClassifierFlags0.dualDecompAlignment);
      assertEquals(15, seqClassifierFlags0.stochasticBatchSize);
      assertEquals(25, seqClassifierFlags0.QNsize);
      assertFalse(seqClassifierFlags0.useMoreAbbr);
      assertFalse(seqClassifierFlags0.useUnicodeType4gram);
      assertEquals((-1), seqClassifierFlags0.numHiddenUnits);
      assertFalse(seqClassifierFlags0.sighanPostProcessing);
      assertEquals((-1), seqClassifierFlags0.maxIterations);
      assertFalse(seqClassifierFlags0.useWordn);
      assertFalse(seqClassifierFlags0.useOccurrencePatterns);
      assertFalse(seqClassifierFlags0.removeStrictGoodCoNLLDuplicates);
      assertEquals(Integer.MAX_VALUE, seqClassifierFlags0.printFeaturesUpto);
      assertFalse(seqClassifierFlags0.lowerNewgeneThreshold);
      assertFalse(seqClassifierFlags0.splitOnHead);
      assertFalse(seqClassifierFlags0.powerAlignProbAsAddition);
      assertEquals(8, seqClassifierFlags0.maxAllowedChromaticSize);
      assertFalse(seqClassifierFlags0.useNextSequences);
      assertFalse(seqClassifierFlags0.use4Clique);
      assertFalse(seqClassifierFlags0.printFactorTable);
      assertFalse(seqClassifierFlags0.lowercaseNGrams);
      assertTrue(seqClassifierFlags0.useOutputLayer);
      assertFalse(seqClassifierFlags0.useWideDisjunctive);
      assertFalse(seqClassifierFlags0.useNoisyLabel);
      assertTrue(seqClassifierFlags0.useQN);
      assertFalse(seqClassifierFlags0.useKBest);
      assertEquals(10, seqClassifierFlags0.totalDataSlice);
      assertFalse(seqClassifierFlags0.useSymTags);
      assertFalse(seqClassifierFlags0.memoryThrift);
      assertFalse(seqClassifierFlags0.useReverse);
      assertFalse(seqClassifierFlags0.useEntityTypes);
      assertFalse(seqClassifierFlags0.tuneSGD);
      assertFalse(seqClassifierFlags0.groupByInput);
      assertEquals(0.0, seqClassifierFlags0.alignmentPruneThreshold, 0.01D);
      assertTrue(seqClassifierFlags0.applyNERPenalty);
      assertFalse(seqClassifierFlags0.useNumberFeature);
      assertFalse(seqClassifierFlags0.prependEmbedding);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions2);
      assertFalse(seqClassifierFlags0.matchNERIncentive);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions3);
      assertFalse(seqClassifierFlags0.strictlyZeroethOrder);
      assertFalse(seqClassifierFlags0.evaluateTrain);
      assertFalse(seqClassifierFlags0.printTrainLabels);
      assertEquals(1000, seqClassifierFlags0.wordSegBeamSize);
      assertEquals((-1), seqClassifierFlags0.samplingSpeedUpThreshold);
      assertTrue(seqClassifierFlags0.useDenero);
      assertFalse(seqClassifierFlags0.useGoodForNamesCpC);
      assertTrue(seqClassifierFlags0.keepOBInMemory);
      assertEquals((-1), seqClassifierFlags0.SGDPasses);
      assertFalse(seqClassifierFlags0.useAdaDelta);
      assertFalse(seqClassifierFlags0.usePosition);
      assertEquals(100, seqClassifierFlags0.numSamples);
      assertFalse(seqClassifierFlags0.numberEquivalenceDistSim);
      assertFalse(seqClassifierFlags0.useWordShapeGaz);
      assertFalse(seqClassifierFlags0.usePk);
      assertFalse(seqClassifierFlags0.strictlySecondOrder);
      assertFalse(seqClassifierFlags0.casedDistSim);
      assertFalse(seqClassifierFlags0.useGEforSup);
      assertFalse(seqClassifierFlags0.augmentedDateChars);
      assertFalse(seqClassifierFlags0.useCRFforUnsup);
      assertEquals(3, seqClassifierFlags0.charHalfWindow);
      assertFalse(seqClassifierFlags0.verboseForTrueCasing);
      assertFalse(seqClassifierFlags0.useStochasticQN);
      assertEquals(0.0, seqClassifierFlags0.removeTopNPercent, 0.01D);
      assertFalse(seqClassifierFlags0.useUnicodeType5gram);
      assertFalse(seqClassifierFlags0.useSMD);
      assertFalse(seqClassifierFlags0.usePKChar2);
      assertEquals(0, seqClassifierFlags0.maxDocSize);
      assertEquals(0, seqClassifierFlags0.numTimesPruneFeatures);
      assertTrue(seqClassifierFlags0.initViterbi);
      assertFalse(seqClassifierFlags0.useTitle);
      assertFalse(seqClassifierFlags0.removeBackgroundSingletonFeatures);
      assertFalse(seqClassifierFlags0.groupByFeatureTemplate);
      assertFalse(seqClassifierFlags0.useWordPairs);
      assertFalse(seqClassifierFlags0.useUnicodeType);
      assertFalse(seqClassifierFlags0.useTOK);
      assertFalse(seqClassifierFlags0.useUnicodeBlock);
      assertFalse(seqClassifierFlags0.useLC);
      assertFalse(seqClassifierFlags0.cleanGazette);
      assertFalse(seqClassifierFlags0.useMinimalAbbr1);
      assertFalse(seqClassifierFlags0.useWord2);
      assertFalse(seqClassifierFlags0.useWord1);
      assertFalse(seqClassifierFlags0.useWord4);
      assertFalse(seqClassifierFlags0.useWord3);
      assertFalse(seqClassifierFlags0.noMidNGrams);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSize, 0.01D);
      assertEquals(0.1, seqClassifierFlags0.initialGain, 0.01D);
      assertFalse(seqClassifierFlags0.saveFeatureIndexToDisk);
      assertFalse(seqClassifierFlags0.useSGDtoQN);
      assertFalse(seqClassifierFlags0.usePrediction2);
      assertFalse(seqClassifierFlags0.normalizeTimex);
      assertFalse(seqClassifierFlags0.useKL);
      assertFalse(seqClassifierFlags0.outputIterationsToFile);
      assertEquals(2, seqClassifierFlags0.maxLeft);
      assertFalse(seqClassifierFlags0.pctSegmenterLenAdjust);
      assertEquals(0, seqClassifierFlags0.numOfSlices);
      assertEquals(0, seqClassifierFlags0.multiThreadClassifier);
      assertFalse(seqClassifierFlags0.intern2);
      assertFalse(seqClassifierFlags0.nonLinearCRF);
      assertEquals(0.9, seqClassifierFlags0.selfTrainConfidenceThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useMoreGazFeatures);
      assertFalse(seqClassifierFlags0.doFeatureDiscovery);
      assertFalse(seqClassifierFlags0.transitionEdgeOnly);
      assertFalse(seqClassifierFlags0.dump);
      assertEquals(0.0, seqClassifierFlags0.softmaxTieLambda, 0.01D);
      assertFalse(seqClassifierFlags0.timitDatum);
      assertFalse(seqClassifierFlags0.useSegmentation);
      assertEquals(0.1, seqClassifierFlags0.initRate, 0.01D);
      assertFalse(seqClassifierFlags0.useAbbr1);
      assertFalse(seqClassifierFlags0.useLongSequences);
      assertFalse(seqClassifierFlags0.useABSTRFreq);
      assertFalse(seqClassifierFlags0.useFloat);
      assertTrue(seqClassifierFlags0.separateASCIIandRange);
      assertFalse(seqClassifierFlags0.useCommonWordsFeature);
      assertFalse(seqClassifierFlags0.useQuartic);
      assertEquals(0.0, seqClassifierFlags0.l1reg, 0.01D);
      assertFalse(seqClassifierFlags0.expandMidDot);
      assertFalse(seqClassifierFlags0.useDualDecomp);
      assertFalse(seqClassifierFlags0.useBeginSent);
      assertFalse(seqClassifierFlags0.useDictCTB2);
      assertFalse(seqClassifierFlags0.doAdaptation);
      assertEquals(1, seqClassifierFlags0.multiThreadGrad);
      assertEquals(0, seqClassifierFlags0.numOfFeatureSlices);
      assertEquals(25, seqClassifierFlags0.QNsize2);
      assertFalse(seqClassifierFlags0.useLemmas);
      assertTrue(seqClassifierFlags0.learnCHBasedOnEN);
      assertFalse(seqClassifierFlags0.useDisjunctive);
      assertFalse(seqClassifierFlags0.includeFullCRFInLOP);
      assertFalse(seqClassifierFlags0.usePrevSequences);
      assertFalse(seqClassifierFlags0.useRadical);
      assertFalse(seqClassifierFlags0.useShapeConjunctions);
      assertFalse(seqClassifierFlags0.useMinimalAbbr);
      assertFalse(seqClassifierFlags0.subCWGaz);
      assertFalse(seqClassifierFlags0.useGazettes);
      assertEquals(1.0, seqClassifierFlags0.dropoutScale, 0.01D);
      assertFalse(seqClassifierFlags0.useAcqPrior);
      assertFalse(seqClassifierFlags0.useEntityTypeSequences);
      assertEquals(1, seqClassifierFlags0.numRuns);
      assertEquals(0, seqClassifierFlags0.multiThreadGibbs);
      assertEquals(1, seqClassifierFlags0.endFold);
      assertFalse(seqClassifierFlags0.useSentenceNumber);
      assertFalse(seqClassifierFlags0.useOrdinal);
      assertFalse(seqClassifierFlags0.useOutDict2);
      assertFalse(seqClassifierFlags0.useObservedSequencesOnly);
      assertFalse(seqClassifierFlags0.dehyphenateNGrams);
      assertFalse(seqClassifierFlags0.blockInitialize);
      assertFalse(seqClassifierFlags0.useRad2b);
      assertFalse(seqClassifierFlags0.useSuf);
      assertTrue(seqClassifierFlags0.useMemoryEvaluator);
      assertFalse(seqClassifierFlags0.useChromaticSampling);
      assertFalse(seqClassifierFlags0.usePrevNextLemmas);
      assertEquals(10, seqClassifierFlags0.totalFeatureSlice);
      assertFalse(seqClassifierFlags0.useBagOfWords);
      assertFalse(seqClassifierFlags0.keepAllWhitespaces);
      assertFalse(seqClassifierFlags0.useASBCPre1);
      assertEquals(4, seqClassifierFlags0.disjunctionWidth);
      assertEquals(100, seqClassifierFlags0.printClassifierParam);
      assertFalse(seqClassifierFlags0.testVariance);
      assertFalse(seqClassifierFlags0.hardcodeSoftmaxOutputWeights);
      assertEquals(0.1, seqClassifierFlags0.gainSGD, 0.01D);
      assertFalse(seqClassifierFlags0.factorInBiEdgePotential);
      assertEquals(1, seqClassifierFlags0.CRForder);
      assertEquals(0.0, seqClassifierFlags0.pctSegmenterScale, 0.01D);
      assertFalse(seqClassifierFlags0.combo);
      assertFalse(seqClassifierFlags0.useShapeStrings1);
      assertFalse(seqClassifierFlags0.doGibbs);
      assertFalse(seqClassifierFlags0.useShapeStrings5);
      assertTrue(seqClassifierFlags0.useSequences);
      assertFalse(seqClassifierFlags0.useShapeStrings4);
      assertEquals(1, seqClassifierFlags0.selfTrainWindowSize);
      assertFalse(seqClassifierFlags0.printWeights);
      assertFalse(seqClassifierFlags0.useDict2);
      assertFalse(seqClassifierFlags0.useYear);
      assertTrue(seqClassifierFlags0.useHiddenLayer);
      assertEquals(0.95, seqClassifierFlags0.adaDeltaRho, 0.01D);
      assertFalse(seqClassifierFlags0.useBoundarySequences);
      assertFalse(seqClassifierFlags0.normalize);
      assertFalse(seqClassifierFlags0.useHk);
      assertFalse(seqClassifierFlags0.useNERPrior);
      assertEquals(1, seqClassifierFlags0.numFolds);
      assertFalse(seqClassifierFlags0.useSigmoid);
      assertFalse(seqClassifierFlags0.useTypeSeqs2);
      assertEquals(0.001, seqClassifierFlags0.adaGradEps, 0.01D);
      assertFalse(seqClassifierFlags0.useEmbedding);
      assertFalse(seqClassifierFlags0.useTypeSeqs3);
      assertFalse(seqClassifierFlags0.useTrainLexicon);
      assertFalse(seqClassifierFlags0.testHessSamples);
      assertFalse(seqClassifierFlags0.useSum);
      assertFalse(seqClassifierFlags0.useAbbr);
      assertFalse(seqClassifierFlags0.useShapeStrings3);
      assertFalse(seqClassifierFlags0.printNR);
      assertFalse(seqClassifierFlags0.useTags);
      assertFalse(seqClassifierFlags0.useNextRealWord);
      assertFalse(seqClassifierFlags0.useMUCFeatures);
      assertEquals(50, seqClassifierFlags0.SGD2QNhessSamples);
      assertFalse(seqClassifierFlags0.cacheNGrams);
      assertEquals(1.0, seqClassifierFlags0.alignDDAlpha, 0.01D);
      assertFalse(seqClassifierFlags0.deleteBlankLines);
      assertEquals((-1), seqClassifierFlags0.QNPasses);
      assertFalse(seqClassifierFlags0.useURLSequences);
      assertFalse(seqClassifierFlags0.useEntityRule);
      assertFalse(seqClassifierFlags0.checkGradient);
      assertEquals(0, seqClassifierFlags0.nerSkipFirstK);
      assertEquals(0.01, seqClassifierFlags0.epsilon, 0.01D);
      assertEquals(1, seqClassifierFlags0.kBest);
      assertEquals(0.0, seqClassifierFlags0.priorLambda, 0.01D);
      assertFalse(seqClassifierFlags0.softmaxOutputLayer);
      assertFalse(seqClassifierFlags0.useDictPK2);
      assertEquals((-1), seqClassifierFlags0.wordShape);
      assertFalse(seqClassifierFlags0.useClassFeature);
      assertEquals(1.0E-4, seqClassifierFlags0.tolerance, 0.01D);
      assertFalse(seqClassifierFlags0.useRule2);
      assertFalse(seqClassifierFlags0.useParenMatching);
      assertEquals(0, seqClassifierFlags0.dualDecompMaxItr);
      assertFalse(seqClassifierFlags0.useAs);
      assertFalse(seqClassifierFlags0.dropoutApprox);
      assertFalse(seqClassifierFlags0.addBiasToEmbedding);
      assertFalse(seqClassifierFlags0.useHKSuf1);
      assertFalse(seqClassifierFlags0.useFeaturesC4gram);
      assertEquals((-1), seqClassifierFlags0.arbitraryInputLayerSize);
      assertFalse(seqClassifierFlags0.addCapitalFeatures);
      assertFalse(seqClassifierFlags0.regularizeSoftmaxTieParam);
      assertEquals(1, seqClassifierFlags0.nerSlowerTimes);
      assertTrue(seqClassifierFlags0.useInternal);
      assertFalse(seqClassifierFlags0.purgeDatasets);
      assertFalse(seqClassifierFlags0.useReverseAffix);
      assertFalse(seqClassifierFlags0.useMSRChar2);
      assertFalse(seqClassifierFlags0.useDictASBC2);
      assertEquals(Double.POSITIVE_INFINITY, seqClassifierFlags0.searchGraphPrune, 0.01D);
      assertEquals(2, seqClassifierFlags0.CRFwindow);
      assertFalse(seqClassifierFlags0.useASBCSuf1);
      assertFalse(seqClassifierFlags0.factorInAlignmentProb);
      assertFalse(seqClassifierFlags0.useDistSim);
      assertEquals(0, seqClassifierFlags0.startEvaluateIters);
      assertEquals(0, seqClassifierFlags0.featureCountThreshold);
      assertFalse(seqClassifierFlags0.useMidDotShape);
      assertFalse(seqClassifierFlags0.useHybrid);
      assertFalse(seqClassifierFlags0.useBigramInTwoClique);
      assertFalse(seqClassifierFlags0.usePhraseFeatures);
      assertEquals((-1), seqClassifierFlags0.purgeFeatures);
      assertFalse(seqClassifierFlags0.useFeaturesCpC4gram);
      assertFalse(seqClassifierFlags0.normalizeTerms);
      assertFalse(seqClassifierFlags0.booleanFeatures);
      assertFalse(seqClassifierFlags0.useTaggySequencesShapeInteraction);
      assertFalse(seqClassifierFlags0.useTopics);
      assertFalse(seqClassifierFlags0.useRobustQN);
      assertFalse(seqClassifierFlags0.sloppyGazette);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesBigram);
      assertFalse(seqClassifierFlags0.useChPos);
      assertFalse(seqClassifierFlags0.useIsDateRange);
      assertFalse(seqClassifierFlags0.makeConsistent);
      assertFalse(seqClassifierFlags0.usePrediction);
      assertFalse(seqClassifierFlags0.retainEntitySubclassification);
      assertFalse(seqClassifierFlags0.selfTest);
      assertFalse(seqClassifierFlags0.useGazFeatures);
      assertFalse(seqClassifierFlags0.useLastRealWord);
      assertFalse(seqClassifierFlags0.useRandomSeed);
      assertEquals(0, seqClassifierFlags0.hybridCutoffIteration);
      assertFalse(seqClassifierFlags0.useBerkeleyCompetitivePosterior);
      assertFalse(seqClassifierFlags0.iobWrapper);
      assertFalse(seqClassifierFlags0.useOWLQN);
      assertEquals(1, seqClassifierFlags0.featureThreshold);
      assertFalse(seqClassifierFlags0.usePhraseWordTags);
      assertFalse(seqClassifierFlags0.useRule);
      assertEquals(0.0, seqClassifierFlags0.featureDiffThresh, 0.01D);
      assertFalse(seqClassifierFlags0.intern);
      assertFalse(seqClassifierFlags0.printProbs);
      assertFalse(seqClassifierFlags0.useNext);
      assertEquals(0.0, seqClassifierFlags0.newgeneThreshold, 0.01D);
      assertEquals(1.0, seqClassifierFlags0.adaptSigma, 0.01D);
      assertFalse(seqClassifierFlags0.useFeaturesC6gram);
      assertFalse(seqClassifierFlags0.dualDecompNotBIO);
      assertFalse(seqClassifierFlags0.useNegASBCDict3);
      assertEquals((-1), seqClassifierFlags0.tuneSampleSize);
      assertFalse(seqClassifierFlags0.useNegASBCDict2);
      assertFalse(seqClassifierFlags0.useSymWordPairs);
      assertFalse(seqClassifierFlags0.useHKPre1);
      assertEquals(1, seqClassifierFlags0.numDatasetsPerFile);
      assertFalse(seqClassifierFlags0.useUnknown);
      assertFalse(seqClassifierFlags0.useFeaturesC5gram);
      assertFalse(seqClassifierFlags0.useNegASBCDict4);
      assertFalse(seqClassifierFlags0.strictGoodCoNLL);
      assertEquals((-1), seqClassifierFlags0.maxNGramLeng);
      assertTrue(seqClassifierFlags0.restrictLabels);
      assertFalse(seqClassifierFlags0.useWordnetFeatures);
      assertFalse(seqClassifierFlags0.checkNameList);
      assertFalse(seqClassifierFlags0.useANTE);
      assertEquals(0, seqClassifierFlags0.scaledSGDMethod);
      assertFalse(seqClassifierFlags0.twoStage);
      assertFalse(seqClassifierFlags0.useTypeySequences);
      assertFalse(seqClassifierFlags0.useHeadGov);
      assertEquals(0.0, seqClassifierFlags0.dropoutRate, 0.01D);
      assertFalse(seqClassifierFlags0.useDictleng);
      assertFalse(seqClassifierFlags0.useShapeStrings);
      assertFalse(seqClassifierFlags0.weightByEntropy);
      assertFalse(seqClassifierFlags0.randomLopFeatureSplit);
      assertTrue(seqClassifierFlags0.initWithPosterior);
      assertFalse(seqClassifierFlags0.useWEBFreqDict);
      assertFalse(seqClassifierFlags0.appendLC);
      assertFalse(seqClassifierFlags0.useFeaturesCpC5gram);
      assertFalse(seqClassifierFlags0.initWithNERPosterior);
      assertEquals(1.0, seqClassifierFlags0.lambdaCH, 0.01D);
      assertFalse(seqClassifierFlags0.usePhraseWords);
      assertFalse(seqClassifierFlags0.useBig5);
      assertFalse(seqClassifierFlags0.useNoisyNonNoisyFeature);
      assertFalse(seqClassifierFlags0.useExtraTaggySequences);
      assertFalse(seqClassifierFlags0.useNextVB);
      assertFalse(seqClassifierFlags0.useNegDict2);
      assertFalse(seqClassifierFlags0.printFirstOrderProbs);
      assertFalse(seqClassifierFlags0.useWEB);
      assertFalse(seqClassifierFlags0.randomLopWeights);
      assertFalse(seqClassifierFlags0.useNegDict3);
      assertFalse(seqClassifierFlags0.useNegDict4);
      assertFalse(seqClassifierFlags0.useUniformPrior);
      assertFalse(seqClassifierFlags0.useCTBPre1);
      assertFalse(seqClassifierFlags0.alternateTraining);
      assertFalse(seqClassifierFlags0.useASBCChar2);
      assertFalse(seqClassifierFlags0.noEdgeFeature);
      assertFalse(seqClassifierFlags0.keepEmptySentences);
      assertFalse(seqClassifierFlags0.pctSegmenterScaleByCRF);
      assertEquals(10, seqClassifierFlags0.wideDisjunctionWidth);
      assertFalse(seqClassifierFlags0.skipOutputRegularization);
      assertFalse(seqClassifierFlags0.dualDecompDebug);
      assertEquals(1, seqClassifierFlags0.selfTrainIterations);
      assertEquals(1, seqClassifierFlags0.multiThreadPerceptron);
      assertFalse(seqClassifierFlags0.bioSubmitOutput);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions2);
      assertTrue(seqClassifierFlags0.useKnownLCWords);
      assertFalse(seqClassifierFlags0.usePKSuf1);
      assertFalse(seqClassifierFlags0.greekifyNGrams);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions3);
      assertFalse(seqClassifierFlags0.useSequentialScanSampling);
      assertEquals(1, seqClassifierFlags0.numStartLayers);
      assertEquals(8, seqClassifierFlags0.distSimMaxBits);
      assertFalse(seqClassifierFlags0.usePre);
      assertFalse(seqClassifierFlags0.useDisjunctiveShapeInteraction);
      assertFalse(seqClassifierFlags0.useGazettePhrases);
      
      try {
        String string0 = JSONObject.numberToString((Number) Double.POSITIVE_INFINITY);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
      }
  }

  //Test case number: 54
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I31 Branch 58 IFLE L670 - true
   * Goal 2. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I11 Branch 103 IFNE L1190 - true
   * Goal 3. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I41 Branch 104 IF_ICMPNE L1197 - false
   * Goal 4. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I62 Branch 125 IFEQ L1317 - false
   */

  @Test
  public void test54()  throws Throwable  {
      HashMap<String, IndexedWord> hashMap0 = new HashMap<String, IndexedWord>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("<ft", (-1336L));
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      String string0 = jSONObject1.toString(0, 0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(string0);
      assertEquals("{\"<ft\": -1336}", string0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  //Test case number: 55
  /*
   * 8 covered goals:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I7 Branch 31 IFNE L393 - false
   * Goal 2. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I13 Branch 32 IFEQ L393 - true
   * Goal 3. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I31 Branch 33 IFLE L400 - false
   * Goal 4. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I38 Branch 34 IFGE L400 - false
   * Goal 5. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I45 Branch 35 IFGE L400 - false
   * Goal 6. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I54 Branch 36 IFLE L401 - true
   * Goal 7. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I54 Branch 36 IFLE L401 - false
   * Goal 8. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I77 Branch 37 IFLE L404 - false
   */

  @Test
  public void test55()  throws Throwable  {
      String string0 = JSONObject.doubleToString(20.0);
      assertNotNull(string0);
      assertEquals("20", string0);
  }

  //Test case number: 56
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.optInt(Ljava/lang/String;)I: root-Branch
   * Goal 2. wheel.json.JSONObject.put(Ljava/lang/String;Z)Lwheel/json/JSONObject;: I8 Branch 68 IFEQ L902 - false
   * Goal 3. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I12 Branch 74 IFNE L1015 - false
   */

  @Test
  public void test56()  throws Throwable  {
      HashMap<Integer, CategoryWordTag> hashMap0 = new HashMap<Integer, CategoryWordTag>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("", true);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      int int0 = jSONObject1.optInt("");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(0, int0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  //Test case number: 57
  /*
   * 7 covered goals:
   * Goal 1. wheel.json.JSONObject.optBoolean(Ljava/lang/String;Z)Z: root-Branch
   * Goal 2. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 26 IFNONNULL L346 - true
   * Goal 3. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I52 Branch 28 IFEQ L350 - true
   * Goal 4. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I14 Branch 39 IFNE L439 - false
   * Goal 5. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I20 Branch 40 IFEQ L439 - true
   * Goal 6. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I41 Branch 42 IFNE L443 - false
   * Goal 7. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I47 Branch 43 IFEQ L443 - true
   */

  @Test
  public void test57()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("`)2X9PWJ=u}", (Map) hashMap0);
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      CoreLabelTokenFactory coreLabelTokenFactory0 = new CoreLabelTokenFactory();
      assertNotNull(coreLabelTokenFactory0);
      
      CoreLabel coreLabel0 = coreLabelTokenFactory0.makeToken("`)2X9PWJ=u}", "`)2X9PWJ=u}", (-4188), (-4188));
      assertNull(coreLabel0.docID());
      assertEquals(0, coreLabel0.copyCount());
      assertEquals(-4188, coreLabel0.beginPosition());
      assertEquals(-8376, coreLabel0.endPosition());
      assertEquals("`)2X9PWJ=u}", coreLabel0.originalText());
      assertEquals("", coreLabel0.before());
      assertNull(coreLabel0.lemma());
      assertEquals(-1, coreLabel0.index());
      assertEquals("`)2X9PWJ=u}", coreLabel0.word());
      assertNull(coreLabel0.tag());
      assertNull(coreLabel0.category());
      assertEquals(5, coreLabel0.size());
      assertEquals("", coreLabel0.after());
      assertEquals("`)2X9PWJ=u}", coreLabel0.value());
      assertNull(coreLabel0.ner());
      assertEquals(-1, coreLabel0.sentIndex());
      assertNotNull(coreLabel0);
      
      boolean boolean0 = jSONObject0.optBoolean("`)2X9PWJ=u}", false);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
      assertSame(jSONObject0, jSONObject1);
      
      JSONObject jSONObject2 = jSONObject1.accumulate("`)2X9PWJ=u}", (Object) coreLabel0);
      assertEquals(1, jSONObject2.length());
      assertNull(coreLabel0.docID());
      assertEquals(0, coreLabel0.copyCount());
      assertEquals(-4188, coreLabel0.beginPosition());
      assertEquals(-8376, coreLabel0.endPosition());
      assertEquals("`)2X9PWJ=u}", coreLabel0.originalText());
      assertEquals("", coreLabel0.before());
      assertNull(coreLabel0.lemma());
      assertEquals(-1, coreLabel0.index());
      assertEquals("`)2X9PWJ=u}", coreLabel0.word());
      assertNull(coreLabel0.tag());
      assertNull(coreLabel0.category());
      assertEquals(5, coreLabel0.size());
      assertEquals("", coreLabel0.after());
      assertEquals("`)2X9PWJ=u}", coreLabel0.value());
      assertNull(coreLabel0.ner());
      assertEquals(-1, coreLabel0.sentIndex());
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
  }

  //Test case number: 58
  /*
   * 7 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/lang/String;)V: root-Branch
   * Goal 2. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I6 Branch 57 IFNONNULL L662 - true
   * Goal 3. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I31 Branch 58 IFLE L670 - false
   * Goal 4. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I38 Branch 59 IFGE L670 - false
   * Goal 5. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I45 Branch 60 IFGE L670 - false
   * Goal 6. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I54 Branch 61 IFLE L671 - true
   * Goal 7. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I77 Branch 62 IFLE L674 - true
   */

  @Test
  public void test58()  throws Throwable  {
      SeqClassifierFlags seqClassifierFlags0 = new SeqClassifierFlags();
      assertEquals("", seqClassifierFlags0.toString());
      assertNotNull(seqClassifierFlags0);
      assertEquals(50, seqClassifierFlags0.SGD2QNhessSamples);
      assertTrue(seqClassifierFlags0.useSequences);
      assertFalse(seqClassifierFlags0.useBoundarySequences);
      assertFalse(seqClassifierFlags0.combo);
      assertFalse(seqClassifierFlags0.useGoodForNamesCpC);
      assertFalse(seqClassifierFlags0.casedDistSim);
      assertFalse(seqClassifierFlags0.useTypeySequences);
      assertFalse(seqClassifierFlags0.useNoisyNonNoisyFeature);
      assertFalse(seqClassifierFlags0.useTypeSeqs3);
      assertFalse(seqClassifierFlags0.useTypeSeqs2);
      assertFalse(seqClassifierFlags0.useCRFforUnsup);
      assertEquals(1.0E-4, seqClassifierFlags0.tolerance, 0.01D);
      assertFalse(seqClassifierFlags0.printWeights);
      assertFalse(seqClassifierFlags0.greekifyNGrams);
      assertFalse(seqClassifierFlags0.useTrainLexicon);
      assertFalse(seqClassifierFlags0.randomLopFeatureSplit);
      assertFalse(seqClassifierFlags0.useWEBFreqDict);
      assertFalse(seqClassifierFlags0.useDictleng);
      assertFalse(seqClassifierFlags0.useHk);
      assertFalse(seqClassifierFlags0.useNextRealWord);
      assertFalse(seqClassifierFlags0.useMUCFeatures);
      assertFalse(seqClassifierFlags0.useDict2);
      assertFalse(seqClassifierFlags0.testHessSamples);
      assertFalse(seqClassifierFlags0.removeBackgroundSingletonFeatures);
      assertFalse(seqClassifierFlags0.deleteBlankLines);
      assertFalse(seqClassifierFlags0.includeFullCRFInLOP);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSize, 0.01D);
      assertEquals((-1), seqClassifierFlags0.arbitraryInputLayerSize);
      assertFalse(seqClassifierFlags0.usePrediction2);
      assertFalse(seqClassifierFlags0.useParenMatching);
      assertEquals(0.0, seqClassifierFlags0.removeTopNPercent, 0.01D);
      assertFalse(seqClassifierFlags0.useWEB);
      assertFalse(seqClassifierFlags0.useDictCTB2);
      assertFalse(seqClassifierFlags0.useTopics);
      assertEquals(0, seqClassifierFlags0.dualDecompMaxItr);
      assertFalse(seqClassifierFlags0.groupByFeatureTemplate);
      assertEquals(0.1, seqClassifierFlags0.initialGain, 0.01D);
      assertEquals(0.0, seqClassifierFlags0.priorLambda, 0.01D);
      assertFalse(seqClassifierFlags0.bioSubmitOutput);
      assertFalse(seqClassifierFlags0.usePre);
      assertFalse(seqClassifierFlags0.transitionEdgeOnly);
      assertFalse(seqClassifierFlags0.useQuartic);
      assertFalse(seqClassifierFlags0.useDisjunctiveShapeInteraction);
      assertFalse(seqClassifierFlags0.strictlySecondOrder);
      assertFalse(seqClassifierFlags0.useFloat);
      assertFalse(seqClassifierFlags0.addBiasToEmbedding);
      assertFalse(seqClassifierFlags0.useASBCSuf1);
      assertFalse(seqClassifierFlags0.dropoutApprox);
      assertFalse(seqClassifierFlags0.useAs);
      assertFalse(seqClassifierFlags0.regularizeSoftmaxTieParam);
      assertFalse(seqClassifierFlags0.dump);
      assertFalse(seqClassifierFlags0.useSeenFeaturesOnly);
      assertFalse(seqClassifierFlags0.useNegHKDict2);
      assertFalse(seqClassifierFlags0.useHardGE);
      assertEquals(0.0, seqClassifierFlags0.l1reg, 0.01D);
      assertFalse(seqClassifierFlags0.useNegCTBDict2);
      assertFalse(seqClassifierFlags0.useRadical);
      assertFalse(seqClassifierFlags0.useChPos);
      assertFalse(seqClassifierFlags0.removeStrictGoodCoNLLDuplicates);
      assertFalse(seqClassifierFlags0.fakeDataset);
      assertFalse(seqClassifierFlags0.useNegCTBDict4);
      assertFalse(seqClassifierFlags0.useNegCTBDict3);
      assertFalse(seqClassifierFlags0.useSegmentation);
      assertFalse(seqClassifierFlags0.useNB);
      assertFalse(seqClassifierFlags0.useNegHKDict3);
      assertFalse(seqClassifierFlags0.useNegHKDict4);
      assertFalse(seqClassifierFlags0.intern2);
      assertFalse(seqClassifierFlags0.retainEntitySubclassification);
      assertFalse(seqClassifierFlags0.useHybrid);
      assertFalse(seqClassifierFlags0.useWordn);
      assertFalse(seqClassifierFlags0.readStdin);
      assertFalse(seqClassifierFlags0.dualDecompAlignment);
      assertFalse(seqClassifierFlags0.useShapeConjunctions);
      assertFalse(seqClassifierFlags0.useGazettes);
      assertEquals(25, seqClassifierFlags0.QNsize);
      assertFalse(seqClassifierFlags0.useLemmas);
      assertEquals(25, seqClassifierFlags0.QNsize2);
      assertFalse(seqClassifierFlags0.useUnicodeBlock);
      assertTrue(seqClassifierFlags0.learnCHBasedOnEN);
      assertFalse(seqClassifierFlags0.useBeginSent);
      assertFalse(seqClassifierFlags0.expandMidDot);
      assertFalse(seqClassifierFlags0.normalizeTerms);
      assertFalse(seqClassifierFlags0.evaluateBackground);
      assertFalse(seqClassifierFlags0.useSuf);
      assertFalse(seqClassifierFlags0.useEntityTypeSequences);
      assertEquals(0, seqClassifierFlags0.numTimesPruneFeatures);
      assertFalse(seqClassifierFlags0.useAcqPrior);
      assertFalse(seqClassifierFlags0.useRad2b);
      assertFalse(seqClassifierFlags0.usePhraseWordTags);
      assertEquals(0, seqClassifierFlags0.hybridCutoffIteration);
      assertEquals(10, seqClassifierFlags0.totalDataSlice);
      assertFalse(seqClassifierFlags0.subCWGaz);
      assertFalse(seqClassifierFlags0.dehyphenateNGrams);
      assertEquals(1, seqClassifierFlags0.endFold);
      assertFalse(seqClassifierFlags0.doAdaptation);
      assertTrue(seqClassifierFlags0.useQN);
      assertFalse(seqClassifierFlags0.useWideDisjunctive);
      assertFalse(seqClassifierFlags0.useNoisyLabel);
      assertFalse(seqClassifierFlags0.blockInitialize);
      assertEquals(0, seqClassifierFlags0.multiThreadGibbs);
      assertEquals(0.0, seqClassifierFlags0.dropoutRate, 0.01D);
      assertFalse(seqClassifierFlags0.useReverse);
      assertFalse(seqClassifierFlags0.useBagOfWords);
      assertEquals(10, seqClassifierFlags0.totalFeatureSlice);
      assertFalse(seqClassifierFlags0.tuneSGD);
      assertEquals((-1), seqClassifierFlags0.samplingSpeedUpThreshold);
      assertEquals(0.1, seqClassifierFlags0.gainSGD, 0.01D);
      assertFalse(seqClassifierFlags0.useSentenceNumber);
      assertFalse(seqClassifierFlags0.useOrdinal);
      assertFalse(seqClassifierFlags0.useAbbr1);
      assertFalse(seqClassifierFlags0.testVariance);
      assertEquals(100, seqClassifierFlags0.printClassifierParam);
      assertFalse(seqClassifierFlags0.useSymWordPairs);
      assertFalse(seqClassifierFlags0.prependEmbedding);
      assertEquals((-1), seqClassifierFlags0.maxNGramLeng);
      assertEquals(0.0, seqClassifierFlags0.alignmentPruneThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.keepAllWhitespaces);
      assertFalse(seqClassifierFlags0.useOutDict2);
      assertFalse(seqClassifierFlags0.useLastRealWord);
      assertEquals(0.0, seqClassifierFlags0.pctSegmenterScale, 0.01D);
      assertFalse(seqClassifierFlags0.useNERPrior);
      assertTrue(seqClassifierFlags0.useHiddenLayer);
      assertFalse(seqClassifierFlags0.usePk);
      assertFalse(seqClassifierFlags0.useFREQ);
      assertFalse(seqClassifierFlags0.baseline);
      assertEquals((-1), seqClassifierFlags0.SGDPasses);
      assertEquals(1, seqClassifierFlags0.startFold);
      assertFalse(seqClassifierFlags0.normalize);
      assertEquals(1, seqClassifierFlags0.numFolds);
      assertFalse(seqClassifierFlags0.usePKChar2);
      assertEquals(0, seqClassifierFlags0.maxDocSize);
      assertTrue(seqClassifierFlags0.initViterbi);
      assertFalse(seqClassifierFlags0.usePrev);
      assertFalse(seqClassifierFlags0.useMoreTags);
      assertFalse(seqClassifierFlags0.useStochasticQN);
      assertFalse(seqClassifierFlags0.useOWLQN);
      assertFalse(seqClassifierFlags0.powerAlignProb);
      assertFalse(seqClassifierFlags0.suppressMidDotPostprocessing);
      assertFalse(seqClassifierFlags0.useNGrams);
      assertFalse(seqClassifierFlags0.useURLSequences);
      assertFalse(seqClassifierFlags0.restrictTransitionsTimit);
      assertFalse(seqClassifierFlags0.cacheNGrams);
      assertFalse(seqClassifierFlags0.noNeighborConstraints);
      assertFalse(seqClassifierFlags0.useWord4);
      assertFalse(seqClassifierFlags0.useWord3);
      assertFalse(seqClassifierFlags0.useWord2);
      assertFalse(seqClassifierFlags0.useScaledSGD);
      assertFalse(seqClassifierFlags0.noMidNGrams);
      assertFalse(seqClassifierFlags0.useWordPairs);
      assertFalse(seqClassifierFlags0.useSGDtoQN);
      assertFalse(seqClassifierFlags0.useIfInteger);
      assertFalse(seqClassifierFlags0.nonLinearCRF);
      assertFalse(seqClassifierFlags0.useLC);
      assertEquals(0, seqClassifierFlags0.numOfSlices);
      assertFalse(seqClassifierFlags0.useTitle);
      assertFalse(seqClassifierFlags0.useSum);
      assertEquals((-1), seqClassifierFlags0.wordShape);
      assertFalse(seqClassifierFlags0.normalizeTimex);
      assertFalse(seqClassifierFlags0.useKL);
      assertFalse(seqClassifierFlags0.useDictPK2);
      assertEquals(1, seqClassifierFlags0.kBest);
      assertFalse(seqClassifierFlags0.largeChSegFile);
      assertFalse(seqClassifierFlags0.useMoreGazFeatures);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions);
      assertEquals(1, seqClassifierFlags0.numTimesRemoveTopN);
      assertFalse(seqClassifierFlags0.useMinimalAbbr1);
      assertEquals(0.9, seqClassifierFlags0.selfTrainConfidenceThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.usePosition);
      assertFalse(seqClassifierFlags0.useRule2);
      assertFalse(seqClassifierFlags0.useWordShapeGaz);
      assertFalse(seqClassifierFlags0.useWord1);
      assertFalse(seqClassifierFlags0.outputIterationsToFile);
      assertFalse(seqClassifierFlags0.softmaxOutputLayer);
      assertEquals(0, seqClassifierFlags0.multiThreadClassifier);
      assertFalse(seqClassifierFlags0.useVB);
      assertEquals(0.0, seqClassifierFlags0.softmaxTieLambda, 0.01D);
      assertFalse(seqClassifierFlags0.useCommonWordsFeature);
      assertFalse(seqClassifierFlags0.useMinimalAbbr);
      assertFalse(seqClassifierFlags0.useAdaGradFOBOS);
      assertFalse(seqClassifierFlags0.useUnicodeType4gram);
      assertFalse(seqClassifierFlags0.useLongSequences);
      assertFalse(seqClassifierFlags0.sighanPostProcessing);
      assertEquals(0, seqClassifierFlags0.numOfFeatureSlices);
      assertFalse(seqClassifierFlags0.useDisjunctive);
      assertFalse(seqClassifierFlags0.verboseMode);
      assertFalse(seqClassifierFlags0.useTypeSeqs);
      assertFalse(seqClassifierFlags0.useNPGovernor);
      assertFalse(seqClassifierFlags0.useEitherSideDisjunctive);
      assertFalse(seqClassifierFlags0.printXML);
      assertFalse(seqClassifierFlags0.splitOnHead);
      assertFalse(seqClassifierFlags0.useMoreAbbr);
      assertFalse(seqClassifierFlags0.useChunks);
      assertFalse(seqClassifierFlags0.useABSTR);
      assertFalse(seqClassifierFlags0.terminateOnEvalImprovement);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions3);
      assertEquals(0.1, seqClassifierFlags0.initRate, 0.01D);
      assertFalse(seqClassifierFlags0.ocrTrain);
      assertEquals(8, seqClassifierFlags0.maxAllowedChromaticSize);
      assertFalse(seqClassifierFlags0.useSymTags);
      assertEquals(1.0, seqClassifierFlags0.dropoutScale, 0.01D);
      assertFalse(seqClassifierFlags0.useNextSequences);
      assertFalse(seqClassifierFlags0.strictlyZeroethOrder);
      assertEquals((-1), seqClassifierFlags0.QNPasses);
      assertFalse(seqClassifierFlags0.printNR);
      assertFalse(seqClassifierFlags0.mergeTags);
      assertFalse(seqClassifierFlags0.useCorefFeatures);
      assertFalse(seqClassifierFlags0.useDisjShape);
      assertFalse(seqClassifierFlags0.evaluateTrain);
      assertEquals(1000, seqClassifierFlags0.wordSegBeamSize);
      assertEquals(1.0, seqClassifierFlags0.unsupDropoutScale, 0.01D);
      assertFalse(seqClassifierFlags0.use4Clique);
      assertEquals(30, seqClassifierFlags0.beamSize);
      assertFalse(seqClassifierFlags0.printFactorTable);
      assertFalse(seqClassifierFlags0.useSigmoid);
      assertFalse(seqClassifierFlags0.useNumberFeature);
      assertFalse(seqClassifierFlags0.groupByInput);
      assertTrue(seqClassifierFlags0.useMemoryEvaluator);
      assertFalse(seqClassifierFlags0.memoryThrift);
      assertFalse(seqClassifierFlags0.groupByHiddenUnit);
      assertTrue(seqClassifierFlags0.separateASCIIandRange);
      assertTrue(seqClassifierFlags0.applyNERPenalty);
      assertFalse(seqClassifierFlags0.printTrainLabels);
      assertFalse(seqClassifierFlags0.hardcodeSoftmaxOutputWeights);
      assertFalse(seqClassifierFlags0.useBerkeleyAlignerForViterbi);
      assertFalse(seqClassifierFlags0.lowercaseNGrams);
      assertFalse(seqClassifierFlags0.useASBCPre1);
      assertEquals(0.95, seqClassifierFlags0.adaDeltaRho, 0.01D);
      assertEquals(1, seqClassifierFlags0.selfTrainWindowSize);
      assertEquals(0.5, seqClassifierFlags0.alignmentDecodeThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useABSTRFreq);
      assertFalse(seqClassifierFlags0.dontExtendTaggy);
      assertTrue(seqClassifierFlags0.useDenero);
      assertTrue(seqClassifierFlags0.restrictLabels);
      assertTrue(seqClassifierFlags0.keepOBInMemory);
      assertFalse(seqClassifierFlags0.useChunkySequences);
      assertFalse(seqClassifierFlags0.useInPlaceSGD);
      assertFalse(seqClassifierFlags0.terminateOnAvgImprovement);
      assertEquals(1.0, seqClassifierFlags0.sigma, 0.01D);
      assertFalse(seqClassifierFlags0.useSemPrior);
      assertFalse(seqClassifierFlags0.numberEquivalenceDistSim);
      assertFalse(seqClassifierFlags0.useHuber);
      assertFalse(seqClassifierFlags0.strictlyThirdOrder);
      assertFalse(seqClassifierFlags0.strictlyFirstOrder);
      assertTrue(seqClassifierFlags0.useExternal);
      assertFalse(seqClassifierFlags0.weightByEntropy);
      assertFalse(seqClassifierFlags0.augmentedDateChars);
      assertFalse(seqClassifierFlags0.useSMD);
      assertFalse(seqClassifierFlags0.initWithNERPosterior);
      assertFalse(seqClassifierFlags0.useFeaturesCpC5gram);
      assertFalse(seqClassifierFlags0.announceObjectBankEntries);
      assertFalse(seqClassifierFlags0.useLemmaAsWord);
      assertFalse(seqClassifierFlags0.geDebug);
      assertFalse(seqClassifierFlags0.useGEforSup);
      assertFalse(seqClassifierFlags0.useUnicodeType5gram);
      assertEquals(0, seqClassifierFlags0.interimOutputFreq);
      assertEquals(100, seqClassifierFlags0.numSamples);
      assertFalse(seqClassifierFlags0.useANTE);
      assertFalse(seqClassifierFlags0.gradientDebug);
      assertFalse(seqClassifierFlags0.usePhraseWords);
      assertFalse(seqClassifierFlags0.verboseForTrueCasing);
      assertTrue(seqClassifierFlags0.useOutputLayer);
      assertTrue(seqClassifierFlags0.biAlignmentPriorIsPMI);
      assertFalse(seqClassifierFlags0.useBig5);
      assertFalse(seqClassifierFlags0.useYetMoreCpCShapes);
      assertFalse(seqClassifierFlags0.useFilter);
      assertFalse(seqClassifierFlags0.useAdaDelta);
      assertEquals(0, seqClassifierFlags0.featureCountThresh);
      assertFalse(seqClassifierFlags0.useUnicodeType);
      assertFalse(seqClassifierFlags0.estimateInitial);
      assertEquals((-1), seqClassifierFlags0.labelDictionaryCutoff);
      assertEquals(8, seqClassifierFlags0.distSimMaxBits);
      assertFalse(seqClassifierFlags0.pctSegmenterScaleByCRF);
      assertFalse(seqClassifierFlags0.useNextVB);
      assertFalse(seqClassifierFlags0.tieOutputLayer);
      assertEquals((-1), seqClassifierFlags0.numHiddenUnits);
      assertFalse(seqClassifierFlags0.saveFeatureIndexToDisk);
      assertFalse(seqClassifierFlags0.useGENIA);
      assertFalse(seqClassifierFlags0.useUniformPrior);
      assertFalse(seqClassifierFlags0.printFirstOrderProbs);
      assertEquals(1, seqClassifierFlags0.numStartLayers);
      assertFalse(seqClassifierFlags0.booleanFeatures);
      assertFalse(seqClassifierFlags0.useTOK);
      assertEquals(0, seqClassifierFlags0.maxRight);
      assertFalse(seqClassifierFlags0.useABGENE);
      assertFalse(seqClassifierFlags0.use2W);
      assertEquals(2, seqClassifierFlags0.maxLeft);
      assertEquals(10, seqClassifierFlags0.wideDisjunctionWidth);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions3);
      assertFalse(seqClassifierFlags0.cleanGazette);
      assertTrue(seqClassifierFlags0.includeC2EViterbi);
      assertFalse(seqClassifierFlags0.secondOrderNonLinear);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions2);
      assertFalse(seqClassifierFlags0.usePKSuf1);
      assertFalse(seqClassifierFlags0.alternateTraining);
      assertFalse(seqClassifierFlags0.useHKChar2);
      assertTrue(seqClassifierFlags0.useKnownLCWords);
      assertTrue(seqClassifierFlags0.useViterbi);
      assertEquals(Integer.MAX_VALUE, seqClassifierFlags0.printFeaturesUpto);
      assertFalse(seqClassifierFlags0.useFirstWord);
      assertFalse(seqClassifierFlags0.usePrevVB);
      assertFalse(seqClassifierFlags0.useEitherSideWord);
      assertFalse(seqClassifierFlags0.usePKPre1);
      assertFalse(seqClassifierFlags0.useRad1);
      assertTrue(seqClassifierFlags0.splitDocuments);
      assertFalse(seqClassifierFlags0.doFeatureDiscovery);
      assertFalse(seqClassifierFlags0.lowerNewgeneThreshold);
      assertEquals(1, seqClassifierFlags0.nerSlowerTimes);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesAll);
      assertFalse(seqClassifierFlags0.useNeighborNGrams);
      assertTrue(seqClassifierFlags0.useWord);
      assertFalse(seqClassifierFlags0.useTaggySequencesShapeInteraction);
      assertFalse(seqClassifierFlags0.iobTags);
      assertFalse(seqClassifierFlags0.useSequentialScanSampling);
      assertFalse(seqClassifierFlags0.useSGD);
      assertFalse(seqClassifierFlags0.useBilingualNERPrior);
      assertFalse(seqClassifierFlags0.useACR);
      assertFalse(seqClassifierFlags0.suppressTestDebug);
      assertFalse(seqClassifierFlags0.useAdaDiff);
      assertFalse(seqClassifierFlags0.pctSegmenterLenAdjust);
      assertFalse(seqClassifierFlags0.usePhraseFeatures);
      assertFalse(seqClassifierFlags0.useFeaturesCpC6gram);
      assertFalse(seqClassifierFlags0.dualDecompDebug);
      assertFalse(seqClassifierFlags0.useBigramInTwoClique);
      assertFalse(seqClassifierFlags0.testObjFunction);
      assertEquals(0, seqClassifierFlags0.featureCountThreshold);
      assertFalse(seqClassifierFlags0.useOccurrencePatterns);
      assertEquals(0, seqClassifierFlags0.maxQNItr);
      assertFalse(seqClassifierFlags0.factorInAlignmentProb);
      assertFalse(seqClassifierFlags0.useKBest);
      assertTrue(seqClassifierFlags0.averagePerceptron);
      assertEquals(15, seqClassifierFlags0.stochasticBatchSize);
      assertEquals(0.0, seqClassifierFlags0.annealingRate, 0.01D);
      assertFalse(seqClassifierFlags0.useRad2);
      assertEquals(0, seqClassifierFlags0.ocrFold);
      assertFalse(seqClassifierFlags0.backpropLopTraining);
      assertFalse(seqClassifierFlags0.useProtoFeatures);
      assertEquals((-1), seqClassifierFlags0.maxIterations);
      assertFalse(seqClassifierFlags0.useExtraTaggySequences);
      assertFalse(seqClassifierFlags0.useNegASBCDict2);
      assertFalse(seqClassifierFlags0.usePrediction);
      assertFalse(seqClassifierFlags0.useTaggySequences);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions2);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions3);
      assertEquals(3, seqClassifierFlags0.charHalfWindow);
      assertFalse(seqClassifierFlags0.useOnlySeenWeights);
      assertFalse(seqClassifierFlags0.useEntityTypes);
      assertFalse(seqClassifierFlags0.useLabelSource);
      assertFalse(seqClassifierFlags0.twoStage);
      assertTrue(seqClassifierFlags0.initWithPosterior);
      assertFalse(seqClassifierFlags0.useCWSWordFeatures);
      assertFalse(seqClassifierFlags0.useHeadGov);
      assertFalse(seqClassifierFlags0.useNegASBCDict3);
      assertEquals(0, seqClassifierFlags0.removeTopN);
      assertFalse(seqClassifierFlags0.useNegASBCDict4);
      assertFalse(seqClassifierFlags0.useRandomSeed);
      assertFalse(seqClassifierFlags0.groupByOutputClass);
      assertFalse(seqClassifierFlags0.powerAlignProbAsAddition);
      assertFalse(seqClassifierFlags0.useFeaturesC6gram);
      assertFalse(seqClassifierFlags0.conjoinShapeNGrams);
      assertFalse(seqClassifierFlags0.factorInBiEdgePotential);
      assertFalse(seqClassifierFlags0.strictGoodCoNLL);
      assertFalse(seqClassifierFlags0.doGibbs);
      assertEquals(0, seqClassifierFlags0.scaledSGDMethod);
      assertFalse(seqClassifierFlags0.useCTBChar2);
      assertFalse(seqClassifierFlags0.useFeaturesC5gram);
      assertEquals(1.0, seqClassifierFlags0.lambdaCH, 0.01D);
      assertFalse(seqClassifierFlags0.perceptronDebug);
      assertFalse(seqClassifierFlags0.useShapeStrings3);
      assertFalse(seqClassifierFlags0.useShapeStrings1);
      assertFalse(seqClassifierFlags0.useWordTag);
      assertFalse(seqClassifierFlags0.matchNERIncentive);
      assertFalse(seqClassifierFlags0.useShapeStrings5);
      assertFalse(seqClassifierFlags0.useWordnetFeatures);
      assertFalse(seqClassifierFlags0.useShapeStrings4);
      assertEquals(0.001, seqClassifierFlags0.adaGradEps, 0.01D);
      assertFalse(seqClassifierFlags0.useShapeStrings);
      assertEquals(1.0, seqClassifierFlags0.randomizedRatio, 0.01D);
      assertFalse(seqClassifierFlags0.learnENBasedOnCH);
      assertFalse(seqClassifierFlags0.checkNameList);
      assertFalse(seqClassifierFlags0.useYear);
      assertEquals(0.0, seqClassifierFlags0.priorAlpha, 0.01D);
      assertFalse(seqClassifierFlags0.useAbbr);
      assertFalse(seqClassifierFlags0.appendLC);
      assertFalse(seqClassifierFlags0.useObservedFeaturesOnly);
      assertFalse(seqClassifierFlags0.useEmbedding);
      assertFalse(seqClassifierFlags0.useNegDict2);
      assertFalse(seqClassifierFlags0.useEntityRule);
      assertFalse(seqClassifierFlags0.randomLopWeights);
      assertEquals(0, seqClassifierFlags0.nerSkipFirstK);
      assertFalse(seqClassifierFlags0.noEdgeFeature);
      assertFalse(seqClassifierFlags0.keepEnglishWhitespaces);
      assertEquals(1, seqClassifierFlags0.numLopExpert);
      assertFalse(seqClassifierFlags0.useCTBPre1);
      assertFalse(seqClassifierFlags0.useASBCChar2);
      assertFalse(seqClassifierFlags0.checkGradient);
      assertFalse(seqClassifierFlags0.useTags);
      assertFalse(seqClassifierFlags0.useNegDict3);
      assertFalse(seqClassifierFlags0.sloppyGazette);
      assertFalse(seqClassifierFlags0.useNegDict4);
      assertFalse(seqClassifierFlags0.skipOutputRegularization);
      assertFalse(seqClassifierFlags0.useGenericFeatures);
      assertEquals(1, seqClassifierFlags0.selfTrainIterations);
      assertEquals(1, seqClassifierFlags0.multiThreadPerceptron);
      assertFalse(seqClassifierFlags0.keepEmptySentences);
      assertFalse(seqClassifierFlags0.sparseOutputLayer);
      assertFalse(seqClassifierFlags0.useHKSuf1);
      assertEquals(0.01, seqClassifierFlags0.epsilon, 0.01D);
      assertFalse(seqClassifierFlags0.useGazettePhrases);
      assertFalse(seqClassifierFlags0.useMSRChar2);
      assertFalse(seqClassifierFlags0.printLabelValue);
      assertFalse(seqClassifierFlags0.useNERPriorBIO);
      assertEquals(0, seqClassifierFlags0.evaluateIters);
      assertFalse(seqClassifierFlags0.lazyUpdate);
      assertEquals(1, seqClassifierFlags0.CRForder);
      assertFalse(seqClassifierFlags0.useDictHK2);
      assertFalse(seqClassifierFlags0.useABSTRFreqDict);
      assertFalse(seqClassifierFlags0.purgeDatasets);
      assertFalse(seqClassifierFlags0.timitDatum);
      assertFalse(seqClassifierFlags0.addCapitalFeatures);
      assertEquals(0.0, seqClassifierFlags0.featureWeightThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.makeConsistent);
      assertFalse(seqClassifierFlags0.useFeaturesC4gram);
      assertFalse(seqClassifierFlags0.useDictASBC2);
      assertEquals(2, seqClassifierFlags0.CRFwindow);
      assertFalse(seqClassifierFlags0.doFE);
      assertFalse(seqClassifierFlags0.useFeaturesCpC4gram);
      assertFalse(seqClassifierFlags0.useClassFeature);
      assertFalse(seqClassifierFlags0.useMsr);
      assertFalse(seqClassifierFlags0.useReverseAffix);
      assertEquals((-1), seqClassifierFlags0.purgeFeatures);
      assertFalse(seqClassifierFlags0.useIsURL);
      assertFalse(seqClassifierFlags0.useIsDateRange);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSizeAlignment, 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, seqClassifierFlags0.searchGraphPrune, 0.01D);
      assertFalse(seqClassifierFlags0.usePrevSequences);
      assertFalse(seqClassifierFlags0.useGazFeatures);
      assertFalse(seqClassifierFlags0.intern);
      assertFalse(seqClassifierFlags0.useMidDotShape);
      assertFalse(seqClassifierFlags0.selfTest);
      assertFalse(seqClassifierFlags0.printProbs);
      assertEquals(0, seqClassifierFlags0.startEvaluateIters);
      assertTrue(seqClassifierFlags0.useCWSFeatures);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesBigram);
      assertEquals(1, seqClassifierFlags0.multiThreadGrad);
      assertFalse(seqClassifierFlags0.useRobustQN);
      assertTrue(seqClassifierFlags0.useInternal);
      assertFalse(seqClassifierFlags0.useDualDecomp);
      assertEquals(1, seqClassifierFlags0.terminateOnEvalImprovementNumOfEpoch);
      assertFalse(seqClassifierFlags0.useNegPKDict3);
      assertEquals(1.0, seqClassifierFlags0.alignDDAlpha, 0.01D);
      assertFalse(seqClassifierFlags0.useNegPKDict4);
      assertFalse(seqClassifierFlags0.dampDDStepSizeWithAlignmentProb);
      assertEquals(1, seqClassifierFlags0.featureThreshold);
      assertFalse(seqClassifierFlags0.useRule);
      assertFalse(seqClassifierFlags0.useNPHead);
      assertFalse(seqClassifierFlags0.useNegPKDict2);
      assertFalse(seqClassifierFlags0.usePhraseWordSpecialTags);
      assertEquals(0.0, seqClassifierFlags0.featureDiffThresh, 0.01D);
      assertEquals(1, seqClassifierFlags0.numDatasetsPerFile);
      assertFalse(seqClassifierFlags0.useBerkeleyCompetitivePosterior);
      assertFalse(seqClassifierFlags0.useObservedSequencesOnly);
      assertFalse(seqClassifierFlags0.useAltGazFeatures);
      assertFalse(seqClassifierFlags0.usePrevNextLemmas);
      assertFalse(seqClassifierFlags0.useChromaticSampling);
      assertFalse(seqClassifierFlags0.justify);
      assertFalse(seqClassifierFlags0.useCTBSuf1);
      assertEquals(1, seqClassifierFlags0.numRuns);
      assertFalse(seqClassifierFlags0.dualDecompNotBIO);
      assertEquals(0.0, seqClassifierFlags0.newgeneThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useDistSim);
      assertFalse(seqClassifierFlags0.useNext);
      assertFalse(seqClassifierFlags0.useUnknown);
      assertFalse(seqClassifierFlags0.iobWrapper);
      assertFalse(seqClassifierFlags0.useHKPre1);
      assertEquals(1, seqClassifierFlags0.bisequencePriorType);
      assertEquals(1.0, seqClassifierFlags0.adaptSigma, 0.01D);
      assertEquals(1.0, seqClassifierFlags0.lambdaEN, 0.01D);
      assertEquals((-1), seqClassifierFlags0.tuneSampleSize);
      assertEquals(4, seqClassifierFlags0.disjunctionWidth);
      
      String string0 = JSONObject.numberToString((Number) 0.95);
      assertNotNull(string0);
      assertEquals("0.95", string0);
      
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 59
  /*
   * 17 covered goals:
   * Goal 1. wheel.json.JSONObject.optLong(Ljava/lang/String;J)J: root-Branch
   * Goal 2. wheel.json.JSONObject.put(Ljava/lang/String;I)Lwheel/json/JSONObject;: root-Branch
   * Goal 3. wheel.json.JSONObject.optInt(Ljava/lang/String;I)I: root-Branch
   * Goal 4. wheel.json.JSONObject.getDouble(Ljava/lang/String;)D: I13 Branch 45 IFEQ L463 - true
   * Goal 5. wheel.json.JSONObject.getInt(Ljava/lang/String;)I: I13 Branch 46 IFEQ L484 - true
   * Goal 6. wheel.json.JSONObject.optJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 65 IFEQ L815 - true
   * Goal 7. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I6 Branch 73 IFNULL L1015 - true
   * Goal 8. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I6 Branch 121 IFNULL L1304 - false
   * Goal 9. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I13 Branch 122 IFEQ L1304 - true
   * Goal 10. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I25 Branch 123 IFEQ L1308 - true
   * Goal 11. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I62 Branch 125 IFEQ L1317 - true
   * Goal 12. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I76 Branch 126 IFEQ L1320 - true
   * Goal 13. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I89 Branch 127 IFEQ L1323 - true
   * Goal 14. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I105 Branch 128 IFEQ L1326 - true
   * Goal 15. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I121 Branch 129 IFEQ L1329 - true
   * Goal 16. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I140 Branch 130 IFEQ L1332 - true
   * Goal 17. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I160 Branch 131 IFEQ L1335 - true
   */

  @Test
  public void test59()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("di", (Object) jSONObject0);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      int int0 = jSONObject0.optInt("di", 8);
      assertEquals(1, jSONObject0.length());
      assertEquals(8, int0);
      assertSame(jSONObject0, jSONObject1);
      
      JSONObject jSONObject2 = jSONObject0.put("di", 8);
      assertEquals(1, jSONObject2.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      
      long long0 = jSONObject1.optLong((String) null, (long) 8);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(8L, long0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      
      String string0 = JSONObject.valueToString("di", 8, 8);
      assertNotNull(string0);
      assertEquals("\"di\"", string0);
      
      JSONArray jSONArray0 = jSONObject2.optJSONArray("di");
      assertEquals(1, jSONObject2.length());
      assertEquals(1, jSONObject0.length());
      assertNull(jSONArray0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
  }

  //Test case number: 60
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.toString(I)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test60()  throws Throwable  {
      Double double0 = new Double((double) 0);
      assertEquals(0.0, (double)double0, 0.01D);
      
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject((Object) double0, stringArray0);
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = jSONObject0.toString(0);
      assertEquals(0, jSONObject0.length());
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  //Test case number: 61
  /*
   * 6 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONObject;[Ljava/lang/String;)V: I15 Branch 3 IF_ICMPGE L162 - true
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONObject;[Ljava/lang/String;)V: I15 Branch 3 IF_ICMPGE L162 - false
   * Goal 3. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 29 IFNONNULL L374 - false
   * Goal 4. wheel.json.JSONObject.opt(Ljava/lang/String;)Ljava/lang/Object;: I6 Branch 63 IFNONNULL L688 - false
   * Goal 5. wheel.json.JSONObject.optJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 65 IFEQ L815 - false
   * Goal 6. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 71 IFNULL L999 - true
   */

  @Test
  public void test61()  throws Throwable  {
      HashMap<String, IndexedWord> hashMap0 = new HashMap<String, IndexedWord>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.append("<ft", (Object) "<ft");
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONArray jSONArray0 = jSONObject1.optJSONArray("<ft");
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(jSONArray0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      String[] stringArray0 = new String[2];
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject2.length());
      assertNotNull(jSONObject2);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
  }

  //Test case number: 62
  /*
   * 6 covered goals:
   * Goal 1. wheel.json.JSONObject.optString(Ljava/lang/String;)Ljava/lang/String;: root-Branch
   * Goal 2. wheel.json.JSONObject.length()I: root-Branch
   * Goal 3. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I78 Branch 19 IFLE L270 - false
   * Goal 4. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I107 Branch 22 IFNE L273 - true
   * Goal 5. wheel.json.JSONObject.optString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I12 Branch 67 IFNULL L889 - true
   * Goal 6. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I11 Branch 103 IFNE L1190 - false
   */

  @Test
  public void test62()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Double double0 = Double.valueOf((double) (-4122));
      assertEquals((-4122.0), (double)double0, 0.01D);
      
      JSONObject jSONObject1 = new JSONObject((Object) double0);
      assertEquals(3, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotSame(jSONObject1, jSONObject0);
      
      String string0 = jSONObject0.optString("r9@!TTt,/}@0y");
      assertEquals(0, jSONObject0.length());
      assertNotNull(string0);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertEquals("", string0);
      assertNotSame(jSONObject0, jSONObject1);
      
      String string1 = jSONObject0.toString((-4122), (-4122));
      assertEquals(0, jSONObject0.length());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertEquals("{}", string1);
      assertNotSame(string1, string0);
      assertNotSame(jSONObject0, jSONObject1);
  }

  //Test case number: 63
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.get(Ljava/lang/String;)Ljava/lang/Object;: I12 Branch 38 IFNONNULL L421 - false
   * Goal 2. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 82 LOOKUPSWITCH L1030 Case 47 - true
   * Goal 3. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 84 LOOKUPSWITCH L1030 Default-Case - false
   * Goal 4. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I91 Branch 85 IF_ICMPNE L1037 - true
   */

  @Test
  public void test63()  throws Throwable  {
      HashMap<CategoryWordTag, StringLabel> hashMap0 = new HashMap<CategoryWordTag, StringLabel>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject0);
      
      try {
        double double0 = jSONObject0.getDouble("/coR,Dl2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"/coR,Dl2\"] not found.
         //
      }
  }

  //Test case number: 64
  /*
   * 11 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/util/Collection;)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.put(Ljava/lang/String;D)Lwheel/json/JSONObject;: root-Branch
   * Goal 3. wheel.json.JSONObject.keys()Ljava/util/Iterator;: root-Branch
   * Goal 4. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 26 IFNONNULL L346 - false
   * Goal 5. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I26 Branch 27 IFEQ L347 - true
   * Goal 6. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I18 Branch 55 IFEQ L648 - true
   * Goal 7. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I18 Branch 55 IFEQ L648 - false
   * Goal 8. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I37 Branch 56 IFNE L651 - true
   * Goal 9. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I14 Branch 92 IFEQ L1089 - false
   * Goal 10. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I23 Branch 93 IFNE L1090 - false
   * Goal 11. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I30 Branch 94 IFEQ L1090 - true
   */

  @Test
  public void test64()  throws Throwable  {
      HashMap<Tag, LabeledWord> hashMap0 = new HashMap<Tag, LabeledWord>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("T2$\"STZ){kI$wL", (Object) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONObject jSONObject2 = jSONObject0.put("T2$\"STZ){kI$wL", 0.0);
      assertEquals(1, jSONObject2.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      
      JSONArray jSONArray0 = jSONObject2.names();
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONObject2.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONArray0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      
      HashIndex<StringLabel> hashIndex0 = new HashIndex<StringLabel>();
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertNotNull(hashIndex0);
      
      JSONObject jSONObject3 = jSONObject1.put("T2$\"STZ){kI$wL", (Collection) hashIndex0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject3.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject3);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
  }

  //Test case number: 65
  /*
   * 11 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I33 Branch 17 IF_ICMPGE L263 - true
   * Goal 2. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I33 Branch 17 IF_ICMPGE L263 - false
   * Goal 3. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I58 Branch 18 IFLE L268 - true
   * Goal 4. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I58 Branch 18 IFLE L268 - false
   * Goal 5. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I78 Branch 19 IFLE L270 - true
   * Goal 6. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I92 Branch 20 IFLE L273 - true
   * Goal 7. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I92 Branch 20 IFLE L273 - false
   * Goal 8. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I100 Branch 21 IFEQ L273 - false
   * Goal 9. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I107 Branch 22 IFNE L273 - false
   * Goal 10. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I116 Branch 23 IF_ICMPNE L276 - true
   * Goal 11. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I135 Branch 24 IFNE L278 - false
   */

  @Test
  public void test65()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
      
      JSONObject jSONObject0 = new JSONObject(object0);
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject0);
  }

  //Test case number: 66
  /*
   * 39 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;J)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/util/Map;)Lwheel/json/JSONObject;: root-Branch
   * Goal 3. wheel.json.JSONObject.<init>()V: root-Branch
   * Goal 4. wheel.json.JSONObject.<init>(Ljava/util/Map;)V: I11 Branch 16 IFNONNULL L234 - true
   * Goal 5. wheel.json.JSONObject.get(Ljava/lang/String;)Ljava/lang/Object;: I12 Branch 38 IFNONNULL L421 - true
   * Goal 6. wheel.json.JSONObject.opt(Ljava/lang/String;)Ljava/lang/Object;: I6 Branch 63 IFNONNULL L688 - true
   * Goal 7. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 69 IFNONNULL L975 - true
   * Goal 8. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I20 Branch 70 IFNULL L978 - false
   * Goal 9. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 71 IFNULL L999 - false
   * Goal 10. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I11 Branch 72 IFNULL L999 - false
   * Goal 11. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I6 Branch 73 IFNULL L1015 - false
   * Goal 12. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I12 Branch 74 IFNE L1015 - true
   * Goal 13. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I51 Branch 75 IF_ICMPGE L1027 - true
   * Goal 14. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I51 Branch 75 IF_ICMPGE L1027 - false
   * Goal 15. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 76 LOOKUPSWITCH L1030 Case 8 - false
   * Goal 16. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 77 LOOKUPSWITCH L1030 Case 9 - false
   * Goal 17. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 78 LOOKUPSWITCH L1030 Case 10 - false
   * Goal 18. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 79 LOOKUPSWITCH L1030 Case 12 - false
   * Goal 19. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 80 LOOKUPSWITCH L1030 Case 13 - false
   * Goal 20. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 81 LOOKUPSWITCH L1030 Case 34 - false
   * Goal 21. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 82 LOOKUPSWITCH L1030 Case 47 - false
   * Goal 22. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 83 LOOKUPSWITCH L1030 Case 92 - false
   * Goal 23. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 84 LOOKUPSWITCH L1030 Default-Case - true
   * Goal 24. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I177 Branch 86 IF_ICMPLT L1058 - false
   * Goal 25. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I183 Branch 87 IF_ICMPLT L1058 - true
   * Goal 26. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I196 Branch 89 IF_ICMPLT L1058 - true
   * Goal 27. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I6 Branch 91 IFNULL L1088 - false
   * Goal 28. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I14 Branch 92 IFEQ L1089 - true
   * Goal 29. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I45 Branch 95 IFEQ L1094 - true
   * Goal 30. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I6 Branch 110 IFNULL L1253 - false
   * Goal 31. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I13 Branch 111 IFEQ L1253 - true
   * Goal 32. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I25 Branch 112 IFEQ L1256 - true
   * Goal 33. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I82 Branch 114 IFEQ L1268 - true
   * Goal 34. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I96 Branch 115 IFNE L1271 - false
   * Goal 35. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I102 Branch 116 IFNE L1271 - false
   * Goal 36. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I108 Branch 117 IFEQ L1271 - true
   * Goal 37. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I121 Branch 118 IFEQ L1275 - true
   * Goal 38. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I138 Branch 119 IFEQ L1278 - true
   * Goal 39. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I156 Branch 120 IFEQ L1281 - true
   */

  @Test
  public void test66()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      CategoryWordTag categoryWordTag0 = new CategoryWordTag("!^v");
      assertNull(categoryWordTag0.tag());
      assertEquals("!^v", categoryWordTag0.value());
      assertEquals(-1, categoryWordTag0.beginPosition());
      assertEquals(-1, categoryWordTag0.endPosition());
      assertNull(categoryWordTag0.word());
      assertEquals("!^v", categoryWordTag0.category());
      assertNotNull(categoryWordTag0);
      assertTrue(categoryWordTag0.printWordTag);
      assertFalse(categoryWordTag0.suppressTerminalDetails);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("!^v", (Object) "!^v");
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      String string0 = JSONObject.valueToString(categoryWordTag0);
      assertNull(categoryWordTag0.tag());
      assertEquals("!^v", categoryWordTag0.value());
      assertEquals(-1, categoryWordTag0.beginPosition());
      assertEquals(-1, categoryWordTag0.endPosition());
      assertNull(categoryWordTag0.word());
      assertEquals("!^v", categoryWordTag0.category());
      assertNotNull(string0);
      assertEquals("\"!^v\"", string0);
      assertTrue(categoryWordTag0.printWordTag);
      assertFalse(categoryWordTag0.suppressTerminalDetails);
      
      String string1 = (String)jSONObject0.get("!^v");
      assertEquals(1, jSONObject0.length());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("!^v", string1);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(string1, string0);
      
      HashMap<Boolean, Short> hashMap0 = new HashMap<Boolean, Short>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject2 = jSONObject0.put("!^v", (Map) hashMap0);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      
      JSONObject jSONObject3 = jSONObject1.put("\"!^v\"", 0L);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject3.length());
      assertNotNull(jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject0);
  }
}
