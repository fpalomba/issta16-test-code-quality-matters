/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 18 03:12:16 GMT 2015
 */

package wheel.json;

import static org.junit.Assert.*;
import org.junit.Test;
import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.ling.IndexedWord;
import edu.stanford.nlp.ling.LabeledWord;
import edu.stanford.nlp.ling.Tag;
import edu.stanford.nlp.ling.TaggedWord;
import edu.stanford.nlp.ling.WordTag;
import edu.stanford.nlp.util.ArrayCoreMap;
import edu.stanford.nlp.util.HashIndex;
import edu.stanford.nlp.util.HashableCoreMap;
import edu.stanford.nlp.util.TypesafeMap;
import java.io.CharArrayWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 78 LOOKUPSWITCH L1030 Case 10 - true
   */

  @Test
  public void test00()  throws Throwable  {
      HashMap<String, IndexedWord> hashMap0 = new HashMap<String, IndexedWord>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = jSONObject0.optBoolean("@@123\nthis\nis\na\nsentence\n\n@@124\nThis\nis\nanother\n.\n\n@125\nThis\nis\nthe\nlast\n", false);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I6 Branch 98 IFNULL L1113 - true
   */

  @Test
  public void test01()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.optJSONArray("yKCWpZ{Hk");
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONObject0.toJSONArray((JSONArray) null);
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray1);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I30 Branch 94 IFEQ L1090 - false
   */

  @Test
  public void test02()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      try {
        JSONObject jSONObject1 = jSONObject0.put("\"\"", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
      }
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I156 Branch 120 IFEQ L1281 - false
   */

  @Test
  public void test03()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "eJOVynk(iN;\"`OJ");
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
      assertEquals("{\"bytes\":[101,74,79,86,121,110,107,40,105,78,59,34,96,79,74],\"class\":\"class java.lang.String\",\"empty\":false}", string0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.has(Ljava/lang/String;)Z: root-Branch
   */

  @Test
  public void test04()  throws Throwable  {
      HashMap<WordTag, CoreLabel.GenericAnnotation<Double>> hashMap0 = new HashMap<WordTag, CoreLabel.GenericAnnotation<Double>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = jSONObject0.has("h^7&/srCcb~[4LkBt8E");
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(boolean0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 48 IFEQ L517 - false
   */

  @Test
  public void test05()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("gettoJSONArray", (Object) jSONObject0);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject1.getJSONObject("gettoJSONArray");
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNotNull(jSONObject2);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optDouble(Ljava/lang/String;)D: root-Branch
   */

  @Test
  public void test06()  throws Throwable  {
      HashMap<TypesafeMap.Key<Object>, HashableCoreMap> hashMap0 = new HashMap<TypesafeMap.Key<Object>, HashableCoreMap>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject0);
      
      double double0 = jSONObject0.optDouble(">*~R");
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(Double.NaN, double0, 0.01D);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 48 IFEQ L517 - true
   */

  @Test
  public void test07()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("char", (Collection) null);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      try {
        JSONObject jSONObject2 = jSONObject1.getJSONObject("char");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"char\"] is not a JSONObject.
         //
      }
  }

  //Test case number: 8
  /*
   * 6 covered goals:
   * Goal 1. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I14 Branch 39 IFNE L439 - false
   * Goal 2. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I20 Branch 40 IFEQ L439 - false
   * Goal 3. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I28 Branch 41 IFLE L439 - true
   * Goal 4. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I41 Branch 42 IFNE L443 - false
   * Goal 5. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I47 Branch 43 IFEQ L443 - false
   * Goal 6. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I55 Branch 44 IFLE L443 - true
   */

  @Test
  public void test08()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("isreplaceAll", (Object) "isreplaceAll");
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      
      boolean boolean0 = jSONObject1.optBoolean("isreplaceAll", false);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(boolean0);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I6 Branch 57 IFNONNULL L662 - false
   */

  @Test
  public void test09()  throws Throwable  {
      try {
        String string0 = JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
      }
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getString(Ljava/lang/String;)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      try {
        String string0 = jSONObject0.getString("getput");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getput\"] not found.
         //
      }
  }

  //Test case number: 11
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I6 Branch 1 IFNULL L115 - false
   * Goal 2. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I12 Branch 2 IF_ACMPNE L115 - true
   */

  @Test
  public void test11()  throws Throwable  {
      HashMap<CoreLabel, CoreLabel> hashMap0 = new HashMap<CoreLabel, CoreLabel>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(jSONObject0);
      
      HashMap<String, Short> hashMap1 = new HashMap<String, Short>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      JSONObject jSONObject1 = jSONObject0.put("~zx1TXew$1np'-tOk6k", (Map) hashMap1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      boolean boolean0 = jSONObject1.isNull("~zx1TXew$1np'-tOk6k");
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(boolean0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I6 Branch 121 IFNULL L1304 - true
   */

  @Test
  public void test12()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-2223), (-2223));
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I12 Branch 99 IFNE L1113 - false
   */

  @Test
  public void test13()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(0, jSONArray0.length());
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray1);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 47 IFEQ L499 - false
   */

  @Test
  public void test14()  throws Throwable  {
      String string0 = JSONObject.valueToString("", 0, 0);
      assertNotNull(string0);
      assertEquals("\"\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\"\"");
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.append("", (Object) "");
      assertEquals(4, jSONObject1.length());
      assertEquals(4, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      
      JSONArray jSONArray0 = jSONObject1.getJSONArray("");
      assertEquals(4, jSONObject1.length());
      assertEquals(1, jSONArray0.length());
      assertEquals(4, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONArray0);
  }

  //Test case number: 15
  /*
   * 8 covered goals:
   * Goal 1. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I11 Branch 50 IFNE L548 - true
   * Goal 2. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I37 Branch 51 IFEQ L554 - true
   * Goal 3. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I37 Branch 51 IFEQ L554 - false
   * Goal 4. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I77 Branch 62 IFLE L674 - true
   * Goal 5. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I28 Branch 133 IFEQ L1358 - false
   * Goal 6. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I65 Branch 134 IFEQ L1365 - true
   * Goal 7. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I84 Branch 135 IFEQ L1367 - true
   * Goal 8. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I84 Branch 135 IFEQ L1367 - false
   */

  @Test
  public void test15()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("\"eup\"", (Object) "\"eup\"");
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      
      Double double0 = new Double(17.88223743609244);
      assertEquals(17.88223743609244, (double)double0, 0.01D);
      
      String string0 = JSONObject.valueToString(double0, (-384), (-384));
      assertNotNull(string0);
      assertEquals("17.88223743609244", string0);
      
      JSONObject jSONObject2 = jSONObject1.accumulate("\"eup\"", (Object) jSONObject0);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNotNull(jSONObject2);
      
      JSONObject jSONObject3 = jSONObject2.put("17.88223743609244", (Object) "\"eup\"");
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject3.length());
      assertEquals(2, jSONObject2.length());
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject3);
      assertNotNull(jSONObject3);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertNotNull(stringArray0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      // Undeclared exception!
      try {
        Writer writer0 = jSONObject3.write((Writer) charArrayWriter0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 16
  /*
   * 5 covered goals:
   * Goal 1. wheel.json.JSONObject.optJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 66 IFEQ L829 - false
   * Goal 2. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I21 Branch 132 IFEQ L1357 - true
   * Goal 3. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I21 Branch 132 IFEQ L1357 - false
   * Goal 4. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I28 Branch 133 IFEQ L1358 - true
   * Goal 5. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I65 Branch 134 IFEQ L1365 - false
   */

  @Test
  public void test16()  throws Throwable  {
      HashMap<CoreLabel, CoreLabel> hashMap0 = new HashMap<CoreLabel, CoreLabel>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put(" ended with value ", (Map) hashMap0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject1.optJSONObject(" ended with value ");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, jSONObject2.length());
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject2);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = (StringWriter)jSONObject1.write((Writer) stringWriter0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals("{\" ended with value \":{}}", stringWriter1.toString());
      assertEquals("{\" ended with value \":{}}", stringWriter0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter0, stringWriter1);
      assertNotNull(stringWriter1);
  }

  //Test case number: 17
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 6 LOOKUPSWITCH L183 Case 125 - true
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 7 LOOKUPSWITCH L183 Default-Case - false
   */

  @Test
  public void test17()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = jSONObject0.toString();
      assertEquals(0, jSONObject0.length());
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      assertTrue(jSONTokener0.more());
      assertNotNull(jSONTokener0);
      
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject1.length());
      assertFalse(jSONTokener0.more());
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
  }

  //Test case number: 18
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I45 Branch 95 IFEQ L1094 - false
   * Goal 2. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I54 Branch 96 IFNE L1095 - false
   * Goal 3. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I61 Branch 97 IFEQ L1095 - true
   */

  @Test
  public void test18()  throws Throwable  {
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      String string0 = JSONObject.valueToString(float0, 0, 0);
      assertNotNull(string0);
      assertEquals("0", string0);
  }

  //Test case number: 19
  /*
   * 5 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I86 Branch 10 IF_ICMPEQ L202 - true
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I105 Branch 11 LOOKUPSWITCH L211 Case 44 - false
   * Goal 3. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I105 Branch 12 LOOKUPSWITCH L211 Case 59 - false
   * Goal 4. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I105 Branch 13 LOOKUPSWITCH L211 Case 125 - true
   * Goal 5. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I105 Branch 14 LOOKUPSWITCH L211 Default-Case - false
   */

  @Test
  public void test19()  throws Throwable  {
      HashMap<CoreLabel, CoreLabel> hashMap0 = new HashMap<CoreLabel, CoreLabel>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("e7&l", (-1774));
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject0.optInt("e7&l", (-1774));
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertSame(jSONObject0, jSONObject1);
      assertEquals((-1774), int0);
      
      String string0 = jSONObject0.toString((-1774));
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(string0);
      assertEquals("{\"e7&l\": -1774}", string0);
      
      JSONObject jSONObject2 = new JSONObject("{\"e7&l\": -1774}");
      assertEquals(1, jSONObject2.length());
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertNotNull(jSONObject2);
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 47 IFEQ L499 - true
   */

  @Test
  public void test20()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("fse", true);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      try {
        JSONArray jSONArray0 = jSONObject1.getJSONArray("fse");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fse\"] is not a JSONArray.
         //
      }
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I39 Branch 30 IFEQ L376 - false
   */

  @Test
  public void test21()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("a|", (Object) "a|");
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject1.accumulate("a|", (Object) jSONObject0);
      assertEquals(1, jSONObject2.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject2);
      
      JSONObject jSONObject3 = jSONObject0.append("a|", (Object) jSONObject2);
      assertEquals(1, jSONObject2.length());
      assertEquals(1, jSONObject3.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject3);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject3);
  }

  //Test case number: 22
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I125 Branch 107 IF_ICMPGE L1211 - false
   * Goal 2. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I194 Branch 109 IF_ICMPGE L1221 - false
   * Goal 3. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I89 Branch 127 IFEQ L1323 - false
   */

  @Test
  public void test22()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("unsupAlignFile", (Object) "unsupAlignFile");
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject1.append(" does not exist.", (Object) " does not exist.");
      assertEquals(2, jSONObject2.length());
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject0.length());
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject2);
      
      int int0 = jSONObject1.optInt("unsupAlignFile", 0);
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, int0);
      
      String string0 = JSONObject.valueToString(jSONObject1, 0, 19);
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(string0);
      assertEquals("{\n                   \"unsupAlignFile\": \"unsupAlignFile\",\n                   \" does not exist.\": [\" does not exist.\"]\n                   }", string0);
  }

  //Test case number: 23
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.getDouble(Ljava/lang/String;)D: I13 Branch 45 IFEQ L463 - false
   * Goal 2. wheel.json.JSONObject.optJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 65 IFEQ L815 - false
   */

  @Test
  public void test23()  throws Throwable  {
      String string0 = JSONObject.doubleToString(402.289867);
      assertNotNull(string0);
      assertEquals("402.289867", string0);
      
      HashMap<String, Tag> hashMap0 = new HashMap<String, Tag>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject0);
      
      LinkedList<ArrayCoreMap> linkedList0 = new LinkedList<ArrayCoreMap>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONObject jSONObject1 = jSONObject0.put("402.289867", (Collection) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      JSONArray jSONArray0 = jSONObject1.optJSONArray("402.289867");
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONArray0.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONArray0);
      
      JSONObject jSONObject2 = jSONObject0.put("402.289867", (-636L));
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject2.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNotNull(jSONObject2);
      
      double double0 = jSONObject0.getDouble("402.289867");
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertEquals((-636.0), double0, 0.01D);
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;J)Lwheel/json/JSONObject;: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      HashMap<Object, CoreLabel> hashMap0 = new HashMap<Object, CoreLabel>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      long long0 = jSONObject0.optLong("tr");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(2, jSONObject0.length());
      assertEquals(0L, long0);
      
      JSONObject jSONObject1 = jSONObject0.put("tr", 0L);
      assertEquals(3, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(3, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
  }

  //Test case number: 25
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/lang/Object;[Ljava/lang/String;)V: I20 Branch 25 IF_ICMPGE L304 - true
   * Goal 2. wheel.json.JSONObject.<init>(Ljava/lang/Object;[Ljava/lang/String;)V: I20 Branch 25 IF_ICMPGE L304 - false
   * Goal 3. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I20 Branch 70 IFNULL L978 - true
   */

  @Test
  public void test25()  throws Throwable  {
      String string0 = JSONObject.doubleToString(402.289867);
      assertNotNull(string0);
      assertEquals("402.289867", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[4] = "402.289867";
      JSONObject jSONObject0 = new JSONObject((Object) "402.289867", stringArray0);
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("402.289867", (Object) null);
      assertEquals(0, jSONObject1.length());
      assertEquals(0, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
  }

  //Test case number: 26
  /*
   * 6 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I12 Branch 4 IF_ICMPEQ L178 - true
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 5 LOOKUPSWITCH L183 Case 0 - false
   * Goal 3. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 6 LOOKUPSWITCH L183 Case 125 - false
   * Goal 4. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 7 LOOKUPSWITCH L183 Default-Case - true
   * Goal 5. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I61 Branch 8 IF_ICMPNE L198 - true
   * Goal 6. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I86 Branch 10 IF_ICMPEQ L202 - false
   */

  @Test
  public void test26()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{9![WCf&XPPo.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {9![WCf&XPPo.
         //
      }
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I40 Branch 53 IFNE L574 - false
   */

  @Test
  public void test27()  throws Throwable  {
      HashMap<WordTag, CoreLabel.GenericAnnotation<Double>> hashMap0 = new HashMap<WordTag, CoreLabel.GenericAnnotation<Double>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(stringArray0);
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I77 Branch 37 IFLE L404 - true
   */

  @Test
  public void test28()  throws Throwable  {
      String string0 = JSONObject.doubleToString(468.6598997751);
      assertNotNull(string0);
      assertEquals("468.6598997751", string0);
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optDouble(Ljava/lang/String;D)D: I13 Branch 64 IFEQ L764 - true
   */

  @Test
  public void test29()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      double double0 = jSONObject0.optDouble("log", (-2694.169766));
      assertEquals(0, jSONObject0.length());
      assertEquals((-2694.169766), double0, 0.01D);
  }

  //Test case number: 30
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 69 IFNONNULL L975 - false
   */

  @Test
  public void test30()  throws Throwable  {
      HashMap<CoreLabel, CoreLabel> hashMap0 = new HashMap<CoreLabel, CoreLabel>(2910);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject0);
      
      try {
        JSONObject jSONObject1 = jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
      }
  }

  //Test case number: 31
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I96 Branch 115 IFNE L1271 - true
   */

  @Test
  public void test31()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
      assertEquals("true", string0);
  }

  //Test case number: 32
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I6 Branch 52 IFNONNULL L568 - false
   */

  @Test
  public void test32()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  //Test case number: 33
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I6 Branch 73 IFNULL L1015 - true
   */

  @Test
  public void test33()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertNotNull(string0);
      assertEquals("\"\"", string0);
  }

  //Test case number: 34
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I138 Branch 119 IFEQ L1278 - false
   */

  @Test
  public void test34()  throws Throwable  {
      HashIndex<HashableCoreMap> hashIndex0 = new HashIndex<HashableCoreMap>();
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertNotNull(hashIndex0);
      
      String string0 = JSONObject.valueToString(hashIndex0);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertNotNull(string0);
      assertEquals("[]", string0);
  }

  //Test case number: 35
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/util/Collection;)Lwheel/json/JSONObject;: root-Branch
   */

  @Test
  public void test35()  throws Throwable  {
      HashMap<CoreLabel, CoreLabel> hashMap0 = new HashMap<CoreLabel, CoreLabel>(2911);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject0);
      
      HashIndex<WordTag> hashIndex0 = new HashIndex<WordTag>();
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertNotNull(hashIndex0);
      
      JSONObject jSONObject1 = jSONObject0.put("{9![WCfyXpPo.", (Collection) hashIndex0);
      assertEquals(1, jSONObject0.length());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
  }

  //Test case number: 36
  /*
   * 13 covered goals:
   * Goal 1. wheel.json.JSONObject.toString(I)Ljava/lang/String;: root-Branch
   * Goal 2. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I31 Branch 58 IFLE L670 - true
   * Goal 3. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I41 Branch 104 IF_ICMPNE L1197 - true
   * Goal 4. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I84 Branch 105 IFEQ L1204 - true
   * Goal 5. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I84 Branch 105 IFEQ L1204 - false
   * Goal 6. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I98 Branch 106 IF_ICMPLE L1206 - true
   * Goal 7. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I98 Branch 106 IF_ICMPLE L1206 - false
   * Goal 8. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I125 Branch 107 IF_ICMPGE L1211 - true
   * Goal 9. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I177 Branch 108 IF_ICMPLE L1219 - false
   * Goal 10. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I194 Branch 109 IF_ICMPGE L1221 - true
   * Goal 11. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I62 Branch 125 IFEQ L1317 - false
   * Goal 12. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I76 Branch 126 IFEQ L1320 - false
   * Goal 13. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I160 Branch 131 IFEQ L1335 - false
   */

  @Test
  public void test36()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "iQG1@fs&/#x.@n;=uI");
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = jSONObject0.toString(0);
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
      assertEquals("{\n\"bytes\": [\n105,\n81,\n71,\n49,\n64,\n102,\n115,\n38,\n47,\n35,\n120,\n46,\n64,\n110,\n59,\n61,\n117,\n73\n],\n\"class\": \"class java.lang.String\",\n\"empty\": false\n}", string0);
  }

  //Test case number: 37
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/util/Map;)Lwheel/json/JSONObject;: root-Branch
   */

  @Test
  public void test37()  throws Throwable  {
      HashMap<ArrayCoreMap, HashableCoreMap> hashMap0 = new HashMap<ArrayCoreMap, HashableCoreMap>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("L", (Map) hashMap0);
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
  }

  //Test case number: 38
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.optString(Ljava/lang/String;)Ljava/lang/String;: root-Branch
   * Goal 2. wheel.json.JSONObject.optString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I12 Branch 67 IFNULL L889 - false
   */

  @Test
  public void test38()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("b(5f:kk", (Object) jSONObject0);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      
      // Undeclared exception!
      try {
        String string0 = jSONObject1.optString("b(5f:kk");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 39
  /*
   * 14 covered goals:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I6 Branch 57 IFNONNULL L662 - true
   * Goal 2. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I31 Branch 58 IFLE L670 - false
   * Goal 3. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I38 Branch 59 IFGE L670 - false
   * Goal 4. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I45 Branch 60 IFGE L670 - false
   * Goal 5. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I54 Branch 61 IFLE L671 - true
   * Goal 6. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I54 Branch 61 IFLE L671 - false
   * Goal 7. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I77 Branch 62 IFLE L674 - false
   * Goal 8. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I6 Branch 98 IFNULL L1113 - false
   * Goal 9. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I12 Branch 99 IFNE L1113 - true
   * Goal 10. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I34 Branch 100 IF_ICMPGE L1117 - true
   * Goal 11. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I34 Branch 100 IF_ICMPGE L1117 - false
   * Goal 12. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I13 Branch 111 IFEQ L1253 - false
   * Goal 13. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I82 Branch 114 IFEQ L1268 - false
   * Goal 14. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I108 Branch 117 IFEQ L1271 - false
   */

  @Test
  public void test39()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Short short0 = new Short((short) (-1336));
      assertEquals((short) (-1336), (short)short0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(937, (double) short0);
      assertEquals(938, jSONArray1.length());
      assertEquals(938, jSONArray0.length());
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray0.put((Object) jSONArray1);
      assertEquals(939, jSONArray1.length());
      assertEquals(939, jSONArray2.length());
      assertEquals(939, jSONArray0.length());
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertNotNull(jSONArray2);
      
      JSONArray jSONArray3 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(0, jSONObject0.length());
      assertEquals(939, jSONArray3.length());
      assertEquals(939, jSONArray0.length());
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      assertFalse(jSONArray3.equals((Object)jSONArray0));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertFalse(jSONArray0.equals((Object)jSONArray3));
      assertNotSame(jSONArray3, jSONArray1);
      assertNotSame(jSONArray3, jSONArray0);
      assertNotSame(jSONArray3, jSONArray2);
      assertNotSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertNotNull(jSONArray3);
  }

  //Test case number: 40
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;D)Lwheel/json/JSONObject;: root-Branch
   */

  @Test
  public void test40()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("is", (double) 125);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
  }

  //Test case number: 41
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I6 Branch 110 IFNULL L1253 - true
   */

  @Test
  public void test41()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  //Test case number: 42
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 26 IFNONNULL L346 - true
   * Goal 2. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I52 Branch 28 IFEQ L350 - true
   * Goal 3. wheel.json.JSONObject.getLong(Ljava/lang/String;)J: I13 Branch 49 IFEQ L536 - true
   */

  @Test
  public void test42()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("unsupAlignFile", (Object) "unsupAlignFile");
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject1.accumulate("unsupAlignFile", (Object) jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject2);
      
      try {
        long long0 = jSONObject2.getLong("unsupAlignFile");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"unsupAlignFile\"] is not a number.
         //
      }
  }

  //Test case number: 43
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I13 Branch 122 IFEQ L1304 - false
   */

  @Test
  public void test43()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
      
      String string0 = JSONObject.valueToString(object0, 973, 973);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  //Test case number: 44
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I12 Branch 67 IFNULL L889 - true
   */

  @Test
  public void test44()  throws Throwable  {
      HashMap<TaggedWord, Object> hashMap0 = new HashMap<TaggedWord, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      assertEquals(2, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(jSONObject0);
      
      String string0 = jSONObject0.optString("put", "put");
      assertEquals(2, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(string0);
      assertEquals("put", string0);
  }

  //Test case number: 45
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject$Null.toString()Ljava/lang/String;: root-Branch
   * Goal 2. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 29 IFNONNULL L374 - true
   * Goal 3. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I39 Branch 30 IFEQ L376 - true
   */

  @Test
  public void test45()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      HashMap<Class<ArrayCoreMap>, WordTag> hashMap0 = new HashMap<Class<ArrayCoreMap>, WordTag>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONArray jSONArray1 = jSONArray0.put(1338, (Map) hashMap0);
      assertEquals(1339, jSONArray1.length());
      assertEquals(1339, jSONArray0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      assertNotNull(jSONArray1);
      
      JSONObject jSONObject0 = jSONArray1.toJSONObject(jSONArray0);
      assertEquals(1339, jSONArray1.length());
      assertEquals(1339, jSONArray0.length());
      assertEquals(2, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("[8V", (Object) jSONObject0);
      assertEquals(3, jSONObject1.length());
      assertEquals(1339, jSONArray1.length());
      assertEquals(1339, jSONArray0.length());
      assertEquals(3, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      
      WordTag wordTag0 = WordTag.valueOf("[8V");
      assertEquals("[8V", wordTag0.word());
      assertEquals("[8V", wordTag0.value());
      assertNull(wordTag0.tag());
      assertNotNull(wordTag0);
      
      try {
        JSONObject jSONObject2 = jSONObject0.append("[8V", (Object) wordTag0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[[8V] is not a JSONArray.
         //
      }
  }

  //Test case number: 46
  /*
   * 10 covered goals:
   * Goal 1. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I18 Branch 55 IFEQ L648 - false
   * Goal 2. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I37 Branch 56 IFNE L651 - true
   * Goal 3. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 81 LOOKUPSWITCH L1030 Case 34 - true
   * Goal 4. wheel.json.JSONObject.toString()Ljava/lang/String;: I19 Branch 101 IFEQ L1140 - false
   * Goal 5. wheel.json.JSONObject.toString()Ljava/lang/String;: I28 Branch 102 IF_ICMPLE L1141 - true
   * Goal 6. wheel.json.JSONObject.toString()Ljava/lang/String;: I28 Branch 102 IF_ICMPLE L1141 - false
   * Goal 7. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I102 Branch 116 IFNE L1271 - true
   * Goal 8. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I121 Branch 118 IFEQ L1275 - true
   * Goal 9. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I138 Branch 119 IFEQ L1278 - true
   * Goal 10. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I156 Branch 120 IFEQ L1281 - true
   */

  @Test
  public void test46()  throws Throwable  {
      LabeledWord labeledWord0 = new LabeledWord();
      assertEquals(-1, labeledWord0.beginPosition());
      assertEquals(-1, labeledWord0.endPosition());
      assertNull(labeledWord0.word());
      assertNull(labeledWord0.value());
      assertNotNull(labeledWord0);
      
      JSONObject jSONObject0 = new JSONObject((Object) labeledWord0);
      assertEquals(1, jSONObject0.length());
      assertEquals(-1, labeledWord0.beginPosition());
      assertEquals(-1, labeledWord0.endPosition());
      assertNull(labeledWord0.word());
      assertNull(labeledWord0.value());
      assertNotNull(jSONObject0);
      
      Tag tag0 = new Tag("v1^3fYs\")z@Z8K~");
      assertEquals(-1, tag0.beginPosition());
      assertEquals("v1^3fYs\")z@Z8K~", tag0.tag());
      assertEquals("v1^3fYs\")z@Z8K~", tag0.value());
      assertEquals(-1, tag0.endPosition());
      assertNotNull(tag0);
      
      JSONObject jSONObject1 = jSONObject0.put("v1^3fYs\")z@Z8K~", (Object) tag0);
      assertEquals(2, jSONObject1.length());
      assertEquals(-1, tag0.beginPosition());
      assertEquals("v1^3fYs\")z@Z8K~", tag0.tag());
      assertEquals("v1^3fYs\")z@Z8K~", tag0.value());
      assertEquals(-1, tag0.endPosition());
      assertEquals(2, jSONObject0.length());
      assertEquals(-1, labeledWord0.beginPosition());
      assertEquals(-1, labeledWord0.endPosition());
      assertNull(labeledWord0.word());
      assertNull(labeledWord0.value());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      
      JSONArray jSONArray0 = jSONObject1.names();
      assertEquals(2, jSONObject1.length());
      assertEquals(-1, tag0.beginPosition());
      assertEquals("v1^3fYs\")z@Z8K~", tag0.tag());
      assertEquals("v1^3fYs\")z@Z8K~", tag0.value());
      assertEquals(-1, tag0.endPosition());
      assertEquals(2, jSONObject0.length());
      assertEquals(-1, labeledWord0.beginPosition());
      assertEquals(-1, labeledWord0.endPosition());
      assertNull(labeledWord0.word());
      assertNull(labeledWord0.value());
      assertEquals(2, jSONArray0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONArray0);
      
      String string0 = JSONObject.valueToString(jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertEquals(-1, labeledWord0.beginPosition());
      assertEquals(-1, labeledWord0.endPosition());
      assertNull(labeledWord0.word());
      assertNull(labeledWord0.value());
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(string0);
      assertEquals("{\"v1^3fYs\\\")z@Z8K~\":\"v1^3fYs\\\")z@Z8K~\",\"class\":\"class edu.stanford.nlp.ling.LabeledWord\"}", string0);
  }

  //Test case number: 47
  /*
   * 8 covered goals:
   * Goal 1. wheel.json.JSONObject.remove(Ljava/lang/String;)Ljava/lang/Object;: root-Branch
   * Goal 2. wheel.json.JSONObject.optLong(Ljava/lang/String;)J: root-Branch
   * Goal 3. wheel.json.JSONObject.<init>(Lwheel/json/JSONObject;[Ljava/lang/String;)V: I15 Branch 3 IF_ICMPGE L162 - true
   * Goal 4. wheel.json.JSONObject.<init>(Lwheel/json/JSONObject;[Ljava/lang/String;)V: I15 Branch 3 IF_ICMPGE L162 - false
   * Goal 5. wheel.json.JSONObject.getLong(Ljava/lang/String;)J: I13 Branch 49 IFEQ L536 - false
   * Goal 6. wheel.json.JSONObject.optJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 66 IFEQ L829 - true
   * Goal 7. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 71 IFNULL L999 - true
   * Goal 8. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I11 Branch 72 IFNULL L999 - true
   */

  @Test
  public void test47()  throws Throwable  {
      HashMap<CoreLabel, CoreLabel> hashMap0 = new HashMap<CoreLabel, CoreLabel>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("e7&", (-1774));
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      long long0 = jSONObject1.optLong("e7&");
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals((-1774L), long0);
      
      Integer integer0 = (Integer)jSONObject1.remove("e7&");
      assertEquals(0, jSONObject0.length());
      assertEquals(0, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals((-1774), (int)integer0);
      
      JSONObject jSONObject2 = jSONObject1.optJSONObject("e7&");
      assertEquals(0, jSONObject0.length());
      assertEquals(0, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNull(jSONObject2);
      
      String[] stringArray0 = new String[11];
      stringArray0[0] = "e7&";
      JSONObject jSONObject3 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject3.length());
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertNotSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject3, jSONObject0);
      assertNotSame(jSONObject3, jSONObject1);
      assertNotNull(jSONObject3);
  }

  //Test case number: 48
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I18 Branch 55 IFEQ L648 - true
   * Goal 2. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I37 Branch 56 IFNE L651 - false
   */

  @Test
  public void test48()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
  }

  //Test case number: 49
  /*
   * 10 covered goals:
   * Goal 1. wheel.json.JSONObject.isNull(Ljava/lang/String;)Z: root-Branch
   * Goal 2. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I6 Branch 1 IFNULL L115 - true
   * Goal 3. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 26 IFNONNULL L346 - false
   * Goal 4. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I26 Branch 27 IFEQ L347 - true
   * Goal 5. wheel.json.JSONObject.opt(Ljava/lang/String;)Ljava/lang/Object;: I6 Branch 63 IFNONNULL L688 - false
   * Goal 6. wheel.json.JSONObject.put(Ljava/lang/String;Z)Lwheel/json/JSONObject;: I8 Branch 68 IFEQ L902 - false
   * Goal 7. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I6 Branch 91 IFNULL L1088 - true
   * Goal 8. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I14 Branch 92 IFEQ L1089 - false
   * Goal 9. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I23 Branch 93 IFNE L1090 - false
   * Goal 10. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I30 Branch 94 IFEQ L1090 - true
   */

  @Test
  public void test49()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("un@Nd(JA", (Object) jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject0.put("un@Nd(JA", true);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertNotNull(jSONObject2);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(937, (double) 937);
      assertEquals(938, jSONArray1.length());
      assertEquals(938, jSONArray0.length());
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      assertNotNull(jSONArray1);
      
      JSONObject jSONObject3 = jSONObject0.append("!:-#4CyEB[4k;w", (Object) null);
      assertEquals(2, jSONObject3.length());
      assertEquals(2, jSONObject0.length());
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertNotNull(jSONObject3);
      
      boolean boolean0 = jSONObject1.isNull((String) null);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertTrue(boolean0);
  }

  //Test case number: 50
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.optBoolean(Ljava/lang/String;Z)Z: root-Branch
   * Goal 2. wheel.json.JSONObject.optLong(Ljava/lang/String;J)J: root-Branch
   * Goal 3. wheel.json.JSONObject.optBoolean(Ljava/lang/String;)Z: root-Branch
   */

  @Test
  public void test50()  throws Throwable  {
      HashMap<CoreLabel, CoreLabel> hashMap0 = new HashMap<CoreLabel, CoreLabel>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      long long0 = jSONObject0.optLong("ew&A", (long) (-1774));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertEquals((-1774L), long0);
      
      boolean boolean0 = jSONObject0.optBoolean("ew&A");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertFalse(boolean0);
  }

  //Test case number: 51
  /*
   * 9 covered goals:
   * Goal 1. wheel.json.JSONObject.toString()Ljava/lang/String;: I19 Branch 101 IFEQ L1140 - true
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I6 Branch 110 IFNULL L1253 - false
   * Goal 3. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I13 Branch 111 IFEQ L1253 - true
   * Goal 4. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I25 Branch 112 IFEQ L1256 - true
   * Goal 5. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I82 Branch 114 IFEQ L1268 - true
   * Goal 6. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I96 Branch 115 IFNE L1271 - false
   * Goal 7. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I102 Branch 116 IFNE L1271 - false
   * Goal 8. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I108 Branch 117 IFEQ L1271 - true
   * Goal 9. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I121 Branch 118 IFEQ L1275 - false
   */

  @Test
  public void test51()  throws Throwable  {
      HashMap<ArrayCoreMap, WordTag> hashMap0 = new HashMap<ArrayCoreMap, WordTag>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  //Test case number: 52
  /*
   * 5 covered goals:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I6 Branch 52 IFNONNULL L568 - true
   * Goal 2. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I40 Branch 53 IFNE L574 - true
   * Goal 3. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I60 Branch 54 IF_ICMPGE L578 - true
   * Goal 4. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I60 Branch 54 IF_ICMPGE L578 - false
   * Goal 5. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I177 Branch 86 IF_ICMPLT L1058 - true
   */

  @Test
  public void test52()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertNotNull(stringArray0);
      
      try {
        JSONArray jSONArray0 = jSONObject0.getJSONArray("j\u0000&Qkudz55e6.h8Jm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"j\\u0000&Qkudz55e6.h8Jm\"] not found.
         //
      }
  }

  //Test case number: 53
  /*
   * 9 covered goals:
   * Goal 1. wheel.json.JSONObject.keys()Ljava/util/Iterator;: root-Branch
   * Goal 2. wheel.json.JSONObject.length()I: root-Branch
   * Goal 3. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 29 IFNONNULL L374 - false
   * Goal 4. wheel.json.JSONObject.get(Ljava/lang/String;)Ljava/lang/Object;: I12 Branch 38 IFNONNULL L421 - false
   * Goal 5. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I11 Branch 50 IFNE L548 - false
   * Goal 6. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I11 Branch 103 IFNE L1190 - true
   * Goal 7. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I11 Branch 103 IFNE L1190 - false
   * Goal 8. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I41 Branch 104 IF_ICMPNE L1197 - false
   * Goal 9. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I105 Branch 128 IFEQ L1326 - false
   */

  @Test
  public void test53()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = jSONObject0.toString(0, 0);
      assertEquals(0, jSONObject0.length());
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertNull(stringArray0);
      
      JSONObject jSONObject1 = jSONObject0.append("a", (Object) "a");
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      
      String string1 = jSONObject1.toString(0, 0);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(string1);
      assertEquals("{\"a\": [\"a\"]}", string1);
      
      try {
        long long0 = jSONObject1.getLong("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
      }
  }

  //Test case number: 54
  /*
   * 11 covered goals:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I12 Branch 74 IFNE L1015 - false
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I6 Branch 121 IFNULL L1304 - false
   * Goal 3. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I13 Branch 122 IFEQ L1304 - true
   * Goal 4. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I25 Branch 123 IFEQ L1308 - true
   * Goal 5. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I62 Branch 125 IFEQ L1317 - true
   * Goal 6. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I76 Branch 126 IFEQ L1320 - true
   * Goal 7. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I89 Branch 127 IFEQ L1323 - true
   * Goal 8. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I105 Branch 128 IFEQ L1326 - true
   * Goal 9. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I121 Branch 129 IFEQ L1329 - true
   * Goal 10. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I140 Branch 130 IFEQ L1332 - true
   * Goal 11. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I160 Branch 131 IFEQ L1335 - true
   */

  @Test
  public void test54()  throws Throwable  {
      String string0 = JSONObject.valueToString("", 6789, 6789);
      assertNotNull(string0);
      assertEquals("\"\"", string0);
  }

  //Test case number: 55
  /*
   * 8 covered goals:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I7 Branch 31 IFNE L393 - false
   * Goal 2. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I13 Branch 32 IFEQ L393 - true
   * Goal 3. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I31 Branch 33 IFLE L400 - false
   * Goal 4. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I38 Branch 34 IFGE L400 - false
   * Goal 5. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I45 Branch 35 IFGE L400 - false
   * Goal 6. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I54 Branch 36 IFLE L401 - true
   * Goal 7. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I54 Branch 36 IFLE L401 - false
   * Goal 8. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I77 Branch 37 IFLE L404 - false
   */

  @Test
  public void test55()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertNotNull(string0);
      assertEquals("0", string0);
  }

  //Test case number: 56
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/lang/String;)V: root-Branch
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I12 Branch 4 IF_ICMPEQ L178 - false
   */

  @Test
  public void test56()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(".w3l6.L+3MeT6DoXI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of .w3l6.L+3MeT6DoXI
         //
      }
  }

  //Test case number: 57
  /*
   * 29 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>()V: root-Branch
   * Goal 2. wheel.json.JSONObject.put(Ljava/lang/String;I)Lwheel/json/JSONObject;: root-Branch
   * Goal 3. wheel.json.JSONObject.optInt(Ljava/lang/String;I)I: root-Branch
   * Goal 4. wheel.json.JSONObject.optInt(Ljava/lang/String;)I: root-Branch
   * Goal 5. wheel.json.JSONObject.<init>(Ljava/util/Map;)V: I11 Branch 16 IFNONNULL L234 - true
   * Goal 6. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I33 Branch 17 IF_ICMPGE L263 - true
   * Goal 7. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I33 Branch 17 IF_ICMPGE L263 - false
   * Goal 8. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I58 Branch 18 IFLE L268 - true
   * Goal 9. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I58 Branch 18 IFLE L268 - false
   * Goal 10. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I78 Branch 19 IFLE L270 - true
   * Goal 11. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I78 Branch 19 IFLE L270 - false
   * Goal 12. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I92 Branch 20 IFLE L273 - true
   * Goal 13. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I92 Branch 20 IFLE L273 - false
   * Goal 14. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I100 Branch 21 IFEQ L273 - false
   * Goal 15. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I107 Branch 22 IFNE L273 - true
   * Goal 16. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I107 Branch 22 IFNE L273 - false
   * Goal 17. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I116 Branch 23 IF_ICMPNE L276 - true
   * Goal 18. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I135 Branch 24 IFNE L278 - false
   * Goal 19. wheel.json.JSONObject.get(Ljava/lang/String;)Ljava/lang/Object;: I12 Branch 38 IFNONNULL L421 - true
   * Goal 20. wheel.json.JSONObject.getDouble(Ljava/lang/String;)D: I13 Branch 45 IFEQ L463 - true
   * Goal 21. wheel.json.JSONObject.getInt(Ljava/lang/String;)I: I13 Branch 46 IFEQ L484 - true
   * Goal 22. wheel.json.JSONObject.put(Ljava/lang/String;Z)Lwheel/json/JSONObject;: I8 Branch 68 IFEQ L902 - true
   * Goal 23. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 69 IFNONNULL L975 - true
   * Goal 24. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I20 Branch 70 IFNULL L978 - false
   * Goal 25. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 71 IFNULL L999 - false
   * Goal 26. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I11 Branch 72 IFNULL L999 - false
   * Goal 27. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I6 Branch 91 IFNULL L1088 - false
   * Goal 28. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I14 Branch 92 IFEQ L1089 - true
   * Goal 29. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I45 Branch 95 IFEQ L1094 - true
   */

  @Test
  public void test57()  throws Throwable  {
      HashMap<TaggedWord, JSONArray> hashMap0 = new HashMap<TaggedWord, JSONArray>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("E^/`/JOB8x=", false);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject1.put("000", 2721);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(2, jSONObject2.length());
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNotNull(jSONObject2);
      
      int int0 = jSONObject2.optInt("E^/`/JOB8x=");
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(2, jSONObject2.length());
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(0, int0);
      
      HashMap<WordTag, Class<TypesafeMap.Key<LabeledWord>>> hashMap1 = new HashMap<WordTag, Class<TypesafeMap.Key<LabeledWord>>>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      JSONObject jSONObject3 = new JSONObject((Object) hashMap1);
      assertEquals(2, jSONObject3.length());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertNotSame(jSONObject3, jSONObject2);
      assertNotSame(jSONObject3, jSONObject1);
      assertNotSame(jSONObject3, jSONObject0);
      assertNotNull(jSONObject3);
      
      JSONObject jSONObject4 = jSONObject3.putOpt("000", (Object) "000");
      assertEquals(3, jSONObject3.length());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(3, jSONObject4.length());
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject4.equals((Object)jSONObject2));
      assertFalse(jSONObject4.equals((Object)jSONObject0));
      assertFalse(jSONObject4.equals((Object)jSONObject1));
      assertSame(jSONObject3, jSONObject4);
      assertNotSame(jSONObject3, jSONObject2);
      assertNotSame(jSONObject3, jSONObject1);
      assertNotSame(jSONObject3, jSONObject0);
      assertSame(jSONObject4, jSONObject3);
      assertNotSame(jSONObject4, jSONObject2);
      assertNotSame(jSONObject4, jSONObject0);
      assertNotSame(jSONObject4, jSONObject1);
      assertNotNull(jSONObject4);
  }

  //Test case number: 58
  /*
   * 19 covered goals:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I6 Branch 73 IFNULL L1015 - false
   * Goal 2. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I12 Branch 74 IFNE L1015 - true
   * Goal 3. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I51 Branch 75 IF_ICMPGE L1027 - true
   * Goal 4. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I51 Branch 75 IF_ICMPGE L1027 - false
   * Goal 5. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 76 LOOKUPSWITCH L1030 Case 8 - false
   * Goal 6. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 77 LOOKUPSWITCH L1030 Case 9 - false
   * Goal 7. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 78 LOOKUPSWITCH L1030 Case 10 - false
   * Goal 8. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 79 LOOKUPSWITCH L1030 Case 12 - false
   * Goal 9. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 80 LOOKUPSWITCH L1030 Case 13 - false
   * Goal 10. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 81 LOOKUPSWITCH L1030 Case 34 - false
   * Goal 11. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 82 LOOKUPSWITCH L1030 Case 47 - true
   * Goal 12. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 82 LOOKUPSWITCH L1030 Case 47 - false
   * Goal 13. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 83 LOOKUPSWITCH L1030 Case 92 - false
   * Goal 14. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 84 LOOKUPSWITCH L1030 Default-Case - true
   * Goal 15. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 84 LOOKUPSWITCH L1030 Default-Case - false
   * Goal 16. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I91 Branch 85 IF_ICMPNE L1037 - true
   * Goal 17. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I177 Branch 86 IF_ICMPLT L1058 - false
   * Goal 18. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I183 Branch 87 IF_ICMPLT L1058 - true
   * Goal 19. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I196 Branch 89 IF_ICMPLT L1058 - true
   */

  @Test
  public void test58()  throws Throwable  {
      String string0 = JSONObject.quote("/[a6");
      assertNotNull(string0);
      assertEquals("\"/[a6\"", string0);
  }

  //Test case number: 59
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/util/Map;)V: I11 Branch 16 IFNONNULL L234 - false
   * Goal 2. wheel.json.JSONObject.opt(Ljava/lang/String;)Ljava/lang/Object;: I6 Branch 63 IFNONNULL L688 - true
   * Goal 3. wheel.json.JSONObject.optJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 65 IFEQ L815 - true
   */

  @Test
  public void test59()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.optJSONArray("CG(%t@=.gD -{");
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
  }
}
