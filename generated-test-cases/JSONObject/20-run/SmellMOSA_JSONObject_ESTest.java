/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 18 03:42:41 GMT 2015
 */

package wheel.json;

import static org.junit.Assert.*;
import org.junit.Test;
import edu.stanford.nlp.ling.CategoryWordTag;
import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.ling.Label;
import edu.stanford.nlp.ling.LabeledWord;
import edu.stanford.nlp.ling.StringLabel;
import edu.stanford.nlp.ling.Tag;
import edu.stanford.nlp.ling.TaggedWord;
import edu.stanford.nlp.ling.Word;
import edu.stanford.nlp.ling.WordLemmaTag;
import edu.stanford.nlp.ling.WordTag;
import edu.stanford.nlp.pipeline.Annotation;
import edu.stanford.nlp.trees.SimpleTree;
import edu.stanford.nlp.trees.Tree;
import edu.stanford.nlp.trees.TreeGraphNode;
import edu.stanford.nlp.trees.TreeGraphNodeFactory;
import edu.stanford.nlp.util.CoreMap;
import edu.stanford.nlp.util.DeltaIndex;
import edu.stanford.nlp.util.HashIndex;
import edu.stanford.nlp.util.HashableCoreMap;
import edu.stanford.nlp.util.Index;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.InputStream;
import java.io.StringBufferInputStream;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I12 Branch 99 IFNE L1113 - false
   */

  @Test
  public void test00()  throws Throwable  {
      HashMap<StringBufferInputStream, Integer> hashMap0 = new HashMap<StringBufferInputStream, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, jSONArray0.length());
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I194 Branch 109 IF_ICMPGE L1221 - false
   */

  @Test
  public void test01()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String[] stringArray0 = new String[10];
      HashMap<LinkedList<Object>, WordLemmaTag> hashMap1 = new HashMap<LinkedList<Object>, WordLemmaTag>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Object) hashMap1, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      LinkedHashSet<HashableCoreMap> linkedHashSet0 = new LinkedHashSet<HashableCoreMap>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JSONObject jSONObject1 = jSONObject0.put("su", (Collection) linkedHashSet0);
      assertNotNull(jSONObject1);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONObject jSONObject2 = jSONObject0.put("Expected a ':' after a key", (Map) hashMap0);
      assertNotNull(jSONObject2);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject2.length());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      
      String string0 = jSONObject2.toString(44, 44);
      assertNotNull(string0);
      assertEquals("{\n                                                                                        \"su\": [],\n                                                                                        \"Expected a ':' after a key\": {}\n                                            }", string0);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject2.length());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 66 IFEQ L829 - false
   */

  @Test
  public void test02()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      HashMap<Long, CoreLabel> hashMap0 = new HashMap<Long, CoreLabel>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("ERROD: to use SUTime, sentences must have TextAnnotationXset, or the individual tokens must have OriginalTextAnnotation 0r TextAnnotation set!", (Map) hashMap0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      JSONObject jSONObject2 = jSONObject1.optJSONObject("ERROD: to use SUTime, sentences must have TextAnnotationXset, or the individual tokens must have OriginalTextAnnotation 0r TextAnnotation set!");
      assertNotNull(jSONObject2);
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertEquals(1, jSONObject1.length());
      assertEquals(0, jSONObject2.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I6 Branch 98 IFNULL L1113 - true
   */

  @Test
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[16];
      JSONObject jSONObject0 = new JSONObject((Object) "A1ter SQ flattening:          D   ", stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONArray jSONArray0 = jSONObject0.optJSONArray(stringArray0[1]);
      assertNull(jSONArray0);
      assertEquals(0, jSONObject0.length());
      
      JSONArray jSONArray1 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray1);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 7 LOOKUPSWITCH L183 Default-Case - true
   */

  @Test
  public void test04()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{/1Ryr;0G");
      assertNotNull(jSONTokener0);
      assertTrue(jSONTokener0.more());
      
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 1 of {/1Ryr;0G
         //
      }
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I61 Branch 97 IFEQ L1095 - false
   */

  @Test
  public void test05()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      Float float0 = new Float(Double.NaN);
      assertEquals(Float.NaN, (float)float0, 0.01F);
      
      try {
        JSONObject jSONObject1 = jSONObject0.put("or", (Object) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
      }
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I160 Branch 131 IFEQ L1335 - false
   */

  @Test
  public void test06()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "After DateTreeTransformr:       ");
      assertNotNull(jSONObject0);
      assertEquals(3, jSONObject0.length());
      
      String string0 = jSONObject0.toString(167);
      assertNotNull(string0);
      assertEquals("{\n                                                                                                                                                                       \"bytes\": [\n                                                                                                                                                                                                                                                                                                                                              65,\n                                                                                                                                                                                                                                                                                                                                              102,\n                                                                                                                                                                                                                                                                                                                                              116,\n                                                                                                                                                                                                                                                                                                                                              101,\n                                                                                                                                                                                                                                                                                                                                              114,\n                                                                                                                                                                                                                                                                                                                                              32,\n                                                                                                                                                                                                                                                                                                                                              68,\n                                                                                                                                                                                                                                                                                                                                              97,\n                                                                                                                                                                                                                                                                                                                                              116,\n                                                                                                                                                                                                                                                                                                                                              101,\n                                                                                                                                                                                                                                                                                                                                              84,\n                                                                                                                                                                                                                                                                                                                                              114,\n                                                                                                                                                                                                                                                                                                                                              101,\n                                                                                                                                                                                                                                                                                                                                              101,\n                                                                                                                                                                                                                                                                                                                                              84,\n                                                                                                                                                                                                                                                                                                                                              114,\n                                                                                                                                                                                                                                                                                                                                              97,\n                                                                                                                                                                                                                                                                                                                                              110,\n                                                                                                                                                                                                                                                                                                                                              115,\n                                                                                                                                                                                                                                                                                                                                              102,\n                                                                                                                                                                                                                                                                                                                                              111,\n                                                                                                                                                                                                                                                                                                                                              114,\n                                                                                                                                                                                                                                                                                                                                              109,\n                                                                                                                                                                                                                                                                                                                                              114,\n                                                                                                                                                                                                                                                                                                                                              58,\n                                                                                                                                                                                                                                                                                                                                              32,\n                                                                                                                                                                                                                                                                                                                                              32,\n                                                                                                                                                                                                                                                                                                                                              32,\n                                                                                                                                                                                                                                                                                                                                              32,\n                                                                                                                                                                                                                                                                                                                                              32,\n                                                                                                                                                                                                                                                                                                                                              32,\n                                                                                                                                                                                                                                                                                                                                              32\n                                                                                                                                                                       ],\n                                                                                                                                                                       \"class\": \"class java.lang.String\",\n                                                                                                                                                                       \"empty\": false\n}", string0);
      assertEquals(3, jSONObject0.length());
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I65 Branch 134 IFEQ L1365 - false
   */

  @Test
  public void test07()  throws Throwable  {
      HashIndex<StringLabel> hashIndex0 = new HashIndex<StringLabel>();
      assertNotNull(hashIndex0);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      
      JSONArray jSONArray0 = new JSONArray((Collection) hashIndex0);
      assertNotNull(jSONArray0);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertEquals(0, jSONArray0.length());
      
      JSONArray jSONArray1 = jSONArray0.put(3533, 3533);
      assertNotNull(jSONArray1);
      assertEquals(3534, jSONArray1.length());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertEquals(3534, jSONArray0.length());
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      
      JSONObject jSONObject0 = jSONArray1.toJSONObject(jSONArray0);
      assertNotNull(jSONObject0);
      assertEquals(3534, jSONArray1.length());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertEquals(3534, jSONArray0.length());
      assertEquals(2, jSONObject0.length());
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      
      JSONObject jSONObject1 = jSONObject0.put("key", (Map) null);
      assertNotNull(jSONObject1);
      assertEquals(3, jSONObject1.length());
      assertEquals(3534, jSONArray1.length());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertEquals(3534, jSONArray0.length());
      assertEquals(3, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONObject0, jSONObject1);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      CharArrayWriter charArrayWriter1 = (CharArrayWriter)jSONObject1.write((Writer) charArrayWriter0);
      assertNotNull(charArrayWriter1);
      assertEquals(3, jSONObject1.length());
      assertEquals("{\"null\":null,\"3533\":3533,\"key\":{}}", charArrayWriter1.toString());
      assertEquals(34, charArrayWriter1.size());
      assertEquals(3534, jSONArray1.length());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertEquals(3534, jSONArray0.length());
      assertEquals("{\"null\":null,\"3533\":3533,\"key\":{}}", charArrayWriter0.toString());
      assertEquals(34, charArrayWriter0.size());
      assertEquals(3, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 8
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I6 Branch 1 IFNULL L115 - false
   * Goal 2. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I12 Branch 2 IF_ACMPNE L115 - true
   */

  @Test
  public void test08()  throws Throwable  {
      SimpleTree simpleTree0 = new SimpleTree();
      assertNotNull(simpleTree0);
      assertNull(simpleTree0.value());
      assertEquals(Double.NaN, simpleTree0.score(), 0.01D);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "jto-i";
      JSONObject jSONObject0 = new JSONObject((Object) simpleTree0, stringArray0);
      assertNotNull(jSONObject0);
      assertNull(simpleTree0.value());
      assertEquals(Double.NaN, simpleTree0.score(), 0.01D);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.append("jto-i", (Object) "jto-i");
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertNull(simpleTree0.value());
      assertEquals(Double.NaN, simpleTree0.score(), 0.01D);
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      boolean boolean0 = jSONObject1.isNull("jto-i");
      assertFalse(boolean0);
      assertEquals(1, jSONObject1.length());
      assertNull(simpleTree0.value());
      assertEquals(Double.NaN, simpleTree0.score(), 0.01D);
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I7 Branch 31 IFNE L393 - true
   */

  @Test
  public void test09()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.POSITIVE_INFINITY);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  //Test case number: 10
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.getString(Ljava/lang/String;)Ljava/lang/String;: root-Branch
   * Goal 2. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I39 Branch 30 IFEQ L376 - true
   * Goal 3. wheel.json.JSONObject.optDouble(Ljava/lang/String;D)D: I13 Branch 64 IFEQ L764 - false
   */

  @Test
  public void test10()  throws Throwable  {
      SimpleTree simpleTree0 = new SimpleTree();
      assertNotNull(simpleTree0);
      assertEquals(Double.NaN, simpleTree0.score(), 0.01D);
      assertNull(simpleTree0.value());
      
      JSONObject jSONObject0 = new JSONObject((Object) simpleTree0);
      assertNotNull(jSONObject0);
      assertEquals(9, jSONObject0.length());
      assertEquals(Double.NaN, simpleTree0.score(), 0.01D);
      assertNull(simpleTree0.value());
      
      JSONObject jSONObject1 = jSONObject0.put("createSubtree", 2615);
      assertNotNull(jSONObject1);
      assertEquals(10, jSONObject0.length());
      assertEquals(10, jSONObject1.length());
      assertEquals(Double.NaN, simpleTree0.score(), 0.01D);
      assertNull(simpleTree0.value());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      double double0 = jSONObject1.optDouble("createSubtree", (double) 2615);
      assertEquals(2615.0, double0, 0.01D);
      assertEquals(10, jSONObject0.length());
      assertEquals(10, jSONObject1.length());
      assertEquals(Double.NaN, simpleTree0.score(), 0.01D);
      assertNull(simpleTree0.value());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      String string0 = jSONObject0.getString("createSubtree");
      assertNotNull(string0);
      assertEquals("2615", string0);
      assertEquals(10, jSONObject0.length());
      assertEquals(Double.NaN, simpleTree0.score(), 0.01D);
      assertNull(simpleTree0.value());
      assertSame(jSONObject0, jSONObject1);
      
      JSONObject jSONObject2 = jSONObject1.put("2615", 2615);
      assertNotNull(jSONObject2);
      assertEquals(11, jSONObject0.length());
      assertEquals(11, jSONObject1.length());
      assertEquals(11, jSONObject2.length());
      assertEquals(Double.NaN, simpleTree0.score(), 0.01D);
      assertNull(simpleTree0.value());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      
      try {
        JSONObject jSONObject3 = jSONObject2.append("2615", (Object) jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[2615] is not a JSONArray.
         //
      }
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 48 IFEQ L517 - true
   */

  @Test
  public void test11()  throws Throwable  {
      HashMap<TaggedWord, TaggedWord> hashMap0 = new HashMap<TaggedWord, TaggedWord>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("ERROR: to use SUTime, sentences must have TextAnnotation set, or the individual tokens must have OriginalTextAnnotation or TextAnnotation set!", 2170L);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      try {
        JSONObject jSONObject2 = jSONObject1.getJSONObject("ERROR: to use SUTime, sentences must have TextAnnotation set, or the individual tokens must have OriginalTextAnnotation or TextAnnotation set!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ERROR: to use SUTime, sentences must have TextAnnotation set, or the individual tokens must have OriginalTextAnnotation or TextAnnotation set!\"] is not a JSONObject.
         //
      }
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I54 Branch 96 IFNE L1095 - true
   */

  @Test
  public void test12()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
      
      try {
        String string0 = JSONObject.numberToString((Number) Float.NEGATIVE_INFINITY);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
      }
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I13 Branch 32 IFEQ L393 - false
   */

  @Test
  public void test13()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      double double0 = jSONObject0.optDouble("siz");
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(0, jSONObject0.length());
      
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I156 Branch 120 IFEQ L1281 - false
   */

  @Test
  public void test14()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Bad value from toJSONString: ");
      assertNotNull(jSONObject0);
      assertEquals(3, jSONObject0.length());
      
      MockFile mockFile0 = new MockFile("Bad value from toJSONString: ", "Bad value from toJSONString: ");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Bad value from toJSONString: /Bad value from toJSONString: ", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("Bad value from toJSONString: ", mockFile0.getParent());
      assertEquals("Bad value from toJSONString: ", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter((File) mockFile0, false);
      assertNotNull(mockFileWriter0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Bad value from toJSONString: /Bad value from toJSONString: ", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("Bad value from toJSONString: ", mockFile0.getParent());
      assertEquals("Bad value from toJSONString: ", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      
      MockFileWriter mockFileWriter1 = (MockFileWriter)jSONObject0.write((Writer) mockFileWriter0);
      assertNotNull(mockFileWriter1);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Bad value from toJSONString: /Bad value from toJSONString: ", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("Bad value from toJSONString: ", mockFile0.getParent());
      assertEquals("Bad value from toJSONString: ", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(3, jSONObject0.length());
      assertSame(mockFileWriter1, mockFileWriter0);
      assertSame(mockFileWriter0, mockFileWriter1);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I6 Branch 121 IFNULL L1304 - true
   */

  @Test
  public void test15()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 0, 0);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I77 Branch 37 IFLE L404 - true
   */

  @Test
  public void test16()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-191.870446192087));
      assertNotNull(string0);
      assertEquals("-191.870446192087", string0);
  }

  //Test case number: 17
  /*
   * 10 covered goals:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 76 LOOKUPSWITCH L1030 Case 8 - true
   * Goal 2. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 78 LOOKUPSWITCH L1030 Case 10 - true
   * Goal 3. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 79 LOOKUPSWITCH L1030 Case 12 - true
   * Goal 4. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 80 LOOKUPSWITCH L1030 Case 13 - true
   * Goal 5. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 81 LOOKUPSWITCH L1030 Case 34 - true
   * Goal 6. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I177 Branch 86 IF_ICMPLT L1058 - true
   * Goal 7. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I183 Branch 87 IF_ICMPLT L1058 - false
   * Goal 8. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I189 Branch 88 IF_ICMPLT L1058 - false
   * Goal 9. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I196 Branch 89 IF_ICMPLT L1058 - false
   * Goal 10. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I202 Branch 90 IF_ICMPGE L1058 - true
   */

  @Test
  public void test17()  throws Throwable  {
      HashMap<CoreLabel.GenericAnnotation<InputStream>, HashableCoreMap> hashMap0 = new HashMap<CoreLabel.GenericAnnotation<InputStream>, HashableCoreMap>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      long long0 = jSONObject0.optLong("\t\u0000\u0001 \u0001 \u0001 \u0001 \u0001 \u0012\u0000\u0001 \u0003\u0000\u0001$\u0002\u0000\u0001\"\u0003\u0000\u0001\u0001\u0001\u0000\u0001\u001F\u0001#\u0001\u0000\n\u0001\u0007\u0000\u0001&\u0001\u0005\u0001\u0006\u0001%\u0001\u001A\u0001\b\u0001\t\u0001\n\u0001\u001C\u0001\u000B\u0001\r\u0001\u000E\u0001\u000F\u0001\u0010\u0001\u001D\u0001'\u0001\u0012\u0001\u0013\u0001\u0015\u0001\u0016\u0001\u0002\u0001\u0017\u0001\u0018\u0001\u0019\u0001\u0003\u0001\u0004\u0004\u0000\u0001\u001E\u0001\u0000\u0001!\u0001\u0005\u0001\u0006\u0001\u0007\u0001\u001A\u0001\b\u0001\t\u0001\n\u0001\u001C\u0001\u000B\u0001\r\u0001\u000E\u0001\u000F\u0001\u0010\u0001\u001D\u0001\u0011\u0001\u0012\u0001\u0013\u0001\u0015\u0001\u0016\u0001\u0002\u0001\u0017\u0001\u0018\u0001\u0019\u0001\u0003\u0001\u0004\n\u0000\u0001 \u00AA\u0000\u0002\u001BM\u0000\u0001\u0014\u1EA8\u0000\u0001 \u0001 \u0100\u0000\u0001\f\uDED5\u0000");
      assertEquals(0L, long0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I45 Branch 35 IFGE L400 - true
   */

  @Test
  public void test18()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1.0E-5);
      assertNotNull(string0);
      assertEquals("1.0E-5", string0);
  }

  //Test case number: 19
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 5 LOOKUPSWITCH L183 Case 0 - false
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 6 LOOKUPSWITCH L183 Case 125 - true
   * Goal 3. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I37 Branch 56 IFNE L651 - false
   */

  @Test
  public void test19()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I52 Branch 28 IFEQ L350 - false
   */

  @Test
  public void test20()  throws Throwable  {
      HashIndex<LinkedList<Tree>> hashIndex0 = new HashIndex<LinkedList<Tree>>();
      assertNotNull(hashIndex0);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      
      DeltaIndex<LinkedList<Tree>> deltaIndex0 = new DeltaIndex<LinkedList<Tree>>((Index<LinkedList<Tree>>) hashIndex0, (Index<LinkedList<Tree>>) hashIndex0);
      assertNotNull(deltaIndex0);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertTrue(deltaIndex0.isEmpty());
      assertFalse(deltaIndex0.isLocked());
      assertEquals(0, deltaIndex0.size());
      
      JSONArray jSONArray0 = new JSONArray((Collection) deltaIndex0);
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertTrue(deltaIndex0.isEmpty());
      assertFalse(deltaIndex0.isLocked());
      assertEquals(0, deltaIndex0.size());
      
      HashMap<CoreLabel, TaggedWord> hashMap0 = new HashMap<CoreLabel, TaggedWord>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String[] stringArray0 = new String[19];
      stringArray0[0] = "After SQ flattening:              ";
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject1 = jSONObject0.append("After SQ flattening:              ", (Object) deltaIndex0);
      assertNotNull(jSONObject1);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertTrue(deltaIndex0.isEmpty());
      assertFalse(deltaIndex0.isLocked());
      assertEquals(0, deltaIndex0.size());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONObject jSONObject2 = jSONObject1.accumulate("After SQ flattening:              ", (Object) jSONArray0);
      assertNotNull(jSONObject2);
      assertEquals(0, jSONArray0.length());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertTrue(deltaIndex0.isEmpty());
      assertFalse(deltaIndex0.isLocked());
      assertEquals(0, deltaIndex0.size());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
  }

  //Test case number: 21
  /*
   * 8 covered goals:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I7 Branch 31 IFNE L393 - false
   * Goal 2. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I13 Branch 32 IFEQ L393 - true
   * Goal 3. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I31 Branch 33 IFLE L400 - false
   * Goal 4. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I38 Branch 34 IFGE L400 - false
   * Goal 5. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I45 Branch 35 IFGE L400 - false
   * Goal 6. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I54 Branch 36 IFLE L401 - true
   * Goal 7. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I54 Branch 36 IFLE L401 - false
   * Goal 8. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I77 Branch 37 IFLE L404 - false
   */

  @Test
  public void test21()  throws Throwable  {
      String string0 = JSONObject.doubleToString((double) 0);
      assertNotNull(string0);
      assertEquals("0", string0);
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 48 IFEQ L517 - false
   */

  @Test
  public void test22()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.accumulate(".", (Object) jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONObject jSONObject2 = jSONObject1.getJSONObject(".");
      assertNotNull(jSONObject2);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I89 Branch 127 IFEQ L1323 - false
   */

  @Test
  public void test23()  throws Throwable  {
      HashMap<JSONObject, HashableCoreMap> hashMap0 = new HashMap<JSONObject, HashableCoreMap>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = JSONObject.valueToString(jSONObject0, 1556, 1556);
      assertNotNull(string0);
      assertEquals("{}", string0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I40 Branch 53 IFNE L574 - false
   */

  @Test
  public void test24()  throws Throwable  {
      Tag tag0 = new Tag((String) null);
      assertNotNull(tag0);
      assertNull(tag0.value());
      assertNull(tag0.tag());
      assertEquals(-1, tag0.endPosition());
      assertEquals(-1, tag0.beginPosition());
      
      String[] stringArray0 = JSONObject.getNames((Object) tag0);
      assertNull(stringArray0);
      assertNull(tag0.value());
      assertNull(tag0.tag());
      assertEquals(-1, tag0.endPosition());
      assertEquals(-1, tag0.beginPosition());
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/util/Map;)V: I11 Branch 16 IFNONNULL L234 - false
   */

  @Test
  public void test25()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("O?jU2s?/Ik", (Map) null);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  //Test case number: 26
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I12 Branch 4 IF_ICMPEQ L178 - true
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 5 LOOKUPSWITCH L183 Case 0 - true
   * Goal 3. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 6 LOOKUPSWITCH L183 Case 125 - false
   * Goal 4. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 7 LOOKUPSWITCH L183 Default-Case - false
   */

  @Test
  public void test26()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      assertNotNull(jSONTokener0);
      assertTrue(jSONTokener0.more());
      
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
      }
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I12 Branch 67 IFNULL L889 - false
   */

  @Test
  public void test27()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      HashMap<Float, TaggedWord> hashMap1 = new HashMap<Float, TaggedWord>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("alexClark", (Map) hashMap1);
      assertNotNull(jSONObject1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      String string0 = jSONObject0.optString("alexClark", "alexClark");
      assertNotNull(string0);
      assertEquals("{}", string0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getLong(Ljava/lang/String;)J: I13 Branch 49 IFEQ L536 - false
   */

  @Test
  public void test28()  throws Throwable  {
      HashIndex<LinkedList<Tree>> hashIndex0 = new HashIndex<LinkedList<Tree>>();
      assertNotNull(hashIndex0);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      
      DeltaIndex<LinkedList<Tree>> deltaIndex0 = new DeltaIndex<LinkedList<Tree>>((Index<LinkedList<Tree>>) hashIndex0, (Index<LinkedList<Tree>>) hashIndex0);
      assertNotNull(deltaIndex0);
      assertTrue(deltaIndex0.isEmpty());
      assertEquals(0, deltaIndex0.size());
      assertFalse(deltaIndex0.isLocked());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      
      JSONArray jSONArray0 = new JSONArray((Collection) deltaIndex0);
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      assertTrue(deltaIndex0.isEmpty());
      assertEquals(0, deltaIndex0.size());
      assertFalse(deltaIndex0.isLocked());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      
      JSONArray jSONArray1 = jSONArray0.put(3605, false);
      assertNotNull(jSONArray1);
      assertEquals(3606, jSONArray0.length());
      assertEquals(3606, jSONArray1.length());
      assertTrue(deltaIndex0.isEmpty());
      assertEquals(0, deltaIndex0.size());
      assertFalse(deltaIndex0.isLocked());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray0);
      assertNotNull(jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertEquals(3606, jSONArray0.length());
      assertTrue(deltaIndex0.isEmpty());
      assertEquals(0, deltaIndex0.size());
      assertFalse(deltaIndex0.isLocked());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertSame(jSONArray0, jSONArray1);
      
      JSONObject jSONObject1 = jSONObject0.put("After SQ flattening:              ", (long) 3605);
      assertNotNull(jSONObject1);
      assertEquals(3, jSONObject1.length());
      assertEquals(3, jSONObject0.length());
      assertEquals(3606, jSONArray0.length());
      assertTrue(deltaIndex0.isEmpty());
      assertEquals(0, deltaIndex0.size());
      assertFalse(deltaIndex0.isLocked());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONArray0, jSONArray1);
      
      long long0 = jSONObject1.optLong("After SQ flattening:              ");
      assertEquals(3605L, long0);
      assertEquals(3, jSONObject1.length());
      assertEquals(3, jSONObject0.length());
      assertEquals(3606, jSONArray0.length());
      assertTrue(deltaIndex0.isEmpty());
      assertEquals(0, deltaIndex0.size());
      assertFalse(deltaIndex0.isLocked());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONArray0, jSONArray1);
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getLong(Ljava/lang/String;)J: I13 Branch 49 IFEQ L536 - true
   */

  @Test
  public void test29()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      ArrayList<LabeledWord> arrayList0 = new ArrayList<LabeledWord>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      JSONObject jSONObject1 = jSONObject0.put("M:3`g", (Collection) arrayList0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      try {
        long long0 = jSONObject1.getLong("M:3`g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"M:3`g\"] is not a number.
         //
      }
  }

  //Test case number: 30
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 65 IFEQ L815 - false
   */

  @Test
  public void test30()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      Byte byte0 = new Byte((byte)31);
      assertEquals((byte)31, (byte)byte0);
      
      JSONObject jSONObject1 = jSONObject0.append("$?o3jum", (Object) byte0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      JSONArray jSONArray0 = jSONObject1.optJSONArray("$?o3jum");
      assertNotNull(jSONArray0);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONArray0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 31
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I77 Branch 62 IFLE L674 - true
   */

  @Test
  public void test31()  throws Throwable  {
      String string0 = JSONObject.valueToString((-665.9901F));
      assertNotNull(string0);
      assertEquals("-665.9901", string0);
  }

  //Test case number: 32
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;J)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I13 Branch 122 IFEQ L1304 - false
   */

  @Test
  public void test32()  throws Throwable  {
      HashIndex<LinkedList<Tree>> hashIndex0 = new HashIndex<LinkedList<Tree>>();
      assertNotNull(hashIndex0);
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      
      DeltaIndex<LinkedList<Tree>> deltaIndex0 = new DeltaIndex<LinkedList<Tree>>((Index<LinkedList<Tree>>) hashIndex0, (Index<LinkedList<Tree>>) hashIndex0);
      assertNotNull(deltaIndex0);
      assertEquals(0, deltaIndex0.size());
      assertTrue(deltaIndex0.isEmpty());
      assertFalse(deltaIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      
      JSONArray jSONArray0 = new JSONArray((Collection) deltaIndex0);
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      assertEquals(0, deltaIndex0.size());
      assertTrue(deltaIndex0.isEmpty());
      assertFalse(deltaIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      
      JSONArray jSONArray1 = jSONArray0.put(3605, false);
      assertNotNull(jSONArray1);
      assertEquals(3606, jSONArray0.length());
      assertEquals(3606, jSONArray1.length());
      assertEquals(0, deltaIndex0.size());
      assertTrue(deltaIndex0.isEmpty());
      assertFalse(deltaIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      JSONObject jSONObject0 = jSONArray1.toJSONObject(jSONArray0);
      assertNotNull(jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertEquals(3606, jSONArray0.length());
      assertEquals(3606, jSONArray1.length());
      assertEquals(0, deltaIndex0.size());
      assertTrue(deltaIndex0.isEmpty());
      assertFalse(deltaIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("After SQ flattening:              ", (long) 3605);
      assertNotNull(jSONObject1);
      assertEquals(3, jSONObject1.length());
      assertEquals(3, jSONObject0.length());
      assertEquals(3606, jSONArray0.length());
      assertEquals(3606, jSONArray1.length());
      assertEquals(0, deltaIndex0.size());
      assertTrue(deltaIndex0.isEmpty());
      assertFalse(deltaIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      String string0 = jSONObject1.toString(3605);
      assertNotNull(string0);
      assertEquals("{\nfter SQ flattening:              \": 3605,\nnull\": null,\nfalse\": false\n}", string0);
      assertEquals(3, jSONObject1.length());
      assertEquals(3, jSONObject0.length());
      assertEquals(3606, jSONArray0.length());
      assertEquals(3606, jSONArray1.length());
      assertEquals(0, deltaIndex0.size());
      assertTrue(deltaIndex0.isEmpty());
      assertFalse(deltaIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
  }

  //Test case number: 33
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/lang/String;)V: root-Branch
   */

  @Test
  public void test33()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("ERROR: to use SUTime, sentences must have TextAnnotation set, or the individual tokens must have OriginalTextnnotation or TextAnnotation set!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ERROR: to use SUTime, sentences must have TextAnnotation set, or the individual tokens must have OriginalTextnnotation or TextAnnotation set!
         //
      }
  }

  //Test case number: 34
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.optDouble(Ljava/lang/String;)D: root-Branch
   * Goal 2. wheel.json.JSONObject.optDouble(Ljava/lang/String;D)D: I13 Branch 64 IFEQ L764 - true
   * Goal 3. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I30 Branch 94 IFEQ L1090 - false
   */

  @Test
  public void test34()  throws Throwable  {
      SimpleTree simpleTree0 = new SimpleTree();
      assertNotNull(simpleTree0);
      assertEquals(Double.NaN, simpleTree0.score(), 0.01D);
      assertNull(simpleTree0.value());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "jo-i";
      stringArray0[3] = "jo-i";
      JSONObject jSONObject0 = new JSONObject((Object) simpleTree0, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertEquals(Double.NaN, simpleTree0.score(), 0.01D);
      assertNull(simpleTree0.value());
      
      double double0 = jSONObject0.optDouble("jo-i");
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(0, jSONObject0.length());
      assertEquals(Double.NaN, simpleTree0.score(), 0.01D);
      assertNull(simpleTree0.value());
      
      try {
        JSONObject jSONObject1 = jSONObject0.put("jo-i", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
      }
  }

  //Test case number: 35
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I6 Branch 52 IFNONNULL L568 - true
   * Goal 2. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I40 Branch 53 IFNE L574 - true
   * Goal 3. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I60 Branch 54 IF_ICMPGE L578 - true
   * Goal 4. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I60 Branch 54 IF_ICMPGE L578 - false
   */

  @Test
  public void test35()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "After SQ flattening:              ");
      assertNotNull(stringArray0);
  }

  //Test case number: 36
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I20 Branch 40 IFEQ L439 - false
   * Goal 2. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I28 Branch 41 IFLE L439 - true
   * Goal 3. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I47 Branch 43 IFEQ L443 - false
   * Goal 4. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I55 Branch 44 IFLE L443 - true
   */

  @Test
  public void test36()  throws Throwable  {
      HashMap<WordLemmaTag, WordLemmaTag> hashMap0 = new HashMap<WordLemmaTag, WordLemmaTag>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("getsetScore", (Object) "getsetScore");
      assertNotNull(jSONObject1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      boolean boolean0 = jSONObject1.optBoolean("getsetScore", false);
      assertFalse(boolean0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 37
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I6 Branch 57 IFNONNULL L662 - false
   */

  @Test
  public void test37()  throws Throwable  {
      try {
        String string0 = JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
      }
  }

  //Test case number: 38
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I18 Branch 55 IFEQ L648 - true
   * Goal 2. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I18 Branch 55 IFEQ L648 - false
   * Goal 3. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I37 Branch 56 IFNE L651 - true
   */

  @Test
  public void test38()  throws Throwable  {
      TreeGraphNodeFactory treeGraphNodeFactory0 = new TreeGraphNodeFactory();
      assertNotNull(treeGraphNodeFactory0);
      
      TreeGraphNode treeGraphNode0 = (TreeGraphNode)treeGraphNodeFactory0.newLeaf("After DateTreeTransformer:       ");
      assertNotNull(treeGraphNode0);
      assertEquals(-1, treeGraphNode0.index());
      assertEquals(Double.NaN, treeGraphNode0.score(), 0.01D);
      assertEquals("After DateTreeTransformer:       ", treeGraphNode0.value());
      
      SimpleTree simpleTree0 = new SimpleTree((Label) treeGraphNode0);
      assertNotNull(simpleTree0);
      assertEquals(-1, treeGraphNode0.index());
      assertEquals(Double.NaN, treeGraphNode0.score(), 0.01D);
      assertEquals("After DateTreeTransformer:       ", treeGraphNode0.value());
      assertEquals(Double.NaN, simpleTree0.score(), 0.01D);
      assertNull(simpleTree0.value());
      
      JSONObject jSONObject0 = new JSONObject((Object) simpleTree0);
      assertNotNull(jSONObject0);
      assertEquals(-1, treeGraphNode0.index());
      assertEquals(Double.NaN, treeGraphNode0.score(), 0.01D);
      assertEquals("After DateTreeTransformer:       ", treeGraphNode0.value());
      assertEquals(Double.NaN, simpleTree0.score(), 0.01D);
      assertNull(simpleTree0.value());
      assertEquals(9, jSONObject0.length());
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(9, jSONArray0.length());
      assertEquals(-1, treeGraphNode0.index());
      assertEquals(Double.NaN, treeGraphNode0.score(), 0.01D);
      assertEquals("After DateTreeTransformer:       ", treeGraphNode0.value());
      assertEquals(Double.NaN, simpleTree0.score(), 0.01D);
      assertNull(simpleTree0.value());
      assertEquals(9, jSONObject0.length());
  }

  //Test case number: 39
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I13 Branch 111 IFEQ L1253 - false
   */

  @Test
  public void test39()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
      
      String string0 = JSONObject.valueToString(object0);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  //Test case number: 40
  /*
   * 6 covered goals:
   * Goal 1. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I21 Branch 132 IFEQ L1357 - true
   * Goal 2. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I21 Branch 132 IFEQ L1357 - false
   * Goal 3. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I28 Branch 133 IFEQ L1358 - true
   * Goal 4. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I28 Branch 133 IFEQ L1358 - false
   * Goal 5. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I65 Branch 134 IFEQ L1365 - true
   * Goal 6. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I84 Branch 135 IFEQ L1367 - true
   */

  @Test
  public void test40()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.accumulate("isfavD-r=", (Object) "isfavD-r=");
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONObject jSONObject2 = jSONObject0.put("<|K5", true);
      assertNotNull(jSONObject2);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject2.length());
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<|K5");
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)jSONObject2.write((Writer) mockPrintWriter0);
      assertNotNull(mockPrintWriter1);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject2.length());
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(mockPrintWriter1, mockPrintWriter0);
  }

  //Test case number: 41
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 69 IFNONNULL L975 - false
   */

  @Test
  public void test41()  throws Throwable  {
      HashMap<StringBufferInputStream, Integer> hashMap0 = new HashMap<StringBufferInputStream, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      try {
        JSONObject jSONObject1 = jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
      }
  }

  //Test case number: 42
  /*
   * 6 covered goals:
   * Goal 1. wheel.json.JSONObject$Null.toString()Ljava/lang/String;: root-Branch
   * Goal 2. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I6 Branch 98 IFNULL L1113 - false
   * Goal 3. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I12 Branch 99 IFNE L1113 - true
   * Goal 4. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I34 Branch 100 IF_ICMPGE L1117 - true
   * Goal 5. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I34 Branch 100 IF_ICMPGE L1117 - false
   * Goal 6. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I108 Branch 117 IFEQ L1271 - false
   */

  @Test
  public void test42()  throws Throwable  {
      HashIndex<LinkedList<Tree>> hashIndex0 = new HashIndex<LinkedList<Tree>>();
      assertNotNull(hashIndex0);
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      
      DeltaIndex<LinkedList<Tree>> deltaIndex0 = new DeltaIndex<LinkedList<Tree>>((Index<LinkedList<Tree>>) hashIndex0, (Index<LinkedList<Tree>>) hashIndex0);
      assertNotNull(deltaIndex0);
      assertEquals(0, deltaIndex0.size());
      assertFalse(deltaIndex0.isLocked());
      assertTrue(deltaIndex0.isEmpty());
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      
      JSONArray jSONArray0 = new JSONArray((Collection) deltaIndex0);
      assertNotNull(jSONArray0);
      assertEquals(0, deltaIndex0.size());
      assertFalse(deltaIndex0.isLocked());
      assertTrue(deltaIndex0.isEmpty());
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, jSONArray0.length());
      
      JSONArray jSONArray1 = jSONArray0.put(3605, false);
      assertNotNull(jSONArray1);
      assertEquals(0, deltaIndex0.size());
      assertFalse(deltaIndex0.isLocked());
      assertTrue(deltaIndex0.isEmpty());
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertEquals(3606, jSONArray0.length());
      assertEquals(3606, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      HashMap<CoreLabel, TaggedWord> hashMap0 = new HashMap<CoreLabel, TaggedWord>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray2);
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertEquals(3606, jSONArray2.length());
      assertEquals(0, deltaIndex0.size());
      assertFalse(deltaIndex0.isLocked());
      assertTrue(deltaIndex0.isEmpty());
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertEquals(3606, jSONArray0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      
      String string0 = JSONObject.valueToString(jSONArray2);
  }

  //Test case number: 43
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I41 Branch 42 IFNE L443 - false
   * Goal 2. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I47 Branch 43 IFEQ L443 - true
   * Goal 3. wheel.json.JSONObject.getInt(Ljava/lang/String;)I: I13 Branch 46 IFEQ L484 - false
   * Goal 4. wheel.json.JSONObject.getJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 47 IFEQ L499 - true
   */

  @Test
  public void test43()  throws Throwable  {
      HashMap<WordLemmaTag, CategoryWordTag> hashMap0 = new HashMap<WordLemmaTag, CategoryWordTag>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("key", (double) (short)9);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "key";
      int int0 = jSONObject1.optInt("key", (int) (short)9);
      assertEquals(9, int0);
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      boolean boolean0 = jSONObject0.optBoolean("key", false);
      assertFalse(boolean0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject0, jSONObject1);
      
      stringArray0[1] = "key";
      int int1 = jSONObject0.optInt(stringArray0[2]);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject0, jSONObject1);
      
      try {
        JSONArray jSONArray0 = jSONObject0.getJSONArray("key");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"key\"] is not a JSONArray.
         //
      }
  }

  //Test case number: 44
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I6 Branch 52 IFNONNULL L568 - false
   */

  @Test
  public void test44()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  //Test case number: 45
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.optString(Ljava/lang/String;)Ljava/lang/String;: root-Branch
   * Goal 2. wheel.json.JSONObject.getDouble(Ljava/lang/String;)D: I13 Branch 45 IFEQ L463 - true
   * Goal 3. wheel.json.JSONObject.getInt(Ljava/lang/String;)I: I13 Branch 46 IFEQ L484 - true
   * Goal 4. wheel.json.JSONObject.optString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I12 Branch 67 IFNULL L889 - true
   */

  @Test
  public void test45()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      String string0 = jSONObject0.optString("$?o3jum");
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, jSONObject0.length());
      
      Byte byte0 = new Byte((byte)31);
      assertEquals((byte)31, (byte)byte0);
      
      JSONObject jSONObject1 = jSONObject0.append("$?o3jum", (Object) byte0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      int int0 = jSONObject1.optInt("$?o3jum");
      assertEquals(0, int0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  //Test case number: 46
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optBoolean(Ljava/lang/String;)Z: root-Branch
   */

  @Test
  public void test46()  throws Throwable  {
      TreeGraphNodeFactory treeGraphNodeFactory0 = new TreeGraphNodeFactory();
      assertNotNull(treeGraphNodeFactory0);
      
      TreeGraphNode treeGraphNode0 = (TreeGraphNode)treeGraphNodeFactory0.newLeaf("After DateTreeTransformer:       ");
      assertNotNull(treeGraphNode0);
      assertEquals(Double.NaN, treeGraphNode0.score(), 0.01D);
      assertEquals(-1, treeGraphNode0.index());
      assertEquals("After DateTreeTransformer:       ", treeGraphNode0.value());
      
      SimpleTree simpleTree0 = new SimpleTree((Label) treeGraphNode0);
      assertNotNull(simpleTree0);
      assertEquals(Double.NaN, treeGraphNode0.score(), 0.01D);
      assertEquals(-1, treeGraphNode0.index());
      assertEquals("After DateTreeTransformer:       ", treeGraphNode0.value());
      assertEquals(Double.NaN, simpleTree0.score(), 0.01D);
      assertNull(simpleTree0.value());
      
      JSONObject jSONObject0 = new JSONObject((Object) simpleTree0);
      assertNotNull(jSONObject0);
      assertEquals(Double.NaN, treeGraphNode0.score(), 0.01D);
      assertEquals(-1, treeGraphNode0.index());
      assertEquals("After DateTreeTransformer:       ", treeGraphNode0.value());
      assertEquals(9, jSONObject0.length());
      assertEquals(Double.NaN, simpleTree0.score(), 0.01D);
      assertNull(simpleTree0.value());
      
      boolean boolean0 = jSONObject0.optBoolean("After DateTreeTransformer:       ");
      assertFalse(boolean0);
      assertEquals(Double.NaN, treeGraphNode0.score(), 0.01D);
      assertEquals(-1, treeGraphNode0.index());
      assertEquals("After DateTreeTransformer:       ", treeGraphNode0.value());
      assertEquals(9, jSONObject0.length());
      assertEquals(Double.NaN, simpleTree0.score(), 0.01D);
      assertNull(simpleTree0.value());
  }

  //Test case number: 47
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 26 IFNONNULL L346 - true
   * Goal 2. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I52 Branch 28 IFEQ L350 - true
   * Goal 3. wheel.json.JSONObject.put(Ljava/lang/String;Z)Lwheel/json/JSONObject;: I8 Branch 68 IFEQ L902 - false
   */

  @Test
  public void test47()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("isfaD-=", true);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONObject jSONObject2 = jSONObject1.accumulate("isfaD-=", (Object) jSONObject1);
      assertNotNull(jSONObject2);
      assertEquals(1, jSONObject2.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
  }

  //Test case number: 48
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/util/Map;)Lwheel/json/JSONObject;: root-Branch
   */

  @Test
  public void test48()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      HashMap<HashableCoreMap, Tag> hashMap0 = new HashMap<HashableCoreMap, Tag>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      assertNotNull(jSONObject1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 49
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I6 Branch 110 IFNULL L1253 - true
   */

  @Test
  public void test49()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  //Test case number: 50
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I12 Branch 4 IF_ICMPEQ L178 - false
   */

  @Test
  public void test50()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("Afte9 SQ flatteniMgR              ");
      assertNotNull(jSONTokener0);
      assertTrue(jSONTokener0.more());
      
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Afte9 SQ flatteniMgR              
         //
      }
  }

  //Test case number: 51
  /*
   * 6 covered goals:
   * Goal 1. wheel.json.JSONObject.isNull(Ljava/lang/String;)Z: root-Branch
   * Goal 2. wheel.json.JSONObject.optBoolean(Ljava/lang/String;Z)Z: root-Branch
   * Goal 3. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I6 Branch 1 IFNULL L115 - true
   * Goal 4. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I14 Branch 39 IFNE L439 - false
   * Goal 5. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I20 Branch 40 IFEQ L439 - true
   * Goal 6. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I41 Branch 42 IFNE L443 - true
   */

  @Test
  public void test51()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      
      JSONObject jSONObject1 = jSONObject0.put("O?jU2s?/Ik", (Object) boolean0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      boolean boolean1 = jSONObject1.isNull("i");
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      boolean boolean2 = jSONObject0.optBoolean("O?jU2s?/Ik", (boolean) boolean0);
      assertTrue(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 52
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I138 Branch 119 IFEQ L1278 - false
   */

  @Test
  public void test52()  throws Throwable  {
      TreeGraphNodeFactory treeGraphNodeFactory0 = new TreeGraphNodeFactory();
      assertNotNull(treeGraphNodeFactory0);
      
      TreeGraphNode treeGraphNode0 = (TreeGraphNode)treeGraphNodeFactory0.newLeaf("After DateTreeTransormer:      ");
      assertNotNull(treeGraphNode0);
      assertEquals(Double.NaN, treeGraphNode0.score(), 0.01D);
      assertEquals(-1, treeGraphNode0.index());
      assertEquals("After DateTreeTransormer:      ", treeGraphNode0.value());
      
      SimpleTree simpleTree0 = new SimpleTree((Label) treeGraphNode0);
      assertNotNull(simpleTree0);
      assertEquals(Double.NaN, simpleTree0.score(), 0.01D);
      assertNull(simpleTree0.value());
      assertEquals(Double.NaN, treeGraphNode0.score(), 0.01D);
      assertEquals(-1, treeGraphNode0.index());
      assertEquals("After DateTreeTransormer:      ", treeGraphNode0.value());
      
      List<Tree> list0 = simpleTree0.subTreeList();
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(Double.NaN, simpleTree0.score(), 0.01D);
      assertNull(simpleTree0.value());
      assertEquals(Double.NaN, treeGraphNode0.score(), 0.01D);
      assertEquals(-1, treeGraphNode0.index());
      assertEquals("After DateTreeTransormer:      ", treeGraphNode0.value());
      
      // Undeclared exception!
      try {
        String string0 = JSONObject.valueToString(list0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 53
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.has(Ljava/lang/String;)Z: root-Branch
   */

  @Test
  public void test53()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      boolean boolean0 = jSONObject0.has("After DateTreeTransformer:       ");
      assertFalse(boolean0);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 54
  /*
   * 5 covered goals:
   * Goal 1. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I11 Branch 50 IFNE L548 - false
   * Goal 2. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I11 Branch 103 IFNE L1190 - false
   * Goal 3. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I41 Branch 104 IF_ICMPNE L1197 - false
   * Goal 4. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I121 Branch 118 IFEQ L1275 - false
   * Goal 5. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I121 Branch 129 IFEQ L1329 - false
   */

  @Test
  public void test54()  throws Throwable  {
      LinkedList<CoreMap> linkedList0 = new LinkedList<CoreMap>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Annotation annotation0 = new Annotation((List<CoreMap>) linkedList0);
      assertNotNull(annotation0);
      assertEquals(0, linkedList0.size());
      assertEquals("", annotation0.toString());
      assertEquals(3, annotation0.size());
      
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      stringArray0[4] = "for";
      HashMap<StringLabel, Word> hashMap0 = new HashMap<StringLabel, Word>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.putOpt("for", (Object) hashMap0);
      assertNotNull(jSONObject1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONObject jSONObject2 = new JSONObject((Object) annotation0, stringArray0);
      assertNotNull(jSONObject2);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONObject2.length());
      assertEquals("", annotation0.toString());
      assertEquals(3, annotation0.size());
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertEquals("{\"for\":{}}", string0);
      assertEquals(1, jSONObject0.length());
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      
      String string1 = jSONObject0.toString(0);
      assertNotNull(string1);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("{\"for\": {}}", string1);
      assertEquals(1, jSONObject0.length());
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(string1, string0);
      
      String[] stringArray1 = JSONObject.getNames(jSONObject2);
      assertNull(stringArray1);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONObject2.length());
      assertEquals("", annotation0.toString());
      assertEquals(3, annotation0.size());
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
  }

  //Test case number: 55
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.optLong(Ljava/lang/String;J)J: root-Branch
   * Goal 2. wheel.json.JSONObject.optLong(Ljava/lang/String;)J: root-Branch
   * Goal 3. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I26 Branch 27 IFEQ L347 - false
   * Goal 4. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I6 Branch 73 IFNULL L1015 - true
   */

  @Test
  public void test55()  throws Throwable  {
      HashIndex<LinkedList<Tree>> hashIndex0 = new HashIndex<LinkedList<Tree>>();
      assertNotNull(hashIndex0);
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      
      DeltaIndex<LinkedList<Tree>> deltaIndex0 = new DeltaIndex<LinkedList<Tree>>((Index<LinkedList<Tree>>) hashIndex0, (Index<LinkedList<Tree>>) hashIndex0);
      assertNotNull(deltaIndex0);
      assertEquals(0, deltaIndex0.size());
      assertTrue(deltaIndex0.isEmpty());
      assertFalse(deltaIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      
      JSONArray jSONArray0 = new JSONArray((Collection) deltaIndex0);
      assertNotNull(jSONArray0);
      assertEquals(0, deltaIndex0.size());
      assertTrue(deltaIndex0.isEmpty());
      assertFalse(deltaIndex0.isLocked());
      assertEquals(0, jSONArray0.length());
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      
      HashMap<CoreLabel, TaggedWord> hashMap0 = new HashMap<CoreLabel, TaggedWord>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String[] stringArray0 = new String[13];
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject1 = jSONObject0.accumulate("After SQ flattening:              ", (Object) jSONArray0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, deltaIndex0.size());
      assertTrue(deltaIndex0.isEmpty());
      assertFalse(deltaIndex0.isLocked());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONArray0.length());
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      long long0 = jSONObject1.optLong(stringArray0[0]);
      assertEquals(0L, long0);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, deltaIndex0.size());
      assertTrue(deltaIndex0.isEmpty());
      assertFalse(deltaIndex0.isLocked());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONArray0.length());
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 56
  /*
   * 7 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;D)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 29 IFNONNULL L374 - false
   * Goal 3. wheel.json.JSONObject.get(Ljava/lang/String;)Ljava/lang/Object;: I12 Branch 38 IFNONNULL L421 - true
   * Goal 4. wheel.json.JSONObject.getJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 47 IFEQ L499 - false
   * Goal 5. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I14 Branch 92 IFEQ L1089 - false
   * Goal 6. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I23 Branch 93 IFNE L1090 - false
   * Goal 7. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I30 Branch 94 IFEQ L1090 - true
   */

  @Test
  public void test56()  throws Throwable  {
      HashMap<WordTag, Class<CoreLabel.GenericAnnotation<Float>>> hashMap0 = new HashMap<WordTag, Class<CoreLabel.GenericAnnotation<Float>>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      
      HashMap<WordTag, Boolean> hashMap1 = new HashMap<WordTag, Boolean>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.append("trainMap and testMap are no longer valid options - please use map instead.", (Object) hashMap1);
      assertNotNull(jSONObject1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      JSONArray jSONArray0 = jSONObject0.getJSONArray("trainMap and testMap are no longer valid options - please use map instead.");
      assertNotNull(jSONArray0);
      assertEquals(1, jSONArray0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject0, jSONObject1);
      
      JSONObject jSONObject2 = jSONObject0.put("trainMap and testMap are no longer valid options - please use map instead.", (double) 520);
      assertNotNull(jSONObject2);
      assertEquals(1, jSONObject2.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 57
  /*
   * 19 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;I)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONObject;[Ljava/lang/String;)V: I15 Branch 3 IF_ICMPGE L162 - true
   * Goal 3. wheel.json.JSONObject.<init>(Lwheel/json/JSONObject;[Ljava/lang/String;)V: I15 Branch 3 IF_ICMPGE L162 - false
   * Goal 4. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 26 IFNONNULL L346 - false
   * Goal 5. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I26 Branch 27 IFEQ L347 - true
   * Goal 6. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I31 Branch 58 IFLE L670 - true
   * Goal 7. wheel.json.JSONObject.opt(Ljava/lang/String;)Ljava/lang/Object;: I6 Branch 63 IFNONNULL L688 - false
   * Goal 8. wheel.json.JSONObject.optJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 66 IFEQ L829 - true
   * Goal 9. wheel.json.JSONObject.put(Ljava/lang/String;Z)Lwheel/json/JSONObject;: I8 Branch 68 IFEQ L902 - true
   * Goal 10. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 71 IFNULL L999 - true
   * Goal 11. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I11 Branch 72 IFNULL L999 - true
   * Goal 12. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 77 LOOKUPSWITCH L1030 Case 9 - true
   * Goal 13. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 82 LOOKUPSWITCH L1030 Case 47 - true
   * Goal 14. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 84 LOOKUPSWITCH L1030 Default-Case - false
   * Goal 15. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I91 Branch 85 IF_ICMPNE L1037 - true
   * Goal 16. wheel.json.JSONObject.toString()Ljava/lang/String;: I28 Branch 102 IF_ICMPLE L1141 - false
   * Goal 17. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I82 Branch 114 IFEQ L1268 - false
   * Goal 18. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I96 Branch 115 IFNE L1271 - true
   * Goal 19. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I102 Branch 116 IFNE L1271 - true
   */

  @Test
  public void test57()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.accumulate("|", (Object) "|");
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONObject jSONObject2 = jSONObject0.put("shut", false);
      assertNotNull(jSONObject2);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject2.length());
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      
      String[] stringArray0 = new String[23];
      stringArray0[0] = "|";
      stringArray0[1] = "isfavD-r=";
      JSONObject jSONObject3 = new JSONObject(jSONObject1, stringArray0);
      assertNotNull(jSONObject3);
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertFalse(jSONObject1.equals((Object)jSONObject3));
      assertEquals(1, jSONObject3.length());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertNotSame(jSONObject3, jSONObject0);
      assertNotSame(jSONObject3, jSONObject2);
      assertNotSame(jSONObject3, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject3);
      
      JSONObject jSONObject4 = jSONObject1.optJSONObject("|");
      assertNull(jSONObject4);
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertFalse(jSONObject1.equals((Object)jSONObject3));
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject3);
      
      JSONObject jSONObject5 = jSONObject0.put("|", 2663);
      assertNotNull(jSONObject5);
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertFalse(jSONObject5.equals((Object)jSONObject3));
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject5.length());
      assertSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject5);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject5, jSONObject3);
      assertSame(jSONObject5, jSONObject1);
      assertSame(jSONObject5, jSONObject2);
      assertSame(jSONObject5, jSONObject0);
      
      WordTag wordTag0 = new WordTag("shut");
      assertNotNull(wordTag0);
      assertNull(wordTag0.tag());
      assertEquals("shut", wordTag0.word());
      assertEquals("shut", wordTag0.value());
      
      TaggedWord taggedWord0 = new TaggedWord((Label) wordTag0);
      assertNotNull(taggedWord0);
      assertEquals("shut", taggedWord0.value());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals("shut", taggedWord0.word());
      assertNull(taggedWord0.tag());
      assertNull(wordTag0.tag());
      assertEquals("shut", wordTag0.word());
      assertEquals("shut", wordTag0.value());
      
      JSONObject jSONObject6 = jSONObject5.putOpt("\t", (Object) taggedWord0);
      assertNotNull(jSONObject6);
      assertFalse(jSONObject6.equals((Object)jSONObject3));
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertFalse(jSONObject5.equals((Object)jSONObject3));
      assertEquals("shut", taggedWord0.value());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals("shut", taggedWord0.word());
      assertNull(taggedWord0.tag());
      assertEquals(3, jSONObject6.length());
      assertNull(wordTag0.tag());
      assertEquals("shut", wordTag0.word());
      assertEquals("shut", wordTag0.value());
      assertEquals(3, jSONObject0.length());
      assertEquals(3, jSONObject5.length());
      assertSame(jSONObject6, jSONObject2);
      assertSame(jSONObject6, jSONObject0);
      assertNotSame(jSONObject6, jSONObject3);
      assertSame(jSONObject6, jSONObject5);
      assertSame(jSONObject6, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject5);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject6);
      assertNotSame(jSONObject5, jSONObject3);
      assertSame(jSONObject5, jSONObject1);
      assertSame(jSONObject5, jSONObject2);
      assertSame(jSONObject5, jSONObject6);
      assertSame(jSONObject5, jSONObject0);
      
      String string0 = JSONObject.valueToString(jSONObject1);
      assertNotNull(string0);
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertFalse(jSONObject1.equals((Object)jSONObject3));
      assertEquals("{\"shut\":false,\"\\t\":\"shut/null\",\"|\":2663}", string0);
      assertEquals(3, jSONObject0.length());
      assertEquals(3, jSONObject1.length());
      assertSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject5);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject6);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject6);
      assertSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject5);
  }

  //Test case number: 58
  /*
   * 24 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/util/Collection;)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.remove(Ljava/lang/String;)Ljava/lang/Object;: root-Branch
   * Goal 3. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I33 Branch 17 IF_ICMPGE L263 - true
   * Goal 4. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I33 Branch 17 IF_ICMPGE L263 - false
   * Goal 5. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I58 Branch 18 IFLE L268 - true
   * Goal 6. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I58 Branch 18 IFLE L268 - false
   * Goal 7. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I78 Branch 19 IFLE L270 - true
   * Goal 8. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I78 Branch 19 IFLE L270 - false
   * Goal 9. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I92 Branch 20 IFLE L273 - true
   * Goal 10. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I92 Branch 20 IFLE L273 - false
   * Goal 11. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I100 Branch 21 IFEQ L273 - false
   * Goal 12. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I107 Branch 22 IFNE L273 - true
   * Goal 13. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I107 Branch 22 IFNE L273 - false
   * Goal 14. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I116 Branch 23 IF_ICMPNE L276 - true
   * Goal 15. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I135 Branch 24 IFNE L278 - false
   * Goal 16. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 29 IFNONNULL L374 - true
   * Goal 17. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I39 Branch 30 IFEQ L376 - false
   * Goal 18. wheel.json.JSONObject.optJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 65 IFEQ L815 - true
   * Goal 19. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I20 Branch 70 IFNULL L978 - true
   * Goal 20. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I6 Branch 91 IFNULL L1088 - true
   * Goal 21. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I125 Branch 107 IF_ICMPGE L1211 - false
   * Goal 22. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I76 Branch 126 IFEQ L1320 - false
   * Goal 23. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I105 Branch 128 IFEQ L1326 - false
   * Goal 24. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I140 Branch 130 IFEQ L1332 - false
   */

  @Test
  public void test58()  throws Throwable  {
      TreeGraphNodeFactory treeGraphNodeFactory0 = new TreeGraphNodeFactory();
      assertNotNull(treeGraphNodeFactory0);
      
      TreeGraphNode treeGraphNode0 = (TreeGraphNode)treeGraphNodeFactory0.newLeaf("After DateTreeTransformer:       ");
      assertNotNull(treeGraphNode0);
      assertEquals(Double.NaN, treeGraphNode0.score(), 0.01D);
      assertEquals(-1, treeGraphNode0.index());
      assertEquals("After DateTreeTransformer:       ", treeGraphNode0.value());
      
      SimpleTree simpleTree0 = new SimpleTree((Label) treeGraphNode0);
      assertNotNull(simpleTree0);
      assertEquals(Double.NaN, treeGraphNode0.score(), 0.01D);
      assertEquals(-1, treeGraphNode0.index());
      assertEquals("After DateTreeTransformer:       ", treeGraphNode0.value());
      assertNull(simpleTree0.value());
      assertEquals(Double.NaN, simpleTree0.score(), 0.01D);
      
      JSONObject jSONObject0 = new JSONObject((Object) simpleTree0);
      assertNotNull(jSONObject0);
      assertEquals(9, jSONObject0.length());
      assertEquals(Double.NaN, treeGraphNode0.score(), 0.01D);
      assertEquals(-1, treeGraphNode0.index());
      assertEquals("After DateTreeTransformer:       ", treeGraphNode0.value());
      assertNull(simpleTree0.value());
      assertEquals(Double.NaN, simpleTree0.score(), 0.01D);
      
      JSONObject jSONObject1 = jSONObject0.put("After SQ flattening:         y    ", (Collection) treeGraphNode0);
      assertNotNull(jSONObject1);
      assertEquals(10, jSONObject0.length());
      assertEquals(10, jSONObject1.length());
      assertEquals(Double.NaN, treeGraphNode0.score(), 0.01D);
      assertEquals(-1, treeGraphNode0.index());
      assertEquals("After DateTreeTransformer:       ", treeGraphNode0.value());
      assertNull(simpleTree0.value());
      assertEquals(Double.NaN, simpleTree0.score(), 0.01D);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONArray jSONArray0 = jSONObject1.optJSONArray("txK9,0Hw");
      assertNull(jSONArray0);
      assertEquals(10, jSONObject0.length());
      assertEquals(10, jSONObject1.length());
      assertEquals(Double.NaN, treeGraphNode0.score(), 0.01D);
      assertEquals(-1, treeGraphNode0.index());
      assertEquals("After DateTreeTransformer:       ", treeGraphNode0.value());
      assertNull(simpleTree0.value());
      assertEquals(Double.NaN, simpleTree0.score(), 0.01D);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONObject jSONObject2 = jSONObject0.append("After SQ flattening:         y    ", (Object) null);
      assertNotNull(jSONObject2);
      assertEquals(10, jSONObject0.length());
      assertEquals(10, jSONObject2.length());
      assertEquals(Double.NaN, treeGraphNode0.score(), 0.01D);
      assertEquals(-1, treeGraphNode0.index());
      assertEquals("After DateTreeTransformer:       ", treeGraphNode0.value());
      assertNull(simpleTree0.value());
      assertEquals(Double.NaN, simpleTree0.score(), 0.01D);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      
      // Undeclared exception!
      try {
        String string0 = jSONObject2.toString(5536, 5536);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 59
  /*
   * 6 covered goals:
   * Goal 1. wheel.json.JSONObject.optInt(Ljava/lang/String;I)I: root-Branch
   * Goal 2. wheel.json.JSONObject.optInt(Ljava/lang/String;)I: root-Branch
   * Goal 3. wheel.json.JSONObject.<init>(Ljava/util/Map;)V: I11 Branch 16 IFNONNULL L234 - true
   * Goal 4. wheel.json.JSONObject.get(Ljava/lang/String;)Ljava/lang/Object;: I12 Branch 38 IFNONNULL L421 - false
   * Goal 5. wheel.json.JSONObject.opt(Ljava/lang/String;)Ljava/lang/Object;: I6 Branch 63 IFNONNULL L688 - true
   * Goal 6. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I12 Branch 74 IFNE L1015 - false
   */

  @Test
  public void test59()  throws Throwable  {
      HashMap<StringBufferInputStream, Integer> hashMap0 = new HashMap<StringBufferInputStream, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 60
  /*
   * 75 covered goals:
   * Goal 1. wheel.json.JSONObject.keys()Ljava/util/Iterator;: root-Branch
   * Goal 2. wheel.json.JSONObject.<init>()V: root-Branch
   * Goal 3. wheel.json.JSONObject.length()I: root-Branch
   * Goal 4. wheel.json.JSONObject.toString(I)Ljava/lang/String;: root-Branch
   * Goal 5. wheel.json.JSONObject.<init>(Ljava/lang/Object;[Ljava/lang/String;)V: I20 Branch 25 IF_ICMPGE L304 - true
   * Goal 6. wheel.json.JSONObject.<init>(Ljava/lang/Object;[Ljava/lang/String;)V: I20 Branch 25 IF_ICMPGE L304 - false
   * Goal 7. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I11 Branch 50 IFNE L548 - true
   * Goal 8. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I37 Branch 51 IFEQ L554 - true
   * Goal 9. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I37 Branch 51 IFEQ L554 - false
   * Goal 10. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I6 Branch 57 IFNONNULL L662 - true
   * Goal 11. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I31 Branch 58 IFLE L670 - false
   * Goal 12. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I38 Branch 59 IFGE L670 - false
   * Goal 13. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I45 Branch 60 IFGE L670 - false
   * Goal 14. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I54 Branch 61 IFLE L671 - true
   * Goal 15. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I54 Branch 61 IFLE L671 - false
   * Goal 16. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I77 Branch 62 IFLE L674 - false
   * Goal 17. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 69 IFNONNULL L975 - true
   * Goal 18. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I20 Branch 70 IFNULL L978 - false
   * Goal 19. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 71 IFNULL L999 - false
   * Goal 20. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I11 Branch 72 IFNULL L999 - false
   * Goal 21. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I6 Branch 73 IFNULL L1015 - false
   * Goal 22. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I12 Branch 74 IFNE L1015 - true
   * Goal 23. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I51 Branch 75 IF_ICMPGE L1027 - true
   * Goal 24. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I51 Branch 75 IF_ICMPGE L1027 - false
   * Goal 25. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 76 LOOKUPSWITCH L1030 Case 8 - false
   * Goal 26. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 77 LOOKUPSWITCH L1030 Case 9 - false
   * Goal 27. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 78 LOOKUPSWITCH L1030 Case 10 - false
   * Goal 28. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 79 LOOKUPSWITCH L1030 Case 12 - false
   * Goal 29. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 80 LOOKUPSWITCH L1030 Case 13 - false
   * Goal 30. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 81 LOOKUPSWITCH L1030 Case 34 - false
   * Goal 31. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 82 LOOKUPSWITCH L1030 Case 47 - false
   * Goal 32. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 83 LOOKUPSWITCH L1030 Case 92 - false
   * Goal 33. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 84 LOOKUPSWITCH L1030 Default-Case - true
   * Goal 34. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I177 Branch 86 IF_ICMPLT L1058 - false
   * Goal 35. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I183 Branch 87 IF_ICMPLT L1058 - true
   * Goal 36. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I196 Branch 89 IF_ICMPLT L1058 - true
   * Goal 37. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I6 Branch 91 IFNULL L1088 - false
   * Goal 38. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I14 Branch 92 IFEQ L1089 - true
   * Goal 39. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I45 Branch 95 IFEQ L1094 - true
   * Goal 40. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I45 Branch 95 IFEQ L1094 - false
   * Goal 41. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I54 Branch 96 IFNE L1095 - false
   * Goal 42. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I61 Branch 97 IFEQ L1095 - true
   * Goal 43. wheel.json.JSONObject.toString()Ljava/lang/String;: I19 Branch 101 IFEQ L1140 - true
   * Goal 44. wheel.json.JSONObject.toString()Ljava/lang/String;: I19 Branch 101 IFEQ L1140 - false
   * Goal 45. wheel.json.JSONObject.toString()Ljava/lang/String;: I28 Branch 102 IF_ICMPLE L1141 - true
   * Goal 46. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I11 Branch 103 IFNE L1190 - true
   * Goal 47. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I41 Branch 104 IF_ICMPNE L1197 - true
   * Goal 48. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I84 Branch 105 IFEQ L1204 - true
   * Goal 49. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I84 Branch 105 IFEQ L1204 - false
   * Goal 50. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I98 Branch 106 IF_ICMPLE L1206 - true
   * Goal 51. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I98 Branch 106 IF_ICMPLE L1206 - false
   * Goal 52. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I125 Branch 107 IF_ICMPGE L1211 - true
   * Goal 53. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I177 Branch 108 IF_ICMPLE L1219 - false
   * Goal 54. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I194 Branch 109 IF_ICMPGE L1221 - true
   * Goal 55. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I6 Branch 110 IFNULL L1253 - false
   * Goal 56. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I13 Branch 111 IFEQ L1253 - true
   * Goal 57. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I25 Branch 112 IFEQ L1256 - true
   * Goal 58. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I82 Branch 114 IFEQ L1268 - true
   * Goal 59. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I96 Branch 115 IFNE L1271 - false
   * Goal 60. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I102 Branch 116 IFNE L1271 - false
   * Goal 61. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I108 Branch 117 IFEQ L1271 - true
   * Goal 62. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I121 Branch 118 IFEQ L1275 - true
   * Goal 63. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I138 Branch 119 IFEQ L1278 - true
   * Goal 64. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I156 Branch 120 IFEQ L1281 - true
   * Goal 65. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I6 Branch 121 IFNULL L1304 - false
   * Goal 66. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I13 Branch 122 IFEQ L1304 - true
   * Goal 67. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I25 Branch 123 IFEQ L1308 - true
   * Goal 68. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I62 Branch 125 IFEQ L1317 - true
   * Goal 69. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I62 Branch 125 IFEQ L1317 - false
   * Goal 70. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I76 Branch 126 IFEQ L1320 - true
   * Goal 71. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I89 Branch 127 IFEQ L1323 - true
   * Goal 72. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I105 Branch 128 IFEQ L1326 - true
   * Goal 73. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I121 Branch 129 IFEQ L1329 - true
   * Goal 74. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I140 Branch 130 IFEQ L1332 - true
   * Goal 75. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I160 Branch 131 IFEQ L1335 - true
   */

  @Test
  public void test60()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.putOpt("After DateTreeTransXormer:       ", (Object) "for");
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      String[] stringArray0 = new String[3];
      JSONObject jSONObject2 = new JSONObject((Object) "for", stringArray0);
      assertNotNull(jSONObject2);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertEquals(0, jSONObject2.length());
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertEquals("{\"After DateTreeTransXormer:       \":\"for\"}", string0);
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      JSONObject jSONObject3 = jSONObject0.putOpt("for", (Object) float0);
      assertNotNull(jSONObject3);
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertEquals(2, jSONObject3.length());
      assertEquals(2, jSONObject0.length());
      assertSame(jSONObject3, jSONObject0);
      assertNotSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertNotSame(jSONObject0, jSONObject2);
      
      String string1 = jSONObject1.toString((-37));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertEquals("{\n\"for\": 0,\n\"After DateTreeTransXormer:       \": \"for\"\n}", string1);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertNotSame(string1, string0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject3);
      assertNotSame(jSONObject1, jSONObject2);
      
      String[] stringArray1 = JSONObject.getNames(jSONObject1);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertNotSame(stringArray1, stringArray0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject3);
      assertNotSame(jSONObject1, jSONObject2);
  }
}
