/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 18 03:05:16 GMT 2015
 */

package wheel.json;

import static org.junit.Assert.*;
import org.junit.Test;
import edu.stanford.nlp.ling.CategoryWordTag;
import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.ling.IndexedWord;
import edu.stanford.nlp.ling.LabeledWord;
import edu.stanford.nlp.ling.StringLabel;
import edu.stanford.nlp.ling.Tag;
import edu.stanford.nlp.ling.TaggedWord;
import edu.stanford.nlp.ling.Word;
import edu.stanford.nlp.ling.WordLemmaTag;
import edu.stanford.nlp.ling.WordTag;
import edu.stanford.nlp.pipeline.Annotation;
import edu.stanford.nlp.process.CoreLabelTokenFactory;
import edu.stanford.nlp.sequences.SeqClassifierFlags;
import edu.stanford.nlp.util.ArrayCoreMap;
import edu.stanford.nlp.util.CoreMap;
import edu.stanford.nlp.util.HashIndex;
import edu.stanford.nlp.util.HashableCoreMap;
import java.io.ObjectStreamConstants;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I61 Branch 97 IFEQ L1095 - false
   */

  @Test
  public void test00()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Float float0 = new Float(Float.NaN);
      assertEquals(Float.NaN, (float)float0, 0.01F);
      
      try {
        JSONObject jSONObject1 = jSONObject0.putOpt("4", (Object) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
      }
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 48 IFEQ L517 - true
   */

  @Test
  public void test01()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("?iqQ>yLoEe0F", (-2700));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      try {
        JSONObject jSONObject2 = jSONObject1.getJSONObject("?iqQ>yLoEe0F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"?iqQ>yLoEe0F\"] is not a JSONObject.
         //
      }
  }

  //Test case number: 2
  /*
   * 5 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I86 Branch 10 IF_ICMPEQ L202 - true
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I105 Branch 11 LOOKUPSWITCH L211 Case 44 - false
   * Goal 3. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I105 Branch 12 LOOKUPSWITCH L211 Case 59 - false
   * Goal 4. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I105 Branch 13 LOOKUPSWITCH L211 Case 125 - false
   * Goal 5. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I105 Branch 14 LOOKUPSWITCH L211 Default-Case - true
   */

  @Test
  public void test02()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{|4>:tIj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 8 of {|4>:tIj
         //
      }
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I13 Branch 32 IFEQ L393 - false
   */

  @Test
  public void test03()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
      assertNotNull(string0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I156 Branch 120 IFEQ L1281 - false
   */

  @Test
  public void test04()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\n");
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      StringWriter stringWriter0 = new StringWriter(2999);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = (StringWriter)jSONObject0.write((Writer) stringWriter0);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter0, stringWriter1);
      assertEquals("{\"bytes\":[10],\"class\":\"class java.lang.String\",\"empty\":false}", stringWriter1.toString());
      assertEquals("{\"bytes\":[10],\"class\":\"class java.lang.String\",\"empty\":false}", stringWriter0.toString());
      assertEquals(3, jSONObject0.length());
      assertNotNull(stringWriter1);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I138 Branch 119 IFEQ L1278 - false
   */

  @Test
  public void test05()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
      assertEquals(0, linkedList0.size());
      assertNotNull(string0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 48 IFEQ L517 - false
   */

  @Test
  public void test06()  throws Throwable  {
      HashMap<TaggedWord, String> hashMap0 = new HashMap<TaggedWord, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("no", (Map) hashMap0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject1.getJSONObject("no");
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
      assertEquals(0, jSONObject2.length());
      assertNotNull(jSONObject2);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  //Test case number: 7
  /*
   * 5 covered goals:
   * Goal 1. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I18 Branch 55 IFEQ L648 - false
   * Goal 2. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I37 Branch 56 IFNE L651 - true
   * Goal 3. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I12 Branch 99 IFNE L1113 - true
   * Goal 4. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I34 Branch 100 IF_ICMPGE L1117 - true
   * Goal 5. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I34 Branch 100 IF_ICMPGE L1117 - false
   */

  @Test
  public void test07()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
      
      JSONObject jSONObject0 = new JSONObject(object0);
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 47 IFEQ L499 - true
   */

  @Test
  public void test08()  throws Throwable  {
      HashMap<JSONObject, WordLemmaTag> hashMap0 = new HashMap<JSONObject, WordLemmaTag>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("#&rRj'e0{XB", (Object) linkedList0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(0, linkedList0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject1);
      
      try {
        JSONArray jSONArray0 = jSONObject1.getJSONArray("#&rRj'e0{XB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#&rRj'e0{XB\"] is not a JSONArray.
         //
      }
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I140 Branch 130 IFEQ L1332 - false
   */

  @Test
  public void test09()  throws Throwable  {
      SeqClassifierFlags seqClassifierFlags0 = new SeqClassifierFlags();
      assertEquals((-1), seqClassifierFlags0.maxIterations);
      assertEquals((-1), seqClassifierFlags0.numHiddenUnits);
      assertFalse(seqClassifierFlags0.printFirstOrderProbs);
      assertFalse(seqClassifierFlags0.printProbs);
      assertFalse(seqClassifierFlags0.useNegASBCDict3);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions3);
      assertFalse(seqClassifierFlags0.lowercaseNGrams);
      assertFalse(seqClassifierFlags0.useNegASBCDict2);
      assertFalse(seqClassifierFlags0.pctSegmenterScaleByCRF);
      assertFalse(seqClassifierFlags0.estimateInitial);
      assertFalse(seqClassifierFlags0.booleanFeatures);
      assertFalse(seqClassifierFlags0.alternateTraining);
      assertFalse(seqClassifierFlags0.powerAlignProbAsAddition);
      assertFalse(seqClassifierFlags0.useRandomSeed);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions2);
      assertFalse(seqClassifierFlags0.usePhraseWordSpecialTags);
      assertFalse(seqClassifierFlags0.splitOnHead);
      assertFalse(seqClassifierFlags0.useExtraTaggySequences);
      assertEquals(2, seqClassifierFlags0.maxLeft);
      assertFalse(seqClassifierFlags0.useNegASBCDict4);
      assertFalse(seqClassifierFlags0.groupByInput);
      assertFalse(seqClassifierFlags0.dampDDStepSizeWithAlignmentProb);
      assertFalse(seqClassifierFlags0.useAltGazFeatures);
      assertFalse(seqClassifierFlags0.useABGENE);
      assertFalse(seqClassifierFlags0.useDistSim);
      assertFalse(seqClassifierFlags0.useTaggySequencesShapeInteraction);
      assertFalse(seqClassifierFlags0.lowerNewgeneThreshold);
      assertFalse(seqClassifierFlags0.useHKChar2);
      assertFalse(seqClassifierFlags0.augmentedDateChars);
      assertFalse(seqClassifierFlags0.useFeaturesCpC4gram);
      assertFalse(seqClassifierFlags0.useEntityTypes);
      assertFalse(seqClassifierFlags0.useUnicodeType4gram);
      assertFalse(seqClassifierFlags0.useAdaGradFOBOS);
      assertFalse(seqClassifierFlags0.groupByHiddenUnit);
      assertFalse(seqClassifierFlags0.useRule);
      assertEquals(10, seqClassifierFlags0.wideDisjunctionWidth);
      assertFalse(seqClassifierFlags0.useSemPrior);
      assertFalse(seqClassifierFlags0.doFeatureDiscovery);
      assertFalse(seqClassifierFlags0.numberEquivalenceDistSim);
      assertFalse(seqClassifierFlags0.useClassFeature);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions3);
      assertFalse(seqClassifierFlags0.usePhraseFeatures);
      assertFalse(seqClassifierFlags0.useDictPK2);
      assertFalse(seqClassifierFlags0.dontExtendTaggy);
      assertFalse(seqClassifierFlags0.selfTest);
      assertFalse(seqClassifierFlags0.useTypeSeqs);
      assertTrue(seqClassifierFlags0.biAlignmentPriorIsPMI);
      assertFalse(seqClassifierFlags0.useGEforSup);
      assertFalse(seqClassifierFlags0.factorInAlignmentProb);
      assertEquals(15, seqClassifierFlags0.stochasticBatchSize);
      assertFalse(seqClassifierFlags0.strictlyFirstOrder);
      assertFalse(seqClassifierFlags0.dualDecompDebug);
      assertTrue(seqClassifierFlags0.splitDocuments);
      assertFalse(seqClassifierFlags0.useInPlaceSGD);
      assertEquals((-1), seqClassifierFlags0.labelDictionaryCutoff);
      assertTrue(seqClassifierFlags0.useExternal);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSizeAlignment, 0.01D);
      assertFalse(seqClassifierFlags0.useTaggySequences);
      assertFalse(seqClassifierFlags0.tieOutputLayer);
      assertFalse(seqClassifierFlags0.useSum);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions3);
      assertFalse(seqClassifierFlags0.conjoinShapeNGrams);
      assertFalse(seqClassifierFlags0.useTags);
      assertFalse(seqClassifierFlags0.useFilter);
      assertFalse(seqClassifierFlags0.useOWLQN);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions2);
      assertFalse(seqClassifierFlags0.secondOrderNonLinear);
      assertEquals(1, seqClassifierFlags0.kBest);
      assertFalse(seqClassifierFlags0.useCWSWordFeatures);
      assertFalse(seqClassifierFlags0.useAbbr);
      assertFalse(seqClassifierFlags0.groupByOutputClass);
      assertFalse(seqClassifierFlags0.strictlyThirdOrder);
      assertFalse(seqClassifierFlags0.useHeadGov);
      assertFalse(seqClassifierFlags0.useOccurrencePatterns);
      assertFalse(seqClassifierFlags0.usePrediction);
      assertFalse(seqClassifierFlags0.useFeaturesC6gram);
      assertEquals(0, seqClassifierFlags0.featureCountThreshold);
      assertFalse(seqClassifierFlags0.useAdaDiff);
      assertFalse(seqClassifierFlags0.weightByEntropy);
      assertFalse(seqClassifierFlags0.useBigramInTwoClique);
      assertFalse(seqClassifierFlags0.testObjFunction);
      assertFalse(seqClassifierFlags0.use2W);
      assertTrue(seqClassifierFlags0.restrictLabels);
      assertEquals(0, seqClassifierFlags0.nerSkipFirstK);
      assertEquals(3, seqClassifierFlags0.charHalfWindow);
      assertEquals(0, seqClassifierFlags0.maxRight);
      assertEquals(0.01, seqClassifierFlags0.epsilon, 0.01D);
      assertFalse(seqClassifierFlags0.useProtoFeatures);
      assertEquals(0, seqClassifierFlags0.removeTopN);
      assertTrue(seqClassifierFlags0.initWithPosterior);
      assertFalse(seqClassifierFlags0.useGENIA);
      assertFalse(seqClassifierFlags0.useShapeStrings3);
      assertTrue(seqClassifierFlags0.averagePerceptron);
      assertFalse(seqClassifierFlags0.useShapeStrings5);
      assertFalse(seqClassifierFlags0.suppressTestDebug);
      assertFalse(seqClassifierFlags0.useShapeStrings4);
      assertFalse(seqClassifierFlags0.useFirstWord);
      assertFalse(seqClassifierFlags0.useEitherSideWord);
      assertEquals((-1), seqClassifierFlags0.maxNGramLeng);
      assertFalse(seqClassifierFlags0.useNeighborNGrams);
      assertEquals(1, seqClassifierFlags0.nerSlowerTimes);
      assertFalse(seqClassifierFlags0.useShapeStrings1);
      assertEquals(10, seqClassifierFlags0.totalFeatureSlice);
      assertFalse(seqClassifierFlags0.keepAllWhitespaces);
      assertEquals(Integer.MAX_VALUE, seqClassifierFlags0.printFeaturesUpto);
      assertFalse(seqClassifierFlags0.terminateOnAvgImprovement);
      assertEquals(1.0, seqClassifierFlags0.sigma, 0.01D);
      assertFalse(seqClassifierFlags0.factorInBiEdgePotential);
      assertFalse(seqClassifierFlags0.useYetMoreCpCShapes);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesAll);
      assertFalse(seqClassifierFlags0.matchNERIncentive);
      assertTrue(seqClassifierFlags0.useOutputLayer);
      assertFalse(seqClassifierFlags0.useYear);
      assertFalse(seqClassifierFlags0.normalize);
      assertEquals(0, seqClassifierFlags0.maxQNItr);
      assertFalse(seqClassifierFlags0.announceObjectBankEntries);
      assertFalse(seqClassifierFlags0.useBilingualNERPrior);
      assertFalse(seqClassifierFlags0.iobTags);
      assertEquals(0.0, seqClassifierFlags0.pctSegmenterScale, 0.01D);
      assertFalse(seqClassifierFlags0.useChunkySequences);
      assertEquals(0, seqClassifierFlags0.interimOutputFreq);
      assertFalse(seqClassifierFlags0.useKBest);
      assertFalse(seqClassifierFlags0.testVariance);
      assertFalse(seqClassifierFlags0.keepEnglishWhitespaces);
      assertFalse(seqClassifierFlags0.useGazettePhrases);
      assertEquals(1, seqClassifierFlags0.endFold);
      assertFalse(seqClassifierFlags0.useOutDict2);
      assertFalse(seqClassifierFlags0.usePrevSequences);
      assertFalse(seqClassifierFlags0.useBeginSent);
      assertEquals(4, seqClassifierFlags0.disjunctionWidth);
      assertFalse(seqClassifierFlags0.useEntityRule);
      assertEquals(0.1, seqClassifierFlags0.gainSGD, 0.01D);
      assertFalse(seqClassifierFlags0.useShapeConjunctions);
      assertFalse(seqClassifierFlags0.useFeaturesCpC6gram);
      assertEquals(1, seqClassifierFlags0.numRuns);
      assertFalse(seqClassifierFlags0.useLabelSource);
      assertFalse(seqClassifierFlags0.useIsURL);
      assertFalse(seqClassifierFlags0.printLabelValue);
      assertEquals(1, seqClassifierFlags0.bisequencePriorType);
      assertFalse(seqClassifierFlags0.useSuf);
      assertFalse(seqClassifierFlags0.useOnlySeenWeights);
      assertFalse(seqClassifierFlags0.useABSTRFreqDict);
      assertFalse(seqClassifierFlags0.twoStage);
      assertFalse(seqClassifierFlags0.noEdgeFeature);
      assertFalse(seqClassifierFlags0.usePKPre1);
      assertEquals(0.0, seqClassifierFlags0.dropoutRate, 0.01D);
      assertFalse(seqClassifierFlags0.keepEmptySentences);
      assertTrue(seqClassifierFlags0.useWord);
      assertFalse(seqClassifierFlags0.useWordnetFeatures);
      assertFalse(seqClassifierFlags0.timitDatum);
      assertEquals(1, seqClassifierFlags0.CRForder);
      assertFalse(seqClassifierFlags0.lazyUpdate);
      assertFalse(seqClassifierFlags0.useSequentialScanSampling);
      assertFalse(seqClassifierFlags0.strictGoodCoNLL);
      assertFalse(seqClassifierFlags0.useWordTag);
      assertFalse(seqClassifierFlags0.usePre);
      assertFalse(seqClassifierFlags0.doGibbs);
      assertFalse(seqClassifierFlags0.useCTBChar2);
      assertEquals(0, seqClassifierFlags0.evaluateIters);
      assertFalse(seqClassifierFlags0.useFeaturesC4gram);
      assertFalse(seqClassifierFlags0.useAs);
      assertTrue(seqClassifierFlags0.useViterbi);
      assertEquals(1, seqClassifierFlags0.multiThreadGrad);
      assertFalse(seqClassifierFlags0.usePrevVB);
      assertFalse(seqClassifierFlags0.useHKSuf1);
      assertEquals(1, seqClassifierFlags0.numLopExpert);
      assertEquals(1, seqClassifierFlags0.terminateOnEvalImprovementNumOfEpoch);
      assertFalse(seqClassifierFlags0.useShapeStrings);
      assertEquals(0, seqClassifierFlags0.dualDecompMaxItr);
      assertEquals(0, seqClassifierFlags0.ocrFold);
      assertEquals(1, seqClassifierFlags0.multiThreadPerceptron);
      assertFalse(seqClassifierFlags0.useRad2);
      assertEquals(1, seqClassifierFlags0.selfTrainIterations);
      assertFalse(seqClassifierFlags0.useRad1);
      assertFalse(seqClassifierFlags0.deleteBlankLines);
      assertFalse(seqClassifierFlags0.checkGradient);
      assertEquals(1.0, seqClassifierFlags0.randomizedRatio, 0.01D);
      assertFalse(seqClassifierFlags0.useASBCChar2);
      assertFalse(seqClassifierFlags0.dump);
      assertFalse(seqClassifierFlags0.useUniformPrior);
      assertFalse(seqClassifierFlags0.useNextVB);
      assertFalse(seqClassifierFlags0.useWEB);
      assertEquals(1, seqClassifierFlags0.numStartLayers);
      assertFalse(seqClassifierFlags0.useObservedFeaturesOnly);
      assertFalse(seqClassifierFlags0.useBerkeleyCompetitivePosterior);
      assertFalse(seqClassifierFlags0.useObservedSequencesOnly);
      assertFalse(seqClassifierFlags0.iobWrapper);
      assertEquals(1.0, seqClassifierFlags0.lambdaEN, 0.01D);
      assertFalse(seqClassifierFlags0.useNPHead);
      assertEquals(0, seqClassifierFlags0.featureCountThresh);
      assertFalse(seqClassifierFlags0.useNegDict2);
      assertFalse(seqClassifierFlags0.useFeaturesCpC5gram);
      assertFalse(seqClassifierFlags0.initWithNERPosterior);
      assertFalse(seqClassifierFlags0.useEmbedding);
      assertEquals(8, seqClassifierFlags0.distSimMaxBits);
      assertFalse(seqClassifierFlags0.useBig5);
      assertFalse(seqClassifierFlags0.gradientDebug);
      assertFalse(seqClassifierFlags0.useGazFeatures);
      assertEquals(0.001, seqClassifierFlags0.adaGradEps, 0.01D);
      assertFalse(seqClassifierFlags0.usePKSuf1);
      assertEquals(1.0, seqClassifierFlags0.adaptSigma, 0.01D);
      assertFalse(seqClassifierFlags0.sloppyGazette);
      assertEquals((-1), seqClassifierFlags0.tuneSampleSize);
      assertTrue(seqClassifierFlags0.useKnownLCWords);
      assertEquals(1, seqClassifierFlags0.featureThreshold);
      assertFalse(seqClassifierFlags0.useDictCTB2);
      assertFalse(seqClassifierFlags0.useHuber);
      assertFalse(seqClassifierFlags0.useLemmaAsWord);
      assertFalse(seqClassifierFlags0.useNegDict3);
      assertFalse(seqClassifierFlags0.useNegDict4);
      assertFalse(seqClassifierFlags0.useQuartic);
      assertFalse(seqClassifierFlags0.skipOutputRegularization);
      assertEquals(0.0, seqClassifierFlags0.featureDiffThresh, 0.01D);
      assertEquals(2, seqClassifierFlags0.CRFwindow);
      assertFalse(seqClassifierFlags0.perceptronDebug);
      assertFalse(seqClassifierFlags0.makeConsistent);
      assertTrue(seqClassifierFlags0.useInternal);
      assertFalse(seqClassifierFlags0.checkNameList);
      assertEquals(0.0, seqClassifierFlags0.featureWeightThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useNoisyNonNoisyFeature);
      assertFalse(seqClassifierFlags0.useRobustQN);
      assertFalse(seqClassifierFlags0.useFeaturesC5gram);
      assertFalse(seqClassifierFlags0.purgeDatasets);
      assertFalse(seqClassifierFlags0.useMidDotShape);
      assertFalse(seqClassifierFlags0.useUnknown);
      assertFalse(seqClassifierFlags0.useNext);
      assertFalse(seqClassifierFlags0.useHKPre1);
      assertTrue(seqClassifierFlags0.useCWSFeatures);
      assertFalse(seqClassifierFlags0.useDualDecomp);
      assertFalse(seqClassifierFlags0.usePhraseWords);
      assertFalse(seqClassifierFlags0.useANTE);
      assertFalse(seqClassifierFlags0.usePrevNextLemmas);
      assertFalse(seqClassifierFlags0.useChromaticSampling);
      assertEquals(0.0, seqClassifierFlags0.newgeneThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.justify);
      assertFalse(seqClassifierFlags0.useCTBSuf1);
      assertFalse(seqClassifierFlags0.useNegPKDict3);
      assertFalse(seqClassifierFlags0.useNegPKDict2);
      assertEquals(0, seqClassifierFlags0.startEvaluateIters);
      assertFalse(seqClassifierFlags0.dualDecompNotBIO);
      assertFalse(seqClassifierFlags0.randomLopFeatureSplit);
      assertFalse(seqClassifierFlags0.useReverseAffix);
      assertFalse(seqClassifierFlags0.intern);
      assertFalse(seqClassifierFlags0.useTypeySequences);
      assertFalse(seqClassifierFlags0.useNegPKDict4);
      assertEquals((-1), seqClassifierFlags0.arbitraryInputLayerSize);
      assertFalse(seqClassifierFlags0.useParenMatching);
      assertFalse(seqClassifierFlags0.useTopics);
      assertEquals(1, seqClassifierFlags0.numDatasetsPerFile);
      assertFalse(seqClassifierFlags0.transitionEdgeOnly);
      assertEquals(1000, seqClassifierFlags0.wordSegBeamSize);
      assertFalse(seqClassifierFlags0.useWordn);
      assertEquals(0, seqClassifierFlags0.numTimesPruneFeatures);
      assertTrue(seqClassifierFlags0.applyNERPenalty);
      assertFalse(seqClassifierFlags0.strictlyZeroethOrder);
      assertFalse(seqClassifierFlags0.useIsDateRange);
      assertFalse(seqClassifierFlags0.useDisjunctiveShapeInteraction);
      assertFalse(seqClassifierFlags0.useLastRealWord);
      assertEquals(1.0, seqClassifierFlags0.alignDDAlpha, 0.01D);
      assertEquals((-1), seqClassifierFlags0.purgeFeatures);
      assertFalse(seqClassifierFlags0.dualDecompAlignment);
      assertFalse(seqClassifierFlags0.dropoutApprox);
      assertEquals(25, seqClassifierFlags0.QNsize);
      assertEquals(0.0, seqClassifierFlags0.removeTopNPercent, 0.01D);
      assertFalse(seqClassifierFlags0.sighanPostProcessing);
      assertFalse(seqClassifierFlags0.useASBCSuf1);
      assertFalse(seqClassifierFlags0.useNPGovernor);
      assertFalse(seqClassifierFlags0.printNR);
      assertEquals(0.1, seqClassifierFlags0.initialGain, 0.01D);
      assertFalse(seqClassifierFlags0.regularizeSoftmaxTieParam);
      assertFalse(seqClassifierFlags0.groupByFeatureTemplate);
      assertFalse(seqClassifierFlags0.useNegHKDict2);
      assertFalse(seqClassifierFlags0.useNoisyLabel);
      assertFalse(seqClassifierFlags0.useNegHKDict3);
      assertFalse(seqClassifierFlags0.usePrediction2);
      assertTrue(seqClassifierFlags0.useQN);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesBigram);
      assertFalse(seqClassifierFlags0.useNegHKDict4);
      assertEquals(1.0E-4, seqClassifierFlags0.tolerance, 0.01D);
      assertFalse(seqClassifierFlags0.testHessSamples);
      assertFalse(seqClassifierFlags0.greekifyNGrams);
      assertFalse(seqClassifierFlags0.useMsr);
      assertFalse(seqClassifierFlags0.useMSRChar2);
      assertEquals(Double.POSITIVE_INFINITY, seqClassifierFlags0.searchGraphPrune, 0.01D);
      assertFalse(seqClassifierFlags0.doFE);
      assertFalse(seqClassifierFlags0.useWEBFreqDict);
      assertTrue(seqClassifierFlags0.useSequences);
      assertEquals(50, seqClassifierFlags0.SGD2QNhessSamples);
      assertFalse(seqClassifierFlags0.normalizeTerms);
      assertFalse(seqClassifierFlags0.sparseOutputLayer);
      assertFalse(seqClassifierFlags0.useChPos);
      assertFalse(seqClassifierFlags0.addCapitalFeatures);
      assertFalse(seqClassifierFlags0.addBiasToEmbedding);
      assertFalse(seqClassifierFlags0.useIfInteger);
      assertEquals(0.9, seqClassifierFlags0.selfTrainConfidenceThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.ocrTrain);
      assertEquals(0.0, seqClassifierFlags0.priorLambda, 0.01D);
      assertFalse(seqClassifierFlags0.useDictleng);
      assertFalse(seqClassifierFlags0.bioSubmitOutput);
      assertFalse(seqClassifierFlags0.randomLopWeights);
      assertFalse(seqClassifierFlags0.useNB);
      assertFalse(seqClassifierFlags0.intern2);
      assertFalse(seqClassifierFlags0.useTitle);
      assertFalse(seqClassifierFlags0.useCTBPre1);
      assertFalse(seqClassifierFlags0.useHardGE);
      assertFalse(seqClassifierFlags0.fakeDataset);
      assertFalse(seqClassifierFlags0.useDictASBC2);
      assertFalse(seqClassifierFlags0.useEntityTypeSequences);
      assertEquals((-1), seqClassifierFlags0.samplingSpeedUpThreshold);
      assertEquals(0, seqClassifierFlags0.maxDocSize);
      assertFalse(seqClassifierFlags0.usePrev);
      assertFalse(seqClassifierFlags0.subCWGaz);
      assertTrue(seqClassifierFlags0.learnCHBasedOnEN);
      assertFalse(seqClassifierFlags0.appendLC);
      assertFalse(seqClassifierFlags0.useNERPriorBIO);
      assertFalse(seqClassifierFlags0.useLemmas);
      assertFalse(seqClassifierFlags0.includeFullCRFInLOP);
      assertFalse(seqClassifierFlags0.useTypeSeqs2);
      assertEquals(1.0, seqClassifierFlags0.lambdaCH, 0.01D);
      assertFalse(seqClassifierFlags0.doAdaptation);
      assertFalse(seqClassifierFlags0.useCRFforUnsup);
      assertFalse(seqClassifierFlags0.useTypeSeqs3);
      assertFalse(seqClassifierFlags0.useDictHK2);
      assertFalse(seqClassifierFlags0.useOrdinal);
      assertEquals((-1), seqClassifierFlags0.SGDPasses);
      assertFalse(seqClassifierFlags0.useHybrid);
      assertFalse(seqClassifierFlags0.prependEmbedding);
      assertEquals(0, seqClassifierFlags0.scaledSGDMethod);
      assertFalse(seqClassifierFlags0.useGenericFeatures);
      assertFalse(seqClassifierFlags0.useSentenceNumber);
      assertFalse(seqClassifierFlags0.useRad2b);
      assertFalse(seqClassifierFlags0.blockInitialize);
      assertFalse(seqClassifierFlags0.useSegmentation);
      assertEquals(1, seqClassifierFlags0.startFold);
      assertFalse(seqClassifierFlags0.useAbbr1);
      assertFalse(seqClassifierFlags0.printWeights);
      assertEquals(0.0, seqClassifierFlags0.priorAlpha, 0.01D);
      assertFalse(seqClassifierFlags0.removeStrictGoodCoNLLDuplicates);
      assertFalse(seqClassifierFlags0.useNegCTBDict4);
      assertEquals(0.0, seqClassifierFlags0.l1reg, 0.01D);
      assertFalse(seqClassifierFlags0.useNegCTBDict2);
      assertFalse(seqClassifierFlags0.useNegCTBDict3);
      assertFalse(seqClassifierFlags0.combo);
      assertFalse(seqClassifierFlags0.useDict2);
      assertFalse(seqClassifierFlags0.useBagOfWords);
      assertFalse(seqClassifierFlags0.powerAlignProb);
      assertFalse(seqClassifierFlags0.evaluateBackground);
      assertFalse(seqClassifierFlags0.retainEntitySubclassification);
      assertEquals(100, seqClassifierFlags0.printClassifierParam);
      assertEquals(0.0, seqClassifierFlags0.alignmentPruneThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useReverse);
      assertFalse(seqClassifierFlags0.useSeenFeaturesOnly);
      assertFalse(seqClassifierFlags0.useSymWordPairs);
      assertFalse(seqClassifierFlags0.useHk);
      assertFalse(seqClassifierFlags0.learnENBasedOnCH);
      assertEquals(0, seqClassifierFlags0.multiThreadGibbs);
      assertEquals(0, seqClassifierFlags0.hybridCutoffIteration);
      assertFalse(seqClassifierFlags0.tuneSGD);
      assertFalse(seqClassifierFlags0.readStdin);
      assertFalse(seqClassifierFlags0.backpropLopTraining);
      assertEquals(10, seqClassifierFlags0.totalDataSlice);
      assertFalse(seqClassifierFlags0.usePhraseWordTags);
      assertFalse(seqClassifierFlags0.useWideDisjunctive);
      assertFalse(seqClassifierFlags0.useFREQ);
      assertFalse(seqClassifierFlags0.noMidNGrams);
      assertFalse(seqClassifierFlags0.terminateOnEvalImprovement);
      assertFalse(seqClassifierFlags0.useUnicodeBlock);
      assertFalse(seqClassifierFlags0.useCorefFeatures);
      assertFalse(seqClassifierFlags0.noNeighborConstraints);
      assertFalse(seqClassifierFlags0.softmaxOutputLayer);
      assertFalse(seqClassifierFlags0.expandMidDot);
      assertFalse(seqClassifierFlags0.useURLSequences);
      assertFalse(seqClassifierFlags0.useGazettes);
      assertEquals(25, seqClassifierFlags0.QNsize2);
      assertFalse(seqClassifierFlags0.useRule2);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions);
      assertFalse(seqClassifierFlags0.useScaledSGD);
      assertFalse(seqClassifierFlags0.useSGDtoQN);
      assertFalse(seqClassifierFlags0.usePKChar2);
      assertEquals(1, seqClassifierFlags0.numTimesRemoveTopN);
      assertEquals(1, seqClassifierFlags0.numFolds);
      assertFalse(seqClassifierFlags0.outputIterationsToFile);
      assertEquals(30, seqClassifierFlags0.beamSize);
      assertFalse(seqClassifierFlags0.useAcqPrior);
      assertEquals(1.0, seqClassifierFlags0.dropoutScale, 0.01D);
      assertFalse(seqClassifierFlags0.dehyphenateNGrams);
      assertFalse(seqClassifierFlags0.useMoreTags);
      assertFalse(seqClassifierFlags0.useACR);
      assertFalse(seqClassifierFlags0.useSGD);
      assertEquals(0.0, seqClassifierFlags0.annealingRate, 0.01D);
      assertFalse(seqClassifierFlags0.useMinimalAbbr);
      assertFalse(seqClassifierFlags0.usePosition);
      assertFalse(seqClassifierFlags0.useLongSequences);
      assertFalse(seqClassifierFlags0.useWordShapeGaz);
      assertFalse(seqClassifierFlags0.largeChSegFile);
      assertEquals(0, seqClassifierFlags0.numOfFeatureSlices);
      assertFalse(seqClassifierFlags0.useVB);
      assertFalse(seqClassifierFlags0.baseline);
      assertFalse(seqClassifierFlags0.useFloat);
      assertEquals(0, seqClassifierFlags0.multiThreadClassifier);
      assertFalse(seqClassifierFlags0.useRadical);
      assertTrue(seqClassifierFlags0.includeC2EViterbi);
      assertFalse(seqClassifierFlags0.useChunks);
      assertEquals((-1), seqClassifierFlags0.wordShape);
      assertFalse(seqClassifierFlags0.normalizeTimex);
      assertFalse(seqClassifierFlags0.suppressMidDotPostprocessing);
      assertFalse(seqClassifierFlags0.useEitherSideDisjunctive);
      assertEquals(0, seqClassifierFlags0.numOfSlices);
      assertFalse(seqClassifierFlags0.cacheNGrams);
      assertFalse(seqClassifierFlags0.useCommonWordsFeature);
      assertFalse(seqClassifierFlags0.pctSegmenterLenAdjust);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSize, 0.01D);
      assertFalse(seqClassifierFlags0.useNextRealWord);
      assertFalse(seqClassifierFlags0.saveFeatureIndexToDisk);
      assertFalse(seqClassifierFlags0.use4Clique);
      assertFalse(seqClassifierFlags0.useMoreGazFeatures);
      assertFalse(seqClassifierFlags0.useWordPairs);
      assertFalse(seqClassifierFlags0.useTOK);
      assertFalse(seqClassifierFlags0.printFactorTable);
      assertFalse(seqClassifierFlags0.useNextSequences);
      assertFalse(seqClassifierFlags0.useNGrams);
      assertFalse(seqClassifierFlags0.cleanGazette);
      assertFalse(seqClassifierFlags0.nonLinearCRF);
      assertFalse(seqClassifierFlags0.evaluateTrain);
      assertEquals((-1), seqClassifierFlags0.QNPasses);
      assertTrue(seqClassifierFlags0.useMemoryEvaluator);
      assertFalse(seqClassifierFlags0.useSMD);
      assertFalse(seqClassifierFlags0.useTrainLexicon);
      assertFalse(seqClassifierFlags0.restrictTransitionsTimit);
      assertEquals(1.0, seqClassifierFlags0.unsupDropoutScale, 0.01D);
      assertFalse(seqClassifierFlags0.useUnicodeType5gram);
      assertFalse(seqClassifierFlags0.geDebug);
      assertEquals(8, seqClassifierFlags0.maxAllowedChromaticSize);
      assertFalse(seqClassifierFlags0.useMUCFeatures);
      assertFalse(seqClassifierFlags0.useBerkeleyAlignerForViterbi);
      assertFalse(seqClassifierFlags0.useMinimalAbbr1);
      assertFalse(seqClassifierFlags0.useASBCPre1);
      assertEquals(0.5, seqClassifierFlags0.alignmentDecodeThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useKL);
      assertFalse(seqClassifierFlags0.strictlySecondOrder);
      assertFalse(seqClassifierFlags0.useWord2);
      assertFalse(seqClassifierFlags0.mergeTags);
      assertFalse(seqClassifierFlags0.useBoundarySequences);
      assertFalse(seqClassifierFlags0.useWord1);
      assertEquals(0.95, seqClassifierFlags0.adaDeltaRho, 0.01D);
      assertTrue(seqClassifierFlags0.separateASCIIandRange);
      assertFalse(seqClassifierFlags0.useWord4);
      assertFalse(seqClassifierFlags0.useSigmoid);
      assertFalse(seqClassifierFlags0.useWord3);
      assertFalse(seqClassifierFlags0.useSymTags);
      assertFalse(seqClassifierFlags0.useUnicodeType);
      assertFalse(seqClassifierFlags0.removeBackgroundSingletonFeatures);
      assertFalse(seqClassifierFlags0.useLC);
      assertTrue(seqClassifierFlags0.useHiddenLayer);
      assertTrue(seqClassifierFlags0.useDenero);
      assertFalse(seqClassifierFlags0.useNERPrior);
      assertFalse(seqClassifierFlags0.useDisjunctive);
      assertEquals(1, seqClassifierFlags0.selfTrainWindowSize);
      assertEquals(0.1, seqClassifierFlags0.initRate, 0.01D);
      assertFalse(seqClassifierFlags0.useGoodForNamesCpC);
      assertFalse(seqClassifierFlags0.useAdaDelta);
      assertTrue(seqClassifierFlags0.initViterbi);
      assertFalse(seqClassifierFlags0.useABSTRFreq);
      assertFalse(seqClassifierFlags0.memoryThrift);
      assertFalse(seqClassifierFlags0.verboseForTrueCasing);
      assertEquals(0.0, seqClassifierFlags0.softmaxTieLambda, 0.01D);
      assertFalse(seqClassifierFlags0.hardcodeSoftmaxOutputWeights);
      assertFalse(seqClassifierFlags0.useStochasticQN);
      assertFalse(seqClassifierFlags0.printTrainLabels);
      assertFalse(seqClassifierFlags0.useMoreAbbr);
      assertFalse(seqClassifierFlags0.useABSTR);
      assertTrue(seqClassifierFlags0.keepOBInMemory);
      assertFalse(seqClassifierFlags0.useNumberFeature);
      assertFalse(seqClassifierFlags0.verboseMode);
      assertFalse(seqClassifierFlags0.casedDistSim);
      assertEquals(100, seqClassifierFlags0.numSamples);
      assertFalse(seqClassifierFlags0.printXML);
      assertFalse(seqClassifierFlags0.useDisjShape);
      assertFalse(seqClassifierFlags0.usePk);
      assertEquals("", seqClassifierFlags0.toString());
      assertNotNull(seqClassifierFlags0);
      
      LinkedList<WordTag> linkedList0 = new LinkedList<WordTag>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = JSONObject.valueToString(linkedList0, 0, 0);
      assertEquals("[]", string0);
      assertEquals(0, linkedList0.size());
      assertNotNull(string0);
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I52 Branch 28 IFEQ L350 - true
   */

  @Test
  public void test10()  throws Throwable  {
      HashMap<LinkedList<WordLemmaTag>, Word> hashMap0 = new HashMap<LinkedList<WordLemmaTag>, Word>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("{", (Object) jSONObject0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject1.accumulate("{", (Object) hashMap0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject2.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(jSONObject2);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I177 Branch 86 IF_ICMPLT L1058 - true
   */

  @Test
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject((Object) "uha", stringArray0);
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      try {
        JSONObject jSONObject1 = jSONObject0.getJSONObject("\u001B[37m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\u001b[37m\"] not found.
         //
      }
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I6 Branch 57 IFNONNULL L662 - false
   */

  @Test
  public void test12()  throws Throwable  {
      try {
        String string0 = JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
      }
  }

  //Test case number: 13
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 26 IFNONNULL L346 - true
   * Goal 2. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I52 Branch 28 IFEQ L350 - false
   */

  @Test
  public void test13()  throws Throwable  {
      Byte byte0 = new Byte((byte)24);
      assertEquals((byte)24, (byte)byte0);
      
      HashMap<TaggedWord, LabeledWord> hashMap0 = new HashMap<TaggedWord, LabeledWord>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      assertEquals(2, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(jSONObject0);
      
      CoreLabel coreLabel0 = new CoreLabel();
      assertEquals("", coreLabel0.originalText());
      assertNull(coreLabel0.lemma());
      assertNull(coreLabel0.value());
      assertEquals(0, coreLabel0.copyCount());
      assertNull(coreLabel0.category());
      assertEquals(-1, coreLabel0.index());
      assertEquals(-1, coreLabel0.endPosition());
      assertEquals("", coreLabel0.before());
      assertEquals(0, coreLabel0.size());
      assertEquals("", coreLabel0.after());
      assertNull(coreLabel0.ner());
      assertNull(coreLabel0.tag());
      assertNull(coreLabel0.word());
      assertNull(coreLabel0.docID());
      assertEquals(-1, coreLabel0.sentIndex());
      assertEquals(-1, coreLabel0.beginPosition());
      assertNotNull(coreLabel0);
      
      IndexedWord indexedWord0 = new IndexedWord(coreLabel0);
      assertNull(indexedWord0.lemma());
      assertEquals("", indexedWord0.originalText());
      assertEquals(0, indexedWord0.copyCount());
      assertNull(indexedWord0.docID());
      assertEquals(-1, indexedWord0.index());
      assertNull(indexedWord0.ner());
      assertEquals(-1, indexedWord0.endPosition());
      assertNull(indexedWord0.word());
      assertNull(indexedWord0.tag());
      assertEquals(0, indexedWord0.size());
      assertEquals(-1, indexedWord0.beginPosition());
      assertEquals(-1, indexedWord0.sentIndex());
      assertNull(indexedWord0.value());
      assertEquals("", coreLabel0.originalText());
      assertNull(coreLabel0.lemma());
      assertNull(coreLabel0.value());
      assertEquals(0, coreLabel0.copyCount());
      assertNull(coreLabel0.category());
      assertEquals(-1, coreLabel0.index());
      assertEquals(-1, coreLabel0.endPosition());
      assertEquals("", coreLabel0.before());
      assertEquals(0, coreLabel0.size());
      assertEquals("", coreLabel0.after());
      assertNull(coreLabel0.ner());
      assertNull(coreLabel0.tag());
      assertNull(coreLabel0.word());
      assertNull(coreLabel0.docID());
      assertEquals(-1, coreLabel0.sentIndex());
      assertEquals(-1, coreLabel0.beginPosition());
      assertNotNull(indexedWord0);
      
      JSONObject jSONObject1 = jSONObject0.append("=", (Object) indexedWord0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(3, jSONObject0.length());
      assertEquals(3, jSONObject1.length());
      assertNull(indexedWord0.lemma());
      assertEquals("", indexedWord0.originalText());
      assertEquals(0, indexedWord0.copyCount());
      assertNull(indexedWord0.docID());
      assertEquals(-1, indexedWord0.index());
      assertNull(indexedWord0.ner());
      assertEquals(-1, indexedWord0.endPosition());
      assertNull(indexedWord0.word());
      assertNull(indexedWord0.tag());
      assertEquals(0, indexedWord0.size());
      assertEquals(-1, indexedWord0.beginPosition());
      assertEquals(-1, indexedWord0.sentIndex());
      assertNull(indexedWord0.value());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", coreLabel0.originalText());
      assertNull(coreLabel0.lemma());
      assertNull(coreLabel0.value());
      assertEquals(0, coreLabel0.copyCount());
      assertNull(coreLabel0.category());
      assertEquals(-1, coreLabel0.index());
      assertEquals(-1, coreLabel0.endPosition());
      assertEquals("", coreLabel0.before());
      assertEquals(0, coreLabel0.size());
      assertEquals("", coreLabel0.after());
      assertNull(coreLabel0.ner());
      assertNull(coreLabel0.tag());
      assertNull(coreLabel0.word());
      assertNull(coreLabel0.docID());
      assertEquals(-1, coreLabel0.sentIndex());
      assertEquals(-1, coreLabel0.beginPosition());
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject0.accumulate("=", (Object) byte0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(3, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(3, jSONObject2.length());
      assertNotNull(jSONObject2);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getLong(Ljava/lang/String;)J: I13 Branch 49 IFEQ L536 - false
   */

  @Test
  public void test14()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("lo", 1553);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      
      long long0 = jSONObject1.optLong("lo", (long) 1553);
      assertEquals(1553L, long0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I45 Branch 60 IFGE L670 - true
   */

  @Test
  public void test15()  throws Throwable  {
      Double double0 = new Double((-3.4587292534E10));
      assertEquals((-3.4587292534E10), (double)double0, 0.01D);
      
      String string0 = JSONObject.valueToString(double0, 340, 340);
      assertEquals("-3.4587292534E10", string0);
      assertNotNull(string0);
  }

  //Test case number: 16
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I183 Branch 87 IF_ICMPLT L1058 - false
   * Goal 2. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I189 Branch 88 IF_ICMPLT L1058 - false
   * Goal 3. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I196 Branch 89 IF_ICMPLT L1058 - false
   * Goal 4. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I202 Branch 90 IF_ICMPGE L1058 - false
   */

  @Test
  public void test16()  throws Throwable  {
      TaggedWord taggedWord0 = new TaggedWord((String) null, "\u201D");
      assertEquals(-1, taggedWord0.beginPosition());
      assertNull(taggedWord0.value());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("\u201D", taggedWord0.tag());
      assertNull(taggedWord0.word());
      assertNotNull(taggedWord0);
      
      String string0 = JSONObject.valueToString(taggedWord0);
      assertEquals("\"null/\\u201d\"", string0);
      assertEquals(-1, taggedWord0.beginPosition());
      assertNull(taggedWord0.value());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("\u201D", taggedWord0.tag());
      assertNull(taggedWord0.word());
      assertNotNull(string0);
  }

  //Test case number: 17
  @Test
  public void test17()  throws Throwable  {
      HashMap<JSONObject, WordLemmaTag> hashMap0 = new HashMap<JSONObject, WordLemmaTag>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject0);
      
      HashMap<WordLemmaTag, TaggedWord> hashMap1 = new HashMap<WordLemmaTag, TaggedWord>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("Expected a ':' after a key", (Object) hashMap1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      String string0 = jSONObject0.toString();
      assertEquals("{\"Expected a ':' after a key\":{}}", string0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(string0);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 65 IFEQ L815 - false
   */

  @Test
  public void test18()  throws Throwable  {
      HashMap<WordLemmaTag, CategoryWordTag> hashMap0 = new HashMap<WordLemmaTag, CategoryWordTag>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      HashIndex<LabeledWord> hashIndex0 = new HashIndex<LabeledWord>(1259);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertNotNull(hashIndex0);
      
      JSONObject jSONObject1 = jSONObject0.put("ishashCode", (Collection) hashIndex0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      JSONArray jSONArray0 = jSONObject1.optJSONArray("ishashCode");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertEquals(0, jSONArray0.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONArray0);
  }

  //Test case number: 19
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I13 Branch 111 IFEQ L1253 - false
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I108 Branch 117 IFEQ L1271 - false
   */

  @Test
  public void test19()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(4532, (Object) jSONArray0);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(4533, jSONArray1.length());
      assertEquals(4533, jSONArray0.length());
      assertNotNull(jSONArray1);
      
      try {
        JSONObject jSONObject0 = jSONArray1.toJSONObject(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
      }
  }

  //Test case number: 20
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I45 Branch 95 IFEQ L1094 - false
   * Goal 2. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I54 Branch 96 IFNE L1095 - false
   * Goal 3. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I61 Branch 97 IFEQ L1095 - true
   */

  @Test
  public void test20()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
      
      JSONObject jSONObject0 = new JSONObject(object0);
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Float float0 = new Float((float) (-12));
      assertEquals((-12.0F), (float)float0, 0.01F);
      
      JSONObject jSONObject1 = jSONObject0.append("getlistIterator", (Object) float0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject1);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 66 IFEQ L829 - false
   */

  @Test
  public void test21()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      HashMap<WordTag, Tag> hashMap0 = new HashMap<WordTag, Tag>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject1 = jSONObject0.put("i<?", (Map) hashMap0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject1.optJSONObject("i<?");
      assertSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject2.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject2);
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject0.equals((Object)jSONObject2));
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optBoolean(Ljava/lang/String;)Z: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = jSONObject0.optBoolean("6Xyj,}WX2 3VpeElh");
      assertFalse(boolean0);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getInt(Ljava/lang/String;)I: I13 Branch 46 IFEQ L484 - false
   */

  @Test
  public void test23()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      
      JSONObject jSONObject0 = new JSONObject((Object) boolean0);
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("oe", 4391L);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject0.getInt("oe");
      assertEquals(4391, int0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(2, jSONObject0.length());
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getString(Ljava/lang/String;)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      try {
        String string0 = jSONObject0.getString("L /oF>1CL(IX,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"L /oF>1CL(IX,\"] not found.
         //
      }
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I23 Branch 93 IFNE L1090 - true
   */

  @Test
  public void test25()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      
      JSONObject jSONObject0 = new JSONObject((Object) boolean0);
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      try {
        JSONObject jSONObject1 = jSONObject0.put("]3is not a JnONObjec1.", Double.POSITIVE_INFINITY);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
      }
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I96 Branch 115 IFNE L1271 - true
   */

  @Test
  public void test26()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      
      String string0 = JSONObject.valueToString(boolean0);
      assertEquals("false", string0);
      assertNotNull(string0);
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I7 Branch 31 IFNE L393 - true
   */

  @Test
  public void test27()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.POSITIVE_INFINITY);
      assertEquals("null", string0);
      assertNotNull(string0);
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 6 LOOKUPSWITCH L183 Case 125 - true
   */

  @Test
  public void test28()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optLong(Ljava/lang/String;)J: root-Branch
   */

  @Test
  public void test29()  throws Throwable  {
      HashMap<HashMap<CoreLabel, Integer>, Byte> hashMap0 = new HashMap<HashMap<CoreLabel, Integer>, Byte>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(jSONObject0);
      
      long long0 = jSONObject0.optLong("mvaUwXY");
      assertEquals(0L, long0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  //Test case number: 30
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I6 Branch 52 IFNONNULL L568 - false
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I62 Branch 125 IFEQ L1317 - false
   * Goal 3. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I160 Branch 131 IFEQ L1335 - false
   */

  @Test
  public void test30()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_MAX;
      assertEquals((byte)126, byte0);
      
      String string0 = JSONObject.numberToString((Number) (byte)126);
      assertEquals("126", string0);
      assertNotNull(string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "126");
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string1 = jSONObject0.toString((int) (byte)126);
      assertEquals("{\n                                                                                                                              \"bytes\": [\n                                                                                                                                                                                                                                                            49,\n                                                                                                                                                                                                                                                            50,\n                                                                                                                                                                                                                                                            54\n                                                                                                                              ],\n                                                                                                                              \"class\": \"class java.lang.String\",\n                                                                                                                              \"empty\": false\n}", string1);
      assertNotSame(string1, string0);
      assertEquals(3, jSONObject0.length());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  //Test case number: 31
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I121 Branch 118 IFEQ L1275 - false
   * Goal 2. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I28 Branch 133 IFEQ L1358 - false
   * Goal 3. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I84 Branch 135 IFEQ L1367 - false
   */

  @Test
  public void test31()  throws Throwable  {
      HashMap<HashMap<CoreLabel, Integer>, Byte> hashMap0 = new HashMap<HashMap<CoreLabel, Integer>, Byte>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.append("no", (Object) hashMap0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject1.put("{mvaUwXY", (double) 0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(2, jSONObject2.length());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertNotNull(jSONObject2);
      
      StringWriter stringWriter0 = new StringWriter(0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = (StringWriter)jSONObject2.write((Writer) stringWriter0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(2, jSONObject2.length());
      assertEquals(2, jSONObject0.length());
      assertEquals("{\"no\":[{}],\"{mvaUwXY\":0}", stringWriter1.toString());
      assertEquals("{\"no\":[{}],\"{mvaUwXY\":0}", stringWriter0.toString());
      assertEquals(2, jSONObject1.length());
      assertNotNull(stringWriter1);
  }

  //Test case number: 32
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I6 Branch 98 IFNULL L1113 - true
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I102 Branch 116 IFNE L1271 - true
   */

  @Test
  public void test32()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(jSONObject0);
      
      String string0 = JSONObject.valueToString(jSONObject0);
      assertEquals("{}", string0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(string0);
      
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(jSONArray0);
  }

  //Test case number: 33
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I45 Branch 35 IFGE L400 - true
   */

  @Test
  public void test33()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1.0E-4);
      assertEquals("1.0E-4", string0);
      assertNotNull(string0);
  }

  //Test case number: 34
  /*
   * 5 covered goals:
   * Goal 1. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I21 Branch 132 IFEQ L1357 - true
   * Goal 2. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I21 Branch 132 IFEQ L1357 - false
   * Goal 3. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I28 Branch 133 IFEQ L1358 - true
   * Goal 4. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I65 Branch 134 IFEQ L1365 - true
   * Goal 5. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I84 Branch 135 IFEQ L1367 - true
   */

  @Test
  public void test34()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("", 0.4);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      
      StringWriter stringWriter0 = new StringWriter(190);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = (StringWriter)jSONObject0.write((Writer) stringWriter0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals("{\"\":0.4}", stringWriter0.toString());
      assertEquals("{\"\":0.4}", stringWriter1.toString());
      assertEquals(1, jSONObject0.length());
      assertNotNull(stringWriter1);
  }

  //Test case number: 35
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I39 Branch 30 IFEQ L376 - true
   */

  @Test
  public void test35()  throws Throwable  {
      HashMap<LinkedList<WordLemmaTag>, Word> hashMap0 = new HashMap<LinkedList<WordLemmaTag>, Word>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      assertEquals(2, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("Cf", (Object) hashMap0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(3, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(3, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      LinkedList<CoreMap> linkedList0 = new LinkedList<CoreMap>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Annotation annotation0 = new Annotation((List<CoreMap>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("", annotation0.toString());
      assertEquals(3, annotation0.size());
      assertNotNull(annotation0);
      
      try {
        JSONObject jSONObject2 = jSONObject1.append("Cf", (Object) annotation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[Cf] is not a JSONArray.
         //
      }
  }

  //Test case number: 36
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;J)Lwheel/json/JSONObject;: root-Branch
   */

  @Test
  public void test36()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONObject jSONObject0 = new JSONObject((Object) linkedList0);
      assertEquals(2, jSONObject0.length());
      assertEquals(0, linkedList0.size());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.append(">mob", (Object) jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(3, jSONObject0.length());
      assertEquals(0, linkedList0.size());
      assertEquals(3, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = jSONObject1.isNull(">mob");
      assertFalse(boolean0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(3, jSONObject0.length());
      assertEquals(0, linkedList0.size());
      assertEquals(3, jSONObject1.length());
      
      JSONObject jSONObject2 = jSONObject0.put(">mob", (long) 129);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(3, jSONObject0.length());
      assertEquals(0, linkedList0.size());
      assertEquals(3, jSONObject2.length());
      assertNotNull(jSONObject2);
  }

  //Test case number: 37
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I30 Branch 94 IFEQ L1090 - false
   */

  @Test
  public void test37()  throws Throwable  {
      HashMap<LinkedList<StringLabel>, Integer> hashMap0 = new HashMap<LinkedList<StringLabel>, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject0);
      
      try {
        JSONObject jSONObject1 = jSONObject0.put("'^W)", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
      }
  }

  //Test case number: 38
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.getJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 47 IFEQ L499 - false
   * Goal 2. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I6 Branch 98 IFNULL L1113 - false
   * Goal 3. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I12 Branch 99 IFNE L1113 - false
   */

  @Test
  public void test38()  throws Throwable  {
      HashMap<HashMap<CoreLabel, Integer>, Byte> hashMap0 = new HashMap<HashMap<CoreLabel, Integer>, Byte>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject0);
      
      HashIndex<Float> hashIndex0 = new HashIndex<Float>(0);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertNotNull(hashIndex0);
      
      JSONObject jSONObject1 = jSONObject0.put("mvaUwXY", (Collection) hashIndex0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertNotNull(jSONObject1);
      
      JSONArray jSONArray0 = jSONObject0.getJSONArray("mvaUwXY");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONArray0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertNull(jSONArray1);
  }

  //Test case number: 39
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.remove(Ljava/lang/String;)Ljava/lang/Object;: root-Branch
   * Goal 2. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I20 Branch 70 IFNULL L978 - true
   */

  @Test
  public void test39()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONObject jSONObject0 = new JSONObject((Object) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("mob", (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, linkedList0.size());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertNotNull(jSONObject1);
  }

  //Test case number: 40
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I40 Branch 53 IFNE L574 - false
   */

  @Test
  public void test40()  throws Throwable  {
      HashMap<TaggedWord, Float> hashMap0 = new HashMap<TaggedWord, Float>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(stringArray0);
  }

  //Test case number: 41
  /*
   * 10 covered goals:
   * Goal 1. wheel.json.JSONObject.toString()Ljava/lang/String;: I19 Branch 101 IFEQ L1140 - false
   * Goal 2. wheel.json.JSONObject.toString()Ljava/lang/String;: I28 Branch 102 IF_ICMPLE L1141 - true
   * Goal 3. wheel.json.JSONObject.toString()Ljava/lang/String;: I28 Branch 102 IF_ICMPLE L1141 - false
   * Goal 4. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I82 Branch 114 IFEQ L1268 - true
   * Goal 5. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I96 Branch 115 IFNE L1271 - false
   * Goal 6. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I102 Branch 116 IFNE L1271 - false
   * Goal 7. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I108 Branch 117 IFEQ L1271 - true
   * Goal 8. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I121 Branch 118 IFEQ L1275 - true
   * Goal 9. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I138 Branch 119 IFEQ L1278 - true
   * Goal 10. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I156 Branch 120 IFEQ L1281 - true
   */

  @Test
  public void test41()  throws Throwable  {
      WordLemmaTag wordLemmaTag0 = new WordLemmaTag();
      assertNull(wordLemmaTag0.tag());
      assertNull(wordLemmaTag0.lemma());
      assertNull(wordLemmaTag0.word());
      assertNull(wordLemmaTag0.value());
      assertNotNull(wordLemmaTag0);
      
      JSONObject jSONObject0 = new JSONObject((Object) wordLemmaTag0);
      assertEquals(1, jSONObject0.length());
      assertNull(wordLemmaTag0.tag());
      assertNull(wordLemmaTag0.lemma());
      assertNull(wordLemmaTag0.word());
      assertNull(wordLemmaTag0.value());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("Expected a ':' after a key", (Object) "Expected a ':' after a key");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertNull(wordLemmaTag0.tag());
      assertNull(wordLemmaTag0.lemma());
      assertNull(wordLemmaTag0.word());
      assertNull(wordLemmaTag0.value());
      assertEquals(2, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      String string0 = jSONObject0.toString();
      assertEquals("{\"Expected a ':' after a key\":\"Expected a ':' after a key\",\"class\":\"class edu.stanford.nlp.ling.WordLemmaTag\"}", string0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(2, jSONObject0.length());
      assertNull(wordLemmaTag0.tag());
      assertNull(wordLemmaTag0.lemma());
      assertNull(wordLemmaTag0.word());
      assertNull(wordLemmaTag0.value());
      assertNotNull(string0);
  }

  //Test case number: 42
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I77 Branch 62 IFLE L674 - true
   */

  @Test
  public void test42()  throws Throwable  {
      SeqClassifierFlags seqClassifierFlags0 = new SeqClassifierFlags();
      assertFalse(seqClassifierFlags0.strictGoodCoNLL);
      assertEquals(0, seqClassifierFlags0.scaledSGDMethod);
      assertEquals(0.0, seqClassifierFlags0.priorAlpha, 0.01D);
      assertFalse(seqClassifierFlags0.useFREQ);
      assertFalse(seqClassifierFlags0.baseline);
      assertFalse(seqClassifierFlags0.useCTBChar2);
      assertTrue(seqClassifierFlags0.initViterbi);
      assertFalse(seqClassifierFlags0.perceptronDebug);
      assertEquals(1, seqClassifierFlags0.startFold);
      assertFalse(seqClassifierFlags0.useWordTag);
      assertEquals((-1), seqClassifierFlags0.SGDPasses);
      assertEquals(1.0, seqClassifierFlags0.lambdaCH, 0.01D);
      assertEquals(1, seqClassifierFlags0.selfTrainIterations);
      assertEquals(0, seqClassifierFlags0.multiThreadClassifier);
      assertFalse(seqClassifierFlags0.skipOutputRegularization);
      assertFalse(seqClassifierFlags0.useOnlySeenWeights);
      assertFalse(seqClassifierFlags0.useLabelSource);
      assertFalse(seqClassifierFlags0.tuneSGD);
      assertEquals((-1), seqClassifierFlags0.samplingSpeedUpThreshold);
      assertFalse(seqClassifierFlags0.usePosition);
      assertEquals((-1), seqClassifierFlags0.tuneSampleSize);
      assertFalse(seqClassifierFlags0.useSymWordPairs);
      assertFalse(seqClassifierFlags0.twoStage);
      assertFalse(seqClassifierFlags0.useWordShapeGaz);
      assertFalse(seqClassifierFlags0.iobWrapper);
      assertFalse(seqClassifierFlags0.largeChSegFile);
      assertFalse(seqClassifierFlags0.printLabelValue);
      assertFalse(seqClassifierFlags0.lazyUpdate);
      assertFalse(seqClassifierFlags0.noNeighborConstraints);
      assertFalse(seqClassifierFlags0.useTitle);
      assertFalse(seqClassifierFlags0.useCorefFeatures);
      assertFalse(seqClassifierFlags0.keepEnglishWhitespaces);
      assertFalse(seqClassifierFlags0.useSymTags);
      assertEquals(0.0, seqClassifierFlags0.featureDiffThresh, 0.01D);
      assertEquals(1, seqClassifierFlags0.numLopExpert);
      assertEquals(0, seqClassifierFlags0.numOfSlices);
      assertEquals(0, seqClassifierFlags0.maxDocSize);
      assertFalse(seqClassifierFlags0.useCTBPre1);
      assertFalse(seqClassifierFlags0.useIfInteger);
      assertEquals(30, seqClassifierFlags0.beamSize);
      assertFalse(seqClassifierFlags0.use4Clique);
      assertFalse(seqClassifierFlags0.randomLopWeights);
      assertEquals(1, seqClassifierFlags0.terminateOnEvalImprovementNumOfEpoch);
      assertFalse(seqClassifierFlags0.appendLC);
      assertFalse(seqClassifierFlags0.useShapeStrings);
      assertFalse(seqClassifierFlags0.useFeaturesCpC6gram);
      assertEquals(1.0, seqClassifierFlags0.randomizedRatio, 0.01D);
      assertFalse(seqClassifierFlags0.useRad2);
      assertFalse(seqClassifierFlags0.ocrTrain);
      assertFalse(seqClassifierFlags0.useMoreTags);
      assertFalse(seqClassifierFlags0.normalizeTerms);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesBigram);
      assertFalse(seqClassifierFlags0.useRad1);
      assertEquals(Double.POSITIVE_INFINITY, seqClassifierFlags0.searchGraphPrune, 0.01D);
      assertFalse(seqClassifierFlags0.terminateOnEvalImprovement);
      assertFalse(seqClassifierFlags0.suppressMidDotPostprocessing);
      assertFalse(seqClassifierFlags0.useObservedFeaturesOnly);
      assertFalse(seqClassifierFlags0.restrictTransitionsTimit);
      assertEquals(0, seqClassifierFlags0.ocrFold);
      assertFalse(seqClassifierFlags0.useNGrams);
      assertTrue(seqClassifierFlags0.useViterbi);
      assertFalse(seqClassifierFlags0.addCapitalFeatures);
      assertFalse(seqClassifierFlags0.usePrevVB);
      assertFalse(seqClassifierFlags0.purgeDatasets);
      assertFalse(seqClassifierFlags0.useABSTRFreqDict);
      assertFalse(seqClassifierFlags0.useHardGE);
      assertTrue(seqClassifierFlags0.useInternal);
      assertEquals(0.0, seqClassifierFlags0.featureWeightThreshold, 0.01D);
      assertEquals(2, seqClassifierFlags0.CRFwindow);
      assertFalse(seqClassifierFlags0.sighanPostProcessing);
      assertFalse(seqClassifierFlags0.useACR);
      assertFalse(seqClassifierFlags0.useUnknown);
      assertFalse(seqClassifierFlags0.useSGD);
      assertFalse(seqClassifierFlags0.useNB);
      assertTrue(seqClassifierFlags0.useWord);
      assertFalse(seqClassifierFlags0.useSequentialScanSampling);
      assertEquals(0.1, seqClassifierFlags0.initialGain, 0.01D);
      assertFalse(seqClassifierFlags0.printTrainLabels);
      assertFalse(seqClassifierFlags0.useKL);
      assertTrue(seqClassifierFlags0.applyNERPenalty);
      assertFalse(seqClassifierFlags0.keepEmptySentences);
      assertFalse(seqClassifierFlags0.transitionEdgeOnly);
      assertFalse(seqClassifierFlags0.useDisjunctiveShapeInteraction);
      assertEquals(0.9, seqClassifierFlags0.selfTrainConfidenceThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useWord1);
      assertEquals(1, seqClassifierFlags0.featureThreshold);
      assertFalse(seqClassifierFlags0.useWord2);
      assertEquals(0.5, seqClassifierFlags0.alignmentDecodeThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useWord3);
      assertFalse(seqClassifierFlags0.useWord4);
      assertFalse(seqClassifierFlags0.useMSRChar2);
      assertEquals(1.0, seqClassifierFlags0.adaptSigma, 0.01D);
      assertEquals(1, seqClassifierFlags0.bisequencePriorType);
      assertFalse(seqClassifierFlags0.useUnicodeType);
      assertFalse(seqClassifierFlags0.useNegPKDict2);
      assertFalse(seqClassifierFlags0.useNegPKDict3);
      assertFalse(seqClassifierFlags0.useNegPKDict4);
      assertFalse(seqClassifierFlags0.useNextVB);
      assertFalse(seqClassifierFlags0.usePrediction2);
      assertFalse(seqClassifierFlags0.saveFeatureIndexToDisk);
      assertFalse(seqClassifierFlags0.useDisjShape);
      assertEquals(1000, seqClassifierFlags0.wordSegBeamSize);
      assertFalse(seqClassifierFlags0.useLC);
      assertFalse(seqClassifierFlags0.groupByFeatureTemplate);
      assertFalse(seqClassifierFlags0.useTOK);
      assertEquals(1, seqClassifierFlags0.numDatasetsPerFile);
      assertEquals(0.0, seqClassifierFlags0.removeTopNPercent, 0.01D);
      assertFalse(seqClassifierFlags0.useBerkeleyCompetitivePosterior);
      assertFalse(seqClassifierFlags0.strictlyZeroethOrder);
      assertFalse(seqClassifierFlags0.useNumberFeature);
      assertFalse(seqClassifierFlags0.useSMD);
      assertFalse(seqClassifierFlags0.useCTBSuf1);
      assertFalse(seqClassifierFlags0.useNegDict4);
      assertFalse(seqClassifierFlags0.useNegDict3);
      assertFalse(seqClassifierFlags0.useNegDict2);
      assertFalse(seqClassifierFlags0.justify);
      assertEquals((-1), seqClassifierFlags0.purgeFeatures);
      assertFalse(seqClassifierFlags0.useMidDotShape);
      assertFalse(seqClassifierFlags0.verboseMode);
      assertFalse(seqClassifierFlags0.useIsURL);
      assertFalse(seqClassifierFlags0.useANTE);
      assertFalse(seqClassifierFlags0.initWithNERPosterior);
      assertFalse(seqClassifierFlags0.useUnicodeType5gram);
      assertFalse(seqClassifierFlags0.useFeaturesCpC5gram);
      assertFalse(seqClassifierFlags0.usePk);
      assertTrue(seqClassifierFlags0.useCWSFeatures);
      assertEquals(0, seqClassifierFlags0.startEvaluateIters);
      assertFalse(seqClassifierFlags0.useIsDateRange);
      assertFalse(seqClassifierFlags0.useBig5);
      assertFalse(seqClassifierFlags0.useMoreAbbr);
      assertFalse(seqClassifierFlags0.checkNameList);
      assertFalse(seqClassifierFlags0.useABSTR);
      assertFalse(seqClassifierFlags0.usePhraseWords);
      assertFalse(seqClassifierFlags0.useRobustQN);
      assertFalse(seqClassifierFlags0.combo);
      assertTrue(seqClassifierFlags0.keepOBInMemory);
      assertFalse(seqClassifierFlags0.casedDistSim);
      assertFalse(seqClassifierFlags0.useNoisyNonNoisyFeature);
      assertFalse(seqClassifierFlags0.addBiasToEmbedding);
      assertFalse(seqClassifierFlags0.terminateOnAvgImprovement);
      assertEquals(100, seqClassifierFlags0.numSamples);
      assertFalse(seqClassifierFlags0.greekifyNGrams);
      assertEquals(1.0, seqClassifierFlags0.sigma, 0.01D);
      assertFalse(seqClassifierFlags0.printWeights);
      assertFalse(seqClassifierFlags0.strictlyThirdOrder);
      assertFalse(seqClassifierFlags0.useTypeSeqs2);
      assertFalse(seqClassifierFlags0.useTypeSeqs3);
      assertFalse(seqClassifierFlags0.useGoodForNamesCpC);
      assertTrue(seqClassifierFlags0.restrictLabels);
      assertEquals(10, seqClassifierFlags0.wideDisjunctionWidth);
      assertTrue(seqClassifierFlags0.useMemoryEvaluator);
      assertFalse(seqClassifierFlags0.groupByHiddenUnit);
      assertFalse(seqClassifierFlags0.useCWSWordFeatures);
      assertFalse(seqClassifierFlags0.memoryThrift);
      assertFalse(seqClassifierFlags0.useBerkeleyAlignerForViterbi);
      assertFalse(seqClassifierFlags0.useASBCPre1);
      assertFalse(seqClassifierFlags0.usePKSuf1);
      assertFalse(seqClassifierFlags0.secondOrderNonLinear);
      assertFalse(seqClassifierFlags0.useBoundarySequences);
      assertFalse(seqClassifierFlags0.useLastRealWord);
      assertEquals(1, seqClassifierFlags0.selfTrainWindowSize);
      assertFalse(seqClassifierFlags0.dontExtendTaggy);
      assertTrue(seqClassifierFlags0.useKnownLCWords);
      assertFalse(seqClassifierFlags0.useNextRealWord);
      assertEquals(1.0, seqClassifierFlags0.unsupDropoutScale, 0.01D);
      assertFalse(seqClassifierFlags0.useExtraTaggySequences);
      assertFalse(seqClassifierFlags0.tieOutputLayer);
      assertFalse(seqClassifierFlags0.subCWGaz);
      assertEquals(8, seqClassifierFlags0.distSimMaxBits);
      assertFalse(seqClassifierFlags0.useRad2b);
      assertFalse(seqClassifierFlags0.useUniformPrior);
      assertFalse(seqClassifierFlags0.blockInitialize);
      assertFalse(seqClassifierFlags0.doAdaptation);
      assertFalse(seqClassifierFlags0.printNR);
      assertFalse(seqClassifierFlags0.useSigmoid);
      assertEquals(1, seqClassifierFlags0.numStartLayers);
      assertFalse(seqClassifierFlags0.bioSubmitOutput);
      assertFalse(seqClassifierFlags0.mergeTags);
      assertFalse(seqClassifierFlags0.weightByEntropy);
      assertFalse(seqClassifierFlags0.useDictleng);
      assertFalse(seqClassifierFlags0.useNPGovernor);
      assertFalse(seqClassifierFlags0.useTrainLexicon);
      assertFalse(seqClassifierFlags0.useEitherSideDisjunctive);
      assertFalse(seqClassifierFlags0.factorInAlignmentProb);
      assertFalse(seqClassifierFlags0.useWEBFreqDict);
      assertFalse(seqClassifierFlags0.useMUCFeatures);
      assertFalse(seqClassifierFlags0.geDebug);
      assertFalse(seqClassifierFlags0.testHessSamples);
      assertFalse(seqClassifierFlags0.useChunks);
      assertFalse(seqClassifierFlags0.usePKPre1);
      assertFalse(seqClassifierFlags0.regularizeSoftmaxTieParam);
      assertFalse(seqClassifierFlags0.useChPos);
      assertEquals(0.0, seqClassifierFlags0.l1reg, 0.01D);
      assertFalse(seqClassifierFlags0.useCommonWordsFeature);
      assertFalse(seqClassifierFlags0.iobTags);
      assertFalse(seqClassifierFlags0.useTaggySequencesShapeInteraction);
      assertEquals(1, seqClassifierFlags0.nerSlowerTimes);
      assertFalse(seqClassifierFlags0.useVB);
      assertFalse(seqClassifierFlags0.useFirstWord);
      assertFalse(seqClassifierFlags0.useBigramInTwoClique);
      assertFalse(seqClassifierFlags0.useNeighborNGrams);
      assertFalse(seqClassifierFlags0.useHybrid);
      assertEquals(0, seqClassifierFlags0.removeTopN);
      assertFalse(seqClassifierFlags0.useHKChar2);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions);
      assertFalse(seqClassifierFlags0.use2W);
      assertEquals(0.0, seqClassifierFlags0.priorLambda, 0.01D);
      assertFalse(seqClassifierFlags0.useDictPK2);
      assertTrue(seqClassifierFlags0.includeC2EViterbi);
      assertFalse(seqClassifierFlags0.useFloat);
      assertFalse(seqClassifierFlags0.useASBCSuf1);
      assertFalse(seqClassifierFlags0.softmaxOutputLayer);
      assertFalse(seqClassifierFlags0.useRandomSeed);
      assertEquals(1, seqClassifierFlags0.numTimesRemoveTopN);
      assertFalse(seqClassifierFlags0.useOutDict2);
      assertFalse(seqClassifierFlags0.estimateInitial);
      assertFalse(seqClassifierFlags0.conjoinShapeNGrams);
      assertFalse(seqClassifierFlags0.backpropLopTraining);
      assertFalse(seqClassifierFlags0.testVariance);
      assertFalse(seqClassifierFlags0.useScaledSGD);
      assertFalse(seqClassifierFlags0.useNegASBCDict4);
      assertFalse(seqClassifierFlags0.useTopics);
      assertEquals(0.1, seqClassifierFlags0.gainSGD, 0.01D);
      assertEquals(0, seqClassifierFlags0.multiThreadGibbs);
      assertFalse(seqClassifierFlags0.useNegASBCDict2);
      assertFalse(seqClassifierFlags0.useNegASBCDict3);
      assertFalse(seqClassifierFlags0.booleanFeatures);
      assertFalse(seqClassifierFlags0.useABGENE);
      assertFalse(seqClassifierFlags0.useSum);
      assertFalse(seqClassifierFlags0.usePrev);
      assertFalse(seqClassifierFlags0.useAdaDiff);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesAll);
      assertFalse(seqClassifierFlags0.normalize);
      assertFalse(seqClassifierFlags0.announceObjectBankEntries);
      assertEquals(1, seqClassifierFlags0.numFolds);
      assertFalse(seqClassifierFlags0.retainEntitySubclassification);
      assertEquals(0, seqClassifierFlags0.interimOutputFreq);
      assertFalse(seqClassifierFlags0.useLemmas);
      assertEquals(25, seqClassifierFlags0.QNsize2);
      assertFalse(seqClassifierFlags0.powerAlignProb);
      assertFalse(seqClassifierFlags0.useDict2);
      assertFalse(seqClassifierFlags0.usePhraseWordTags);
      assertEquals(0, seqClassifierFlags0.hybridCutoffIteration);
      assertEquals(0, seqClassifierFlags0.maxQNItr);
      assertFalse(seqClassifierFlags0.expandMidDot);
      assertFalse(seqClassifierFlags0.useOWLQN);
      assertEquals(1, seqClassifierFlags0.CRForder);
      assertEquals(0.0, seqClassifierFlags0.pctSegmenterScale, 0.01D);
      assertFalse(seqClassifierFlags0.doGibbs);
      assertFalse(seqClassifierFlags0.factorInBiEdgePotential);
      assertFalse(seqClassifierFlags0.useNERPrior);
      assertFalse(seqClassifierFlags0.useFeaturesC5gram);
      assertFalse(seqClassifierFlags0.useWordnetFeatures);
      assertTrue(seqClassifierFlags0.useHiddenLayer);
      assertFalse(seqClassifierFlags0.useShapeStrings3);
      assertFalse(seqClassifierFlags0.useShapeStrings1);
      assertFalse(seqClassifierFlags0.matchNERIncentive);
      assertFalse(seqClassifierFlags0.useShapeStrings4);
      assertEquals(0.001, seqClassifierFlags0.adaGradEps, 0.01D);
      assertFalse(seqClassifierFlags0.useShapeStrings5);
      assertEquals(0.0, seqClassifierFlags0.dropoutRate, 0.01D);
      assertEquals(1, seqClassifierFlags0.multiThreadPerceptron);
      assertFalse(seqClassifierFlags0.normalizeTimex);
      assertEquals(10, seqClassifierFlags0.totalFeatureSlice);
      assertEquals(1, seqClassifierFlags0.kBest);
      assertFalse(seqClassifierFlags0.useHeadGov);
      assertEquals(0.01, seqClassifierFlags0.epsilon, 0.01D);
      assertTrue(seqClassifierFlags0.initWithPosterior);
      assertFalse(seqClassifierFlags0.useSGDtoQN);
      assertFalse(seqClassifierFlags0.useHKSuf1);
      assertEquals(0.95, seqClassifierFlags0.adaDeltaRho, 0.01D);
      assertFalse(seqClassifierFlags0.useRule2);
      assertFalse(seqClassifierFlags0.keepAllWhitespaces);
      assertFalse(seqClassifierFlags0.useEntityRule);
      assertFalse(seqClassifierFlags0.useFeaturesC6gram);
      assertEquals((-1), seqClassifierFlags0.maxNGramLeng);
      assertFalse(seqClassifierFlags0.useAcqPrior);
      assertFalse(seqClassifierFlags0.cacheNGrams);
      assertEquals(1.0, seqClassifierFlags0.dropoutScale, 0.01D);
      assertFalse(seqClassifierFlags0.useSuf);
      assertFalse(seqClassifierFlags0.noMidNGrams);
      assertEquals((-1), seqClassifierFlags0.QNPasses);
      assertFalse(seqClassifierFlags0.useGazettePhrases);
      assertFalse(seqClassifierFlags0.useMoreGazFeatures);
      assertFalse(seqClassifierFlags0.nonLinearCRF);
      assertFalse(seqClassifierFlags0.useWordPairs);
      assertEquals(3, seqClassifierFlags0.charHalfWindow);
      assertEquals(1, seqClassifierFlags0.numRuns);
      assertFalse(seqClassifierFlags0.checkGradient);
      assertFalse(seqClassifierFlags0.usePrediction);
      assertFalse(seqClassifierFlags0.dehyphenateNGrams);
      assertEquals((-1), seqClassifierFlags0.wordShape);
      assertEquals(1, seqClassifierFlags0.endFold);
      assertFalse(seqClassifierFlags0.useTypeSeqs);
      assertFalse(seqClassifierFlags0.useGazettes);
      assertFalse(seqClassifierFlags0.dualDecompDebug);
      assertFalse(seqClassifierFlags0.usePhraseFeatures);
      assertEquals(0, seqClassifierFlags0.featureCountThreshold);
      assertFalse(seqClassifierFlags0.useASBCChar2);
      assertFalse(seqClassifierFlags0.selfTest);
      assertFalse(seqClassifierFlags0.useShapeConjunctions);
      assertEquals(15, seqClassifierFlags0.stochasticBatchSize);
      assertFalse(seqClassifierFlags0.useURLSequences);
      assertFalse(seqClassifierFlags0.useUnicodeBlock);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions3);
      assertFalse(seqClassifierFlags0.useEmbedding);
      assertFalse(seqClassifierFlags0.timitDatum);
      assertFalse(seqClassifierFlags0.dump);
      assertFalse(seqClassifierFlags0.useABSTRFreq);
      assertFalse(seqClassifierFlags0.useMinimalAbbr);
      assertEquals(0.1, seqClassifierFlags0.initRate, 0.01D);
      assertFalse(seqClassifierFlags0.useAdaGradFOBOS);
      assertFalse(seqClassifierFlags0.makeConsistent);
      assertEquals(0.0, seqClassifierFlags0.softmaxTieLambda, 0.01D);
      assertFalse(seqClassifierFlags0.doFeatureDiscovery);
      assertTrue(seqClassifierFlags0.splitDocuments);
      assertEquals(0, seqClassifierFlags0.numOfFeatureSlices);
      assertFalse(seqClassifierFlags0.useLongSequences);
      assertFalse(seqClassifierFlags0.useDisjunctive);
      assertFalse(seqClassifierFlags0.useReverseAffix);
      assertFalse(seqClassifierFlags0.useFeaturesCpC4gram);
      assertFalse(seqClassifierFlags0.useUnicodeType4gram);
      assertEquals(2, seqClassifierFlags0.maxLeft);
      assertFalse(seqClassifierFlags0.groupByInput);
      assertFalse(seqClassifierFlags0.usePre);
      assertFalse(seqClassifierFlags0.useDistSim);
      assertFalse(seqClassifierFlags0.hardcodeSoftmaxOutputWeights);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions3);
      assertFalse(seqClassifierFlags0.useQuartic);
      assertFalse(seqClassifierFlags0.lowercaseNGrams);
      assertFalse(seqClassifierFlags0.useHKPre1);
      assertFalse(seqClassifierFlags0.useMinimalAbbr1);
      assertTrue(seqClassifierFlags0.separateASCIIandRange);
      assertFalse(seqClassifierFlags0.outputIterationsToFile);
      assertEquals(4, seqClassifierFlags0.disjunctionWidth);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions2);
      assertFalse(seqClassifierFlags0.alternateTraining);
      assertFalse(seqClassifierFlags0.printFactorTable);
      assertFalse(seqClassifierFlags0.removeBackgroundSingletonFeatures);
      assertFalse(seqClassifierFlags0.useNextSequences);
      assertFalse(seqClassifierFlags0.printFirstOrderProbs);
      assertFalse(seqClassifierFlags0.pctSegmenterScaleByCRF);
      assertFalse(seqClassifierFlags0.noEdgeFeature);
      assertEquals(8, seqClassifierFlags0.maxAllowedChromaticSize);
      assertFalse(seqClassifierFlags0.evaluateTrain);
      assertEquals((-1), seqClassifierFlags0.numHiddenUnits);
      assertFalse(seqClassifierFlags0.useWEB);
      assertFalse(seqClassifierFlags0.useObservedSequencesOnly);
      assertFalse(seqClassifierFlags0.sloppyGazette);
      assertFalse(seqClassifierFlags0.usePrevNextLemmas);
      assertFalse(seqClassifierFlags0.useChromaticSampling);
      assertFalse(seqClassifierFlags0.useDictCTB2);
      assertEquals(0.0, seqClassifierFlags0.newgeneThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.printXML);
      assertFalse(seqClassifierFlags0.splitOnHead);
      assertFalse(seqClassifierFlags0.usePKChar2);
      assertFalse(seqClassifierFlags0.useDualDecomp);
      assertFalse(seqClassifierFlags0.randomLopFeatureSplit);
      assertFalse(seqClassifierFlags0.useGazFeatures);
      assertFalse(seqClassifierFlags0.usePrevSequences);
      assertFalse(seqClassifierFlags0.intern);
      assertFalse(seqClassifierFlags0.printProbs);
      assertFalse(seqClassifierFlags0.useStochasticQN);
      assertFalse(seqClassifierFlags0.useAdaDelta);
      assertFalse(seqClassifierFlags0.useTypeySequences);
      assertEquals(50, seqClassifierFlags0.SGD2QNhessSamples);
      assertFalse(seqClassifierFlags0.useSemPrior);
      assertFalse(seqClassifierFlags0.useChunkySequences);
      assertFalse(seqClassifierFlags0.verboseForTrueCasing);
      assertFalse(seqClassifierFlags0.useInPlaceSGD);
      assertTrue(seqClassifierFlags0.useDenero);
      assertFalse(seqClassifierFlags0.strictlyFirstOrder);
      assertEquals(1.0E-4, seqClassifierFlags0.tolerance, 0.01D);
      assertFalse(seqClassifierFlags0.numberEquivalenceDistSim);
      assertTrue(seqClassifierFlags0.useExternal);
      assertFalse(seqClassifierFlags0.useCRFforUnsup);
      assertFalse(seqClassifierFlags0.dualDecompNotBIO);
      assertFalse(seqClassifierFlags0.useHuber);
      assertFalse(seqClassifierFlags0.useNext);
      assertTrue(seqClassifierFlags0.useQN);
      assertFalse(seqClassifierFlags0.useSentenceNumber);
      assertFalse(seqClassifierFlags0.cleanGazette);
      assertFalse(seqClassifierFlags0.strictlySecondOrder);
      assertFalse(seqClassifierFlags0.useRule);
      assertEquals(1.0, seqClassifierFlags0.lambdaEN, 0.01D);
      assertTrue(seqClassifierFlags0.useSequences);
      assertEquals(0, seqClassifierFlags0.featureCountThresh);
      assertFalse(seqClassifierFlags0.useEntityTypeSequences);
      assertEquals(1.0, seqClassifierFlags0.alignDDAlpha, 0.01D);
      assertFalse(seqClassifierFlags0.deleteBlankLines);
      assertFalse(seqClassifierFlags0.dampDDStepSizeWithAlignmentProb);
      assertFalse(seqClassifierFlags0.useProtoFeatures);
      assertFalse(seqClassifierFlags0.useNPHead);
      assertEquals((-1), seqClassifierFlags0.maxIterations);
      assertEquals(0, seqClassifierFlags0.numTimesPruneFeatures);
      assertFalse(seqClassifierFlags0.usePhraseWordSpecialTags);
      assertEquals(25, seqClassifierFlags0.QNsize);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSize, 0.01D);
      assertEquals((-1), seqClassifierFlags0.arbitraryInputLayerSize);
      assertEquals((-1), seqClassifierFlags0.labelDictionaryCutoff);
      assertEquals(0, seqClassifierFlags0.dualDecompMaxItr);
      assertFalse(seqClassifierFlags0.useNoisyLabel);
      assertFalse(seqClassifierFlags0.useParenMatching);
      assertFalse(seqClassifierFlags0.gradientDebug);
      assertFalse(seqClassifierFlags0.useTaggySequences);
      assertFalse(seqClassifierFlags0.useAltGazFeatures);
      assertFalse(seqClassifierFlags0.intern2);
      assertFalse(seqClassifierFlags0.testObjFunction);
      assertFalse(seqClassifierFlags0.useLemmaAsWord);
      assertFalse(seqClassifierFlags0.pctSegmenterLenAdjust);
      assertFalse(seqClassifierFlags0.useGEforSup);
      assertFalse(seqClassifierFlags0.augmentedDateChars);
      assertFalse(seqClassifierFlags0.useWordn);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSizeAlignment, 0.01D);
      assertTrue(seqClassifierFlags0.biAlignmentPriorIsPMI);
      assertFalse(seqClassifierFlags0.useDictASBC2);
      assertEquals(1, seqClassifierFlags0.multiThreadGrad);
      assertFalse(seqClassifierFlags0.fakeDataset);
      assertEquals(0.0, seqClassifierFlags0.annealingRate, 0.01D);
      assertFalse(seqClassifierFlags0.useEitherSideWord);
      assertEquals(Integer.MAX_VALUE, seqClassifierFlags0.printFeaturesUpto);
      assertFalse(seqClassifierFlags0.useNegHKDict4);
      assertFalse(seqClassifierFlags0.useNegHKDict3);
      assertFalse(seqClassifierFlags0.useNegHKDict2);
      assertFalse(seqClassifierFlags0.removeStrictGoodCoNLLDuplicates);
      assertFalse(seqClassifierFlags0.useNegCTBDict4);
      assertFalse(seqClassifierFlags0.useNegCTBDict3);
      assertFalse(seqClassifierFlags0.useNegCTBDict2);
      assertFalse(seqClassifierFlags0.useFeaturesC4gram);
      assertFalse(seqClassifierFlags0.useSeenFeaturesOnly);
      assertTrue(seqClassifierFlags0.averagePerceptron);
      assertFalse(seqClassifierFlags0.useBilingualNERPrior);
      assertFalse(seqClassifierFlags0.lowerNewgeneThreshold);
      assertFalse(seqClassifierFlags0.useRadical);
      assertFalse(seqClassifierFlags0.useSegmentation);
      assertFalse(seqClassifierFlags0.doFE);
      assertFalse(seqClassifierFlags0.useClassFeature);
      assertFalse(seqClassifierFlags0.suppressTestDebug);
      assertFalse(seqClassifierFlags0.useMsr);
      assertFalse(seqClassifierFlags0.useDictHK2);
      assertFalse(seqClassifierFlags0.useEntityTypes);
      assertEquals(0.0, seqClassifierFlags0.alignmentPruneThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useGenericFeatures);
      assertFalse(seqClassifierFlags0.useGENIA);
      assertFalse(seqClassifierFlags0.sparseOutputLayer);
      assertFalse(seqClassifierFlags0.useNERPriorBIO);
      assertFalse(seqClassifierFlags0.useReverse);
      assertEquals(0, seqClassifierFlags0.evaluateIters);
      assertFalse(seqClassifierFlags0.dropoutApprox);
      assertEquals(100, seqClassifierFlags0.printClassifierParam);
      assertFalse(seqClassifierFlags0.useAs);
      assertFalse(seqClassifierFlags0.useBagOfWords);
      assertEquals(0, seqClassifierFlags0.nerSkipFirstK);
      assertFalse(seqClassifierFlags0.prependEmbedding);
      assertFalse(seqClassifierFlags0.useOrdinal);
      assertFalse(seqClassifierFlags0.useAbbr1);
      assertFalse(seqClassifierFlags0.powerAlignProbAsAddition);
      assertFalse(seqClassifierFlags0.groupByOutputClass);
      assertEquals(10, seqClassifierFlags0.totalDataSlice);
      assertFalse(seqClassifierFlags0.includeFullCRFInLOP);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions2);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions3);
      assertFalse(seqClassifierFlags0.useTags);
      assertFalse(seqClassifierFlags0.useWideDisjunctive);
      assertEquals(0, seqClassifierFlags0.maxRight);
      assertFalse(seqClassifierFlags0.learnENBasedOnCH);
      assertFalse(seqClassifierFlags0.dualDecompAlignment);
      assertFalse(seqClassifierFlags0.useHk);
      assertFalse(seqClassifierFlags0.useOccurrencePatterns);
      assertFalse(seqClassifierFlags0.useKBest);
      assertFalse(seqClassifierFlags0.useYetMoreCpCShapes);
      assertFalse(seqClassifierFlags0.useYear);
      assertFalse(seqClassifierFlags0.useAbbr);
      assertFalse(seqClassifierFlags0.useBeginSent);
      assertTrue(seqClassifierFlags0.learnCHBasedOnEN);
      assertTrue(seqClassifierFlags0.useOutputLayer);
      assertFalse(seqClassifierFlags0.evaluateBackground);
      assertFalse(seqClassifierFlags0.readStdin);
      assertFalse(seqClassifierFlags0.useFilter);
      assertEquals("", seqClassifierFlags0.toString());
      assertNotNull(seqClassifierFlags0);
      
      double double0 = seqClassifierFlags0.initRate;
      assertEquals(0.1, double0, 0.01D);
      assertFalse(seqClassifierFlags0.strictGoodCoNLL);
      assertEquals(0, seqClassifierFlags0.scaledSGDMethod);
      assertEquals(0.0, seqClassifierFlags0.priorAlpha, 0.01D);
      assertFalse(seqClassifierFlags0.useFREQ);
      assertFalse(seqClassifierFlags0.baseline);
      assertFalse(seqClassifierFlags0.useCTBChar2);
      assertTrue(seqClassifierFlags0.initViterbi);
      assertFalse(seqClassifierFlags0.perceptronDebug);
      assertEquals(1, seqClassifierFlags0.startFold);
      assertFalse(seqClassifierFlags0.useWordTag);
      assertEquals((-1), seqClassifierFlags0.SGDPasses);
      assertEquals(1.0, seqClassifierFlags0.lambdaCH, 0.01D);
      assertEquals(1, seqClassifierFlags0.selfTrainIterations);
      assertEquals(0, seqClassifierFlags0.multiThreadClassifier);
      assertFalse(seqClassifierFlags0.skipOutputRegularization);
      assertFalse(seqClassifierFlags0.useOnlySeenWeights);
      assertFalse(seqClassifierFlags0.useLabelSource);
      assertFalse(seqClassifierFlags0.tuneSGD);
      assertEquals((-1), seqClassifierFlags0.samplingSpeedUpThreshold);
      assertFalse(seqClassifierFlags0.usePosition);
      assertEquals((-1), seqClassifierFlags0.tuneSampleSize);
      assertFalse(seqClassifierFlags0.useSymWordPairs);
      assertFalse(seqClassifierFlags0.twoStage);
      assertFalse(seqClassifierFlags0.useWordShapeGaz);
      assertFalse(seqClassifierFlags0.iobWrapper);
      assertFalse(seqClassifierFlags0.largeChSegFile);
      assertFalse(seqClassifierFlags0.printLabelValue);
      assertFalse(seqClassifierFlags0.lazyUpdate);
      assertFalse(seqClassifierFlags0.noNeighborConstraints);
      assertFalse(seqClassifierFlags0.useTitle);
      assertFalse(seqClassifierFlags0.useCorefFeatures);
      assertFalse(seqClassifierFlags0.keepEnglishWhitespaces);
      assertFalse(seqClassifierFlags0.useSymTags);
      assertEquals(0.0, seqClassifierFlags0.featureDiffThresh, 0.01D);
      assertEquals(1, seqClassifierFlags0.numLopExpert);
      assertEquals(0, seqClassifierFlags0.numOfSlices);
      assertEquals(0, seqClassifierFlags0.maxDocSize);
      assertFalse(seqClassifierFlags0.useCTBPre1);
      assertFalse(seqClassifierFlags0.useIfInteger);
      assertEquals(30, seqClassifierFlags0.beamSize);
      assertFalse(seqClassifierFlags0.use4Clique);
      assertFalse(seqClassifierFlags0.randomLopWeights);
      assertEquals(1, seqClassifierFlags0.terminateOnEvalImprovementNumOfEpoch);
      assertFalse(seqClassifierFlags0.appendLC);
      assertFalse(seqClassifierFlags0.useShapeStrings);
      assertFalse(seqClassifierFlags0.useFeaturesCpC6gram);
      assertEquals(1.0, seqClassifierFlags0.randomizedRatio, 0.01D);
      assertFalse(seqClassifierFlags0.useRad2);
      assertFalse(seqClassifierFlags0.ocrTrain);
      assertFalse(seqClassifierFlags0.useMoreTags);
      assertFalse(seqClassifierFlags0.normalizeTerms);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesBigram);
      assertFalse(seqClassifierFlags0.useRad1);
      assertEquals(Double.POSITIVE_INFINITY, seqClassifierFlags0.searchGraphPrune, 0.01D);
      assertFalse(seqClassifierFlags0.terminateOnEvalImprovement);
      assertFalse(seqClassifierFlags0.suppressMidDotPostprocessing);
      assertFalse(seqClassifierFlags0.useObservedFeaturesOnly);
      assertFalse(seqClassifierFlags0.restrictTransitionsTimit);
      assertEquals(0, seqClassifierFlags0.ocrFold);
      assertFalse(seqClassifierFlags0.useNGrams);
      assertTrue(seqClassifierFlags0.useViterbi);
      assertFalse(seqClassifierFlags0.addCapitalFeatures);
      assertFalse(seqClassifierFlags0.usePrevVB);
      assertFalse(seqClassifierFlags0.purgeDatasets);
      assertFalse(seqClassifierFlags0.useABSTRFreqDict);
      assertFalse(seqClassifierFlags0.useHardGE);
      assertTrue(seqClassifierFlags0.useInternal);
      assertEquals(0.0, seqClassifierFlags0.featureWeightThreshold, 0.01D);
      assertEquals(2, seqClassifierFlags0.CRFwindow);
      assertFalse(seqClassifierFlags0.sighanPostProcessing);
      assertFalse(seqClassifierFlags0.useACR);
      assertFalse(seqClassifierFlags0.useUnknown);
      assertFalse(seqClassifierFlags0.useSGD);
      assertFalse(seqClassifierFlags0.useNB);
      assertTrue(seqClassifierFlags0.useWord);
      assertFalse(seqClassifierFlags0.useSequentialScanSampling);
      assertEquals(0.1, seqClassifierFlags0.initialGain, 0.01D);
      assertFalse(seqClassifierFlags0.printTrainLabels);
      assertFalse(seqClassifierFlags0.useKL);
      assertTrue(seqClassifierFlags0.applyNERPenalty);
      assertFalse(seqClassifierFlags0.keepEmptySentences);
      assertFalse(seqClassifierFlags0.transitionEdgeOnly);
      assertFalse(seqClassifierFlags0.useDisjunctiveShapeInteraction);
      assertEquals(0.9, seqClassifierFlags0.selfTrainConfidenceThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useWord1);
      assertEquals(1, seqClassifierFlags0.featureThreshold);
      assertFalse(seqClassifierFlags0.useWord2);
      assertEquals(0.5, seqClassifierFlags0.alignmentDecodeThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useWord3);
      assertFalse(seqClassifierFlags0.useWord4);
      assertFalse(seqClassifierFlags0.useMSRChar2);
      assertEquals(1.0, seqClassifierFlags0.adaptSigma, 0.01D);
      assertEquals(1, seqClassifierFlags0.bisequencePriorType);
      assertFalse(seqClassifierFlags0.useUnicodeType);
      assertFalse(seqClassifierFlags0.useNegPKDict2);
      assertFalse(seqClassifierFlags0.useNegPKDict3);
      assertFalse(seqClassifierFlags0.useNegPKDict4);
      assertFalse(seqClassifierFlags0.useNextVB);
      assertFalse(seqClassifierFlags0.usePrediction2);
      assertFalse(seqClassifierFlags0.saveFeatureIndexToDisk);
      assertFalse(seqClassifierFlags0.useDisjShape);
      assertEquals(1000, seqClassifierFlags0.wordSegBeamSize);
      assertFalse(seqClassifierFlags0.useLC);
      assertFalse(seqClassifierFlags0.groupByFeatureTemplate);
      assertFalse(seqClassifierFlags0.useTOK);
      assertEquals(1, seqClassifierFlags0.numDatasetsPerFile);
      assertEquals(0.0, seqClassifierFlags0.removeTopNPercent, 0.01D);
      assertFalse(seqClassifierFlags0.useBerkeleyCompetitivePosterior);
      assertFalse(seqClassifierFlags0.strictlyZeroethOrder);
      assertFalse(seqClassifierFlags0.useNumberFeature);
      assertFalse(seqClassifierFlags0.useSMD);
      assertFalse(seqClassifierFlags0.useCTBSuf1);
      assertFalse(seqClassifierFlags0.useNegDict4);
      assertFalse(seqClassifierFlags0.useNegDict3);
      assertFalse(seqClassifierFlags0.useNegDict2);
      assertFalse(seqClassifierFlags0.justify);
      assertEquals((-1), seqClassifierFlags0.purgeFeatures);
      assertFalse(seqClassifierFlags0.useMidDotShape);
      assertFalse(seqClassifierFlags0.verboseMode);
      assertFalse(seqClassifierFlags0.useIsURL);
      assertFalse(seqClassifierFlags0.useANTE);
      assertFalse(seqClassifierFlags0.initWithNERPosterior);
      assertFalse(seqClassifierFlags0.useUnicodeType5gram);
      assertFalse(seqClassifierFlags0.useFeaturesCpC5gram);
      assertFalse(seqClassifierFlags0.usePk);
      assertTrue(seqClassifierFlags0.useCWSFeatures);
      assertEquals(0, seqClassifierFlags0.startEvaluateIters);
      assertFalse(seqClassifierFlags0.useIsDateRange);
      assertFalse(seqClassifierFlags0.useBig5);
      assertFalse(seqClassifierFlags0.useMoreAbbr);
      assertFalse(seqClassifierFlags0.checkNameList);
      assertFalse(seqClassifierFlags0.useABSTR);
      assertFalse(seqClassifierFlags0.usePhraseWords);
      assertFalse(seqClassifierFlags0.useRobustQN);
      assertFalse(seqClassifierFlags0.combo);
      assertTrue(seqClassifierFlags0.keepOBInMemory);
      assertFalse(seqClassifierFlags0.casedDistSim);
      assertFalse(seqClassifierFlags0.useNoisyNonNoisyFeature);
      assertFalse(seqClassifierFlags0.addBiasToEmbedding);
      assertFalse(seqClassifierFlags0.terminateOnAvgImprovement);
      assertEquals(100, seqClassifierFlags0.numSamples);
      assertFalse(seqClassifierFlags0.greekifyNGrams);
      assertEquals(1.0, seqClassifierFlags0.sigma, 0.01D);
      assertFalse(seqClassifierFlags0.printWeights);
      assertFalse(seqClassifierFlags0.strictlyThirdOrder);
      assertFalse(seqClassifierFlags0.useTypeSeqs2);
      assertFalse(seqClassifierFlags0.useTypeSeqs3);
      assertFalse(seqClassifierFlags0.useGoodForNamesCpC);
      assertTrue(seqClassifierFlags0.restrictLabels);
      assertEquals(10, seqClassifierFlags0.wideDisjunctionWidth);
      assertTrue(seqClassifierFlags0.useMemoryEvaluator);
      assertFalse(seqClassifierFlags0.groupByHiddenUnit);
      assertFalse(seqClassifierFlags0.useCWSWordFeatures);
      assertFalse(seqClassifierFlags0.memoryThrift);
      assertFalse(seqClassifierFlags0.useBerkeleyAlignerForViterbi);
      assertFalse(seqClassifierFlags0.useASBCPre1);
      assertFalse(seqClassifierFlags0.usePKSuf1);
      assertFalse(seqClassifierFlags0.secondOrderNonLinear);
      assertFalse(seqClassifierFlags0.useBoundarySequences);
      assertFalse(seqClassifierFlags0.useLastRealWord);
      assertEquals(1, seqClassifierFlags0.selfTrainWindowSize);
      assertFalse(seqClassifierFlags0.dontExtendTaggy);
      assertTrue(seqClassifierFlags0.useKnownLCWords);
      assertFalse(seqClassifierFlags0.useNextRealWord);
      assertEquals(1.0, seqClassifierFlags0.unsupDropoutScale, 0.01D);
      assertFalse(seqClassifierFlags0.useExtraTaggySequences);
      assertFalse(seqClassifierFlags0.tieOutputLayer);
      assertFalse(seqClassifierFlags0.subCWGaz);
      assertEquals(8, seqClassifierFlags0.distSimMaxBits);
      assertFalse(seqClassifierFlags0.useRad2b);
      assertFalse(seqClassifierFlags0.useUniformPrior);
      assertFalse(seqClassifierFlags0.blockInitialize);
      assertFalse(seqClassifierFlags0.doAdaptation);
      assertFalse(seqClassifierFlags0.printNR);
      assertFalse(seqClassifierFlags0.useSigmoid);
      assertEquals(1, seqClassifierFlags0.numStartLayers);
      assertFalse(seqClassifierFlags0.bioSubmitOutput);
      assertFalse(seqClassifierFlags0.mergeTags);
      assertFalse(seqClassifierFlags0.weightByEntropy);
      assertFalse(seqClassifierFlags0.useDictleng);
      assertFalse(seqClassifierFlags0.useNPGovernor);
      assertFalse(seqClassifierFlags0.useTrainLexicon);
      assertFalse(seqClassifierFlags0.useEitherSideDisjunctive);
      assertFalse(seqClassifierFlags0.factorInAlignmentProb);
      assertFalse(seqClassifierFlags0.useWEBFreqDict);
      assertFalse(seqClassifierFlags0.useMUCFeatures);
      assertFalse(seqClassifierFlags0.geDebug);
      assertFalse(seqClassifierFlags0.testHessSamples);
      assertFalse(seqClassifierFlags0.useChunks);
      assertFalse(seqClassifierFlags0.usePKPre1);
      assertFalse(seqClassifierFlags0.regularizeSoftmaxTieParam);
      assertFalse(seqClassifierFlags0.useChPos);
      assertEquals(0.0, seqClassifierFlags0.l1reg, 0.01D);
      assertFalse(seqClassifierFlags0.useCommonWordsFeature);
      assertFalse(seqClassifierFlags0.iobTags);
      assertFalse(seqClassifierFlags0.useTaggySequencesShapeInteraction);
      assertEquals(1, seqClassifierFlags0.nerSlowerTimes);
      assertFalse(seqClassifierFlags0.useVB);
      assertFalse(seqClassifierFlags0.useFirstWord);
      assertFalse(seqClassifierFlags0.useBigramInTwoClique);
      assertFalse(seqClassifierFlags0.useNeighborNGrams);
      assertFalse(seqClassifierFlags0.useHybrid);
      assertEquals(0, seqClassifierFlags0.removeTopN);
      assertFalse(seqClassifierFlags0.useHKChar2);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions);
      assertFalse(seqClassifierFlags0.use2W);
      assertEquals(0.0, seqClassifierFlags0.priorLambda, 0.01D);
      assertFalse(seqClassifierFlags0.useDictPK2);
      assertTrue(seqClassifierFlags0.includeC2EViterbi);
      assertFalse(seqClassifierFlags0.useFloat);
      assertFalse(seqClassifierFlags0.useASBCSuf1);
      assertFalse(seqClassifierFlags0.softmaxOutputLayer);
      assertFalse(seqClassifierFlags0.useRandomSeed);
      assertEquals(1, seqClassifierFlags0.numTimesRemoveTopN);
      assertFalse(seqClassifierFlags0.useOutDict2);
      assertFalse(seqClassifierFlags0.estimateInitial);
      assertFalse(seqClassifierFlags0.conjoinShapeNGrams);
      assertFalse(seqClassifierFlags0.backpropLopTraining);
      assertFalse(seqClassifierFlags0.testVariance);
      assertFalse(seqClassifierFlags0.useScaledSGD);
      assertFalse(seqClassifierFlags0.useNegASBCDict4);
      assertFalse(seqClassifierFlags0.useTopics);
      assertEquals(0.1, seqClassifierFlags0.gainSGD, 0.01D);
      assertEquals(0, seqClassifierFlags0.multiThreadGibbs);
      assertFalse(seqClassifierFlags0.useNegASBCDict2);
      assertFalse(seqClassifierFlags0.useNegASBCDict3);
      assertFalse(seqClassifierFlags0.booleanFeatures);
      assertFalse(seqClassifierFlags0.useABGENE);
      assertFalse(seqClassifierFlags0.useSum);
      assertFalse(seqClassifierFlags0.usePrev);
      assertFalse(seqClassifierFlags0.useAdaDiff);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesAll);
      assertFalse(seqClassifierFlags0.normalize);
      assertFalse(seqClassifierFlags0.announceObjectBankEntries);
      assertEquals(1, seqClassifierFlags0.numFolds);
      assertFalse(seqClassifierFlags0.retainEntitySubclassification);
      assertEquals(0, seqClassifierFlags0.interimOutputFreq);
      assertFalse(seqClassifierFlags0.useLemmas);
      assertEquals(25, seqClassifierFlags0.QNsize2);
      assertFalse(seqClassifierFlags0.powerAlignProb);
      assertFalse(seqClassifierFlags0.useDict2);
      assertFalse(seqClassifierFlags0.usePhraseWordTags);
      assertEquals(0, seqClassifierFlags0.hybridCutoffIteration);
      assertEquals(0, seqClassifierFlags0.maxQNItr);
      assertFalse(seqClassifierFlags0.expandMidDot);
      assertFalse(seqClassifierFlags0.useOWLQN);
      assertEquals(1, seqClassifierFlags0.CRForder);
      assertEquals(0.0, seqClassifierFlags0.pctSegmenterScale, 0.01D);
      assertFalse(seqClassifierFlags0.doGibbs);
      assertFalse(seqClassifierFlags0.factorInBiEdgePotential);
      assertFalse(seqClassifierFlags0.useNERPrior);
      assertFalse(seqClassifierFlags0.useFeaturesC5gram);
      assertFalse(seqClassifierFlags0.useWordnetFeatures);
      assertTrue(seqClassifierFlags0.useHiddenLayer);
      assertFalse(seqClassifierFlags0.useShapeStrings3);
      assertFalse(seqClassifierFlags0.useShapeStrings1);
      assertFalse(seqClassifierFlags0.matchNERIncentive);
      assertFalse(seqClassifierFlags0.useShapeStrings4);
      assertEquals(0.001, seqClassifierFlags0.adaGradEps, 0.01D);
      assertFalse(seqClassifierFlags0.useShapeStrings5);
      assertEquals(0.0, seqClassifierFlags0.dropoutRate, 0.01D);
      assertEquals(1, seqClassifierFlags0.multiThreadPerceptron);
      assertFalse(seqClassifierFlags0.normalizeTimex);
      assertEquals(10, seqClassifierFlags0.totalFeatureSlice);
      assertEquals(1, seqClassifierFlags0.kBest);
      assertFalse(seqClassifierFlags0.useHeadGov);
      assertEquals(0.01, seqClassifierFlags0.epsilon, 0.01D);
      assertTrue(seqClassifierFlags0.initWithPosterior);
      assertFalse(seqClassifierFlags0.useSGDtoQN);
      assertFalse(seqClassifierFlags0.useHKSuf1);
      assertEquals(0.95, seqClassifierFlags0.adaDeltaRho, 0.01D);
      assertFalse(seqClassifierFlags0.useRule2);
      assertFalse(seqClassifierFlags0.keepAllWhitespaces);
      assertFalse(seqClassifierFlags0.useEntityRule);
      assertFalse(seqClassifierFlags0.useFeaturesC6gram);
      assertEquals((-1), seqClassifierFlags0.maxNGramLeng);
      assertFalse(seqClassifierFlags0.useAcqPrior);
      assertFalse(seqClassifierFlags0.cacheNGrams);
      assertEquals(1.0, seqClassifierFlags0.dropoutScale, 0.01D);
      assertFalse(seqClassifierFlags0.useSuf);
      assertFalse(seqClassifierFlags0.noMidNGrams);
      assertEquals((-1), seqClassifierFlags0.QNPasses);
      assertFalse(seqClassifierFlags0.useGazettePhrases);
      assertFalse(seqClassifierFlags0.useMoreGazFeatures);
      assertFalse(seqClassifierFlags0.nonLinearCRF);
      assertFalse(seqClassifierFlags0.useWordPairs);
      assertEquals(3, seqClassifierFlags0.charHalfWindow);
      assertEquals(1, seqClassifierFlags0.numRuns);
      assertFalse(seqClassifierFlags0.checkGradient);
      assertFalse(seqClassifierFlags0.usePrediction);
      assertFalse(seqClassifierFlags0.dehyphenateNGrams);
      assertEquals((-1), seqClassifierFlags0.wordShape);
      assertEquals(1, seqClassifierFlags0.endFold);
      assertFalse(seqClassifierFlags0.useTypeSeqs);
      assertFalse(seqClassifierFlags0.useGazettes);
      assertFalse(seqClassifierFlags0.dualDecompDebug);
      assertFalse(seqClassifierFlags0.usePhraseFeatures);
      assertEquals(0, seqClassifierFlags0.featureCountThreshold);
      assertFalse(seqClassifierFlags0.useASBCChar2);
      assertFalse(seqClassifierFlags0.selfTest);
      assertFalse(seqClassifierFlags0.useShapeConjunctions);
      assertEquals(15, seqClassifierFlags0.stochasticBatchSize);
      assertFalse(seqClassifierFlags0.useURLSequences);
      assertFalse(seqClassifierFlags0.useUnicodeBlock);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions3);
      assertFalse(seqClassifierFlags0.useEmbedding);
      assertFalse(seqClassifierFlags0.timitDatum);
      assertFalse(seqClassifierFlags0.dump);
      assertFalse(seqClassifierFlags0.useABSTRFreq);
      assertFalse(seqClassifierFlags0.useMinimalAbbr);
      assertEquals(0.1, seqClassifierFlags0.initRate, 0.01D);
      assertFalse(seqClassifierFlags0.useAdaGradFOBOS);
      assertFalse(seqClassifierFlags0.makeConsistent);
      assertEquals(0.0, seqClassifierFlags0.softmaxTieLambda, 0.01D);
      assertFalse(seqClassifierFlags0.doFeatureDiscovery);
      assertTrue(seqClassifierFlags0.splitDocuments);
      assertEquals(0, seqClassifierFlags0.numOfFeatureSlices);
      assertFalse(seqClassifierFlags0.useLongSequences);
      assertFalse(seqClassifierFlags0.useDisjunctive);
      assertFalse(seqClassifierFlags0.useReverseAffix);
      assertFalse(seqClassifierFlags0.useFeaturesCpC4gram);
      assertFalse(seqClassifierFlags0.useUnicodeType4gram);
      assertEquals(2, seqClassifierFlags0.maxLeft);
      assertFalse(seqClassifierFlags0.groupByInput);
      assertFalse(seqClassifierFlags0.usePre);
      assertFalse(seqClassifierFlags0.useDistSim);
      assertFalse(seqClassifierFlags0.hardcodeSoftmaxOutputWeights);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions3);
      assertFalse(seqClassifierFlags0.useQuartic);
      assertFalse(seqClassifierFlags0.lowercaseNGrams);
      assertFalse(seqClassifierFlags0.useHKPre1);
      assertFalse(seqClassifierFlags0.useMinimalAbbr1);
      assertTrue(seqClassifierFlags0.separateASCIIandRange);
      assertFalse(seqClassifierFlags0.outputIterationsToFile);
      assertEquals(4, seqClassifierFlags0.disjunctionWidth);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions2);
      assertFalse(seqClassifierFlags0.alternateTraining);
      assertFalse(seqClassifierFlags0.printFactorTable);
      assertFalse(seqClassifierFlags0.removeBackgroundSingletonFeatures);
      assertFalse(seqClassifierFlags0.useNextSequences);
      assertFalse(seqClassifierFlags0.printFirstOrderProbs);
      assertFalse(seqClassifierFlags0.pctSegmenterScaleByCRF);
      assertFalse(seqClassifierFlags0.noEdgeFeature);
      assertEquals(8, seqClassifierFlags0.maxAllowedChromaticSize);
      assertFalse(seqClassifierFlags0.evaluateTrain);
      assertEquals((-1), seqClassifierFlags0.numHiddenUnits);
      assertFalse(seqClassifierFlags0.useWEB);
      assertFalse(seqClassifierFlags0.useObservedSequencesOnly);
      assertFalse(seqClassifierFlags0.sloppyGazette);
      assertFalse(seqClassifierFlags0.usePrevNextLemmas);
      assertFalse(seqClassifierFlags0.useChromaticSampling);
      assertFalse(seqClassifierFlags0.useDictCTB2);
      assertEquals(0.0, seqClassifierFlags0.newgeneThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.printXML);
      assertFalse(seqClassifierFlags0.splitOnHead);
      assertFalse(seqClassifierFlags0.usePKChar2);
      assertFalse(seqClassifierFlags0.useDualDecomp);
      assertFalse(seqClassifierFlags0.randomLopFeatureSplit);
      assertFalse(seqClassifierFlags0.useGazFeatures);
      assertFalse(seqClassifierFlags0.usePrevSequences);
      assertFalse(seqClassifierFlags0.intern);
      assertFalse(seqClassifierFlags0.printProbs);
      assertFalse(seqClassifierFlags0.useStochasticQN);
      assertFalse(seqClassifierFlags0.useAdaDelta);
      assertFalse(seqClassifierFlags0.useTypeySequences);
      assertEquals(50, seqClassifierFlags0.SGD2QNhessSamples);
      assertFalse(seqClassifierFlags0.useSemPrior);
      assertFalse(seqClassifierFlags0.useChunkySequences);
      assertFalse(seqClassifierFlags0.verboseForTrueCasing);
      assertFalse(seqClassifierFlags0.useInPlaceSGD);
      assertTrue(seqClassifierFlags0.useDenero);
      assertFalse(seqClassifierFlags0.strictlyFirstOrder);
      assertEquals(1.0E-4, seqClassifierFlags0.tolerance, 0.01D);
      assertFalse(seqClassifierFlags0.numberEquivalenceDistSim);
      assertTrue(seqClassifierFlags0.useExternal);
      assertFalse(seqClassifierFlags0.useCRFforUnsup);
      assertFalse(seqClassifierFlags0.dualDecompNotBIO);
      assertFalse(seqClassifierFlags0.useHuber);
      assertFalse(seqClassifierFlags0.useNext);
      assertTrue(seqClassifierFlags0.useQN);
      assertFalse(seqClassifierFlags0.useSentenceNumber);
      assertFalse(seqClassifierFlags0.cleanGazette);
      assertFalse(seqClassifierFlags0.strictlySecondOrder);
      assertFalse(seqClassifierFlags0.useRule);
      assertEquals(1.0, seqClassifierFlags0.lambdaEN, 0.01D);
      assertTrue(seqClassifierFlags0.useSequences);
      assertEquals(0, seqClassifierFlags0.featureCountThresh);
      assertFalse(seqClassifierFlags0.useEntityTypeSequences);
      assertEquals(1.0, seqClassifierFlags0.alignDDAlpha, 0.01D);
      assertFalse(seqClassifierFlags0.deleteBlankLines);
      assertFalse(seqClassifierFlags0.dampDDStepSizeWithAlignmentProb);
      assertFalse(seqClassifierFlags0.useProtoFeatures);
      assertFalse(seqClassifierFlags0.useNPHead);
      assertEquals((-1), seqClassifierFlags0.maxIterations);
      assertEquals(0, seqClassifierFlags0.numTimesPruneFeatures);
      assertFalse(seqClassifierFlags0.usePhraseWordSpecialTags);
      assertEquals(25, seqClassifierFlags0.QNsize);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSize, 0.01D);
      assertEquals((-1), seqClassifierFlags0.arbitraryInputLayerSize);
      assertEquals((-1), seqClassifierFlags0.labelDictionaryCutoff);
      assertEquals(0, seqClassifierFlags0.dualDecompMaxItr);
      assertFalse(seqClassifierFlags0.useNoisyLabel);
      assertFalse(seqClassifierFlags0.useParenMatching);
      assertFalse(seqClassifierFlags0.gradientDebug);
      assertFalse(seqClassifierFlags0.useTaggySequences);
      assertFalse(seqClassifierFlags0.useAltGazFeatures);
      assertFalse(seqClassifierFlags0.intern2);
      assertFalse(seqClassifierFlags0.testObjFunction);
      assertFalse(seqClassifierFlags0.useLemmaAsWord);
      assertFalse(seqClassifierFlags0.pctSegmenterLenAdjust);
      assertFalse(seqClassifierFlags0.useGEforSup);
      assertFalse(seqClassifierFlags0.augmentedDateChars);
      assertFalse(seqClassifierFlags0.useWordn);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSizeAlignment, 0.01D);
      assertTrue(seqClassifierFlags0.biAlignmentPriorIsPMI);
      assertFalse(seqClassifierFlags0.useDictASBC2);
      assertEquals(1, seqClassifierFlags0.multiThreadGrad);
      assertFalse(seqClassifierFlags0.fakeDataset);
      assertEquals(0.0, seqClassifierFlags0.annealingRate, 0.01D);
      assertFalse(seqClassifierFlags0.useEitherSideWord);
      assertEquals(Integer.MAX_VALUE, seqClassifierFlags0.printFeaturesUpto);
      assertFalse(seqClassifierFlags0.useNegHKDict4);
      assertFalse(seqClassifierFlags0.useNegHKDict3);
      assertFalse(seqClassifierFlags0.useNegHKDict2);
      assertFalse(seqClassifierFlags0.removeStrictGoodCoNLLDuplicates);
      assertFalse(seqClassifierFlags0.useNegCTBDict4);
      assertFalse(seqClassifierFlags0.useNegCTBDict3);
      assertFalse(seqClassifierFlags0.useNegCTBDict2);
      assertFalse(seqClassifierFlags0.useFeaturesC4gram);
      assertFalse(seqClassifierFlags0.useSeenFeaturesOnly);
      assertTrue(seqClassifierFlags0.averagePerceptron);
      assertFalse(seqClassifierFlags0.useBilingualNERPrior);
      assertFalse(seqClassifierFlags0.lowerNewgeneThreshold);
      assertFalse(seqClassifierFlags0.useRadical);
      assertFalse(seqClassifierFlags0.useSegmentation);
      assertFalse(seqClassifierFlags0.doFE);
      assertFalse(seqClassifierFlags0.useClassFeature);
      assertFalse(seqClassifierFlags0.suppressTestDebug);
      assertFalse(seqClassifierFlags0.useMsr);
      assertFalse(seqClassifierFlags0.useDictHK2);
      assertFalse(seqClassifierFlags0.useEntityTypes);
      assertEquals(0.0, seqClassifierFlags0.alignmentPruneThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useGenericFeatures);
      assertFalse(seqClassifierFlags0.useGENIA);
      assertFalse(seqClassifierFlags0.sparseOutputLayer);
      assertFalse(seqClassifierFlags0.useNERPriorBIO);
      assertFalse(seqClassifierFlags0.useReverse);
      assertEquals(0, seqClassifierFlags0.evaluateIters);
      assertFalse(seqClassifierFlags0.dropoutApprox);
      assertEquals(100, seqClassifierFlags0.printClassifierParam);
      assertFalse(seqClassifierFlags0.useAs);
      assertFalse(seqClassifierFlags0.useBagOfWords);
      assertEquals(0, seqClassifierFlags0.nerSkipFirstK);
      assertFalse(seqClassifierFlags0.prependEmbedding);
      assertFalse(seqClassifierFlags0.useOrdinal);
      assertFalse(seqClassifierFlags0.useAbbr1);
      assertFalse(seqClassifierFlags0.powerAlignProbAsAddition);
      assertFalse(seqClassifierFlags0.groupByOutputClass);
      assertEquals(10, seqClassifierFlags0.totalDataSlice);
      assertFalse(seqClassifierFlags0.includeFullCRFInLOP);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions2);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions3);
      assertFalse(seqClassifierFlags0.useTags);
      assertFalse(seqClassifierFlags0.useWideDisjunctive);
      assertEquals(0, seqClassifierFlags0.maxRight);
      assertFalse(seqClassifierFlags0.learnENBasedOnCH);
      assertFalse(seqClassifierFlags0.dualDecompAlignment);
      assertFalse(seqClassifierFlags0.useHk);
      assertFalse(seqClassifierFlags0.useOccurrencePatterns);
      assertFalse(seqClassifierFlags0.useKBest);
      assertFalse(seqClassifierFlags0.useYetMoreCpCShapes);
      assertFalse(seqClassifierFlags0.useYear);
      assertFalse(seqClassifierFlags0.useAbbr);
      assertFalse(seqClassifierFlags0.useBeginSent);
      assertTrue(seqClassifierFlags0.learnCHBasedOnEN);
      assertTrue(seqClassifierFlags0.useOutputLayer);
      assertFalse(seqClassifierFlags0.evaluateBackground);
      assertFalse(seqClassifierFlags0.readStdin);
      assertFalse(seqClassifierFlags0.useFilter);
      assertEquals("", seqClassifierFlags0.toString());
      
      String string0 = JSONObject.numberToString((Number) 0.1);
      assertEquals("0.1", string0);
      assertNotNull(string0);
  }

  //Test case number: 43
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 65 IFEQ L815 - true
   */

  @Test
  public void test43()  throws Throwable  {
      HashMap<CoreLabel.GenericAnnotation<Boolean>, Object> hashMap0 = new HashMap<CoreLabel.GenericAnnotation<Boolean>, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.optJSONArray("_?~AmW+C2*PL0w,");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
  }

  //Test case number: 44
  /*
   * 11 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Z)Lwheel/json/JSONObject;: I8 Branch 68 IFEQ L902 - true
   * Goal 2. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I41 Branch 104 IF_ICMPNE L1197 - true
   * Goal 3. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I84 Branch 105 IFEQ L1204 - true
   * Goal 4. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I84 Branch 105 IFEQ L1204 - false
   * Goal 5. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I98 Branch 106 IF_ICMPLE L1206 - true
   * Goal 6. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I98 Branch 106 IF_ICMPLE L1206 - false
   * Goal 7. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I125 Branch 107 IF_ICMPGE L1211 - true
   * Goal 8. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I125 Branch 107 IF_ICMPGE L1211 - false
   * Goal 9. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I177 Branch 108 IF_ICMPLE L1219 - false
   * Goal 10. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I194 Branch 109 IF_ICMPGE L1221 - true
   * Goal 11. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I194 Branch 109 IF_ICMPGE L1221 - false
   */

  @Test
  public void test44()  throws Throwable  {
      HashMap<Long, ArrayCoreMap> hashMap0 = new HashMap<Long, ArrayCoreMap>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put(" 7>+zBQ|BO", false);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject0.append("?iqQ>yLoEe0F", (Object) "?iqQ>yLoEe0F");
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(2, jSONObject2.length());
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject2);
      
      String string0 = JSONObject.valueToString(jSONObject0, 2999, 2999);
      assertEquals("{\niqQ>yLoEe0F\": [\"?iqQ>yLoEe0F\"],\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \" 7>+zBQ|BO\": false\n}", string0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(2, jSONObject0.length());
      assertNotNull(string0);
  }

  //Test case number: 45
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I12 Branch 67 IFNULL L889 - true
   */

  @Test
  public void test45()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertEquals(0, jSONObject0.length());
      assertNull(string0);
  }

  //Test case number: 46
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getInt(Ljava/lang/String;)I: I13 Branch 46 IFEQ L484 - true
   */

  @Test
  public void test46()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONObject jSONObject0 = new JSONObject((Object) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("mob", (Collection) linkedList0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, linkedList0.size());
      assertEquals(3, jSONObject1.length());
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject1.optInt("mob");
      assertEquals(0, int0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, linkedList0.size());
      assertEquals(3, jSONObject1.length());
      assertEquals(3, jSONObject0.length());
  }

  //Test case number: 47
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I11 Branch 50 IFNE L548 - false
   */

  @Test
  public void test47()  throws Throwable  {
      HashMap<Object, CategoryWordTag> hashMap0 = new HashMap<Object, CategoryWordTag>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject0);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(stringArray0);
  }

  //Test case number: 48
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;D)Lwheel/json/JSONObject;: root-Branch
   */

  @Test
  public void test48()  throws Throwable  {
      SeqClassifierFlags seqClassifierFlags0 = new SeqClassifierFlags();
      assertEquals((-1), seqClassifierFlags0.maxIterations);
      assertFalse(seqClassifierFlags0.lowercaseNGrams);
      assertFalse(seqClassifierFlags0.pctSegmenterScaleByCRF);
      assertFalse(seqClassifierFlags0.useRandomSeed);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions3);
      assertFalse(seqClassifierFlags0.dampDDStepSizeWithAlignmentProb);
      assertFalse(seqClassifierFlags0.printFirstOrderProbs);
      assertFalse(seqClassifierFlags0.useKBest);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSizeAlignment, 0.01D);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions2);
      assertFalse(seqClassifierFlags0.useHKChar2);
      assertEquals((-1), seqClassifierFlags0.labelDictionaryCutoff);
      assertFalse(seqClassifierFlags0.alternateTraining);
      assertFalse(seqClassifierFlags0.powerAlignProbAsAddition);
      assertFalse(seqClassifierFlags0.estimateInitial);
      assertFalse(seqClassifierFlags0.printXML);
      assertFalse(seqClassifierFlags0.useEntityTypes);
      assertFalse(seqClassifierFlags0.printProbs);
      assertFalse(seqClassifierFlags0.intern);
      assertFalse(seqClassifierFlags0.useDistSim);
      assertTrue(seqClassifierFlags0.useOutputLayer);
      assertFalse(seqClassifierFlags0.useRule);
      assertFalse(seqClassifierFlags0.useTaggySequencesShapeInteraction);
      assertFalse(seqClassifierFlags0.lowerNewgeneThreshold);
      assertFalse(seqClassifierFlags0.useUnicodeType4gram);
      assertFalse(seqClassifierFlags0.useABGENE);
      assertFalse(seqClassifierFlags0.groupByHiddenUnit);
      assertFalse(seqClassifierFlags0.usePhraseWordSpecialTags);
      assertFalse(seqClassifierFlags0.useExtraTaggySequences);
      assertFalse(seqClassifierFlags0.splitOnHead);
      assertFalse(seqClassifierFlags0.booleanFeatures);
      assertEquals((-1), seqClassifierFlags0.numHiddenUnits);
      assertEquals(Integer.MAX_VALUE, seqClassifierFlags0.printFeaturesUpto);
      assertFalse(seqClassifierFlags0.useFeaturesCpC4gram);
      assertFalse(seqClassifierFlags0.augmentedDateChars);
      assertFalse(seqClassifierFlags0.useAltGazFeatures);
      assertFalse(seqClassifierFlags0.useSemPrior);
      assertEquals(1, seqClassifierFlags0.nerSlowerTimes);
      assertFalse(seqClassifierFlags0.doFeatureDiscovery);
      assertFalse(seqClassifierFlags0.suppressTestDebug);
      assertTrue(seqClassifierFlags0.splitDocuments);
      assertFalse(seqClassifierFlags0.useInPlaceSGD);
      assertFalse(seqClassifierFlags0.useDictPK2);
      assertTrue(seqClassifierFlags0.useExternal);
      assertFalse(seqClassifierFlags0.dontExtendTaggy);
      assertTrue(seqClassifierFlags0.useDenero);
      assertEquals(10, seqClassifierFlags0.wideDisjunctionWidth);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions3);
      assertFalse(seqClassifierFlags0.usePKSuf1);
      assertFalse(seqClassifierFlags0.factorInAlignmentProb);
      assertTrue(seqClassifierFlags0.useKnownLCWords);
      assertEquals(2, seqClassifierFlags0.maxLeft);
      assertFalse(seqClassifierFlags0.dualDecompDebug);
      assertFalse(seqClassifierFlags0.useClassFeature);
      assertFalse(seqClassifierFlags0.strictlyFirstOrder);
      assertFalse(seqClassifierFlags0.saveFeatureIndexToDisk);
      assertEquals(1.0, seqClassifierFlags0.lambdaEN, 0.01D);
      assertFalse(seqClassifierFlags0.useNextVB);
      assertFalse(seqClassifierFlags0.useMoreGazFeatures);
      assertFalse(seqClassifierFlags0.useBig5);
      assertFalse(seqClassifierFlags0.useTOK);
      assertFalse(seqClassifierFlags0.useUnicodeType);
      assertFalse(seqClassifierFlags0.printFactorTable);
      assertFalse(seqClassifierFlags0.useNegPKDict3);
      assertFalse(seqClassifierFlags0.useNegPKDict2);
      assertFalse(seqClassifierFlags0.useNegPKDict4);
      assertEquals(0, seqClassifierFlags0.featureCountThresh);
      assertFalse(seqClassifierFlags0.useEmbedding);
      assertFalse(seqClassifierFlags0.useNextSequences);
      assertFalse(seqClassifierFlags0.cleanGazette);
      assertEquals(0.5, seqClassifierFlags0.alignmentDecodeThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useMinimalAbbr1);
      assertFalse(seqClassifierFlags0.useGazFeatures);
      assertFalse(seqClassifierFlags0.sloppyGazette);
      assertTrue(seqClassifierFlags0.biAlignmentPriorIsPMI);
      assertFalse(seqClassifierFlags0.geDebug);
      assertFalse(seqClassifierFlags0.usePhraseWords);
      assertFalse(seqClassifierFlags0.useHuber);
      assertFalse(seqClassifierFlags0.useBerkeleyAlignerForViterbi);
      assertEquals(0.001, seqClassifierFlags0.adaGradEps, 0.01D);
      assertFalse(seqClassifierFlags0.useTypeSeqs);
      assertFalse(seqClassifierFlags0.useStochasticQN);
      assertEquals((-1), seqClassifierFlags0.QNPasses);
      assertTrue(seqClassifierFlags0.useHiddenLayer);
      assertFalse(seqClassifierFlags0.useChunks);
      assertFalse(seqClassifierFlags0.useSMD);
      assertFalse(seqClassifierFlags0.initWithNERPosterior);
      assertFalse(seqClassifierFlags0.useFeaturesCpC5gram);
      assertFalse(seqClassifierFlags0.useUnicodeType5gram);
      assertEquals(1.0, seqClassifierFlags0.unsupDropoutScale, 0.01D);
      assertFalse(seqClassifierFlags0.selfTest);
      assertFalse(seqClassifierFlags0.useLemmaAsWord);
      assertFalse(seqClassifierFlags0.gradientDebug);
      assertFalse(seqClassifierFlags0.mergeTags);
      assertFalse(seqClassifierFlags0.useNPHead);
      assertFalse(seqClassifierFlags0.useNERPrior);
      assertFalse(seqClassifierFlags0.makeConsistent);
      assertFalse(seqClassifierFlags0.verboseForTrueCasing);
      assertEquals(100, seqClassifierFlags0.numSamples);
      assertFalse(seqClassifierFlags0.useAdaDelta);
      assertTrue(seqClassifierFlags0.keepOBInMemory);
      assertFalse(seqClassifierFlags0.useHKPre1);
      assertFalse(seqClassifierFlags0.useAdaGradFOBOS);
      assertEquals(0.95, seqClassifierFlags0.adaDeltaRho, 0.01D);
      assertEquals(1, seqClassifierFlags0.bisequencePriorType);
      assertFalse(seqClassifierFlags0.useANTE);
      assertFalse(seqClassifierFlags0.groupByInput);
      assertFalse(seqClassifierFlags0.verboseMode);
      assertFalse(seqClassifierFlags0.useFeaturesC5gram);
      assertEquals(8, seqClassifierFlags0.maxAllowedChromaticSize);
      assertEquals(0.0, seqClassifierFlags0.newgeneThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.dualDecompNotBIO);
      assertFalse(seqClassifierFlags0.useReverseAffix);
      assertFalse(seqClassifierFlags0.evaluateTrain);
      assertFalse(seqClassifierFlags0.memoryThrift);
      assertFalse(seqClassifierFlags0.useNext);
      assertFalse(seqClassifierFlags0.usePrevNextLemmas);
      assertFalse(seqClassifierFlags0.useChromaticSampling);
      assertFalse(seqClassifierFlags0.testVariance);
      assertFalse(seqClassifierFlags0.useGazettePhrases);
      assertEquals(1, seqClassifierFlags0.endFold);
      assertEquals(25, seqClassifierFlags0.QNsize2);
      assertFalse(seqClassifierFlags0.cacheNGrams);
      assertEquals(1.0, seqClassifierFlags0.dropoutScale, 0.01D);
      assertFalse(seqClassifierFlags0.expandMidDot);
      assertFalse(seqClassifierFlags0.keepEmptySentences);
      assertFalse(seqClassifierFlags0.noNeighborConstraints);
      assertFalse(seqClassifierFlags0.useOutDict2);
      assertFalse(seqClassifierFlags0.softmaxOutputLayer);
      assertFalse(seqClassifierFlags0.useCorefFeatures);
      assertFalse(seqClassifierFlags0.useSuf);
      assertEquals(0, seqClassifierFlags0.maxQNItr);
      assertFalse(seqClassifierFlags0.terminateOnEvalImprovement);
      assertFalse(seqClassifierFlags0.backpropLopTraining);
      assertFalse(seqClassifierFlags0.suppressMidDotPostprocessing);
      assertTrue(seqClassifierFlags0.useCWSFeatures);
      assertFalse(seqClassifierFlags0.useShapeConjunctions);
      assertFalse(seqClassifierFlags0.useURLSequences);
      assertEquals(0.0, seqClassifierFlags0.dropoutRate, 0.01D);
      assertFalse(seqClassifierFlags0.noEdgeFeature);
      assertFalse(seqClassifierFlags0.useDualDecomp);
      assertEquals(0.0, seqClassifierFlags0.featureWeightThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useFeaturesCpC6gram);
      assertFalse(seqClassifierFlags0.useFirstWord);
      assertFalse(seqClassifierFlags0.useScaledSGD);
      assertFalse(seqClassifierFlags0.usePrevSequences);
      assertEquals(1, seqClassifierFlags0.numFolds);
      assertFalse(seqClassifierFlags0.useMinimalAbbr);
      assertEquals(30, seqClassifierFlags0.beamSize);
      assertFalse(seqClassifierFlags0.useIsURL);
      assertEquals(1, seqClassifierFlags0.startFold);
      assertFalse(seqClassifierFlags0.useSequentialScanSampling);
      assertTrue(seqClassifierFlags0.useWord);
      assertTrue(seqClassifierFlags0.useViterbi);
      assertFalse(seqClassifierFlags0.dump);
      assertTrue(seqClassifierFlags0.includeC2EViterbi);
      assertFalse(seqClassifierFlags0.usePrevVB);
      assertFalse(seqClassifierFlags0.useABSTRFreqDict);
      assertFalse(seqClassifierFlags0.useCommonWordsFeature);
      assertEquals(0, seqClassifierFlags0.ocrFold);
      assertFalse(seqClassifierFlags0.useEitherSideDisjunctive);
      assertFalse(seqClassifierFlags0.useFloat);
      assertFalse(seqClassifierFlags0.useShapeStrings);
      assertFalse(seqClassifierFlags0.strictGoodCoNLL);
      assertFalse(seqClassifierFlags0.useRad2);
      assertFalse(seqClassifierFlags0.useQuartic);
      assertFalse(seqClassifierFlags0.use2W);
      assertFalse(seqClassifierFlags0.useRad1);
      assertFalse(seqClassifierFlags0.largeChSegFile);
      assertFalse(seqClassifierFlags0.useMoreTags);
      assertFalse(seqClassifierFlags0.useASBCChar2);
      assertEquals((-1), seqClassifierFlags0.wordShape);
      assertEquals(1, seqClassifierFlags0.numTimesRemoveTopN);
      assertFalse(seqClassifierFlags0.useUniformPrior);
      assertFalse(seqClassifierFlags0.useRule2);
      assertEquals(1, seqClassifierFlags0.kBest);
      assertFalse(seqClassifierFlags0.useVB);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions);
      assertEquals(8, seqClassifierFlags0.distSimMaxBits);
      assertEquals(1, seqClassifierFlags0.multiThreadPerceptron);
      assertEquals(1, seqClassifierFlags0.selfTrainIterations);
      assertFalse(seqClassifierFlags0.baseline);
      assertEquals(1, seqClassifierFlags0.numStartLayers);
      assertFalse(seqClassifierFlags0.usePre);
      assertFalse(seqClassifierFlags0.useOWLQN);
      assertFalse(seqClassifierFlags0.secondOrderNonLinear);
      assertFalse(seqClassifierFlags0.tieOutputLayer);
      assertFalse(seqClassifierFlags0.conjoinShapeNGrams);
      assertFalse(seqClassifierFlags0.useRad2b);
      assertFalse(seqClassifierFlags0.strictlyThirdOrder);
      assertFalse(seqClassifierFlags0.useTypeSeqs2);
      assertFalse(seqClassifierFlags0.doAdaptation);
      assertFalse(seqClassifierFlags0.useHeadGov);
      assertFalse(seqClassifierFlags0.useTypeSeqs3);
      assertFalse(seqClassifierFlags0.useLemmas);
      assertEquals(1.0, seqClassifierFlags0.sigma, 0.01D);
      assertEquals(1.0, seqClassifierFlags0.lambdaCH, 0.01D);
      assertFalse(seqClassifierFlags0.blockInitialize);
      assertTrue(seqClassifierFlags0.initWithPosterior);
      assertFalse(seqClassifierFlags0.appendLC);
      assertTrue(seqClassifierFlags0.restrictLabels);
      assertFalse(seqClassifierFlags0.retainEntitySubclassification);
      assertFalse(seqClassifierFlags0.weightByEntropy);
      assertFalse(seqClassifierFlags0.useBigramInTwoClique);
      assertFalse(seqClassifierFlags0.useNeighborNGrams);
      assertFalse(seqClassifierFlags0.useHybrid);
      assertFalse(seqClassifierFlags0.useSum);
      assertFalse(seqClassifierFlags0.subCWGaz);
      assertFalse(seqClassifierFlags0.usePrev);
      assertFalse(seqClassifierFlags0.useAdaDiff);
      assertFalse(seqClassifierFlags0.usePrediction);
      assertFalse(seqClassifierFlags0.usePhraseFeatures);
      assertEquals(0, seqClassifierFlags0.featureCountThreshold);
      assertFalse(seqClassifierFlags0.printWeights);
      assertEquals(0.0, seqClassifierFlags0.l1reg, 0.01D);
      assertFalse(seqClassifierFlags0.useWordnetFeatures);
      assertFalse(seqClassifierFlags0.terminateOnAvgImprovement);
      assertEquals(0.0, seqClassifierFlags0.pctSegmenterScale, 0.01D);
      assertFalse(seqClassifierFlags0.usePKPre1);
      assertEquals(10, seqClassifierFlags0.totalFeatureSlice);
      assertEquals(0, seqClassifierFlags0.scaledSGDMethod);
      assertFalse(seqClassifierFlags0.normalize);
      assertEquals(0, seqClassifierFlags0.removeTopN);
      assertFalse(seqClassifierFlags0.useDict2);
      assertFalse(seqClassifierFlags0.powerAlignProb);
      assertFalse(seqClassifierFlags0.twoStage);
      assertEquals((-1), seqClassifierFlags0.maxNGramLeng);
      assertFalse(seqClassifierFlags0.useLabelSource);
      assertFalse(seqClassifierFlags0.announceObjectBankEntries);
      assertFalse(seqClassifierFlags0.useOnlySeenWeights);
      assertFalse(seqClassifierFlags0.useFeaturesC6gram);
      assertEquals(0, seqClassifierFlags0.interimOutputFreq);
      assertFalse(seqClassifierFlags0.useFREQ);
      assertEquals(0, seqClassifierFlags0.multiThreadGibbs);
      assertFalse(seqClassifierFlags0.useSymWordPairs);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesAll);
      assertFalse(seqClassifierFlags0.useCWSWordFeatures);
      assertFalse(seqClassifierFlags0.iobTags);
      assertEquals(0.1, seqClassifierFlags0.gainSGD, 0.01D);
      assertFalse(seqClassifierFlags0.useNegASBCDict4);
      assertFalse(seqClassifierFlags0.combo);
      assertFalse(seqClassifierFlags0.useNegASBCDict3);
      assertFalse(seqClassifierFlags0.useNegASBCDict2);
      assertEquals(25, seqClassifierFlags0.QNsize);
      assertEquals((-1), seqClassifierFlags0.arbitraryInputLayerSize);
      assertFalse(seqClassifierFlags0.useTopics);
      assertFalse(seqClassifierFlags0.useNoisyLabel);
      assertEquals(1.0, seqClassifierFlags0.alignDDAlpha, 0.01D);
      assertFalse(seqClassifierFlags0.dropoutApprox);
      assertEquals(10, seqClassifierFlags0.totalDataSlice);
      assertEquals(0.1, seqClassifierFlags0.initialGain, 0.01D);
      assertFalse(seqClassifierFlags0.useLastRealWord);
      assertFalse(seqClassifierFlags0.readStdin);
      assertFalse(seqClassifierFlags0.usePrediction2);
      assertEquals(0, seqClassifierFlags0.hybridCutoffIteration);
      assertFalse(seqClassifierFlags0.usePhraseWordTags);
      assertFalse(seqClassifierFlags0.useABSTR);
      assertTrue(seqClassifierFlags0.useQN);
      assertEquals((-1), seqClassifierFlags0.purgeFeatures);
      assertFalse(seqClassifierFlags0.dualDecompAlignment);
      assertFalse(seqClassifierFlags0.groupByFeatureTemplate);
      assertFalse(seqClassifierFlags0.useWEBFreqDict);
      assertEquals(0, seqClassifierFlags0.numTimesPruneFeatures);
      assertFalse(seqClassifierFlags0.useWordn);
      assertFalse(seqClassifierFlags0.useChPos);
      assertFalse(seqClassifierFlags0.useIsDateRange);
      assertFalse(seqClassifierFlags0.sighanPostProcessing);
      assertFalse(seqClassifierFlags0.useNPGovernor);
      assertFalse(seqClassifierFlags0.printNR);
      assertEquals(0.0, seqClassifierFlags0.removeTopNPercent, 0.01D);
      assertFalse(seqClassifierFlags0.addBiasToEmbedding);
      assertFalse(seqClassifierFlags0.doFE);
      assertEquals(1.0E-4, seqClassifierFlags0.tolerance, 0.01D);
      assertFalse(seqClassifierFlags0.testHessSamples);
      assertFalse(seqClassifierFlags0.greekifyNGrams);
      assertFalse(seqClassifierFlags0.addCapitalFeatures);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesBigram);
      assertFalse(seqClassifierFlags0.normalizeTerms);
      assertFalse(seqClassifierFlags0.useHardGE);
      assertTrue(seqClassifierFlags0.useSequences);
      assertFalse(seqClassifierFlags0.useDictleng);
      assertFalse(seqClassifierFlags0.useASBCSuf1);
      assertFalse(seqClassifierFlags0.strictlySecondOrder);
      assertFalse(seqClassifierFlags0.regularizeSoftmaxTieParam);
      assertFalse(seqClassifierFlags0.useMSRChar2);
      assertFalse(seqClassifierFlags0.useGenericFeatures);
      assertEquals(Double.POSITIVE_INFINITY, seqClassifierFlags0.searchGraphPrune, 0.01D);
      assertFalse(seqClassifierFlags0.useKL);
      assertFalse(seqClassifierFlags0.useIfInteger);
      assertFalse(seqClassifierFlags0.useNERPriorBIO);
      assertEquals(0.9, seqClassifierFlags0.selfTrainConfidenceThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.fakeDataset);
      assertFalse(seqClassifierFlags0.useDictASBC2);
      assertFalse(seqClassifierFlags0.useCTBPre1);
      assertFalse(seqClassifierFlags0.useDictHK2);
      assertFalse(seqClassifierFlags0.useNB);
      assertFalse(seqClassifierFlags0.sparseOutputLayer);
      assertFalse(seqClassifierFlags0.transitionEdgeOnly);
      assertFalse(seqClassifierFlags0.bioSubmitOutput);
      assertFalse(seqClassifierFlags0.intern2);
      assertFalse(seqClassifierFlags0.useDisjunctiveShapeInteraction);
      assertFalse(seqClassifierFlags0.randomLopWeights);
      assertFalse(seqClassifierFlags0.useMsr);
      assertEquals(0.0, seqClassifierFlags0.priorLambda, 0.01D);
      assertFalse(seqClassifierFlags0.useParenMatching);
      assertFalse(seqClassifierFlags0.useNextRealWord);
      assertFalse(seqClassifierFlags0.useObservedFeaturesOnly);
      assertFalse(seqClassifierFlags0.use4Clique);
      assertFalse(seqClassifierFlags0.deleteBlankLines);
      assertFalse(seqClassifierFlags0.useBerkeleyCompetitivePosterior);
      assertFalse(seqClassifierFlags0.useObservedSequencesOnly);
      assertFalse(seqClassifierFlags0.useWEB);
      assertFalse(seqClassifierFlags0.useSymTags);
      assertFalse(seqClassifierFlags0.restrictTransitionsTimit);
      assertFalse(seqClassifierFlags0.useNGrams);
      assertEquals(0.0, seqClassifierFlags0.featureDiffThresh, 0.01D);
      assertFalse(seqClassifierFlags0.skipOutputRegularization);
      assertFalse(seqClassifierFlags0.useWord1);
      assertEquals(1, seqClassifierFlags0.featureThreshold);
      assertFalse(seqClassifierFlags0.useWord2);
      assertFalse(seqClassifierFlags0.useWord3);
      assertFalse(seqClassifierFlags0.iobWrapper);
      assertFalse(seqClassifierFlags0.useWord4);
      assertFalse(seqClassifierFlags0.randomLopFeatureSplit);
      assertFalse(seqClassifierFlags0.useMUCFeatures);
      assertFalse(seqClassifierFlags0.useDictCTB2);
      assertFalse(seqClassifierFlags0.useLC);
      assertFalse(seqClassifierFlags0.ocrTrain);
      assertFalse(seqClassifierFlags0.useTrainLexicon);
      assertFalse(seqClassifierFlags0.useMoreAbbr);
      assertFalse(seqClassifierFlags0.useNoisyNonNoisyFeature);
      assertFalse(seqClassifierFlags0.removeBackgroundSingletonFeatures);
      assertFalse(seqClassifierFlags0.useNegDict4);
      assertFalse(seqClassifierFlags0.useNegDict3);
      assertFalse(seqClassifierFlags0.useNegDict2);
      assertEquals(50, seqClassifierFlags0.SGD2QNhessSamples);
      assertFalse(seqClassifierFlags0.useSigmoid);
      assertFalse(seqClassifierFlags0.useMidDotShape);
      assertEquals(0, seqClassifierFlags0.numOfFeatureSlices);
      assertFalse(seqClassifierFlags0.perceptronDebug);
      assertEquals(2, seqClassifierFlags0.CRFwindow);
      assertFalse(seqClassifierFlags0.useWordTag);
      assertFalse(seqClassifierFlags0.useLongSequences);
      assertEquals(1, seqClassifierFlags0.selfTrainWindowSize);
      assertEquals(0.1, seqClassifierFlags0.initRate, 0.01D);
      assertFalse(seqClassifierFlags0.purgeDatasets);
      assertTrue(seqClassifierFlags0.useInternal);
      assertFalse(seqClassifierFlags0.casedDistSim);
      assertFalse(seqClassifierFlags0.useBoundarySequences);
      assertFalse(seqClassifierFlags0.useRobustQN);
      assertEquals(0, seqClassifierFlags0.startEvaluateIters);
      assertFalse(seqClassifierFlags0.useABSTRFreq);
      assertFalse(seqClassifierFlags0.useTypeySequences);
      assertFalse(seqClassifierFlags0.checkNameList);
      assertTrue(seqClassifierFlags0.separateASCIIandRange);
      assertEquals(1.0, seqClassifierFlags0.adaptSigma, 0.01D);
      assertFalse(seqClassifierFlags0.usePk);
      assertEquals((-1), seqClassifierFlags0.tuneSampleSize);
      assertFalse(seqClassifierFlags0.useASBCPre1);
      assertFalse(seqClassifierFlags0.justify);
      assertFalse(seqClassifierFlags0.useCTBSuf1);
      assertFalse(seqClassifierFlags0.useGoodForNamesCpC);
      assertFalse(seqClassifierFlags0.useNumberFeature);
      assertTrue(seqClassifierFlags0.applyNERPenalty);
      assertFalse(seqClassifierFlags0.hardcodeSoftmaxOutputWeights);
      assertEquals(0.0, seqClassifierFlags0.softmaxTieLambda, 0.01D);
      assertEquals(1000, seqClassifierFlags0.wordSegBeamSize);
      assertFalse(seqClassifierFlags0.useUnknown);
      assertTrue(seqClassifierFlags0.useMemoryEvaluator);
      assertEquals(1, seqClassifierFlags0.numDatasetsPerFile);
      assertFalse(seqClassifierFlags0.strictlyZeroethOrder);
      assertFalse(seqClassifierFlags0.printTrainLabels);
      assertFalse(seqClassifierFlags0.noMidNGrams);
      assertFalse(seqClassifierFlags0.dehyphenateNGrams);
      assertFalse(seqClassifierFlags0.useBeginSent);
      assertFalse(seqClassifierFlags0.useAcqPrior);
      assertFalse(seqClassifierFlags0.useEntityRule);
      assertFalse(seqClassifierFlags0.useDisjShape);
      assertEquals(4, seqClassifierFlags0.disjunctionWidth);
      assertFalse(seqClassifierFlags0.outputIterationsToFile);
      assertFalse(seqClassifierFlags0.useUnicodeBlock);
      assertFalse(seqClassifierFlags0.useSGDtoQN);
      assertEquals(1, seqClassifierFlags0.numRuns);
      assertEquals(1, seqClassifierFlags0.terminateOnEvalImprovementNumOfEpoch);
      assertFalse(seqClassifierFlags0.useGazettes);
      assertFalse(seqClassifierFlags0.timitDatum);
      assertFalse(seqClassifierFlags0.usePKChar2);
      assertFalse(seqClassifierFlags0.useRadical);
      assertTrue(seqClassifierFlags0.initViterbi);
      assertFalse(seqClassifierFlags0.useShapeStrings3);
      assertFalse(seqClassifierFlags0.useDisjunctive);
      assertFalse(seqClassifierFlags0.useShapeStrings1);
      assertFalse(seqClassifierFlags0.useACR);
      assertFalse(seqClassifierFlags0.useShapeStrings5);
      assertFalse(seqClassifierFlags0.useShapeStrings4);
      assertFalse(seqClassifierFlags0.lazyUpdate);
      assertEquals(1, seqClassifierFlags0.CRForder);
      assertEquals(0.0, seqClassifierFlags0.annealingRate, 0.01D);
      assertFalse(seqClassifierFlags0.useSGD);
      assertEquals(1, seqClassifierFlags0.multiThreadGrad);
      assertFalse(seqClassifierFlags0.doGibbs);
      assertFalse(seqClassifierFlags0.useAs);
      assertEquals(0, seqClassifierFlags0.multiThreadClassifier);
      assertFalse(seqClassifierFlags0.usePosition);
      assertFalse(seqClassifierFlags0.useWordShapeGaz);
      assertFalse(seqClassifierFlags0.printLabelValue);
      assertFalse(seqClassifierFlags0.useHKSuf1);
      assertEquals(1.0, seqClassifierFlags0.randomizedRatio, 0.01D);
      assertEquals(0, seqClassifierFlags0.evaluateIters);
      assertFalse(seqClassifierFlags0.pctSegmenterLenAdjust);
      assertFalse(seqClassifierFlags0.checkGradient);
      assertEquals(1, seqClassifierFlags0.numLopExpert);
      assertFalse(seqClassifierFlags0.useFeaturesC4gram);
      assertEquals(0, seqClassifierFlags0.dualDecompMaxItr);
      assertFalse(seqClassifierFlags0.useCTBChar2);
      assertFalse(seqClassifierFlags0.nonLinearCRF);
      assertFalse(seqClassifierFlags0.keepEnglishWhitespaces);
      assertFalse(seqClassifierFlags0.normalizeTimex);
      assertFalse(seqClassifierFlags0.useTaggySequences);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSize, 0.01D);
      assertFalse(seqClassifierFlags0.useFilter);
      assertFalse(seqClassifierFlags0.useSentenceNumber);
      assertFalse(seqClassifierFlags0.useTitle);
      assertEquals(3, seqClassifierFlags0.charHalfWindow);
      assertFalse(seqClassifierFlags0.useWordPairs);
      assertEquals(0, seqClassifierFlags0.numOfSlices);
      assertFalse(seqClassifierFlags0.useAbbr);
      assertFalse(seqClassifierFlags0.groupByOutputClass);
      assertEquals(0, seqClassifierFlags0.nerSkipFirstK);
      assertFalse(seqClassifierFlags0.useProtoFeatures);
      assertEquals(0.01, seqClassifierFlags0.epsilon, 0.01D);
      assertFalse(seqClassifierFlags0.learnENBasedOnCH);
      assertFalse(seqClassifierFlags0.useGEforSup);
      assertFalse(seqClassifierFlags0.useHk);
      assertFalse(seqClassifierFlags0.useGENIA);
      assertFalse(seqClassifierFlags0.useCRFforUnsup);
      assertEquals(15, seqClassifierFlags0.stochasticBatchSize);
      assertFalse(seqClassifierFlags0.useYetMoreCpCShapes);
      assertTrue(seqClassifierFlags0.learnCHBasedOnEN);
      assertEquals(0, seqClassifierFlags0.maxRight);
      assertFalse(seqClassifierFlags0.includeFullCRFInLOP);
      assertEquals((-1), seqClassifierFlags0.SGDPasses);
      assertFalse(seqClassifierFlags0.useEntityTypeSequences);
      assertTrue(seqClassifierFlags0.averagePerceptron);
      assertFalse(seqClassifierFlags0.testObjFunction);
      assertFalse(seqClassifierFlags0.useOccurrencePatterns);
      assertFalse(seqClassifierFlags0.useTags);
      assertEquals(0, seqClassifierFlags0.maxDocSize);
      assertFalse(seqClassifierFlags0.useSegmentation);
      assertFalse(seqClassifierFlags0.useAbbr1);
      assertEquals(0.0, seqClassifierFlags0.priorAlpha, 0.01D);
      assertFalse(seqClassifierFlags0.removeStrictGoodCoNLLDuplicates);
      assertFalse(seqClassifierFlags0.useNegCTBDict2);
      assertFalse(seqClassifierFlags0.useNegCTBDict3);
      assertFalse(seqClassifierFlags0.useNegCTBDict4);
      assertFalse(seqClassifierFlags0.useBilingualNERPrior);
      assertFalse(seqClassifierFlags0.numberEquivalenceDistSim);
      assertFalse(seqClassifierFlags0.useNegHKDict4);
      assertFalse(seqClassifierFlags0.useNegHKDict3);
      assertFalse(seqClassifierFlags0.keepAllWhitespaces);
      assertFalse(seqClassifierFlags0.factorInBiEdgePotential);
      assertFalse(seqClassifierFlags0.useNegHKDict2);
      assertFalse(seqClassifierFlags0.useBagOfWords);
      assertFalse(seqClassifierFlags0.evaluateBackground);
      assertFalse(seqClassifierFlags0.useChunkySequences);
      assertFalse(seqClassifierFlags0.useYear);
      assertFalse(seqClassifierFlags0.prependEmbedding);
      assertFalse(seqClassifierFlags0.useOrdinal);
      assertFalse(seqClassifierFlags0.useWideDisjunctive);
      assertEquals(0.0, seqClassifierFlags0.alignmentPruneThreshold, 0.01D);
      assertEquals(100, seqClassifierFlags0.printClassifierParam);
      assertEquals((-1), seqClassifierFlags0.samplingSpeedUpThreshold);
      assertFalse(seqClassifierFlags0.useReverse);
      assertFalse(seqClassifierFlags0.useSeenFeaturesOnly);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions2);
      assertFalse(seqClassifierFlags0.matchNERIncentive);
      assertFalse(seqClassifierFlags0.useEitherSideWord);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions3);
      assertFalse(seqClassifierFlags0.tuneSGD);
      assertEquals("", seqClassifierFlags0.toString());
      assertNotNull(seqClassifierFlags0);
      
      JSONObject jSONObject0 = new JSONObject((Object) seqClassifierFlags0);
      assertEquals((-1), seqClassifierFlags0.maxIterations);
      assertFalse(seqClassifierFlags0.lowercaseNGrams);
      assertFalse(seqClassifierFlags0.pctSegmenterScaleByCRF);
      assertFalse(seqClassifierFlags0.useRandomSeed);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions3);
      assertFalse(seqClassifierFlags0.dampDDStepSizeWithAlignmentProb);
      assertFalse(seqClassifierFlags0.printFirstOrderProbs);
      assertFalse(seqClassifierFlags0.useKBest);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSizeAlignment, 0.01D);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions2);
      assertFalse(seqClassifierFlags0.useHKChar2);
      assertEquals((-1), seqClassifierFlags0.labelDictionaryCutoff);
      assertFalse(seqClassifierFlags0.alternateTraining);
      assertFalse(seqClassifierFlags0.powerAlignProbAsAddition);
      assertFalse(seqClassifierFlags0.estimateInitial);
      assertFalse(seqClassifierFlags0.printXML);
      assertFalse(seqClassifierFlags0.useEntityTypes);
      assertFalse(seqClassifierFlags0.printProbs);
      assertFalse(seqClassifierFlags0.intern);
      assertFalse(seqClassifierFlags0.useDistSim);
      assertTrue(seqClassifierFlags0.useOutputLayer);
      assertFalse(seqClassifierFlags0.useRule);
      assertFalse(seqClassifierFlags0.useTaggySequencesShapeInteraction);
      assertFalse(seqClassifierFlags0.lowerNewgeneThreshold);
      assertFalse(seqClassifierFlags0.useUnicodeType4gram);
      assertFalse(seqClassifierFlags0.useABGENE);
      assertFalse(seqClassifierFlags0.groupByHiddenUnit);
      assertFalse(seqClassifierFlags0.usePhraseWordSpecialTags);
      assertFalse(seqClassifierFlags0.useExtraTaggySequences);
      assertFalse(seqClassifierFlags0.splitOnHead);
      assertFalse(seqClassifierFlags0.booleanFeatures);
      assertEquals((-1), seqClassifierFlags0.numHiddenUnits);
      assertEquals(Integer.MAX_VALUE, seqClassifierFlags0.printFeaturesUpto);
      assertFalse(seqClassifierFlags0.useFeaturesCpC4gram);
      assertFalse(seqClassifierFlags0.augmentedDateChars);
      assertFalse(seqClassifierFlags0.useAltGazFeatures);
      assertFalse(seqClassifierFlags0.useSemPrior);
      assertEquals(1, seqClassifierFlags0.nerSlowerTimes);
      assertFalse(seqClassifierFlags0.doFeatureDiscovery);
      assertFalse(seqClassifierFlags0.suppressTestDebug);
      assertTrue(seqClassifierFlags0.splitDocuments);
      assertFalse(seqClassifierFlags0.useInPlaceSGD);
      assertFalse(seqClassifierFlags0.useDictPK2);
      assertTrue(seqClassifierFlags0.useExternal);
      assertFalse(seqClassifierFlags0.dontExtendTaggy);
      assertTrue(seqClassifierFlags0.useDenero);
      assertEquals(10, seqClassifierFlags0.wideDisjunctionWidth);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions3);
      assertFalse(seqClassifierFlags0.usePKSuf1);
      assertFalse(seqClassifierFlags0.factorInAlignmentProb);
      assertTrue(seqClassifierFlags0.useKnownLCWords);
      assertEquals(2, seqClassifierFlags0.maxLeft);
      assertFalse(seqClassifierFlags0.dualDecompDebug);
      assertFalse(seqClassifierFlags0.useClassFeature);
      assertFalse(seqClassifierFlags0.strictlyFirstOrder);
      assertFalse(seqClassifierFlags0.saveFeatureIndexToDisk);
      assertEquals(1.0, seqClassifierFlags0.lambdaEN, 0.01D);
      assertFalse(seqClassifierFlags0.useNextVB);
      assertFalse(seqClassifierFlags0.useMoreGazFeatures);
      assertFalse(seqClassifierFlags0.useBig5);
      assertFalse(seqClassifierFlags0.useTOK);
      assertFalse(seqClassifierFlags0.useUnicodeType);
      assertFalse(seqClassifierFlags0.printFactorTable);
      assertFalse(seqClassifierFlags0.useNegPKDict3);
      assertFalse(seqClassifierFlags0.useNegPKDict2);
      assertFalse(seqClassifierFlags0.useNegPKDict4);
      assertEquals(0, seqClassifierFlags0.featureCountThresh);
      assertFalse(seqClassifierFlags0.useEmbedding);
      assertFalse(seqClassifierFlags0.useNextSequences);
      assertFalse(seqClassifierFlags0.cleanGazette);
      assertEquals(0.5, seqClassifierFlags0.alignmentDecodeThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useMinimalAbbr1);
      assertFalse(seqClassifierFlags0.useGazFeatures);
      assertFalse(seqClassifierFlags0.sloppyGazette);
      assertTrue(seqClassifierFlags0.biAlignmentPriorIsPMI);
      assertFalse(seqClassifierFlags0.geDebug);
      assertFalse(seqClassifierFlags0.usePhraseWords);
      assertFalse(seqClassifierFlags0.useHuber);
      assertFalse(seqClassifierFlags0.useBerkeleyAlignerForViterbi);
      assertEquals(0.001, seqClassifierFlags0.adaGradEps, 0.01D);
      assertFalse(seqClassifierFlags0.useTypeSeqs);
      assertFalse(seqClassifierFlags0.useStochasticQN);
      assertEquals((-1), seqClassifierFlags0.QNPasses);
      assertTrue(seqClassifierFlags0.useHiddenLayer);
      assertFalse(seqClassifierFlags0.useChunks);
      assertFalse(seqClassifierFlags0.useSMD);
      assertFalse(seqClassifierFlags0.initWithNERPosterior);
      assertFalse(seqClassifierFlags0.useFeaturesCpC5gram);
      assertFalse(seqClassifierFlags0.useUnicodeType5gram);
      assertEquals(1.0, seqClassifierFlags0.unsupDropoutScale, 0.01D);
      assertFalse(seqClassifierFlags0.selfTest);
      assertFalse(seqClassifierFlags0.useLemmaAsWord);
      assertFalse(seqClassifierFlags0.gradientDebug);
      assertFalse(seqClassifierFlags0.mergeTags);
      assertFalse(seqClassifierFlags0.useNPHead);
      assertFalse(seqClassifierFlags0.useNERPrior);
      assertFalse(seqClassifierFlags0.makeConsistent);
      assertFalse(seqClassifierFlags0.verboseForTrueCasing);
      assertEquals(100, seqClassifierFlags0.numSamples);
      assertFalse(seqClassifierFlags0.useAdaDelta);
      assertTrue(seqClassifierFlags0.keepOBInMemory);
      assertFalse(seqClassifierFlags0.useHKPre1);
      assertFalse(seqClassifierFlags0.useAdaGradFOBOS);
      assertEquals(0.95, seqClassifierFlags0.adaDeltaRho, 0.01D);
      assertEquals(1, seqClassifierFlags0.bisequencePriorType);
      assertFalse(seqClassifierFlags0.useANTE);
      assertFalse(seqClassifierFlags0.groupByInput);
      assertFalse(seqClassifierFlags0.verboseMode);
      assertFalse(seqClassifierFlags0.useFeaturesC5gram);
      assertEquals(8, seqClassifierFlags0.maxAllowedChromaticSize);
      assertEquals(0.0, seqClassifierFlags0.newgeneThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.dualDecompNotBIO);
      assertFalse(seqClassifierFlags0.useReverseAffix);
      assertFalse(seqClassifierFlags0.evaluateTrain);
      assertFalse(seqClassifierFlags0.memoryThrift);
      assertFalse(seqClassifierFlags0.useNext);
      assertFalse(seqClassifierFlags0.usePrevNextLemmas);
      assertFalse(seqClassifierFlags0.useChromaticSampling);
      assertFalse(seqClassifierFlags0.testVariance);
      assertFalse(seqClassifierFlags0.useGazettePhrases);
      assertEquals(1, seqClassifierFlags0.endFold);
      assertEquals(25, seqClassifierFlags0.QNsize2);
      assertFalse(seqClassifierFlags0.cacheNGrams);
      assertEquals(1.0, seqClassifierFlags0.dropoutScale, 0.01D);
      assertFalse(seqClassifierFlags0.expandMidDot);
      assertFalse(seqClassifierFlags0.keepEmptySentences);
      assertFalse(seqClassifierFlags0.noNeighborConstraints);
      assertFalse(seqClassifierFlags0.useOutDict2);
      assertFalse(seqClassifierFlags0.softmaxOutputLayer);
      assertFalse(seqClassifierFlags0.useCorefFeatures);
      assertFalse(seqClassifierFlags0.useSuf);
      assertEquals(0, seqClassifierFlags0.maxQNItr);
      assertFalse(seqClassifierFlags0.terminateOnEvalImprovement);
      assertFalse(seqClassifierFlags0.backpropLopTraining);
      assertFalse(seqClassifierFlags0.suppressMidDotPostprocessing);
      assertTrue(seqClassifierFlags0.useCWSFeatures);
      assertFalse(seqClassifierFlags0.useShapeConjunctions);
      assertFalse(seqClassifierFlags0.useURLSequences);
      assertEquals(0.0, seqClassifierFlags0.dropoutRate, 0.01D);
      assertFalse(seqClassifierFlags0.noEdgeFeature);
      assertFalse(seqClassifierFlags0.useDualDecomp);
      assertEquals(0.0, seqClassifierFlags0.featureWeightThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useFeaturesCpC6gram);
      assertFalse(seqClassifierFlags0.useFirstWord);
      assertFalse(seqClassifierFlags0.useScaledSGD);
      assertFalse(seqClassifierFlags0.usePrevSequences);
      assertEquals(1, seqClassifierFlags0.numFolds);
      assertFalse(seqClassifierFlags0.useMinimalAbbr);
      assertEquals(30, seqClassifierFlags0.beamSize);
      assertFalse(seqClassifierFlags0.useIsURL);
      assertEquals(1, seqClassifierFlags0.startFold);
      assertFalse(seqClassifierFlags0.useSequentialScanSampling);
      assertTrue(seqClassifierFlags0.useWord);
      assertTrue(seqClassifierFlags0.useViterbi);
      assertFalse(seqClassifierFlags0.dump);
      assertTrue(seqClassifierFlags0.includeC2EViterbi);
      assertFalse(seqClassifierFlags0.usePrevVB);
      assertFalse(seqClassifierFlags0.useABSTRFreqDict);
      assertFalse(seqClassifierFlags0.useCommonWordsFeature);
      assertEquals(0, seqClassifierFlags0.ocrFold);
      assertFalse(seqClassifierFlags0.useEitherSideDisjunctive);
      assertFalse(seqClassifierFlags0.useFloat);
      assertFalse(seqClassifierFlags0.useShapeStrings);
      assertFalse(seqClassifierFlags0.strictGoodCoNLL);
      assertFalse(seqClassifierFlags0.useRad2);
      assertFalse(seqClassifierFlags0.useQuartic);
      assertFalse(seqClassifierFlags0.use2W);
      assertFalse(seqClassifierFlags0.useRad1);
      assertFalse(seqClassifierFlags0.largeChSegFile);
      assertFalse(seqClassifierFlags0.useMoreTags);
      assertFalse(seqClassifierFlags0.useASBCChar2);
      assertEquals((-1), seqClassifierFlags0.wordShape);
      assertEquals(1, seqClassifierFlags0.numTimesRemoveTopN);
      assertFalse(seqClassifierFlags0.useUniformPrior);
      assertFalse(seqClassifierFlags0.useRule2);
      assertEquals(1, seqClassifierFlags0.kBest);
      assertFalse(seqClassifierFlags0.useVB);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions);
      assertEquals(8, seqClassifierFlags0.distSimMaxBits);
      assertEquals(1, seqClassifierFlags0.multiThreadPerceptron);
      assertEquals(1, seqClassifierFlags0.selfTrainIterations);
      assertFalse(seqClassifierFlags0.baseline);
      assertEquals(1, seqClassifierFlags0.numStartLayers);
      assertFalse(seqClassifierFlags0.usePre);
      assertFalse(seqClassifierFlags0.useOWLQN);
      assertFalse(seqClassifierFlags0.secondOrderNonLinear);
      assertFalse(seqClassifierFlags0.tieOutputLayer);
      assertFalse(seqClassifierFlags0.conjoinShapeNGrams);
      assertFalse(seqClassifierFlags0.useRad2b);
      assertFalse(seqClassifierFlags0.strictlyThirdOrder);
      assertFalse(seqClassifierFlags0.useTypeSeqs2);
      assertFalse(seqClassifierFlags0.doAdaptation);
      assertFalse(seqClassifierFlags0.useHeadGov);
      assertFalse(seqClassifierFlags0.useTypeSeqs3);
      assertFalse(seqClassifierFlags0.useLemmas);
      assertEquals(1.0, seqClassifierFlags0.sigma, 0.01D);
      assertEquals(1.0, seqClassifierFlags0.lambdaCH, 0.01D);
      assertFalse(seqClassifierFlags0.blockInitialize);
      assertTrue(seqClassifierFlags0.initWithPosterior);
      assertFalse(seqClassifierFlags0.appendLC);
      assertTrue(seqClassifierFlags0.restrictLabels);
      assertFalse(seqClassifierFlags0.retainEntitySubclassification);
      assertFalse(seqClassifierFlags0.weightByEntropy);
      assertFalse(seqClassifierFlags0.useBigramInTwoClique);
      assertFalse(seqClassifierFlags0.useNeighborNGrams);
      assertFalse(seqClassifierFlags0.useHybrid);
      assertFalse(seqClassifierFlags0.useSum);
      assertFalse(seqClassifierFlags0.subCWGaz);
      assertFalse(seqClassifierFlags0.usePrev);
      assertFalse(seqClassifierFlags0.useAdaDiff);
      assertFalse(seqClassifierFlags0.usePrediction);
      assertFalse(seqClassifierFlags0.usePhraseFeatures);
      assertEquals(0, seqClassifierFlags0.featureCountThreshold);
      assertFalse(seqClassifierFlags0.printWeights);
      assertEquals(0.0, seqClassifierFlags0.l1reg, 0.01D);
      assertFalse(seqClassifierFlags0.useWordnetFeatures);
      assertFalse(seqClassifierFlags0.terminateOnAvgImprovement);
      assertEquals(0.0, seqClassifierFlags0.pctSegmenterScale, 0.01D);
      assertFalse(seqClassifierFlags0.usePKPre1);
      assertEquals(10, seqClassifierFlags0.totalFeatureSlice);
      assertEquals(0, seqClassifierFlags0.scaledSGDMethod);
      assertFalse(seqClassifierFlags0.normalize);
      assertEquals(0, seqClassifierFlags0.removeTopN);
      assertFalse(seqClassifierFlags0.useDict2);
      assertFalse(seqClassifierFlags0.powerAlignProb);
      assertFalse(seqClassifierFlags0.twoStage);
      assertEquals((-1), seqClassifierFlags0.maxNGramLeng);
      assertFalse(seqClassifierFlags0.useLabelSource);
      assertFalse(seqClassifierFlags0.announceObjectBankEntries);
      assertFalse(seqClassifierFlags0.useOnlySeenWeights);
      assertFalse(seqClassifierFlags0.useFeaturesC6gram);
      assertEquals(0, seqClassifierFlags0.interimOutputFreq);
      assertFalse(seqClassifierFlags0.useFREQ);
      assertEquals(0, seqClassifierFlags0.multiThreadGibbs);
      assertFalse(seqClassifierFlags0.useSymWordPairs);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesAll);
      assertFalse(seqClassifierFlags0.useCWSWordFeatures);
      assertFalse(seqClassifierFlags0.iobTags);
      assertEquals(0.1, seqClassifierFlags0.gainSGD, 0.01D);
      assertFalse(seqClassifierFlags0.useNegASBCDict4);
      assertFalse(seqClassifierFlags0.combo);
      assertFalse(seqClassifierFlags0.useNegASBCDict3);
      assertFalse(seqClassifierFlags0.useNegASBCDict2);
      assertEquals(25, seqClassifierFlags0.QNsize);
      assertEquals((-1), seqClassifierFlags0.arbitraryInputLayerSize);
      assertFalse(seqClassifierFlags0.useTopics);
      assertFalse(seqClassifierFlags0.useNoisyLabel);
      assertEquals(1.0, seqClassifierFlags0.alignDDAlpha, 0.01D);
      assertFalse(seqClassifierFlags0.dropoutApprox);
      assertEquals(10, seqClassifierFlags0.totalDataSlice);
      assertEquals(0.1, seqClassifierFlags0.initialGain, 0.01D);
      assertFalse(seqClassifierFlags0.useLastRealWord);
      assertFalse(seqClassifierFlags0.readStdin);
      assertFalse(seqClassifierFlags0.usePrediction2);
      assertEquals(0, seqClassifierFlags0.hybridCutoffIteration);
      assertFalse(seqClassifierFlags0.usePhraseWordTags);
      assertFalse(seqClassifierFlags0.useABSTR);
      assertTrue(seqClassifierFlags0.useQN);
      assertEquals((-1), seqClassifierFlags0.purgeFeatures);
      assertFalse(seqClassifierFlags0.dualDecompAlignment);
      assertFalse(seqClassifierFlags0.groupByFeatureTemplate);
      assertFalse(seqClassifierFlags0.useWEBFreqDict);
      assertEquals(0, seqClassifierFlags0.numTimesPruneFeatures);
      assertFalse(seqClassifierFlags0.useWordn);
      assertFalse(seqClassifierFlags0.useChPos);
      assertFalse(seqClassifierFlags0.useIsDateRange);
      assertFalse(seqClassifierFlags0.sighanPostProcessing);
      assertFalse(seqClassifierFlags0.useNPGovernor);
      assertFalse(seqClassifierFlags0.printNR);
      assertEquals(0.0, seqClassifierFlags0.removeTopNPercent, 0.01D);
      assertFalse(seqClassifierFlags0.addBiasToEmbedding);
      assertFalse(seqClassifierFlags0.doFE);
      assertEquals(1.0E-4, seqClassifierFlags0.tolerance, 0.01D);
      assertFalse(seqClassifierFlags0.testHessSamples);
      assertFalse(seqClassifierFlags0.greekifyNGrams);
      assertFalse(seqClassifierFlags0.addCapitalFeatures);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesBigram);
      assertFalse(seqClassifierFlags0.normalizeTerms);
      assertFalse(seqClassifierFlags0.useHardGE);
      assertTrue(seqClassifierFlags0.useSequences);
      assertFalse(seqClassifierFlags0.useDictleng);
      assertFalse(seqClassifierFlags0.useASBCSuf1);
      assertFalse(seqClassifierFlags0.strictlySecondOrder);
      assertFalse(seqClassifierFlags0.regularizeSoftmaxTieParam);
      assertFalse(seqClassifierFlags0.useMSRChar2);
      assertFalse(seqClassifierFlags0.useGenericFeatures);
      assertEquals(Double.POSITIVE_INFINITY, seqClassifierFlags0.searchGraphPrune, 0.01D);
      assertFalse(seqClassifierFlags0.useKL);
      assertFalse(seqClassifierFlags0.useIfInteger);
      assertFalse(seqClassifierFlags0.useNERPriorBIO);
      assertEquals(0.9, seqClassifierFlags0.selfTrainConfidenceThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.fakeDataset);
      assertFalse(seqClassifierFlags0.useDictASBC2);
      assertFalse(seqClassifierFlags0.useCTBPre1);
      assertFalse(seqClassifierFlags0.useDictHK2);
      assertFalse(seqClassifierFlags0.useNB);
      assertFalse(seqClassifierFlags0.sparseOutputLayer);
      assertFalse(seqClassifierFlags0.transitionEdgeOnly);
      assertFalse(seqClassifierFlags0.bioSubmitOutput);
      assertFalse(seqClassifierFlags0.intern2);
      assertFalse(seqClassifierFlags0.useDisjunctiveShapeInteraction);
      assertFalse(seqClassifierFlags0.randomLopWeights);
      assertFalse(seqClassifierFlags0.useMsr);
      assertEquals(0.0, seqClassifierFlags0.priorLambda, 0.01D);
      assertFalse(seqClassifierFlags0.useParenMatching);
      assertFalse(seqClassifierFlags0.useNextRealWord);
      assertFalse(seqClassifierFlags0.useObservedFeaturesOnly);
      assertFalse(seqClassifierFlags0.use4Clique);
      assertFalse(seqClassifierFlags0.deleteBlankLines);
      assertFalse(seqClassifierFlags0.useBerkeleyCompetitivePosterior);
      assertFalse(seqClassifierFlags0.useObservedSequencesOnly);
      assertFalse(seqClassifierFlags0.useWEB);
      assertFalse(seqClassifierFlags0.useSymTags);
      assertFalse(seqClassifierFlags0.restrictTransitionsTimit);
      assertFalse(seqClassifierFlags0.useNGrams);
      assertEquals(0.0, seqClassifierFlags0.featureDiffThresh, 0.01D);
      assertFalse(seqClassifierFlags0.skipOutputRegularization);
      assertFalse(seqClassifierFlags0.useWord1);
      assertEquals(1, seqClassifierFlags0.featureThreshold);
      assertFalse(seqClassifierFlags0.useWord2);
      assertFalse(seqClassifierFlags0.useWord3);
      assertFalse(seqClassifierFlags0.iobWrapper);
      assertFalse(seqClassifierFlags0.useWord4);
      assertFalse(seqClassifierFlags0.randomLopFeatureSplit);
      assertFalse(seqClassifierFlags0.useMUCFeatures);
      assertFalse(seqClassifierFlags0.useDictCTB2);
      assertFalse(seqClassifierFlags0.useLC);
      assertFalse(seqClassifierFlags0.ocrTrain);
      assertFalse(seqClassifierFlags0.useTrainLexicon);
      assertFalse(seqClassifierFlags0.useMoreAbbr);
      assertFalse(seqClassifierFlags0.useNoisyNonNoisyFeature);
      assertFalse(seqClassifierFlags0.removeBackgroundSingletonFeatures);
      assertFalse(seqClassifierFlags0.useNegDict4);
      assertFalse(seqClassifierFlags0.useNegDict3);
      assertFalse(seqClassifierFlags0.useNegDict2);
      assertEquals(50, seqClassifierFlags0.SGD2QNhessSamples);
      assertFalse(seqClassifierFlags0.useSigmoid);
      assertFalse(seqClassifierFlags0.useMidDotShape);
      assertEquals(0, seqClassifierFlags0.numOfFeatureSlices);
      assertFalse(seqClassifierFlags0.perceptronDebug);
      assertEquals(2, seqClassifierFlags0.CRFwindow);
      assertFalse(seqClassifierFlags0.useWordTag);
      assertFalse(seqClassifierFlags0.useLongSequences);
      assertEquals(1, seqClassifierFlags0.selfTrainWindowSize);
      assertEquals(0.1, seqClassifierFlags0.initRate, 0.01D);
      assertFalse(seqClassifierFlags0.purgeDatasets);
      assertTrue(seqClassifierFlags0.useInternal);
      assertFalse(seqClassifierFlags0.casedDistSim);
      assertFalse(seqClassifierFlags0.useBoundarySequences);
      assertFalse(seqClassifierFlags0.useRobustQN);
      assertEquals(0, seqClassifierFlags0.startEvaluateIters);
      assertFalse(seqClassifierFlags0.useABSTRFreq);
      assertFalse(seqClassifierFlags0.useTypeySequences);
      assertFalse(seqClassifierFlags0.checkNameList);
      assertTrue(seqClassifierFlags0.separateASCIIandRange);
      assertEquals(1.0, seqClassifierFlags0.adaptSigma, 0.01D);
      assertFalse(seqClassifierFlags0.usePk);
      assertEquals((-1), seqClassifierFlags0.tuneSampleSize);
      assertFalse(seqClassifierFlags0.useASBCPre1);
      assertFalse(seqClassifierFlags0.justify);
      assertFalse(seqClassifierFlags0.useCTBSuf1);
      assertFalse(seqClassifierFlags0.useGoodForNamesCpC);
      assertFalse(seqClassifierFlags0.useNumberFeature);
      assertTrue(seqClassifierFlags0.applyNERPenalty);
      assertFalse(seqClassifierFlags0.hardcodeSoftmaxOutputWeights);
      assertEquals(0.0, seqClassifierFlags0.softmaxTieLambda, 0.01D);
      assertEquals(1000, seqClassifierFlags0.wordSegBeamSize);
      assertFalse(seqClassifierFlags0.useUnknown);
      assertTrue(seqClassifierFlags0.useMemoryEvaluator);
      assertEquals(1, seqClassifierFlags0.numDatasetsPerFile);
      assertFalse(seqClassifierFlags0.strictlyZeroethOrder);
      assertFalse(seqClassifierFlags0.printTrainLabels);
      assertFalse(seqClassifierFlags0.noMidNGrams);
      assertFalse(seqClassifierFlags0.dehyphenateNGrams);
      assertFalse(seqClassifierFlags0.useBeginSent);
      assertFalse(seqClassifierFlags0.useAcqPrior);
      assertFalse(seqClassifierFlags0.useEntityRule);
      assertFalse(seqClassifierFlags0.useDisjShape);
      assertEquals(4, seqClassifierFlags0.disjunctionWidth);
      assertFalse(seqClassifierFlags0.outputIterationsToFile);
      assertFalse(seqClassifierFlags0.useUnicodeBlock);
      assertFalse(seqClassifierFlags0.useSGDtoQN);
      assertEquals(1, seqClassifierFlags0.numRuns);
      assertEquals(1, seqClassifierFlags0.terminateOnEvalImprovementNumOfEpoch);
      assertFalse(seqClassifierFlags0.useGazettes);
      assertFalse(seqClassifierFlags0.timitDatum);
      assertFalse(seqClassifierFlags0.usePKChar2);
      assertFalse(seqClassifierFlags0.useRadical);
      assertTrue(seqClassifierFlags0.initViterbi);
      assertFalse(seqClassifierFlags0.useShapeStrings3);
      assertFalse(seqClassifierFlags0.useDisjunctive);
      assertFalse(seqClassifierFlags0.useShapeStrings1);
      assertFalse(seqClassifierFlags0.useACR);
      assertFalse(seqClassifierFlags0.useShapeStrings5);
      assertFalse(seqClassifierFlags0.useShapeStrings4);
      assertFalse(seqClassifierFlags0.lazyUpdate);
      assertEquals(1, seqClassifierFlags0.CRForder);
      assertEquals(0.0, seqClassifierFlags0.annealingRate, 0.01D);
      assertFalse(seqClassifierFlags0.useSGD);
      assertEquals(1, seqClassifierFlags0.multiThreadGrad);
      assertFalse(seqClassifierFlags0.doGibbs);
      assertFalse(seqClassifierFlags0.useAs);
      assertEquals(0, seqClassifierFlags0.multiThreadClassifier);
      assertFalse(seqClassifierFlags0.usePosition);
      assertFalse(seqClassifierFlags0.useWordShapeGaz);
      assertFalse(seqClassifierFlags0.printLabelValue);
      assertFalse(seqClassifierFlags0.useHKSuf1);
      assertEquals(1.0, seqClassifierFlags0.randomizedRatio, 0.01D);
      assertEquals(0, seqClassifierFlags0.evaluateIters);
      assertFalse(seqClassifierFlags0.pctSegmenterLenAdjust);
      assertFalse(seqClassifierFlags0.checkGradient);
      assertEquals(1, seqClassifierFlags0.numLopExpert);
      assertFalse(seqClassifierFlags0.useFeaturesC4gram);
      assertEquals(0, seqClassifierFlags0.dualDecompMaxItr);
      assertFalse(seqClassifierFlags0.useCTBChar2);
      assertFalse(seqClassifierFlags0.nonLinearCRF);
      assertFalse(seqClassifierFlags0.keepEnglishWhitespaces);
      assertFalse(seqClassifierFlags0.normalizeTimex);
      assertFalse(seqClassifierFlags0.useTaggySequences);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSize, 0.01D);
      assertFalse(seqClassifierFlags0.useFilter);
      assertFalse(seqClassifierFlags0.useSentenceNumber);
      assertFalse(seqClassifierFlags0.useTitle);
      assertEquals(3, seqClassifierFlags0.charHalfWindow);
      assertFalse(seqClassifierFlags0.useWordPairs);
      assertEquals(0, seqClassifierFlags0.numOfSlices);
      assertFalse(seqClassifierFlags0.useAbbr);
      assertFalse(seqClassifierFlags0.groupByOutputClass);
      assertEquals(0, seqClassifierFlags0.nerSkipFirstK);
      assertFalse(seqClassifierFlags0.useProtoFeatures);
      assertEquals(0.01, seqClassifierFlags0.epsilon, 0.01D);
      assertFalse(seqClassifierFlags0.learnENBasedOnCH);
      assertFalse(seqClassifierFlags0.useGEforSup);
      assertFalse(seqClassifierFlags0.useHk);
      assertFalse(seqClassifierFlags0.useGENIA);
      assertFalse(seqClassifierFlags0.useCRFforUnsup);
      assertEquals(15, seqClassifierFlags0.stochasticBatchSize);
      assertFalse(seqClassifierFlags0.useYetMoreCpCShapes);
      assertTrue(seqClassifierFlags0.learnCHBasedOnEN);
      assertEquals(0, seqClassifierFlags0.maxRight);
      assertFalse(seqClassifierFlags0.includeFullCRFInLOP);
      assertEquals((-1), seqClassifierFlags0.SGDPasses);
      assertFalse(seqClassifierFlags0.useEntityTypeSequences);
      assertTrue(seqClassifierFlags0.averagePerceptron);
      assertFalse(seqClassifierFlags0.testObjFunction);
      assertFalse(seqClassifierFlags0.useOccurrencePatterns);
      assertFalse(seqClassifierFlags0.useTags);
      assertEquals(0, seqClassifierFlags0.maxDocSize);
      assertFalse(seqClassifierFlags0.useSegmentation);
      assertFalse(seqClassifierFlags0.useAbbr1);
      assertEquals(0.0, seqClassifierFlags0.priorAlpha, 0.01D);
      assertFalse(seqClassifierFlags0.removeStrictGoodCoNLLDuplicates);
      assertFalse(seqClassifierFlags0.useNegCTBDict2);
      assertFalse(seqClassifierFlags0.useNegCTBDict3);
      assertFalse(seqClassifierFlags0.useNegCTBDict4);
      assertFalse(seqClassifierFlags0.useBilingualNERPrior);
      assertFalse(seqClassifierFlags0.numberEquivalenceDistSim);
      assertFalse(seqClassifierFlags0.useNegHKDict4);
      assertFalse(seqClassifierFlags0.useNegHKDict3);
      assertFalse(seqClassifierFlags0.keepAllWhitespaces);
      assertFalse(seqClassifierFlags0.factorInBiEdgePotential);
      assertFalse(seqClassifierFlags0.useNegHKDict2);
      assertFalse(seqClassifierFlags0.useBagOfWords);
      assertFalse(seqClassifierFlags0.evaluateBackground);
      assertFalse(seqClassifierFlags0.useChunkySequences);
      assertFalse(seqClassifierFlags0.useYear);
      assertFalse(seqClassifierFlags0.prependEmbedding);
      assertFalse(seqClassifierFlags0.useOrdinal);
      assertFalse(seqClassifierFlags0.useWideDisjunctive);
      assertEquals(0.0, seqClassifierFlags0.alignmentPruneThreshold, 0.01D);
      assertEquals(100, seqClassifierFlags0.printClassifierParam);
      assertEquals((-1), seqClassifierFlags0.samplingSpeedUpThreshold);
      assertFalse(seqClassifierFlags0.useReverse);
      assertFalse(seqClassifierFlags0.useSeenFeaturesOnly);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions2);
      assertFalse(seqClassifierFlags0.matchNERIncentive);
      assertFalse(seqClassifierFlags0.useEitherSideWord);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions3);
      assertFalse(seqClassifierFlags0.tuneSGD);
      assertEquals(2, jSONObject0.length());
      assertEquals("", seqClassifierFlags0.toString());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("Viterbi", 1.0);
      assertEquals((-1), seqClassifierFlags0.maxIterations);
      assertFalse(seqClassifierFlags0.lowercaseNGrams);
      assertFalse(seqClassifierFlags0.pctSegmenterScaleByCRF);
      assertFalse(seqClassifierFlags0.useRandomSeed);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions3);
      assertFalse(seqClassifierFlags0.dampDDStepSizeWithAlignmentProb);
      assertFalse(seqClassifierFlags0.printFirstOrderProbs);
      assertFalse(seqClassifierFlags0.useKBest);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSizeAlignment, 0.01D);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions2);
      assertFalse(seqClassifierFlags0.useHKChar2);
      assertEquals((-1), seqClassifierFlags0.labelDictionaryCutoff);
      assertFalse(seqClassifierFlags0.alternateTraining);
      assertFalse(seqClassifierFlags0.powerAlignProbAsAddition);
      assertFalse(seqClassifierFlags0.estimateInitial);
      assertFalse(seqClassifierFlags0.printXML);
      assertFalse(seqClassifierFlags0.useEntityTypes);
      assertFalse(seqClassifierFlags0.printProbs);
      assertFalse(seqClassifierFlags0.intern);
      assertFalse(seqClassifierFlags0.useDistSim);
      assertTrue(seqClassifierFlags0.useOutputLayer);
      assertFalse(seqClassifierFlags0.useRule);
      assertFalse(seqClassifierFlags0.useTaggySequencesShapeInteraction);
      assertFalse(seqClassifierFlags0.lowerNewgeneThreshold);
      assertFalse(seqClassifierFlags0.useUnicodeType4gram);
      assertFalse(seqClassifierFlags0.useABGENE);
      assertFalse(seqClassifierFlags0.groupByHiddenUnit);
      assertFalse(seqClassifierFlags0.usePhraseWordSpecialTags);
      assertFalse(seqClassifierFlags0.useExtraTaggySequences);
      assertFalse(seqClassifierFlags0.splitOnHead);
      assertFalse(seqClassifierFlags0.booleanFeatures);
      assertEquals((-1), seqClassifierFlags0.numHiddenUnits);
      assertEquals(Integer.MAX_VALUE, seqClassifierFlags0.printFeaturesUpto);
      assertFalse(seqClassifierFlags0.useFeaturesCpC4gram);
      assertFalse(seqClassifierFlags0.augmentedDateChars);
      assertFalse(seqClassifierFlags0.useAltGazFeatures);
      assertFalse(seqClassifierFlags0.useSemPrior);
      assertEquals(1, seqClassifierFlags0.nerSlowerTimes);
      assertFalse(seqClassifierFlags0.doFeatureDiscovery);
      assertFalse(seqClassifierFlags0.suppressTestDebug);
      assertTrue(seqClassifierFlags0.splitDocuments);
      assertFalse(seqClassifierFlags0.useInPlaceSGD);
      assertFalse(seqClassifierFlags0.useDictPK2);
      assertTrue(seqClassifierFlags0.useExternal);
      assertFalse(seqClassifierFlags0.dontExtendTaggy);
      assertTrue(seqClassifierFlags0.useDenero);
      assertEquals(10, seqClassifierFlags0.wideDisjunctionWidth);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions3);
      assertFalse(seqClassifierFlags0.usePKSuf1);
      assertFalse(seqClassifierFlags0.factorInAlignmentProb);
      assertTrue(seqClassifierFlags0.useKnownLCWords);
      assertEquals(2, seqClassifierFlags0.maxLeft);
      assertFalse(seqClassifierFlags0.dualDecompDebug);
      assertFalse(seqClassifierFlags0.useClassFeature);
      assertFalse(seqClassifierFlags0.strictlyFirstOrder);
      assertFalse(seqClassifierFlags0.saveFeatureIndexToDisk);
      assertEquals(1.0, seqClassifierFlags0.lambdaEN, 0.01D);
      assertFalse(seqClassifierFlags0.useNextVB);
      assertFalse(seqClassifierFlags0.useMoreGazFeatures);
      assertFalse(seqClassifierFlags0.useBig5);
      assertFalse(seqClassifierFlags0.useTOK);
      assertFalse(seqClassifierFlags0.useUnicodeType);
      assertFalse(seqClassifierFlags0.printFactorTable);
      assertFalse(seqClassifierFlags0.useNegPKDict3);
      assertFalse(seqClassifierFlags0.useNegPKDict2);
      assertFalse(seqClassifierFlags0.useNegPKDict4);
      assertEquals(0, seqClassifierFlags0.featureCountThresh);
      assertFalse(seqClassifierFlags0.useEmbedding);
      assertFalse(seqClassifierFlags0.useNextSequences);
      assertFalse(seqClassifierFlags0.cleanGazette);
      assertEquals(0.5, seqClassifierFlags0.alignmentDecodeThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useMinimalAbbr1);
      assertFalse(seqClassifierFlags0.useGazFeatures);
      assertFalse(seqClassifierFlags0.sloppyGazette);
      assertTrue(seqClassifierFlags0.biAlignmentPriorIsPMI);
      assertFalse(seqClassifierFlags0.geDebug);
      assertFalse(seqClassifierFlags0.usePhraseWords);
      assertFalse(seqClassifierFlags0.useHuber);
      assertFalse(seqClassifierFlags0.useBerkeleyAlignerForViterbi);
      assertEquals(0.001, seqClassifierFlags0.adaGradEps, 0.01D);
      assertFalse(seqClassifierFlags0.useTypeSeqs);
      assertFalse(seqClassifierFlags0.useStochasticQN);
      assertEquals((-1), seqClassifierFlags0.QNPasses);
      assertTrue(seqClassifierFlags0.useHiddenLayer);
      assertFalse(seqClassifierFlags0.useChunks);
      assertFalse(seqClassifierFlags0.useSMD);
      assertFalse(seqClassifierFlags0.initWithNERPosterior);
      assertFalse(seqClassifierFlags0.useFeaturesCpC5gram);
      assertFalse(seqClassifierFlags0.useUnicodeType5gram);
      assertEquals(1.0, seqClassifierFlags0.unsupDropoutScale, 0.01D);
      assertFalse(seqClassifierFlags0.selfTest);
      assertFalse(seqClassifierFlags0.useLemmaAsWord);
      assertFalse(seqClassifierFlags0.gradientDebug);
      assertFalse(seqClassifierFlags0.mergeTags);
      assertFalse(seqClassifierFlags0.useNPHead);
      assertFalse(seqClassifierFlags0.useNERPrior);
      assertFalse(seqClassifierFlags0.makeConsistent);
      assertFalse(seqClassifierFlags0.verboseForTrueCasing);
      assertEquals(100, seqClassifierFlags0.numSamples);
      assertFalse(seqClassifierFlags0.useAdaDelta);
      assertTrue(seqClassifierFlags0.keepOBInMemory);
      assertFalse(seqClassifierFlags0.useHKPre1);
      assertFalse(seqClassifierFlags0.useAdaGradFOBOS);
      assertEquals(0.95, seqClassifierFlags0.adaDeltaRho, 0.01D);
      assertEquals(1, seqClassifierFlags0.bisequencePriorType);
      assertFalse(seqClassifierFlags0.useANTE);
      assertFalse(seqClassifierFlags0.groupByInput);
      assertFalse(seqClassifierFlags0.verboseMode);
      assertFalse(seqClassifierFlags0.useFeaturesC5gram);
      assertEquals(8, seqClassifierFlags0.maxAllowedChromaticSize);
      assertEquals(0.0, seqClassifierFlags0.newgeneThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.dualDecompNotBIO);
      assertFalse(seqClassifierFlags0.useReverseAffix);
      assertFalse(seqClassifierFlags0.evaluateTrain);
      assertFalse(seqClassifierFlags0.memoryThrift);
      assertFalse(seqClassifierFlags0.useNext);
      assertFalse(seqClassifierFlags0.usePrevNextLemmas);
      assertFalse(seqClassifierFlags0.useChromaticSampling);
      assertFalse(seqClassifierFlags0.testVariance);
      assertFalse(seqClassifierFlags0.useGazettePhrases);
      assertEquals(1, seqClassifierFlags0.endFold);
      assertEquals(25, seqClassifierFlags0.QNsize2);
      assertFalse(seqClassifierFlags0.cacheNGrams);
      assertEquals(1.0, seqClassifierFlags0.dropoutScale, 0.01D);
      assertFalse(seqClassifierFlags0.expandMidDot);
      assertFalse(seqClassifierFlags0.keepEmptySentences);
      assertFalse(seqClassifierFlags0.noNeighborConstraints);
      assertFalse(seqClassifierFlags0.useOutDict2);
      assertFalse(seqClassifierFlags0.softmaxOutputLayer);
      assertFalse(seqClassifierFlags0.useCorefFeatures);
      assertFalse(seqClassifierFlags0.useSuf);
      assertEquals(0, seqClassifierFlags0.maxQNItr);
      assertFalse(seqClassifierFlags0.terminateOnEvalImprovement);
      assertFalse(seqClassifierFlags0.backpropLopTraining);
      assertFalse(seqClassifierFlags0.suppressMidDotPostprocessing);
      assertTrue(seqClassifierFlags0.useCWSFeatures);
      assertFalse(seqClassifierFlags0.useShapeConjunctions);
      assertFalse(seqClassifierFlags0.useURLSequences);
      assertEquals(0.0, seqClassifierFlags0.dropoutRate, 0.01D);
      assertFalse(seqClassifierFlags0.noEdgeFeature);
      assertFalse(seqClassifierFlags0.useDualDecomp);
      assertEquals(0.0, seqClassifierFlags0.featureWeightThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useFeaturesCpC6gram);
      assertFalse(seqClassifierFlags0.useFirstWord);
      assertFalse(seqClassifierFlags0.useScaledSGD);
      assertFalse(seqClassifierFlags0.usePrevSequences);
      assertEquals(1, seqClassifierFlags0.numFolds);
      assertFalse(seqClassifierFlags0.useMinimalAbbr);
      assertEquals(30, seqClassifierFlags0.beamSize);
      assertFalse(seqClassifierFlags0.useIsURL);
      assertEquals(1, seqClassifierFlags0.startFold);
      assertFalse(seqClassifierFlags0.useSequentialScanSampling);
      assertTrue(seqClassifierFlags0.useWord);
      assertTrue(seqClassifierFlags0.useViterbi);
      assertFalse(seqClassifierFlags0.dump);
      assertTrue(seqClassifierFlags0.includeC2EViterbi);
      assertFalse(seqClassifierFlags0.usePrevVB);
      assertFalse(seqClassifierFlags0.useABSTRFreqDict);
      assertFalse(seqClassifierFlags0.useCommonWordsFeature);
      assertEquals(0, seqClassifierFlags0.ocrFold);
      assertFalse(seqClassifierFlags0.useEitherSideDisjunctive);
      assertFalse(seqClassifierFlags0.useFloat);
      assertFalse(seqClassifierFlags0.useShapeStrings);
      assertFalse(seqClassifierFlags0.strictGoodCoNLL);
      assertFalse(seqClassifierFlags0.useRad2);
      assertFalse(seqClassifierFlags0.useQuartic);
      assertFalse(seqClassifierFlags0.use2W);
      assertFalse(seqClassifierFlags0.useRad1);
      assertFalse(seqClassifierFlags0.largeChSegFile);
      assertFalse(seqClassifierFlags0.useMoreTags);
      assertFalse(seqClassifierFlags0.useASBCChar2);
      assertEquals((-1), seqClassifierFlags0.wordShape);
      assertEquals(1, seqClassifierFlags0.numTimesRemoveTopN);
      assertFalse(seqClassifierFlags0.useUniformPrior);
      assertFalse(seqClassifierFlags0.useRule2);
      assertEquals(1, seqClassifierFlags0.kBest);
      assertFalse(seqClassifierFlags0.useVB);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions);
      assertEquals(8, seqClassifierFlags0.distSimMaxBits);
      assertEquals(1, seqClassifierFlags0.multiThreadPerceptron);
      assertEquals(1, seqClassifierFlags0.selfTrainIterations);
      assertFalse(seqClassifierFlags0.baseline);
      assertEquals(1, seqClassifierFlags0.numStartLayers);
      assertFalse(seqClassifierFlags0.usePre);
      assertFalse(seqClassifierFlags0.useOWLQN);
      assertFalse(seqClassifierFlags0.secondOrderNonLinear);
      assertFalse(seqClassifierFlags0.tieOutputLayer);
      assertFalse(seqClassifierFlags0.conjoinShapeNGrams);
      assertFalse(seqClassifierFlags0.useRad2b);
      assertFalse(seqClassifierFlags0.strictlyThirdOrder);
      assertFalse(seqClassifierFlags0.useTypeSeqs2);
      assertFalse(seqClassifierFlags0.doAdaptation);
      assertFalse(seqClassifierFlags0.useHeadGov);
      assertFalse(seqClassifierFlags0.useTypeSeqs3);
      assertFalse(seqClassifierFlags0.useLemmas);
      assertEquals(1.0, seqClassifierFlags0.sigma, 0.01D);
      assertEquals(1.0, seqClassifierFlags0.lambdaCH, 0.01D);
      assertFalse(seqClassifierFlags0.blockInitialize);
      assertTrue(seqClassifierFlags0.initWithPosterior);
      assertFalse(seqClassifierFlags0.appendLC);
      assertTrue(seqClassifierFlags0.restrictLabels);
      assertFalse(seqClassifierFlags0.retainEntitySubclassification);
      assertFalse(seqClassifierFlags0.weightByEntropy);
      assertFalse(seqClassifierFlags0.useBigramInTwoClique);
      assertFalse(seqClassifierFlags0.useNeighborNGrams);
      assertFalse(seqClassifierFlags0.useHybrid);
      assertFalse(seqClassifierFlags0.useSum);
      assertFalse(seqClassifierFlags0.subCWGaz);
      assertFalse(seqClassifierFlags0.usePrev);
      assertFalse(seqClassifierFlags0.useAdaDiff);
      assertFalse(seqClassifierFlags0.usePrediction);
      assertFalse(seqClassifierFlags0.usePhraseFeatures);
      assertEquals(0, seqClassifierFlags0.featureCountThreshold);
      assertFalse(seqClassifierFlags0.printWeights);
      assertEquals(0.0, seqClassifierFlags0.l1reg, 0.01D);
      assertFalse(seqClassifierFlags0.useWordnetFeatures);
      assertFalse(seqClassifierFlags0.terminateOnAvgImprovement);
      assertEquals(0.0, seqClassifierFlags0.pctSegmenterScale, 0.01D);
      assertFalse(seqClassifierFlags0.usePKPre1);
      assertEquals(10, seqClassifierFlags0.totalFeatureSlice);
      assertEquals(0, seqClassifierFlags0.scaledSGDMethod);
      assertFalse(seqClassifierFlags0.normalize);
      assertEquals(0, seqClassifierFlags0.removeTopN);
      assertFalse(seqClassifierFlags0.useDict2);
      assertFalse(seqClassifierFlags0.powerAlignProb);
      assertFalse(seqClassifierFlags0.twoStage);
      assertEquals((-1), seqClassifierFlags0.maxNGramLeng);
      assertFalse(seqClassifierFlags0.useLabelSource);
      assertFalse(seqClassifierFlags0.announceObjectBankEntries);
      assertFalse(seqClassifierFlags0.useOnlySeenWeights);
      assertFalse(seqClassifierFlags0.useFeaturesC6gram);
      assertEquals(0, seqClassifierFlags0.interimOutputFreq);
      assertFalse(seqClassifierFlags0.useFREQ);
      assertEquals(0, seqClassifierFlags0.multiThreadGibbs);
      assertFalse(seqClassifierFlags0.useSymWordPairs);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesAll);
      assertFalse(seqClassifierFlags0.useCWSWordFeatures);
      assertFalse(seqClassifierFlags0.iobTags);
      assertEquals(0.1, seqClassifierFlags0.gainSGD, 0.01D);
      assertFalse(seqClassifierFlags0.useNegASBCDict4);
      assertFalse(seqClassifierFlags0.combo);
      assertFalse(seqClassifierFlags0.useNegASBCDict3);
      assertFalse(seqClassifierFlags0.useNegASBCDict2);
      assertEquals(25, seqClassifierFlags0.QNsize);
      assertEquals((-1), seqClassifierFlags0.arbitraryInputLayerSize);
      assertFalse(seqClassifierFlags0.useTopics);
      assertFalse(seqClassifierFlags0.useNoisyLabel);
      assertEquals(1.0, seqClassifierFlags0.alignDDAlpha, 0.01D);
      assertFalse(seqClassifierFlags0.dropoutApprox);
      assertEquals(10, seqClassifierFlags0.totalDataSlice);
      assertEquals(0.1, seqClassifierFlags0.initialGain, 0.01D);
      assertFalse(seqClassifierFlags0.useLastRealWord);
      assertFalse(seqClassifierFlags0.readStdin);
      assertFalse(seqClassifierFlags0.usePrediction2);
      assertEquals(0, seqClassifierFlags0.hybridCutoffIteration);
      assertFalse(seqClassifierFlags0.usePhraseWordTags);
      assertFalse(seqClassifierFlags0.useABSTR);
      assertTrue(seqClassifierFlags0.useQN);
      assertEquals((-1), seqClassifierFlags0.purgeFeatures);
      assertFalse(seqClassifierFlags0.dualDecompAlignment);
      assertFalse(seqClassifierFlags0.groupByFeatureTemplate);
      assertFalse(seqClassifierFlags0.useWEBFreqDict);
      assertEquals(0, seqClassifierFlags0.numTimesPruneFeatures);
      assertFalse(seqClassifierFlags0.useWordn);
      assertFalse(seqClassifierFlags0.useChPos);
      assertFalse(seqClassifierFlags0.useIsDateRange);
      assertFalse(seqClassifierFlags0.sighanPostProcessing);
      assertFalse(seqClassifierFlags0.useNPGovernor);
      assertFalse(seqClassifierFlags0.printNR);
      assertEquals(0.0, seqClassifierFlags0.removeTopNPercent, 0.01D);
      assertFalse(seqClassifierFlags0.addBiasToEmbedding);
      assertFalse(seqClassifierFlags0.doFE);
      assertEquals(1.0E-4, seqClassifierFlags0.tolerance, 0.01D);
      assertFalse(seqClassifierFlags0.testHessSamples);
      assertFalse(seqClassifierFlags0.greekifyNGrams);
      assertFalse(seqClassifierFlags0.addCapitalFeatures);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesBigram);
      assertFalse(seqClassifierFlags0.normalizeTerms);
      assertFalse(seqClassifierFlags0.useHardGE);
      assertTrue(seqClassifierFlags0.useSequences);
      assertFalse(seqClassifierFlags0.useDictleng);
      assertFalse(seqClassifierFlags0.useASBCSuf1);
      assertFalse(seqClassifierFlags0.strictlySecondOrder);
      assertFalse(seqClassifierFlags0.regularizeSoftmaxTieParam);
      assertFalse(seqClassifierFlags0.useMSRChar2);
      assertFalse(seqClassifierFlags0.useGenericFeatures);
      assertEquals(Double.POSITIVE_INFINITY, seqClassifierFlags0.searchGraphPrune, 0.01D);
      assertFalse(seqClassifierFlags0.useKL);
      assertFalse(seqClassifierFlags0.useIfInteger);
      assertFalse(seqClassifierFlags0.useNERPriorBIO);
      assertEquals(0.9, seqClassifierFlags0.selfTrainConfidenceThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.fakeDataset);
      assertFalse(seqClassifierFlags0.useDictASBC2);
      assertFalse(seqClassifierFlags0.useCTBPre1);
      assertFalse(seqClassifierFlags0.useDictHK2);
      assertFalse(seqClassifierFlags0.useNB);
      assertFalse(seqClassifierFlags0.sparseOutputLayer);
      assertFalse(seqClassifierFlags0.transitionEdgeOnly);
      assertFalse(seqClassifierFlags0.bioSubmitOutput);
      assertFalse(seqClassifierFlags0.intern2);
      assertFalse(seqClassifierFlags0.useDisjunctiveShapeInteraction);
      assertFalse(seqClassifierFlags0.randomLopWeights);
      assertFalse(seqClassifierFlags0.useMsr);
      assertEquals(0.0, seqClassifierFlags0.priorLambda, 0.01D);
      assertFalse(seqClassifierFlags0.useParenMatching);
      assertFalse(seqClassifierFlags0.useNextRealWord);
      assertFalse(seqClassifierFlags0.useObservedFeaturesOnly);
      assertFalse(seqClassifierFlags0.use4Clique);
      assertFalse(seqClassifierFlags0.deleteBlankLines);
      assertFalse(seqClassifierFlags0.useBerkeleyCompetitivePosterior);
      assertFalse(seqClassifierFlags0.useObservedSequencesOnly);
      assertFalse(seqClassifierFlags0.useWEB);
      assertFalse(seqClassifierFlags0.useSymTags);
      assertFalse(seqClassifierFlags0.restrictTransitionsTimit);
      assertFalse(seqClassifierFlags0.useNGrams);
      assertEquals(0.0, seqClassifierFlags0.featureDiffThresh, 0.01D);
      assertFalse(seqClassifierFlags0.skipOutputRegularization);
      assertFalse(seqClassifierFlags0.useWord1);
      assertEquals(1, seqClassifierFlags0.featureThreshold);
      assertFalse(seqClassifierFlags0.useWord2);
      assertFalse(seqClassifierFlags0.useWord3);
      assertFalse(seqClassifierFlags0.iobWrapper);
      assertFalse(seqClassifierFlags0.useWord4);
      assertFalse(seqClassifierFlags0.randomLopFeatureSplit);
      assertFalse(seqClassifierFlags0.useMUCFeatures);
      assertFalse(seqClassifierFlags0.useDictCTB2);
      assertFalse(seqClassifierFlags0.useLC);
      assertFalse(seqClassifierFlags0.ocrTrain);
      assertFalse(seqClassifierFlags0.useTrainLexicon);
      assertFalse(seqClassifierFlags0.useMoreAbbr);
      assertFalse(seqClassifierFlags0.useNoisyNonNoisyFeature);
      assertFalse(seqClassifierFlags0.removeBackgroundSingletonFeatures);
      assertFalse(seqClassifierFlags0.useNegDict4);
      assertFalse(seqClassifierFlags0.useNegDict3);
      assertFalse(seqClassifierFlags0.useNegDict2);
      assertEquals(50, seqClassifierFlags0.SGD2QNhessSamples);
      assertFalse(seqClassifierFlags0.useSigmoid);
      assertFalse(seqClassifierFlags0.useMidDotShape);
      assertEquals(0, seqClassifierFlags0.numOfFeatureSlices);
      assertFalse(seqClassifierFlags0.perceptronDebug);
      assertEquals(2, seqClassifierFlags0.CRFwindow);
      assertFalse(seqClassifierFlags0.useWordTag);
      assertFalse(seqClassifierFlags0.useLongSequences);
      assertEquals(1, seqClassifierFlags0.selfTrainWindowSize);
      assertEquals(0.1, seqClassifierFlags0.initRate, 0.01D);
      assertFalse(seqClassifierFlags0.purgeDatasets);
      assertTrue(seqClassifierFlags0.useInternal);
      assertFalse(seqClassifierFlags0.casedDistSim);
      assertFalse(seqClassifierFlags0.useBoundarySequences);
      assertFalse(seqClassifierFlags0.useRobustQN);
      assertEquals(0, seqClassifierFlags0.startEvaluateIters);
      assertFalse(seqClassifierFlags0.useABSTRFreq);
      assertFalse(seqClassifierFlags0.useTypeySequences);
      assertFalse(seqClassifierFlags0.checkNameList);
      assertTrue(seqClassifierFlags0.separateASCIIandRange);
      assertEquals(1.0, seqClassifierFlags0.adaptSigma, 0.01D);
      assertFalse(seqClassifierFlags0.usePk);
      assertEquals((-1), seqClassifierFlags0.tuneSampleSize);
      assertFalse(seqClassifierFlags0.useASBCPre1);
      assertFalse(seqClassifierFlags0.justify);
      assertFalse(seqClassifierFlags0.useCTBSuf1);
      assertFalse(seqClassifierFlags0.useGoodForNamesCpC);
      assertFalse(seqClassifierFlags0.useNumberFeature);
      assertTrue(seqClassifierFlags0.applyNERPenalty);
      assertFalse(seqClassifierFlags0.hardcodeSoftmaxOutputWeights);
      assertEquals(0.0, seqClassifierFlags0.softmaxTieLambda, 0.01D);
      assertEquals(1000, seqClassifierFlags0.wordSegBeamSize);
      assertFalse(seqClassifierFlags0.useUnknown);
      assertTrue(seqClassifierFlags0.useMemoryEvaluator);
      assertEquals(1, seqClassifierFlags0.numDatasetsPerFile);
      assertFalse(seqClassifierFlags0.strictlyZeroethOrder);
      assertFalse(seqClassifierFlags0.printTrainLabels);
      assertFalse(seqClassifierFlags0.noMidNGrams);
      assertFalse(seqClassifierFlags0.dehyphenateNGrams);
      assertFalse(seqClassifierFlags0.useBeginSent);
      assertFalse(seqClassifierFlags0.useAcqPrior);
      assertFalse(seqClassifierFlags0.useEntityRule);
      assertFalse(seqClassifierFlags0.useDisjShape);
      assertEquals(4, seqClassifierFlags0.disjunctionWidth);
      assertFalse(seqClassifierFlags0.outputIterationsToFile);
      assertFalse(seqClassifierFlags0.useUnicodeBlock);
      assertFalse(seqClassifierFlags0.useSGDtoQN);
      assertEquals(1, seqClassifierFlags0.numRuns);
      assertEquals(1, seqClassifierFlags0.terminateOnEvalImprovementNumOfEpoch);
      assertFalse(seqClassifierFlags0.useGazettes);
      assertFalse(seqClassifierFlags0.timitDatum);
      assertFalse(seqClassifierFlags0.usePKChar2);
      assertFalse(seqClassifierFlags0.useRadical);
      assertTrue(seqClassifierFlags0.initViterbi);
      assertFalse(seqClassifierFlags0.useShapeStrings3);
      assertFalse(seqClassifierFlags0.useDisjunctive);
      assertFalse(seqClassifierFlags0.useShapeStrings1);
      assertFalse(seqClassifierFlags0.useACR);
      assertFalse(seqClassifierFlags0.useShapeStrings5);
      assertFalse(seqClassifierFlags0.useShapeStrings4);
      assertFalse(seqClassifierFlags0.lazyUpdate);
      assertEquals(1, seqClassifierFlags0.CRForder);
      assertEquals(0.0, seqClassifierFlags0.annealingRate, 0.01D);
      assertFalse(seqClassifierFlags0.useSGD);
      assertEquals(1, seqClassifierFlags0.multiThreadGrad);
      assertFalse(seqClassifierFlags0.doGibbs);
      assertFalse(seqClassifierFlags0.useAs);
      assertEquals(0, seqClassifierFlags0.multiThreadClassifier);
      assertFalse(seqClassifierFlags0.usePosition);
      assertFalse(seqClassifierFlags0.useWordShapeGaz);
      assertFalse(seqClassifierFlags0.printLabelValue);
      assertFalse(seqClassifierFlags0.useHKSuf1);
      assertEquals(1.0, seqClassifierFlags0.randomizedRatio, 0.01D);
      assertEquals(0, seqClassifierFlags0.evaluateIters);
      assertFalse(seqClassifierFlags0.pctSegmenterLenAdjust);
      assertFalse(seqClassifierFlags0.checkGradient);
      assertEquals(1, seqClassifierFlags0.numLopExpert);
      assertFalse(seqClassifierFlags0.useFeaturesC4gram);
      assertEquals(0, seqClassifierFlags0.dualDecompMaxItr);
      assertFalse(seqClassifierFlags0.useCTBChar2);
      assertFalse(seqClassifierFlags0.nonLinearCRF);
      assertFalse(seqClassifierFlags0.keepEnglishWhitespaces);
      assertFalse(seqClassifierFlags0.normalizeTimex);
      assertFalse(seqClassifierFlags0.useTaggySequences);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSize, 0.01D);
      assertFalse(seqClassifierFlags0.useFilter);
      assertFalse(seqClassifierFlags0.useSentenceNumber);
      assertFalse(seqClassifierFlags0.useTitle);
      assertEquals(3, seqClassifierFlags0.charHalfWindow);
      assertFalse(seqClassifierFlags0.useWordPairs);
      assertEquals(0, seqClassifierFlags0.numOfSlices);
      assertFalse(seqClassifierFlags0.useAbbr);
      assertFalse(seqClassifierFlags0.groupByOutputClass);
      assertEquals(0, seqClassifierFlags0.nerSkipFirstK);
      assertFalse(seqClassifierFlags0.useProtoFeatures);
      assertEquals(0.01, seqClassifierFlags0.epsilon, 0.01D);
      assertFalse(seqClassifierFlags0.learnENBasedOnCH);
      assertFalse(seqClassifierFlags0.useGEforSup);
      assertFalse(seqClassifierFlags0.useHk);
      assertFalse(seqClassifierFlags0.useGENIA);
      assertFalse(seqClassifierFlags0.useCRFforUnsup);
      assertEquals(15, seqClassifierFlags0.stochasticBatchSize);
      assertFalse(seqClassifierFlags0.useYetMoreCpCShapes);
      assertTrue(seqClassifierFlags0.learnCHBasedOnEN);
      assertEquals(0, seqClassifierFlags0.maxRight);
      assertFalse(seqClassifierFlags0.includeFullCRFInLOP);
      assertEquals((-1), seqClassifierFlags0.SGDPasses);
      assertFalse(seqClassifierFlags0.useEntityTypeSequences);
      assertTrue(seqClassifierFlags0.averagePerceptron);
      assertFalse(seqClassifierFlags0.testObjFunction);
      assertFalse(seqClassifierFlags0.useOccurrencePatterns);
      assertFalse(seqClassifierFlags0.useTags);
      assertEquals(0, seqClassifierFlags0.maxDocSize);
      assertFalse(seqClassifierFlags0.useSegmentation);
      assertFalse(seqClassifierFlags0.useAbbr1);
      assertEquals(0.0, seqClassifierFlags0.priorAlpha, 0.01D);
      assertFalse(seqClassifierFlags0.removeStrictGoodCoNLLDuplicates);
      assertFalse(seqClassifierFlags0.useNegCTBDict2);
      assertFalse(seqClassifierFlags0.useNegCTBDict3);
      assertFalse(seqClassifierFlags0.useNegCTBDict4);
      assertFalse(seqClassifierFlags0.useBilingualNERPrior);
      assertFalse(seqClassifierFlags0.numberEquivalenceDistSim);
      assertFalse(seqClassifierFlags0.useNegHKDict4);
      assertFalse(seqClassifierFlags0.useNegHKDict3);
      assertFalse(seqClassifierFlags0.keepAllWhitespaces);
      assertFalse(seqClassifierFlags0.factorInBiEdgePotential);
      assertFalse(seqClassifierFlags0.useNegHKDict2);
      assertFalse(seqClassifierFlags0.useBagOfWords);
      assertFalse(seqClassifierFlags0.evaluateBackground);
      assertFalse(seqClassifierFlags0.useChunkySequences);
      assertFalse(seqClassifierFlags0.useYear);
      assertFalse(seqClassifierFlags0.prependEmbedding);
      assertFalse(seqClassifierFlags0.useOrdinal);
      assertFalse(seqClassifierFlags0.useWideDisjunctive);
      assertEquals(0.0, seqClassifierFlags0.alignmentPruneThreshold, 0.01D);
      assertEquals(100, seqClassifierFlags0.printClassifierParam);
      assertEquals((-1), seqClassifierFlags0.samplingSpeedUpThreshold);
      assertFalse(seqClassifierFlags0.useReverse);
      assertFalse(seqClassifierFlags0.useSeenFeaturesOnly);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions2);
      assertFalse(seqClassifierFlags0.matchNERIncentive);
      assertFalse(seqClassifierFlags0.useEitherSideWord);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions3);
      assertFalse(seqClassifierFlags0.tuneSGD);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(3, jSONObject0.length());
      assertEquals("", seqClassifierFlags0.toString());
      assertEquals(3, jSONObject1.length());
      assertNotNull(jSONObject1);
  }

  //Test case number: 49
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.optInt(Ljava/lang/String;I)I: root-Branch
   * Goal 2. wheel.json.JSONObject.optInt(Ljava/lang/String;)I: root-Branch
   */

  @Test
  public void test49()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      int int0 = jSONObject0.optInt("itoSting");
      assertEquals(0, int0);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 50
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I11 Branch 103 IFNE L1190 - false
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I89 Branch 127 IFEQ L1323 - false
   * Goal 3. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I105 Branch 128 IFEQ L1326 - false
   * Goal 4. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I121 Branch 129 IFEQ L1329 - false
   */

  @Test
  public void test50()  throws Throwable  {
      HashMap<HashMap<CoreLabel, Integer>, Byte> hashMap0 = new HashMap<HashMap<CoreLabel, Integer>, Byte>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.append("mvaUwXY", (Object) hashMap0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(jSONObject1);
      
      String string0 = JSONObject.valueToString(jSONObject1, 0, 0);
      assertEquals("{\"mvaUwXY\": [{}]}", string0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(string0);
  }

  //Test case number: 51
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.toString(I)Ljava/lang/String;: root-Branch
   * Goal 2. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I11 Branch 103 IFNE L1190 - true
   * Goal 3. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I41 Branch 104 IF_ICMPNE L1197 - false
   */

  @Test
  public void test51()  throws Throwable  {
      CoreLabelTokenFactory coreLabelTokenFactory0 = new CoreLabelTokenFactory();
      assertNotNull(coreLabelTokenFactory0);
      
      CoreLabel coreLabel0 = coreLabelTokenFactory0.makeToken("Null key.", "Null key.", 0, 0);
      assertNull(coreLabel0.docID());
      assertEquals(0, coreLabel0.beginPosition());
      assertNull(coreLabel0.ner());
      assertNull(coreLabel0.tag());
      assertNull(coreLabel0.category());
      assertEquals(-1, coreLabel0.index());
      assertEquals(-1, coreLabel0.sentIndex());
      assertEquals("Null key.", coreLabel0.value());
      assertEquals(5, coreLabel0.size());
      assertEquals("", coreLabel0.after());
      assertEquals("", coreLabel0.before());
      assertEquals(0, coreLabel0.endPosition());
      assertEquals("Null key.", coreLabel0.word());
      assertEquals("Null key.", coreLabel0.originalText());
      assertNull(coreLabel0.lemma());
      assertEquals(0, coreLabel0.copyCount());
      assertNotNull(coreLabel0);
      
      String[] stringArray0 = new String[11];
      stringArray0[0] = "Null key.";
      JSONObject jSONObject0 = new JSONObject((Object) coreLabelTokenFactory0, stringArray0);
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("Null key.", (Object) coreLabel0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertNull(coreLabel0.docID());
      assertEquals(0, coreLabel0.beginPosition());
      assertNull(coreLabel0.ner());
      assertNull(coreLabel0.tag());
      assertNull(coreLabel0.category());
      assertEquals(-1, coreLabel0.index());
      assertEquals(-1, coreLabel0.sentIndex());
      assertEquals("Null key.", coreLabel0.value());
      assertEquals(5, coreLabel0.size());
      assertEquals("", coreLabel0.after());
      assertEquals("", coreLabel0.before());
      assertEquals(0, coreLabel0.endPosition());
      assertEquals("Null key.", coreLabel0.word());
      assertEquals("Null key.", coreLabel0.originalText());
      assertNull(coreLabel0.lemma());
      assertEquals(0, coreLabel0.copyCount());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      
      String string0 = jSONObject1.toString(0);
      assertEquals("{\"Null key.\": \"Null key.\"}", string0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertNull(coreLabel0.docID());
      assertEquals(0, coreLabel0.beginPosition());
      assertNull(coreLabel0.ner());
      assertNull(coreLabel0.tag());
      assertNull(coreLabel0.category());
      assertEquals(-1, coreLabel0.index());
      assertEquals(-1, coreLabel0.sentIndex());
      assertEquals("Null key.", coreLabel0.value());
      assertEquals(5, coreLabel0.size());
      assertEquals("", coreLabel0.after());
      assertEquals("", coreLabel0.before());
      assertEquals(0, coreLabel0.endPosition());
      assertEquals("Null key.", coreLabel0.word());
      assertEquals("Null key.", coreLabel0.originalText());
      assertNull(coreLabel0.lemma());
      assertEquals(0, coreLabel0.copyCount());
      assertEquals(1, jSONObject0.length());
      assertNotNull(string0);
  }

  //Test case number: 52
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I12 Branch 74 IFNE L1015 - false
   */

  @Test
  public void test52()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
      assertNotNull(string0);
  }

  //Test case number: 53
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 71 IFNULL L999 - true
   * Goal 2. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I11 Branch 72 IFNULL L999 - true
   */

  @Test
  public void test53()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "$!7`{8=s[#: ";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertNotSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject0, jSONObject1);
      assertEquals(0, jSONObject1.length());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject1);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject0.equals((Object)jSONObject1));
  }

  //Test case number: 54
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I6 Branch 121 IFNULL L1304 - true
   */

  @Test
  public void test54()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 6, 6);
      assertEquals("null", string0);
      assertNotNull(string0);
  }

  //Test case number: 55
  /*
   * 18 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/util/Collection;)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.isNull(Ljava/lang/String;)Z: root-Branch
   * Goal 3. wheel.json.JSONObject.optBoolean(Ljava/lang/String;Z)Z: root-Branch
   * Goal 4. wheel.json.JSONObject.optLong(Ljava/lang/String;J)J: root-Branch
   * Goal 5. wheel.json.JSONObject.put(Ljava/lang/String;I)Lwheel/json/JSONObject;: root-Branch
   * Goal 6. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I6 Branch 1 IFNULL L115 - false
   * Goal 7. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I12 Branch 2 IF_ACMPNE L115 - true
   * Goal 8. wheel.json.JSONObject.<init>(Lwheel/json/JSONObject;[Ljava/lang/String;)V: I15 Branch 3 IF_ICMPGE L162 - true
   * Goal 9. wheel.json.JSONObject.<init>(Lwheel/json/JSONObject;[Ljava/lang/String;)V: I15 Branch 3 IF_ICMPGE L162 - false
   * Goal 10. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 29 IFNONNULL L374 - true
   * Goal 11. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I39 Branch 30 IFEQ L376 - false
   * Goal 12. wheel.json.JSONObject.get(Ljava/lang/String;)Ljava/lang/Object;: I12 Branch 38 IFNONNULL L421 - true
   * Goal 13. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I14 Branch 39 IFNE L439 - false
   * Goal 14. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I20 Branch 40 IFEQ L439 - true
   * Goal 15. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I41 Branch 42 IFNE L443 - false
   * Goal 16. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I47 Branch 43 IFEQ L443 - true
   * Goal 17. wheel.json.JSONObject.getDouble(Ljava/lang/String;)D: I13 Branch 45 IFEQ L463 - true
   * Goal 18. wheel.json.JSONObject.getLong(Ljava/lang/String;)J: I13 Branch 49 IFEQ L536 - true
   */

  @Test
  public void test55()  throws Throwable  {
      HashMap<Integer, ArrayCoreMap> hashMap0 = new HashMap<Integer, ArrayCoreMap>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject0);
      
      LinkedList<WordLemmaTag> linkedList0 = new LinkedList<WordLemmaTag>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      HashIndex<Object> hashIndex0 = new HashIndex<Object>((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertNotNull(hashIndex0);
      
      JSONObject jSONObject1 = jSONObject0.put("Bad value from toJSONString: ", (Collection) hashIndex0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject1);
      
      long long0 = jSONObject0.optLong("Bad value from toJSONString: ", 0L);
      assertEquals(0L, long0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      boolean boolean0 = jSONObject1.optBoolean("Bad value from toJSONString: ", true);
      assertTrue(boolean0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Bad value from toJSONString: ";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject2);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      
      JSONObject jSONObject3 = jSONObject2.append("Bad value from toJSONString: ", (Object) "Bad value from toJSONString: ");
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject3);
      assertNotSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertNotSame(jSONObject3, jSONObject1);
      assertSame(jSONObject2, jSONObject3);
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject3.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject3);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertFalse(jSONObject1.equals((Object)jSONObject3));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      
      boolean boolean1 = jSONObject2.isNull("Bad value from toJSONString: ");
      assertFalse(boolean1);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject3);
      assertNotSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject3);
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertFalse(jSONObject1.equals((Object)jSONObject3));
      assertFalse(boolean1 == boolean0);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      
      JSONObject jSONObject4 = jSONObject3.put("Bad value from toJSONString: ", 169);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject4);
      assertNotSame(jSONObject0, jSONObject3);
      assertNotSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject1, jSONObject4);
      assertNotSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertNotSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject4);
      assertSame(jSONObject2, jSONObject3);
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject4);
      assertSame(jSONObject4, jSONObject2);
      assertNotSame(jSONObject4, jSONObject0);
      assertSame(jSONObject4, jSONObject3);
      assertNotSame(jSONObject4, jSONObject1);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject3.length());
      assertEquals(1, jSONObject2.length());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject4.length());
      assertNotNull(jSONObject4);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject0.equals((Object)jSONObject4));
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertFalse(jSONObject1.equals((Object)jSONObject3));
      assertFalse(jSONObject1.equals((Object)jSONObject4));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject4.equals((Object)jSONObject0));
      assertFalse(jSONObject4.equals((Object)jSONObject1));
  }

  //Test case number: 56
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 69 IFNONNULL L975 - false
   * Goal 2. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I6 Branch 91 IFNULL L1088 - true
   */

  @Test
  public void test56()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      try {
        JSONObject jSONObject1 = jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
      }
  }

  //Test case number: 57
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I6 Branch 110 IFNULL L1253 - true
   */

  @Test
  public void test57()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
      assertNotNull(string0);
  }

  //Test case number: 58
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I77 Branch 37 IFLE L404 - true
   */

  @Test
  public void test58()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1500.3021055));
      assertEquals("-1500.3021055", string0);
      assertNotNull(string0);
  }

  //Test case number: 59
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject$Null.toString()Ljava/lang/String;: root-Branch
   * Goal 2. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I26 Branch 27 IFEQ L347 - false
   */

  @Test
  public void test59()  throws Throwable  {
      HashMap<Long, ArrayCoreMap> hashMap0 = new HashMap<Long, ArrayCoreMap>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(123, (Map) hashMap0);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(124, jSONArray1.length());
      assertEquals(124, jSONArray0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONArray1);
      
      JSONObject jSONObject0 = jSONArray1.toJSONObject(jSONArray0);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(2, jSONObject0.length());
      assertEquals(124, jSONArray1.length());
      assertEquals(124, jSONArray0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("?iqQ>yLoEe0F", (Object) jSONArray0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(3, jSONObject0.length());
      assertEquals(124, jSONArray1.length());
      assertEquals(124, jSONArray0.length());
      assertEquals(3, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject1);
  }

  //Test case number: 60
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/lang/Object;[Ljava/lang/String;)V: I20 Branch 25 IF_ICMPGE L304 - true
   * Goal 2. wheel.json.JSONObject.<init>(Ljava/lang/Object;[Ljava/lang/String;)V: I20 Branch 25 IF_ICMPGE L304 - false
   */

  @Test
  public void test60()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject((Object) "ha", stringArray0);
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
  }

  //Test case number: 61
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 5 LOOKUPSWITCH L183 Case 0 - false
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 7 LOOKUPSWITCH L183 Default-Case - true
   * Goal 3. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I61 Branch 8 IF_ICMPNE L198 - true
   * Goal 4. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I86 Branch 10 IF_ICMPEQ L202 - false
   */

  @Test
  public void test61()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{>YnR3%]:");
      assertTrue(jSONTokener0.more());
      assertNotNull(jSONTokener0);
      
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 8 of {>YnR3%]:
         //
      }
  }

  //Test case number: 62
  /*
   * 5 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/lang/String;)V: root-Branch
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I12 Branch 4 IF_ICMPEQ L178 - true
   * Goal 3. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 5 LOOKUPSWITCH L183 Case 0 - true
   * Goal 4. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 6 LOOKUPSWITCH L183 Case 125 - false
   * Goal 5. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 7 LOOKUPSWITCH L183 Default-Case - false
   */

  @Test
  public void test62()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
      }
  }

  //Test case number: 63
  @Test
  public void test63()  throws Throwable  {
      String string0 = JSONObject.valueToString("sg<Db'[{-;7}};fKc", 97, 97);
      assertEquals("\"sg<Db'[{-;7}};fKc\"", string0);
      assertNotNull(string0);
  }

  //Test case number: 64
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.has(Ljava/lang/String;)Z: root-Branch
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I12 Branch 4 IF_ICMPEQ L178 - false
   */

  @Test
  public void test64()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = jSONObject0.has("itoSting");
      assertFalse(boolean0);
      assertEquals(0, jSONObject0.length());
      
      JSONTokener jSONTokener0 = new JSONTokener("itoSting");
      assertTrue(jSONTokener0.more());
      assertNotNull(jSONTokener0);
      
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of itoSting
         //
      }
  }

  //Test case number: 65
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I18 Branch 55 IFEQ L648 - true
   * Goal 2. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I37 Branch 56 IFNE L651 - false
   * Goal 3. wheel.json.JSONObject.opt(Ljava/lang/String;)Ljava/lang/Object;: I6 Branch 63 IFNONNULL L688 - false
   * Goal 4. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I6 Branch 73 IFNULL L1015 - true
   */

  @Test
  public void test65()  throws Throwable  {
      HashMap<StringLabel, HashableCoreMap> hashMap0 = new HashMap<StringLabel, HashableCoreMap>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
      
      try {
        JSONObject jSONObject1 = jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
      }
  }

  //Test case number: 66
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 26 IFNONNULL L346 - false
   * Goal 2. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I26 Branch 27 IFEQ L347 - true
   * Goal 3. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 81 LOOKUPSWITCH L1030 Case 34 - true
   */

  @Test
  public void test66()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
      
      JSONObject jSONObject0 = new JSONObject(object0);
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("G", object0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      try {
        JSONArray jSONArray0 = jSONObject1.getJSONArray("\"9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"9\"] not found.
         //
      }
  }

  //Test case number: 67
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I76 Branch 126 IFEQ L1320 - false
   */

  @Test
  public void test67()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      
      String string0 = JSONObject.valueToString(boolean0, (-320), (-320));
      assertEquals("false", string0);
      assertNotNull(string0);
  }

  //Test case number: 68
  /*
   * 8 covered goals:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I7 Branch 31 IFNE L393 - false
   * Goal 2. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I13 Branch 32 IFEQ L393 - true
   * Goal 3. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I31 Branch 33 IFLE L400 - false
   * Goal 4. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I38 Branch 34 IFGE L400 - false
   * Goal 5. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I45 Branch 35 IFGE L400 - false
   * Goal 6. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I54 Branch 36 IFLE L401 - true
   * Goal 7. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I54 Branch 36 IFLE L401 - false
   * Goal 8. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I77 Branch 37 IFLE L404 - false
   */

  @Test
  public void test68()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      assertNotNull(string0);
  }

  //Test case number: 69
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I6 Branch 52 IFNONNULL L568 - true
   * Goal 2. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I40 Branch 53 IFNE L574 - true
   * Goal 3. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I60 Branch 54 IF_ICMPGE L578 - true
   * Goal 4. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I60 Branch 54 IF_ICMPGE L578 - false
   */

  @Test
  public void test69()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      
      String[] stringArray0 = JSONObject.getNames((Object) boolean0);
      assertNotNull(stringArray0);
  }

  //Test case number: 70
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.optDouble(Ljava/lang/String;)D: root-Branch
   * Goal 2. wheel.json.JSONObject.optDouble(Ljava/lang/String;D)D: I13 Branch 64 IFEQ L764 - true
   */

  @Test
  public void test70()  throws Throwable  {
      HashMap<StringLabel, HashableCoreMap> hashMap0 = new HashMap<StringLabel, HashableCoreMap>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject0);
      
      double double0 = jSONObject0.optDouble("z%fc&WVl");
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  //Test case number: 71
  /*
   * 12 covered goals:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 82 LOOKUPSWITCH L1030 Case 47 - true
   * Goal 2. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 84 LOOKUPSWITCH L1030 Default-Case - false
   * Goal 3. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I91 Branch 85 IF_ICMPNE L1037 - true
   * Goal 4. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I13 Branch 122 IFEQ L1304 - true
   * Goal 5. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I25 Branch 123 IFEQ L1308 - true
   * Goal 6. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I62 Branch 125 IFEQ L1317 - true
   * Goal 7. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I76 Branch 126 IFEQ L1320 - true
   * Goal 8. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I89 Branch 127 IFEQ L1323 - true
   * Goal 9. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I105 Branch 128 IFEQ L1326 - true
   * Goal 10. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I121 Branch 129 IFEQ L1329 - true
   * Goal 11. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I140 Branch 130 IFEQ L1332 - true
   * Goal 12. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I160 Branch 131 IFEQ L1335 - true
   */

  @Test
  public void test71()  throws Throwable  {
      TaggedWord taggedWord0 = new TaggedWord("gettoStri");
      assertNull(taggedWord0.tag());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals("gettoStri", taggedWord0.word());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("gettoStri", taggedWord0.value());
      assertNotNull(taggedWord0);
      
      String string0 = JSONObject.valueToString(taggedWord0, 0, 0);
      assertEquals("\"gettoStri/null\"", string0);
      assertNull(taggedWord0.tag());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals("gettoStri", taggedWord0.word());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("gettoStri", taggedWord0.value());
      assertNotNull(string0);
  }

  //Test case number: 72
  /*
   * 7 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/util/Map;)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.optString(Ljava/lang/String;)Ljava/lang/String;: root-Branch
   * Goal 3. wheel.json.JSONObject.optJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 66 IFEQ L829 - true
   * Goal 4. wheel.json.JSONObject.optString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I12 Branch 67 IFNULL L889 - false
   * Goal 5. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 71 IFNULL L999 - false
   * Goal 6. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I11 Branch 72 IFNULL L999 - false
   * Goal 7. wheel.json.JSONObject.toString()Ljava/lang/String;: I19 Branch 101 IFEQ L1140 - true
   */

  @Test
  public void test72()  throws Throwable  {
      HashMap<JSONObject, WordLemmaTag> hashMap0 = new HashMap<JSONObject, WordLemmaTag>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("#&rRj'e08{XB", (Object) linkedList0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject1.put("#&rRj'e08{XB", (Map) hashMap0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONObject2.length());
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject2);
      
      String string0 = jSONObject2.optString("#&rRj'e08{XB");
      assertEquals("{}", string0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONObject2.length());
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertNotNull(string0);
      
      JSONObject jSONObject3 = jSONObject1.optJSONObject("{}");
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertNull(jSONObject3);
  }

  //Test case number: 73
  /*
   * 9 covered goals:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I31 Branch 58 IFLE L670 - false
   * Goal 2. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I38 Branch 59 IFGE L670 - false
   * Goal 3. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I45 Branch 60 IFGE L670 - false
   * Goal 4. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I54 Branch 61 IFLE L671 - true
   * Goal 5. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I54 Branch 61 IFLE L671 - false
   * Goal 6. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I77 Branch 62 IFLE L674 - false
   * Goal 7. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I14 Branch 92 IFEQ L1089 - false
   * Goal 8. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I23 Branch 93 IFNE L1090 - false
   * Goal 9. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I30 Branch 94 IFEQ L1090 - true
   */

  @Test
  public void test73()  throws Throwable  {
      SeqClassifierFlags seqClassifierFlags0 = new SeqClassifierFlags();
      assertFalse(seqClassifierFlags0.useWordPairs);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions2);
      assertFalse(seqClassifierFlags0.nonLinearCRF);
      assertFalse(seqClassifierFlags0.useMoreGazFeatures);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions3);
      assertFalse(seqClassifierFlags0.useOWLQN);
      assertFalse(seqClassifierFlags0.useSum);
      assertEquals(1, seqClassifierFlags0.kBest);
      assertFalse(seqClassifierFlags0.useAbbr);
      assertEquals(3, seqClassifierFlags0.charHalfWindow);
      assertFalse(seqClassifierFlags0.printFactorTable);
      assertFalse(seqClassifierFlags0.useEmbedding);
      assertTrue(seqClassifierFlags0.initWithPosterior);
      assertEquals(0, seqClassifierFlags0.nerSkipFirstK);
      assertEquals(0.01, seqClassifierFlags0.epsilon, 0.01D);
      assertFalse(seqClassifierFlags0.useHeadGov);
      assertFalse(seqClassifierFlags0.useNextSequences);
      assertEquals(0.95, seqClassifierFlags0.adaDeltaRho, 0.01D);
      assertFalse(seqClassifierFlags0.matchNERIncentive);
      assertFalse(seqClassifierFlags0.doGibbs);
      assertFalse(seqClassifierFlags0.useFeaturesC6gram);
      assertFalse(seqClassifierFlags0.normalizeTimex);
      assertEquals(8, seqClassifierFlags0.maxAllowedChromaticSize);
      assertEquals(0.0, seqClassifierFlags0.newgeneThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.evaluateTrain);
      assertFalse(seqClassifierFlags0.useFeaturesC5gram);
      assertFalse(seqClassifierFlags0.makeConsistent);
      assertFalse(seqClassifierFlags0.useDictPK2);
      assertEquals(0.0, seqClassifierFlags0.pctSegmenterScale, 0.01D);
      assertEquals(1, seqClassifierFlags0.CRForder);
      assertFalse(seqClassifierFlags0.useMinimalAbbr1);
      assertFalse(seqClassifierFlags0.normalize);
      assertFalse(seqClassifierFlags0.useYear);
      assertFalse(seqClassifierFlags0.useSGDtoQN);
      assertFalse(seqClassifierFlags0.noEdgeFeature);
      assertFalse(seqClassifierFlags0.sloppyGazette);
      assertFalse(seqClassifierFlags0.useStochasticQN);
      assertFalse(seqClassifierFlags0.factorInBiEdgePotential);
      assertFalse(seqClassifierFlags0.splitOnHead);
      assertFalse(seqClassifierFlags0.useShapeStrings5);
      assertFalse(seqClassifierFlags0.suppressTestDebug);
      assertFalse(seqClassifierFlags0.useShapeStrings4);
      assertFalse(seqClassifierFlags0.useBigramInTwoClique);
      assertFalse(seqClassifierFlags0.useShapeStrings1);
      assertFalse(seqClassifierFlags0.useShapeStrings3);
      assertFalse(seqClassifierFlags0.useGazFeatures);
      assertFalse(seqClassifierFlags0.useTags);
      assertEquals(1, seqClassifierFlags0.nerSlowerTimes);
      assertFalse(seqClassifierFlags0.usePKChar2);
      assertFalse(seqClassifierFlags0.useOccurrencePatterns);
      assertEquals(1, seqClassifierFlags0.numFolds);
      assertEquals(Integer.MAX_VALUE, seqClassifierFlags0.printFeaturesUpto);
      assertFalse(seqClassifierFlags0.printProbs);
      assertFalse(seqClassifierFlags0.booleanFeatures);
      assertFalse(seqClassifierFlags0.softmaxOutputLayer);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSizeAlignment, 0.01D);
      assertEquals(4, seqClassifierFlags0.disjunctionWidth);
      assertFalse(seqClassifierFlags0.lowercaseNGrams);
      assertFalse(seqClassifierFlags0.useHKChar2);
      assertFalse(seqClassifierFlags0.printXML);
      assertFalse(seqClassifierFlags0.estimateInitial);
      assertFalse(seqClassifierFlags0.useRule);
      assertFalse(seqClassifierFlags0.intern);
      assertFalse(seqClassifierFlags0.useDistSim);
      assertFalse(seqClassifierFlags0.useRule2);
      assertEquals((-1), seqClassifierFlags0.labelDictionaryCutoff);
      assertFalse(seqClassifierFlags0.useFeaturesC4gram);
      assertFalse(seqClassifierFlags0.useCommonWordsFeature);
      assertEquals((-1), seqClassifierFlags0.wordShape);
      assertFalse(seqClassifierFlags0.checkGradient);
      assertFalse(seqClassifierFlags0.useReverseAffix);
      assertFalse(seqClassifierFlags0.useEntityRule);
      assertFalse(seqClassifierFlags0.useNext);
      assertFalse(seqClassifierFlags0.cacheNGrams);
      assertFalse(seqClassifierFlags0.memoryThrift);
      assertFalse(seqClassifierFlags0.groupByInput);
      assertFalse(seqClassifierFlags0.dualDecompNotBIO);
      assertEquals(0.0, seqClassifierFlags0.softmaxTieLambda, 0.01D);
      assertFalse(seqClassifierFlags0.useHKSuf1);
      assertFalse(seqClassifierFlags0.usePrevNextLemmas);
      assertFalse(seqClassifierFlags0.useChromaticSampling);
      assertEquals(1, seqClassifierFlags0.multiThreadGrad);
      assertEquals(0, seqClassifierFlags0.numOfFeatureSlices);
      assertFalse(seqClassifierFlags0.useClassFeature);
      assertFalse(seqClassifierFlags0.hardcodeSoftmaxOutputWeights);
      assertTrue(seqClassifierFlags0.useExternal);
      assertFalse(seqClassifierFlags0.groupByHiddenUnit);
      assertFalse(seqClassifierFlags0.useLongSequences);
      assertFalse(seqClassifierFlags0.useHKPre1);
      assertFalse(seqClassifierFlags0.useABSTRFreq);
      assertFalse(seqClassifierFlags0.useAdaGradFOBOS);
      assertFalse(seqClassifierFlags0.useInPlaceSGD);
      assertTrue(seqClassifierFlags0.separateASCIIandRange);
      assertFalse(seqClassifierFlags0.useNERPrior);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions3);
      assertTrue(seqClassifierFlags0.useHiddenLayer);
      assertEquals(1, seqClassifierFlags0.numRuns);
      assertTrue(seqClassifierFlags0.biAlignmentPriorIsPMI);
      assertFalse(seqClassifierFlags0.useUnicodeType4gram);
      assertFalse(seqClassifierFlags0.useBerkeleyAlignerForViterbi);
      assertEquals(0.001, seqClassifierFlags0.adaGradEps, 0.01D);
      assertFalse(seqClassifierFlags0.useHuber);
      assertEquals((-1), seqClassifierFlags0.QNPasses);
      assertFalse(seqClassifierFlags0.useURLSequences);
      assertFalse(seqClassifierFlags0.useLemmaAsWord);
      assertFalse(seqClassifierFlags0.dampDDStepSizeWithAlignmentProb);
      assertEquals(1.0, seqClassifierFlags0.dropoutScale, 0.01D);
      assertFalse(seqClassifierFlags0.geDebug);
      assertFalse(seqClassifierFlags0.useTypeSeqs);
      assertFalse(seqClassifierFlags0.timitDatum);
      assertFalse(seqClassifierFlags0.usePhraseWordSpecialTags);
      assertFalse(seqClassifierFlags0.useAltGazFeatures);
      assertFalse(seqClassifierFlags0.useFeaturesCpC4gram);
      assertFalse(seqClassifierFlags0.useMinimalAbbr);
      assertFalse(seqClassifierFlags0.selfTest);
      assertFalse(seqClassifierFlags0.useTOK);
      assertFalse(seqClassifierFlags0.useSentenceNumber);
      assertFalse(seqClassifierFlags0.cleanGazette);
      assertFalse(seqClassifierFlags0.gradientDebug);
      assertFalse(seqClassifierFlags0.saveFeatureIndexToDisk);
      assertEquals(0, seqClassifierFlags0.maxRight);
      assertFalse(seqClassifierFlags0.useSigmoid);
      assertFalse(seqClassifierFlags0.groupByOutputClass);
      assertFalse(seqClassifierFlags0.useTaggySequences);
      assertEquals(0, seqClassifierFlags0.featureCountThresh);
      assertFalse(seqClassifierFlags0.deleteBlankLines);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSize, 0.01D);
      assertFalse(seqClassifierFlags0.useFilter);
      assertFalse(seqClassifierFlags0.useProtoFeatures);
      assertFalse(seqClassifierFlags0.useGEforSup);
      assertFalse(seqClassifierFlags0.useHk);
      assertFalse(seqClassifierFlags0.useOrdinal);
      assertFalse(seqClassifierFlags0.strictlySecondOrder);
      assertFalse(seqClassifierFlags0.useASBCPre1);
      assertFalse(seqClassifierFlags0.useChunkySequences);
      assertEquals(0, seqClassifierFlags0.dualDecompMaxItr);
      assertFalse(seqClassifierFlags0.strictlyFirstOrder);
      assertTrue(seqClassifierFlags0.keepOBInMemory);
      assertFalse(seqClassifierFlags0.useGoodForNamesCpC);
      assertTrue(seqClassifierFlags0.useMemoryEvaluator);
      assertTrue(seqClassifierFlags0.averagePerceptron);
      assertFalse(seqClassifierFlags0.verboseForTrueCasing);
      assertFalse(seqClassifierFlags0.useSegmentation);
      assertEquals(100, seqClassifierFlags0.numSamples);
      assertFalse(seqClassifierFlags0.useBilingualNERPrior);
      assertFalse(seqClassifierFlags0.useAs);
      assertEquals(0.1, seqClassifierFlags0.initRate, 0.01D);
      assertFalse(seqClassifierFlags0.verboseMode);
      assertFalse(seqClassifierFlags0.useAdaDelta);
      assertTrue(seqClassifierFlags0.useSequences);
      assertTrue(seqClassifierFlags0.useDenero);
      assertFalse(seqClassifierFlags0.casedDistSim);
      assertFalse(seqClassifierFlags0.useSemPrior);
      assertTrue(seqClassifierFlags0.useOutputLayer);
      assertFalse(seqClassifierFlags0.usePrediction2);
      assertFalse(seqClassifierFlags0.useYetMoreCpCShapes);
      assertFalse(seqClassifierFlags0.includeFullCRFInLOP);
      assertFalse(seqClassifierFlags0.useGENIA);
      assertFalse(seqClassifierFlags0.removeBackgroundSingletonFeatures);
      assertFalse(seqClassifierFlags0.groupByFeatureTemplate);
      assertTrue(seqClassifierFlags0.learnCHBasedOnEN);
      assertFalse(seqClassifierFlags0.useUnicodeType);
      assertFalse(seqClassifierFlags0.useUnicodeType5gram);
      assertFalse(seqClassifierFlags0.useSMD);
      assertFalse(seqClassifierFlags0.useDisjunctive);
      assertEquals((-1), seqClassifierFlags0.numHiddenUnits);
      assertEquals(0.0, seqClassifierFlags0.removeTopNPercent, 0.01D);
      assertFalse(seqClassifierFlags0.useUnicodeBlock);
      assertFalse(seqClassifierFlags0.dehyphenateNGrams);
      assertEquals(25, seqClassifierFlags0.QNsize);
      assertFalse(seqClassifierFlags0.useNoisyLabel);
      assertEquals((-1), seqClassifierFlags0.maxIterations);
      assertFalse(seqClassifierFlags0.useKBest);
      assertFalse(seqClassifierFlags0.useBeginSent);
      assertFalse(seqClassifierFlags0.powerAlignProbAsAddition);
      assertFalse(seqClassifierFlags0.outputIterationsToFile);
      assertFalse(seqClassifierFlags0.useEntityTypes);
      assertFalse(seqClassifierFlags0.readStdin);
      assertEquals(10, seqClassifierFlags0.totalDataSlice);
      assertFalse(seqClassifierFlags0.useAcqPrior);
      assertFalse(seqClassifierFlags0.noMidNGrams);
      assertEquals(0.1, seqClassifierFlags0.initialGain, 0.01D);
      assertFalse(seqClassifierFlags0.fakeDataset);
      assertEquals(100, seqClassifierFlags0.printClassifierParam);
      assertFalse(seqClassifierFlags0.useNB);
      assertEquals(2, seqClassifierFlags0.maxLeft);
      assertFalse(seqClassifierFlags0.useEitherSideWord);
      assertFalse(seqClassifierFlags0.intern2);
      assertFalse(seqClassifierFlags0.useSeenFeaturesOnly);
      assertFalse(seqClassifierFlags0.doFeatureDiscovery);
      assertFalse(seqClassifierFlags0.transitionEdgeOnly);
      assertEquals(0.0, seqClassifierFlags0.annealingRate, 0.01D);
      assertFalse(seqClassifierFlags0.useSGD);
      assertFalse(seqClassifierFlags0.useACR);
      assertFalse(seqClassifierFlags0.useAbbr1);
      assertFalse(seqClassifierFlags0.useHardGE);
      assertFalse(seqClassifierFlags0.useNegHKDict3);
      assertFalse(seqClassifierFlags0.useNegHKDict2);
      assertFalse(seqClassifierFlags0.keepAllWhitespaces);
      assertFalse(seqClassifierFlags0.useNegHKDict4);
      assertFalse(seqClassifierFlags0.numberEquivalenceDistSim);
      assertFalse(seqClassifierFlags0.pctSegmenterLenAdjust);
      assertTrue(seqClassifierFlags0.splitDocuments);
      assertFalse(seqClassifierFlags0.prependEmbedding);
      assertFalse(seqClassifierFlags0.useNegCTBDict4);
      assertFalse(seqClassifierFlags0.useBagOfWords);
      assertFalse(seqClassifierFlags0.useNegCTBDict2);
      assertFalse(seqClassifierFlags0.useNegCTBDict3);
      assertEquals(15, seqClassifierFlags0.stochasticBatchSize);
      assertEquals((-1), seqClassifierFlags0.SGDPasses);
      assertTrue(seqClassifierFlags0.useQN);
      assertFalse(seqClassifierFlags0.useCRFforUnsup);
      assertFalse(seqClassifierFlags0.testObjFunction);
      assertFalse(seqClassifierFlags0.augmentedDateChars);
      assertFalse(seqClassifierFlags0.useEntityTypeSequences);
      assertFalse(seqClassifierFlags0.useGazettes);
      assertFalse(seqClassifierFlags0.useRadical);
      assertFalse(seqClassifierFlags0.lowerNewgeneThreshold);
      assertEquals(0, seqClassifierFlags0.maxDocSize);
      assertFalse(seqClassifierFlags0.useWordn);
      assertEquals(0, seqClassifierFlags0.numTimesPruneFeatures);
      assertFalse(seqClassifierFlags0.useObservedFeaturesOnly);
      assertFalse(seqClassifierFlags0.useNGrams);
      assertFalse(seqClassifierFlags0.use4Clique);
      assertEquals(0, seqClassifierFlags0.numOfSlices);
      assertFalse(seqClassifierFlags0.useBerkeleyCompetitivePosterior);
      assertFalse(seqClassifierFlags0.skipOutputRegularization);
      assertFalse(seqClassifierFlags0.useSymTags);
      assertFalse(seqClassifierFlags0.restrictTransitionsTimit);
      assertEquals(1.0, seqClassifierFlags0.randomizedRatio, 0.01D);
      assertFalse(seqClassifierFlags0.useWord4);
      assertFalse(seqClassifierFlags0.useWord3);
      assertEquals(1, seqClassifierFlags0.featureThreshold);
      assertFalse(seqClassifierFlags0.useWord2);
      assertFalse(seqClassifierFlags0.useWord1);
      assertFalse(seqClassifierFlags0.learnENBasedOnCH);
      assertFalse(seqClassifierFlags0.iobWrapper);
      assertEquals((-1), seqClassifierFlags0.tuneSampleSize);
      assertFalse(seqClassifierFlags0.useFREQ);
      assertFalse(seqClassifierFlags0.useSymWordPairs);
      assertEquals(0.9, seqClassifierFlags0.selfTrainConfidenceThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.usePk);
      assertEquals(1.0, seqClassifierFlags0.adaptSigma, 0.01D);
      assertFalse(seqClassifierFlags0.useNERPriorBIO);
      assertEquals(0.0, seqClassifierFlags0.alignmentPruneThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.sparseOutputLayer);
      assertFalse(seqClassifierFlags0.useWideDisjunctive);
      assertFalse(seqClassifierFlags0.useCTBPre1);
      assertFalse(seqClassifierFlags0.useTitle);
      assertFalse(seqClassifierFlags0.randomLopWeights);
      assertFalse(seqClassifierFlags0.useReverse);
      assertEquals((-1), seqClassifierFlags0.samplingSpeedUpThreshold);
      assertFalse(seqClassifierFlags0.useIfInteger);
      assertFalse(seqClassifierFlags0.useCTBChar2);
      assertFalse(seqClassifierFlags0.tuneSGD);
      assertFalse(seqClassifierFlags0.perceptronDebug);
      assertFalse(seqClassifierFlags0.usePosition);
      assertFalse(seqClassifierFlags0.useMSRChar2);
      assertFalse(seqClassifierFlags0.powerAlignProb);
      assertEquals(0.0, seqClassifierFlags0.priorAlpha, 0.01D);
      assertFalse(seqClassifierFlags0.removeStrictGoodCoNLLDuplicates);
      assertTrue(seqClassifierFlags0.useInternal);
      assertFalse(seqClassifierFlags0.useRobustQN);
      assertEquals(1, seqClassifierFlags0.startFold);
      assertFalse(seqClassifierFlags0.strictGoodCoNLL);
      assertFalse(seqClassifierFlags0.useDictHK2);
      assertEquals(0, seqClassifierFlags0.multiThreadClassifier);
      assertFalse(seqClassifierFlags0.lazyUpdate);
      assertEquals(0, seqClassifierFlags0.startEvaluateIters);
      assertFalse(seqClassifierFlags0.useWordShapeGaz);
      assertFalse(seqClassifierFlags0.largeChSegFile);
      assertFalse(seqClassifierFlags0.useKL);
      assertFalse(seqClassifierFlags0.regularizeSoftmaxTieParam);
      assertFalse(seqClassifierFlags0.checkNameList);
      assertFalse(seqClassifierFlags0.useGenericFeatures);
      assertFalse(seqClassifierFlags0.sighanPostProcessing);
      assertFalse(seqClassifierFlags0.useLC);
      assertFalse(seqClassifierFlags0.useScaledSGD);
      assertFalse(seqClassifierFlags0.evaluateBackground);
      assertFalse(seqClassifierFlags0.useNegDict3);
      assertFalse(seqClassifierFlags0.useNegDict4);
      assertFalse(seqClassifierFlags0.useMoreAbbr);
      assertFalse(seqClassifierFlags0.useMidDotShape);
      assertEquals((-1), seqClassifierFlags0.purgeFeatures);
      assertFalse(seqClassifierFlags0.usePrev);
      assertFalse(seqClassifierFlags0.dualDecompAlignment);
      assertFalse(seqClassifierFlags0.useNegDict2);
      assertFalse(seqClassifierFlags0.useIsDateRange);
      assertFalse(seqClassifierFlags0.retainEntitySubclassification);
      assertTrue(seqClassifierFlags0.initViterbi);
      assertFalse(seqClassifierFlags0.useParenMatching);
      assertFalse(seqClassifierFlags0.useTopics);
      assertEquals(1, seqClassifierFlags0.numDatasetsPerFile);
      assertEquals((-1), seqClassifierFlags0.arbitraryInputLayerSize);
      assertFalse(seqClassifierFlags0.useNumberFeature);
      assertTrue(seqClassifierFlags0.applyNERPenalty);
      assertFalse(seqClassifierFlags0.dropoutApprox);
      assertFalse(seqClassifierFlags0.useCorefFeatures);
      assertFalse(seqClassifierFlags0.noNeighborConstraints);
      assertFalse(seqClassifierFlags0.terminateOnEvalImprovement);
      assertEquals(1, seqClassifierFlags0.bisequencePriorType);
      assertFalse(seqClassifierFlags0.useABSTR);
      assertFalse(seqClassifierFlags0.useDictASBC2);
      assertEquals(0, seqClassifierFlags0.evaluateIters);
      assertEquals(1, seqClassifierFlags0.numTimesRemoveTopN);
      assertFalse(seqClassifierFlags0.useASBCSuf1);
      assertFalse(seqClassifierFlags0.useDisjShape);
      assertFalse(seqClassifierFlags0.printLabelValue);
      assertFalse(seqClassifierFlags0.useCTBSuf1);
      assertEquals(1, seqClassifierFlags0.numLopExpert);
      assertFalse(seqClassifierFlags0.purgeDatasets);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions);
      assertEquals(0.0, seqClassifierFlags0.priorLambda, 0.01D);
      assertFalse(seqClassifierFlags0.useVB);
      assertFalse(seqClassifierFlags0.justify);
      assertEquals(1000, seqClassifierFlags0.wordSegBeamSize);
      assertFalse(seqClassifierFlags0.keepEnglishWhitespaces);
      assertFalse(seqClassifierFlags0.strictlyZeroethOrder);
      assertFalse(seqClassifierFlags0.printTrainLabels);
      assertEquals(1.0E-4, seqClassifierFlags0.tolerance, 0.01D);
      assertFalse(seqClassifierFlags0.testHessSamples);
      assertFalse(seqClassifierFlags0.baseline);
      assertFalse(seqClassifierFlags0.useUnknown);
      assertEquals(2, seqClassifierFlags0.CRFwindow);
      assertEquals(1, seqClassifierFlags0.selfTrainWindowSize);
      assertFalse(seqClassifierFlags0.doFE);
      assertFalse(seqClassifierFlags0.useMsr);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesBigram);
      assertFalse(seqClassifierFlags0.suppressMidDotPostprocessing);
      assertFalse(seqClassifierFlags0.useEitherSideDisjunctive);
      assertFalse(seqClassifierFlags0.useBoundarySequences);
      assertEquals(Double.POSITIVE_INFINITY, seqClassifierFlags0.searchGraphPrune, 0.01D);
      assertFalse(seqClassifierFlags0.useMoreTags);
      assertEquals(0.5, seqClassifierFlags0.alignmentDecodeThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.ocrTrain);
      assertEquals(0.0, seqClassifierFlags0.featureDiffThresh, 0.01D);
      assertFalse(seqClassifierFlags0.useMUCFeatures);
      assertEquals(1, seqClassifierFlags0.terminateOnEvalImprovementNumOfEpoch);
      assertFalse(seqClassifierFlags0.useChunks);
      assertFalse(seqClassifierFlags0.addCapitalFeatures);
      assertEquals(1.0, seqClassifierFlags0.alignDDAlpha, 0.01D);
      assertEquals(50, seqClassifierFlags0.SGD2QNhessSamples);
      assertFalse(seqClassifierFlags0.useNPGovernor);
      assertEquals(30, seqClassifierFlags0.beamSize);
      assertFalse(seqClassifierFlags0.useWordTag);
      assertFalse(seqClassifierFlags0.printNR);
      assertFalse(seqClassifierFlags0.mergeTags);
      assertEquals(1.0, seqClassifierFlags0.unsupDropoutScale, 0.01D);
      assertFalse(seqClassifierFlags0.useNPHead);
      assertFalse(seqClassifierFlags0.tieOutputLayer);
      assertFalse(seqClassifierFlags0.useBig5);
      assertEquals(1.0, seqClassifierFlags0.lambdaEN, 0.01D);
      assertFalse(seqClassifierFlags0.useFeaturesCpC5gram);
      assertFalse(seqClassifierFlags0.useNextRealWord);
      assertFalse(seqClassifierFlags0.initWithNERPosterior);
      assertFalse(seqClassifierFlags0.useTrainLexicon);
      assertFalse(seqClassifierFlags0.useWEB);
      assertFalse(seqClassifierFlags0.useObservedSequencesOnly);
      assertFalse(seqClassifierFlags0.conjoinShapeNGrams);
      assertTrue(seqClassifierFlags0.useKnownLCWords);
      assertFalse(seqClassifierFlags0.useNegPKDict4);
      assertFalse(seqClassifierFlags0.useNegPKDict3);
      assertEquals(0, seqClassifierFlags0.interimOutputFreq);
      assertFalse(seqClassifierFlags0.useNegPKDict2);
      assertFalse(seqClassifierFlags0.secondOrderNonLinear);
      assertFalse(seqClassifierFlags0.useANTE);
      assertFalse(seqClassifierFlags0.randomLopFeatureSplit);
      assertFalse(seqClassifierFlags0.useUniformPrior);
      assertEquals(0, seqClassifierFlags0.multiThreadGibbs);
      assertFalse(seqClassifierFlags0.usePKSuf1);
      assertFalse(seqClassifierFlags0.combo);
      assertEquals(1, seqClassifierFlags0.numStartLayers);
      assertFalse(seqClassifierFlags0.useCWSWordFeatures);
      assertEquals(8, seqClassifierFlags0.distSimMaxBits);
      assertFalse(seqClassifierFlags0.usePre);
      assertFalse(seqClassifierFlags0.useDict2);
      assertTrue(seqClassifierFlags0.includeC2EViterbi);
      assertFalse(seqClassifierFlags0.useFloat);
      assertFalse(seqClassifierFlags0.addBiasToEmbedding);
      assertFalse(seqClassifierFlags0.useNeighborNGrams);
      assertFalse(seqClassifierFlags0.printWeights);
      assertFalse(seqClassifierFlags0.use2W);
      assertFalse(seqClassifierFlags0.dontExtendTaggy);
      assertFalse(seqClassifierFlags0.useTypeySequences);
      assertEquals(10, seqClassifierFlags0.wideDisjunctionWidth);
      assertFalse(seqClassifierFlags0.useQuartic);
      assertFalse(seqClassifierFlags0.announceObjectBankEntries);
      assertEquals(1.0, seqClassifierFlags0.sigma, 0.01D);
      assertFalse(seqClassifierFlags0.useLemmas);
      assertTrue(seqClassifierFlags0.useCWSFeatures);
      assertFalse(seqClassifierFlags0.usePhraseWords);
      assertFalse(seqClassifierFlags0.useDualDecomp);
      assertFalse(seqClassifierFlags0.useABGENE);
      assertEquals(0.0, seqClassifierFlags0.featureWeightThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useTypeSeqs3);
      assertFalse(seqClassifierFlags0.strictlyThirdOrder);
      assertFalse(seqClassifierFlags0.useTypeSeqs2);
      assertFalse(seqClassifierFlags0.useABSTRFreqDict);
      assertFalse(seqClassifierFlags0.useIsURL);
      assertFalse(seqClassifierFlags0.useAdaDiff);
      assertFalse(seqClassifierFlags0.usePrevSequences);
      assertFalse(seqClassifierFlags0.terminateOnAvgImprovement);
      assertFalse(seqClassifierFlags0.useFirstWord);
      assertFalse(seqClassifierFlags0.useDictCTB2);
      assertFalse(seqClassifierFlags0.useNoisyNonNoisyFeature);
      assertFalse(seqClassifierFlags0.useNextVB);
      assertFalse(seqClassifierFlags0.useNegASBCDict3);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions3);
      assertFalse(seqClassifierFlags0.useNegASBCDict2);
      assertEquals(0.1, seqClassifierFlags0.gainSGD, 0.01D);
      assertEquals(1, seqClassifierFlags0.endFold);
      assertFalse(seqClassifierFlags0.useNegASBCDict4);
      assertFalse(seqClassifierFlags0.useGazettePhrases);
      assertFalse(seqClassifierFlags0.alternateTraining);
      assertFalse(seqClassifierFlags0.useRandomSeed);
      assertFalse(seqClassifierFlags0.useOutDict2);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions2);
      assertFalse(seqClassifierFlags0.expandMidDot);
      assertFalse(seqClassifierFlags0.keepEmptySentences);
      assertFalse(seqClassifierFlags0.printFirstOrderProbs);
      assertFalse(seqClassifierFlags0.testVariance);
      assertEquals(25, seqClassifierFlags0.QNsize2);
      assertEquals(0, seqClassifierFlags0.maxQNItr);
      assertFalse(seqClassifierFlags0.factorInAlignmentProb);
      assertFalse(seqClassifierFlags0.pctSegmenterScaleByCRF);
      assertFalse(seqClassifierFlags0.useSuf);
      assertFalse(seqClassifierFlags0.backpropLopTraining);
      assertFalse(seqClassifierFlags0.usePhraseWordTags);
      assertEquals(0, seqClassifierFlags0.hybridCutoffIteration);
      assertFalse(seqClassifierFlags0.useASBCChar2);
      assertFalse(seqClassifierFlags0.useLastRealWord);
      assertFalse(seqClassifierFlags0.iobTags);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesAll);
      assertTrue(seqClassifierFlags0.useViterbi);
      assertEquals(1, seqClassifierFlags0.multiThreadPerceptron);
      assertEquals(1, seqClassifierFlags0.selfTrainIterations);
      assertFalse(seqClassifierFlags0.usePrevVB);
      assertFalse(seqClassifierFlags0.bioSubmitOutput);
      assertFalse(seqClassifierFlags0.useDisjunctiveShapeInteraction);
      assertFalse(seqClassifierFlags0.useWordnetFeatures);
      assertFalse(seqClassifierFlags0.useSequentialScanSampling);
      assertFalse(seqClassifierFlags0.greekifyNGrams);
      assertEquals(10, seqClassifierFlags0.totalFeatureSlice);
      assertTrue(seqClassifierFlags0.useWord);
      assertFalse(seqClassifierFlags0.useWEBFreqDict);
      assertFalse(seqClassifierFlags0.usePKPre1);
      assertFalse(seqClassifierFlags0.dualDecompDebug);
      assertFalse(seqClassifierFlags0.normalizeTerms);
      assertFalse(seqClassifierFlags0.dump);
      assertEquals(0.0, seqClassifierFlags0.dropoutRate, 0.01D);
      assertFalse(seqClassifierFlags0.useDictleng);
      assertEquals(0, seqClassifierFlags0.removeTopN);
      assertEquals(0.0, seqClassifierFlags0.l1reg, 0.01D);
      assertEquals((-1), seqClassifierFlags0.maxNGramLeng);
      assertFalse(seqClassifierFlags0.useLabelSource);
      assertFalse(seqClassifierFlags0.useOnlySeenWeights);
      assertEquals(0, seqClassifierFlags0.scaledSGDMethod);
      assertFalse(seqClassifierFlags0.useShapeStrings);
      assertFalse(seqClassifierFlags0.twoStage);
      assertFalse(seqClassifierFlags0.useRad1);
      assertFalse(seqClassifierFlags0.useRad2);
      assertFalse(seqClassifierFlags0.blockInitialize);
      assertEquals(0, seqClassifierFlags0.ocrFold);
      assertFalse(seqClassifierFlags0.subCWGaz);
      assertEquals(1.0, seqClassifierFlags0.lambdaCH, 0.01D);
      assertFalse(seqClassifierFlags0.useRad2b);
      assertFalse(seqClassifierFlags0.useChPos);
      assertFalse(seqClassifierFlags0.appendLC);
      assertFalse(seqClassifierFlags0.doAdaptation);
      assertFalse(seqClassifierFlags0.useTaggySequencesShapeInteraction);
      assertEquals(0, seqClassifierFlags0.featureCountThreshold);
      assertFalse(seqClassifierFlags0.useFeaturesCpC6gram);
      assertFalse(seqClassifierFlags0.weightByEntropy);
      assertFalse(seqClassifierFlags0.useShapeConjunctions);
      assertFalse(seqClassifierFlags0.useHybrid);
      assertTrue(seqClassifierFlags0.restrictLabels);
      assertFalse(seqClassifierFlags0.usePrediction);
      assertFalse(seqClassifierFlags0.usePhraseFeatures);
      assertFalse(seqClassifierFlags0.useExtraTaggySequences);
      assertEquals("", seqClassifierFlags0.toString());
      assertNotNull(seqClassifierFlags0);
      
      String string0 = JSONObject.numberToString((Number) 1.0);
      assertEquals("1", string0);
      assertNotNull(string0);
  }

  //Test case number: 74
  /*
   * 25 covered goals:
   * Goal 1. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 29 IFNONNULL L374 - false
   * Goal 2. wheel.json.JSONObject.get(Ljava/lang/String;)Ljava/lang/Object;: I12 Branch 38 IFNONNULL L421 - false
   * Goal 3. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I6 Branch 57 IFNONNULL L662 - true
   * Goal 4. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I31 Branch 58 IFLE L670 - true
   * Goal 5. wheel.json.JSONObject.opt(Ljava/lang/String;)Ljava/lang/Object;: I6 Branch 63 IFNONNULL L688 - true
   * Goal 6. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I6 Branch 73 IFNULL L1015 - false
   * Goal 7. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I12 Branch 74 IFNE L1015 - true
   * Goal 8. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I51 Branch 75 IF_ICMPGE L1027 - true
   * Goal 9. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I51 Branch 75 IF_ICMPGE L1027 - false
   * Goal 10. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 76 LOOKUPSWITCH L1030 Case 8 - false
   * Goal 11. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 77 LOOKUPSWITCH L1030 Case 9 - false
   * Goal 12. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 78 LOOKUPSWITCH L1030 Case 10 - false
   * Goal 13. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 79 LOOKUPSWITCH L1030 Case 12 - false
   * Goal 14. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 80 LOOKUPSWITCH L1030 Case 13 - false
   * Goal 15. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 81 LOOKUPSWITCH L1030 Case 34 - false
   * Goal 16. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 82 LOOKUPSWITCH L1030 Case 47 - false
   * Goal 17. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 83 LOOKUPSWITCH L1030 Case 92 - false
   * Goal 18. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 84 LOOKUPSWITCH L1030 Default-Case - true
   * Goal 19. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I177 Branch 86 IF_ICMPLT L1058 - false
   * Goal 20. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I183 Branch 87 IF_ICMPLT L1058 - true
   * Goal 21. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I196 Branch 89 IF_ICMPLT L1058 - true
   * Goal 22. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I6 Branch 110 IFNULL L1253 - false
   * Goal 23. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I13 Branch 111 IFEQ L1253 - true
   * Goal 24. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I25 Branch 112 IFEQ L1256 - true
   * Goal 25. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I82 Branch 114 IFEQ L1268 - false
   */

  @Test
  public void test74()  throws Throwable  {
      HashMap<StringLabel, HashableCoreMap> hashMap0 = new HashMap<StringLabel, HashableCoreMap>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.append("/^b-^2]X?N=I", (Object) jSONObject0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject1);
      
      Integer integer0 = new Integer((-2517));
      assertEquals((-2517), (int)integer0);
      
      String string0 = JSONObject.valueToString(integer0);
      assertEquals("-2517", string0);
      assertNotNull(string0);
      
      try {
        long long0 = jSONObject0.getLong("-2517");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-2517\"] not found.
         //
      }
  }

  //Test case number: 75
  /*
   * 15 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>()V: root-Branch
   * Goal 2. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I6 Branch 1 IFNULL L115 - true
   * Goal 3. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I33 Branch 17 IF_ICMPGE L263 - true
   * Goal 4. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I33 Branch 17 IF_ICMPGE L263 - false
   * Goal 5. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I58 Branch 18 IFLE L268 - true
   * Goal 6. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I58 Branch 18 IFLE L268 - false
   * Goal 7. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I78 Branch 19 IFLE L270 - true
   * Goal 8. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I92 Branch 20 IFLE L273 - true
   * Goal 9. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I92 Branch 20 IFLE L273 - false
   * Goal 10. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I100 Branch 21 IFEQ L273 - false
   * Goal 11. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I107 Branch 22 IFNE L273 - false
   * Goal 12. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I116 Branch 23 IF_ICMPNE L276 - true
   * Goal 13. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I135 Branch 24 IFNE L278 - false
   * Goal 14. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I6 Branch 121 IFNULL L1304 - false
   * Goal 15. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I13 Branch 122 IFEQ L1304 - false
   */

  @Test
  public void test75()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
      
      JSONObject jSONObject0 = new JSONObject(object0);
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = JSONObject.valueToString(object0, (-12), (-12));
      assertEquals("null", string0);
      assertNotNull(string0);
  }

  //Test case number: 76
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/util/Map;)V: I11 Branch 16 IFNONNULL L234 - false
   */

  @Test
  public void test76()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
  }

  //Test case number: 77
  /*
   * 12 covered goals:
   * Goal 1. wheel.json.JSONObject.keys()Ljava/util/Iterator;: root-Branch
   * Goal 2. wheel.json.JSONObject.length()I: root-Branch
   * Goal 3. wheel.json.JSONObject.<init>(Ljava/util/Map;)V: I11 Branch 16 IFNONNULL L234 - true
   * Goal 4. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I11 Branch 50 IFNE L548 - true
   * Goal 5. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I37 Branch 51 IFEQ L554 - true
   * Goal 6. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I37 Branch 51 IFEQ L554 - false
   * Goal 7. wheel.json.JSONObject.put(Ljava/lang/String;Z)Lwheel/json/JSONObject;: I8 Branch 68 IFEQ L902 - false
   * Goal 8. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 69 IFNONNULL L975 - true
   * Goal 9. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I20 Branch 70 IFNULL L978 - false
   * Goal 10. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I6 Branch 91 IFNULL L1088 - false
   * Goal 11. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I14 Branch 92 IFEQ L1089 - true
   * Goal 12. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I45 Branch 95 IFEQ L1094 - true
   */

  @Test
  public void test77()  throws Throwable  {
      HashMap<Object, CategoryWordTag> hashMap0 = new HashMap<Object, CategoryWordTag>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("| GPE>0>ncU/w", true);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(stringArray0);
  }
}
