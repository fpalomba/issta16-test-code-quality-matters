/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 18 04:10:04 GMT 2015
 */

package wheel.json;

import static org.junit.Assert.*;
import org.junit.Test;
import edu.stanford.nlp.ling.BasicDocument;
import edu.stanford.nlp.ling.CategoryWordTag;
import edu.stanford.nlp.ling.IndexedWord;
import edu.stanford.nlp.ling.LabeledWord;
import edu.stanford.nlp.ling.StringLabel;
import edu.stanford.nlp.ling.Tag;
import edu.stanford.nlp.ling.WordLemmaTag;
import edu.stanford.nlp.sequences.SeqClassifierFlags;
import edu.stanford.nlp.util.ArrayCoreMap;
import edu.stanford.nlp.util.DeltaIndex;
import edu.stanford.nlp.util.HasInterval;
import edu.stanford.nlp.util.HashIndex;
import edu.stanford.nlp.util.HashableCoreMap;
import edu.stanford.nlp.util.Index;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I105 Branch 128 IFEQ L1326 - false
   */

  @Test
  public void test00()  throws Throwable  {
      HashIndex<Class<HashableCoreMap>> hashIndex0 = new HashIndex<Class<HashableCoreMap>>(906);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertNotNull(hashIndex0);
      
      DeltaIndex<Class<HashableCoreMap>> deltaIndex0 = new DeltaIndex<Class<HashableCoreMap>>((Index<Class<HashableCoreMap>>) hashIndex0, (Index<Class<HashableCoreMap>>) hashIndex0);
      assertFalse(deltaIndex0.isLocked());
      assertTrue(deltaIndex0.isEmpty());
      assertEquals(0, deltaIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertNotNull(deltaIndex0);
      
      JSONArray jSONArray0 = new JSONArray((Collection) deltaIndex0);
      assertFalse(deltaIndex0.isLocked());
      assertTrue(deltaIndex0.isEmpty());
      assertEquals(0, deltaIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      String string0 = JSONObject.valueToString(jSONArray0, 906, 906);
      assertEquals("[]", string0);
      assertFalse(deltaIndex0.isLocked());
      assertTrue(deltaIndex0.isEmpty());
      assertEquals(0, deltaIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertEquals(0, jSONArray0.length());
      assertNotNull(string0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I84 Branch 135 IFEQ L1367 - false
   */

  @Test
  public void test01()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      HashIndex<JSONArray> hashIndex0 = new HashIndex<JSONArray>();
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertNotNull(hashIndex0);
      
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) hashIndex0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      
      StringWriter stringWriter0 = new StringWriter(1383);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = (StringWriter)jSONObject0.write((Writer) stringWriter0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals(1, jSONObject0.length());
      assertEquals("{\"\":[]}", stringWriter0.toString());
      assertEquals("{\"\":[]}", stringWriter1.toString());
      assertNotNull(stringWriter1);
  }

  //Test case number: 2
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I156 Branch 120 IFEQ L1281 - false
   * Goal 2. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I28 Branch 133 IFEQ L1358 - false
   * Goal 3. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I65 Branch 134 IFEQ L1365 - true
   * Goal 4. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I84 Branch 135 IFEQ L1367 - true
   */

  @Test
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "0";
      stringArray0[3] = "0";
      JSONObject jSONObject0 = new JSONObject((Object) "0");
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = (StringWriter)jSONObject0.write((Writer) stringWriter0);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter0, stringWriter1);
      assertEquals(3, jSONObject0.length());
      assertEquals("{\"bytes\":[48],\"class\":\"class java.lang.String\",\"empty\":false}", stringWriter1.toString());
      assertEquals("{\"bytes\":[48],\"class\":\"class java.lang.String\",\"empty\":false}", stringWriter0.toString());
      assertNotNull(stringWriter1);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I12 Branch 67 IFNULL L889 - false
   */

  @Test
  public void test03()  throws Throwable  {
      HashMap<JSONArray, HasInterval<Float>> hashMap0 = new HashMap<JSONArray, HasInterval<Float>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.append("", (Object) jSONObject0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject1);
      
      // Undeclared exception!
      try {
        String string0 = jSONObject1.optString("");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I13 Branch 111 IFEQ L1253 - false
   */

  @Test
  public void test04()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
      
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
      assertNotNull(string0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optLong(Ljava/lang/String;)J: root-Branch
   */

  @Test
  public void test05()  throws Throwable  {
      HashMap<CategoryWordTag, JSONObject> hashMap0 = new HashMap<CategoryWordTag, JSONObject>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(jSONObject0);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      SeqClassifierFlags seqClassifierFlags0 = new SeqClassifierFlags(properties0);
      assertFalse(seqClassifierFlags0.useChPos);
      assertFalse(seqClassifierFlags0.useNB);
      assertFalse(seqClassifierFlags0.evaluateBackground);
      assertFalse(seqClassifierFlags0.regularizeSoftmaxTieParam);
      assertFalse(seqClassifierFlags0.sighanPostProcessing);
      assertFalse(seqClassifierFlags0.useASBCSuf1);
      assertFalse(seqClassifierFlags0.useNegCTBDict4);
      assertFalse(seqClassifierFlags0.useNegHKDict4);
      assertFalse(seqClassifierFlags0.useNegCTBDict2);
      assertFalse(seqClassifierFlags0.useNegCTBDict3);
      assertFalse(seqClassifierFlags0.fakeDataset);
      assertFalse(seqClassifierFlags0.useDictASBC2);
      assertEquals(2, seqClassifierFlags0.CRFwindow);
      assertFalse(seqClassifierFlags0.useHardGE);
      assertFalse(seqClassifierFlags0.useNegHKDict3);
      assertFalse(seqClassifierFlags0.useNegHKDict2);
      assertFalse(seqClassifierFlags0.bioSubmitOutput);
      assertEquals(0.1, seqClassifierFlags0.initialGain, 0.01D);
      assertFalse(seqClassifierFlags0.useMsr);
      assertFalse(seqClassifierFlags0.transitionEdgeOnly);
      assertFalse(seqClassifierFlags0.intern2);
      assertFalse(seqClassifierFlags0.useNumberFeature);
      assertFalse(seqClassifierFlags0.useDisjunctiveShapeInteraction);
      assertFalse(seqClassifierFlags0.useUnknown);
      assertFalse(seqClassifierFlags0.useMSRChar2);
      assertFalse(seqClassifierFlags0.useDictHK2);
      assertFalse(seqClassifierFlags0.useParenMatching);
      assertFalse(seqClassifierFlags0.doFE);
      assertFalse(seqClassifierFlags0.useGenericFeatures);
      assertFalse(seqClassifierFlags0.useKL);
      assertEquals(0.0, seqClassifierFlags0.priorLambda, 0.01D);
      assertEquals(1, seqClassifierFlags0.numDatasetsPerFile);
      assertFalse(seqClassifierFlags0.prependEmbedding);
      assertFalse(seqClassifierFlags0.printTrainLabels);
      assertEquals(1.0, seqClassifierFlags0.adaptSigma, 0.01D);
      assertEquals(0.9, seqClassifierFlags0.selfTrainConfidenceThreshold, 0.01D);
      assertEquals((-1), seqClassifierFlags0.arbitraryInputLayerSize);
      assertFalse(seqClassifierFlags0.useReverse);
      assertFalse(seqClassifierFlags0.useSeenFeaturesOnly);
      assertFalse(seqClassifierFlags0.useNERPriorBIO);
      assertFalse(seqClassifierFlags0.purgeDatasets);
      assertFalse(seqClassifierFlags0.dropoutApprox);
      assertEquals(0.0, seqClassifierFlags0.alignmentPruneThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.sparseOutputLayer);
      assertTrue(seqClassifierFlags0.applyNERPenalty);
      assertFalse(seqClassifierFlags0.useWord4);
      assertFalse(seqClassifierFlags0.strictlyZeroethOrder);
      assertFalse(seqClassifierFlags0.useWord3);
      assertFalse(seqClassifierFlags0.usePhraseWordTags);
      assertEquals(1000, seqClassifierFlags0.wordSegBeamSize);
      assertFalse(seqClassifierFlags0.groupByFeatureTemplate);
      assertFalse(seqClassifierFlags0.usePrediction2);
      assertFalse(seqClassifierFlags0.useNegDict3);
      assertEquals(10, seqClassifierFlags0.totalDataSlice);
      assertFalse(seqClassifierFlags0.useNegDict4);
      assertEquals(0, seqClassifierFlags0.hybridCutoffIteration);
      assertFalse(seqClassifierFlags0.useNegDict2);
      assertEquals(0.0, seqClassifierFlags0.removeTopNPercent, 0.01D);
      assertFalse(seqClassifierFlags0.useWord2);
      assertFalse(seqClassifierFlags0.useWord1);
      assertFalse(seqClassifierFlags0.useWideDisjunctive);
      assertFalse(seqClassifierFlags0.useBerkeleyCompetitivePosterior);
      assertFalse(seqClassifierFlags0.useLC);
      assertFalse(seqClassifierFlags0.useIsDateRange);
      assertFalse(seqClassifierFlags0.retainEntitySubclassification);
      assertFalse(seqClassifierFlags0.useTopics);
      assertFalse(seqClassifierFlags0.useRobustQN);
      assertEquals(0, seqClassifierFlags0.startEvaluateIters);
      assertFalse(seqClassifierFlags0.useDict2);
      assertFalse(seqClassifierFlags0.useMidDotShape);
      assertFalse(seqClassifierFlags0.readStdin);
      assertFalse(seqClassifierFlags0.useABSTR);
      assertTrue(seqClassifierFlags0.useInternal);
      assertFalse(seqClassifierFlags0.removeStrictGoodCoNLLDuplicates);
      assertFalse(seqClassifierFlags0.usePrev);
      assertFalse(seqClassifierFlags0.useMoreAbbr);
      assertEquals((-1), seqClassifierFlags0.purgeFeatures);
      assertFalse(seqClassifierFlags0.dualDecompAlignment);
      assertEquals(0, seqClassifierFlags0.scaledSGDMethod);
      assertEquals((-1), seqClassifierFlags0.SGDPasses);
      assertFalse(seqClassifierFlags0.useNoisyNonNoisyFeature);
      assertFalse(seqClassifierFlags0.strictGoodCoNLL);
      assertFalse(seqClassifierFlags0.strictlySecondOrder);
      assertFalse(seqClassifierFlags0.combo);
      assertFalse(seqClassifierFlags0.useCRFforUnsup);
      assertFalse(seqClassifierFlags0.useHk);
      assertFalse(seqClassifierFlags0.learnENBasedOnCH);
      assertEquals(1.0, seqClassifierFlags0.lambdaCH, 0.01D);
      assertFalse(seqClassifierFlags0.printWeights);
      assertFalse(seqClassifierFlags0.useFREQ);
      assertEquals(0, seqClassifierFlags0.numOfSlices);
      assertFalse(seqClassifierFlags0.twoStage);
      assertEquals((-1), seqClassifierFlags0.samplingSpeedUpThreshold);
      assertEquals(0, seqClassifierFlags0.multiThreadClassifier);
      assertFalse(seqClassifierFlags0.greekifyNGrams);
      assertFalse(seqClassifierFlags0.usePosition);
      assertFalse(seqClassifierFlags0.skipOutputRegularization);
      assertFalse(seqClassifierFlags0.useWordShapeGaz);
      assertEquals(1, seqClassifierFlags0.selfTrainIterations);
      assertFalse(seqClassifierFlags0.useLabelSource);
      assertFalse(seqClassifierFlags0.useOnlySeenWeights);
      assertFalse(seqClassifierFlags0.tuneSGD);
      assertFalse(seqClassifierFlags0.useSymWordPairs);
      assertFalse(seqClassifierFlags0.useLastRealWord);
      assertFalse(seqClassifierFlags0.useRad2b);
      assertEquals(0, seqClassifierFlags0.numTimesPruneFeatures);
      assertFalse(seqClassifierFlags0.randomLopWeights);
      assertFalse(seqClassifierFlags0.subCWGaz);
      assertFalse(seqClassifierFlags0.useOrdinal);
      assertFalse(seqClassifierFlags0.useEntityTypeSequences);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSize, 0.01D);
      assertFalse(seqClassifierFlags0.doAdaptation);
      assertFalse(seqClassifierFlags0.blockInitialize);
      assertFalse(seqClassifierFlags0.useSentenceNumber);
      assertFalse(seqClassifierFlags0.useTitle);
      assertFalse(seqClassifierFlags0.useCTBPre1);
      assertFalse(seqClassifierFlags0.useNoisyLabel);
      assertTrue(seqClassifierFlags0.useQN);
      assertEquals(0, seqClassifierFlags0.maxDocSize);
      assertFalse(seqClassifierFlags0.useWordn);
      assertFalse(seqClassifierFlags0.normalizeTerms);
      assertFalse(seqClassifierFlags0.useShapeStrings);
      assertFalse(seqClassifierFlags0.useHybrid);
      assertFalse(seqClassifierFlags0.useDictleng);
      assertEquals(25, seqClassifierFlags0.QNsize);
      assertFalse(seqClassifierFlags0.useFeaturesCpC6gram);
      assertFalse(seqClassifierFlags0.useWEBFreqDict);
      assertFalse(seqClassifierFlags0.appendLC);
      assertFalse(seqClassifierFlags0.iobTags);
      assertFalse(seqClassifierFlags0.useCommonWordsFeature);
      assertFalse(seqClassifierFlags0.useABSTRFreq);
      assertFalse(seqClassifierFlags0.useVB);
      assertFalse(seqClassifierFlags0.useFirstWord);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesAll);
      assertFalse(seqClassifierFlags0.useLongSequences);
      assertEquals(0.0, seqClassifierFlags0.l1reg, 0.01D);
      assertFalse(seqClassifierFlags0.useACR);
      assertFalse(seqClassifierFlags0.useSGD);
      assertFalse(seqClassifierFlags0.usePKPre1);
      assertFalse(seqClassifierFlags0.softmaxOutputLayer);
      assertTrue(seqClassifierFlags0.separateASCIIandRange);
      assertFalse(seqClassifierFlags0.hardcodeSoftmaxOutputWeights);
      assertFalse(seqClassifierFlags0.verboseMode);
      assertFalse(seqClassifierFlags0.useOutDict2);
      assertEquals(0.1, seqClassifierFlags0.gainSGD, 0.01D);
      assertFalse(seqClassifierFlags0.use2W);
      assertFalse(seqClassifierFlags0.useFloat);
      assertFalse(seqClassifierFlags0.outputIterationsToFile);
      assertEquals(1, seqClassifierFlags0.numTimesRemoveTopN);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions);
      assertTrue(seqClassifierFlags0.includeC2EViterbi);
      assertEquals(0.0, seqClassifierFlags0.softmaxTieLambda, 0.01D);
      assertFalse(seqClassifierFlags0.testVariance);
      assertFalse(seqClassifierFlags0.useScaledSGD);
      assertFalse(seqClassifierFlags0.useDisjShape);
      assertFalse(seqClassifierFlags0.removeBackgroundSingletonFeatures);
      assertEquals(0, seqClassifierFlags0.multiThreadGibbs);
      assertFalse(seqClassifierFlags0.noNeighborConstraints);
      assertFalse(seqClassifierFlags0.backpropLopTraining);
      assertFalse(seqClassifierFlags0.saveFeatureIndexToDisk);
      assertFalse(seqClassifierFlags0.useSGDtoQN);
      assertFalse(seqClassifierFlags0.useTOK);
      assertFalse(seqClassifierFlags0.useUnicodeType);
      assertEquals(0, seqClassifierFlags0.maxQNItr);
      assertFalse(seqClassifierFlags0.expandMidDot);
      assertFalse(seqClassifierFlags0.useUnicodeType5gram);
      assertTrue(seqClassifierFlags0.initViterbi);
      assertFalse(seqClassifierFlags0.normalize);
      assertFalse(seqClassifierFlags0.useNeighborNGrams);
      assertFalse(seqClassifierFlags0.powerAlignProb);
      assertEquals(1, seqClassifierFlags0.numFolds);
      assertFalse(seqClassifierFlags0.useSMD);
      assertFalse(seqClassifierFlags0.useAdaDiff);
      assertFalse(seqClassifierFlags0.useDisjunctive);
      assertFalse(seqClassifierFlags0.usePKChar2);
      assertEquals(0.1, seqClassifierFlags0.initRate, 0.01D);
      assertEquals(1.0, seqClassifierFlags0.sigma, 0.01D);
      assertEquals(25, seqClassifierFlags0.QNsize2);
      assertFalse(seqClassifierFlags0.useLemmas);
      assertFalse(seqClassifierFlags0.useBoundarySequences);
      assertFalse(seqClassifierFlags0.casedDistSim);
      assertFalse(seqClassifierFlags0.dontExtendTaggy);
      assertEquals(0.95, seqClassifierFlags0.adaDeltaRho, 0.01D);
      assertFalse(seqClassifierFlags0.useGoodForNamesCpC);
      assertFalse(seqClassifierFlags0.strictlyThirdOrder);
      assertFalse(seqClassifierFlags0.useTypeSeqs2);
      assertFalse(seqClassifierFlags0.useTypeSeqs3);
      assertFalse(seqClassifierFlags0.useBerkeleyAlignerForViterbi);
      assertFalse(seqClassifierFlags0.useNERPrior);
      assertEquals(1, seqClassifierFlags0.startFold);
      assertTrue(seqClassifierFlags0.useHiddenLayer);
      assertEquals(100, seqClassifierFlags0.numSamples);
      assertFalse(seqClassifierFlags0.usePk);
      assertTrue(seqClassifierFlags0.keepOBInMemory);
      assertFalse(seqClassifierFlags0.largeChSegFile);
      assertTrue(seqClassifierFlags0.useMemoryEvaluator);
      assertFalse(seqClassifierFlags0.baseline);
      assertFalse(seqClassifierFlags0.secondOrderNonLinear);
      assertEquals(1, seqClassifierFlags0.selfTrainWindowSize);
      assertFalse(seqClassifierFlags0.useASBCPre1);
      assertFalse(seqClassifierFlags0.tieOutputLayer);
      assertFalse(seqClassifierFlags0.useRule2);
      assertFalse(seqClassifierFlags0.memoryThrift);
      assertEquals(8, seqClassifierFlags0.maxAllowedChromaticSize);
      assertFalse(seqClassifierFlags0.addBiasToEmbedding);
      assertEquals(1, seqClassifierFlags0.kBest);
      assertEquals(1.0, seqClassifierFlags0.unsupDropoutScale, 0.01D);
      assertEquals((-1), seqClassifierFlags0.QNPasses);
      assertFalse(seqClassifierFlags0.useURLSequences);
      assertFalse(seqClassifierFlags0.ocrTrain);
      assertFalse(seqClassifierFlags0.useSymTags);
      assertFalse(seqClassifierFlags0.restrictTransitionsTimit);
      assertEquals(0.5, seqClassifierFlags0.alignmentDecodeThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.printNR);
      assertFalse(seqClassifierFlags0.useIfInteger);
      assertFalse(seqClassifierFlags0.mergeTags);
      assertFalse(seqClassifierFlags0.useCorefFeatures);
      assertFalse(seqClassifierFlags0.terminateOnEvalImprovement);
      assertEquals((-1), seqClassifierFlags0.wordShape);
      assertFalse(seqClassifierFlags0.use4Clique);
      assertFalse(seqClassifierFlags0.cacheNGrams);
      assertEquals(1.0, seqClassifierFlags0.dropoutScale, 0.01D);
      assertFalse(seqClassifierFlags0.groupByHiddenUnit);
      assertFalse(seqClassifierFlags0.useEitherSideDisjunctive);
      assertFalse(seqClassifierFlags0.useSigmoid);
      assertFalse(seqClassifierFlags0.useNGrams);
      assertFalse(seqClassifierFlags0.testHessSamples);
      assertEquals(0, seqClassifierFlags0.numOfFeatureSlices);
      assertFalse(seqClassifierFlags0.useNPGovernor);
      assertFalse(seqClassifierFlags0.useMoreTags);
      assertEquals(30, seqClassifierFlags0.beamSize);
      assertFalse(seqClassifierFlags0.useMUCFeatures);
      assertFalse(seqClassifierFlags0.suppressMidDotPostprocessing);
      assertFalse(seqClassifierFlags0.useMinimalAbbr);
      assertFalse(seqClassifierFlags0.geDebug);
      assertFalse(seqClassifierFlags0.useTrainLexicon);
      assertFalse(seqClassifierFlags0.useTypeSeqs);
      assertFalse(seqClassifierFlags0.useChunks);
      assertFalse(seqClassifierFlags0.useNextRealWord);
      assertFalse(seqClassifierFlags0.useAdaGradFOBOS);
      assertFalse(seqClassifierFlags0.useReverseAffix);
      assertFalse(seqClassifierFlags0.useEitherSideWord);
      assertFalse(seqClassifierFlags0.useUnicodeType4gram);
      assertEquals(Integer.MAX_VALUE, seqClassifierFlags0.printFeaturesUpto);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions3);
      assertEquals(1, seqClassifierFlags0.nerSlowerTimes);
      assertFalse(seqClassifierFlags0.factorInAlignmentProb);
      assertFalse(seqClassifierFlags0.useDistSim);
      assertFalse(seqClassifierFlags0.useTaggySequencesShapeInteraction);
      assertFalse(seqClassifierFlags0.printXML);
      assertFalse(seqClassifierFlags0.suppressTestDebug);
      assertTrue(seqClassifierFlags0.splitDocuments);
      assertFalse(seqClassifierFlags0.useDictPK2);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions2);
      assertFalse(seqClassifierFlags0.alternateTraining);
      assertFalse(seqClassifierFlags0.useClassFeature);
      assertFalse(seqClassifierFlags0.useNegASBCDict4);
      assertFalse(seqClassifierFlags0.useNegASBCDict3);
      assertFalse(seqClassifierFlags0.useHKChar2);
      assertFalse(seqClassifierFlags0.useNegASBCDict2);
      assertFalse(seqClassifierFlags0.useRandomSeed);
      assertFalse(seqClassifierFlags0.useEntityTypes);
      assertFalse(seqClassifierFlags0.lowercaseNGrams);
      assertFalse(seqClassifierFlags0.doFeatureDiscovery);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions3);
      assertFalse(seqClassifierFlags0.useHKPre1);
      assertEquals(2, seqClassifierFlags0.maxLeft);
      assertFalse(seqClassifierFlags0.groupByInput);
      assertFalse(seqClassifierFlags0.evaluateTrain);
      assertTrue(seqClassifierFlags0.useOutputLayer);
      assertFalse(seqClassifierFlags0.useMinimalAbbr1);
      assertFalse(seqClassifierFlags0.useNextSequences);
      assertFalse(seqClassifierFlags0.estimateInitial);
      assertEquals(0, seqClassifierFlags0.nerSkipFirstK);
      assertFalse(seqClassifierFlags0.sloppyGazette);
      assertFalse(seqClassifierFlags0.printFirstOrderProbs);
      assertFalse(seqClassifierFlags0.pctSegmenterScaleByCRF);
      assertFalse(seqClassifierFlags0.printFactorTable);
      assertEquals(10, seqClassifierFlags0.wideDisjunctionWidth);
      assertFalse(seqClassifierFlags0.useABGENE);
      assertFalse(seqClassifierFlags0.printProbs);
      assertFalse(seqClassifierFlags0.useKBest);
      assertFalse(seqClassifierFlags0.useSum);
      assertFalse(seqClassifierFlags0.booleanFeatures);
      assertFalse(seqClassifierFlags0.intern);
      assertFalse(seqClassifierFlags0.splitOnHead);
      assertFalse(seqClassifierFlags0.useBigramInTwoClique);
      assertFalse(seqClassifierFlags0.useOWLQN);
      assertFalse(seqClassifierFlags0.announceObjectBankEntries);
      assertEquals((-1), seqClassifierFlags0.numHiddenUnits);
      assertFalse(seqClassifierFlags0.useTags);
      assertFalse(seqClassifierFlags0.useOccurrencePatterns);
      assertFalse(seqClassifierFlags0.makeConsistent);
      assertFalse(seqClassifierFlags0.useGazFeatures);
      assertFalse(seqClassifierFlags0.useAdaDelta);
      assertFalse(seqClassifierFlags0.verboseForTrueCasing);
      assertFalse(seqClassifierFlags0.terminateOnAvgImprovement);
      assertFalse(seqClassifierFlags0.useStochasticQN);
      assertFalse(seqClassifierFlags0.useAbbr);
      assertFalse(seqClassifierFlags0.useChunkySequences);
      assertTrue(seqClassifierFlags0.restrictLabels);
      assertFalse(seqClassifierFlags0.useYear);
      assertFalse(seqClassifierFlags0.matchNERIncentive);
      assertEquals((-1), seqClassifierFlags0.maxNGramLeng);
      assertFalse(seqClassifierFlags0.useGEforSup);
      assertEquals(0, seqClassifierFlags0.interimOutputFreq);
      assertFalse(seqClassifierFlags0.useHeadGov);
      assertFalse(seqClassifierFlags0.useWordnetFeatures);
      assertTrue(seqClassifierFlags0.useDenero);
      assertEquals(0.0, seqClassifierFlags0.pctSegmenterScale, 0.01D);
      assertFalse(seqClassifierFlags0.numberEquivalenceDistSim);
      assertTrue(seqClassifierFlags0.initWithPosterior);
      assertEquals(10, seqClassifierFlags0.totalFeatureSlice);
      assertFalse(seqClassifierFlags0.useCWSWordFeatures);
      assertFalse(seqClassifierFlags0.keepAllWhitespaces);
      assertEquals(1, seqClassifierFlags0.multiThreadPerceptron);
      assertFalse(seqClassifierFlags0.nonLinearCRF);
      assertFalse(seqClassifierFlags0.normalizeTimex);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions2);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions3);
      assertFalse(seqClassifierFlags0.cleanGazette);
      assertEquals(1, seqClassifierFlags0.numStartLayers);
      assertTrue(seqClassifierFlags0.useKnownLCWords);
      assertFalse(seqClassifierFlags0.useFeaturesC6gram);
      assertFalse(seqClassifierFlags0.useMoreGazFeatures);
      assertFalse(seqClassifierFlags0.usePKSuf1);
      assertFalse(seqClassifierFlags0.conjoinShapeNGrams);
      assertFalse(seqClassifierFlags0.groupByOutputClass);
      assertEquals(8, seqClassifierFlags0.distSimMaxBits);
      assertFalse(seqClassifierFlags0.useExtraTaggySequences);
      assertFalse(seqClassifierFlags0.useProtoFeatures);
      assertFalse(seqClassifierFlags0.powerAlignProbAsAddition);
      assertFalse(seqClassifierFlags0.usePrediction);
      assertFalse(seqClassifierFlags0.useSuf);
      assertFalse(seqClassifierFlags0.useAcqPrior);
      assertFalse(seqClassifierFlags0.noMidNGrams);
      assertFalse(seqClassifierFlags0.useTaggySequences);
      assertEquals(1, seqClassifierFlags0.endFold);
      assertEquals(0, seqClassifierFlags0.removeTopN);
      assertFalse(seqClassifierFlags0.useWordPairs);
      assertEquals(0.0, seqClassifierFlags0.dropoutRate, 0.01D);
      assertFalse(seqClassifierFlags0.useUniformPrior);
      assertFalse(seqClassifierFlags0.dualDecompDebug);
      assertFalse(seqClassifierFlags0.useASBCChar2);
      assertFalse(seqClassifierFlags0.dehyphenateNGrams);
      assertFalse(seqClassifierFlags0.pctSegmenterLenAdjust);
      assertEquals(3, seqClassifierFlags0.charHalfWindow);
      assertFalse(seqClassifierFlags0.augmentedDateChars);
      assertFalse(seqClassifierFlags0.useUnicodeBlock);
      assertFalse(seqClassifierFlags0.testObjFunction);
      assertEquals(0, seqClassifierFlags0.featureCountThreshold);
      assertFalse(seqClassifierFlags0.weightByEntropy);
      assertFalse(seqClassifierFlags0.usePhraseFeatures);
      assertFalse(seqClassifierFlags0.useShapeConjunctions);
      assertEquals((-1), seqClassifierFlags0.maxIterations);
      assertFalse(seqClassifierFlags0.lowerNewgeneThreshold);
      assertFalse(seqClassifierFlags0.useGazettes);
      assertEquals(0.0, seqClassifierFlags0.annealingRate, 0.01D);
      assertEquals(15, seqClassifierFlags0.stochasticBatchSize);
      assertFalse(seqClassifierFlags0.useRadical);
      assertFalse(seqClassifierFlags0.useRad1);
      assertEquals(0, seqClassifierFlags0.ocrFold);
      assertFalse(seqClassifierFlags0.useFeaturesC4gram);
      assertFalse(seqClassifierFlags0.useRad2);
      assertFalse(seqClassifierFlags0.timitDatum);
      assertTrue(seqClassifierFlags0.useWord);
      assertFalse(seqClassifierFlags0.useSegmentation);
      assertFalse(seqClassifierFlags0.dump);
      assertFalse(seqClassifierFlags0.useABSTRFreqDict);
      assertFalse(seqClassifierFlags0.keepEmptySentences);
      assertFalse(seqClassifierFlags0.useBagOfWords);
      assertFalse(seqClassifierFlags0.useBilingualNERPrior);
      assertFalse(seqClassifierFlags0.useQuartic);
      assertEquals(4, seqClassifierFlags0.disjunctionWidth);
      assertFalse(seqClassifierFlags0.useSequentialScanSampling);
      assertFalse(seqClassifierFlags0.usePre);
      assertFalse(seqClassifierFlags0.keepEnglishWhitespaces);
      assertEquals(1, seqClassifierFlags0.bisequencePriorType);
      assertFalse(seqClassifierFlags0.useAbbr1);
      assertFalse(seqClassifierFlags0.useGazettePhrases);
      assertTrue(seqClassifierFlags0.useViterbi);
      assertEquals(100, seqClassifierFlags0.printClassifierParam);
      assertFalse(seqClassifierFlags0.useAs);
      assertFalse(seqClassifierFlags0.usePrevVB);
      assertEquals(0, seqClassifierFlags0.evaluateIters);
      assertFalse(seqClassifierFlags0.includeFullCRFInLOP);
      assertFalse(seqClassifierFlags0.justify);
      assertFalse(seqClassifierFlags0.useNegPKDict3);
      assertFalse(seqClassifierFlags0.useNegPKDict2);
      assertFalse(seqClassifierFlags0.useEntityRule);
      assertFalse(seqClassifierFlags0.useCTBSuf1);
      assertFalse(seqClassifierFlags0.printLabelValue);
      assertFalse(seqClassifierFlags0.useDictCTB2);
      assertFalse(seqClassifierFlags0.useGENIA);
      assertFalse(seqClassifierFlags0.useWEB);
      assertFalse(seqClassifierFlags0.useObservedSequencesOnly);
      assertFalse(seqClassifierFlags0.useNegPKDict4);
      assertFalse(seqClassifierFlags0.noEdgeFeature);
      assertEquals(0, seqClassifierFlags0.maxRight);
      assertFalse(seqClassifierFlags0.useBeginSent);
      assertFalse(seqClassifierFlags0.usePrevSequences);
      assertFalse(seqClassifierFlags0.useIsURL);
      assertTrue(seqClassifierFlags0.averagePerceptron);
      assertFalse(seqClassifierFlags0.randomLopFeatureSplit);
      assertFalse(seqClassifierFlags0.checkNameList);
      assertFalse(seqClassifierFlags0.useShapeStrings3);
      assertFalse(seqClassifierFlags0.useDualDecomp);
      assertFalse(seqClassifierFlags0.useYetMoreCpCShapes);
      assertEquals(0.0, seqClassifierFlags0.priorAlpha, 0.01D);
      assertFalse(seqClassifierFlags0.useFilter);
      assertFalse(seqClassifierFlags0.usePhraseWords);
      assertFalse(seqClassifierFlags0.useNextVB);
      assertFalse(seqClassifierFlags0.factorInBiEdgePotential);
      assertFalse(seqClassifierFlags0.useBig5);
      assertTrue(seqClassifierFlags0.learnCHBasedOnEN);
      assertTrue(seqClassifierFlags0.useCWSFeatures);
      assertFalse(seqClassifierFlags0.initWithNERPosterior);
      assertFalse(seqClassifierFlags0.useFeaturesCpC5gram);
      assertEquals(0.0, seqClassifierFlags0.featureWeightThreshold, 0.01D);
      assertTrue(seqClassifierFlags0.useSequences);
      assertFalse(seqClassifierFlags0.useCTBChar2);
      assertEquals(50, seqClassifierFlags0.SGD2QNhessSamples);
      assertFalse(seqClassifierFlags0.useFeaturesC5gram);
      assertFalse(seqClassifierFlags0.useHuber);
      assertFalse(seqClassifierFlags0.strictlyFirstOrder);
      assertFalse(seqClassifierFlags0.useShapeStrings1);
      assertFalse(seqClassifierFlags0.useWordTag);
      assertFalse(seqClassifierFlags0.useANTE);
      assertFalse(seqClassifierFlags0.useShapeStrings5);
      assertFalse(seqClassifierFlags0.useShapeStrings4);
      assertEquals(0.001, seqClassifierFlags0.adaGradEps, 0.01D);
      assertEquals(1.0, seqClassifierFlags0.randomizedRatio, 0.01D);
      assertFalse(seqClassifierFlags0.useTypeySequences);
      assertFalse(seqClassifierFlags0.useSemPrior);
      assertFalse(seqClassifierFlags0.useInPlaceSGD);
      assertTrue(seqClassifierFlags0.useExternal);
      assertEquals(0.01, seqClassifierFlags0.epsilon, 0.01D);
      assertEquals(1.0E-4, seqClassifierFlags0.tolerance, 0.01D);
      assertFalse(seqClassifierFlags0.dualDecompNotBIO);
      assertFalse(seqClassifierFlags0.iobWrapper);
      assertEquals(0.0, seqClassifierFlags0.newgeneThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.usePrevNextLemmas);
      assertFalse(seqClassifierFlags0.useChromaticSampling);
      assertFalse(seqClassifierFlags0.useHKSuf1);
      assertEquals(1.0, seqClassifierFlags0.lambdaEN, 0.01D);
      assertFalse(seqClassifierFlags0.perceptronDebug);
      assertFalse(seqClassifierFlags0.lazyUpdate);
      assertEquals(1, seqClassifierFlags0.CRForder);
      assertFalse(seqClassifierFlags0.useNext);
      assertEquals((-1), seqClassifierFlags0.tuneSampleSize);
      assertFalse(seqClassifierFlags0.doGibbs);
      assertFalse(seqClassifierFlags0.useRule);
      assertFalse(seqClassifierFlags0.usePhraseWordSpecialTags);
      assertEquals(0.0, seqClassifierFlags0.featureDiffThresh, 0.01D);
      assertEquals((-1), seqClassifierFlags0.labelDictionaryCutoff);
      assertEquals(1, seqClassifierFlags0.numRuns);
      assertEquals(0, seqClassifierFlags0.featureCountThresh);
      assertEquals(0, seqClassifierFlags0.dualDecompMaxItr);
      assertFalse(seqClassifierFlags0.useNPHead);
      assertEquals(1, seqClassifierFlags0.featureThreshold);
      assertEquals(1, seqClassifierFlags0.numLopExpert);
      assertFalse(seqClassifierFlags0.deleteBlankLines);
      assertFalse(seqClassifierFlags0.checkGradient);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSizeAlignment, 0.01D);
      assertFalse(seqClassifierFlags0.gradientDebug);
      assertFalse(seqClassifierFlags0.useEmbedding);
      assertFalse(seqClassifierFlags0.selfTest);
      assertFalse(seqClassifierFlags0.useLemmaAsWord);
      assertEquals(Double.POSITIVE_INFINITY, seqClassifierFlags0.searchGraphPrune, 0.01D);
      assertFalse(seqClassifierFlags0.useFeaturesCpC4gram);
      assertFalse(seqClassifierFlags0.useAltGazFeatures);
      assertEquals(1, seqClassifierFlags0.terminateOnEvalImprovementNumOfEpoch);
      assertFalse(seqClassifierFlags0.useObservedFeaturesOnly);
      assertFalse(seqClassifierFlags0.addCapitalFeatures);
      assertFalse(seqClassifierFlags0.dampDDStepSizeWithAlignmentProb);
      assertEquals(1, seqClassifierFlags0.multiThreadGrad);
      assertTrue(seqClassifierFlags0.biAlignmentPriorIsPMI);
      assertEquals(1.0, seqClassifierFlags0.alignDDAlpha, 0.01D);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesBigram);
      assertEquals("", seqClassifierFlags0.toString());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(seqClassifierFlags0);
      
      long long0 = jSONObject0.optLong("");
      assertEquals(0L, long0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I40 Branch 53 IFNE L574 - false
   */

  @Test
  public void test06()  throws Throwable  {
      WordLemmaTag wordLemmaTag0 = new WordLemmaTag();
      assertNull(wordLemmaTag0.word());
      assertNull(wordLemmaTag0.lemma());
      assertNull(wordLemmaTag0.value());
      assertNull(wordLemmaTag0.tag());
      assertNotNull(wordLemmaTag0);
      
      String[] stringArray0 = JSONObject.getNames((Object) wordLemmaTag0);
      assertNull(wordLemmaTag0.word());
      assertNull(wordLemmaTag0.lemma());
      assertNull(wordLemmaTag0.value());
      assertNull(wordLemmaTag0.tag());
      assertNull(stringArray0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getDouble(Ljava/lang/String;)D: I13 Branch 45 IFEQ L463 - false
   */

  @Test
  public void test07()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("LLw^t)2V&N.7/=U", (-1055L));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      double double0 = jSONObject0.getDouble("LLw^t)2V&N.7/=U");
      assertSame(jSONObject0, jSONObject1);
      assertEquals((-1055.0), double0, 0.01D);
      assertEquals(1, jSONObject0.length());
  }

  //Test case number: 8
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I6 Branch 1 IFNULL L115 - false
   * Goal 2. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I12 Branch 2 IF_ACMPNE L115 - true
   */

  @Test
  public void test08()  throws Throwable  {
      HashMap<Tag, IndexedWord> hashMap0 = new HashMap<Tag, IndexedWord>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("_Y yfPV7dyrtwV", 3016);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject1);
      
      String string0 = jSONObject1.getString("_Y yfPV7dyrtwV");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals("3016", string0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(string0);
      
      Tag tag0 = new Tag();
      assertNull(tag0.value());
      assertEquals(-1, tag0.beginPosition());
      assertNull(tag0.tag());
      assertEquals(-1, tag0.endPosition());
      assertNotNull(tag0);
      
      JSONObject jSONObject2 = jSONObject1.append("3016", (Object) tag0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertNull(tag0.value());
      assertEquals(-1, tag0.beginPosition());
      assertNull(tag0.tag());
      assertEquals(-1, tag0.endPosition());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject2.length());
      assertEquals(2, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject2);
      
      boolean boolean0 = jSONObject0.isNull("3016");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertFalse(boolean0);
      assertEquals(2, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I13 Branch 32 IFEQ L393 - false
   */

  @Test
  public void test09()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
      assertNotNull(string0);
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I76 Branch 126 IFEQ L1320 - false
   */

  @Test
  public void test10()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("MEb", false);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      String string0 = jSONObject1.toString(0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals("{\"MEb\": false}", string0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(string0);
  }

  //Test case number: 11
  /*
   * 9 covered goals:
   * Goal 1. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I41 Branch 42 IFNE L443 - true
   * Goal 2. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 76 LOOKUPSWITCH L1030 Case 8 - true
   * Goal 3. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 77 LOOKUPSWITCH L1030 Case 9 - true
   * Goal 4. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I177 Branch 86 IF_ICMPLT L1058 - true
   * Goal 5. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I183 Branch 87 IF_ICMPLT L1058 - false
   * Goal 6. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I189 Branch 88 IF_ICMPLT L1058 - false
   * Goal 7. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I196 Branch 89 IF_ICMPLT L1058 - false
   * Goal 8. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I202 Branch 90 IF_ICMPGE L1058 - true
   * Goal 9. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I202 Branch 90 IF_ICMPGE L1058 - false
   */

  @Test
  public void test11()  throws Throwable  {
      HashMap<IndexedWord, Integer> hashMap0 = new HashMap<IndexedWord, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject0);
      
      int int0 = jSONObject0.optInt("\t\u0BF0\t\u0C18\t\u0C40\t\u0C68\t\u0C90\t\u0CB8\u0000\u16D0\u0002\uD4D8\t\u0CE0\t\u0D08\u0002\uD410\t\u0D30\t\u0D58\t\u0D80\t\u0DA8\t\u0DD0\t\u0DF8\t\u0E20\t\u0E48\t\u0E70\u0000\uB0B8\u0000\u0140\t\u0E98\u0000\uC058\t\u0EC0\t\u0EE8\u0002\uD410\u0000\u14C8\u0000\uB9F0\t\u0F10\t\u0F38\t\u0F60\t\u0F88\t\u0FB0\t\u0FD8\t\u1000\t\u1028\u0000\u0140\u0002\uDB40\u0000\uB8B0\t\u1050\t\u1078\t\u10A0\t\u10C8\u0002\uDB40\u0000\uB8B0\u0000\u0140\u0002\uDB40\u0000\uB8B0\u0000\uB0B8\t\u10F0\t\u1118\t\u1140\t\u1168\t\u1190\t\u11B8\u0001\u2D90\t\u11E0\t\u1208\t\u1230\t\u1258\t\u1280\t\u12A8\t\u12D0\t\u12F8\t\u1320\u0000\u0140\t\u1348\t\u1370\t\u1398\t\u13C0\t\u13E8\t\u1410\t\u1438\t\u1460\t\u1488\t\u14B0\t\u14D8\t\u1500\t\u1528\t\u1550\t\u1578\t\u15A0\t\u15C8\t\u15F0\t\u1618\t\u1640\u0000\u0140\t\u1668\t\u1690\t\u16B8\t\u16E0\t\u1708\u0000\uC2B0\u0000\uB0B8\u0005\u8980\u0000\u0000\t\u1730\t\u1758\t\u1780\t\u17A8\t\u17D0\u0001\u2958\t\u17F8\t\u1820\t\u1848\t\u1870\t\u1898\t\u18C0\t\u18E8\t\u1910\t\u1938\t\u1960\t\u1988\t\u19B0\t\u19D8\t\u1A00\t\u1A28\t\u1A50\t\u1A78\u0000\u0140\u0001\u3880\u0001\u38A8\t\u1AA0\t\u1AC8\t\u1AF0\t\u1B18\t\u1B40\t\u1B68\t\u1B90\t\u1BB8\t\u1BE0\t\u1C08\t\u1C30\t\u1C58\u0003\u9918\u0003\u9940\u0000\u0140\u0000\u4178\u0000\u41A0\t\u1C80\t\u1CA8\t\u1CD0\t\u1CF8\t\u1D20\t\u1D48\t\u1D70\t\u1D98\t\u1DC0\t\u1DE8\t\u1E10\t\u1E38\t\u1E60\t\u1E88\t\u1EB0\t\u1ED8\t\u1F00\t\u1F28\t\u1F50\t\u1F78\t\u1FA0\t\u1FC8\t\u1FF0\t\u2018\t\u2040\t\u2068\t\u2090\t\u20B8\t\u20E0\t\u2108\t\u2130\t\u2158\t\u2180\t\u21A8\t\u21D0\t\u21F8\t\u2220\t\u2248\t\u2270\t\u2298\u0000\u0140\t\u22C0\u0000\u4178\u0000\u41A0\t\u22E8\t\u2310\t\u2338\t\u2360\t\u2388\t\u23B0\t\u23D8\t\u2400\t\u2428\t\u2450\t\u2478\t\u24A0\t\u24C8\t\u24F0\t\u2518\t\u2540\t\u2568\t\u2590\t\u25B8\t\u25E0\t\u2608\t\u2630\t\u2658\t\u2680\t\u26A8\t\u26D0\t\u26F8\t\u2720\t\u2748\t\u2770\t\u2798\u0003\u7A78\t\u27C0\t\u27E8\u0000\u0140\u0000\u3EF8\u0000\u3F20\t\u2810\t\u2838\t\u2860\t\u2888\t\u28B0\t\u28D8\t\u2900\t\u2928\t\u2950\t\u2978\u0000\u0140\t\u29A0\t\u29C8\t\u29F0\t\u2A18\t\u2A40\t\u2A68\u0000\u0140\t\u2A90\t\u2AB8\t\u2AE0\t\u2B08\t\u2B30\t\u2B58\t\u2B80\t\u2BA8\t\u2BD0\t\u2BF8\t\u2C20\t\u2C48\t\u2C70\t\u2C98\t\u2CC0\t\u2CE8\t\u2D10\t\u2D38\t\u2D60\t\u2D88\t\u2DB0\t\u2DD8\t\u2E00\t\u2E28\t\u2E50\t\u2E78\t\u2EA0\t\u2EC8\t\u2EF0\t\u2F18\t\u2F40\t\u2F68\t\u2F90\t\u2FB8\t\u2FE0\t\u3008\t\u3030\t\u3058\t\u3080\u0007\uFBE8\t\u30A8\t\u30D0\t\u30F8\t\u3120\t\u3148\t\u3170\t\u3198\t\u31C0\t\u31E8\t\u3210\t\u3238\t\u3260\t\u3288\t\u32B0\t\u32D8\t\u3300\u0001\u7020\t\u3328\t\u3350\t\u3378\t\u33A0\t\u33C8\t\u33F0\t\u3418\t\u3440\t\u3468\t\u3490\t\u34B8\t\u34E0\t\u3508\t\u3530\u0000\u0140\u0000\u38E0\u0001\u3A88\u0001\u3AB0\t\u3558\t\u3580\t\u35A8\t\u35D0\u0000\u4060\t\u35F8\t\u3620\t\u3648\t\u3670\u0000\u3E58\u0000\u0140\u0001\u3880\u0001\u38A8\t\u3698\t\u36C0\t\u36E8\t\u3710\t\u3738\u0000\u3F98\u0000\u4060\t\u3760\t\u3788\t\u37B0\t\u37D8\t\u3800\t\u3828\t\u3850\t\u3878\t\u38A0\t\u38C8\t\u38F0\t\u3918\t\u3940\t\u3968\t\u3990\t\u39B8\t\u39E0\t\u3A08\t\u3A30\t\u3A58\t\u3A80\t\u3AA8\t\u3AD0\t\u3AF8\t\u3B20\t\u3B48\t\u3B70\t\u3B98\t\u3BC0\t\u3BE8\t\u3C10\t\u3C38\t\u3C60\t\u3C88\t\u3CB0\t\u3CD8\u0000\u0140\u0000\u4178\u0000\u41A0\t\u3D00\t\u3D28\u0001\u3880\u0001\u38A8\t\u3D50\t\u3D78\t\u3DA0\t\u3DC8\t\u3DF0\t\u3E18\t\u3E40\t\u3E68\t\u3E90\t\u3EB8\t\u3EE0\t\u3F08\t\u3F30\t\u3F58\t\u3F80\t\u3FA8\t\u3FD0\t\u3FF8\t\u4020\t\u4048\t\u4070\t\u4098\t\u40C0\t\u40E8\t\u4110\u0001\u39C0\t\u4138\t\u4160\t\u4188\t\u41B0\t\u41D8\u0000\u0140\t\u4200\t\u4228\t\u4250\t\u4278\t\u42A0\t\u42C8\u0000\u0140\t\u42F0\u0000\u0140\t\u4318\t\u4340\t\u4368\t\u4390\t\u43B8\u0000\u0140\t\u43E0\t\u4408\t\u4430\t\u4458\t\u4480\t\u44A8\t\u44D0\t\u44F8\t\u4520\t\u4548\t\u4570\t\u4598\t\u45C0\t\u45E8\t\u4610\t\u4638\t\u4660\t\u4688\t\u46B0\u0000\u4060\t\u46D8\t\u4700\t\u4728\t\u4750\t\u4778\t\u47A0\u0000\u3F98\u0001\u3880\u0001\u38A8\t\u47C8\t\u47F0\t\u4818\t\u4840\t\u4868\t\u4890\t\u48B8\t\u48E0\t\u4908\t\u4930\t\u4958\t\u4980\t\u49A8\t\u49D0\t\u49F8\t\u4A20\t\u4A48\t\u4A70\t\u4A98\t\u4AC0\t\u4AE8\t\u4B10\t\u4B38\t\u4B60\t\u4B88\t\u4BB0\t\u4BD8\t\u4C00\t\u4C28\t\u4C50\t\u4C78\t\u4CA0\t\u4CC8\t\u4CF0\u0000\u0140\u0000\u4178\u0000\u41A0\t\u4D18\t\u4D40\t\u4D68\b\u1BF0\b\u1C18\t\u4D90\t\u4DB8\t\u4DE0\t\u4E08\t\u4E30\t\u4E58\t\u4E80\t\u4EA8\t\u4ED0\t\u4EF8\t\u4F20\t\u4F48\t\u4F70\t\u4F98\t\u4FC0\t\u4FE8\t\u5010\u0000\u0140\u0001\u2958\t\u5038\t\u5060\t\u5088\t\u50B0\t\u50D8\t\u5100\t\u5128\t\u5150\t\u5178\u0001\u39C0\u0001\u38A8\t\u51A0\t\u51C8\t\u51F0\t\u5218\t\u5240\t\u5268\t\u5290\t\u52B8\t\u52E0\t\u5308\t\u5330\t\u5358\t\u5380\t\u53A8\t\u53D0\t\u53F8\t\u5420\t\u5448\t\u5470\t\u5498\t\u54C0\t\u54E8\t\u5510\t\u5538\t\u5560\t\u5588\t\u55B0\t\u55D8\t\u5600\t\u5628\t\u5650\t\u5678\t\u56A0\t\u56C8\t\u56F0\t\u5718\t\u5740\t\u5768\t\u5790\t\u57B8\t\u57E0\t\u5808\t\u5830\t\u5858\t\u5880\t\u58A8\t\u58D0\t\u58F8\t\u5920\t\u5948\t\u5970\t\u5998\t\u59C0\u0006\uBC60\u0004\u4D90\u0006\uBC60\t\u59E8\u0001\uF360\u0001\uFBF8\t\u5A10\t\u5A38\t\u5A60\t\u5A88\t\u5AB0\t\u5AD8\t\u5B00\t\u5B28\u0001\uE938\t\u5B50\t\u5B78\t\u5BA0\t\u5BC8\t\u5BF0\t\u5C18\t\u5C40\t\u5C68\t\u5C90\t\u5CB8\t\u5CE0\t\u5D08\t\u5D30\t\u5D58\t\u5D80\t\u5DA8\t\u5DD0\t\u5DF8\t\u5E20\t\u5E48\t\u5E70\t\u5E98\t\u5EC0\t\u5EE8\t\u5F10\t\u5F38\u0001\uE938\t\u5F60\t\u5F88\u0002\u4590\t\u5FB0\t\u5FD8\t\u6000\t\u6028\t\u6050\t\u6078\t\u60A0\t\u60C8\t\u60F0\t\u6118\t\u6140\t\u6168\t\u6190\t\u61B8\t\u61E0\t\u6208\u0001\uF130\t\u6230\t\u6258\b\uC0A0\t\u6280\t\u62A8\t\u62D0\t\u62F8\u0002\uE928\u0001\uE9D8\u0001\uEA00\t\u6320\t\u6348\t\u6370\t\u6398\t\u63C0\t\u63E8\t\u6410\t\u6438\t\u6460\t\u6488\t\u64B0\u0001\uF130\u0001\uEE60\u0001\uEE88\t\u64D8\t\u6500\t\u6528\t\u6550\t\u6578\t\u65A0\t\u65C8\u0001\uEE60\u0001\uEE88\t\u65F0\u0001\uFBF8\t\u6618\t\u6640\t\u6668\t\u6690\t\u66B8\t\u66E0\t\u6708\t\u6730\t\u6758\t\u6780\t\u67A8\t\u67D0\t\u67F8\t\u6820\t\u6848\t\u6870\t\u6898\t\u68C0\t\u68E8\t\u6910\t\u6938\t\u6960\t\u6988\t\u69B0\t\u69D8\t\u6A00\u0001\uEE60\u0001\uEE88\t\u6A28\t\u6A50\t\u6A78\t\u6AA0\t\u6AC8\t\u6AF0\t\u6B18\t\u6B40\t\u6B68\u0001\uEE60\u0001\uEE88\t\u6B90\t\u6BB8\t\u6BE0\t\u6C08\t\u6C30\t\u6C58\t\u6C80\t\u6CA8\t\u6CD0\t\u6CF8\t\u6D20\t\u6D48\t\u6D70\t\u6D98\t\u6DC0\t\u6DE8\t\u6E10\t\u6E38\t\u6E60\t\u6E88\t\u6EB0\t\u6ED8\t\u6F00\t\u6F28\t\u6F50\t\u6F78\t\u6FA0\t\u6FC8\t\u6FF0\t\u7018\t\u7040\t\u7068\t\u7090\t\u70B8\t\u70E0\t\u7108\t\u7130\u0004\u86C0\t\u7158\u0004\u5628\t\u7180\t\u71A8\t\u71D0\t\u71F8\t\u7220\u0001\uFE28\t\u7248\t\u7270\u0001\uFB58\t\u7298\u0001\uF360\t\u72C0\u0000\u7148\u0001\uF4A0\t\u72E8\t\u7310\t\u7338\t\u7360\t\u7388\t\u73B0\t\u73D8\t\u7400\t\u7428\t\u7450\u0001\uF068\t\u7478\t\u74A0\t\u74C8\t\u74F0\t\u7518\t\u7540\t\u7568\t\u7590\t\u75B8\t\u75E0\t\u7608\u0002\uDB40\u0001\uF360\t\u7630\t\u7658\t\u7680\t\u76A8\t\u76D0\t\u76F8\t\u7720\t\u7748\t\u7770\t\u7798\t\u77C0\t\u77E8\t\u7810\t\u7838\t\u7860\t\u7888\t\u78B0\t\u78D8\t\u7900\t\u7928\t\u7950\u0004\uD300\u0006\uF888\t\u7978\t\u79A0\t\u79C8\t\u79F0\t\u7A18\t\u7A40\u0005\u2AF8\b\uC780\t\u7A68\t\u7A90\b\u7D70\t\u7AB8\t\u7AE0\t\u7B08\t\u7B30\t\u7B58\t\u7B80\t\u7BA8\t\u7BD0\t\u7BF8\t\u7C20\t\u7C48\t\u7C70\t\u7C98\t\u7CC0\t\u7CE8\t\u7D10\t\u7D38\t\u7D60\t\u7D88\t\u7DB0\t\u7DD8\t\u7E00\t\u7E28\t\u7E50\u0000\u73A0\t\u7E78\t\u7EA0\t\u7EC8\t\u7EF0\t\u7F18\t\u7F40\t\u7F68\t\u7F90\t\u7FB8\u0001\uED48\u0001\uED70\t\u7FE0\t\u8008\u0001\uF068\t\u8030\t\u8058\t\u8080\u0001\uFA68\u0001\uE708\u0004\u4D68\t\u80A8\t\u80D0\t\u80F8\t\u8120\t\u8148\t\u8170\t\u8198\t\u81C0\t\u81E8\b\u59A8\t\u8210\u0001\uEA50\t\u8238\t\u8260\t\u8288\t\u82B0\t\u82D8\t\u8300\t\u8328\b\uA200\t\u8350\t\u8378\t\u83A0\t\u83C8\t\u83F0\t\u8418\t\u8440\t\u8468\t\u8490\t\u84B8\t\u84E0\t\u8508\u0000\u7148\u0001\uF4A0\t\u8530\t\u8558\t\u8580\t\u85A8\t\u85D0\t\u85F8\t\u8620\t\u8648\t\u8670\t\u8698\t\u86C0\t\u86E8\u0001\u8308\t\u8710\t\u8738\t\u8760\t\u8788\t\u87B0\t\u87D8\t\u8800\t\u8828\u0001\uEE60\u0001\uEE88\t\u8850\t\u8878\u0001\uE708\u0004\u4D68\t\u88A0\t\u88C8\t\u88F0\t\u8918\t\u8940\t\u8968\t\u8990\t\u89B8\t\u89E0\t\u8A08\t\u8A30\t\u8A58\t\u8A80\t\u8AA8\u0001\uF360\t\u8AD0\t\u8AF8\t\u8B20\t\u8B48\t\u8B70\t\u8B98\t\u8BC0\t\u8BE8\t\u8C10\t\u8C38\t\u8C60\t\u8C88\t\u8CB0\t\u8CD8\t\u8D00\t\u8D28\u0004\u53D0\t\u0A88\t\u8D50\t\u8D78\t\u8DA0\t\u8DC8\t\u8DF0\t\u8E18\t\u8E40\t\u8E68\t\u8E90\t\u8EB8\t\u8EE0\t\u8F08\t\u8F30\t\u8F58\t\u8F80\t\u8FA8\t\u8FD0\t\u8FF8\t\u9020\t\u9048\t\u9070\t\u9098\u0000\u73A0\t\u90C0\t\u90E8\t\u9110\t\u9138\u0003\u7910\u0004\u4CF0\t\u9160\t\u9188\t\u91B0\t\u91D8\u0001\uEA50\t\u9200\u0004\u4C78\t\u9228\t\u9250\t\u9278\t\u92A0\t\u92C8\t\u92F0\t\u9318\t\u9340\t\u9368\t\u9390\t\u93B8\t\u93E0\u0001\uEA78\u0001\uE708\u0004\u4D68\t\u9408\t\u9430\t\u9458\t\u9480\t\u94A8\t\u94D0\t\u94F8\t\u9520\t\u9548\t\u9570\t\u9598\u0001\uE938\t\u95C0\u0001\uFBF8\t\u95E8\t\u9610\t\u9638\t\u9660\t\u9688\t\u96B0\u0004\u4C78\u0000\u7148\u0001\uF4A0\t\u96D8\t\u9700\t\u9728\t\u9750\t\u9778\t\u97A0\t\u97C8\t\u97F0\t\u9818\t\u9840\u0001\uF360\t\u9868\t\u9890\t\u98B8\t\u98E0\t\u9908\t\u9930\t\u9958\u0001\uF360\t\u9980\t\u99A8\t\u99D0\t\u99F8\t\u9A20\t\u9A48\t\u9A70\t\u9A98\t\u9AC0\t\u9AE8\u0001\uF360\t\u9B10\t\u9B38\t\u9B60\t\u9B88\u0001\u8308\u0004\uD300\u0006\uF888\u0001\uE938\t\u9BB0\t\u9BD8\t\u9C00\t\u9C28\t\u9C50\u0001\uEE60\u0001\uEE88\t\u9C78\t\u9CA0\t\u9CC8\t\u9CF0\t\u9D18\t\u9D40\t\u9D68\t\u9D90\t\u9DB8\t\u9DE0\t\u9E08\t\u9E30\t\u9E58\t\u9E80\t\u9EA8\t\u9ED0\t\u9EF8\t\u9F20\t\u9F48\t\u9F70\t\u9F98\t\u9FC0\t\u9FE8\t\uA010\t\uA038\t\uA060\t\uA088\t\uA0B0\t\uA0D8\t\uA100\t\uA128\t\uA150\t\uA178\t\uA1A0\u0001\uEBB8\u0001\uEA00\t\uA1C8\u0004\u4D68\t\uA1F0\t\uA218\t\uA240\t\uA268\t\uA290\t\uA2B8\t\uA2E0\t\uA308\t\uA330\t\uA358\t\uA380\t\uA3A8\t\uA3D0\t\uA3F8\t\uA420\t\uA448\t\uA470\t\uA498\t\uA4C0\t\uA4E8\t\uA510\t\uA538\t\uA560\t\uA588\t\uA5B0\u0001\uFE28\t\uA5D8\t\uA600\t\uA628\t\uA650\t\uA678\u0001\uE938\t\uA6A0\t\uA6C8\t\uA6F0\u0006\uA9C8\t\uA718\t\uA740\t\uA768\t\uA790\t\uA7B8\t\uA7E0\t\uA808\t\uA830\t\uA858\t\uA880\t\uA8A8\t\uA8D0\t\uA8F8\t\uA920\t\uA948\t\uA970\t\uA998\t\uA9C0\t\uA9E8\u0001\uEF00\t\uAA10\t\uAA38\t\uAA60\t\uAA88\t\uAAB0\t\uAAD8\t\uAB00\u0000\u0000\t\uAB28\t\uAB50\u0000\u0000\t\uAB78\t\uABA0\t\uABC8\t\uABF0\u0000\u0140\u0002\uDB40\u0000\uB8B0\t\uAC18\t\uAC40\t\uAC68\u0002\uD410\u0000\u0140\u0000\uB0B8\t\uAC90\t\uACB8\t\uACE0\t\uAD08\t\uAD30\u0000\u0140\u0000\u14C8\u0000\uB9F0\u0007\uDD48\u0002\uDB40\u0000\uB8B0\t\uAD58\u0000\u0140\t\uAD80\t\uADA8\u0000\uB6D0\u0000\u3980\u0000\u39A8\t\uADD0\t\uADF8\t\uAE20\t\uAE48\t\uAE70\t\uAE98\t\uAEC0\t\uAEE8\t\uAF10\t\uAF38\t\uAF60\t\uAF88\t\uAFB0\t\uAFD8\u0005\uDE08\t\uB000\t\uB028\t\uB050\t\uB078\t\uB0A0\t\uB0C8\t\uB0F0\t\uB118\t\uB140\u0000\u0140\u0000\u0140\u0000\uB6D0\u0000\u3980\u0000\u39A8\t\uB168\t\uB190\u0000\u0140\u0000\u0140\t\uB1B8\t\uB1E0\u0000\u1810\u0000\u1838\t\uB208\u0000\uC058\t\uB230\t\uB258\t\uB280\t\uB2A8\t\uB2D0\t\uB2F8\t\uB320\t\uB348\t\uB370\u0000\u0140\u0000\u0140\u0000\u0000\t\uB398\u0002\uD708\b\uFCF0\u0000\u0140\u0002\uDB40\u0000\uB8B0\t\uB3C0\u0000\u0140\t\uB3E8\u0000\uC1E8\t\uB410\t\uB438\t\uB460\u0000\u0140\u0000\u0140\u0000\uB860\u0002\uDB18\t\uB488\u0001\u2D90\t\uB4B0\t\uB4D8\u0000\uB8B0\u0005\u9920\t\uB500\t\uB528\t\uB550\t\uB578\t\uB5A0\t\uB5C8\t\uB5F0\t\uB618\t\uB640\t\uB668\t\uB690\t\uB6B8\t\uB6E0\t\uB708\t\uB730\u0006\uA298\t\uB758\t\uB780\u0001\u3880\u0001\u38A8\t\uB7A8\u0000\u4178\u0000\u41A0\t\uB7D0\t\uB7F8\t\uB820\t\uB848\u0001\u3B50\t\uB870\t\uB898\u0000\u0140\u0000\u4060\t\uB8C0\t\uB8E8\u0000\u0140\u0001\u3880\u0001\u38A8\t\uB910\t\uB938\t\uB960\t\uB988\u0006\u1030\u0006\u1058\t\uB9B0\t\uB9D8\t\uBA00\t\uBA28\t\uBA50\t\uBA78\t\uBAA0\t\uBAC8\t\uBAF0\t\uBB18\t\uBB40\u0000\u0140\u0001\u3880\u0001\u38A8\t\uBB68\u0001\u3858\u0000\u3F20\t\uBB90\t\uBBB8\t\uBBE0\t\uBC08\t\uBC30\t\uBC58\u0000\u0140\t\uBC80\t\uBCA8\t\uBCD0\t\uBCF8\u0000\u4178\u0000\u41A0\t\uBD20\t\uBD48\t\uBD70\t\uBD98\t\uBDC0\u0000\u3DE0\t\uBDE8\t\uBE10\u0000\u0140\u0000\u4178\u0000\u41A0\t\uBE38\t\uBE60\t\uBE88\t\uBEB0\t\uBED8\t\uBF00\t\uBF28\t\uBF50\t\uBF78\t\uBFA0\t\uBFC8\t\uBFF0\t\uC018\t\uC040\t\uC068\t\uC090\t\uC0B8\t\uC0E0\t\uC108\t\uC130\t\uC158\t\uC180\t\uC1A8\t\uC1D0\t\uC1F8\t\uC220\t\uC248\t\uC270\t\uC298\t\uC2C0\t\uC2E8\t\uC310\t\uC338\t\uC360\t\uC388\t\uC3B0\t\uC3D8\t\uC400\t\uC428\t\uC450\t\uC478\t\uC4A0\t\uC4C8\t\uC4F0\t\uC518\t\uC540\t\uC568\u0001\u39E8\u0000\u0140\u0000\u4060\t\uC590\t\uC5B8\t\uC5E0\t\uC608\t\uC630\t\uC658\u0001\u2958\u0000\u3F98\t\uC680\u0000\u0140\u0000\u3F98\t\uC6A8\t\uC6D0\t\uC6F8\t\uC720\t\uC748\u0000\u0140\u0000\u4178\u0000\u41A0\t\uC770\t\uC798\t\uC7C0\u0006\u79D0\u0000\u4060\t\uC7E8\t\uC810\t\uC838\t\uC860\t\uC888\t\uC8B0\t\uC8D8\t\uC900\t\uC928\t\uC950\t\uC978\t\uC9A0\t\uC9C8\t\uC9F0\t\uCA18\t\uCA40\t\uCA68\t\uCA90\t\uCAB8\t\uCAE0\t\uCB08\t\uCB30\t\uCB58\t\uCB80\t\uCBA8\t\uCBD0\t\uCBF8\t\uCC20\t\uCC48\t\uCC70\t\uCC98\t\uCCC0\t\uCCE8\t\uCD10\t\uCD38\t\uCD60\t\uCD88\t\uCDB0\t\uCDD8\t\uCE00\t\uCE28\t\uCE50\t\uCE78\t\uCEA0\t\uCEC8\t\uCEF0\t\uCF18\t\uCF40\u0000\u3EA8\t\uCF68\t\uCF90\t\uCFB8\t\uCFE0\t\uD008\t\uD030\t\uD058\t\uD080\t\uD0A8\t\uD0D0\t\uD0F8\t\uD120\t\uD148\t\uD170\t\uD198\t\uD1C0\t\uD1E8\t\uD210\t\uD238\t\uD260\t\uD288\t\uD2B0\t\uD2D8\t\uD300\t\uD328\t\uD350\t\uD378\t\uD3A0\t\uD3C8\t\uD3F0\t\uD418\t\uD440\t\uD468\t\uD490\t\uD4B8\t\uD4E0\t\uD508\t\uD530\t\uD558\t\uD580\t\uD5A8\u0000\u4060\t\uD5D0\t\uD5F8\t\uD620\t\uD648\u0003\u9238\t\uD670\t\uD698\u0001\uD678\u0001\uD6A0\t\uD6C0\u0000\u4178\u0000\u41A0\t\uD6E8\t\uD710\t\uD738\t\uD760\t\uD788\t\uD7B0\t\uD7D8\t\uD800\t\uD828\t\uD850\t\uD878\t\uD8A0\u0004\u50B0\u0001\uF360\t\uD8C8\t\uD8F0\t\uD918\u0004\u4C78\t\uD940\t\uD968\u0001\uE938\t\uD990\t\uD9B8\t\uD9E0\t\uDA08\t\uDA30\t\uDA58\u0006\uB418\u0006\uB440\u0000\u7148\u0001\uF4A0\b\uD518\t\uDA80\u0001\uEE60\u0001\uEE88\t\uDAA8\t\uDAD0\t\uDAF8\u0001\uF360\u0004\u50B0\t\uDB20\u0001\uF130\u0001\uEE60\u0001\uEE88\t\uDB48\t\uDB70\t\uDB98\u0001\uF068\t\uDBC0\u0001\uE708\u0004\u4D68\t\uDBE8\t\uDC10\t\uDC38\t\uDC60\t\uDC88\t\uDCB0\t\uDCD8\u0006\uB418\u0006\uB440\t\uDD00\t\uDD28\t\uDD50\u0001\uE5C8\t\uDD78\t\uDDA0\t\uDDC8\t\uDDF0\t\uDE18\u0006\uB418\u0006\uB440\u0001\uE500\u0001\uE528\t\uDE40\t\uDE68\t\uDE90\u0005\u8DE0\t\uDEB8\t\uDEE0\t\uDF08\t\uDF30\t\uDF58\t\uDF80\t\uDFA8\u0001\uEE60\u0001\uEE88\t\uDFD0\t\uDFF8\u0002\u0580\t\uE020\t\uE048\t\uE070\u0000\uC8A0\u0004\u4ED0\t\uE098\u0001\uEE60\u0001\uEE88\t\uE0C0\t\uE0E8\t\uE110\t\uE138\t\uE160\t\uE188\t\uE1B0\t\uE1D8\t\uE200\t\uE228\t\uE250\t\uE278\t\uE2A0\t\uE2C8\t\uE2F0\t\uE318\t\uE340\t\uE368\t\uE390\t\uE3B8\t\uE3E0\t\uE408\t\uE430\t\uE458\t\uE480\t\uE4A8\t\uD9B8\t\uE4D0\t\uE4F8\t\uE520\t\uE548\t\uE570\t\uE598\t\uE5C0\u0001\uE9D8\u0001\uEA00\t\uE5E8\t\uE610\u0001\uF130\u0001\uEE60\u0001\uEE88\t\uE638\t\uE660\t\uE688\t\uE6B0\t\uE6D8\t\uE700\t\uE728\t\uE750\t\uE778\t\uE7A0\t\uE7C8\t\uE7F0\t\uE818\t\uE840\u0004\u4B10\t\uE868\t\uE890\t\uE8B8\u0001\uEBE0\u0001\uEF50\u0004\u5060\t\uE8E0\b\u7550\t\uE908\t\uE930\t\uE958\t\uE980\t\uE9A8\u0001\uEB18\t\uE9D0\u0001\uEB18\t\uE9F8\t\uEA20\t\uEA48\u0001\uEE60\u0001\uEE88\t\uEA70\t\uEA98\u0001\uFBF8\t\uEAC0\t\uEAE8\u0001\uEF50\t\uEB10\t\uEB38\t\uEB60\t\uEB88\t\uEBB0\t\uEBD8\t\uEC00\t\uEC28\t\uEC50\t\uEC78\t\uECA0\t\uECC8\t\uECF0\t\uED18\t\uED40\t\uED68\t\uED90\t\uEDB8\t\uEDE0\t\uEE08\t\uEE30\t\uEE58\t\uEE80\t\uEEA8\t\uEED0\t\uEEF8\t\uEF20\u0001\u8308\t\uEF48\t\uEF70\t\uEF98\t\uEFC0\t\uEFE8\t\uF010\t\uF038\t\uF060\u0004\uD300\u0006\uF888\t\uF088\t\uF0B0\t\uF0D8\u0004\u4F70\t\uF100\t\uF128\t\uF150\t\uF178\u0001\uFD10\t\uF1A0\t\uF1C8\t\uF1F0\t\uF218\t\u6280\t\uF240\t\uF268\u0001\uF360\t\uF290\t\uF2B8\t\uF2E0\u0002\u0558\t\uF308\t\uF330\t\uF358\t\uF380\t\uF3A8\t\uF3D0\t\uF3F8\t\uF420\t\uF448\t\uF470\t\uF498\t\uF4C0\t\uF4E8\t\uF510\t\uF538\t\uF560\u0001\uF3D8\t\uF588\t\uF5B0\t\uF5D8\t\uF600\t\uF628\t\uF650\t\uF678\u0002\uD9B0\u0004\u5268\u0001\uF310\t\uF6A0\t\uF6C8\t\uF6F0\t\uF718\t\uF740\t\uF768\t\uF790\t\uF7B8\t\uF7E0\t\uF808\t\uF830\t\uF858\t\uF880\t\uF8A8\t\uF8D0\u0001\uF360\u0006\uBC60\t\uF8F8\u0001\uEA50\t\uF920\t\uF948\t\uF970\t\uF998\t\uF9C0\t\uF9E8\u0002\uBF98\u0002\uBFC0\t\uFA10\u0001\uEE60\u0001\uEE88\t\uFA38\t\uFA60\t\uFA88\t\uFAB0\t\uFAD8\u0000\u0000\u0000\u0140\t\uFB00\u0002\uDB40\u0000\uB8B0\t\uFB28\t\uFB50\u0000\u0000\t\uFB78\u0000\u0140\u0002\uDB40\u0000\uB8B0\t\uFBA0\t\uFBC8\t\uFBF0\t\uFC18\t\uFC40\t\uFC68\t\uFC90\t\uFCB8\u0000\u0000\t\uFCE0\t\uFD08\t\uFD30\u0002\uDB40\u0000\uB8B0\u0000\u0140\t\uFD58\t\uFD80\u0002\uDB40\u0000\uB8B0\u0002\uDB40\u0000\uB8B0\t\uFDA8\u0000\u0140\u0000\uBA18\t\uFDD0\t\uFDF8\t\uFE20\t\uFE48\t\uFE70\t\uFE98\u0000\u0140\t\uFEC0\t\uFEE8\t\uFF10\t\uFF38\t\uFF60\u0001\u5838\u0003\u98A0\u0003\u98C8\t\uFF88\u0000\u0140\u0001\u3880\u0001\u38A8\t\uFFB0\t\uFFD8\n\u0000\n(\nP\nx\n\u00A0\n\u00C8\n\u00F0\n\u0118\n\u0140\u0000\u0140\u0000\u4178\u0000\u41A0\n\u0168\n\u0190\n\u01B8\n\u01E0\n\u0208\n\u0230\n\u0258\n\u0280\n\u02A8\n\u02D0\n\u02F8\n\u0320\n\u0348\n\u0370\n\u0398\n\u03C0\n\u03E8\n\u0410\n\u0438\n\u0460\n\u0488\u0000\u0000\n\u04B0\n\u04D8\n\u0500\n\u0528\n\u0550\n\u0578\u0000\u0140\n\u05A0\n\u05C8\u0000\u4178\u0000\u41A0\n\u05F0\n\u0618\n\u0640\n\u0668\n\u0690\n\u06B8\n\u06E0\n\u0708\n\u0730\u0000\u4060\n\u0758\n\u0780\n\u07A8\n\u07D0\n\u07F8\n\u0820\n\u0848\u0000\u0140\u0001\u2958\u0000\u3F98\u0000\u3E58\n\u0870\n\u0898\n\u08C0\u0000\u0140\u0001\u39C0\u0001\u38A8\n\u08E8\n\u0910\n\u0938\n\u0960\n\u0988\n\u09B0\u0000\u0140\n\u09D8\n\u0A00\n\u0A28\n\u0A50\n\u0A78\n\u0AA0\n\u0AC8\n\u0AF0\n\u0B18\n\u0B40\n\u0B68\n\u0B90\n\u0BB8\u0000\u0140\u0001\u3880\u0001\u38A8\n\u0BE0\n\u0C08\n\u0C30\n\u0C58\n\u0C80\n\u0CA8\n\u0CD0\n\u0CF8\n\u0D20\n\u0D48\n\u0D70\n\u0D98\n\u0DC0\t\uB7D0\n\u0DE8\u0006\u2BB0\n\u0E10\n\u0E38\n\u0E60\n\u0E88\n\u0EB0\n\u0ED8\n\u0F00\n\u0F28\u0001\u3880\u0001\u38A8\u0000\u4178\u0000\u41A0\n\u0F50\n\u0F78\n\u0FA0\n\u0FC8\n\u0FF0\n\u1018\n\u1040\n\u1068\n\u1090\n\u10B8\n\u10E0\u0001\uF360\u0004\uD300\u0006\uF888\u0004\u9E30\u0004\u9E58\n\u1108\u0001\uFB08\u0001\uF360\n\u1130\u0001\uE708\u0004\u4D68\n\u1158\n\u1180\n\u11A8\n\u11D0\n\u11F8\n\u1220\n\u1248\n\u1270\n\u1298\n\u12C0\u0001\uEE60\u0001\uEE88\n\u12E8\n\u1310\n\u1338\n\u1360\n\u1388\u0001\uFB08\u0001\uF400\n\u13B0\n\u13D8\n\u1400\n\u1428\n\u1450\n\u1478\n\u14A0\n\u14C8\u0001\uF360\n\u14F0\n\u1518\n\u1540\u0001\uEE60\u0002\uC8A8\n\u1568\n\u1590\n\u15B8\n\u15E0\n\u1608\n\u1630\n\u1658\n\u1680\n\u16A8\n\u16D0\n\u16F8\n\u1720\u0001\uEA50\n\u1748\n\u1770\n\u1798\n\u17C0\n\u17E8\u0001\uF360\u0001\uEB18\u0000\u7058\n\u1810\n\u1838\n\u1860\n\u1888\n\u18B0\u0001\uEBB8\u0001\uEA00\u0004\u53D0\n\u18D8\n\u1900\n\u1928\n\u1950\u0001\uF360\u0001\uED20\n\u1978\n\u19A0\n\u19C8\n\u19F0\n\u1A18\n\u1A40\n\u1A68\n\u1A90\n\u1AB8\n\u1AE0\u0001\uE9D8\u0001\uEA00\u0001\uF4C8\n\u1B08\n\u1B30\n\u1B58\n\u1B80\n\u1BA8\n\u1BD0\n\u1BF8\n\u1C20\n\u1C48\n\u1C70\n\u1C98\n\u1CC0\n\u1CE8\n\u1D10\n\u1D38\u0006\uFD60\n\u1D60\n\u1D88\n\u1DB0\n\u1DD8\n\u1E00\u0001\uE9D8\u0001\uEA00\u0001\uEE60\u0001\uEE88\n\u1E28\n\u1E50\n\u1E78\u0001\uE708\u0004\u4D68\n\u1EA0\n\u1EC8\n\u1EF0\n\u1F18\u0000\u0000\n\u1F40\n\u1F68\n\u1F90\n\u1FB8\n\u1FE0\u0000\u0000\n\u2008\u0000\u0140\u0000\u0000\u0000\u0000\u0000\u0140\n\u2030\n\u2058\n\u2080\n\u20A8\n\u20D0\n\u20F8\n\u2120\n\u2148\n\u2170\n\u2198\n\u21C0\n\u21E8\u0000\u0140\n\u2210\n\u2238\u0000\u0140\u0001\u3880\u0001\u38A8\n\u2260\n\u2288\n\u22B0\u0000\u0140\u0000\u4178\u0000\u41A0\n\u22D8\n\u2300\n\u2328\n\u2350\n\u2378\u0000\u0000\n\u23A0\n\u23C8\n\u23F0\n\u2418\n\u2440\u0000\u0000\n\u2468\n\u2490\n\u24B8\n\u24E0\n\u2508\n\u2530\n\u2558\n\u2580\n\u25A8\n\u25D0\n\u25F8\n\u2620\n\u2648\n\u2670\n\u2698\n\u26C0\n\u26E8\n\u2710\u0000\u0000\n\u2738\n\u2760\n\u2788\n\u27B0\n\u27D8\n\u2800\n\u2828\n\u2850\n\u2878\n\u28A0\n\u28C8\n\u28F0\n\u2918\n\u2940\n\u2968\u0000\u0140\u0000\u4178\u0000\u41A0\n\u2990\n\u29B8\n\u29E0\n\u2A08\n\u2A30\n\u2A58\n\u2A80\n\u2AA8\n\u2AD0\n\u2AF8\n\u2B20\n\u2B48\n\u2B70\u0006\uBA58\n\u2B98\n\u2BC0\n\u2BE8\n\u2C10\n\u2C38\n\u2C60\n\u2C88\n\u2CB0\n\u2CD8\u0001\uE708\u0004\u4D68\n\u2D00\n\u2D28\u0001\uEE60\u0001\uEE88\n\u2D50\n\u2D78\n\u2DA0\n\u2DC8\n\u2DF0\n\u2E18\n\u2E40\n\u2E68\n\u2E90\u0001\uE708\u0004\u4D68\n\u2EB8\n\u2EE0\n\u2F08\n\u2F30\n\u2F58\n\u2F80\b\u59D0\n\u2FA8\n\u2FD0\n\u2FF8\n\u3020\n\u3048\n\u3070\n\u3098\n\u30C0\n\u30E8\n\u3110\n\u3138\n\u3160\b\u59D0\u0001\uEE60\u0001\uEE88\n\u3188\n\u31B0\u0004\u5150\n\u31D8\n\u3200\n\u3228\n\u3250\n\u3278\n\u32A0\n\u32C8\u0000\u0000\n\u32F0\u0000\u0140\u0000\u14C8\u0000\uB9F0\n\u3318\n\u3340\n\u3368\u0000\u0000\n\u3390\n\u33B8\n\u33E0\n\u3408\n\u3430\n\u3458\n\u3480\u0000\u0000\n\u34A8\n\u34D0\n\u34F8\n\u3520\n\u3548\u0000\u0140\u0000\u3EF8\u0000\u3F20\u0000\u0000\n\u3570\n\u3598\n\u35C0\n\u35E8\u0000\u0140\u0000\u4178\u0000\u41A0\u0000\u0140\n\u3610\n\u3638\n\u3660\n\u3688\n\u36B0\n\u36D8\n\u3700\n\u3728\n\u3750\n\u3778\n\u37A0\u0000\u0000\n\u3778\n\u37C8\n\u37F0\n\u3818\n\u3840\n\u3868\n\u3890\n\u38B8\u0000\u0000\n\u38E0\n\u3908\u0000\u0140\u0000\u4060\n\u3930\n\u3958\u0001\uFBF8\n\u3980\n\u39A8\n\u39D0\n\u39F8\n\u3A20\u0000\u7148\u0001\uF4A0\n\u3A48\u0000\u7148\u0000\u7170\n\u3A70\n\u3A98\u0001\uEE60\u0001\uEE88\n\u3AC0\n\u3AE8\n\u3B10\n\u3B38\n\u3B60\n\u3B88\n\u3BB0\n\u3BD8\u0005\u8DE0\n\u3C00\n\u3C28\n\u3C50\n\u3C78\u0001\uEA50\n\u3CA0\n\u3CC8\u0000\u0000\n\u3CF0\n\u3D18\u0000\u0000\n\u3D40\n\u3D68\n\u3D90\n\u3DB8\n\u3DE0\n\u3E08\n\u3E30\n\u3E58\n\u3E80\n\u3EA8\n\u3ED0\n\u3EF8\n\u3F20\n\u3F48\n\u3F70\n\u3F98\u0000\u38E0\n\u3FC0\n\u3FE8\n\u4010\n\u4038\n\u4060\n\u4088\n\u40B0\n\u40D8\u0001\u3948\n\u4100\n\u4128\n\u4150\n\u4178\n\u41A0\n\u41C8\n\u41F0\n\u4218\n\u4240\n\u4268\n\u4290\n\u42B8\n\u42E0\n\u4308\u0001\uF0B8\n\u4330\n\u4358\u0000\u0000\u0000\u0000\n\u4380\n\u43A8\n\u43D0\n\u43F8\n\u4420\n\u4448\u0000\u0000\u0000\u0000\n\u4470\n\u4470\n\u4498\n\u44C0\n\u44E8\n\u4510\n\u4538\n\u4560\u0000\u0000\n\u4588\u0001\uE938\n\u45B0\n\u45D8\n\u4600\n\u4628\u0000\u0000\u0000\u0000\n\u4650\n\u4678\n\u46A0\u0000\u0140\u0000\u4178\u0000\u41A0\n\u46C8\u0000\u0140\u0000\u4178\u0000\u41A0\u0000\u0000\n\u46F0\n\u4718\u0004\u5150\u0001\uEE60\u0001\uEE88\u0001\uEE60\u0001\uEE88\n\u4740\n\u4768\n\u4790\u0000\u0000\n\u47B8\n\u47E0\u0000\u0000\n\u4808\n\u4830\u0000\u0000\n\u4858\n\u4880\u0000\u0000", 0);
      assertEquals(0, int0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject1 = jSONObject0.put("\t\u0BF0\t\u0C18\t\u0C40\t\u0C68\t\u0C90\t\u0CB8\u0000\u16D0\u0002\uD4D8\t\u0CE0\t\u0D08\u0002\uD410\t\u0D30\t\u0D58\t\u0D80\t\u0DA8\t\u0DD0\t\u0DF8\t\u0E20\t\u0E48\t\u0E70\u0000\uB0B8\u0000\u0140\t\u0E98\u0000\uC058\t\u0EC0\t\u0EE8\u0002\uD410\u0000\u14C8\u0000\uB9F0\t\u0F10\t\u0F38\t\u0F60\t\u0F88\t\u0FB0\t\u0FD8\t\u1000\t\u1028\u0000\u0140\u0002\uDB40\u0000\uB8B0\t\u1050\t\u1078\t\u10A0\t\u10C8\u0002\uDB40\u0000\uB8B0\u0000\u0140\u0002\uDB40\u0000\uB8B0\u0000\uB0B8\t\u10F0\t\u1118\t\u1140\t\u1168\t\u1190\t\u11B8\u0001\u2D90\t\u11E0\t\u1208\t\u1230\t\u1258\t\u1280\t\u12A8\t\u12D0\t\u12F8\t\u1320\u0000\u0140\t\u1348\t\u1370\t\u1398\t\u13C0\t\u13E8\t\u1410\t\u1438\t\u1460\t\u1488\t\u14B0\t\u14D8\t\u1500\t\u1528\t\u1550\t\u1578\t\u15A0\t\u15C8\t\u15F0\t\u1618\t\u1640\u0000\u0140\t\u1668\t\u1690\t\u16B8\t\u16E0\t\u1708\u0000\uC2B0\u0000\uB0B8\u0005\u8980\u0000\u0000\t\u1730\t\u1758\t\u1780\t\u17A8\t\u17D0\u0001\u2958\t\u17F8\t\u1820\t\u1848\t\u1870\t\u1898\t\u18C0\t\u18E8\t\u1910\t\u1938\t\u1960\t\u1988\t\u19B0\t\u19D8\t\u1A00\t\u1A28\t\u1A50\t\u1A78\u0000\u0140\u0001\u3880\u0001\u38A8\t\u1AA0\t\u1AC8\t\u1AF0\t\u1B18\t\u1B40\t\u1B68\t\u1B90\t\u1BB8\t\u1BE0\t\u1C08\t\u1C30\t\u1C58\u0003\u9918\u0003\u9940\u0000\u0140\u0000\u4178\u0000\u41A0\t\u1C80\t\u1CA8\t\u1CD0\t\u1CF8\t\u1D20\t\u1D48\t\u1D70\t\u1D98\t\u1DC0\t\u1DE8\t\u1E10\t\u1E38\t\u1E60\t\u1E88\t\u1EB0\t\u1ED8\t\u1F00\t\u1F28\t\u1F50\t\u1F78\t\u1FA0\t\u1FC8\t\u1FF0\t\u2018\t\u2040\t\u2068\t\u2090\t\u20B8\t\u20E0\t\u2108\t\u2130\t\u2158\t\u2180\t\u21A8\t\u21D0\t\u21F8\t\u2220\t\u2248\t\u2270\t\u2298\u0000\u0140\t\u22C0\u0000\u4178\u0000\u41A0\t\u22E8\t\u2310\t\u2338\t\u2360\t\u2388\t\u23B0\t\u23D8\t\u2400\t\u2428\t\u2450\t\u2478\t\u24A0\t\u24C8\t\u24F0\t\u2518\t\u2540\t\u2568\t\u2590\t\u25B8\t\u25E0\t\u2608\t\u2630\t\u2658\t\u2680\t\u26A8\t\u26D0\t\u26F8\t\u2720\t\u2748\t\u2770\t\u2798\u0003\u7A78\t\u27C0\t\u27E8\u0000\u0140\u0000\u3EF8\u0000\u3F20\t\u2810\t\u2838\t\u2860\t\u2888\t\u28B0\t\u28D8\t\u2900\t\u2928\t\u2950\t\u2978\u0000\u0140\t\u29A0\t\u29C8\t\u29F0\t\u2A18\t\u2A40\t\u2A68\u0000\u0140\t\u2A90\t\u2AB8\t\u2AE0\t\u2B08\t\u2B30\t\u2B58\t\u2B80\t\u2BA8\t\u2BD0\t\u2BF8\t\u2C20\t\u2C48\t\u2C70\t\u2C98\t\u2CC0\t\u2CE8\t\u2D10\t\u2D38\t\u2D60\t\u2D88\t\u2DB0\t\u2DD8\t\u2E00\t\u2E28\t\u2E50\t\u2E78\t\u2EA0\t\u2EC8\t\u2EF0\t\u2F18\t\u2F40\t\u2F68\t\u2F90\t\u2FB8\t\u2FE0\t\u3008\t\u3030\t\u3058\t\u3080\u0007\uFBE8\t\u30A8\t\u30D0\t\u30F8\t\u3120\t\u3148\t\u3170\t\u3198\t\u31C0\t\u31E8\t\u3210\t\u3238\t\u3260\t\u3288\t\u32B0\t\u32D8\t\u3300\u0001\u7020\t\u3328\t\u3350\t\u3378\t\u33A0\t\u33C8\t\u33F0\t\u3418\t\u3440\t\u3468\t\u3490\t\u34B8\t\u34E0\t\u3508\t\u3530\u0000\u0140\u0000\u38E0\u0001\u3A88\u0001\u3AB0\t\u3558\t\u3580\t\u35A8\t\u35D0\u0000\u4060\t\u35F8\t\u3620\t\u3648\t\u3670\u0000\u3E58\u0000\u0140\u0001\u3880\u0001\u38A8\t\u3698\t\u36C0\t\u36E8\t\u3710\t\u3738\u0000\u3F98\u0000\u4060\t\u3760\t\u3788\t\u37B0\t\u37D8\t\u3800\t\u3828\t\u3850\t\u3878\t\u38A0\t\u38C8\t\u38F0\t\u3918\t\u3940\t\u3968\t\u3990\t\u39B8\t\u39E0\t\u3A08\t\u3A30\t\u3A58\t\u3A80\t\u3AA8\t\u3AD0\t\u3AF8\t\u3B20\t\u3B48\t\u3B70\t\u3B98\t\u3BC0\t\u3BE8\t\u3C10\t\u3C38\t\u3C60\t\u3C88\t\u3CB0\t\u3CD8\u0000\u0140\u0000\u4178\u0000\u41A0\t\u3D00\t\u3D28\u0001\u3880\u0001\u38A8\t\u3D50\t\u3D78\t\u3DA0\t\u3DC8\t\u3DF0\t\u3E18\t\u3E40\t\u3E68\t\u3E90\t\u3EB8\t\u3EE0\t\u3F08\t\u3F30\t\u3F58\t\u3F80\t\u3FA8\t\u3FD0\t\u3FF8\t\u4020\t\u4048\t\u4070\t\u4098\t\u40C0\t\u40E8\t\u4110\u0001\u39C0\t\u4138\t\u4160\t\u4188\t\u41B0\t\u41D8\u0000\u0140\t\u4200\t\u4228\t\u4250\t\u4278\t\u42A0\t\u42C8\u0000\u0140\t\u42F0\u0000\u0140\t\u4318\t\u4340\t\u4368\t\u4390\t\u43B8\u0000\u0140\t\u43E0\t\u4408\t\u4430\t\u4458\t\u4480\t\u44A8\t\u44D0\t\u44F8\t\u4520\t\u4548\t\u4570\t\u4598\t\u45C0\t\u45E8\t\u4610\t\u4638\t\u4660\t\u4688\t\u46B0\u0000\u4060\t\u46D8\t\u4700\t\u4728\t\u4750\t\u4778\t\u47A0\u0000\u3F98\u0001\u3880\u0001\u38A8\t\u47C8\t\u47F0\t\u4818\t\u4840\t\u4868\t\u4890\t\u48B8\t\u48E0\t\u4908\t\u4930\t\u4958\t\u4980\t\u49A8\t\u49D0\t\u49F8\t\u4A20\t\u4A48\t\u4A70\t\u4A98\t\u4AC0\t\u4AE8\t\u4B10\t\u4B38\t\u4B60\t\u4B88\t\u4BB0\t\u4BD8\t\u4C00\t\u4C28\t\u4C50\t\u4C78\t\u4CA0\t\u4CC8\t\u4CF0\u0000\u0140\u0000\u4178\u0000\u41A0\t\u4D18\t\u4D40\t\u4D68\b\u1BF0\b\u1C18\t\u4D90\t\u4DB8\t\u4DE0\t\u4E08\t\u4E30\t\u4E58\t\u4E80\t\u4EA8\t\u4ED0\t\u4EF8\t\u4F20\t\u4F48\t\u4F70\t\u4F98\t\u4FC0\t\u4FE8\t\u5010\u0000\u0140\u0001\u2958\t\u5038\t\u5060\t\u5088\t\u50B0\t\u50D8\t\u5100\t\u5128\t\u5150\t\u5178\u0001\u39C0\u0001\u38A8\t\u51A0\t\u51C8\t\u51F0\t\u5218\t\u5240\t\u5268\t\u5290\t\u52B8\t\u52E0\t\u5308\t\u5330\t\u5358\t\u5380\t\u53A8\t\u53D0\t\u53F8\t\u5420\t\u5448\t\u5470\t\u5498\t\u54C0\t\u54E8\t\u5510\t\u5538\t\u5560\t\u5588\t\u55B0\t\u55D8\t\u5600\t\u5628\t\u5650\t\u5678\t\u56A0\t\u56C8\t\u56F0\t\u5718\t\u5740\t\u5768\t\u5790\t\u57B8\t\u57E0\t\u5808\t\u5830\t\u5858\t\u5880\t\u58A8\t\u58D0\t\u58F8\t\u5920\t\u5948\t\u5970\t\u5998\t\u59C0\u0006\uBC60\u0004\u4D90\u0006\uBC60\t\u59E8\u0001\uF360\u0001\uFBF8\t\u5A10\t\u5A38\t\u5A60\t\u5A88\t\u5AB0\t\u5AD8\t\u5B00\t\u5B28\u0001\uE938\t\u5B50\t\u5B78\t\u5BA0\t\u5BC8\t\u5BF0\t\u5C18\t\u5C40\t\u5C68\t\u5C90\t\u5CB8\t\u5CE0\t\u5D08\t\u5D30\t\u5D58\t\u5D80\t\u5DA8\t\u5DD0\t\u5DF8\t\u5E20\t\u5E48\t\u5E70\t\u5E98\t\u5EC0\t\u5EE8\t\u5F10\t\u5F38\u0001\uE938\t\u5F60\t\u5F88\u0002\u4590\t\u5FB0\t\u5FD8\t\u6000\t\u6028\t\u6050\t\u6078\t\u60A0\t\u60C8\t\u60F0\t\u6118\t\u6140\t\u6168\t\u6190\t\u61B8\t\u61E0\t\u6208\u0001\uF130\t\u6230\t\u6258\b\uC0A0\t\u6280\t\u62A8\t\u62D0\t\u62F8\u0002\uE928\u0001\uE9D8\u0001\uEA00\t\u6320\t\u6348\t\u6370\t\u6398\t\u63C0\t\u63E8\t\u6410\t\u6438\t\u6460\t\u6488\t\u64B0\u0001\uF130\u0001\uEE60\u0001\uEE88\t\u64D8\t\u6500\t\u6528\t\u6550\t\u6578\t\u65A0\t\u65C8\u0001\uEE60\u0001\uEE88\t\u65F0\u0001\uFBF8\t\u6618\t\u6640\t\u6668\t\u6690\t\u66B8\t\u66E0\t\u6708\t\u6730\t\u6758\t\u6780\t\u67A8\t\u67D0\t\u67F8\t\u6820\t\u6848\t\u6870\t\u6898\t\u68C0\t\u68E8\t\u6910\t\u6938\t\u6960\t\u6988\t\u69B0\t\u69D8\t\u6A00\u0001\uEE60\u0001\uEE88\t\u6A28\t\u6A50\t\u6A78\t\u6AA0\t\u6AC8\t\u6AF0\t\u6B18\t\u6B40\t\u6B68\u0001\uEE60\u0001\uEE88\t\u6B90\t\u6BB8\t\u6BE0\t\u6C08\t\u6C30\t\u6C58\t\u6C80\t\u6CA8\t\u6CD0\t\u6CF8\t\u6D20\t\u6D48\t\u6D70\t\u6D98\t\u6DC0\t\u6DE8\t\u6E10\t\u6E38\t\u6E60\t\u6E88\t\u6EB0\t\u6ED8\t\u6F00\t\u6F28\t\u6F50\t\u6F78\t\u6FA0\t\u6FC8\t\u6FF0\t\u7018\t\u7040\t\u7068\t\u7090\t\u70B8\t\u70E0\t\u7108\t\u7130\u0004\u86C0\t\u7158\u0004\u5628\t\u7180\t\u71A8\t\u71D0\t\u71F8\t\u7220\u0001\uFE28\t\u7248\t\u7270\u0001\uFB58\t\u7298\u0001\uF360\t\u72C0\u0000\u7148\u0001\uF4A0\t\u72E8\t\u7310\t\u7338\t\u7360\t\u7388\t\u73B0\t\u73D8\t\u7400\t\u7428\t\u7450\u0001\uF068\t\u7478\t\u74A0\t\u74C8\t\u74F0\t\u7518\t\u7540\t\u7568\t\u7590\t\u75B8\t\u75E0\t\u7608\u0002\uDB40\u0001\uF360\t\u7630\t\u7658\t\u7680\t\u76A8\t\u76D0\t\u76F8\t\u7720\t\u7748\t\u7770\t\u7798\t\u77C0\t\u77E8\t\u7810\t\u7838\t\u7860\t\u7888\t\u78B0\t\u78D8\t\u7900\t\u7928\t\u7950\u0004\uD300\u0006\uF888\t\u7978\t\u79A0\t\u79C8\t\u79F0\t\u7A18\t\u7A40\u0005\u2AF8\b\uC780\t\u7A68\t\u7A90\b\u7D70\t\u7AB8\t\u7AE0\t\u7B08\t\u7B30\t\u7B58\t\u7B80\t\u7BA8\t\u7BD0\t\u7BF8\t\u7C20\t\u7C48\t\u7C70\t\u7C98\t\u7CC0\t\u7CE8\t\u7D10\t\u7D38\t\u7D60\t\u7D88\t\u7DB0\t\u7DD8\t\u7E00\t\u7E28\t\u7E50\u0000\u73A0\t\u7E78\t\u7EA0\t\u7EC8\t\u7EF0\t\u7F18\t\u7F40\t\u7F68\t\u7F90\t\u7FB8\u0001\uED48\u0001\uED70\t\u7FE0\t\u8008\u0001\uF068\t\u8030\t\u8058\t\u8080\u0001\uFA68\u0001\uE708\u0004\u4D68\t\u80A8\t\u80D0\t\u80F8\t\u8120\t\u8148\t\u8170\t\u8198\t\u81C0\t\u81E8\b\u59A8\t\u8210\u0001\uEA50\t\u8238\t\u8260\t\u8288\t\u82B0\t\u82D8\t\u8300\t\u8328\b\uA200\t\u8350\t\u8378\t\u83A0\t\u83C8\t\u83F0\t\u8418\t\u8440\t\u8468\t\u8490\t\u84B8\t\u84E0\t\u8508\u0000\u7148\u0001\uF4A0\t\u8530\t\u8558\t\u8580\t\u85A8\t\u85D0\t\u85F8\t\u8620\t\u8648\t\u8670\t\u8698\t\u86C0\t\u86E8\u0001\u8308\t\u8710\t\u8738\t\u8760\t\u8788\t\u87B0\t\u87D8\t\u8800\t\u8828\u0001\uEE60\u0001\uEE88\t\u8850\t\u8878\u0001\uE708\u0004\u4D68\t\u88A0\t\u88C8\t\u88F0\t\u8918\t\u8940\t\u8968\t\u8990\t\u89B8\t\u89E0\t\u8A08\t\u8A30\t\u8A58\t\u8A80\t\u8AA8\u0001\uF360\t\u8AD0\t\u8AF8\t\u8B20\t\u8B48\t\u8B70\t\u8B98\t\u8BC0\t\u8BE8\t\u8C10\t\u8C38\t\u8C60\t\u8C88\t\u8CB0\t\u8CD8\t\u8D00\t\u8D28\u0004\u53D0\t\u0A88\t\u8D50\t\u8D78\t\u8DA0\t\u8DC8\t\u8DF0\t\u8E18\t\u8E40\t\u8E68\t\u8E90\t\u8EB8\t\u8EE0\t\u8F08\t\u8F30\t\u8F58\t\u8F80\t\u8FA8\t\u8FD0\t\u8FF8\t\u9020\t\u9048\t\u9070\t\u9098\u0000\u73A0\t\u90C0\t\u90E8\t\u9110\t\u9138\u0003\u7910\u0004\u4CF0\t\u9160\t\u9188\t\u91B0\t\u91D8\u0001\uEA50\t\u9200\u0004\u4C78\t\u9228\t\u9250\t\u9278\t\u92A0\t\u92C8\t\u92F0\t\u9318\t\u9340\t\u9368\t\u9390\t\u93B8\t\u93E0\u0001\uEA78\u0001\uE708\u0004\u4D68\t\u9408\t\u9430\t\u9458\t\u9480\t\u94A8\t\u94D0\t\u94F8\t\u9520\t\u9548\t\u9570\t\u9598\u0001\uE938\t\u95C0\u0001\uFBF8\t\u95E8\t\u9610\t\u9638\t\u9660\t\u9688\t\u96B0\u0004\u4C78\u0000\u7148\u0001\uF4A0\t\u96D8\t\u9700\t\u9728\t\u9750\t\u9778\t\u97A0\t\u97C8\t\u97F0\t\u9818\t\u9840\u0001\uF360\t\u9868\t\u9890\t\u98B8\t\u98E0\t\u9908\t\u9930\t\u9958\u0001\uF360\t\u9980\t\u99A8\t\u99D0\t\u99F8\t\u9A20\t\u9A48\t\u9A70\t\u9A98\t\u9AC0\t\u9AE8\u0001\uF360\t\u9B10\t\u9B38\t\u9B60\t\u9B88\u0001\u8308\u0004\uD300\u0006\uF888\u0001\uE938\t\u9BB0\t\u9BD8\t\u9C00\t\u9C28\t\u9C50\u0001\uEE60\u0001\uEE88\t\u9C78\t\u9CA0\t\u9CC8\t\u9CF0\t\u9D18\t\u9D40\t\u9D68\t\u9D90\t\u9DB8\t\u9DE0\t\u9E08\t\u9E30\t\u9E58\t\u9E80\t\u9EA8\t\u9ED0\t\u9EF8\t\u9F20\t\u9F48\t\u9F70\t\u9F98\t\u9FC0\t\u9FE8\t\uA010\t\uA038\t\uA060\t\uA088\t\uA0B0\t\uA0D8\t\uA100\t\uA128\t\uA150\t\uA178\t\uA1A0\u0001\uEBB8\u0001\uEA00\t\uA1C8\u0004\u4D68\t\uA1F0\t\uA218\t\uA240\t\uA268\t\uA290\t\uA2B8\t\uA2E0\t\uA308\t\uA330\t\uA358\t\uA380\t\uA3A8\t\uA3D0\t\uA3F8\t\uA420\t\uA448\t\uA470\t\uA498\t\uA4C0\t\uA4E8\t\uA510\t\uA538\t\uA560\t\uA588\t\uA5B0\u0001\uFE28\t\uA5D8\t\uA600\t\uA628\t\uA650\t\uA678\u0001\uE938\t\uA6A0\t\uA6C8\t\uA6F0\u0006\uA9C8\t\uA718\t\uA740\t\uA768\t\uA790\t\uA7B8\t\uA7E0\t\uA808\t\uA830\t\uA858\t\uA880\t\uA8A8\t\uA8D0\t\uA8F8\t\uA920\t\uA948\t\uA970\t\uA998\t\uA9C0\t\uA9E8\u0001\uEF00\t\uAA10\t\uAA38\t\uAA60\t\uAA88\t\uAAB0\t\uAAD8\t\uAB00\u0000\u0000\t\uAB28\t\uAB50\u0000\u0000\t\uAB78\t\uABA0\t\uABC8\t\uABF0\u0000\u0140\u0002\uDB40\u0000\uB8B0\t\uAC18\t\uAC40\t\uAC68\u0002\uD410\u0000\u0140\u0000\uB0B8\t\uAC90\t\uACB8\t\uACE0\t\uAD08\t\uAD30\u0000\u0140\u0000\u14C8\u0000\uB9F0\u0007\uDD48\u0002\uDB40\u0000\uB8B0\t\uAD58\u0000\u0140\t\uAD80\t\uADA8\u0000\uB6D0\u0000\u3980\u0000\u39A8\t\uADD0\t\uADF8\t\uAE20\t\uAE48\t\uAE70\t\uAE98\t\uAEC0\t\uAEE8\t\uAF10\t\uAF38\t\uAF60\t\uAF88\t\uAFB0\t\uAFD8\u0005\uDE08\t\uB000\t\uB028\t\uB050\t\uB078\t\uB0A0\t\uB0C8\t\uB0F0\t\uB118\t\uB140\u0000\u0140\u0000\u0140\u0000\uB6D0\u0000\u3980\u0000\u39A8\t\uB168\t\uB190\u0000\u0140\u0000\u0140\t\uB1B8\t\uB1E0\u0000\u1810\u0000\u1838\t\uB208\u0000\uC058\t\uB230\t\uB258\t\uB280\t\uB2A8\t\uB2D0\t\uB2F8\t\uB320\t\uB348\t\uB370\u0000\u0140\u0000\u0140\u0000\u0000\t\uB398\u0002\uD708\b\uFCF0\u0000\u0140\u0002\uDB40\u0000\uB8B0\t\uB3C0\u0000\u0140\t\uB3E8\u0000\uC1E8\t\uB410\t\uB438\t\uB460\u0000\u0140\u0000\u0140\u0000\uB860\u0002\uDB18\t\uB488\u0001\u2D90\t\uB4B0\t\uB4D8\u0000\uB8B0\u0005\u9920\t\uB500\t\uB528\t\uB550\t\uB578\t\uB5A0\t\uB5C8\t\uB5F0\t\uB618\t\uB640\t\uB668\t\uB690\t\uB6B8\t\uB6E0\t\uB708\t\uB730\u0006\uA298\t\uB758\t\uB780\u0001\u3880\u0001\u38A8\t\uB7A8\u0000\u4178\u0000\u41A0\t\uB7D0\t\uB7F8\t\uB820\t\uB848\u0001\u3B50\t\uB870\t\uB898\u0000\u0140\u0000\u4060\t\uB8C0\t\uB8E8\u0000\u0140\u0001\u3880\u0001\u38A8\t\uB910\t\uB938\t\uB960\t\uB988\u0006\u1030\u0006\u1058\t\uB9B0\t\uB9D8\t\uBA00\t\uBA28\t\uBA50\t\uBA78\t\uBAA0\t\uBAC8\t\uBAF0\t\uBB18\t\uBB40\u0000\u0140\u0001\u3880\u0001\u38A8\t\uBB68\u0001\u3858\u0000\u3F20\t\uBB90\t\uBBB8\t\uBBE0\t\uBC08\t\uBC30\t\uBC58\u0000\u0140\t\uBC80\t\uBCA8\t\uBCD0\t\uBCF8\u0000\u4178\u0000\u41A0\t\uBD20\t\uBD48\t\uBD70\t\uBD98\t\uBDC0\u0000\u3DE0\t\uBDE8\t\uBE10\u0000\u0140\u0000\u4178\u0000\u41A0\t\uBE38\t\uBE60\t\uBE88\t\uBEB0\t\uBED8\t\uBF00\t\uBF28\t\uBF50\t\uBF78\t\uBFA0\t\uBFC8\t\uBFF0\t\uC018\t\uC040\t\uC068\t\uC090\t\uC0B8\t\uC0E0\t\uC108\t\uC130\t\uC158\t\uC180\t\uC1A8\t\uC1D0\t\uC1F8\t\uC220\t\uC248\t\uC270\t\uC298\t\uC2C0\t\uC2E8\t\uC310\t\uC338\t\uC360\t\uC388\t\uC3B0\t\uC3D8\t\uC400\t\uC428\t\uC450\t\uC478\t\uC4A0\t\uC4C8\t\uC4F0\t\uC518\t\uC540\t\uC568\u0001\u39E8\u0000\u0140\u0000\u4060\t\uC590\t\uC5B8\t\uC5E0\t\uC608\t\uC630\t\uC658\u0001\u2958\u0000\u3F98\t\uC680\u0000\u0140\u0000\u3F98\t\uC6A8\t\uC6D0\t\uC6F8\t\uC720\t\uC748\u0000\u0140\u0000\u4178\u0000\u41A0\t\uC770\t\uC798\t\uC7C0\u0006\u79D0\u0000\u4060\t\uC7E8\t\uC810\t\uC838\t\uC860\t\uC888\t\uC8B0\t\uC8D8\t\uC900\t\uC928\t\uC950\t\uC978\t\uC9A0\t\uC9C8\t\uC9F0\t\uCA18\t\uCA40\t\uCA68\t\uCA90\t\uCAB8\t\uCAE0\t\uCB08\t\uCB30\t\uCB58\t\uCB80\t\uCBA8\t\uCBD0\t\uCBF8\t\uCC20\t\uCC48\t\uCC70\t\uCC98\t\uCCC0\t\uCCE8\t\uCD10\t\uCD38\t\uCD60\t\uCD88\t\uCDB0\t\uCDD8\t\uCE00\t\uCE28\t\uCE50\t\uCE78\t\uCEA0\t\uCEC8\t\uCEF0\t\uCF18\t\uCF40\u0000\u3EA8\t\uCF68\t\uCF90\t\uCFB8\t\uCFE0\t\uD008\t\uD030\t\uD058\t\uD080\t\uD0A8\t\uD0D0\t\uD0F8\t\uD120\t\uD148\t\uD170\t\uD198\t\uD1C0\t\uD1E8\t\uD210\t\uD238\t\uD260\t\uD288\t\uD2B0\t\uD2D8\t\uD300\t\uD328\t\uD350\t\uD378\t\uD3A0\t\uD3C8\t\uD3F0\t\uD418\t\uD440\t\uD468\t\uD490\t\uD4B8\t\uD4E0\t\uD508\t\uD530\t\uD558\t\uD580\t\uD5A8\u0000\u4060\t\uD5D0\t\uD5F8\t\uD620\t\uD648\u0003\u9238\t\uD670\t\uD698\u0001\uD678\u0001\uD6A0\t\uD6C0\u0000\u4178\u0000\u41A0\t\uD6E8\t\uD710\t\uD738\t\uD760\t\uD788\t\uD7B0\t\uD7D8\t\uD800\t\uD828\t\uD850\t\uD878\t\uD8A0\u0004\u50B0\u0001\uF360\t\uD8C8\t\uD8F0\t\uD918\u0004\u4C78\t\uD940\t\uD968\u0001\uE938\t\uD990\t\uD9B8\t\uD9E0\t\uDA08\t\uDA30\t\uDA58\u0006\uB418\u0006\uB440\u0000\u7148\u0001\uF4A0\b\uD518\t\uDA80\u0001\uEE60\u0001\uEE88\t\uDAA8\t\uDAD0\t\uDAF8\u0001\uF360\u0004\u50B0\t\uDB20\u0001\uF130\u0001\uEE60\u0001\uEE88\t\uDB48\t\uDB70\t\uDB98\u0001\uF068\t\uDBC0\u0001\uE708\u0004\u4D68\t\uDBE8\t\uDC10\t\uDC38\t\uDC60\t\uDC88\t\uDCB0\t\uDCD8\u0006\uB418\u0006\uB440\t\uDD00\t\uDD28\t\uDD50\u0001\uE5C8\t\uDD78\t\uDDA0\t\uDDC8\t\uDDF0\t\uDE18\u0006\uB418\u0006\uB440\u0001\uE500\u0001\uE528\t\uDE40\t\uDE68\t\uDE90\u0005\u8DE0\t\uDEB8\t\uDEE0\t\uDF08\t\uDF30\t\uDF58\t\uDF80\t\uDFA8\u0001\uEE60\u0001\uEE88\t\uDFD0\t\uDFF8\u0002\u0580\t\uE020\t\uE048\t\uE070\u0000\uC8A0\u0004\u4ED0\t\uE098\u0001\uEE60\u0001\uEE88\t\uE0C0\t\uE0E8\t\uE110\t\uE138\t\uE160\t\uE188\t\uE1B0\t\uE1D8\t\uE200\t\uE228\t\uE250\t\uE278\t\uE2A0\t\uE2C8\t\uE2F0\t\uE318\t\uE340\t\uE368\t\uE390\t\uE3B8\t\uE3E0\t\uE408\t\uE430\t\uE458\t\uE480\t\uE4A8\t\uD9B8\t\uE4D0\t\uE4F8\t\uE520\t\uE548\t\uE570\t\uE598\t\uE5C0\u0001\uE9D8\u0001\uEA00\t\uE5E8\t\uE610\u0001\uF130\u0001\uEE60\u0001\uEE88\t\uE638\t\uE660\t\uE688\t\uE6B0\t\uE6D8\t\uE700\t\uE728\t\uE750\t\uE778\t\uE7A0\t\uE7C8\t\uE7F0\t\uE818\t\uE840\u0004\u4B10\t\uE868\t\uE890\t\uE8B8\u0001\uEBE0\u0001\uEF50\u0004\u5060\t\uE8E0\b\u7550\t\uE908\t\uE930\t\uE958\t\uE980\t\uE9A8\u0001\uEB18\t\uE9D0\u0001\uEB18\t\uE9F8\t\uEA20\t\uEA48\u0001\uEE60\u0001\uEE88\t\uEA70\t\uEA98\u0001\uFBF8\t\uEAC0\t\uEAE8\u0001\uEF50\t\uEB10\t\uEB38\t\uEB60\t\uEB88\t\uEBB0\t\uEBD8\t\uEC00\t\uEC28\t\uEC50\t\uEC78\t\uECA0\t\uECC8\t\uECF0\t\uED18\t\uED40\t\uED68\t\uED90\t\uEDB8\t\uEDE0\t\uEE08\t\uEE30\t\uEE58\t\uEE80\t\uEEA8\t\uEED0\t\uEEF8\t\uEF20\u0001\u8308\t\uEF48\t\uEF70\t\uEF98\t\uEFC0\t\uEFE8\t\uF010\t\uF038\t\uF060\u0004\uD300\u0006\uF888\t\uF088\t\uF0B0\t\uF0D8\u0004\u4F70\t\uF100\t\uF128\t\uF150\t\uF178\u0001\uFD10\t\uF1A0\t\uF1C8\t\uF1F0\t\uF218\t\u6280\t\uF240\t\uF268\u0001\uF360\t\uF290\t\uF2B8\t\uF2E0\u0002\u0558\t\uF308\t\uF330\t\uF358\t\uF380\t\uF3A8\t\uF3D0\t\uF3F8\t\uF420\t\uF448\t\uF470\t\uF498\t\uF4C0\t\uF4E8\t\uF510\t\uF538\t\uF560\u0001\uF3D8\t\uF588\t\uF5B0\t\uF5D8\t\uF600\t\uF628\t\uF650\t\uF678\u0002\uD9B0\u0004\u5268\u0001\uF310\t\uF6A0\t\uF6C8\t\uF6F0\t\uF718\t\uF740\t\uF768\t\uF790\t\uF7B8\t\uF7E0\t\uF808\t\uF830\t\uF858\t\uF880\t\uF8A8\t\uF8D0\u0001\uF360\u0006\uBC60\t\uF8F8\u0001\uEA50\t\uF920\t\uF948\t\uF970\t\uF998\t\uF9C0\t\uF9E8\u0002\uBF98\u0002\uBFC0\t\uFA10\u0001\uEE60\u0001\uEE88\t\uFA38\t\uFA60\t\uFA88\t\uFAB0\t\uFAD8\u0000\u0000\u0000\u0140\t\uFB00\u0002\uDB40\u0000\uB8B0\t\uFB28\t\uFB50\u0000\u0000\t\uFB78\u0000\u0140\u0002\uDB40\u0000\uB8B0\t\uFBA0\t\uFBC8\t\uFBF0\t\uFC18\t\uFC40\t\uFC68\t\uFC90\t\uFCB8\u0000\u0000\t\uFCE0\t\uFD08\t\uFD30\u0002\uDB40\u0000\uB8B0\u0000\u0140\t\uFD58\t\uFD80\u0002\uDB40\u0000\uB8B0\u0002\uDB40\u0000\uB8B0\t\uFDA8\u0000\u0140\u0000\uBA18\t\uFDD0\t\uFDF8\t\uFE20\t\uFE48\t\uFE70\t\uFE98\u0000\u0140\t\uFEC0\t\uFEE8\t\uFF10\t\uFF38\t\uFF60\u0001\u5838\u0003\u98A0\u0003\u98C8\t\uFF88\u0000\u0140\u0001\u3880\u0001\u38A8\t\uFFB0\t\uFFD8\n\u0000\n(\nP\nx\n\u00A0\n\u00C8\n\u00F0\n\u0118\n\u0140\u0000\u0140\u0000\u4178\u0000\u41A0\n\u0168\n\u0190\n\u01B8\n\u01E0\n\u0208\n\u0230\n\u0258\n\u0280\n\u02A8\n\u02D0\n\u02F8\n\u0320\n\u0348\n\u0370\n\u0398\n\u03C0\n\u03E8\n\u0410\n\u0438\n\u0460\n\u0488\u0000\u0000\n\u04B0\n\u04D8\n\u0500\n\u0528\n\u0550\n\u0578\u0000\u0140\n\u05A0\n\u05C8\u0000\u4178\u0000\u41A0\n\u05F0\n\u0618\n\u0640\n\u0668\n\u0690\n\u06B8\n\u06E0\n\u0708\n\u0730\u0000\u4060\n\u0758\n\u0780\n\u07A8\n\u07D0\n\u07F8\n\u0820\n\u0848\u0000\u0140\u0001\u2958\u0000\u3F98\u0000\u3E58\n\u0870\n\u0898\n\u08C0\u0000\u0140\u0001\u39C0\u0001\u38A8\n\u08E8\n\u0910\n\u0938\n\u0960\n\u0988\n\u09B0\u0000\u0140\n\u09D8\n\u0A00\n\u0A28\n\u0A50\n\u0A78\n\u0AA0\n\u0AC8\n\u0AF0\n\u0B18\n\u0B40\n\u0B68\n\u0B90\n\u0BB8\u0000\u0140\u0001\u3880\u0001\u38A8\n\u0BE0\n\u0C08\n\u0C30\n\u0C58\n\u0C80\n\u0CA8\n\u0CD0\n\u0CF8\n\u0D20\n\u0D48\n\u0D70\n\u0D98\n\u0DC0\t\uB7D0\n\u0DE8\u0006\u2BB0\n\u0E10\n\u0E38\n\u0E60\n\u0E88\n\u0EB0\n\u0ED8\n\u0F00\n\u0F28\u0001\u3880\u0001\u38A8\u0000\u4178\u0000\u41A0\n\u0F50\n\u0F78\n\u0FA0\n\u0FC8\n\u0FF0\n\u1018\n\u1040\n\u1068\n\u1090\n\u10B8\n\u10E0\u0001\uF360\u0004\uD300\u0006\uF888\u0004\u9E30\u0004\u9E58\n\u1108\u0001\uFB08\u0001\uF360\n\u1130\u0001\uE708\u0004\u4D68\n\u1158\n\u1180\n\u11A8\n\u11D0\n\u11F8\n\u1220\n\u1248\n\u1270\n\u1298\n\u12C0\u0001\uEE60\u0001\uEE88\n\u12E8\n\u1310\n\u1338\n\u1360\n\u1388\u0001\uFB08\u0001\uF400\n\u13B0\n\u13D8\n\u1400\n\u1428\n\u1450\n\u1478\n\u14A0\n\u14C8\u0001\uF360\n\u14F0\n\u1518\n\u1540\u0001\uEE60\u0002\uC8A8\n\u1568\n\u1590\n\u15B8\n\u15E0\n\u1608\n\u1630\n\u1658\n\u1680\n\u16A8\n\u16D0\n\u16F8\n\u1720\u0001\uEA50\n\u1748\n\u1770\n\u1798\n\u17C0\n\u17E8\u0001\uF360\u0001\uEB18\u0000\u7058\n\u1810\n\u1838\n\u1860\n\u1888\n\u18B0\u0001\uEBB8\u0001\uEA00\u0004\u53D0\n\u18D8\n\u1900\n\u1928\n\u1950\u0001\uF360\u0001\uED20\n\u1978\n\u19A0\n\u19C8\n\u19F0\n\u1A18\n\u1A40\n\u1A68\n\u1A90\n\u1AB8\n\u1AE0\u0001\uE9D8\u0001\uEA00\u0001\uF4C8\n\u1B08\n\u1B30\n\u1B58\n\u1B80\n\u1BA8\n\u1BD0\n\u1BF8\n\u1C20\n\u1C48\n\u1C70\n\u1C98\n\u1CC0\n\u1CE8\n\u1D10\n\u1D38\u0006\uFD60\n\u1D60\n\u1D88\n\u1DB0\n\u1DD8\n\u1E00\u0001\uE9D8\u0001\uEA00\u0001\uEE60\u0001\uEE88\n\u1E28\n\u1E50\n\u1E78\u0001\uE708\u0004\u4D68\n\u1EA0\n\u1EC8\n\u1EF0\n\u1F18\u0000\u0000\n\u1F40\n\u1F68\n\u1F90\n\u1FB8\n\u1FE0\u0000\u0000\n\u2008\u0000\u0140\u0000\u0000\u0000\u0000\u0000\u0140\n\u2030\n\u2058\n\u2080\n\u20A8\n\u20D0\n\u20F8\n\u2120\n\u2148\n\u2170\n\u2198\n\u21C0\n\u21E8\u0000\u0140\n\u2210\n\u2238\u0000\u0140\u0001\u3880\u0001\u38A8\n\u2260\n\u2288\n\u22B0\u0000\u0140\u0000\u4178\u0000\u41A0\n\u22D8\n\u2300\n\u2328\n\u2350\n\u2378\u0000\u0000\n\u23A0\n\u23C8\n\u23F0\n\u2418\n\u2440\u0000\u0000\n\u2468\n\u2490\n\u24B8\n\u24E0\n\u2508\n\u2530\n\u2558\n\u2580\n\u25A8\n\u25D0\n\u25F8\n\u2620\n\u2648\n\u2670\n\u2698\n\u26C0\n\u26E8\n\u2710\u0000\u0000\n\u2738\n\u2760\n\u2788\n\u27B0\n\u27D8\n\u2800\n\u2828\n\u2850\n\u2878\n\u28A0\n\u28C8\n\u28F0\n\u2918\n\u2940\n\u2968\u0000\u0140\u0000\u4178\u0000\u41A0\n\u2990\n\u29B8\n\u29E0\n\u2A08\n\u2A30\n\u2A58\n\u2A80\n\u2AA8\n\u2AD0\n\u2AF8\n\u2B20\n\u2B48\n\u2B70\u0006\uBA58\n\u2B98\n\u2BC0\n\u2BE8\n\u2C10\n\u2C38\n\u2C60\n\u2C88\n\u2CB0\n\u2CD8\u0001\uE708\u0004\u4D68\n\u2D00\n\u2D28\u0001\uEE60\u0001\uEE88\n\u2D50\n\u2D78\n\u2DA0\n\u2DC8\n\u2DF0\n\u2E18\n\u2E40\n\u2E68\n\u2E90\u0001\uE708\u0004\u4D68\n\u2EB8\n\u2EE0\n\u2F08\n\u2F30\n\u2F58\n\u2F80\b\u59D0\n\u2FA8\n\u2FD0\n\u2FF8\n\u3020\n\u3048\n\u3070\n\u3098\n\u30C0\n\u30E8\n\u3110\n\u3138\n\u3160\b\u59D0\u0001\uEE60\u0001\uEE88\n\u3188\n\u31B0\u0004\u5150\n\u31D8\n\u3200\n\u3228\n\u3250\n\u3278\n\u32A0\n\u32C8\u0000\u0000\n\u32F0\u0000\u0140\u0000\u14C8\u0000\uB9F0\n\u3318\n\u3340\n\u3368\u0000\u0000\n\u3390\n\u33B8\n\u33E0\n\u3408\n\u3430\n\u3458\n\u3480\u0000\u0000\n\u34A8\n\u34D0\n\u34F8\n\u3520\n\u3548\u0000\u0140\u0000\u3EF8\u0000\u3F20\u0000\u0000\n\u3570\n\u3598\n\u35C0\n\u35E8\u0000\u0140\u0000\u4178\u0000\u41A0\u0000\u0140\n\u3610\n\u3638\n\u3660\n\u3688\n\u36B0\n\u36D8\n\u3700\n\u3728\n\u3750\n\u3778\n\u37A0\u0000\u0000\n\u3778\n\u37C8\n\u37F0\n\u3818\n\u3840\n\u3868\n\u3890\n\u38B8\u0000\u0000\n\u38E0\n\u3908\u0000\u0140\u0000\u4060\n\u3930\n\u3958\u0001\uFBF8\n\u3980\n\u39A8\n\u39D0\n\u39F8\n\u3A20\u0000\u7148\u0001\uF4A0\n\u3A48\u0000\u7148\u0000\u7170\n\u3A70\n\u3A98\u0001\uEE60\u0001\uEE88\n\u3AC0\n\u3AE8\n\u3B10\n\u3B38\n\u3B60\n\u3B88\n\u3BB0\n\u3BD8\u0005\u8DE0\n\u3C00\n\u3C28\n\u3C50\n\u3C78\u0001\uEA50\n\u3CA0\n\u3CC8\u0000\u0000\n\u3CF0\n\u3D18\u0000\u0000\n\u3D40\n\u3D68\n\u3D90\n\u3DB8\n\u3DE0\n\u3E08\n\u3E30\n\u3E58\n\u3E80\n\u3EA8\n\u3ED0\n\u3EF8\n\u3F20\n\u3F48\n\u3F70\n\u3F98\u0000\u38E0\n\u3FC0\n\u3FE8\n\u4010\n\u4038\n\u4060\n\u4088\n\u40B0\n\u40D8\u0001\u3948\n\u4100\n\u4128\n\u4150\n\u4178\n\u41A0\n\u41C8\n\u41F0\n\u4218\n\u4240\n\u4268\n\u4290\n\u42B8\n\u42E0\n\u4308\u0001\uF0B8\n\u4330\n\u4358\u0000\u0000\u0000\u0000\n\u4380\n\u43A8\n\u43D0\n\u43F8\n\u4420\n\u4448\u0000\u0000\u0000\u0000\n\u4470\n\u4470\n\u4498\n\u44C0\n\u44E8\n\u4510\n\u4538\n\u4560\u0000\u0000\n\u4588\u0001\uE938\n\u45B0\n\u45D8\n\u4600\n\u4628\u0000\u0000\u0000\u0000\n\u4650\n\u4678\n\u46A0\u0000\u0140\u0000\u4178\u0000\u41A0\n\u46C8\u0000\u0140\u0000\u4178\u0000\u41A0\u0000\u0000\n\u46F0\n\u4718\u0004\u5150\u0001\uEE60\u0001\uEE88\u0001\uEE60\u0001\uEE88\n\u4740\n\u4768\n\u4790\u0000\u0000\n\u47B8\n\u47E0\u0000\u0000\n\u4808\n\u4830\u0000\u0000\n\u4858\n\u4880\u0000\u0000", true);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = jSONObject1.optBoolean("\t\u0BF0\t\u0C18\t\u0C40\t\u0C68\t\u0C90\t\u0CB8\u0000\u16D0\u0002\uD4D8\t\u0CE0\t\u0D08\u0002\uD410\t\u0D30\t\u0D58\t\u0D80\t\u0DA8\t\u0DD0\t\u0DF8\t\u0E20\t\u0E48\t\u0E70\u0000\uB0B8\u0000\u0140\t\u0E98\u0000\uC058\t\u0EC0\t\u0EE8\u0002\uD410\u0000\u14C8\u0000\uB9F0\t\u0F10\t\u0F38\t\u0F60\t\u0F88\t\u0FB0\t\u0FD8\t\u1000\t\u1028\u0000\u0140\u0002\uDB40\u0000\uB8B0\t\u1050\t\u1078\t\u10A0\t\u10C8\u0002\uDB40\u0000\uB8B0\u0000\u0140\u0002\uDB40\u0000\uB8B0\u0000\uB0B8\t\u10F0\t\u1118\t\u1140\t\u1168\t\u1190\t\u11B8\u0001\u2D90\t\u11E0\t\u1208\t\u1230\t\u1258\t\u1280\t\u12A8\t\u12D0\t\u12F8\t\u1320\u0000\u0140\t\u1348\t\u1370\t\u1398\t\u13C0\t\u13E8\t\u1410\t\u1438\t\u1460\t\u1488\t\u14B0\t\u14D8\t\u1500\t\u1528\t\u1550\t\u1578\t\u15A0\t\u15C8\t\u15F0\t\u1618\t\u1640\u0000\u0140\t\u1668\t\u1690\t\u16B8\t\u16E0\t\u1708\u0000\uC2B0\u0000\uB0B8\u0005\u8980\u0000\u0000\t\u1730\t\u1758\t\u1780\t\u17A8\t\u17D0\u0001\u2958\t\u17F8\t\u1820\t\u1848\t\u1870\t\u1898\t\u18C0\t\u18E8\t\u1910\t\u1938\t\u1960\t\u1988\t\u19B0\t\u19D8\t\u1A00\t\u1A28\t\u1A50\t\u1A78\u0000\u0140\u0001\u3880\u0001\u38A8\t\u1AA0\t\u1AC8\t\u1AF0\t\u1B18\t\u1B40\t\u1B68\t\u1B90\t\u1BB8\t\u1BE0\t\u1C08\t\u1C30\t\u1C58\u0003\u9918\u0003\u9940\u0000\u0140\u0000\u4178\u0000\u41A0\t\u1C80\t\u1CA8\t\u1CD0\t\u1CF8\t\u1D20\t\u1D48\t\u1D70\t\u1D98\t\u1DC0\t\u1DE8\t\u1E10\t\u1E38\t\u1E60\t\u1E88\t\u1EB0\t\u1ED8\t\u1F00\t\u1F28\t\u1F50\t\u1F78\t\u1FA0\t\u1FC8\t\u1FF0\t\u2018\t\u2040\t\u2068\t\u2090\t\u20B8\t\u20E0\t\u2108\t\u2130\t\u2158\t\u2180\t\u21A8\t\u21D0\t\u21F8\t\u2220\t\u2248\t\u2270\t\u2298\u0000\u0140\t\u22C0\u0000\u4178\u0000\u41A0\t\u22E8\t\u2310\t\u2338\t\u2360\t\u2388\t\u23B0\t\u23D8\t\u2400\t\u2428\t\u2450\t\u2478\t\u24A0\t\u24C8\t\u24F0\t\u2518\t\u2540\t\u2568\t\u2590\t\u25B8\t\u25E0\t\u2608\t\u2630\t\u2658\t\u2680\t\u26A8\t\u26D0\t\u26F8\t\u2720\t\u2748\t\u2770\t\u2798\u0003\u7A78\t\u27C0\t\u27E8\u0000\u0140\u0000\u3EF8\u0000\u3F20\t\u2810\t\u2838\t\u2860\t\u2888\t\u28B0\t\u28D8\t\u2900\t\u2928\t\u2950\t\u2978\u0000\u0140\t\u29A0\t\u29C8\t\u29F0\t\u2A18\t\u2A40\t\u2A68\u0000\u0140\t\u2A90\t\u2AB8\t\u2AE0\t\u2B08\t\u2B30\t\u2B58\t\u2B80\t\u2BA8\t\u2BD0\t\u2BF8\t\u2C20\t\u2C48\t\u2C70\t\u2C98\t\u2CC0\t\u2CE8\t\u2D10\t\u2D38\t\u2D60\t\u2D88\t\u2DB0\t\u2DD8\t\u2E00\t\u2E28\t\u2E50\t\u2E78\t\u2EA0\t\u2EC8\t\u2EF0\t\u2F18\t\u2F40\t\u2F68\t\u2F90\t\u2FB8\t\u2FE0\t\u3008\t\u3030\t\u3058\t\u3080\u0007\uFBE8\t\u30A8\t\u30D0\t\u30F8\t\u3120\t\u3148\t\u3170\t\u3198\t\u31C0\t\u31E8\t\u3210\t\u3238\t\u3260\t\u3288\t\u32B0\t\u32D8\t\u3300\u0001\u7020\t\u3328\t\u3350\t\u3378\t\u33A0\t\u33C8\t\u33F0\t\u3418\t\u3440\t\u3468\t\u3490\t\u34B8\t\u34E0\t\u3508\t\u3530\u0000\u0140\u0000\u38E0\u0001\u3A88\u0001\u3AB0\t\u3558\t\u3580\t\u35A8\t\u35D0\u0000\u4060\t\u35F8\t\u3620\t\u3648\t\u3670\u0000\u3E58\u0000\u0140\u0001\u3880\u0001\u38A8\t\u3698\t\u36C0\t\u36E8\t\u3710\t\u3738\u0000\u3F98\u0000\u4060\t\u3760\t\u3788\t\u37B0\t\u37D8\t\u3800\t\u3828\t\u3850\t\u3878\t\u38A0\t\u38C8\t\u38F0\t\u3918\t\u3940\t\u3968\t\u3990\t\u39B8\t\u39E0\t\u3A08\t\u3A30\t\u3A58\t\u3A80\t\u3AA8\t\u3AD0\t\u3AF8\t\u3B20\t\u3B48\t\u3B70\t\u3B98\t\u3BC0\t\u3BE8\t\u3C10\t\u3C38\t\u3C60\t\u3C88\t\u3CB0\t\u3CD8\u0000\u0140\u0000\u4178\u0000\u41A0\t\u3D00\t\u3D28\u0001\u3880\u0001\u38A8\t\u3D50\t\u3D78\t\u3DA0\t\u3DC8\t\u3DF0\t\u3E18\t\u3E40\t\u3E68\t\u3E90\t\u3EB8\t\u3EE0\t\u3F08\t\u3F30\t\u3F58\t\u3F80\t\u3FA8\t\u3FD0\t\u3FF8\t\u4020\t\u4048\t\u4070\t\u4098\t\u40C0\t\u40E8\t\u4110\u0001\u39C0\t\u4138\t\u4160\t\u4188\t\u41B0\t\u41D8\u0000\u0140\t\u4200\t\u4228\t\u4250\t\u4278\t\u42A0\t\u42C8\u0000\u0140\t\u42F0\u0000\u0140\t\u4318\t\u4340\t\u4368\t\u4390\t\u43B8\u0000\u0140\t\u43E0\t\u4408\t\u4430\t\u4458\t\u4480\t\u44A8\t\u44D0\t\u44F8\t\u4520\t\u4548\t\u4570\t\u4598\t\u45C0\t\u45E8\t\u4610\t\u4638\t\u4660\t\u4688\t\u46B0\u0000\u4060\t\u46D8\t\u4700\t\u4728\t\u4750\t\u4778\t\u47A0\u0000\u3F98\u0001\u3880\u0001\u38A8\t\u47C8\t\u47F0\t\u4818\t\u4840\t\u4868\t\u4890\t\u48B8\t\u48E0\t\u4908\t\u4930\t\u4958\t\u4980\t\u49A8\t\u49D0\t\u49F8\t\u4A20\t\u4A48\t\u4A70\t\u4A98\t\u4AC0\t\u4AE8\t\u4B10\t\u4B38\t\u4B60\t\u4B88\t\u4BB0\t\u4BD8\t\u4C00\t\u4C28\t\u4C50\t\u4C78\t\u4CA0\t\u4CC8\t\u4CF0\u0000\u0140\u0000\u4178\u0000\u41A0\t\u4D18\t\u4D40\t\u4D68\b\u1BF0\b\u1C18\t\u4D90\t\u4DB8\t\u4DE0\t\u4E08\t\u4E30\t\u4E58\t\u4E80\t\u4EA8\t\u4ED0\t\u4EF8\t\u4F20\t\u4F48\t\u4F70\t\u4F98\t\u4FC0\t\u4FE8\t\u5010\u0000\u0140\u0001\u2958\t\u5038\t\u5060\t\u5088\t\u50B0\t\u50D8\t\u5100\t\u5128\t\u5150\t\u5178\u0001\u39C0\u0001\u38A8\t\u51A0\t\u51C8\t\u51F0\t\u5218\t\u5240\t\u5268\t\u5290\t\u52B8\t\u52E0\t\u5308\t\u5330\t\u5358\t\u5380\t\u53A8\t\u53D0\t\u53F8\t\u5420\t\u5448\t\u5470\t\u5498\t\u54C0\t\u54E8\t\u5510\t\u5538\t\u5560\t\u5588\t\u55B0\t\u55D8\t\u5600\t\u5628\t\u5650\t\u5678\t\u56A0\t\u56C8\t\u56F0\t\u5718\t\u5740\t\u5768\t\u5790\t\u57B8\t\u57E0\t\u5808\t\u5830\t\u5858\t\u5880\t\u58A8\t\u58D0\t\u58F8\t\u5920\t\u5948\t\u5970\t\u5998\t\u59C0\u0006\uBC60\u0004\u4D90\u0006\uBC60\t\u59E8\u0001\uF360\u0001\uFBF8\t\u5A10\t\u5A38\t\u5A60\t\u5A88\t\u5AB0\t\u5AD8\t\u5B00\t\u5B28\u0001\uE938\t\u5B50\t\u5B78\t\u5BA0\t\u5BC8\t\u5BF0\t\u5C18\t\u5C40\t\u5C68\t\u5C90\t\u5CB8\t\u5CE0\t\u5D08\t\u5D30\t\u5D58\t\u5D80\t\u5DA8\t\u5DD0\t\u5DF8\t\u5E20\t\u5E48\t\u5E70\t\u5E98\t\u5EC0\t\u5EE8\t\u5F10\t\u5F38\u0001\uE938\t\u5F60\t\u5F88\u0002\u4590\t\u5FB0\t\u5FD8\t\u6000\t\u6028\t\u6050\t\u6078\t\u60A0\t\u60C8\t\u60F0\t\u6118\t\u6140\t\u6168\t\u6190\t\u61B8\t\u61E0\t\u6208\u0001\uF130\t\u6230\t\u6258\b\uC0A0\t\u6280\t\u62A8\t\u62D0\t\u62F8\u0002\uE928\u0001\uE9D8\u0001\uEA00\t\u6320\t\u6348\t\u6370\t\u6398\t\u63C0\t\u63E8\t\u6410\t\u6438\t\u6460\t\u6488\t\u64B0\u0001\uF130\u0001\uEE60\u0001\uEE88\t\u64D8\t\u6500\t\u6528\t\u6550\t\u6578\t\u65A0\t\u65C8\u0001\uEE60\u0001\uEE88\t\u65F0\u0001\uFBF8\t\u6618\t\u6640\t\u6668\t\u6690\t\u66B8\t\u66E0\t\u6708\t\u6730\t\u6758\t\u6780\t\u67A8\t\u67D0\t\u67F8\t\u6820\t\u6848\t\u6870\t\u6898\t\u68C0\t\u68E8\t\u6910\t\u6938\t\u6960\t\u6988\t\u69B0\t\u69D8\t\u6A00\u0001\uEE60\u0001\uEE88\t\u6A28\t\u6A50\t\u6A78\t\u6AA0\t\u6AC8\t\u6AF0\t\u6B18\t\u6B40\t\u6B68\u0001\uEE60\u0001\uEE88\t\u6B90\t\u6BB8\t\u6BE0\t\u6C08\t\u6C30\t\u6C58\t\u6C80\t\u6CA8\t\u6CD0\t\u6CF8\t\u6D20\t\u6D48\t\u6D70\t\u6D98\t\u6DC0\t\u6DE8\t\u6E10\t\u6E38\t\u6E60\t\u6E88\t\u6EB0\t\u6ED8\t\u6F00\t\u6F28\t\u6F50\t\u6F78\t\u6FA0\t\u6FC8\t\u6FF0\t\u7018\t\u7040\t\u7068\t\u7090\t\u70B8\t\u70E0\t\u7108\t\u7130\u0004\u86C0\t\u7158\u0004\u5628\t\u7180\t\u71A8\t\u71D0\t\u71F8\t\u7220\u0001\uFE28\t\u7248\t\u7270\u0001\uFB58\t\u7298\u0001\uF360\t\u72C0\u0000\u7148\u0001\uF4A0\t\u72E8\t\u7310\t\u7338\t\u7360\t\u7388\t\u73B0\t\u73D8\t\u7400\t\u7428\t\u7450\u0001\uF068\t\u7478\t\u74A0\t\u74C8\t\u74F0\t\u7518\t\u7540\t\u7568\t\u7590\t\u75B8\t\u75E0\t\u7608\u0002\uDB40\u0001\uF360\t\u7630\t\u7658\t\u7680\t\u76A8\t\u76D0\t\u76F8\t\u7720\t\u7748\t\u7770\t\u7798\t\u77C0\t\u77E8\t\u7810\t\u7838\t\u7860\t\u7888\t\u78B0\t\u78D8\t\u7900\t\u7928\t\u7950\u0004\uD300\u0006\uF888\t\u7978\t\u79A0\t\u79C8\t\u79F0\t\u7A18\t\u7A40\u0005\u2AF8\b\uC780\t\u7A68\t\u7A90\b\u7D70\t\u7AB8\t\u7AE0\t\u7B08\t\u7B30\t\u7B58\t\u7B80\t\u7BA8\t\u7BD0\t\u7BF8\t\u7C20\t\u7C48\t\u7C70\t\u7C98\t\u7CC0\t\u7CE8\t\u7D10\t\u7D38\t\u7D60\t\u7D88\t\u7DB0\t\u7DD8\t\u7E00\t\u7E28\t\u7E50\u0000\u73A0\t\u7E78\t\u7EA0\t\u7EC8\t\u7EF0\t\u7F18\t\u7F40\t\u7F68\t\u7F90\t\u7FB8\u0001\uED48\u0001\uED70\t\u7FE0\t\u8008\u0001\uF068\t\u8030\t\u8058\t\u8080\u0001\uFA68\u0001\uE708\u0004\u4D68\t\u80A8\t\u80D0\t\u80F8\t\u8120\t\u8148\t\u8170\t\u8198\t\u81C0\t\u81E8\b\u59A8\t\u8210\u0001\uEA50\t\u8238\t\u8260\t\u8288\t\u82B0\t\u82D8\t\u8300\t\u8328\b\uA200\t\u8350\t\u8378\t\u83A0\t\u83C8\t\u83F0\t\u8418\t\u8440\t\u8468\t\u8490\t\u84B8\t\u84E0\t\u8508\u0000\u7148\u0001\uF4A0\t\u8530\t\u8558\t\u8580\t\u85A8\t\u85D0\t\u85F8\t\u8620\t\u8648\t\u8670\t\u8698\t\u86C0\t\u86E8\u0001\u8308\t\u8710\t\u8738\t\u8760\t\u8788\t\u87B0\t\u87D8\t\u8800\t\u8828\u0001\uEE60\u0001\uEE88\t\u8850\t\u8878\u0001\uE708\u0004\u4D68\t\u88A0\t\u88C8\t\u88F0\t\u8918\t\u8940\t\u8968\t\u8990\t\u89B8\t\u89E0\t\u8A08\t\u8A30\t\u8A58\t\u8A80\t\u8AA8\u0001\uF360\t\u8AD0\t\u8AF8\t\u8B20\t\u8B48\t\u8B70\t\u8B98\t\u8BC0\t\u8BE8\t\u8C10\t\u8C38\t\u8C60\t\u8C88\t\u8CB0\t\u8CD8\t\u8D00\t\u8D28\u0004\u53D0\t\u0A88\t\u8D50\t\u8D78\t\u8DA0\t\u8DC8\t\u8DF0\t\u8E18\t\u8E40\t\u8E68\t\u8E90\t\u8EB8\t\u8EE0\t\u8F08\t\u8F30\t\u8F58\t\u8F80\t\u8FA8\t\u8FD0\t\u8FF8\t\u9020\t\u9048\t\u9070\t\u9098\u0000\u73A0\t\u90C0\t\u90E8\t\u9110\t\u9138\u0003\u7910\u0004\u4CF0\t\u9160\t\u9188\t\u91B0\t\u91D8\u0001\uEA50\t\u9200\u0004\u4C78\t\u9228\t\u9250\t\u9278\t\u92A0\t\u92C8\t\u92F0\t\u9318\t\u9340\t\u9368\t\u9390\t\u93B8\t\u93E0\u0001\uEA78\u0001\uE708\u0004\u4D68\t\u9408\t\u9430\t\u9458\t\u9480\t\u94A8\t\u94D0\t\u94F8\t\u9520\t\u9548\t\u9570\t\u9598\u0001\uE938\t\u95C0\u0001\uFBF8\t\u95E8\t\u9610\t\u9638\t\u9660\t\u9688\t\u96B0\u0004\u4C78\u0000\u7148\u0001\uF4A0\t\u96D8\t\u9700\t\u9728\t\u9750\t\u9778\t\u97A0\t\u97C8\t\u97F0\t\u9818\t\u9840\u0001\uF360\t\u9868\t\u9890\t\u98B8\t\u98E0\t\u9908\t\u9930\t\u9958\u0001\uF360\t\u9980\t\u99A8\t\u99D0\t\u99F8\t\u9A20\t\u9A48\t\u9A70\t\u9A98\t\u9AC0\t\u9AE8\u0001\uF360\t\u9B10\t\u9B38\t\u9B60\t\u9B88\u0001\u8308\u0004\uD300\u0006\uF888\u0001\uE938\t\u9BB0\t\u9BD8\t\u9C00\t\u9C28\t\u9C50\u0001\uEE60\u0001\uEE88\t\u9C78\t\u9CA0\t\u9CC8\t\u9CF0\t\u9D18\t\u9D40\t\u9D68\t\u9D90\t\u9DB8\t\u9DE0\t\u9E08\t\u9E30\t\u9E58\t\u9E80\t\u9EA8\t\u9ED0\t\u9EF8\t\u9F20\t\u9F48\t\u9F70\t\u9F98\t\u9FC0\t\u9FE8\t\uA010\t\uA038\t\uA060\t\uA088\t\uA0B0\t\uA0D8\t\uA100\t\uA128\t\uA150\t\uA178\t\uA1A0\u0001\uEBB8\u0001\uEA00\t\uA1C8\u0004\u4D68\t\uA1F0\t\uA218\t\uA240\t\uA268\t\uA290\t\uA2B8\t\uA2E0\t\uA308\t\uA330\t\uA358\t\uA380\t\uA3A8\t\uA3D0\t\uA3F8\t\uA420\t\uA448\t\uA470\t\uA498\t\uA4C0\t\uA4E8\t\uA510\t\uA538\t\uA560\t\uA588\t\uA5B0\u0001\uFE28\t\uA5D8\t\uA600\t\uA628\t\uA650\t\uA678\u0001\uE938\t\uA6A0\t\uA6C8\t\uA6F0\u0006\uA9C8\t\uA718\t\uA740\t\uA768\t\uA790\t\uA7B8\t\uA7E0\t\uA808\t\uA830\t\uA858\t\uA880\t\uA8A8\t\uA8D0\t\uA8F8\t\uA920\t\uA948\t\uA970\t\uA998\t\uA9C0\t\uA9E8\u0001\uEF00\t\uAA10\t\uAA38\t\uAA60\t\uAA88\t\uAAB0\t\uAAD8\t\uAB00\u0000\u0000\t\uAB28\t\uAB50\u0000\u0000\t\uAB78\t\uABA0\t\uABC8\t\uABF0\u0000\u0140\u0002\uDB40\u0000\uB8B0\t\uAC18\t\uAC40\t\uAC68\u0002\uD410\u0000\u0140\u0000\uB0B8\t\uAC90\t\uACB8\t\uACE0\t\uAD08\t\uAD30\u0000\u0140\u0000\u14C8\u0000\uB9F0\u0007\uDD48\u0002\uDB40\u0000\uB8B0\t\uAD58\u0000\u0140\t\uAD80\t\uADA8\u0000\uB6D0\u0000\u3980\u0000\u39A8\t\uADD0\t\uADF8\t\uAE20\t\uAE48\t\uAE70\t\uAE98\t\uAEC0\t\uAEE8\t\uAF10\t\uAF38\t\uAF60\t\uAF88\t\uAFB0\t\uAFD8\u0005\uDE08\t\uB000\t\uB028\t\uB050\t\uB078\t\uB0A0\t\uB0C8\t\uB0F0\t\uB118\t\uB140\u0000\u0140\u0000\u0140\u0000\uB6D0\u0000\u3980\u0000\u39A8\t\uB168\t\uB190\u0000\u0140\u0000\u0140\t\uB1B8\t\uB1E0\u0000\u1810\u0000\u1838\t\uB208\u0000\uC058\t\uB230\t\uB258\t\uB280\t\uB2A8\t\uB2D0\t\uB2F8\t\uB320\t\uB348\t\uB370\u0000\u0140\u0000\u0140\u0000\u0000\t\uB398\u0002\uD708\b\uFCF0\u0000\u0140\u0002\uDB40\u0000\uB8B0\t\uB3C0\u0000\u0140\t\uB3E8\u0000\uC1E8\t\uB410\t\uB438\t\uB460\u0000\u0140\u0000\u0140\u0000\uB860\u0002\uDB18\t\uB488\u0001\u2D90\t\uB4B0\t\uB4D8\u0000\uB8B0\u0005\u9920\t\uB500\t\uB528\t\uB550\t\uB578\t\uB5A0\t\uB5C8\t\uB5F0\t\uB618\t\uB640\t\uB668\t\uB690\t\uB6B8\t\uB6E0\t\uB708\t\uB730\u0006\uA298\t\uB758\t\uB780\u0001\u3880\u0001\u38A8\t\uB7A8\u0000\u4178\u0000\u41A0\t\uB7D0\t\uB7F8\t\uB820\t\uB848\u0001\u3B50\t\uB870\t\uB898\u0000\u0140\u0000\u4060\t\uB8C0\t\uB8E8\u0000\u0140\u0001\u3880\u0001\u38A8\t\uB910\t\uB938\t\uB960\t\uB988\u0006\u1030\u0006\u1058\t\uB9B0\t\uB9D8\t\uBA00\t\uBA28\t\uBA50\t\uBA78\t\uBAA0\t\uBAC8\t\uBAF0\t\uBB18\t\uBB40\u0000\u0140\u0001\u3880\u0001\u38A8\t\uBB68\u0001\u3858\u0000\u3F20\t\uBB90\t\uBBB8\t\uBBE0\t\uBC08\t\uBC30\t\uBC58\u0000\u0140\t\uBC80\t\uBCA8\t\uBCD0\t\uBCF8\u0000\u4178\u0000\u41A0\t\uBD20\t\uBD48\t\uBD70\t\uBD98\t\uBDC0\u0000\u3DE0\t\uBDE8\t\uBE10\u0000\u0140\u0000\u4178\u0000\u41A0\t\uBE38\t\uBE60\t\uBE88\t\uBEB0\t\uBED8\t\uBF00\t\uBF28\t\uBF50\t\uBF78\t\uBFA0\t\uBFC8\t\uBFF0\t\uC018\t\uC040\t\uC068\t\uC090\t\uC0B8\t\uC0E0\t\uC108\t\uC130\t\uC158\t\uC180\t\uC1A8\t\uC1D0\t\uC1F8\t\uC220\t\uC248\t\uC270\t\uC298\t\uC2C0\t\uC2E8\t\uC310\t\uC338\t\uC360\t\uC388\t\uC3B0\t\uC3D8\t\uC400\t\uC428\t\uC450\t\uC478\t\uC4A0\t\uC4C8\t\uC4F0\t\uC518\t\uC540\t\uC568\u0001\u39E8\u0000\u0140\u0000\u4060\t\uC590\t\uC5B8\t\uC5E0\t\uC608\t\uC630\t\uC658\u0001\u2958\u0000\u3F98\t\uC680\u0000\u0140\u0000\u3F98\t\uC6A8\t\uC6D0\t\uC6F8\t\uC720\t\uC748\u0000\u0140\u0000\u4178\u0000\u41A0\t\uC770\t\uC798\t\uC7C0\u0006\u79D0\u0000\u4060\t\uC7E8\t\uC810\t\uC838\t\uC860\t\uC888\t\uC8B0\t\uC8D8\t\uC900\t\uC928\t\uC950\t\uC978\t\uC9A0\t\uC9C8\t\uC9F0\t\uCA18\t\uCA40\t\uCA68\t\uCA90\t\uCAB8\t\uCAE0\t\uCB08\t\uCB30\t\uCB58\t\uCB80\t\uCBA8\t\uCBD0\t\uCBF8\t\uCC20\t\uCC48\t\uCC70\t\uCC98\t\uCCC0\t\uCCE8\t\uCD10\t\uCD38\t\uCD60\t\uCD88\t\uCDB0\t\uCDD8\t\uCE00\t\uCE28\t\uCE50\t\uCE78\t\uCEA0\t\uCEC8\t\uCEF0\t\uCF18\t\uCF40\u0000\u3EA8\t\uCF68\t\uCF90\t\uCFB8\t\uCFE0\t\uD008\t\uD030\t\uD058\t\uD080\t\uD0A8\t\uD0D0\t\uD0F8\t\uD120\t\uD148\t\uD170\t\uD198\t\uD1C0\t\uD1E8\t\uD210\t\uD238\t\uD260\t\uD288\t\uD2B0\t\uD2D8\t\uD300\t\uD328\t\uD350\t\uD378\t\uD3A0\t\uD3C8\t\uD3F0\t\uD418\t\uD440\t\uD468\t\uD490\t\uD4B8\t\uD4E0\t\uD508\t\uD530\t\uD558\t\uD580\t\uD5A8\u0000\u4060\t\uD5D0\t\uD5F8\t\uD620\t\uD648\u0003\u9238\t\uD670\t\uD698\u0001\uD678\u0001\uD6A0\t\uD6C0\u0000\u4178\u0000\u41A0\t\uD6E8\t\uD710\t\uD738\t\uD760\t\uD788\t\uD7B0\t\uD7D8\t\uD800\t\uD828\t\uD850\t\uD878\t\uD8A0\u0004\u50B0\u0001\uF360\t\uD8C8\t\uD8F0\t\uD918\u0004\u4C78\t\uD940\t\uD968\u0001\uE938\t\uD990\t\uD9B8\t\uD9E0\t\uDA08\t\uDA30\t\uDA58\u0006\uB418\u0006\uB440\u0000\u7148\u0001\uF4A0\b\uD518\t\uDA80\u0001\uEE60\u0001\uEE88\t\uDAA8\t\uDAD0\t\uDAF8\u0001\uF360\u0004\u50B0\t\uDB20\u0001\uF130\u0001\uEE60\u0001\uEE88\t\uDB48\t\uDB70\t\uDB98\u0001\uF068\t\uDBC0\u0001\uE708\u0004\u4D68\t\uDBE8\t\uDC10\t\uDC38\t\uDC60\t\uDC88\t\uDCB0\t\uDCD8\u0006\uB418\u0006\uB440\t\uDD00\t\uDD28\t\uDD50\u0001\uE5C8\t\uDD78\t\uDDA0\t\uDDC8\t\uDDF0\t\uDE18\u0006\uB418\u0006\uB440\u0001\uE500\u0001\uE528\t\uDE40\t\uDE68\t\uDE90\u0005\u8DE0\t\uDEB8\t\uDEE0\t\uDF08\t\uDF30\t\uDF58\t\uDF80\t\uDFA8\u0001\uEE60\u0001\uEE88\t\uDFD0\t\uDFF8\u0002\u0580\t\uE020\t\uE048\t\uE070\u0000\uC8A0\u0004\u4ED0\t\uE098\u0001\uEE60\u0001\uEE88\t\uE0C0\t\uE0E8\t\uE110\t\uE138\t\uE160\t\uE188\t\uE1B0\t\uE1D8\t\uE200\t\uE228\t\uE250\t\uE278\t\uE2A0\t\uE2C8\t\uE2F0\t\uE318\t\uE340\t\uE368\t\uE390\t\uE3B8\t\uE3E0\t\uE408\t\uE430\t\uE458\t\uE480\t\uE4A8\t\uD9B8\t\uE4D0\t\uE4F8\t\uE520\t\uE548\t\uE570\t\uE598\t\uE5C0\u0001\uE9D8\u0001\uEA00\t\uE5E8\t\uE610\u0001\uF130\u0001\uEE60\u0001\uEE88\t\uE638\t\uE660\t\uE688\t\uE6B0\t\uE6D8\t\uE700\t\uE728\t\uE750\t\uE778\t\uE7A0\t\uE7C8\t\uE7F0\t\uE818\t\uE840\u0004\u4B10\t\uE868\t\uE890\t\uE8B8\u0001\uEBE0\u0001\uEF50\u0004\u5060\t\uE8E0\b\u7550\t\uE908\t\uE930\t\uE958\t\uE980\t\uE9A8\u0001\uEB18\t\uE9D0\u0001\uEB18\t\uE9F8\t\uEA20\t\uEA48\u0001\uEE60\u0001\uEE88\t\uEA70\t\uEA98\u0001\uFBF8\t\uEAC0\t\uEAE8\u0001\uEF50\t\uEB10\t\uEB38\t\uEB60\t\uEB88\t\uEBB0\t\uEBD8\t\uEC00\t\uEC28\t\uEC50\t\uEC78\t\uECA0\t\uECC8\t\uECF0\t\uED18\t\uED40\t\uED68\t\uED90\t\uEDB8\t\uEDE0\t\uEE08\t\uEE30\t\uEE58\t\uEE80\t\uEEA8\t\uEED0\t\uEEF8\t\uEF20\u0001\u8308\t\uEF48\t\uEF70\t\uEF98\t\uEFC0\t\uEFE8\t\uF010\t\uF038\t\uF060\u0004\uD300\u0006\uF888\t\uF088\t\uF0B0\t\uF0D8\u0004\u4F70\t\uF100\t\uF128\t\uF150\t\uF178\u0001\uFD10\t\uF1A0\t\uF1C8\t\uF1F0\t\uF218\t\u6280\t\uF240\t\uF268\u0001\uF360\t\uF290\t\uF2B8\t\uF2E0\u0002\u0558\t\uF308\t\uF330\t\uF358\t\uF380\t\uF3A8\t\uF3D0\t\uF3F8\t\uF420\t\uF448\t\uF470\t\uF498\t\uF4C0\t\uF4E8\t\uF510\t\uF538\t\uF560\u0001\uF3D8\t\uF588\t\uF5B0\t\uF5D8\t\uF600\t\uF628\t\uF650\t\uF678\u0002\uD9B0\u0004\u5268\u0001\uF310\t\uF6A0\t\uF6C8\t\uF6F0\t\uF718\t\uF740\t\uF768\t\uF790\t\uF7B8\t\uF7E0\t\uF808\t\uF830\t\uF858\t\uF880\t\uF8A8\t\uF8D0\u0001\uF360\u0006\uBC60\t\uF8F8\u0001\uEA50\t\uF920\t\uF948\t\uF970\t\uF998\t\uF9C0\t\uF9E8\u0002\uBF98\u0002\uBFC0\t\uFA10\u0001\uEE60\u0001\uEE88\t\uFA38\t\uFA60\t\uFA88\t\uFAB0\t\uFAD8\u0000\u0000\u0000\u0140\t\uFB00\u0002\uDB40\u0000\uB8B0\t\uFB28\t\uFB50\u0000\u0000\t\uFB78\u0000\u0140\u0002\uDB40\u0000\uB8B0\t\uFBA0\t\uFBC8\t\uFBF0\t\uFC18\t\uFC40\t\uFC68\t\uFC90\t\uFCB8\u0000\u0000\t\uFCE0\t\uFD08\t\uFD30\u0002\uDB40\u0000\uB8B0\u0000\u0140\t\uFD58\t\uFD80\u0002\uDB40\u0000\uB8B0\u0002\uDB40\u0000\uB8B0\t\uFDA8\u0000\u0140\u0000\uBA18\t\uFDD0\t\uFDF8\t\uFE20\t\uFE48\t\uFE70\t\uFE98\u0000\u0140\t\uFEC0\t\uFEE8\t\uFF10\t\uFF38\t\uFF60\u0001\u5838\u0003\u98A0\u0003\u98C8\t\uFF88\u0000\u0140\u0001\u3880\u0001\u38A8\t\uFFB0\t\uFFD8\n\u0000\n(\nP\nx\n\u00A0\n\u00C8\n\u00F0\n\u0118\n\u0140\u0000\u0140\u0000\u4178\u0000\u41A0\n\u0168\n\u0190\n\u01B8\n\u01E0\n\u0208\n\u0230\n\u0258\n\u0280\n\u02A8\n\u02D0\n\u02F8\n\u0320\n\u0348\n\u0370\n\u0398\n\u03C0\n\u03E8\n\u0410\n\u0438\n\u0460\n\u0488\u0000\u0000\n\u04B0\n\u04D8\n\u0500\n\u0528\n\u0550\n\u0578\u0000\u0140\n\u05A0\n\u05C8\u0000\u4178\u0000\u41A0\n\u05F0\n\u0618\n\u0640\n\u0668\n\u0690\n\u06B8\n\u06E0\n\u0708\n\u0730\u0000\u4060\n\u0758\n\u0780\n\u07A8\n\u07D0\n\u07F8\n\u0820\n\u0848\u0000\u0140\u0001\u2958\u0000\u3F98\u0000\u3E58\n\u0870\n\u0898\n\u08C0\u0000\u0140\u0001\u39C0\u0001\u38A8\n\u08E8\n\u0910\n\u0938\n\u0960\n\u0988\n\u09B0\u0000\u0140\n\u09D8\n\u0A00\n\u0A28\n\u0A50\n\u0A78\n\u0AA0\n\u0AC8\n\u0AF0\n\u0B18\n\u0B40\n\u0B68\n\u0B90\n\u0BB8\u0000\u0140\u0001\u3880\u0001\u38A8\n\u0BE0\n\u0C08\n\u0C30\n\u0C58\n\u0C80\n\u0CA8\n\u0CD0\n\u0CF8\n\u0D20\n\u0D48\n\u0D70\n\u0D98\n\u0DC0\t\uB7D0\n\u0DE8\u0006\u2BB0\n\u0E10\n\u0E38\n\u0E60\n\u0E88\n\u0EB0\n\u0ED8\n\u0F00\n\u0F28\u0001\u3880\u0001\u38A8\u0000\u4178\u0000\u41A0\n\u0F50\n\u0F78\n\u0FA0\n\u0FC8\n\u0FF0\n\u1018\n\u1040\n\u1068\n\u1090\n\u10B8\n\u10E0\u0001\uF360\u0004\uD300\u0006\uF888\u0004\u9E30\u0004\u9E58\n\u1108\u0001\uFB08\u0001\uF360\n\u1130\u0001\uE708\u0004\u4D68\n\u1158\n\u1180\n\u11A8\n\u11D0\n\u11F8\n\u1220\n\u1248\n\u1270\n\u1298\n\u12C0\u0001\uEE60\u0001\uEE88\n\u12E8\n\u1310\n\u1338\n\u1360\n\u1388\u0001\uFB08\u0001\uF400\n\u13B0\n\u13D8\n\u1400\n\u1428\n\u1450\n\u1478\n\u14A0\n\u14C8\u0001\uF360\n\u14F0\n\u1518\n\u1540\u0001\uEE60\u0002\uC8A8\n\u1568\n\u1590\n\u15B8\n\u15E0\n\u1608\n\u1630\n\u1658\n\u1680\n\u16A8\n\u16D0\n\u16F8\n\u1720\u0001\uEA50\n\u1748\n\u1770\n\u1798\n\u17C0\n\u17E8\u0001\uF360\u0001\uEB18\u0000\u7058\n\u1810\n\u1838\n\u1860\n\u1888\n\u18B0\u0001\uEBB8\u0001\uEA00\u0004\u53D0\n\u18D8\n\u1900\n\u1928\n\u1950\u0001\uF360\u0001\uED20\n\u1978\n\u19A0\n\u19C8\n\u19F0\n\u1A18\n\u1A40\n\u1A68\n\u1A90\n\u1AB8\n\u1AE0\u0001\uE9D8\u0001\uEA00\u0001\uF4C8\n\u1B08\n\u1B30\n\u1B58\n\u1B80\n\u1BA8\n\u1BD0\n\u1BF8\n\u1C20\n\u1C48\n\u1C70\n\u1C98\n\u1CC0\n\u1CE8\n\u1D10\n\u1D38\u0006\uFD60\n\u1D60\n\u1D88\n\u1DB0\n\u1DD8\n\u1E00\u0001\uE9D8\u0001\uEA00\u0001\uEE60\u0001\uEE88\n\u1E28\n\u1E50\n\u1E78\u0001\uE708\u0004\u4D68\n\u1EA0\n\u1EC8\n\u1EF0\n\u1F18\u0000\u0000\n\u1F40\n\u1F68\n\u1F90\n\u1FB8\n\u1FE0\u0000\u0000\n\u2008\u0000\u0140\u0000\u0000\u0000\u0000\u0000\u0140\n\u2030\n\u2058\n\u2080\n\u20A8\n\u20D0\n\u20F8\n\u2120\n\u2148\n\u2170\n\u2198\n\u21C0\n\u21E8\u0000\u0140\n\u2210\n\u2238\u0000\u0140\u0001\u3880\u0001\u38A8\n\u2260\n\u2288\n\u22B0\u0000\u0140\u0000\u4178\u0000\u41A0\n\u22D8\n\u2300\n\u2328\n\u2350\n\u2378\u0000\u0000\n\u23A0\n\u23C8\n\u23F0\n\u2418\n\u2440\u0000\u0000\n\u2468\n\u2490\n\u24B8\n\u24E0\n\u2508\n\u2530\n\u2558\n\u2580\n\u25A8\n\u25D0\n\u25F8\n\u2620\n\u2648\n\u2670\n\u2698\n\u26C0\n\u26E8\n\u2710\u0000\u0000\n\u2738\n\u2760\n\u2788\n\u27B0\n\u27D8\n\u2800\n\u2828\n\u2850\n\u2878\n\u28A0\n\u28C8\n\u28F0\n\u2918\n\u2940\n\u2968\u0000\u0140\u0000\u4178\u0000\u41A0\n\u2990\n\u29B8\n\u29E0\n\u2A08\n\u2A30\n\u2A58\n\u2A80\n\u2AA8\n\u2AD0\n\u2AF8\n\u2B20\n\u2B48\n\u2B70\u0006\uBA58\n\u2B98\n\u2BC0\n\u2BE8\n\u2C10\n\u2C38\n\u2C60\n\u2C88\n\u2CB0\n\u2CD8\u0001\uE708\u0004\u4D68\n\u2D00\n\u2D28\u0001\uEE60\u0001\uEE88\n\u2D50\n\u2D78\n\u2DA0\n\u2DC8\n\u2DF0\n\u2E18\n\u2E40\n\u2E68\n\u2E90\u0001\uE708\u0004\u4D68\n\u2EB8\n\u2EE0\n\u2F08\n\u2F30\n\u2F58\n\u2F80\b\u59D0\n\u2FA8\n\u2FD0\n\u2FF8\n\u3020\n\u3048\n\u3070\n\u3098\n\u30C0\n\u30E8\n\u3110\n\u3138\n\u3160\b\u59D0\u0001\uEE60\u0001\uEE88\n\u3188\n\u31B0\u0004\u5150\n\u31D8\n\u3200\n\u3228\n\u3250\n\u3278\n\u32A0\n\u32C8\u0000\u0000\n\u32F0\u0000\u0140\u0000\u14C8\u0000\uB9F0\n\u3318\n\u3340\n\u3368\u0000\u0000\n\u3390\n\u33B8\n\u33E0\n\u3408\n\u3430\n\u3458\n\u3480\u0000\u0000\n\u34A8\n\u34D0\n\u34F8\n\u3520\n\u3548\u0000\u0140\u0000\u3EF8\u0000\u3F20\u0000\u0000\n\u3570\n\u3598\n\u35C0\n\u35E8\u0000\u0140\u0000\u4178\u0000\u41A0\u0000\u0140\n\u3610\n\u3638\n\u3660\n\u3688\n\u36B0\n\u36D8\n\u3700\n\u3728\n\u3750\n\u3778\n\u37A0\u0000\u0000\n\u3778\n\u37C8\n\u37F0\n\u3818\n\u3840\n\u3868\n\u3890\n\u38B8\u0000\u0000\n\u38E0\n\u3908\u0000\u0140\u0000\u4060\n\u3930\n\u3958\u0001\uFBF8\n\u3980\n\u39A8\n\u39D0\n\u39F8\n\u3A20\u0000\u7148\u0001\uF4A0\n\u3A48\u0000\u7148\u0000\u7170\n\u3A70\n\u3A98\u0001\uEE60\u0001\uEE88\n\u3AC0\n\u3AE8\n\u3B10\n\u3B38\n\u3B60\n\u3B88\n\u3BB0\n\u3BD8\u0005\u8DE0\n\u3C00\n\u3C28\n\u3C50\n\u3C78\u0001\uEA50\n\u3CA0\n\u3CC8\u0000\u0000\n\u3CF0\n\u3D18\u0000\u0000\n\u3D40\n\u3D68\n\u3D90\n\u3DB8\n\u3DE0\n\u3E08\n\u3E30\n\u3E58\n\u3E80\n\u3EA8\n\u3ED0\n\u3EF8\n\u3F20\n\u3F48\n\u3F70\n\u3F98\u0000\u38E0\n\u3FC0\n\u3FE8\n\u4010\n\u4038\n\u4060\n\u4088\n\u40B0\n\u40D8\u0001\u3948\n\u4100\n\u4128\n\u4150\n\u4178\n\u41A0\n\u41C8\n\u41F0\n\u4218\n\u4240\n\u4268\n\u4290\n\u42B8\n\u42E0\n\u4308\u0001\uF0B8\n\u4330\n\u4358\u0000\u0000\u0000\u0000\n\u4380\n\u43A8\n\u43D0\n\u43F8\n\u4420\n\u4448\u0000\u0000\u0000\u0000\n\u4470\n\u4470\n\u4498\n\u44C0\n\u44E8\n\u4510\n\u4538\n\u4560\u0000\u0000\n\u4588\u0001\uE938\n\u45B0\n\u45D8\n\u4600\n\u4628\u0000\u0000\u0000\u0000\n\u4650\n\u4678\n\u46A0\u0000\u0140\u0000\u4178\u0000\u41A0\n\u46C8\u0000\u0140\u0000\u4178\u0000\u41A0\u0000\u0000\n\u46F0\n\u4718\u0004\u5150\u0001\uEE60\u0001\uEE88\u0001\uEE60\u0001\uEE88\n\u4740\n\u4768\n\u4790\u0000\u0000\n\u47B8\n\u47E0\u0000\u0000\n\u4808\n\u4830\u0000\u0000\n\u4858\n\u4880\u0000\u0000");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertTrue(boolean0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  //Test case number: 12
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I39 Branch 30 IFEQ L376 - false
   * Goal 2. wheel.json.JSONObject.getJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 47 IFEQ L499 - false
   * Goal 3. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I108 Branch 117 IFEQ L1271 - false
   */

  @Test
  public void test12()  throws Throwable  {
      LinkedList<WordLemmaTag> linkedList0 = new LinkedList<WordLemmaTag>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONObject jSONObject0 = new JSONObject((Object) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("I", (Collection) linkedList0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, linkedList0.size());
      assertEquals(3, jSONObject1.length());
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONObject1);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01D);
      
      JSONObject jSONObject2 = jSONObject1.append("I", (Object) double0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(0, linkedList0.size());
      assertEquals(3, jSONObject1.length());
      assertEquals(3, jSONObject0.length());
      assertEquals(3, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      JSONArray jSONArray0 = jSONObject1.getJSONArray("I");
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertEquals(0, linkedList0.size());
      assertEquals(3, jSONObject1.length());
      assertEquals(1, jSONArray0.length());
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONArray0);
      
      String string0 = JSONObject.valueToString(jSONArray0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertEquals("[0]", string0);
      assertEquals(0, linkedList0.size());
      assertEquals(3, jSONObject1.length());
      assertEquals(1, jSONArray0.length());
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I140 Branch 130 IFEQ L1332 - false
   */

  @Test
  public void test13()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = JSONObject.valueToString(linkedList0, 2266, 2266);
      assertEquals("[]", string0);
      assertEquals(0, linkedList0.size());
      assertNotNull(string0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 48 IFEQ L517 - true
   */

  @Test
  public void test14()  throws Throwable  {
      HashMap<LinkedList<HasInterval<Integer>>, Byte> hashMap0 = new HashMap<LinkedList<HasInterval<Integer>>, Byte>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("S]0xHc\"G", (Object) hashMap0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(jSONObject1);
      
      try {
        JSONObject jSONObject2 = jSONObject1.getJSONObject("S]0xHc\"G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"S]0xHc\\\"G\"] is not a JSONObject.
         //
      }
  }

  //Test case number: 15
  @Test
  public void test15()  throws Throwable  {
      String string0 = JSONObject.valueToString("{");
      assertEquals("\"{\"", string0);
      assertNotNull(string0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I23 Branch 93 IFNE L1090 - true
   */

  @Test
  public void test16()  throws Throwable  {
      HashMap<Tag, IndexedWord> hashMap0 = new HashMap<Tag, IndexedWord>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("_Y yfPV7dyrtwV", 3016);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      
      String string0 = jSONObject1.getString("_Y yfPV7dyrtwV");
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals("3016", string0);
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNotNull(string0);
      
      Double double0 = new Double(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, (double)double0, 0.01D);
      
      try {
        JSONObject jSONObject2 = jSONObject0.accumulate("3016", (Object) double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
      }
  }

  //Test case number: 17
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.toString()Ljava/lang/String;: I19 Branch 101 IFEQ L1140 - false
   * Goal 2. wheel.json.JSONObject.toString()Ljava/lang/String;: I28 Branch 102 IF_ICMPLE L1141 - true
   * Goal 3. wheel.json.JSONObject.toString()Ljava/lang/String;: I28 Branch 102 IF_ICMPLE L1141 - false
   * Goal 4. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I102 Branch 116 IFNE L1271 - true
   */

  @Test
  public void test17()  throws Throwable  {
      Float float0 = new Float((-2769.4807F));
      assertEquals((-2769.4807F), (float)float0, 0.01F);
      
      JSONObject jSONObject0 = new JSONObject((Object) float0);
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = JSONObject.valueToString(jSONObject0);
      assertEquals("{\"infinite\":false,\"naN\":false,\"class\":\"class java.lang.Float\"}", string0);
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optDouble(Ljava/lang/String;D)D: I13 Branch 64 IFEQ L764 - false
   */

  @Test
  public void test18()  throws Throwable  {
      HashMap<Tag, IndexedWord> hashMap0 = new HashMap<Tag, IndexedWord>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("_Y yfPV7dyrtwV", 3016);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      
      double double0 = jSONObject1.optDouble("_Y yfPV7dyrtwV", (double) 3016);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(3016.0, double0, 0.01D);
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I6 Branch 57 IFNONNULL L662 - false
   */

  @Test
  public void test19()  throws Throwable  {
      try {
        String string0 = JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
      }
  }

  //Test case number: 20
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I54 Branch 36 IFLE L401 - false
   * Goal 2. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I77 Branch 37 IFLE L404 - false
   */

  @Test
  public void test20()  throws Throwable  {
      String string0 = JSONObject.doubleToString((double) 1207.0F);
      assertEquals("1207", string0);
      assertNotNull(string0);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I12 Branch 4 IF_ICMPEQ L178 - false
   */

  @Test
  public void test21()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("TNyCpU{ wq3R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of TNyCpU{ wq3R
         //
      }
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I7 Branch 31 IFNE L393 - true
   */

  @Test
  public void test22()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.POSITIVE_INFINITY);
      assertEquals("null", string0);
      assertNotNull(string0);
  }

  //Test case number: 23
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.getJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 47 IFEQ L499 - true
   * Goal 2. wheel.json.JSONObject.getJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 48 IFEQ L517 - false
   * Goal 3. wheel.json.JSONObject.optJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 66 IFEQ L829 - false
   */

  @Test
  public void test23()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", (Object) jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject0.getJSONObject("] is not a Boolean.");
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject2.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject2);
      
      JSONObject jSONObject3 = jSONObject2.optJSONObject("] is not a Boolean.");
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject3);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject3.length());
      assertEquals(1, jSONObject2.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject3);
      
      try {
        JSONArray jSONArray0 = jSONObject0.getJSONArray("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a Boolean.\"] is not a JSONArray.
         //
      }
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 6 LOOKUPSWITCH L183 Case 125 - true
   */

  @Test
  public void test24()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I6 Branch 98 IFNULL L1113 - true
   */

  @Test
  public void test25()  throws Throwable  {
      HashMap<WordLemmaTag, WordLemmaTag> hashMap0 = new HashMap<WordLemmaTag, WordLemmaTag>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I45 Branch 35 IFGE L400 - true
   */

  @Test
  public void test26()  throws Throwable  {
      String string0 = JSONObject.doubleToString(3.0000000018557215E9);
      assertEquals("3.0000000018557215E9", string0);
      assertNotNull(string0);
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I6 Branch 52 IFNONNULL L568 - false
   */

  @Test
  public void test27()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I54 Branch 96 IFNE L1095 - true
   */

  @Test
  public void test28()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
      
      try {
        String string0 = JSONObject.numberToString((Number) Float.POSITIVE_INFINITY);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
      }
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I52 Branch 28 IFEQ L350 - false
   */

  @Test
  public void test29()  throws Throwable  {
      LinkedList<WordLemmaTag> linkedList0 = new LinkedList<WordLemmaTag>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      BasicDocument<Object> basicDocument0 = new BasicDocument<Object>();
      assertEquals(0, basicDocument0.size());
      assertNull(basicDocument0.originalText());
      assertEquals("", basicDocument0.title());
      assertTrue(basicDocument0.isEmpty());
      assertNotNull(basicDocument0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "e";
      JSONObject jSONObject0 = new JSONObject((Object) basicDocument0, stringArray0);
      assertEquals(0, basicDocument0.size());
      assertNull(basicDocument0.originalText());
      assertEquals("", basicDocument0.title());
      assertTrue(basicDocument0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("e", (Collection) linkedList0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(0, basicDocument0.size());
      assertNull(basicDocument0.originalText());
      assertEquals("", basicDocument0.title());
      assertTrue(basicDocument0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject0.accumulate("e", (Object) stringArray0[2]);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(0, basicDocument0.size());
      assertNull(basicDocument0.originalText());
      assertEquals("", basicDocument0.title());
      assertTrue(basicDocument0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
  }

  //Test case number: 30
  /*
   * 5 covered goals:
   * Goal 1. wheel.json.JSONObject.isNull(Ljava/lang/String;)Z: root-Branch
   * Goal 2. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I11 Branch 50 IFNE L548 - true
   * Goal 3. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I37 Branch 51 IFEQ L554 - true
   * Goal 4. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I37 Branch 51 IFEQ L554 - false
   * Goal 5. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I6 Branch 110 IFNULL L1253 - true
   */

  @Test
  public void test30()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotNull(jSONObject1);
      
      boolean boolean0 = jSONObject1.isNull(": ");
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
      assertTrue(boolean0);
      assertEquals(0, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotNull(stringArray0);
      
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
      assertNotNull(string0);
  }

  //Test case number: 31
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I160 Branch 131 IFEQ L1335 - false
   */

  @Test
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      String string0 = JSONObject.valueToString(byteArray0, (byte)0, (byte)121);
      assertEquals("[\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         0,\n                                                                                                                         0\n                                                                                                                         ]", string0);
      assertNotNull(string0);
  }

  //Test case number: 32
  /*
   * 5 covered goals:
   * Goal 1. wheel.json.JSONObject$Null.toString()Ljava/lang/String;: root-Branch
   * Goal 2. wheel.json.JSONObject.toString()Ljava/lang/String;: I19 Branch 101 IFEQ L1140 - true
   * Goal 3. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I125 Branch 107 IF_ICMPGE L1211 - false
   * Goal 4. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I194 Branch 109 IF_ICMPGE L1221 - false
   * Goal 5. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I121 Branch 118 IFEQ L1275 - false
   */

  @Test
  public void test32()  throws Throwable  {
      LinkedList<LabeledWord> linkedList0 = new LinkedList<LabeledWord>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      HashMap<IndexedWord, Float> hashMap0 = new HashMap<IndexedWord, Float>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONArray jSONArray1 = jSONArray0.put(975, (Map) hashMap0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(976, jSONArray0.length());
      assertEquals(976, jSONArray1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONArray1);
      
      JSONObject jSONObject0 = jSONArray1.toJSONObject(jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(976, jSONArray0.length());
      assertEquals(976, jSONArray1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = jSONObject0.toString(975, 975);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals("{\n{}\": {},\nnull\": null\n}", string0);
      assertEquals(0, linkedList0.size());
      assertEquals(976, jSONArray0.length());
      assertEquals(976, jSONArray1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(2, jSONObject0.length());
      assertNotNull(string0);
      
      HashMap<StringLabel, CategoryWordTag> hashMap1 = new HashMap<StringLabel, CategoryWordTag>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      String string1 = JSONObject.valueToString(hashMap1);
      assertNotSame(string1, string0);
      assertEquals("{}", string1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  //Test case number: 33
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 5 LOOKUPSWITCH L183 Case 0 - false
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 7 LOOKUPSWITCH L183 Default-Case - true
   * Goal 3. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I61 Branch 8 IF_ICMPNE L198 - true
   * Goal 4. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I86 Branch 10 IF_ICMPEQ L202 - false
   */

  @Test
  public void test33()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{JswE8~SOGO");
      assertTrue(jSONTokener0.more());
      assertNotNull(jSONTokener0);
      
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 12 of {JswE8~SOGO
         //
      }
  }

  //Test case number: 34
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I6 Branch 1 IFNULL L115 - true
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I13 Branch 122 IFEQ L1304 - false
   */

  @Test
  public void test34()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
      
      String string0 = JSONObject.valueToString(object0, 2999, 2999);
      assertEquals("null", string0);
      assertNotNull(string0);
  }

  //Test case number: 35
  /*
   * 5 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/lang/String;)V: root-Branch
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I12 Branch 4 IF_ICMPEQ L178 - true
   * Goal 3. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 5 LOOKUPSWITCH L183 Case 0 - true
   * Goal 4. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 6 LOOKUPSWITCH L183 Case 125 - false
   * Goal 5. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 7 LOOKUPSWITCH L183 Default-Case - false
   */

  @Test
  public void test35()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
      }
  }

  //Test case number: 36
  /*
   * 5 covered goals:
   * Goal 1. wheel.json.JSONObject.getInt(Ljava/lang/String;)I: I13 Branch 46 IFEQ L484 - false
   * Goal 2. wheel.json.JSONObject.optJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 66 IFEQ L829 - true
   * Goal 3. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I45 Branch 95 IFEQ L1094 - false
   * Goal 4. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I54 Branch 96 IFNE L1095 - false
   * Goal 5. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I61 Branch 97 IFEQ L1095 - true
   */

  @Test
  public void test36()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("getetByoes", (-2527L));
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      
      Float float0 = new Float((double) (-2527L));
      assertEquals((-2527.0F), (float)float0, 0.01F);
      
      int int0 = jSONObject1.getInt("getetByoes");
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals((-2527), int0);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      
      JSONObject jSONObject2 = jSONObject0.optJSONObject("getetByoes");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertNull(jSONObject2);
      
      try {
        JSONObject jSONObject3 = jSONObject0.append("getetByoes", (Object) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[getetByoes] is not a JSONArray.
         //
      }
  }

  //Test case number: 37
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I6 Branch 52 IFNONNULL L568 - true
   * Goal 2. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I40 Branch 53 IFNE L574 - true
   * Goal 3. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I60 Branch 54 IF_ICMPGE L578 - true
   * Goal 4. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I60 Branch 54 IF_ICMPGE L578 - false
   */

  @Test
  public void test37()  throws Throwable  {
      Float float0 = new Float(453.6F);
      assertEquals(453.6F, (float)float0, 0.01F);
      
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
  }

  //Test case number: 38
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.optInt(Ljava/lang/String;)I: root-Branch
   * Goal 2. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I6 Branch 73 IFNULL L1015 - true
   */

  @Test
  public void test38()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("getiterator", (Object) "getiterator");
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(boolean0);
      assertEquals(1, jSONObject0.length());
      
      int int0 = jSONObject0.optInt("getiterator");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, int0);
      assertEquals(1, jSONObject0.length());
  }

  //Test case number: 39
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I12 Branch 74 IFNE L1015 - false
   */

  @Test
  public void test39()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      long long0 = jSONObject0.optLong("", 0L);
      assertEquals(0L, long0);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 40
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I18 Branch 55 IFEQ L648 - false
   * Goal 2. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I37 Branch 56 IFNE L651 - true
   */

  @Test
  public void test40()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("m", (Object) "m");
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONArray0.length());
      assertNotNull(jSONArray0);
  }

  //Test case number: 41
  /*
   * 8 covered goals:
   * Goal 1. wheel.json.JSONObject.optBoolean(Ljava/lang/String;Z)Z: root-Branch
   * Goal 2. wheel.json.JSONObject.optBoolean(Ljava/lang/String;)Z: root-Branch
   * Goal 3. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 29 IFNONNULL L374 - false
   * Goal 4. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I14 Branch 39 IFNE L439 - true
   * Goal 5. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I20 Branch 40 IFEQ L439 - true
   * Goal 6. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I47 Branch 43 IFEQ L443 - true
   * Goal 7. wheel.json.JSONObject.getLong(Ljava/lang/String;)J: I13 Branch 49 IFEQ L536 - true
   * Goal 8. wheel.json.JSONObject.optJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 65 IFEQ L815 - true
   */

  @Test
  public void test41()  throws Throwable  {
      String string0 = JSONObject.doubleToString(2049.0932958599574);
      assertEquals("2049.0932958599574", string0);
      assertNotNull(string0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2049.0932958599574");
      assertFalse(boolean0);
      
      JSONObject jSONObject1 = jSONObject0.append("2049.0932958599574", (Object) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      boolean boolean1 = jSONObject1.optBoolean("2049.0932958599574", false);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(boolean1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertTrue(boolean1 == boolean0);
      
      JSONArray jSONArray0 = jSONObject1.optJSONArray("X78F1u$21H],");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNull(jSONArray0);
      
      JSONObject jSONObject2 = jSONObject1.put("X78F1u$21H],", false);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(2, jSONObject2.length());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertNotNull(jSONObject2);
      
      boolean boolean2 = jSONObject2.optBoolean("X78F1u$21H],");
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(boolean2);
      assertEquals(2, jSONObject2.length());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      long long0 = jSONObject1.optLong("X78F1u$21H],", 447L);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(447L, long0);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
  }

  //Test case number: 42
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I21 Branch 132 IFEQ L1357 - true
   * Goal 2. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I21 Branch 132 IFEQ L1357 - false
   * Goal 3. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I28 Branch 133 IFEQ L1358 - true
   * Goal 4. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I65 Branch 134 IFEQ L1365 - false
   */

  @Test
  public void test42()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      HashMap<Float, HashMap<HashableCoreMap, Boolean>> hashMap0 = new HashMap<Float, HashMap<HashableCoreMap, Boolean>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject1 = jSONObject0.put("N?Ngj'),4", (Map) hashMap0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = (StringWriter)jSONObject1.write((Writer) stringWriter0);
      assertSame(stringWriter1, stringWriter0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals("{\"N?Ngj'),4\":{}}", stringWriter1.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertEquals("{\"N?Ngj'),4\":{}}", stringWriter0.toString());
      assertEquals(1, jSONObject1.length());
      assertNotNull(stringWriter1);
  }

  //Test case number: 43
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.toString(I)Ljava/lang/String;: root-Branch
   * Goal 2. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I54 Branch 61 IFLE L671 - false
   * Goal 3. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I77 Branch 62 IFLE L674 - false
   * Goal 4. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I96 Branch 115 IFNE L1271 - true
   */

  @Test
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "val";
      HashMap<Tag, StringLabel> hashMap0 = new HashMap<Tag, StringLabel>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("val", 0.0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      String string0 = jSONObject1.toString(1391);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals("{\"val\": 0}", string0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(string0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      
      String string1 = JSONObject.valueToString(boolean0);
      assertNotSame(string1, string0);
      assertEquals("false", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  //Test case number: 44
  /*
   * 5 covered goals:
   * Goal 1. wheel.json.JSONObject.optString(Ljava/lang/String;)Ljava/lang/String;: root-Branch
   * Goal 2. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 29 IFNONNULL L374 - true
   * Goal 3. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I39 Branch 30 IFEQ L376 - true
   * Goal 4. wheel.json.JSONObject.optString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I12 Branch 67 IFNULL L889 - true
   * Goal 5. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I6 Branch 91 IFNULL L1088 - true
   */

  @Test
  public void test44()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = jSONObject0.optString((String) null);
      assertEquals("", string0);
      assertEquals(0, jSONObject0.length());
      assertNotNull(string0);
      
      HashMap<Float, HashMap<HashableCoreMap, Boolean>> hashMap0 = new HashMap<Float, HashMap<HashableCoreMap, Boolean>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      
      try {
        JSONObject jSONObject2 = jSONObject0.append("", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
      }
  }

  //Test case number: 45
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.has(Ljava/lang/String;)Z: root-Branch
   * Goal 2. wheel.json.JSONObject.put(Ljava/lang/String;Z)Lwheel/json/JSONObject;: I8 Branch 68 IFEQ L902 - true
   * Goal 3. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I30 Branch 94 IFEQ L1090 - false
   */

  @Test
  public void test45()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = jSONObject0.has("val");
      assertFalse(boolean0);
      assertEquals(0, jSONObject0.length());
      
      double double0 = jSONObject0.optDouble("val");
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("val", false);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      try {
        JSONObject jSONObject2 = jSONObject0.put("val", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
      }
  }

  //Test case number: 46
  /*
   * 7 covered goals:
   * Goal 1. wheel.json.JSONObject.remove(Ljava/lang/String;)Ljava/lang/Object;: root-Branch
   * Goal 2. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I20 Branch 70 IFNULL L978 - true
   * Goal 3. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I6 Branch 98 IFNULL L1113 - false
   * Goal 4. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I12 Branch 99 IFNE L1113 - true
   * Goal 5. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I12 Branch 99 IFNE L1113 - false
   * Goal 6. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I34 Branch 100 IF_ICMPGE L1117 - true
   * Goal 7. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I34 Branch 100 IF_ICMPGE L1117 - false
   */

  @Test
  public void test46()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      HashIndex<Tag> hashIndex0 = new HashIndex<Tag>();
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertNotNull(hashIndex0);
      
      JSONArray jSONArray0 = new JSONArray((Collection) hashIndex0);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, jSONArray0.length());
      assertNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray0.put(2499);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray0, jSONArray2);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertEquals(1, jSONArray2.length());
      assertEquals(1, jSONArray0.length());
      assertNotNull(jSONArray2);
      
      JSONArray jSONArray3 = jSONObject0.toJSONArray(jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray3);
      assertNotSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray3, jSONArray0);
      assertNotSame(jSONArray3, jSONArray2);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertEquals(1, jSONArray2.length());
      assertEquals(0, jSONObject0.length());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray3.length());
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertFalse(jSONArray0.equals((Object)jSONArray3));
      assertFalse(jSONArray3.equals((Object)jSONArray0));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertNotNull(jSONArray3);
      
      JSONObject jSONObject1 = jSONArray3.toJSONObject(jSONArray0);
      assertSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray3);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
      assertNotSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray3, jSONArray0);
      assertNotSame(jSONArray3, jSONArray2);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertEquals(1, jSONArray2.length());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, jSONObject1.length());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray3.length());
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONArray0.equals((Object)jSONArray3));
      assertFalse(jSONArray3.equals((Object)jSONArray0));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertNotNull(jSONObject1);
  }

  //Test case number: 47
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.getString(Ljava/lang/String;)Ljava/lang/String;: root-Branch
   * Goal 2. wheel.json.JSONObject.<init>(Ljava/util/Map;)V: I11 Branch 16 IFNONNULL L234 - false
   * Goal 3. wheel.json.JSONObject.getLong(Ljava/lang/String;)J: I13 Branch 49 IFEQ L536 - false
   * Goal 4. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 69 IFNONNULL L975 - false
   */

  @Test
  public void test47()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("_Y yfPV72dyrtwV", 3018);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      String string0 = jSONObject1.getString("_Y yfPV72dyrtwV");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals("3018", string0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(string0);
      
      long long0 = jSONObject1.getLong("_Y yfPV72dyrtwV");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(3018L, long0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      
      try {
        JSONObject jSONObject2 = jSONObject0.put((String) null, 3018L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
      }
  }

  //Test case number: 48
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I6 Branch 121 IFNULL L1304 - true
   */

  @Test
  public void test48()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 18, 18);
      assertEquals("null", string0);
      assertNotNull(string0);
  }

  //Test case number: 49
  /*
   * 9 covered goals:
   * Goal 1. wheel.json.JSONObject.optDouble(Ljava/lang/String;)D: root-Branch
   * Goal 2. wheel.json.JSONObject.optLong(Ljava/lang/String;J)J: root-Branch
   * Goal 3. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I14 Branch 39 IFNE L439 - false
   * Goal 4. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I20 Branch 40 IFEQ L439 - false
   * Goal 5. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I28 Branch 41 IFLE L439 - true
   * Goal 6. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I41 Branch 42 IFNE L443 - false
   * Goal 7. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I47 Branch 43 IFEQ L443 - false
   * Goal 8. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I55 Branch 44 IFLE L443 - true
   * Goal 9. wheel.json.JSONObject.optDouble(Ljava/lang/String;D)D: I13 Branch 64 IFEQ L764 - true
   */

  @Test
  public void test49()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      long long0 = jSONObject0.optLong("egetChars", (-1402L));
      assertEquals((-1402L), long0);
      assertEquals(0, jSONObject0.length());
      
      double double0 = jSONObject0.optDouble("egetChars");
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("egetChars", (Object) "egetChars");
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      
      try {
        boolean boolean0 = jSONObject0.getBoolean("egetChars");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"egetChars\"] is not a Boolean.
         //
      }
  }

  //Test case number: 50
  /*
   * 11 covered goals:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I31 Branch 58 IFLE L670 - true
   * Goal 2. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 78 LOOKUPSWITCH L1030 Case 10 - true
   * Goal 3. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I41 Branch 104 IF_ICMPNE L1197 - true
   * Goal 4. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I84 Branch 105 IFEQ L1204 - true
   * Goal 5. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I84 Branch 105 IFEQ L1204 - false
   * Goal 6. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I98 Branch 106 IF_ICMPLE L1206 - true
   * Goal 7. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I98 Branch 106 IF_ICMPLE L1206 - false
   * Goal 8. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I125 Branch 107 IF_ICMPGE L1211 - true
   * Goal 9. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I177 Branch 108 IF_ICMPLE L1219 - false
   * Goal 10. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I194 Branch 109 IF_ICMPGE L1221 - true
   * Goal 11. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I62 Branch 125 IFEQ L1317 - false
   */

  @Test
  public void test50()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("getgetBytes", (-2527L));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject0.putOpt("Error (line %d): 10 fields expected but %d are present", (Object) "Error (line %d): 10 fields expected but %d are present");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      String string0 = JSONObject.valueToString(jSONObject1, (-808), (-808));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertEquals("{\n\"getgetBytes\": -2527,\n\"Error (line %d): 10 fields expected but %d are present\": \"Error (line %d): 10 fields expected but %d are present\"\n}", string0);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertNotNull(string0);
      
      try {
        double double0 = jSONObject0.getDouble("{\n\"getgetBytes\": -2527,\n\"Error (line %d): 10 fields expected but %d are present\": \"Error (line %d): 10 fields expected but %d are present\"\n}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n\\\"getgetBytes\\\": -2527,\\n\\\"Error (line %d): 10 fields expected but %d are present\\\": \\\"Error (line %d): 10 fields expected but %d are present\\\"\\n}\"] not found.
         //
      }
  }

  //Test case number: 51
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I11 Branch 103 IFNE L1190 - false
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I121 Branch 129 IFEQ L1329 - false
   */

  @Test
  public void test51()  throws Throwable  {
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      SeqClassifierFlags seqClassifierFlags0 = new SeqClassifierFlags(properties0);
      assertFalse(seqClassifierFlags0.useMinimalAbbr1);
      assertEquals(15, seqClassifierFlags0.stochasticBatchSize);
      assertFalse(seqClassifierFlags0.useGazFeatures);
      assertFalse(seqClassifierFlags0.usePrediction);
      assertEquals(0, seqClassifierFlags0.nerSkipFirstK);
      assertFalse(seqClassifierFlags0.sloppyGazette);
      assertFalse(seqClassifierFlags0.useBigramInTwoClique);
      assertFalse(seqClassifierFlags0.useNextSequences);
      assertFalse(seqClassifierFlags0.dualDecompDebug);
      assertFalse(seqClassifierFlags0.printFactorTable);
      assertEquals(3, seqClassifierFlags0.charHalfWindow);
      assertFalse(seqClassifierFlags0.suppressTestDebug);
      assertFalse(seqClassifierFlags0.useTags);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions3);
      assertEquals(1, seqClassifierFlags0.nerSlowerTimes);
      assertFalse(seqClassifierFlags0.useSum);
      assertFalse(seqClassifierFlags0.useOWLQN);
      assertFalse(seqClassifierFlags0.useEmbedding);
      assertFalse(seqClassifierFlags0.selfTest);
      assertFalse(seqClassifierFlags0.usePhraseFeatures);
      assertEquals(Integer.MAX_VALUE, seqClassifierFlags0.printFeaturesUpto);
      assertEquals(0, seqClassifierFlags0.featureCountThreshold);
      assertFalse(seqClassifierFlags0.useOccurrencePatterns);
      assertFalse(seqClassifierFlags0.useAbbr);
      assertEquals((-1), seqClassifierFlags0.QNPasses);
      assertFalse(seqClassifierFlags0.useTypeSeqs);
      assertFalse(seqClassifierFlags0.makeConsistent);
      assertFalse(seqClassifierFlags0.factorInAlignmentProb);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSizeAlignment, 0.01D);
      assertEquals(0.01, seqClassifierFlags0.epsilon, 0.01D);
      assertTrue(seqClassifierFlags0.splitDocuments);
      assertFalse(seqClassifierFlags0.useMoreGazFeatures);
      assertFalse(seqClassifierFlags0.useWordPairs);
      assertFalse(seqClassifierFlags0.pctSegmenterScaleByCRF);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions3);
      assertFalse(seqClassifierFlags0.useClassFeature);
      assertFalse(seqClassifierFlags0.alternateTraining);
      assertFalse(seqClassifierFlags0.nonLinearCRF);
      assertEquals(1, seqClassifierFlags0.CRForder);
      assertFalse(seqClassifierFlags0.estimateInitial);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions2);
      assertFalse(seqClassifierFlags0.normalizeTimex);
      assertFalse(seqClassifierFlags0.useHKChar2);
      assertEquals(1, seqClassifierFlags0.multiThreadPerceptron);
      assertEquals(1, seqClassifierFlags0.kBest);
      assertFalse(seqClassifierFlags0.doGibbs);
      assertFalse(seqClassifierFlags0.doFeatureDiscovery);
      assertFalse(seqClassifierFlags0.useDictPK2);
      assertEquals(2, seqClassifierFlags0.maxLeft);
      assertFalse(seqClassifierFlags0.useHKSuf1);
      assertEquals(1, seqClassifierFlags0.numRuns);
      assertFalse(seqClassifierFlags0.useURLSequences);
      assertFalse(seqClassifierFlags0.useAltGazFeatures);
      assertFalse(seqClassifierFlags0.usePKChar2);
      assertFalse(seqClassifierFlags0.useChromaticSampling);
      assertEquals((-1), seqClassifierFlags0.wordShape);
      assertFalse(seqClassifierFlags0.usePrevNextLemmas);
      assertFalse(seqClassifierFlags0.dualDecompNotBIO);
      assertFalse(seqClassifierFlags0.cacheNGrams);
      assertEquals(1.0, seqClassifierFlags0.dropoutScale, 0.01D);
      assertEquals(10, seqClassifierFlags0.wideDisjunctionWidth);
      assertFalse(seqClassifierFlags0.groupByHiddenUnit);
      assertFalse(seqClassifierFlags0.useRule);
      assertFalse(seqClassifierFlags0.noEdgeFeature);
      assertFalse(seqClassifierFlags0.checkGradient);
      assertFalse(seqClassifierFlags0.useSGDtoQN);
      assertEquals((-1), seqClassifierFlags0.labelDictionaryCutoff);
      assertEquals(100, seqClassifierFlags0.numSamples);
      assertFalse(seqClassifierFlags0.verboseForTrueCasing);
      assertEquals((-1), seqClassifierFlags0.numHiddenUnits);
      assertFalse(seqClassifierFlags0.printProbs);
      assertFalse(seqClassifierFlags0.printFirstOrderProbs);
      assertFalse(seqClassifierFlags0.intern);
      assertFalse(seqClassifierFlags0.dampDDStepSizeWithAlignmentProb);
      assertFalse(seqClassifierFlags0.splitOnHead);
      assertFalse(seqClassifierFlags0.useAdaDelta);
      assertFalse(seqClassifierFlags0.usePrevSequences);
      assertFalse(seqClassifierFlags0.usePhraseWordSpecialTags);
      assertTrue(seqClassifierFlags0.useHiddenLayer);
      assertFalse(seqClassifierFlags0.useUnicodeType4gram);
      assertEquals(0.95, seqClassifierFlags0.adaDeltaRho, 0.01D);
      assertFalse(seqClassifierFlags0.usePhraseWords);
      assertFalse(seqClassifierFlags0.useANTE);
      assertFalse(seqClassifierFlags0.useStochasticQN);
      assertFalse(seqClassifierFlags0.useDualDecomp);
      assertFalse(seqClassifierFlags0.useDistSim);
      assertFalse(seqClassifierFlags0.useReverseAffix);
      assertFalse(seqClassifierFlags0.useFeaturesCpC4gram);
      assertEquals(0.001, seqClassifierFlags0.adaGradEps, 0.01D);
      assertFalse(seqClassifierFlags0.useHuber);
      assertFalse(seqClassifierFlags0.printXML);
      assertTrue(seqClassifierFlags0.keepOBInMemory);
      assertFalse(seqClassifierFlags0.useNERPrior);
      assertFalse(seqClassifierFlags0.useBerkeleyAlignerForViterbi);
      assertFalse(seqClassifierFlags0.useAdaGradFOBOS);
      assertFalse(seqClassifierFlags0.lowercaseNGrams);
      assertEquals(1.0, seqClassifierFlags0.lambdaEN, 0.01D);
      assertFalse(seqClassifierFlags0.useHKPre1);
      assertEquals(4, seqClassifierFlags0.disjunctionWidth);
      assertTrue(seqClassifierFlags0.separateASCIIandRange);
      assertEquals(8, seqClassifierFlags0.maxAllowedChromaticSize);
      assertFalse(seqClassifierFlags0.groupByInput);
      assertEquals(0.0, seqClassifierFlags0.newgeneThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.memoryThrift);
      assertFalse(seqClassifierFlags0.useNext);
      assertFalse(seqClassifierFlags0.useABSTRFreq);
      assertFalse(seqClassifierFlags0.useFeaturesC5gram);
      assertFalse(seqClassifierFlags0.evaluateTrain);
      assertFalse(seqClassifierFlags0.hardcodeSoftmaxOutputWeights);
      assertEquals(0.0, seqClassifierFlags0.softmaxTieLambda, 0.01D);
      assertFalse(seqClassifierFlags0.useChunks);
      assertFalse(seqClassifierFlags0.blockInitialize);
      assertFalse(seqClassifierFlags0.doAdaptation);
      assertEquals(0.5, seqClassifierFlags0.alignmentDecodeThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.mergeTags);
      assertEquals(0, seqClassifierFlags0.multiThreadGibbs);
      assertFalse(seqClassifierFlags0.useDictCTB2);
      assertFalse(seqClassifierFlags0.use2W);
      assertEquals(0, seqClassifierFlags0.removeTopN);
      assertFalse(seqClassifierFlags0.useRad2b);
      assertFalse(seqClassifierFlags0.useNegPKDict4);
      assertFalse(seqClassifierFlags0.useEitherSideDisjunctive);
      assertFalse(seqClassifierFlags0.useUniformPrior);
      assertFalse(seqClassifierFlags0.useNegPKDict3);
      assertFalse(seqClassifierFlags0.useNegPKDict2);
      assertFalse(seqClassifierFlags0.useLongSequences);
      assertFalse(seqClassifierFlags0.useNextVB);
      assertEquals(0, seqClassifierFlags0.numOfFeatureSlices);
      assertFalse(seqClassifierFlags0.useWEB);
      assertFalse(seqClassifierFlags0.useSigmoid);
      assertFalse(seqClassifierFlags0.useNeighborNGrams);
      assertFalse(seqClassifierFlags0.useAdaDiff);
      assertFalse(seqClassifierFlags0.useFirstWord);
      assertFalse(seqClassifierFlags0.useTrainLexicon);
      assertFalse(seqClassifierFlags0.geDebug);
      assertEquals(0.0, seqClassifierFlags0.featureWeightThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useMinimalAbbr);
      assertFalse(seqClassifierFlags0.useMUCFeatures);
      assertEquals(1.0, seqClassifierFlags0.unsupDropoutScale, 0.01D);
      assertFalse(seqClassifierFlags0.useNextRealWord);
      assertFalse(seqClassifierFlags0.initWithNERPosterior);
      assertFalse(seqClassifierFlags0.useFeaturesCpC5gram);
      assertFalse(seqClassifierFlags0.subCWGaz);
      assertFalse(seqClassifierFlags0.useLemmas);
      assertFalse(seqClassifierFlags0.useBig5);
      assertEquals(1, seqClassifierFlags0.numTimesRemoveTopN);
      assertEquals(1.0, seqClassifierFlags0.sigma, 0.01D);
      assertFalse(seqClassifierFlags0.strictlyThirdOrder);
      assertFalse(seqClassifierFlags0.useTypeSeqs2);
      assertFalse(seqClassifierFlags0.useTypeSeqs3);
      assertTrue(seqClassifierFlags0.useKnownLCWords);
      assertFalse(seqClassifierFlags0.usePKSuf1);
      assertEquals(0, seqClassifierFlags0.ocrFold);
      assertFalse(seqClassifierFlags0.useRad2);
      assertFalse(seqClassifierFlags0.useABSTRFreqDict);
      assertFalse(seqClassifierFlags0.dump);
      assertFalse(seqClassifierFlags0.useRad1);
      assertFalse(seqClassifierFlags0.useCommonWordsFeature);
      assertFalse(seqClassifierFlags0.keepEmptySentences);
      assertFalse(seqClassifierFlags0.useGazettePhrases);
      assertFalse(seqClassifierFlags0.useSequentialScanSampling);
      assertFalse(seqClassifierFlags0.tieOutputLayer);
      assertFalse(seqClassifierFlags0.greekifyNGrams);
      assertFalse(seqClassifierFlags0.useQuartic);
      assertFalse(seqClassifierFlags0.secondOrderNonLinear);
      assertFalse(seqClassifierFlags0.softmaxOutputLayer);
      assertEquals(1, seqClassifierFlags0.numStartLayers);
      assertFalse(seqClassifierFlags0.useFloat);
      assertTrue(seqClassifierFlags0.useWord);
      assertFalse(seqClassifierFlags0.noNeighborConstraints);
      assertFalse(seqClassifierFlags0.dontExtendTaggy);
      assertFalse(seqClassifierFlags0.useVB);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions);
      assertFalse(seqClassifierFlags0.usePre);
      assertEquals(8, seqClassifierFlags0.distSimMaxBits);
      assertTrue(seqClassifierFlags0.includeC2EViterbi);
      assertFalse(seqClassifierFlags0.addBiasToEmbedding);
      assertFalse(seqClassifierFlags0.usePrevVB);
      assertTrue(seqClassifierFlags0.useViterbi);
      assertFalse(seqClassifierFlags0.useRule2);
      assertEquals(0, seqClassifierFlags0.hybridCutoffIteration);
      assertFalse(seqClassifierFlags0.useABGENE);
      assertFalse(seqClassifierFlags0.useLastRealWord);
      assertEquals(1, seqClassifierFlags0.selfTrainIterations);
      assertFalse(seqClassifierFlags0.useOnlySeenWeights);
      assertEquals(0.0, seqClassifierFlags0.dropoutRate, 0.01D);
      assertFalse(seqClassifierFlags0.useShapeStrings);
      assertFalse(seqClassifierFlags0.useDictleng);
      assertFalse(seqClassifierFlags0.announceObjectBankEntries);
      assertFalse(seqClassifierFlags0.useLabelSource);
      assertFalse(seqClassifierFlags0.backpropLopTraining);
      assertFalse(seqClassifierFlags0.normalize);
      assertFalse(seqClassifierFlags0.useSuf);
      assertFalse(seqClassifierFlags0.usePhraseWordTags);
      assertFalse(seqClassifierFlags0.useASBCChar2);
      assertFalse(seqClassifierFlags0.useDict2);
      assertFalse(seqClassifierFlags0.powerAlignProb);
      assertEquals(1, seqClassifierFlags0.endFold);
      assertFalse(seqClassifierFlags0.useWordnetFeatures);
      assertEquals(25, seqClassifierFlags0.QNsize2);
      assertFalse(seqClassifierFlags0.booleanFeatures);
      assertFalse(seqClassifierFlags0.useTopics);
      assertEquals(1, seqClassifierFlags0.startFold);
      assertFalse(seqClassifierFlags0.useFeaturesCpC6gram);
      assertFalse(seqClassifierFlags0.useExtraTaggySequences);
      assertFalse(seqClassifierFlags0.useWEBFreqDict);
      assertEquals(1, seqClassifierFlags0.numFolds);
      assertFalse(seqClassifierFlags0.expandMidDot);
      assertFalse(seqClassifierFlags0.terminateOnAvgImprovement);
      assertFalse(seqClassifierFlags0.useShapeConjunctions);
      assertFalse(seqClassifierFlags0.useScaledSGD);
      assertEquals(1.0, seqClassifierFlags0.lambdaCH, 0.01D);
      assertFalse(seqClassifierFlags0.useHeadGov);
      assertFalse(seqClassifierFlags0.useTaggySequencesShapeInteraction);
      assertFalse(seqClassifierFlags0.useFeaturesC6gram);
      assertFalse(seqClassifierFlags0.useFREQ);
      assertTrue(seqClassifierFlags0.restrictLabels);
      assertFalse(seqClassifierFlags0.weightByEntropy);
      assertEquals(0, seqClassifierFlags0.scaledSGDMethod);
      assertFalse(seqClassifierFlags0.iobTags);
      assertEquals(0, seqClassifierFlags0.maxQNItr);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesAll);
      assertEquals(0.0, seqClassifierFlags0.pctSegmenterScale, 0.01D);
      assertEquals(0.0, seqClassifierFlags0.l1reg, 0.01D);
      assertTrue(seqClassifierFlags0.initWithPosterior);
      assertFalse(seqClassifierFlags0.usePKPre1);
      assertEquals(0, seqClassifierFlags0.interimOutputFreq);
      assertFalse(seqClassifierFlags0.useRandomSeed);
      assertFalse(seqClassifierFlags0.useNegASBCDict2);
      assertFalse(seqClassifierFlags0.useNegASBCDict3);
      assertFalse(seqClassifierFlags0.testVariance);
      assertFalse(seqClassifierFlags0.useNegASBCDict4);
      assertFalse(seqClassifierFlags0.twoStage);
      assertFalse(seqClassifierFlags0.printWeights);
      assertEquals((-1), seqClassifierFlags0.maxNGramLeng);
      assertFalse(seqClassifierFlags0.conjoinShapeNGrams);
      assertFalse(seqClassifierFlags0.useOutDict2);
      assertFalse(seqClassifierFlags0.combo);
      assertEquals(10, seqClassifierFlags0.totalFeatureSlice);
      assertFalse(seqClassifierFlags0.useSymWordPairs);
      assertEquals(0.1, seqClassifierFlags0.gainSGD, 0.01D);
      assertFalse(seqClassifierFlags0.useCWSWordFeatures);
      assertFalse(seqClassifierFlags0.useMoreAbbr);
      assertFalse(seqClassifierFlags0.useLC);
      assertFalse(seqClassifierFlags0.ocrTrain);
      assertFalse(seqClassifierFlags0.useWideDisjunctive);
      assertFalse(seqClassifierFlags0.useCTBPre1);
      assertEquals(1, seqClassifierFlags0.featureThreshold);
      assertFalse(seqClassifierFlags0.useWord2);
      assertFalse(seqClassifierFlags0.useNegDict3);
      assertFalse(seqClassifierFlags0.useWord3);
      assertFalse(seqClassifierFlags0.prependEmbedding);
      assertFalse(seqClassifierFlags0.useWord1);
      assertFalse(seqClassifierFlags0.useNegDict4);
      assertFalse(seqClassifierFlags0.useIfInteger);
      assertFalse(seqClassifierFlags0.randomLopWeights);
      assertEquals(1.0, seqClassifierFlags0.adaptSigma, 0.01D);
      assertFalse(seqClassifierFlags0.useSymTags);
      assertFalse(seqClassifierFlags0.useKL);
      assertFalse(seqClassifierFlags0.useTitle);
      assertFalse(seqClassifierFlags0.useWord4);
      assertFalse(seqClassifierFlags0.useGenericFeatures);
      assertEquals(0, seqClassifierFlags0.startEvaluateIters);
      assertEquals(0.0, seqClassifierFlags0.featureDiffThresh, 0.01D);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesBigram);
      assertFalse(seqClassifierFlags0.useObservedFeaturesOnly);
      assertEquals(Double.POSITIVE_INFINITY, seqClassifierFlags0.searchGraphPrune, 0.01D);
      assertFalse(seqClassifierFlags0.normalizeTerms);
      assertEquals(0, seqClassifierFlags0.maxDocSize);
      assertFalse(seqClassifierFlags0.useRobustQN);
      assertFalse(seqClassifierFlags0.use4Clique);
      assertFalse(seqClassifierFlags0.useNGrams);
      assertFalse(seqClassifierFlags0.restrictTransitionsTimit);
      assertFalse(seqClassifierFlags0.useHybrid);
      assertFalse(seqClassifierFlags0.useNegDict2);
      assertFalse(seqClassifierFlags0.useMidDotShape);
      assertFalse(seqClassifierFlags0.usePrev);
      assertFalse(seqClassifierFlags0.retainEntitySubclassification);
      assertFalse(seqClassifierFlags0.appendLC);
      assertTrue(seqClassifierFlags0.useInternal);
      assertFalse(seqClassifierFlags0.useChPos);
      assertFalse(seqClassifierFlags0.addCapitalFeatures);
      assertFalse(seqClassifierFlags0.removeStrictGoodCoNLLDuplicates);
      assertFalse(seqClassifierFlags0.useDictASBC2);
      assertFalse(seqClassifierFlags0.sighanPostProcessing);
      assertFalse(seqClassifierFlags0.useCTBChar2);
      assertFalse(seqClassifierFlags0.useNB);
      assertFalse(seqClassifierFlags0.useASBCSuf1);
      assertFalse(seqClassifierFlags0.regularizeSoftmaxTieParam);
      assertFalse(seqClassifierFlags0.strictGoodCoNLL);
      assertFalse(seqClassifierFlags0.skipOutputRegularization);
      assertFalse(seqClassifierFlags0.intern2);
      assertEquals(0.1, seqClassifierFlags0.initialGain, 0.01D);
      assertEquals(1.0, seqClassifierFlags0.randomizedRatio, 0.01D);
      assertFalse(seqClassifierFlags0.useHardGE);
      assertFalse(seqClassifierFlags0.fakeDataset);
      assertFalse(seqClassifierFlags0.useParenMatching);
      assertFalse(seqClassifierFlags0.baseline);
      assertFalse(seqClassifierFlags0.usePosition);
      assertFalse(seqClassifierFlags0.useMSRChar2);
      assertFalse(seqClassifierFlags0.largeChSegFile);
      assertEquals(0, seqClassifierFlags0.numOfSlices);
      assertFalse(seqClassifierFlags0.lazyUpdate);
      assertFalse(seqClassifierFlags0.useWordShapeGaz);
      assertFalse(seqClassifierFlags0.bioSubmitOutput);
      assertFalse(seqClassifierFlags0.doFE);
      assertFalse(seqClassifierFlags0.useMsr);
      assertFalse(seqClassifierFlags0.useDictHK2);
      assertEquals(0, seqClassifierFlags0.multiThreadClassifier);
      assertEquals(0.0, seqClassifierFlags0.priorLambda, 0.01D);
      assertFalse(seqClassifierFlags0.sparseOutputLayer);
      assertFalse(seqClassifierFlags0.dropoutApprox);
      assertFalse(seqClassifierFlags0.useDisjunctiveShapeInteraction);
      assertFalse(seqClassifierFlags0.transitionEdgeOnly);
      assertEquals((-1), seqClassifierFlags0.arbitraryInputLayerSize);
      assertEquals(0.9, seqClassifierFlags0.selfTrainConfidenceThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useNERPriorBIO);
      assertEquals(1, seqClassifierFlags0.numLopExpert);
      assertFalse(seqClassifierFlags0.groupByFeatureTemplate);
      assertEquals(0.0, seqClassifierFlags0.removeTopNPercent, 0.01D);
      assertFalse(seqClassifierFlags0.printNR);
      assertEquals(30, seqClassifierFlags0.beamSize);
      assertFalse(seqClassifierFlags0.suppressMidDotPostprocessing);
      assertFalse(seqClassifierFlags0.justify);
      assertFalse(seqClassifierFlags0.useCTBSuf1);
      assertFalse(seqClassifierFlags0.useCorefFeatures);
      assertFalse(seqClassifierFlags0.useDisjShape);
      assertFalse(seqClassifierFlags0.usePrediction2);
      assertFalse(seqClassifierFlags0.useMoreTags);
      assertFalse(seqClassifierFlags0.testHessSamples);
      assertFalse(seqClassifierFlags0.checkNameList);
      assertFalse(seqClassifierFlags0.terminateOnEvalImprovement);
      assertFalse(seqClassifierFlags0.useWordTag);
      assertEquals(50, seqClassifierFlags0.SGD2QNhessSamples);
      assertFalse(seqClassifierFlags0.useIsURL);
      assertEquals((-1), seqClassifierFlags0.purgeFeatures);
      assertEquals(1, seqClassifierFlags0.terminateOnEvalImprovementNumOfEpoch);
      assertTrue(seqClassifierFlags0.initViterbi);
      assertFalse(seqClassifierFlags0.useIsDateRange);
      assertFalse(seqClassifierFlags0.useNoisyNonNoisyFeature);
      assertEquals(1.0, seqClassifierFlags0.alignDDAlpha, 0.01D);
      assertFalse(seqClassifierFlags0.useASBCPre1);
      assertTrue(seqClassifierFlags0.useCWSFeatures);
      assertEquals((-1), seqClassifierFlags0.tuneSampleSize);
      assertEquals(1, seqClassifierFlags0.bisequencePriorType);
      assertFalse(seqClassifierFlags0.printTrainLabels);
      assertFalse(seqClassifierFlags0.useABSTR);
      assertFalse(seqClassifierFlags0.useBoundarySequences);
      assertFalse(seqClassifierFlags0.useNPGovernor);
      assertFalse(seqClassifierFlags0.randomLopFeatureSplit);
      assertFalse(seqClassifierFlags0.useTypeySequences);
      assertFalse(seqClassifierFlags0.casedDistSim);
      assertEquals(2, seqClassifierFlags0.CRFwindow);
      assertFalse(seqClassifierFlags0.usePk);
      assertEquals(1, seqClassifierFlags0.selfTrainWindowSize);
      assertEquals(1, seqClassifierFlags0.numDatasetsPerFile);
      assertFalse(seqClassifierFlags0.perceptronDebug);
      assertFalse(seqClassifierFlags0.useBerkeleyCompetitivePosterior);
      assertFalse(seqClassifierFlags0.useObservedSequencesOnly);
      assertFalse(seqClassifierFlags0.iobWrapper);
      assertFalse(seqClassifierFlags0.useNumberFeature);
      assertTrue(seqClassifierFlags0.useMemoryEvaluator);
      assertFalse(seqClassifierFlags0.useGoodForNamesCpC);
      assertFalse(seqClassifierFlags0.strictlyZeroethOrder);
      assertFalse(seqClassifierFlags0.purgeDatasets);
      assertTrue(seqClassifierFlags0.applyNERPenalty);
      assertEquals(1000, seqClassifierFlags0.wordSegBeamSize);
      assertFalse(seqClassifierFlags0.useUnknown);
      assertFalse(seqClassifierFlags0.useOrdinal);
      assertTrue(seqClassifierFlags0.learnCHBasedOnEN);
      assertEquals(0, seqClassifierFlags0.dualDecompMaxItr);
      assertFalse(seqClassifierFlags0.pctSegmenterLenAdjust);
      assertFalse(seqClassifierFlags0.useUnicodeType);
      assertFalse(seqClassifierFlags0.useProtoFeatures);
      assertFalse(seqClassifierFlags0.removeBackgroundSingletonFeatures);
      assertFalse(seqClassifierFlags0.verboseMode);
      assertFalse(seqClassifierFlags0.deleteBlankLines);
      assertFalse(seqClassifierFlags0.useGENIA);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSize, 0.01D);
      assertFalse(seqClassifierFlags0.saveFeatureIndexToDisk);
      assertTrue(seqClassifierFlags0.averagePerceptron);
      assertEquals(1, seqClassifierFlags0.multiThreadGrad);
      assertFalse(seqClassifierFlags0.useDisjunctive);
      assertFalse(seqClassifierFlags0.useTOK);
      assertEquals(0.0, seqClassifierFlags0.annealingRate, 0.01D);
      assertFalse(seqClassifierFlags0.useTaggySequences);
      assertEquals(0, seqClassifierFlags0.maxRight);
      assertFalse(seqClassifierFlags0.useEntityTypeSequences);
      assertFalse(seqClassifierFlags0.useFilter);
      assertFalse(seqClassifierFlags0.timitDatum);
      assertEquals(0, seqClassifierFlags0.featureCountThresh);
      assertFalse(seqClassifierFlags0.testObjFunction);
      assertFalse(seqClassifierFlags0.useLemmaAsWord);
      assertFalse(seqClassifierFlags0.useSMD);
      assertFalse(seqClassifierFlags0.useUnicodeType5gram);
      assertFalse(seqClassifierFlags0.useRadical);
      assertFalse(seqClassifierFlags0.useNPHead);
      assertEquals(0.1, seqClassifierFlags0.initRate, 0.01D);
      assertFalse(seqClassifierFlags0.includeFullCRFInLOP);
      assertFalse(seqClassifierFlags0.useYetMoreCpCShapes);
      assertFalse(seqClassifierFlags0.gradientDebug);
      assertTrue(seqClassifierFlags0.biAlignmentPriorIsPMI);
      assertFalse(seqClassifierFlags0.strictlySecondOrder);
      assertEquals(0, seqClassifierFlags0.evaluateIters);
      assertFalse(seqClassifierFlags0.useGEforSup);
      assertFalse(seqClassifierFlags0.outputIterationsToFile);
      assertTrue(seqClassifierFlags0.useSequences);
      assertFalse(seqClassifierFlags0.strictlyFirstOrder);
      assertTrue(seqClassifierFlags0.useDenero);
      assertFalse(seqClassifierFlags0.useSemPrior);
      assertFalse(seqClassifierFlags0.useInPlaceSGD);
      assertFalse(seqClassifierFlags0.useACR);
      assertFalse(seqClassifierFlags0.useSGD);
      assertTrue(seqClassifierFlags0.useExternal);
      assertFalse(seqClassifierFlags0.cleanGazette);
      assertFalse(seqClassifierFlags0.keepEnglishWhitespaces);
      assertFalse(seqClassifierFlags0.useAs);
      assertEquals(1.0E-4, seqClassifierFlags0.tolerance, 0.01D);
      assertFalse(seqClassifierFlags0.useEntityRule);
      assertFalse(seqClassifierFlags0.useFeaturesC4gram);
      assertTrue(seqClassifierFlags0.useOutputLayer);
      assertFalse(seqClassifierFlags0.useAcqPrior);
      assertFalse(seqClassifierFlags0.printLabelValue);
      assertEquals(10, seqClassifierFlags0.totalDataSlice);
      assertTrue(seqClassifierFlags0.useQN);
      assertFalse(seqClassifierFlags0.dehyphenateNGrams);
      assertFalse(seqClassifierFlags0.useShapeStrings3);
      assertFalse(seqClassifierFlags0.noMidNGrams);
      assertFalse(seqClassifierFlags0.useUnicodeBlock);
      assertFalse(seqClassifierFlags0.numberEquivalenceDistSim);
      assertFalse(seqClassifierFlags0.useShapeStrings1);
      assertFalse(seqClassifierFlags0.useShapeStrings4);
      assertFalse(seqClassifierFlags0.readStdin);
      assertFalse(seqClassifierFlags0.useShapeStrings5);
      assertFalse(seqClassifierFlags0.factorInBiEdgePotential);
      assertFalse(seqClassifierFlags0.useGazettes);
      assertFalse(seqClassifierFlags0.useWordn);
      assertFalse(seqClassifierFlags0.augmentedDateChars);
      assertEquals(0, seqClassifierFlags0.numTimesPruneFeatures);
      assertFalse(seqClassifierFlags0.useBeginSent);
      assertFalse(seqClassifierFlags0.dualDecompAlignment);
      assertEquals(25, seqClassifierFlags0.QNsize);
      assertEquals((-1), seqClassifierFlags0.maxIterations);
      assertEquals(0.0, seqClassifierFlags0.priorAlpha, 0.01D);
      assertFalse(seqClassifierFlags0.useYear);
      assertFalse(seqClassifierFlags0.lowerNewgeneThreshold);
      assertFalse(seqClassifierFlags0.useCRFforUnsup);
      assertEquals((-1), seqClassifierFlags0.SGDPasses);
      assertFalse(seqClassifierFlags0.useEntityTypes);
      assertFalse(seqClassifierFlags0.evaluateBackground);
      assertFalse(seqClassifierFlags0.matchNERIncentive);
      assertFalse(seqClassifierFlags0.useNegHKDict2);
      assertFalse(seqClassifierFlags0.learnENBasedOnCH);
      assertFalse(seqClassifierFlags0.useNegHKDict4);
      assertFalse(seqClassifierFlags0.useHk);
      assertFalse(seqClassifierFlags0.useNegHKDict3);
      assertFalse(seqClassifierFlags0.useNegCTBDict2);
      assertFalse(seqClassifierFlags0.useChunkySequences);
      assertFalse(seqClassifierFlags0.useNegCTBDict4);
      assertFalse(seqClassifierFlags0.useNegCTBDict3);
      assertFalse(seqClassifierFlags0.useNoisyLabel);
      assertFalse(seqClassifierFlags0.useSentenceNumber);
      assertFalse(seqClassifierFlags0.useKBest);
      assertFalse(seqClassifierFlags0.useBilingualNERPrior);
      assertFalse(seqClassifierFlags0.useSegmentation);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions3);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions2);
      assertFalse(seqClassifierFlags0.useBagOfWords);
      assertFalse(seqClassifierFlags0.powerAlignProbAsAddition);
      assertFalse(seqClassifierFlags0.useAbbr1);
      assertFalse(seqClassifierFlags0.useEitherSideWord);
      assertEquals((-1), seqClassifierFlags0.samplingSpeedUpThreshold);
      assertFalse(seqClassifierFlags0.tuneSGD);
      assertFalse(seqClassifierFlags0.keepAllWhitespaces);
      assertEquals(0.0, seqClassifierFlags0.alignmentPruneThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.groupByOutputClass);
      assertEquals(100, seqClassifierFlags0.printClassifierParam);
      assertFalse(seqClassifierFlags0.useReverse);
      assertFalse(seqClassifierFlags0.useSeenFeaturesOnly);
      assertEquals("", seqClassifierFlags0.toString());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(seqClassifierFlags0);
      
      HashMap<StringLabel, String> hashMap0 = new HashMap<StringLabel, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = JSONObject.valueToString(hashMap0, 0, Integer.MAX_VALUE);
      assertEquals("{}", string0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(string0);
  }

  //Test case number: 52
  /*
   * 7 covered goals:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I7 Branch 31 IFNE L393 - false
   * Goal 2. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I13 Branch 32 IFEQ L393 - true
   * Goal 3. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I31 Branch 33 IFLE L400 - false
   * Goal 4. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I38 Branch 34 IFGE L400 - false
   * Goal 5. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I45 Branch 35 IFGE L400 - false
   * Goal 6. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I54 Branch 36 IFLE L401 - true
   * Goal 7. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I77 Branch 37 IFLE L404 - true
   */

  @Test
  public void test52()  throws Throwable  {
      String string0 = JSONObject.doubleToString((double) 1208.6401F);
      assertEquals("1208.64013671875", string0);
      assertNotNull(string0);
  }

  //Test case number: 53
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I11 Branch 50 IFNE L548 - false
   */

  @Test
  public void test53()  throws Throwable  {
      WordLemmaTag wordLemmaTag0 = new WordLemmaTag("BGx~%\"~0J[w}=_$(fp", "BGx~%\"~0J[w}=_$(fp", "BGx~%\"~0J[w}=_$(fp");
      assertEquals("BGx~%\"~0J[w}=_$(fp", wordLemmaTag0.tag());
      assertEquals("BGx~%\"~0J[w}=_$(fp", wordLemmaTag0.lemma());
      assertEquals("BGx~%\"~0J[w}=_$(fp", wordLemmaTag0.value());
      assertEquals("BGx~%\"~0J[w}=_$(fp", wordLemmaTag0.word());
      assertNotNull(wordLemmaTag0);
      
      String[] stringArray0 = new String[10];
      JSONObject jSONObject0 = new JSONObject((Object) wordLemmaTag0, stringArray0);
      assertEquals(0, jSONObject0.length());
      assertEquals("BGx~%\"~0J[w}=_$(fp", wordLemmaTag0.tag());
      assertEquals("BGx~%\"~0J[w}=_$(fp", wordLemmaTag0.lemma());
      assertEquals("BGx~%\"~0J[w}=_$(fp", wordLemmaTag0.value());
      assertEquals("BGx~%\"~0J[w}=_$(fp", wordLemmaTag0.word());
      assertNotNull(jSONObject0);
      
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertEquals("BGx~%\"~0J[w}=_$(fp", wordLemmaTag0.tag());
      assertEquals("BGx~%\"~0J[w}=_$(fp", wordLemmaTag0.lemma());
      assertEquals("BGx~%\"~0J[w}=_$(fp", wordLemmaTag0.value());
      assertEquals("BGx~%\"~0J[w}=_$(fp", wordLemmaTag0.word());
      assertNull(stringArray1);
  }

  //Test case number: 54
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I138 Branch 119 IFEQ L1278 - false
   */

  @Test
  public void test54()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
      assertEquals(0, linkedList0.size());
      assertNotNull(string0);
  }

  //Test case number: 55
  /*
   * 18 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONObject;[Ljava/lang/String;)V: I15 Branch 3 IF_ICMPGE L162 - true
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONObject;[Ljava/lang/String;)V: I15 Branch 3 IF_ICMPGE L162 - false
   * Goal 3. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I33 Branch 17 IF_ICMPGE L263 - true
   * Goal 4. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I33 Branch 17 IF_ICMPGE L263 - false
   * Goal 5. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I58 Branch 18 IFLE L268 - true
   * Goal 6. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I58 Branch 18 IFLE L268 - false
   * Goal 7. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I78 Branch 19 IFLE L270 - true
   * Goal 8. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I78 Branch 19 IFLE L270 - false
   * Goal 9. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I92 Branch 20 IFLE L273 - true
   * Goal 10. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I92 Branch 20 IFLE L273 - false
   * Goal 11. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I100 Branch 21 IFEQ L273 - false
   * Goal 12. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I107 Branch 22 IFNE L273 - true
   * Goal 13. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I107 Branch 22 IFNE L273 - false
   * Goal 14. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I116 Branch 23 IF_ICMPNE L276 - true
   * Goal 15. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I135 Branch 24 IFNE L278 - false
   * Goal 16. wheel.json.JSONObject.opt(Ljava/lang/String;)Ljava/lang/Object;: I6 Branch 63 IFNONNULL L688 - false
   * Goal 17. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 71 IFNULL L999 - true
   * Goal 18. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I11 Branch 72 IFNULL L999 - true
   */

  @Test
  public void test55()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "+N0UTi{@DbkKcN`saO[");
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String[] stringArray0 = new String[24];
      stringArray0[0] = "+N0UTi{@DbkKcN`saO[";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
      assertEquals(3, jSONObject0.length());
      assertEquals(0, jSONObject1.length());
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotNull(jSONObject1);
  }

  //Test case number: 56
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;I)Lwheel/json/JSONObject;: root-Branch
   */

  @Test
  public void test56()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("A JSONObject text must begin with '{'", (-1878));
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
  }

  //Test case number: 57
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/util/Map;)Lwheel/json/JSONObject;: root-Branch
   */

  @Test
  public void test57()  throws Throwable  {
      HashMap<CategoryWordTag, JSONObject> hashMap0 = new HashMap<CategoryWordTag, JSONObject>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("toA", (Map) hashMap0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      try {
        double double0 = jSONObject0.getDouble("toA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toA\"] is not a number.
         //
      }
  }

  //Test case number: 58
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I45 Branch 60 IFGE L670 - true
   */

  @Test
  public void test58()  throws Throwable  {
      SeqClassifierFlags seqClassifierFlags0 = new SeqClassifierFlags();
      assertFalse(seqClassifierFlags0.useOccurrencePatterns);
      assertFalse(seqClassifierFlags0.useGazFeatures);
      assertFalse(seqClassifierFlags0.sloppyGazette);
      assertFalse(seqClassifierFlags0.useMinimalAbbr1);
      assertFalse(seqClassifierFlags0.usePrediction);
      assertFalse(seqClassifierFlags0.usePhraseFeatures);
      assertEquals(0, seqClassifierFlags0.featureCountThreshold);
      assertFalse(seqClassifierFlags0.useBigramInTwoClique);
      assertFalse(seqClassifierFlags0.evaluateTrain);
      assertFalse(seqClassifierFlags0.selfTest);
      assertEquals(8, seqClassifierFlags0.maxAllowedChromaticSize);
      assertEquals(15, seqClassifierFlags0.stochasticBatchSize);
      assertFalse(seqClassifierFlags0.useTypeSeqs);
      assertFalse(seqClassifierFlags0.useHKPre1);
      assertFalse(seqClassifierFlags0.useDictPK2);
      assertEquals((-1), seqClassifierFlags0.QNPasses);
      assertFalse(seqClassifierFlags0.makeConsistent);
      assertFalse(seqClassifierFlags0.suppressTestDebug);
      assertEquals(Integer.MAX_VALUE, seqClassifierFlags0.printFeaturesUpto);
      assertEquals(0, seqClassifierFlags0.nerSkipFirstK);
      assertFalse(seqClassifierFlags0.useTags);
      assertEquals(1, seqClassifierFlags0.nerSlowerTimes);
      assertFalse(seqClassifierFlags0.useAdaGradFOBOS);
      assertFalse(seqClassifierFlags0.useSum);
      assertEquals(3, seqClassifierFlags0.charHalfWindow);
      assertEquals(0.01, seqClassifierFlags0.epsilon, 0.01D);
      assertFalse(seqClassifierFlags0.useDistSim);
      assertTrue(seqClassifierFlags0.initWithPosterior);
      assertFalse(seqClassifierFlags0.useFeaturesC6gram);
      assertFalse(seqClassifierFlags0.useHeadGov);
      assertFalse(seqClassifierFlags0.printXML);
      assertFalse(seqClassifierFlags0.splitOnHead);
      assertEquals(0.0, seqClassifierFlags0.newgeneThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useYear);
      assertEquals(0.95, seqClassifierFlags0.adaDeltaRho, 0.01D);
      assertFalse(seqClassifierFlags0.useEntityTypes);
      assertFalse(seqClassifierFlags0.useNegASBCDict3);
      assertFalse(seqClassifierFlags0.useFeaturesC5gram);
      assertFalse(seqClassifierFlags0.useNegASBCDict4);
      assertFalse(seqClassifierFlags0.groupByInput);
      assertFalse(seqClassifierFlags0.factorInBiEdgePotential);
      assertFalse(seqClassifierFlags0.lowercaseNGrams);
      assertFalse(seqClassifierFlags0.useStochasticQN);
      assertFalse(seqClassifierFlags0.useAbbr);
      assertFalse(seqClassifierFlags0.printFactorTable);
      assertFalse(seqClassifierFlags0.useNegASBCDict2);
      assertFalse(seqClassifierFlags0.useOWLQN);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions3);
      assertFalse(seqClassifierFlags0.useNextSequences);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions2);
      assertFalse(seqClassifierFlags0.useEitherSideWord);
      assertFalse(seqClassifierFlags0.useKBest);
      assertFalse(seqClassifierFlags0.matchNERIncentive);
      assertFalse(seqClassifierFlags0.intern);
      assertFalse(seqClassifierFlags0.useReverseAffix);
      assertFalse(seqClassifierFlags0.printProbs);
      assertEquals(0.0, seqClassifierFlags0.pctSegmenterScale, 0.01D);
      assertFalse(seqClassifierFlags0.usePrevNextLemmas);
      assertFalse(seqClassifierFlags0.useChromaticSampling);
      assertFalse(seqClassifierFlags0.useABGENE);
      assertFalse(seqClassifierFlags0.useHKSuf1);
      assertFalse(seqClassifierFlags0.useNext);
      assertEquals((-1), seqClassifierFlags0.wordShape);
      assertFalse(seqClassifierFlags0.dualDecompNotBIO);
      assertTrue(seqClassifierFlags0.useOutputLayer);
      assertFalse(seqClassifierFlags0.normalize);
      assertEquals(1, seqClassifierFlags0.numFolds);
      assertFalse(seqClassifierFlags0.announceObjectBankEntries);
      assertFalse(seqClassifierFlags0.useAltGazFeatures);
      assertFalse(seqClassifierFlags0.useURLSequences);
      assertFalse(seqClassifierFlags0.usePhraseWordSpecialTags);
      assertFalse(seqClassifierFlags0.useEntityRule);
      assertFalse(seqClassifierFlags0.memoryThrift);
      assertFalse(seqClassifierFlags0.useRule2);
      assertFalse(seqClassifierFlags0.dampDDStepSizeWithAlignmentProb);
      assertFalse(seqClassifierFlags0.useShapeStrings5);
      assertFalse(seqClassifierFlags0.terminateOnAvgImprovement);
      assertFalse(seqClassifierFlags0.useShapeStrings4);
      assertEquals(1, seqClassifierFlags0.CRForder);
      assertFalse(seqClassifierFlags0.useNERPrior);
      assertFalse(seqClassifierFlags0.useSemPrior);
      assertFalse(seqClassifierFlags0.dontExtendTaggy);
      assertFalse(seqClassifierFlags0.estimateInitial);
      assertFalse(seqClassifierFlags0.useShapeStrings3);
      assertFalse(seqClassifierFlags0.useShapeStrings1);
      assertFalse(seqClassifierFlags0.booleanFeatures);
      assertFalse(seqClassifierFlags0.useRule);
      assertEquals(1, seqClassifierFlags0.numRuns);
      assertEquals(1.0, seqClassifierFlags0.dropoutScale, 0.01D);
      assertTrue(seqClassifierFlags0.useHiddenLayer);
      assertFalse(seqClassifierFlags0.groupByHiddenUnit);
      assertFalse(seqClassifierFlags0.geDebug);
      assertEquals(0.001, seqClassifierFlags0.adaGradEps, 0.01D);
      assertFalse(seqClassifierFlags0.useHKChar2);
      assertFalse(seqClassifierFlags0.useUnicodeType4gram);
      assertFalse(seqClassifierFlags0.useHuber);
      assertFalse(seqClassifierFlags0.strictlyFirstOrder);
      assertFalse(seqClassifierFlags0.useLemmaAsWord);
      assertFalse(seqClassifierFlags0.useFeaturesCpC4gram);
      assertFalse(seqClassifierFlags0.softmaxOutputLayer);
      assertFalse(seqClassifierFlags0.useFeaturesC4gram);
      assertFalse(seqClassifierFlags0.useEmbedding);
      assertFalse(seqClassifierFlags0.gradientDebug);
      assertFalse(seqClassifierFlags0.doGibbs);
      assertTrue(seqClassifierFlags0.biAlignmentPriorIsPMI);
      assertEquals(1, seqClassifierFlags0.kBest);
      assertFalse(seqClassifierFlags0.useInPlaceSGD);
      assertEquals(0, seqClassifierFlags0.featureCountThresh);
      assertFalse(seqClassifierFlags0.tieOutputLayer);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions3);
      assertFalse(seqClassifierFlags0.useCommonWordsFeature);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSizeAlignment, 0.01D);
      assertFalse(seqClassifierFlags0.useClassFeature);
      assertEquals((-1), seqClassifierFlags0.labelDictionaryCutoff);
      assertFalse(seqClassifierFlags0.cacheNGrams);
      assertTrue(seqClassifierFlags0.useExternal);
      assertFalse(seqClassifierFlags0.checkGradient);
      assertFalse(seqClassifierFlags0.useOrdinal);
      assertEquals(0.5, seqClassifierFlags0.alignmentDecodeThreshold, 0.01D);
      assertEquals(0, seqClassifierFlags0.dualDecompMaxItr);
      assertFalse(seqClassifierFlags0.useBagOfWords);
      assertTrue(seqClassifierFlags0.separateASCIIandRange);
      assertFalse(seqClassifierFlags0.testObjFunction);
      assertFalse(seqClassifierFlags0.includeFullCRFInLOP);
      assertFalse(seqClassifierFlags0.hardcodeSoftmaxOutputWeights);
      assertFalse(seqClassifierFlags0.useAs);
      assertTrue(seqClassifierFlags0.averagePerceptron);
      assertEquals(1.0, seqClassifierFlags0.unsupDropoutScale, 0.01D);
      assertFalse(seqClassifierFlags0.useChunks);
      assertEquals(0.0, seqClassifierFlags0.annealingRate, 0.01D);
      assertTrue(seqClassifierFlags0.learnCHBasedOnEN);
      assertFalse(seqClassifierFlags0.groupByOutputClass);
      assertFalse(seqClassifierFlags0.useMinimalAbbr);
      assertFalse(seqClassifierFlags0.useABSTRFreq);
      assertFalse(seqClassifierFlags0.useProtoFeatures);
      assertFalse(seqClassifierFlags0.useAbbr1);
      assertFalse(seqClassifierFlags0.useEntityTypeSequences);
      assertEquals(0, seqClassifierFlags0.numOfFeatureSlices);
      assertFalse(seqClassifierFlags0.cleanGazette);
      assertFalse(seqClassifierFlags0.useDisjunctive);
      assertFalse(seqClassifierFlags0.mergeTags);
      assertFalse(seqClassifierFlags0.useSentenceNumber);
      assertFalse(seqClassifierFlags0.useSigmoid);
      assertFalse(seqClassifierFlags0.useTOK);
      assertEquals(0, seqClassifierFlags0.maxRight);
      assertFalse(seqClassifierFlags0.useLongSequences);
      assertFalse(seqClassifierFlags0.useUnicodeType);
      assertFalse(seqClassifierFlags0.removeBackgroundSingletonFeatures);
      assertFalse(seqClassifierFlags0.saveFeatureIndexToDisk);
      assertFalse(seqClassifierFlags0.useTaggySequences);
      assertFalse(seqClassifierFlags0.useGENIA);
      assertFalse(seqClassifierFlags0.useHk);
      assertFalse(seqClassifierFlags0.useBerkeleyAlignerForViterbi);
      assertTrue(seqClassifierFlags0.useMemoryEvaluator);
      assertFalse(seqClassifierFlags0.useSMD);
      assertFalse(seqClassifierFlags0.useBeginSent);
      assertFalse(seqClassifierFlags0.useUnicodeType5gram);
      assertFalse(seqClassifierFlags0.useASBCPre1);
      assertEquals(0.0, seqClassifierFlags0.softmaxTieLambda, 0.01D);
      assertEquals(100, seqClassifierFlags0.printClassifierParam);
      assertFalse(seqClassifierFlags0.useYetMoreCpCShapes);
      assertEquals(0.1, seqClassifierFlags0.initRate, 0.01D);
      assertFalse(seqClassifierFlags0.useFilter);
      assertFalse(seqClassifierFlags0.useAdaDelta);
      assertFalse(seqClassifierFlags0.useSegmentation);
      assertFalse(seqClassifierFlags0.useGoodForNamesCpC);
      assertFalse(seqClassifierFlags0.useDisjShape);
      assertFalse(seqClassifierFlags0.useChunkySequences);
      assertFalse(seqClassifierFlags0.casedDistSim);
      assertFalse(seqClassifierFlags0.useBilingualNERPrior);
      assertEquals(100, seqClassifierFlags0.numSamples);
      assertFalse(seqClassifierFlags0.verboseMode);
      assertTrue(seqClassifierFlags0.keepOBInMemory);
      assertFalse(seqClassifierFlags0.usePKChar2);
      assertEquals(0, seqClassifierFlags0.multiThreadClassifier);
      assertEquals(0.0, seqClassifierFlags0.removeTopNPercent, 0.01D);
      assertFalse(seqClassifierFlags0.augmentedDateChars);
      assertFalse(seqClassifierFlags0.keepAllWhitespaces);
      assertEquals(0, seqClassifierFlags0.numTimesPruneFeatures);
      assertTrue(seqClassifierFlags0.initViterbi);
      assertFalse(seqClassifierFlags0.verboseForTrueCasing);
      assertEquals((-1), seqClassifierFlags0.maxIterations);
      assertFalse(seqClassifierFlags0.powerAlignProbAsAddition);
      assertEquals((-1), seqClassifierFlags0.numHiddenUnits);
      assertFalse(seqClassifierFlags0.usePosition);
      assertFalse(seqClassifierFlags0.useAcqPrior);
      assertFalse(seqClassifierFlags0.useWordShapeGaz);
      assertEquals((-1), seqClassifierFlags0.SGDPasses);
      assertFalse(seqClassifierFlags0.groupByFeatureTemplate);
      assertFalse(seqClassifierFlags0.usePrediction2);
      assertFalse(seqClassifierFlags0.dehyphenateNGrams);
      assertTrue(seqClassifierFlags0.useDenero);
      assertFalse(seqClassifierFlags0.useSGDtoQN);
      assertTrue(seqClassifierFlags0.useQN);
      assertFalse(seqClassifierFlags0.numberEquivalenceDistSim);
      assertFalse(seqClassifierFlags0.useNoisyLabel);
      assertFalse(seqClassifierFlags0.useGEforSup);
      assertFalse(seqClassifierFlags0.outputIterationsToFile);
      assertFalse(seqClassifierFlags0.useCRFforUnsup);
      assertFalse(seqClassifierFlags0.useGazettes);
      assertFalse(seqClassifierFlags0.strictlySecondOrder);
      assertFalse(seqClassifierFlags0.normalizeTimex);
      assertFalse(seqClassifierFlags0.lowerNewgeneThreshold);
      assertEquals(0.1, seqClassifierFlags0.initialGain, 0.01D);
      assertEquals(0, seqClassifierFlags0.maxDocSize);
      assertFalse(seqClassifierFlags0.useRadical);
      assertFalse(seqClassifierFlags0.transitionEdgeOnly);
      assertFalse(seqClassifierFlags0.useWordn);
      assertFalse(seqClassifierFlags0.useMoreGazFeatures);
      assertEquals(25, seqClassifierFlags0.QNsize);
      assertEquals(2, seqClassifierFlags0.maxLeft);
      assertFalse(seqClassifierFlags0.doFeatureDiscovery);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSize, 0.01D);
      assertTrue(seqClassifierFlags0.splitDocuments);
      assertFalse(seqClassifierFlags0.noMidNGrams);
      assertFalse(seqClassifierFlags0.useTitle);
      assertFalse(seqClassifierFlags0.useUnicodeBlock);
      assertFalse(seqClassifierFlags0.nonLinearCRF);
      assertEquals(0, seqClassifierFlags0.numOfSlices);
      assertFalse(seqClassifierFlags0.useNB);
      assertFalse(seqClassifierFlags0.fakeDataset);
      assertFalse(seqClassifierFlags0.useSGD);
      assertFalse(seqClassifierFlags0.useACR);
      assertFalse(seqClassifierFlags0.intern2);
      assertFalse(seqClassifierFlags0.pctSegmenterLenAdjust);
      assertFalse(seqClassifierFlags0.useWordPairs);
      assertFalse(seqClassifierFlags0.useHardGE);
      assertEquals(0.0, seqClassifierFlags0.alignmentPruneThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.sparseOutputLayer);
      assertEquals(1.0, seqClassifierFlags0.adaptSigma, 0.01D);
      assertFalse(seqClassifierFlags0.useMidDotShape);
      assertFalse(seqClassifierFlags0.useDictHK2);
      assertFalse(seqClassifierFlags0.useHybrid);
      assertFalse(seqClassifierFlags0.useGenericFeatures);
      assertFalse(seqClassifierFlags0.useIfInteger);
      assertFalse(seqClassifierFlags0.useKL);
      assertFalse(seqClassifierFlags0.prependEmbedding);
      assertFalse(seqClassifierFlags0.useWord1);
      assertFalse(seqClassifierFlags0.useRobustQN);
      assertFalse(seqClassifierFlags0.normalizeTerms);
      assertFalse(seqClassifierFlags0.ocrTrain);
      assertFalse(seqClassifierFlags0.retainEntitySubclassification);
      assertFalse(seqClassifierFlags0.useUnknown);
      assertFalse(seqClassifierFlags0.useMoreAbbr);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesBigram);
      assertEquals(0.9, seqClassifierFlags0.selfTrainConfidenceThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useReverse);
      assertFalse(seqClassifierFlags0.useNERPriorBIO);
      assertFalse(seqClassifierFlags0.useNegCTBDict2);
      assertFalse(seqClassifierFlags0.use4Clique);
      assertFalse(seqClassifierFlags0.useNegHKDict3);
      assertFalse(seqClassifierFlags0.useNegHKDict4);
      assertFalse(seqClassifierFlags0.removeStrictGoodCoNLLDuplicates);
      assertFalse(seqClassifierFlags0.useNegCTBDict4);
      assertFalse(seqClassifierFlags0.useNegCTBDict3);
      assertFalse(seqClassifierFlags0.regularizeSoftmaxTieParam);
      assertFalse(seqClassifierFlags0.useNegDict2);
      assertFalse(seqClassifierFlags0.useMSRChar2);
      assertFalse(seqClassifierFlags0.iobWrapper);
      assertEquals(1, seqClassifierFlags0.featureThreshold);
      assertFalse(seqClassifierFlags0.useWord2);
      assertFalse(seqClassifierFlags0.useNegDict3);
      assertFalse(seqClassifierFlags0.useWord3);
      assertFalse(seqClassifierFlags0.useWord4);
      assertEquals(0.0, seqClassifierFlags0.featureDiffThresh, 0.01D);
      assertFalse(seqClassifierFlags0.useNegDict4);
      assertFalse(seqClassifierFlags0.useSymTags);
      assertEquals(2, seqClassifierFlags0.CRFwindow);
      assertFalse(seqClassifierFlags0.useNegHKDict2);
      assertFalse(seqClassifierFlags0.useLC);
      assertFalse(seqClassifierFlags0.printTrainLabels);
      assertFalse(seqClassifierFlags0.learnENBasedOnCH);
      assertFalse(seqClassifierFlags0.usePrev);
      assertFalse(seqClassifierFlags0.sighanPostProcessing);
      assertFalse(seqClassifierFlags0.tuneSGD);
      assertFalse(seqClassifierFlags0.readStdin);
      assertFalse(seqClassifierFlags0.useABSTR);
      assertFalse(seqClassifierFlags0.useIsDateRange);
      assertEquals((-1), seqClassifierFlags0.samplingSpeedUpThreshold);
      assertFalse(seqClassifierFlags0.evaluateBackground);
      assertEquals((-1), seqClassifierFlags0.tuneSampleSize);
      assertFalse(seqClassifierFlags0.useSeenFeaturesOnly);
      assertFalse(seqClassifierFlags0.purgeDatasets);
      assertFalse(seqClassifierFlags0.useSymWordPairs);
      assertEquals((-1), seqClassifierFlags0.purgeFeatures);
      assertTrue(seqClassifierFlags0.applyNERPenalty);
      assertFalse(seqClassifierFlags0.dualDecompAlignment);
      assertTrue(seqClassifierFlags0.useInternal);
      assertFalse(seqClassifierFlags0.perceptronDebug);
      assertFalse(seqClassifierFlags0.strictlyZeroethOrder);
      assertFalse(seqClassifierFlags0.powerAlignProb);
      assertEquals(1, seqClassifierFlags0.numDatasetsPerFile);
      assertFalse(seqClassifierFlags0.usePhraseWordTags);
      assertEquals(0, seqClassifierFlags0.startEvaluateIters);
      assertFalse(seqClassifierFlags0.checkNameList);
      assertEquals(0, seqClassifierFlags0.hybridCutoffIteration);
      assertEquals(10, seqClassifierFlags0.totalDataSlice);
      assertFalse(seqClassifierFlags0.useNumberFeature);
      assertFalse(seqClassifierFlags0.usePk);
      assertFalse(seqClassifierFlags0.useBerkeleyCompetitivePosterior);
      assertFalse(seqClassifierFlags0.useFREQ);
      assertFalse(seqClassifierFlags0.useWideDisjunctive);
      assertEquals(30, seqClassifierFlags0.beamSize);
      assertFalse(seqClassifierFlags0.printLabelValue);
      assertFalse(seqClassifierFlags0.suppressMidDotPostprocessing);
      assertFalse(seqClassifierFlags0.printNR);
      assertFalse(seqClassifierFlags0.useScaledSGD);
      assertFalse(seqClassifierFlags0.testHessSamples);
      assertEquals(1000, seqClassifierFlags0.wordSegBeamSize);
      assertEquals(0.0, seqClassifierFlags0.priorAlpha, 0.01D);
      assertEquals(1.0, seqClassifierFlags0.alignDDAlpha, 0.01D);
      assertFalse(seqClassifierFlags0.addBiasToEmbedding);
      assertFalse(seqClassifierFlags0.lazyUpdate);
      assertEquals(1, seqClassifierFlags0.startFold);
      assertFalse(seqClassifierFlags0.useCorefFeatures);
      assertEquals(50, seqClassifierFlags0.SGD2QNhessSamples);
      assertEquals(1, seqClassifierFlags0.selfTrainWindowSize);
      assertTrue(seqClassifierFlags0.useSequences);
      assertFalse(seqClassifierFlags0.noNeighborConstraints);
      assertFalse(seqClassifierFlags0.useWordTag);
      assertFalse(seqClassifierFlags0.useBoundarySequences);
      assertFalse(seqClassifierFlags0.largeChSegFile);
      assertFalse(seqClassifierFlags0.useTopics);
      assertEquals(1.0, seqClassifierFlags0.randomizedRatio, 0.01D);
      assertEquals(1, seqClassifierFlags0.terminateOnEvalImprovementNumOfEpoch);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions);
      assertEquals(1, seqClassifierFlags0.numTimesRemoveTopN);
      assertEquals(0.0, seqClassifierFlags0.priorLambda, 0.01D);
      assertFalse(seqClassifierFlags0.useASBCSuf1);
      assertFalse(seqClassifierFlags0.useNPGovernor);
      assertFalse(seqClassifierFlags0.dropoutApprox);
      assertFalse(seqClassifierFlags0.useNGrams);
      assertFalse(seqClassifierFlags0.useCTBChar2);
      assertFalse(seqClassifierFlags0.useTrainLexicon);
      assertFalse(seqClassifierFlags0.addCapitalFeatures);
      assertEquals(0, seqClassifierFlags0.evaluateIters);
      assertFalse(seqClassifierFlags0.useMUCFeatures);
      assertFalse(seqClassifierFlags0.useNextRealWord);
      assertFalse(seqClassifierFlags0.keepEnglishWhitespaces);
      assertEquals((-1), seqClassifierFlags0.arbitraryInputLayerSize);
      assertFalse(seqClassifierFlags0.useObservedFeaturesOnly);
      assertFalse(seqClassifierFlags0.useVB);
      assertFalse(seqClassifierFlags0.restrictTransitionsTimit);
      assertFalse(seqClassifierFlags0.useMoreTags);
      assertFalse(seqClassifierFlags0.useParenMatching);
      assertFalse(seqClassifierFlags0.doFE);
      assertFalse(seqClassifierFlags0.terminateOnEvalImprovement);
      assertFalse(seqClassifierFlags0.baseline);
      assertEquals(Double.POSITIVE_INFINITY, seqClassifierFlags0.searchGraphPrune, 0.01D);
      assertFalse(seqClassifierFlags0.useMsr);
      assertEquals(1.0E-4, seqClassifierFlags0.tolerance, 0.01D);
      assertFalse(seqClassifierFlags0.useEitherSideDisjunctive);
      assertEquals(1, seqClassifierFlags0.numLopExpert);
      assertFalse(seqClassifierFlags0.useDictASBC2);
      assertFalse(seqClassifierFlags0.deleteBlankLines);
      assertFalse(seqClassifierFlags0.useDictCTB2);
      assertEquals(0, seqClassifierFlags0.removeTopN);
      assertFalse(seqClassifierFlags0.useAdaDiff);
      assertFalse(seqClassifierFlags0.use2W);
      assertFalse(seqClassifierFlags0.usePre);
      assertEquals(8, seqClassifierFlags0.distSimMaxBits);
      assertFalse(seqClassifierFlags0.subCWGaz);
      assertFalse(seqClassifierFlags0.useLemmas);
      assertTrue(seqClassifierFlags0.includeC2EViterbi);
      assertEquals(1, seqClassifierFlags0.multiThreadGrad);
      assertEquals(0.0, seqClassifierFlags0.l1reg, 0.01D);
      assertFalse(seqClassifierFlags0.secondOrderNonLinear);
      assertFalse(seqClassifierFlags0.useNPHead);
      assertFalse(seqClassifierFlags0.useNextVB);
      assertEquals(1.0, seqClassifierFlags0.lambdaEN, 0.01D);
      assertFalse(seqClassifierFlags0.conjoinShapeNGrams);
      assertFalse(seqClassifierFlags0.useFirstWord);
      assertFalse(seqClassifierFlags0.timitDatum);
      assertFalse(seqClassifierFlags0.useFloat);
      assertFalse(seqClassifierFlags0.useRad2b);
      assertFalse(seqClassifierFlags0.useNeighborNGrams);
      assertFalse(seqClassifierFlags0.useQuartic);
      assertFalse(seqClassifierFlags0.useABSTRFreqDict);
      assertFalse(seqClassifierFlags0.doAdaptation);
      assertFalse(seqClassifierFlags0.useWEB);
      assertFalse(seqClassifierFlags0.blockInitialize);
      assertFalse(seqClassifierFlags0.usePKPre1);
      assertEquals(1, seqClassifierFlags0.bisequencePriorType);
      assertFalse(seqClassifierFlags0.useDualDecomp);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesAll);
      assertEquals(0, seqClassifierFlags0.interimOutputFreq);
      assertFalse(seqClassifierFlags0.strictlyThirdOrder);
      assertFalse(seqClassifierFlags0.useTypeSeqs2);
      assertFalse(seqClassifierFlags0.useTypeSeqs3);
      assertFalse(seqClassifierFlags0.useANTE);
      assertFalse(seqClassifierFlags0.randomLopFeatureSplit);
      assertFalse(seqClassifierFlags0.useIsURL);
      assertFalse(seqClassifierFlags0.usePhraseWords);
      assertEquals(4, seqClassifierFlags0.disjunctionWidth);
      assertFalse(seqClassifierFlags0.expandMidDot);
      assertFalse(seqClassifierFlags0.useOutDict2);
      assertFalse(seqClassifierFlags0.usePrevSequences);
      assertEquals(0.1, seqClassifierFlags0.gainSGD, 0.01D);
      assertFalse(seqClassifierFlags0.useCWSWordFeatures);
      assertEquals(1.0, seqClassifierFlags0.sigma, 0.01D);
      assertFalse(seqClassifierFlags0.useNoisyNonNoisyFeature);
      assertTrue(seqClassifierFlags0.useCWSFeatures);
      assertEquals(25, seqClassifierFlags0.QNsize2);
      assertFalse(seqClassifierFlags0.useBig5);
      assertFalse(seqClassifierFlags0.useFeaturesCpC5gram);
      assertEquals(0.0, seqClassifierFlags0.featureWeightThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.testVariance);
      assertFalse(seqClassifierFlags0.initWithNERPosterior);
      assertFalse(seqClassifierFlags0.useTypeySequences);
      assertFalse(seqClassifierFlags0.printWeights);
      assertFalse(seqClassifierFlags0.backpropLopTraining);
      assertFalse(seqClassifierFlags0.useDict2);
      assertFalse(seqClassifierFlags0.combo);
      assertEquals(0, seqClassifierFlags0.maxQNItr);
      assertFalse(seqClassifierFlags0.useNegPKDict2);
      assertFalse(seqClassifierFlags0.justify);
      assertFalse(seqClassifierFlags0.useCTBSuf1);
      assertEquals(0, seqClassifierFlags0.multiThreadGibbs);
      assertFalse(seqClassifierFlags0.iobTags);
      assertFalse(seqClassifierFlags0.useObservedSequencesOnly);
      assertFalse(seqClassifierFlags0.useNegPKDict3);
      assertFalse(seqClassifierFlags0.useNegPKDict4);
      assertEquals(10, seqClassifierFlags0.wideDisjunctionWidth);
      assertFalse(seqClassifierFlags0.useOnlySeenWeights);
      assertFalse(seqClassifierFlags0.useShapeStrings);
      assertFalse(seqClassifierFlags0.useDictleng);
      assertEquals(1, seqClassifierFlags0.selfTrainIterations);
      assertFalse(seqClassifierFlags0.useLabelSource);
      assertEquals(1, seqClassifierFlags0.multiThreadPerceptron);
      assertFalse(seqClassifierFlags0.useExtraTaggySequences);
      assertFalse(seqClassifierFlags0.useLastRealWord);
      assertFalse(seqClassifierFlags0.useWEBFreqDict);
      assertEquals(10, seqClassifierFlags0.totalFeatureSlice);
      assertFalse(seqClassifierFlags0.pctSegmenterScaleByCRF);
      assertFalse(seqClassifierFlags0.useRandomSeed);
      assertFalse(seqClassifierFlags0.useSuf);
      assertFalse(seqClassifierFlags0.strictGoodCoNLL);
      assertTrue(seqClassifierFlags0.restrictLabels);
      assertEquals(0, seqClassifierFlags0.scaledSGDMethod);
      assertEquals((-1), seqClassifierFlags0.maxNGramLeng);
      assertFalse(seqClassifierFlags0.noEdgeFeature);
      assertFalse(seqClassifierFlags0.keepEmptySentences);
      assertFalse(seqClassifierFlags0.twoStage);
      assertFalse(seqClassifierFlags0.useWordnetFeatures);
      assertEquals(1, seqClassifierFlags0.endFold);
      assertEquals(0.0, seqClassifierFlags0.dropoutRate, 0.01D);
      assertFalse(seqClassifierFlags0.printFirstOrderProbs);
      assertFalse(seqClassifierFlags0.appendLC);
      assertFalse(seqClassifierFlags0.factorInAlignmentProb);
      assertFalse(seqClassifierFlags0.useShapeConjunctions);
      assertFalse(seqClassifierFlags0.usePKSuf1);
      assertFalse(seqClassifierFlags0.useTaggySequencesShapeInteraction);
      assertTrue(seqClassifierFlags0.useKnownLCWords);
      assertFalse(seqClassifierFlags0.weightByEntropy);
      assertFalse(seqClassifierFlags0.skipOutputRegularization);
      assertEquals(1.0, seqClassifierFlags0.lambdaCH, 0.01D);
      assertFalse(seqClassifierFlags0.useRad2);
      assertFalse(seqClassifierFlags0.bioSubmitOutput);
      assertFalse(seqClassifierFlags0.useChPos);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions2);
      assertEquals(0, seqClassifierFlags0.ocrFold);
      assertFalse(seqClassifierFlags0.alternateTraining);
      assertFalse(seqClassifierFlags0.useDisjunctiveShapeInteraction);
      assertFalse(seqClassifierFlags0.useGazettePhrases);
      assertFalse(seqClassifierFlags0.useFeaturesCpC6gram);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions3);
      assertTrue(seqClassifierFlags0.useViterbi);
      assertFalse(seqClassifierFlags0.usePrevVB);
      assertTrue(seqClassifierFlags0.useWord);
      assertFalse(seqClassifierFlags0.useSequentialScanSampling);
      assertFalse(seqClassifierFlags0.randomLopWeights);
      assertEquals(1, seqClassifierFlags0.numStartLayers);
      assertFalse(seqClassifierFlags0.useRad1);
      assertFalse(seqClassifierFlags0.greekifyNGrams);
      assertFalse(seqClassifierFlags0.dump);
      assertFalse(seqClassifierFlags0.dualDecompDebug);
      assertFalse(seqClassifierFlags0.useCTBPre1);
      assertFalse(seqClassifierFlags0.useASBCChar2);
      assertFalse(seqClassifierFlags0.useUniformPrior);
      assertEquals("", seqClassifierFlags0.toString());
      assertNotNull(seqClassifierFlags0);
      
      double double0 = seqClassifierFlags0.tolerance;
      assertFalse(seqClassifierFlags0.useOccurrencePatterns);
      assertFalse(seqClassifierFlags0.useGazFeatures);
      assertFalse(seqClassifierFlags0.sloppyGazette);
      assertFalse(seqClassifierFlags0.useMinimalAbbr1);
      assertFalse(seqClassifierFlags0.usePrediction);
      assertFalse(seqClassifierFlags0.usePhraseFeatures);
      assertEquals(0, seqClassifierFlags0.featureCountThreshold);
      assertFalse(seqClassifierFlags0.useBigramInTwoClique);
      assertFalse(seqClassifierFlags0.evaluateTrain);
      assertFalse(seqClassifierFlags0.selfTest);
      assertEquals(8, seqClassifierFlags0.maxAllowedChromaticSize);
      assertEquals(15, seqClassifierFlags0.stochasticBatchSize);
      assertFalse(seqClassifierFlags0.useTypeSeqs);
      assertFalse(seqClassifierFlags0.useHKPre1);
      assertFalse(seqClassifierFlags0.useDictPK2);
      assertEquals((-1), seqClassifierFlags0.QNPasses);
      assertFalse(seqClassifierFlags0.makeConsistent);
      assertFalse(seqClassifierFlags0.suppressTestDebug);
      assertEquals(Integer.MAX_VALUE, seqClassifierFlags0.printFeaturesUpto);
      assertEquals(0, seqClassifierFlags0.nerSkipFirstK);
      assertFalse(seqClassifierFlags0.useTags);
      assertEquals(1, seqClassifierFlags0.nerSlowerTimes);
      assertFalse(seqClassifierFlags0.useAdaGradFOBOS);
      assertFalse(seqClassifierFlags0.useSum);
      assertEquals(3, seqClassifierFlags0.charHalfWindow);
      assertEquals(0.01, seqClassifierFlags0.epsilon, 0.01D);
      assertFalse(seqClassifierFlags0.useDistSim);
      assertTrue(seqClassifierFlags0.initWithPosterior);
      assertFalse(seqClassifierFlags0.useFeaturesC6gram);
      assertFalse(seqClassifierFlags0.useHeadGov);
      assertFalse(seqClassifierFlags0.printXML);
      assertFalse(seqClassifierFlags0.splitOnHead);
      assertEquals(0.0, seqClassifierFlags0.newgeneThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useYear);
      assertEquals(0.95, seqClassifierFlags0.adaDeltaRho, 0.01D);
      assertFalse(seqClassifierFlags0.useEntityTypes);
      assertFalse(seqClassifierFlags0.useNegASBCDict3);
      assertFalse(seqClassifierFlags0.useFeaturesC5gram);
      assertFalse(seqClassifierFlags0.useNegASBCDict4);
      assertFalse(seqClassifierFlags0.groupByInput);
      assertFalse(seqClassifierFlags0.factorInBiEdgePotential);
      assertFalse(seqClassifierFlags0.lowercaseNGrams);
      assertFalse(seqClassifierFlags0.useStochasticQN);
      assertFalse(seqClassifierFlags0.useAbbr);
      assertFalse(seqClassifierFlags0.printFactorTable);
      assertFalse(seqClassifierFlags0.useNegASBCDict2);
      assertFalse(seqClassifierFlags0.useOWLQN);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions3);
      assertFalse(seqClassifierFlags0.useNextSequences);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions2);
      assertFalse(seqClassifierFlags0.useEitherSideWord);
      assertFalse(seqClassifierFlags0.useKBest);
      assertFalse(seqClassifierFlags0.matchNERIncentive);
      assertFalse(seqClassifierFlags0.intern);
      assertFalse(seqClassifierFlags0.useReverseAffix);
      assertFalse(seqClassifierFlags0.printProbs);
      assertEquals(0.0, seqClassifierFlags0.pctSegmenterScale, 0.01D);
      assertFalse(seqClassifierFlags0.usePrevNextLemmas);
      assertFalse(seqClassifierFlags0.useChromaticSampling);
      assertFalse(seqClassifierFlags0.useABGENE);
      assertFalse(seqClassifierFlags0.useHKSuf1);
      assertFalse(seqClassifierFlags0.useNext);
      assertEquals((-1), seqClassifierFlags0.wordShape);
      assertFalse(seqClassifierFlags0.dualDecompNotBIO);
      assertTrue(seqClassifierFlags0.useOutputLayer);
      assertFalse(seqClassifierFlags0.normalize);
      assertEquals(1, seqClassifierFlags0.numFolds);
      assertFalse(seqClassifierFlags0.announceObjectBankEntries);
      assertFalse(seqClassifierFlags0.useAltGazFeatures);
      assertFalse(seqClassifierFlags0.useURLSequences);
      assertFalse(seqClassifierFlags0.usePhraseWordSpecialTags);
      assertFalse(seqClassifierFlags0.useEntityRule);
      assertFalse(seqClassifierFlags0.memoryThrift);
      assertFalse(seqClassifierFlags0.useRule2);
      assertFalse(seqClassifierFlags0.dampDDStepSizeWithAlignmentProb);
      assertFalse(seqClassifierFlags0.useShapeStrings5);
      assertFalse(seqClassifierFlags0.terminateOnAvgImprovement);
      assertFalse(seqClassifierFlags0.useShapeStrings4);
      assertEquals(1, seqClassifierFlags0.CRForder);
      assertFalse(seqClassifierFlags0.useNERPrior);
      assertFalse(seqClassifierFlags0.useSemPrior);
      assertFalse(seqClassifierFlags0.dontExtendTaggy);
      assertFalse(seqClassifierFlags0.estimateInitial);
      assertFalse(seqClassifierFlags0.useShapeStrings3);
      assertFalse(seqClassifierFlags0.useShapeStrings1);
      assertFalse(seqClassifierFlags0.booleanFeatures);
      assertFalse(seqClassifierFlags0.useRule);
      assertEquals(1, seqClassifierFlags0.numRuns);
      assertEquals(1.0, seqClassifierFlags0.dropoutScale, 0.01D);
      assertTrue(seqClassifierFlags0.useHiddenLayer);
      assertFalse(seqClassifierFlags0.groupByHiddenUnit);
      assertFalse(seqClassifierFlags0.geDebug);
      assertEquals(0.001, seqClassifierFlags0.adaGradEps, 0.01D);
      assertFalse(seqClassifierFlags0.useHKChar2);
      assertFalse(seqClassifierFlags0.useUnicodeType4gram);
      assertFalse(seqClassifierFlags0.useHuber);
      assertFalse(seqClassifierFlags0.strictlyFirstOrder);
      assertFalse(seqClassifierFlags0.useLemmaAsWord);
      assertFalse(seqClassifierFlags0.useFeaturesCpC4gram);
      assertFalse(seqClassifierFlags0.softmaxOutputLayer);
      assertFalse(seqClassifierFlags0.useFeaturesC4gram);
      assertFalse(seqClassifierFlags0.useEmbedding);
      assertFalse(seqClassifierFlags0.gradientDebug);
      assertFalse(seqClassifierFlags0.doGibbs);
      assertTrue(seqClassifierFlags0.biAlignmentPriorIsPMI);
      assertEquals(1, seqClassifierFlags0.kBest);
      assertFalse(seqClassifierFlags0.useInPlaceSGD);
      assertEquals(0, seqClassifierFlags0.featureCountThresh);
      assertFalse(seqClassifierFlags0.tieOutputLayer);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions3);
      assertFalse(seqClassifierFlags0.useCommonWordsFeature);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSizeAlignment, 0.01D);
      assertFalse(seqClassifierFlags0.useClassFeature);
      assertEquals((-1), seqClassifierFlags0.labelDictionaryCutoff);
      assertFalse(seqClassifierFlags0.cacheNGrams);
      assertTrue(seqClassifierFlags0.useExternal);
      assertFalse(seqClassifierFlags0.checkGradient);
      assertFalse(seqClassifierFlags0.useOrdinal);
      assertEquals(0.5, seqClassifierFlags0.alignmentDecodeThreshold, 0.01D);
      assertEquals(0, seqClassifierFlags0.dualDecompMaxItr);
      assertFalse(seqClassifierFlags0.useBagOfWords);
      assertTrue(seqClassifierFlags0.separateASCIIandRange);
      assertFalse(seqClassifierFlags0.testObjFunction);
      assertFalse(seqClassifierFlags0.includeFullCRFInLOP);
      assertFalse(seqClassifierFlags0.hardcodeSoftmaxOutputWeights);
      assertFalse(seqClassifierFlags0.useAs);
      assertTrue(seqClassifierFlags0.averagePerceptron);
      assertEquals(1.0, seqClassifierFlags0.unsupDropoutScale, 0.01D);
      assertFalse(seqClassifierFlags0.useChunks);
      assertEquals(0.0, seqClassifierFlags0.annealingRate, 0.01D);
      assertTrue(seqClassifierFlags0.learnCHBasedOnEN);
      assertFalse(seqClassifierFlags0.groupByOutputClass);
      assertFalse(seqClassifierFlags0.useMinimalAbbr);
      assertFalse(seqClassifierFlags0.useABSTRFreq);
      assertFalse(seqClassifierFlags0.useProtoFeatures);
      assertFalse(seqClassifierFlags0.useAbbr1);
      assertFalse(seqClassifierFlags0.useEntityTypeSequences);
      assertEquals(0, seqClassifierFlags0.numOfFeatureSlices);
      assertFalse(seqClassifierFlags0.cleanGazette);
      assertFalse(seqClassifierFlags0.useDisjunctive);
      assertFalse(seqClassifierFlags0.mergeTags);
      assertFalse(seqClassifierFlags0.useSentenceNumber);
      assertFalse(seqClassifierFlags0.useSigmoid);
      assertFalse(seqClassifierFlags0.useTOK);
      assertEquals(0, seqClassifierFlags0.maxRight);
      assertFalse(seqClassifierFlags0.useLongSequences);
      assertFalse(seqClassifierFlags0.useUnicodeType);
      assertFalse(seqClassifierFlags0.removeBackgroundSingletonFeatures);
      assertFalse(seqClassifierFlags0.saveFeatureIndexToDisk);
      assertFalse(seqClassifierFlags0.useTaggySequences);
      assertFalse(seqClassifierFlags0.useGENIA);
      assertFalse(seqClassifierFlags0.useHk);
      assertFalse(seqClassifierFlags0.useBerkeleyAlignerForViterbi);
      assertTrue(seqClassifierFlags0.useMemoryEvaluator);
      assertFalse(seqClassifierFlags0.useSMD);
      assertFalse(seqClassifierFlags0.useBeginSent);
      assertFalse(seqClassifierFlags0.useUnicodeType5gram);
      assertFalse(seqClassifierFlags0.useASBCPre1);
      assertEquals(0.0, seqClassifierFlags0.softmaxTieLambda, 0.01D);
      assertEquals(100, seqClassifierFlags0.printClassifierParam);
      assertFalse(seqClassifierFlags0.useYetMoreCpCShapes);
      assertEquals(0.1, seqClassifierFlags0.initRate, 0.01D);
      assertFalse(seqClassifierFlags0.useFilter);
      assertFalse(seqClassifierFlags0.useAdaDelta);
      assertFalse(seqClassifierFlags0.useSegmentation);
      assertFalse(seqClassifierFlags0.useGoodForNamesCpC);
      assertFalse(seqClassifierFlags0.useDisjShape);
      assertFalse(seqClassifierFlags0.useChunkySequences);
      assertFalse(seqClassifierFlags0.casedDistSim);
      assertFalse(seqClassifierFlags0.useBilingualNERPrior);
      assertEquals(100, seqClassifierFlags0.numSamples);
      assertFalse(seqClassifierFlags0.verboseMode);
      assertTrue(seqClassifierFlags0.keepOBInMemory);
      assertFalse(seqClassifierFlags0.usePKChar2);
      assertEquals(0, seqClassifierFlags0.multiThreadClassifier);
      assertEquals(0.0, seqClassifierFlags0.removeTopNPercent, 0.01D);
      assertFalse(seqClassifierFlags0.augmentedDateChars);
      assertFalse(seqClassifierFlags0.keepAllWhitespaces);
      assertEquals(0, seqClassifierFlags0.numTimesPruneFeatures);
      assertTrue(seqClassifierFlags0.initViterbi);
      assertFalse(seqClassifierFlags0.verboseForTrueCasing);
      assertEquals((-1), seqClassifierFlags0.maxIterations);
      assertFalse(seqClassifierFlags0.powerAlignProbAsAddition);
      assertEquals((-1), seqClassifierFlags0.numHiddenUnits);
      assertFalse(seqClassifierFlags0.usePosition);
      assertFalse(seqClassifierFlags0.useAcqPrior);
      assertFalse(seqClassifierFlags0.useWordShapeGaz);
      assertEquals((-1), seqClassifierFlags0.SGDPasses);
      assertFalse(seqClassifierFlags0.groupByFeatureTemplate);
      assertFalse(seqClassifierFlags0.usePrediction2);
      assertFalse(seqClassifierFlags0.dehyphenateNGrams);
      assertTrue(seqClassifierFlags0.useDenero);
      assertFalse(seqClassifierFlags0.useSGDtoQN);
      assertTrue(seqClassifierFlags0.useQN);
      assertFalse(seqClassifierFlags0.numberEquivalenceDistSim);
      assertFalse(seqClassifierFlags0.useNoisyLabel);
      assertFalse(seqClassifierFlags0.useGEforSup);
      assertFalse(seqClassifierFlags0.outputIterationsToFile);
      assertFalse(seqClassifierFlags0.useCRFforUnsup);
      assertFalse(seqClassifierFlags0.useGazettes);
      assertFalse(seqClassifierFlags0.strictlySecondOrder);
      assertFalse(seqClassifierFlags0.normalizeTimex);
      assertFalse(seqClassifierFlags0.lowerNewgeneThreshold);
      assertEquals(0.1, seqClassifierFlags0.initialGain, 0.01D);
      assertEquals(0, seqClassifierFlags0.maxDocSize);
      assertFalse(seqClassifierFlags0.useRadical);
      assertFalse(seqClassifierFlags0.transitionEdgeOnly);
      assertFalse(seqClassifierFlags0.useWordn);
      assertFalse(seqClassifierFlags0.useMoreGazFeatures);
      assertEquals(25, seqClassifierFlags0.QNsize);
      assertEquals(2, seqClassifierFlags0.maxLeft);
      assertFalse(seqClassifierFlags0.doFeatureDiscovery);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSize, 0.01D);
      assertTrue(seqClassifierFlags0.splitDocuments);
      assertFalse(seqClassifierFlags0.noMidNGrams);
      assertFalse(seqClassifierFlags0.useTitle);
      assertFalse(seqClassifierFlags0.useUnicodeBlock);
      assertFalse(seqClassifierFlags0.nonLinearCRF);
      assertEquals(0, seqClassifierFlags0.numOfSlices);
      assertFalse(seqClassifierFlags0.useNB);
      assertFalse(seqClassifierFlags0.fakeDataset);
      assertFalse(seqClassifierFlags0.useSGD);
      assertFalse(seqClassifierFlags0.useACR);
      assertFalse(seqClassifierFlags0.intern2);
      assertFalse(seqClassifierFlags0.pctSegmenterLenAdjust);
      assertFalse(seqClassifierFlags0.useWordPairs);
      assertFalse(seqClassifierFlags0.useHardGE);
      assertEquals(0.0, seqClassifierFlags0.alignmentPruneThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.sparseOutputLayer);
      assertEquals(1.0, seqClassifierFlags0.adaptSigma, 0.01D);
      assertFalse(seqClassifierFlags0.useMidDotShape);
      assertFalse(seqClassifierFlags0.useDictHK2);
      assertFalse(seqClassifierFlags0.useHybrid);
      assertFalse(seqClassifierFlags0.useGenericFeatures);
      assertFalse(seqClassifierFlags0.useIfInteger);
      assertFalse(seqClassifierFlags0.useKL);
      assertFalse(seqClassifierFlags0.prependEmbedding);
      assertFalse(seqClassifierFlags0.useWord1);
      assertFalse(seqClassifierFlags0.useRobustQN);
      assertFalse(seqClassifierFlags0.normalizeTerms);
      assertFalse(seqClassifierFlags0.ocrTrain);
      assertFalse(seqClassifierFlags0.retainEntitySubclassification);
      assertFalse(seqClassifierFlags0.useUnknown);
      assertFalse(seqClassifierFlags0.useMoreAbbr);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesBigram);
      assertEquals(0.9, seqClassifierFlags0.selfTrainConfidenceThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useReverse);
      assertFalse(seqClassifierFlags0.useNERPriorBIO);
      assertFalse(seqClassifierFlags0.useNegCTBDict2);
      assertFalse(seqClassifierFlags0.use4Clique);
      assertFalse(seqClassifierFlags0.useNegHKDict3);
      assertFalse(seqClassifierFlags0.useNegHKDict4);
      assertFalse(seqClassifierFlags0.removeStrictGoodCoNLLDuplicates);
      assertFalse(seqClassifierFlags0.useNegCTBDict4);
      assertFalse(seqClassifierFlags0.useNegCTBDict3);
      assertFalse(seqClassifierFlags0.regularizeSoftmaxTieParam);
      assertFalse(seqClassifierFlags0.useNegDict2);
      assertFalse(seqClassifierFlags0.useMSRChar2);
      assertFalse(seqClassifierFlags0.iobWrapper);
      assertEquals(1, seqClassifierFlags0.featureThreshold);
      assertFalse(seqClassifierFlags0.useWord2);
      assertFalse(seqClassifierFlags0.useNegDict3);
      assertFalse(seqClassifierFlags0.useWord3);
      assertFalse(seqClassifierFlags0.useWord4);
      assertEquals(0.0, seqClassifierFlags0.featureDiffThresh, 0.01D);
      assertFalse(seqClassifierFlags0.useNegDict4);
      assertFalse(seqClassifierFlags0.useSymTags);
      assertEquals(2, seqClassifierFlags0.CRFwindow);
      assertFalse(seqClassifierFlags0.useNegHKDict2);
      assertFalse(seqClassifierFlags0.useLC);
      assertFalse(seqClassifierFlags0.printTrainLabels);
      assertFalse(seqClassifierFlags0.learnENBasedOnCH);
      assertFalse(seqClassifierFlags0.usePrev);
      assertFalse(seqClassifierFlags0.sighanPostProcessing);
      assertFalse(seqClassifierFlags0.tuneSGD);
      assertFalse(seqClassifierFlags0.readStdin);
      assertFalse(seqClassifierFlags0.useABSTR);
      assertFalse(seqClassifierFlags0.useIsDateRange);
      assertEquals((-1), seqClassifierFlags0.samplingSpeedUpThreshold);
      assertFalse(seqClassifierFlags0.evaluateBackground);
      assertEquals((-1), seqClassifierFlags0.tuneSampleSize);
      assertFalse(seqClassifierFlags0.useSeenFeaturesOnly);
      assertFalse(seqClassifierFlags0.purgeDatasets);
      assertFalse(seqClassifierFlags0.useSymWordPairs);
      assertEquals((-1), seqClassifierFlags0.purgeFeatures);
      assertTrue(seqClassifierFlags0.applyNERPenalty);
      assertFalse(seqClassifierFlags0.dualDecompAlignment);
      assertTrue(seqClassifierFlags0.useInternal);
      assertFalse(seqClassifierFlags0.perceptronDebug);
      assertFalse(seqClassifierFlags0.strictlyZeroethOrder);
      assertFalse(seqClassifierFlags0.powerAlignProb);
      assertEquals(1, seqClassifierFlags0.numDatasetsPerFile);
      assertFalse(seqClassifierFlags0.usePhraseWordTags);
      assertEquals(0, seqClassifierFlags0.startEvaluateIters);
      assertFalse(seqClassifierFlags0.checkNameList);
      assertEquals(0, seqClassifierFlags0.hybridCutoffIteration);
      assertEquals(10, seqClassifierFlags0.totalDataSlice);
      assertFalse(seqClassifierFlags0.useNumberFeature);
      assertFalse(seqClassifierFlags0.usePk);
      assertFalse(seqClassifierFlags0.useBerkeleyCompetitivePosterior);
      assertFalse(seqClassifierFlags0.useFREQ);
      assertFalse(seqClassifierFlags0.useWideDisjunctive);
      assertEquals(30, seqClassifierFlags0.beamSize);
      assertFalse(seqClassifierFlags0.printLabelValue);
      assertFalse(seqClassifierFlags0.suppressMidDotPostprocessing);
      assertFalse(seqClassifierFlags0.printNR);
      assertFalse(seqClassifierFlags0.useScaledSGD);
      assertFalse(seqClassifierFlags0.testHessSamples);
      assertEquals(1000, seqClassifierFlags0.wordSegBeamSize);
      assertEquals(0.0, seqClassifierFlags0.priorAlpha, 0.01D);
      assertEquals(1.0, seqClassifierFlags0.alignDDAlpha, 0.01D);
      assertFalse(seqClassifierFlags0.addBiasToEmbedding);
      assertFalse(seqClassifierFlags0.lazyUpdate);
      assertEquals(1, seqClassifierFlags0.startFold);
      assertFalse(seqClassifierFlags0.useCorefFeatures);
      assertEquals(50, seqClassifierFlags0.SGD2QNhessSamples);
      assertEquals(1, seqClassifierFlags0.selfTrainWindowSize);
      assertTrue(seqClassifierFlags0.useSequences);
      assertFalse(seqClassifierFlags0.noNeighborConstraints);
      assertFalse(seqClassifierFlags0.useWordTag);
      assertFalse(seqClassifierFlags0.useBoundarySequences);
      assertFalse(seqClassifierFlags0.largeChSegFile);
      assertFalse(seqClassifierFlags0.useTopics);
      assertEquals(1.0, seqClassifierFlags0.randomizedRatio, 0.01D);
      assertEquals(1, seqClassifierFlags0.terminateOnEvalImprovementNumOfEpoch);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions);
      assertEquals(1, seqClassifierFlags0.numTimesRemoveTopN);
      assertEquals(0.0, seqClassifierFlags0.priorLambda, 0.01D);
      assertFalse(seqClassifierFlags0.useASBCSuf1);
      assertFalse(seqClassifierFlags0.useNPGovernor);
      assertFalse(seqClassifierFlags0.dropoutApprox);
      assertFalse(seqClassifierFlags0.useNGrams);
      assertFalse(seqClassifierFlags0.useCTBChar2);
      assertFalse(seqClassifierFlags0.useTrainLexicon);
      assertFalse(seqClassifierFlags0.addCapitalFeatures);
      assertEquals(0, seqClassifierFlags0.evaluateIters);
      assertFalse(seqClassifierFlags0.useMUCFeatures);
      assertFalse(seqClassifierFlags0.useNextRealWord);
      assertFalse(seqClassifierFlags0.keepEnglishWhitespaces);
      assertEquals((-1), seqClassifierFlags0.arbitraryInputLayerSize);
      assertFalse(seqClassifierFlags0.useObservedFeaturesOnly);
      assertFalse(seqClassifierFlags0.useVB);
      assertFalse(seqClassifierFlags0.restrictTransitionsTimit);
      assertFalse(seqClassifierFlags0.useMoreTags);
      assertFalse(seqClassifierFlags0.useParenMatching);
      assertFalse(seqClassifierFlags0.doFE);
      assertFalse(seqClassifierFlags0.terminateOnEvalImprovement);
      assertFalse(seqClassifierFlags0.baseline);
      assertEquals(Double.POSITIVE_INFINITY, seqClassifierFlags0.searchGraphPrune, 0.01D);
      assertFalse(seqClassifierFlags0.useMsr);
      assertEquals(1.0E-4, seqClassifierFlags0.tolerance, 0.01D);
      assertFalse(seqClassifierFlags0.useEitherSideDisjunctive);
      assertEquals(1, seqClassifierFlags0.numLopExpert);
      assertFalse(seqClassifierFlags0.useDictASBC2);
      assertFalse(seqClassifierFlags0.deleteBlankLines);
      assertFalse(seqClassifierFlags0.useDictCTB2);
      assertEquals(0, seqClassifierFlags0.removeTopN);
      assertFalse(seqClassifierFlags0.useAdaDiff);
      assertFalse(seqClassifierFlags0.use2W);
      assertFalse(seqClassifierFlags0.usePre);
      assertEquals(8, seqClassifierFlags0.distSimMaxBits);
      assertFalse(seqClassifierFlags0.subCWGaz);
      assertFalse(seqClassifierFlags0.useLemmas);
      assertTrue(seqClassifierFlags0.includeC2EViterbi);
      assertEquals(1, seqClassifierFlags0.multiThreadGrad);
      assertEquals(0.0, seqClassifierFlags0.l1reg, 0.01D);
      assertFalse(seqClassifierFlags0.secondOrderNonLinear);
      assertFalse(seqClassifierFlags0.useNPHead);
      assertFalse(seqClassifierFlags0.useNextVB);
      assertEquals(1.0, seqClassifierFlags0.lambdaEN, 0.01D);
      assertFalse(seqClassifierFlags0.conjoinShapeNGrams);
      assertFalse(seqClassifierFlags0.useFirstWord);
      assertFalse(seqClassifierFlags0.timitDatum);
      assertFalse(seqClassifierFlags0.useFloat);
      assertFalse(seqClassifierFlags0.useRad2b);
      assertFalse(seqClassifierFlags0.useNeighborNGrams);
      assertFalse(seqClassifierFlags0.useQuartic);
      assertFalse(seqClassifierFlags0.useABSTRFreqDict);
      assertFalse(seqClassifierFlags0.doAdaptation);
      assertFalse(seqClassifierFlags0.useWEB);
      assertFalse(seqClassifierFlags0.blockInitialize);
      assertFalse(seqClassifierFlags0.usePKPre1);
      assertEquals(1, seqClassifierFlags0.bisequencePriorType);
      assertFalse(seqClassifierFlags0.useDualDecomp);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesAll);
      assertEquals(0, seqClassifierFlags0.interimOutputFreq);
      assertFalse(seqClassifierFlags0.strictlyThirdOrder);
      assertFalse(seqClassifierFlags0.useTypeSeqs2);
      assertFalse(seqClassifierFlags0.useTypeSeqs3);
      assertFalse(seqClassifierFlags0.useANTE);
      assertFalse(seqClassifierFlags0.randomLopFeatureSplit);
      assertFalse(seqClassifierFlags0.useIsURL);
      assertFalse(seqClassifierFlags0.usePhraseWords);
      assertEquals(4, seqClassifierFlags0.disjunctionWidth);
      assertFalse(seqClassifierFlags0.expandMidDot);
      assertFalse(seqClassifierFlags0.useOutDict2);
      assertFalse(seqClassifierFlags0.usePrevSequences);
      assertEquals(0.1, seqClassifierFlags0.gainSGD, 0.01D);
      assertFalse(seqClassifierFlags0.useCWSWordFeatures);
      assertEquals(1.0, seqClassifierFlags0.sigma, 0.01D);
      assertFalse(seqClassifierFlags0.useNoisyNonNoisyFeature);
      assertTrue(seqClassifierFlags0.useCWSFeatures);
      assertEquals(25, seqClassifierFlags0.QNsize2);
      assertFalse(seqClassifierFlags0.useBig5);
      assertFalse(seqClassifierFlags0.useFeaturesCpC5gram);
      assertEquals(0.0, seqClassifierFlags0.featureWeightThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.testVariance);
      assertFalse(seqClassifierFlags0.initWithNERPosterior);
      assertFalse(seqClassifierFlags0.useTypeySequences);
      assertFalse(seqClassifierFlags0.printWeights);
      assertFalse(seqClassifierFlags0.backpropLopTraining);
      assertFalse(seqClassifierFlags0.useDict2);
      assertFalse(seqClassifierFlags0.combo);
      assertEquals(0, seqClassifierFlags0.maxQNItr);
      assertFalse(seqClassifierFlags0.useNegPKDict2);
      assertFalse(seqClassifierFlags0.justify);
      assertFalse(seqClassifierFlags0.useCTBSuf1);
      assertEquals(0, seqClassifierFlags0.multiThreadGibbs);
      assertFalse(seqClassifierFlags0.iobTags);
      assertFalse(seqClassifierFlags0.useObservedSequencesOnly);
      assertFalse(seqClassifierFlags0.useNegPKDict3);
      assertFalse(seqClassifierFlags0.useNegPKDict4);
      assertEquals(10, seqClassifierFlags0.wideDisjunctionWidth);
      assertFalse(seqClassifierFlags0.useOnlySeenWeights);
      assertFalse(seqClassifierFlags0.useShapeStrings);
      assertFalse(seqClassifierFlags0.useDictleng);
      assertEquals(1, seqClassifierFlags0.selfTrainIterations);
      assertFalse(seqClassifierFlags0.useLabelSource);
      assertEquals(1, seqClassifierFlags0.multiThreadPerceptron);
      assertFalse(seqClassifierFlags0.useExtraTaggySequences);
      assertFalse(seqClassifierFlags0.useLastRealWord);
      assertFalse(seqClassifierFlags0.useWEBFreqDict);
      assertEquals(10, seqClassifierFlags0.totalFeatureSlice);
      assertFalse(seqClassifierFlags0.pctSegmenterScaleByCRF);
      assertFalse(seqClassifierFlags0.useRandomSeed);
      assertFalse(seqClassifierFlags0.useSuf);
      assertFalse(seqClassifierFlags0.strictGoodCoNLL);
      assertTrue(seqClassifierFlags0.restrictLabels);
      assertEquals(0, seqClassifierFlags0.scaledSGDMethod);
      assertEquals((-1), seqClassifierFlags0.maxNGramLeng);
      assertFalse(seqClassifierFlags0.noEdgeFeature);
      assertFalse(seqClassifierFlags0.keepEmptySentences);
      assertFalse(seqClassifierFlags0.twoStage);
      assertFalse(seqClassifierFlags0.useWordnetFeatures);
      assertEquals(1, seqClassifierFlags0.endFold);
      assertEquals(0.0, seqClassifierFlags0.dropoutRate, 0.01D);
      assertFalse(seqClassifierFlags0.printFirstOrderProbs);
      assertFalse(seqClassifierFlags0.appendLC);
      assertFalse(seqClassifierFlags0.factorInAlignmentProb);
      assertFalse(seqClassifierFlags0.useShapeConjunctions);
      assertFalse(seqClassifierFlags0.usePKSuf1);
      assertFalse(seqClassifierFlags0.useTaggySequencesShapeInteraction);
      assertTrue(seqClassifierFlags0.useKnownLCWords);
      assertFalse(seqClassifierFlags0.weightByEntropy);
      assertFalse(seqClassifierFlags0.skipOutputRegularization);
      assertEquals(1.0, seqClassifierFlags0.lambdaCH, 0.01D);
      assertFalse(seqClassifierFlags0.useRad2);
      assertFalse(seqClassifierFlags0.bioSubmitOutput);
      assertFalse(seqClassifierFlags0.useChPos);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions2);
      assertEquals(0, seqClassifierFlags0.ocrFold);
      assertFalse(seqClassifierFlags0.alternateTraining);
      assertFalse(seqClassifierFlags0.useDisjunctiveShapeInteraction);
      assertFalse(seqClassifierFlags0.useGazettePhrases);
      assertFalse(seqClassifierFlags0.useFeaturesCpC6gram);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions3);
      assertTrue(seqClassifierFlags0.useViterbi);
      assertFalse(seqClassifierFlags0.usePrevVB);
      assertTrue(seqClassifierFlags0.useWord);
      assertFalse(seqClassifierFlags0.useSequentialScanSampling);
      assertFalse(seqClassifierFlags0.randomLopWeights);
      assertEquals(1, seqClassifierFlags0.numStartLayers);
      assertFalse(seqClassifierFlags0.useRad1);
      assertFalse(seqClassifierFlags0.greekifyNGrams);
      assertFalse(seqClassifierFlags0.dump);
      assertFalse(seqClassifierFlags0.dualDecompDebug);
      assertFalse(seqClassifierFlags0.useCTBPre1);
      assertFalse(seqClassifierFlags0.useASBCChar2);
      assertFalse(seqClassifierFlags0.useUniformPrior);
      assertEquals(1.0E-4, double0, 0.01D);
      assertEquals("", seqClassifierFlags0.toString());
      
      String string0 = JSONObject.numberToString((Number) 1.0E-4);
      assertEquals("1.0E-4", string0);
      assertNotNull(string0);
  }

  //Test case number: 59
  /*
   * 5 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;J)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.put(Ljava/lang/String;D)Lwheel/json/JSONObject;: root-Branch
   * Goal 3. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 26 IFNONNULL L346 - true
   * Goal 4. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I52 Branch 28 IFEQ L350 - true
   * Goal 5. wheel.json.JSONObject.put(Ljava/lang/String;Z)Lwheel/json/JSONObject;: I8 Branch 68 IFEQ L902 - false
   */

  @Test
  public void test59()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("isaddLast", 823L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject1.put("isaddLast", true);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      JSONObject jSONObject3 = jSONObject2.accumulate("isaddLast", (Object) "isaddLast");
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject3);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(1, jSONObject3.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject3);
      
      JSONObject jSONObject4 = jSONObject3.put("isaddLast", (double) 823L);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject4);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject4, jSONObject3);
      assertSame(jSONObject4, jSONObject1);
      assertSame(jSONObject4, jSONObject2);
      assertSame(jSONObject4, jSONObject0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject4);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject3);
      assertSame(jSONObject2, jSONObject4);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(1, jSONObject3.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject4.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject4);
  }

  //Test case number: 60
  /*
   * 7 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/util/Collection;)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.optInt(Ljava/lang/String;I)I: root-Branch
   * Goal 3. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 26 IFNONNULL L346 - false
   * Goal 4. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I26 Branch 27 IFEQ L347 - true
   * Goal 5. wheel.json.JSONObject.get(Ljava/lang/String;)Ljava/lang/Object;: I12 Branch 38 IFNONNULL L421 - true
   * Goal 6. wheel.json.JSONObject.getDouble(Ljava/lang/String;)D: I13 Branch 45 IFEQ L463 - true
   * Goal 7. wheel.json.JSONObject.getInt(Ljava/lang/String;)I: I13 Branch 46 IFEQ L484 - true
   */

  @Test
  public void test60()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("getiterator", (Object) jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      int int0 = jSONObject0.optInt("getiterator", 5600);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(5600, int0);
      assertEquals(1, jSONObject0.length());
      
      HashIndex<ArrayCoreMap> hashIndex0 = new HashIndex<ArrayCoreMap>(5600);
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertNotNull(hashIndex0);
      
      JSONObject jSONObject2 = jSONObject0.put("getiterator", (Collection) hashIndex0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertEquals(1, jSONObject2.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertNotNull(jSONObject2);
  }

  //Test case number: 61
  /*
   * 26 covered goals:
   * Goal 1. wheel.json.JSONObject.length()I: root-Branch
   * Goal 2. wheel.json.JSONObject.get(Ljava/lang/String;)Ljava/lang/Object;: I12 Branch 38 IFNONNULL L421 - false
   * Goal 3. wheel.json.JSONObject.opt(Ljava/lang/String;)Ljava/lang/Object;: I6 Branch 63 IFNONNULL L688 - true
   * Goal 4. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 69 IFNONNULL L975 - true
   * Goal 5. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I20 Branch 70 IFNULL L978 - false
   * Goal 6. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 71 IFNULL L999 - false
   * Goal 7. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I11 Branch 72 IFNULL L999 - false
   * Goal 8. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 81 LOOKUPSWITCH L1030 Case 34 - true
   * Goal 9. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 82 LOOKUPSWITCH L1030 Case 47 - true
   * Goal 10. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 84 LOOKUPSWITCH L1030 Default-Case - false
   * Goal 11. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I91 Branch 85 IF_ICMPNE L1037 - true
   * Goal 12. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I14 Branch 92 IFEQ L1089 - true
   * Goal 13. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I45 Branch 95 IFEQ L1094 - true
   * Goal 14. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I11 Branch 103 IFNE L1190 - true
   * Goal 15. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I41 Branch 104 IF_ICMPNE L1197 - false
   * Goal 16. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I6 Branch 121 IFNULL L1304 - false
   * Goal 17. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I13 Branch 122 IFEQ L1304 - true
   * Goal 18. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I25 Branch 123 IFEQ L1308 - true
   * Goal 19. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I62 Branch 125 IFEQ L1317 - true
   * Goal 20. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I76 Branch 126 IFEQ L1320 - true
   * Goal 21. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I89 Branch 127 IFEQ L1323 - true
   * Goal 22. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I89 Branch 127 IFEQ L1323 - false
   * Goal 23. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I105 Branch 128 IFEQ L1326 - true
   * Goal 24. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I121 Branch 129 IFEQ L1329 - true
   * Goal 25. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I140 Branch 130 IFEQ L1332 - true
   * Goal 26. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I160 Branch 131 IFEQ L1335 - true
   */

  @Test
  public void test61()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("LL{^t)2V&Y.7/=U", (Object) "LL{^t)2V&Y.7/=U");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      String string0 = JSONObject.valueToString(jSONObject0, (-808), (-808));
      assertSame(jSONObject0, jSONObject1);
      assertEquals("{\"LL{^t)2V&Y.7/=U\": \"LL{^t)2V&Y.7/=U\"}", string0);
      assertEquals(1, jSONObject0.length());
      assertNotNull(string0);
      
      try {
        double double0 = jSONObject0.getDouble("{\"LL{^t)2V&Y.7/=U\": \"LL{^t)2V&Y.7/=U\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\\"LL{^t)2V&Y.7/=U\\\": \\\"LL{^t)2V&Y.7/=U\\\"}\"] not found.
         //
      }
  }

  //Test case number: 62
  /*
   * 23 covered goals:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I6 Branch 73 IFNULL L1015 - false
   * Goal 2. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I12 Branch 74 IFNE L1015 - true
   * Goal 3. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I51 Branch 75 IF_ICMPGE L1027 - true
   * Goal 4. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I51 Branch 75 IF_ICMPGE L1027 - false
   * Goal 5. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 76 LOOKUPSWITCH L1030 Case 8 - false
   * Goal 6. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 77 LOOKUPSWITCH L1030 Case 9 - false
   * Goal 7. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 78 LOOKUPSWITCH L1030 Case 10 - false
   * Goal 8. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 79 LOOKUPSWITCH L1030 Case 12 - false
   * Goal 9. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 80 LOOKUPSWITCH L1030 Case 13 - false
   * Goal 10. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 81 LOOKUPSWITCH L1030 Case 34 - false
   * Goal 11. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 82 LOOKUPSWITCH L1030 Case 47 - false
   * Goal 12. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 83 LOOKUPSWITCH L1030 Case 92 - false
   * Goal 13. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 84 LOOKUPSWITCH L1030 Default-Case - true
   * Goal 14. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I177 Branch 86 IF_ICMPLT L1058 - false
   * Goal 15. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I183 Branch 87 IF_ICMPLT L1058 - true
   * Goal 16. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I196 Branch 89 IF_ICMPLT L1058 - true
   * Goal 17. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I82 Branch 114 IFEQ L1268 - true
   * Goal 18. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I96 Branch 115 IFNE L1271 - false
   * Goal 19. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I102 Branch 116 IFNE L1271 - false
   * Goal 20. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I108 Branch 117 IFEQ L1271 - true
   * Goal 21. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I121 Branch 118 IFEQ L1275 - true
   * Goal 22. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I138 Branch 119 IFEQ L1278 - true
   * Goal 23. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I156 Branch 120 IFEQ L1281 - true
   */

  @Test
  public void test62()  throws Throwable  {
      String string0 = JSONObject.valueToString("TNXCpU{ wq3R");
      assertEquals("\"TNXCpU{ wq3R\"", string0);
      assertNotNull(string0);
  }

  //Test case number: 63
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.keys()Ljava/util/Iterator;: root-Branch
   * Goal 2. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I18 Branch 55 IFEQ L648 - true
   * Goal 3. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I37 Branch 56 IFNE L651 - false
   */

  @Test
  public void test63()  throws Throwable  {
      HashMap<Tag, ArrayCoreMap> hashMap0 = new HashMap<Tag, ArrayCoreMap>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(jSONArray0);
  }

  //Test case number: 64
  /*
   * 14 covered goals:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I6 Branch 57 IFNONNULL L662 - true
   * Goal 2. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I31 Branch 58 IFLE L670 - false
   * Goal 3. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I38 Branch 59 IFGE L670 - false
   * Goal 4. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I45 Branch 60 IFGE L670 - false
   * Goal 5. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I54 Branch 61 IFLE L671 - true
   * Goal 6. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I77 Branch 62 IFLE L674 - true
   * Goal 7. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I6 Branch 91 IFNULL L1088 - false
   * Goal 8. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I14 Branch 92 IFEQ L1089 - false
   * Goal 9. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I23 Branch 93 IFNE L1090 - false
   * Goal 10. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I30 Branch 94 IFEQ L1090 - true
   * Goal 11. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I6 Branch 110 IFNULL L1253 - false
   * Goal 12. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I13 Branch 111 IFEQ L1253 - true
   * Goal 13. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I25 Branch 112 IFEQ L1256 - true
   * Goal 14. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I82 Branch 114 IFEQ L1268 - false
   */

  @Test
  public void test64()  throws Throwable  {
      String string0 = JSONObject.valueToString(26.9288820485747);
      assertEquals("26.9288820485747", string0);
      assertNotNull(string0);
  }

  //Test case number: 65
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>()V: root-Branch
   * Goal 2. wheel.json.JSONObject.<init>(Ljava/util/Map;)V: I11 Branch 16 IFNONNULL L234 - true
   * Goal 3. wheel.json.JSONObject.<init>(Ljava/lang/Object;[Ljava/lang/String;)V: I20 Branch 25 IF_ICMPGE L304 - true
   * Goal 4. wheel.json.JSONObject.<init>(Ljava/lang/Object;[Ljava/lang/String;)V: I20 Branch 25 IF_ICMPGE L304 - false
   */

  @Test
  public void test65()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject((Object) linkedList0, stringArray0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, linkedList0.size());
      assertNotNull(jSONObject0);
      
      HashMap<HasInterval<Integer>, Tag> hashMap0 = new HashMap<HasInterval<Integer>, Tag>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      assertNotSame(jSONObject1, jSONObject0);
      assertEquals(0, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotNull(jSONObject1);
  }
}
