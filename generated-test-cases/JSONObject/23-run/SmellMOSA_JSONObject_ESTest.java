/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 18 03:53:09 GMT 2015
 */

package wheel.json;

import static org.junit.Assert.*;
import org.junit.Test;
import edu.stanford.nlp.ling.CategoryWordTag;
import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.ling.Label;
import edu.stanford.nlp.ling.LabeledWord;
import edu.stanford.nlp.ling.StringLabel;
import edu.stanford.nlp.ling.Tag;
import edu.stanford.nlp.ling.TaggedWord;
import edu.stanford.nlp.ling.TaggedWordFactory;
import edu.stanford.nlp.ling.WordLemmaTag;
import edu.stanford.nlp.ling.WordTag;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  //Test case number: 0
  @Test
  public void test00()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONObject jSONObject1 = jSONObject0.put("", true);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      
      boolean boolean1 = jSONObject0.isNull("");
      assertSame(jSONObject0, jSONObject1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, jSONObject0.length());
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getString(Ljava/lang/String;)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test01()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      try {
        String string0 = jSONObject0.getString("localised");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"localised\"] not found.
         //
      }
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I11 Branch 50 IFNE L548 - false
   */

  @Test
  public void test02()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I52 Branch 28 IFEQ L350 - true
   */

  @Test
  public void test03()  throws Throwable  {
      HashMap<CategoryWordTag, Boolean> hashMap0 = new HashMap<CategoryWordTag, Boolean>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "#\"_I!>e{vwc?3sM";
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("#\"_I!>e{vwc?3sM", (Object) jSONObject0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      
      Boolean boolean0 = Boolean.valueOf("#\"_I!>e{vwc?3sM");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject0.accumulate("#\"_I!>e{vwc?3sM", (Object) boolean0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject2);
      assertEquals(1, jSONObject2.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I13 Branch 32 IFEQ L393 - false
   */

  @Test
  public void test04()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.has(Ljava/lang/String;)Z: root-Branch
   */

  @Test
  public void test05()  throws Throwable  {
      HashMap<LabeledWord, WordLemmaTag> hashMap0 = new HashMap<LabeledWord, WordLemmaTag>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      boolean boolean0 = jSONObject0.has("\"s!X8gdk!QC;Am4)Y");
      assertFalse(boolean0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I6 Branch 57 IFNONNULL L662 - false
   */

  @Test
  public void test06()  throws Throwable  {
      try {
        String string0 = JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
      }
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I6 Branch 98 IFNULL L1113 - true
   */

  @Test
  public void test07()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      String string0 = jSONObject0.toString(1981);
      assertNotNull(string0);
      assertEquals("{}", string0);
      assertEquals(0, jSONObject0.length());
      
      JSONArray jSONArray0 = jSONObject0.optJSONArray("{}");
      assertNull(jSONArray0);
      assertEquals(0, jSONObject0.length());
      
      JSONArray jSONArray1 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray1);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optDouble(Ljava/lang/String;)D: root-Branch
   */

  @Test
  public void test08()  throws Throwable  {
      HashMap<CategoryWordTag, Object> hashMap0 = new HashMap<CategoryWordTag, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      
      double double0 = jSONObject0.optDouble("<#u;8'1mDQC:]q");
      assertEquals(Double.NaN, double0, 0.01D);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 9
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 6 LOOKUPSWITCH L183 Case 125 - true
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 7 LOOKUPSWITCH L183 Default-Case - false
   */

  @Test
  public void test09()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 10
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I41 Branch 42 IFNE L443 - false
   * Goal 2. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I47 Branch 43 IFEQ L443 - true
   */

  @Test
  public void test10()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.append("stuff!", (Object) "stuff!");
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      
      try {
        boolean boolean0 = jSONObject1.getBoolean("stuff!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"stuff!\"] is not a Boolean.
         //
      }
  }

  //Test case number: 11
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I12 Branch 99 IFNE L1113 - true
   * Goal 2. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I34 Branch 100 IF_ICMPGE L1117 - true
   * Goal 3. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I34 Branch 100 IF_ICMPGE L1117 - false
   */

  @Test
  public void test11()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("+ `M5hm[Q~", 235L);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONArray0);
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONObject0.length());
      
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertSame(jSONObject1, jSONObject0);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertNotNull(jSONArray1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertEquals(1, jSONObject0.length());
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I37 Branch 56 IFNE L651 - false
   */

  @Test
  public void test12()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 77 LOOKUPSWITCH L1030 Case 9 - true
   */

  @Test
  public void test13()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      boolean boolean0 = jSONObject0.optBoolean("inputLayerWeights4Edge.length=\t%d%n", true);
      assertTrue(boolean0);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 14
  /*
   * 6 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/util/Collection;)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I21 Branch 132 IFEQ L1357 - true
   * Goal 3. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I21 Branch 132 IFEQ L1357 - false
   * Goal 4. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I28 Branch 133 IFEQ L1358 - true
   * Goal 5. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I65 Branch 134 IFEQ L1365 - true
   * Goal 6. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I84 Branch 135 IFEQ L1367 - false
   */

  @Test
  public void test14()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      LinkedList<StringLabel> linkedList0 = new LinkedList<StringLabel>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      JSONObject jSONObject1 = jSONObject0.put("has", (Collection) linkedList0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(0, linkedList0.size());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("has");
      assertNotNull(mockPrintStream0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertNotNull(charsetEncoder0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter((OutputStream) mockPrintStream0, charsetEncoder0);
      assertNotNull(outputStreamWriter0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      
      OutputStreamWriter outputStreamWriter1 = (OutputStreamWriter)jSONObject1.write((Writer) outputStreamWriter0);
      assertSame(outputStreamWriter0, outputStreamWriter1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(outputStreamWriter1, outputStreamWriter0);
      assertNotNull(outputStreamWriter1);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(0, linkedList0.size());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optDouble(Ljava/lang/String;D)D: I13 Branch 64 IFEQ L764 - false
   */

  @Test
  public void test15()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      long long0 = jSONObject0.optLong(" phkasal cat/gory types, ");
      assertEquals(0L, long0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put(" phkasal cat/gory types, ", 0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      
      double double0 = jSONObject1.optDouble(" phkasal cat/gory types, ", (double) 0L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I12 Branch 67 IFNULL L889 - false
   */

  @Test
  public void test16()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      //  // Unstable assertion: assertNotNull(jSONObject0);
      //  // Unstable assertion: assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.putOpt("|9l}Gy\"\",=-J3>n2q", (Object) jSONObject0);
      //  // Unstable assertion: assertSame(jSONObject0, jSONObject1);
      //  // Unstable assertion: assertSame(jSONObject1, jSONObject0);
      //  // Unstable assertion: assertNotNull(jSONObject1);
      //  // Unstable assertion: assertEquals(1, jSONObject0.length());
      //  // Unstable assertion: assertEquals(1, jSONObject1.length());
      
      // Undeclared exception!
      try {
        String string0 = jSONObject1.optString("|9l}Gy\"\",=-J3>n2q", "|9l}Gy\"\",=-J3>n2q");
       //  fail("Expecting exception: StackOverflowError");
       // Unstable assertion
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 17
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I6 Branch 98 IFNULL L1113 - false
   * Goal 2. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I12 Branch 99 IFNE L1113 - false
   */

  @Test
  public void test17()  throws Throwable  {
      HashMap<LabeledWord, TaggedWord> hashMap0 = new HashMap<LabeledWord, TaggedWord>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      assertEquals(0, jSONArray0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 66 IFEQ L829 - false
   */

  @Test
  public void test18()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.putOpt(" phkasal cat/gory types, ", (Object) jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      
      JSONObject jSONObject2 = jSONObject1.optJSONObject(" phkasal cat/gory types, ");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject2);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
      assertEquals(1, jSONObject1.length());
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I14 Branch 39 IFNE L439 - true
   */

  @Test
  public void test19()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("&~9;", false);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      
      boolean boolean0 = jSONObject1.optBoolean("&~9;");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(boolean0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
  }

  //Test case number: 20
  /*
   * 6 covered goals:
   * Goal 1. wheel.json.JSONObject.isNull(Ljava/lang/String;)Z: root-Branch
   * Goal 2. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I6 Branch 1 IFNULL L115 - false
   * Goal 3. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I12 Branch 2 IF_ACMPNE L115 - true
   * Goal 4. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I14 Branch 39 IFNE L439 - false
   * Goal 5. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I20 Branch 40 IFEQ L439 - true
   * Goal 6. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I41 Branch 42 IFNE L443 - true
   */

  @Test
  public void test20()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("3j", true);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      
      boolean boolean0 = jSONObject1.optBoolean("3j");
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertTrue(boolean0);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      
      boolean boolean1 = jSONObject0.isNull("3j");
      assertSame(jSONObject0, jSONObject1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, jSONObject0.length());
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getLong(Ljava/lang/String;)J: I13 Branch 49 IFEQ L536 - false
   */

  @Test
  public void test21()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      long long0 = jSONObject0.optLong(" phkasal cat/gory types, ");
      assertEquals(0L, long0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.accumulate(" phkasal cat/gory types, ", (Object) 0L);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      
      long long1 = jSONObject0.optLong(" phkasal cat/gory types, ");
      assertSame(jSONObject0, jSONObject1);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      assertEquals(1, jSONObject0.length());
  }

  //Test case number: 22
  /*
   * 6 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I12 Branch 4 IF_ICMPEQ L178 - true
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 5 LOOKUPSWITCH L183 Case 0 - false
   * Goal 3. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 6 LOOKUPSWITCH L183 Case 125 - false
   * Goal 4. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 7 LOOKUPSWITCH L183 Default-Case - true
   * Goal 5. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I61 Branch 8 IF_ICMPNE L198 - true
   * Goal 6. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I86 Branch 10 IF_ICMPEQ L202 - false
   */

  @Test
  public void test22()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{Y}_UoiU[4z5u?");
      assertNotNull(jSONTokener0);
      assertTrue(jSONTokener0.more());
      
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {Y}_UoiU[4z5u?
         //
      }
  }

  //Test case number: 23
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I76 Branch 126 IFEQ L1320 - false
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I160 Branch 131 IFEQ L1335 - false
   */

  @Test
  public void test23()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "isreplaceFirst");
      assertNotNull(jSONObject0);
      assertEquals(3, jSONObject0.length());
      
      String string0 = JSONObject.valueToString(jSONObject0, (byte)82, (byte)82);
      assertNotNull(string0);
      assertEquals("{\n                                                                                                                                                                    \"bytes\": [\n                                                                                                                                                                                                                                                      105,\n                                                                                                                                                                                                                                                      115,\n                                                                                                                                                                                                                                                      114,\n                                                                                                                                                                                                                                                      101,\n                                                                                                                                                                                                                                                      112,\n                                                                                                                                                                                                                                                      108,\n                                                                                                                                                                                                                                                      97,\n                                                                                                                                                                                                                                                      99,\n                                                                                                                                                                                                                                                      101,\n                                                                                                                                                                                                                                                      70,\n                                                                                                                                                                                                                                                      105,\n                                                                                                                                                                                                                                                      114,\n                                                                                                                                                                                                                                                      115,\n                                                                                                                                                                                                                                                      116\n                                                                                                                                                                    ],\n                                                                                                                                                                    \"class\": \"class java.lang.String\",\n                                                                                                                                                                    \"empty\": false\n                                                                                  }", string0);
      assertEquals(3, jSONObject0.length());
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I6 Branch 73 IFNULL L1015 - true
   */

  @Test
  public void test24()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
      
      JSONObject jSONObject0 = new JSONObject(object0);
      assertNotNull(jSONObject0);
      assertEquals(1, jSONObject0.length());
      
      try {
        double double0 = jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
      }
  }

  //Test case number: 25
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I40 Branch 53 IFNE L574 - true
   * Goal 2. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I60 Branch 54 IF_ICMPGE L578 - true
   * Goal 3. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I60 Branch 54 IF_ICMPGE L578 - false
   */

  @Test
  public void test25()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "h6I'aci yvfNMyv8\"1");
      assertNotNull(stringArray0);
  }

  //Test case number: 26
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject$Null.toString()Ljava/lang/String;: root-Branch
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I82 Branch 114 IFEQ L1268 - false
   */

  @Test
  public void test26()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      JSONArray jSONArray1 = jSONArray0.put((-1L));
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      
      JSONArray jSONArray2 = jSONArray1.put(4322, (Object) jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      assertEquals(4323, jSONArray0.length());
      assertEquals(4323, jSONArray1.length());
      assertEquals(4323, jSONArray2.length());
      
      try {
        JSONObject jSONObject0 = jSONArray2.toJSONObject(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
      }
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I30 Branch 94 IFEQ L1090 - false
   */

  @Test
  public void test27()  throws Throwable  {
      Tag tag0 = new Tag();
      assertNotNull(tag0);
      assertEquals(-1, tag0.beginPosition());
      assertNull(tag0.value());
      assertEquals(-1, tag0.endPosition());
      assertNull(tag0.tag());
      
      JSONObject jSONObject0 = new JSONObject((Object) tag0);
      assertNotNull(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(-1, tag0.beginPosition());
      assertNull(tag0.value());
      assertEquals(-1, tag0.endPosition());
      assertNull(tag0.tag());
      
      Double double0 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double0, 0.01D);
      
      try {
        JSONObject jSONObject1 = jSONObject0.put("000", (Object) double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
      }
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getInt(Ljava/lang/String;)I: I13 Branch 46 IFEQ L484 - false
   */

  @Test
  public void test28()  throws Throwable  {
      HashMap<CategoryWordTag, Object> hashMap0 = new HashMap<CategoryWordTag, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("<#u;8'1mDQc:]q", (-2096L));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      int int0 = jSONObject1.optInt("<#u;8'1mDQc:]q");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals((-2096), int0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  //Test case number: 29
  /*
   * 5 covered goals:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I6 Branch 52 IFNONNULL L568 - true
   * Goal 2. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I40 Branch 53 IFNE L574 - false
   * Goal 3. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I18 Branch 55 IFEQ L648 - true
   * Goal 4. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I18 Branch 55 IFEQ L648 - false
   * Goal 5. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I37 Branch 56 IFNE L651 - true
   */

  @Test
  public void test29()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.append("] <s not a }SONAzray.", (Object) "] <s not a }SONAzray.");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      
      JSONArray jSONArray0 = jSONObject1.names();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONArray0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONObject1.length());
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONArray0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNull(stringArray0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONObject1.length());
  }

  //Test case number: 30
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.optInt(Ljava/lang/String;)I: root-Branch
   * Goal 2. wheel.json.JSONObject.getInt(Ljava/lang/String;)I: I13 Branch 46 IFEQ L484 - true
   */

  @Test
  public void test30()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.append("] is not a }SONAzray.", (Object) "] is not a }SONAzray.");
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      
      int int0 = jSONObject1.optInt("] is not a }SONAzray.");
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, int0);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
  }

  //Test case number: 31
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I121 Branch 118 IFEQ L1275 - false
   */

  @Test
  public void test31()  throws Throwable  {
      HashMap<LabeledWord, TaggedWord> hashMap0 = new HashMap<LabeledWord, TaggedWord>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  //Test case number: 32
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I54 Branch 36 IFLE L401 - false
   * Goal 2. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I77 Branch 37 IFLE L404 - false
   */

  @Test
  public void test32()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1.0));
      assertNotNull(string0);
      assertEquals("-1", string0);
  }

  //Test case number: 33
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 47 IFEQ L499 - true
   */

  @Test
  public void test33()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      long long0 = jSONObject0.optLong(" phkasal cat/gory types, ");
      assertEquals(0L, long0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.accumulate(" phkasal cat/gory types, ", (Object) 0L);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      
      try {
        JSONArray jSONArray0 = jSONObject1.getJSONArray(" phkasal cat/gory types, ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" phkasal cat/gory types, \"] is not a JSONArray.
         //
      }
  }

  //Test case number: 34
  /*
   * 7 covered goals:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I7 Branch 31 IFNE L393 - false
   * Goal 2. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I13 Branch 32 IFEQ L393 - true
   * Goal 3. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I31 Branch 33 IFLE L400 - false
   * Goal 4. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I38 Branch 34 IFGE L400 - false
   * Goal 5. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I45 Branch 35 IFGE L400 - false
   * Goal 6. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I54 Branch 36 IFLE L401 - true
   * Goal 7. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I77 Branch 37 IFLE L404 - true
   */

  @Test
  public void test34()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.9);
      assertNotNull(string0);
      assertEquals("0.9", string0);
  }

  //Test case number: 35
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I13 Branch 111 IFEQ L1253 - false
   */

  @Test
  public void test35()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
      
      String string0 = JSONObject.valueToString(object0);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  //Test case number: 36
  /*
   * 8 covered goals:
   * Goal 1. wheel.json.JSONObject.optString(Ljava/lang/String;)Ljava/lang/String;: root-Branch
   * Goal 2. wheel.json.JSONObject.optDouble(Ljava/lang/String;D)D: I13 Branch 64 IFEQ L764 - true
   * Goal 3. wheel.json.JSONObject.optString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I12 Branch 67 IFNULL L889 - true
   * Goal 4. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I125 Branch 107 IF_ICMPGE L1211 - false
   * Goal 5. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I194 Branch 109 IF_ICMPGE L1221 - false
   * Goal 6. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I6 Branch 110 IFNULL L1253 - true
   * Goal 7. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I105 Branch 128 IFEQ L1326 - false
   * Goal 8. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I121 Branch 129 IFEQ L1329 - false
   */

  @Test
  public void test36()  throws Throwable  {
      HashMap<LabeledWord, WordLemmaTag> hashMap0 = new HashMap<LabeledWord, WordLemmaTag>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.append("-`55vL@", (Object) "\"({s!Z8Pdk!QC;A04)");
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = jSONObject0.optString("\"({s!Z8Pdk!QC;A04)");
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject2 = jSONObject0.accumulate("\"({s!Z8Pdk!QC;A04)", (Object) hashMap0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject2);
      assertEquals(2, jSONObject2.length());
      assertEquals(2, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      double double0 = jSONObject0.optDouble("\"({s!Z8Pdk!QC;A04)", (double) 0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(2, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string1 = jSONObject0.toString(0, 19);
      assertNotSame(string1, string0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("{\n                   \"-`55vL@\": [\"\\\"({s!Z8Pdk!QC;A04)\"],\n                   \"\\\"({s!Z8Pdk!QC;A04)\": {}\n                   }", string1);
      assertEquals(2, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string2 = JSONObject.valueToString((Object) null);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("null", string2);
  }

  //Test case number: 37
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I91 Branch 85 IF_ICMPNE L1037 - false
   */

  @Test
  public void test37()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
      assertEquals(0, jSONObject0.length());
      
      TaggedWordFactory taggedWordFactory0 = new TaggedWordFactory('i');
      assertEquals(2, taggedWordFactory0.TAG_LABEL);
      assertNotNull(taggedWordFactory0);
      
      TaggedWord taggedWord0 = (TaggedWord)taggedWordFactory0.newLabelFromString("QVp<i#oW/");
      assertEquals(2, taggedWordFactory0.TAG_LABEL);
      assertNotNull(taggedWord0);
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals("#oW/", taggedWord0.tag());
      assertEquals("QVp<", taggedWord0.value());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("QVp<", taggedWord0.word());
      
      LabeledWord labeledWord0 = new LabeledWord("{}", (Label) taggedWord0);
      assertEquals(2, taggedWordFactory0.TAG_LABEL);
      assertNotNull(labeledWord0);
      assertEquals("{}", labeledWord0.word());
      assertEquals(-1, labeledWord0.endPosition());
      assertEquals("{}", labeledWord0.value());
      assertEquals(-1, labeledWord0.beginPosition());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals("#oW/", taggedWord0.tag());
      assertEquals("QVp<", taggedWord0.value());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("QVp<", taggedWord0.word());
      
      String string1 = JSONObject.valueToString(labeledWord0, 'i', 'i');
      assertNotSame(string1, string0);
      assertEquals(2, taggedWordFactory0.TAG_LABEL);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\"{}/QVp<\\/#oW/\"", string1);
      assertEquals("{}", labeledWord0.word());
      assertEquals(-1, labeledWord0.endPosition());
      assertEquals("{}", labeledWord0.value());
      assertEquals(-1, labeledWord0.beginPosition());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals("#oW/", taggedWord0.tag());
      assertEquals("QVp<", taggedWord0.value());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("QVp<", taggedWord0.word());
  }

  //Test case number: 38
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I77 Branch 62 IFLE L674 - true
   */

  @Test
  public void test38()  throws Throwable  {
      Double double0 = new Double((-0.508475926451239));
      assertEquals((-0.508475926451239), (double)double0, 0.01D);
      
      String string0 = JSONObject.valueToString(double0, (-2484), (-2484));
      assertNotNull(string0);
      assertEquals("-0.508475926451239", string0);
  }

  //Test case number: 39
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.toString()Ljava/lang/String;: I28 Branch 102 IF_ICMPLE L1141 - false
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I96 Branch 115 IFNE L1271 - true
   * Goal 3. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I102 Branch 116 IFNE L1271 - true
   */

  @Test
  public void test39()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.append("Expected a ',' or '}'", (Object) "] is not a }SONAzray.");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      
      boolean boolean0 = jSONObject1.optBoolean("] is not a }SONAzray.");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertFalse(boolean0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      
      JSONObject jSONObject2 = jSONObject0.put("] is not a }SONAzray.", false);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject2);
      assertEquals(2, jSONObject2.length());
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.valueToString(jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(string0);
      assertEquals("{\"Expected a ',' or '}'\":[\"] is not a }SONAzray.\"],\"] is not a }SONAzray.\":false}", string0);
      assertEquals(2, jSONObject2.length());
      assertEquals(2, jSONObject0.length());
  }

  //Test case number: 40
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;J)Lwheel/json/JSONObject;: root-Branch
   */

  @Test
  public void test40()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("A JSONObject text must end with '}'", (long) 7417);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
  }

  //Test case number: 41
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I6 Branch 52 IFNONNULL L568 - false
   */

  @Test
  public void test41()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  //Test case number: 42
  @Test
  public void test42()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      try {
        JSONObject jSONObject1 = jSONObject0.getJSONObject("Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Y\"] not found.
         //
      }
  }

  //Test case number: 43
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 69 IFNONNULL L975 - false
   */

  @Test
  public void test43()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      String[] stringArray0 = new String[7];
      try {
        JSONObject jSONObject1 = jSONObject0.append(stringArray0[0], (Object) jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
      }
  }

  //Test case number: 44
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/lang/Object;[Ljava/lang/String;)V: I20 Branch 25 IF_ICMPGE L304 - true
   * Goal 2. wheel.json.JSONObject.<init>(Ljava/lang/Object;[Ljava/lang/String;)V: I20 Branch 25 IF_ICMPGE L304 - false
   */

  @Test
  public void test44()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 45
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I11 Branch 50 IFNE L548 - true
   * Goal 2. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I37 Branch 51 IFEQ L554 - true
   * Goal 3. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I37 Branch 51 IFEQ L554 - false
   */

  @Test
  public void test45()  throws Throwable  {
      TaggedWord taggedWord0 = new TaggedWord();
      assertNotNull(taggedWord0);
      assertNull(taggedWord0.value());
      assertNull(taggedWord0.tag());
      assertNull(taggedWord0.word());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals(-1, taggedWord0.beginPosition());
      
      WordTag wordTag0 = new WordTag(taggedWord0);
      assertNotNull(wordTag0);
      assertNull(wordTag0.tag());
      assertNull(wordTag0.word());
      assertNull(wordTag0.value());
      assertNull(taggedWord0.value());
      assertNull(taggedWord0.tag());
      assertNull(taggedWord0.word());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals(-1, taggedWord0.beginPosition());
      
      JSONObject jSONObject0 = new JSONObject((Object) wordTag0);
      assertNotNull(jSONObject0);
      assertNull(wordTag0.tag());
      assertNull(wordTag0.word());
      assertNull(wordTag0.value());
      assertNull(taggedWord0.value());
      assertNull(taggedWord0.tag());
      assertNull(taggedWord0.word());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals(1, jSONObject0.length());
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertNull(wordTag0.tag());
      assertNull(wordTag0.word());
      assertNull(wordTag0.value());
      assertNull(taggedWord0.value());
      assertNull(taggedWord0.tag());
      assertNull(taggedWord0.word());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals(1, jSONObject0.length());
  }

  //Test case number: 46
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.optJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 66 IFEQ L829 - true
   * Goal 2. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I12 Branch 74 IFNE L1015 - false
   */

  @Test
  public void test46()  throws Throwable  {
      HashMap<CategoryWordTag, Boolean> hashMap0 = new HashMap<CategoryWordTag, Boolean>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject1 = jSONObject0.optJSONObject("#\"_I!>e{vwc?3sM");
      assertNull(jSONObject1);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      try {
        double double0 = jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
      }
  }

  //Test case number: 47
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I45 Branch 60 IFGE L670 - false
   * Goal 2. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I54 Branch 61 IFLE L671 - true
   * Goal 3. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I54 Branch 61 IFLE L671 - false
   * Goal 4. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I77 Branch 62 IFLE L674 - false
   */

  @Test
  public void test47()  throws Throwable  {
      Tag tag0 = new Tag();
      assertNotNull(tag0);
      assertEquals(-1, tag0.beginPosition());
      assertNull(tag0.tag());
      assertNull(tag0.value());
      assertEquals(-1, tag0.endPosition());
      
      JSONObject jSONObject0 = new JSONObject((Object) tag0);
      assertNotNull(jSONObject0);
      assertEquals(-1, tag0.beginPosition());
      assertNull(tag0.tag());
      assertNull(tag0.value());
      assertEquals(-1, tag0.endPosition());
      assertEquals(1, jSONObject0.length());
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01D);
      
      JSONObject jSONObject1 = jSONObject0.put("00", (Object) double0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      assertEquals(2, jSONObject1.length());
      assertEquals(-1, tag0.beginPosition());
      assertNull(tag0.tag());
      assertNull(tag0.value());
      assertEquals(-1, tag0.endPosition());
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.valueToString(jSONObject1, (-972), (-972));
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(string0);
      assertEquals("{\n\"00\": 0,\n\"class\": \"class edu.stanford.nlp.ling.Tag\"\n}", string0);
      assertEquals(2, jSONObject1.length());
      assertEquals(-1, tag0.beginPosition());
      assertNull(tag0.tag());
      assertNull(tag0.value());
      assertEquals(-1, tag0.endPosition());
      assertEquals(2, jSONObject0.length());
  }

  //Test case number: 48
  /*
   * 6 covered goals:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I31 Branch 58 IFLE L670 - false
   * Goal 2. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I38 Branch 59 IFGE L670 - false
   * Goal 3. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I45 Branch 60 IFGE L670 - true
   * Goal 4. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I45 Branch 95 IFEQ L1094 - false
   * Goal 5. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I54 Branch 96 IFNE L1095 - false
   * Goal 6. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I61 Branch 97 IFEQ L1095 - true
   */

  @Test
  public void test48()  throws Throwable  {
      float float0 = Float.MAX_VALUE;
      assertEquals(3.4028235E38F, float0, 0.01F);
      
      String string0 = JSONObject.numberToString((Number) 3.4028235E38F);
      assertNotNull(string0);
      assertEquals("3.4028235E38", string0);
  }

  //Test case number: 49
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.optInt(Ljava/lang/String;I)I: root-Branch
   * Goal 2. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 78 LOOKUPSWITCH L1030 Case 10 - true
   */

  @Test
  public void test49()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      int int0 = jSONObject0.optInt(",\n", 0);
      assertEquals(0, int0);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 50
  /*
   * 13 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/util/Map;)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I11 Branch 103 IFNE L1190 - false
   * Goal 3. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I41 Branch 104 IF_ICMPNE L1197 - true
   * Goal 4. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I84 Branch 105 IFEQ L1204 - true
   * Goal 5. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I84 Branch 105 IFEQ L1204 - false
   * Goal 6. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I98 Branch 106 IF_ICMPLE L1206 - true
   * Goal 7. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I98 Branch 106 IF_ICMPLE L1206 - false
   * Goal 8. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I125 Branch 107 IF_ICMPGE L1211 - true
   * Goal 9. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I177 Branch 108 IF_ICMPLE L1219 - false
   * Goal 10. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I194 Branch 109 IF_ICMPGE L1221 - true
   * Goal 11. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I89 Branch 127 IFEQ L1323 - false
   * Goal 12. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I140 Branch 130 IFEQ L1332 - true
   * Goal 13. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I160 Branch 131 IFEQ L1335 - true
   */

  @Test
  public void test50()  throws Throwable  {
      String[] stringArray0 = new String[3];
      CoreLabel coreLabel0 = new CoreLabel(stringArray0, stringArray0);
      assertNotNull(coreLabel0);
      assertEquals(-1, coreLabel0.sentIndex());
      assertNull(coreLabel0.tag());
      assertNull(coreLabel0.word());
      assertEquals(0, coreLabel0.size());
      assertNull(coreLabel0.ner());
      assertEquals(-1, coreLabel0.index());
      assertEquals("", coreLabel0.originalText());
      assertEquals("", coreLabel0.before());
      assertNull(coreLabel0.value());
      assertEquals(-1, coreLabel0.endPosition());
      assertNull(coreLabel0.category());
      assertEquals("", coreLabel0.after());
      assertEquals(0, coreLabel0.copyCount());
      assertNull(coreLabel0.docID());
      assertEquals(-1, coreLabel0.beginPosition());
      assertNull(coreLabel0.lemma());
      
      JSONObject jSONObject0 = new JSONObject((Object) coreLabel0);
      assertNotNull(jSONObject0);
      assertEquals(-1, coreLabel0.sentIndex());
      assertNull(coreLabel0.tag());
      assertNull(coreLabel0.word());
      assertEquals(0, coreLabel0.size());
      assertNull(coreLabel0.ner());
      assertEquals(-1, coreLabel0.index());
      assertEquals("", coreLabel0.originalText());
      assertEquals("", coreLabel0.before());
      assertNull(coreLabel0.value());
      assertEquals(-1, coreLabel0.endPosition());
      assertNull(coreLabel0.category());
      assertEquals("", coreLabel0.after());
      assertEquals(0, coreLabel0.copyCount());
      assertNull(coreLabel0.docID());
      assertEquals(-1, coreLabel0.beginPosition());
      assertNull(coreLabel0.lemma());
      assertEquals(1, jSONObject0.length());
      
      HashMap<Tag, Object> hashMap0 = new HashMap<Tag, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("CORE: CoreLabel.initFromStrings: Bad type for ", (Map) hashMap0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(-1, coreLabel0.sentIndex());
      assertNull(coreLabel0.tag());
      assertNull(coreLabel0.word());
      assertEquals(0, coreLabel0.size());
      assertNull(coreLabel0.ner());
      assertEquals(-1, coreLabel0.index());
      assertEquals("", coreLabel0.originalText());
      assertEquals("", coreLabel0.before());
      assertNull(coreLabel0.value());
      assertEquals(-1, coreLabel0.endPosition());
      assertNull(coreLabel0.category());
      assertEquals("", coreLabel0.after());
      assertEquals(0, coreLabel0.copyCount());
      assertNull(coreLabel0.docID());
      assertEquals(-1, coreLabel0.beginPosition());
      assertNull(coreLabel0.lemma());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = jSONObject1.toString((-2799));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(string0);
      assertEquals("{\n\"CORE: CoreLabel.initFromStrings: Bad type for \": {},\n\"class\": \"class edu.stanford.nlp.ling.CoreLabel\"\n}", string0);
      assertEquals(-1, coreLabel0.sentIndex());
      assertNull(coreLabel0.tag());
      assertNull(coreLabel0.word());
      assertEquals(0, coreLabel0.size());
      assertNull(coreLabel0.ner());
      assertEquals(-1, coreLabel0.index());
      assertEquals("", coreLabel0.originalText());
      assertEquals("", coreLabel0.before());
      assertNull(coreLabel0.value());
      assertEquals(-1, coreLabel0.endPosition());
      assertNull(coreLabel0.category());
      assertEquals("", coreLabel0.after());
      assertEquals(0, coreLabel0.copyCount());
      assertNull(coreLabel0.docID());
      assertEquals(-1, coreLabel0.beginPosition());
      assertNull(coreLabel0.lemma());
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  //Test case number: 51
  /*
   * 6 covered goals:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I62 Branch 125 IFEQ L1317 - true
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I76 Branch 126 IFEQ L1320 - true
   * Goal 3. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I89 Branch 127 IFEQ L1323 - true
   * Goal 4. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I105 Branch 128 IFEQ L1326 - true
   * Goal 5. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I121 Branch 129 IFEQ L1329 - true
   * Goal 6. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I140 Branch 130 IFEQ L1332 - false
   */

  @Test
  public void test51()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = JSONObject.valueToString(linkedList0, (-2812), (-2812));
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertEquals(0, linkedList0.size());
  }

  //Test case number: 52
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I6 Branch 121 IFNULL L1304 - true
   */

  @Test
  public void test52()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-1733), (-1733));
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  //Test case number: 53
  /*
   * 5 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;D)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.getJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 48 IFEQ L517 - true
   * Goal 3. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I14 Branch 92 IFEQ L1089 - false
   * Goal 4. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I23 Branch 93 IFNE L1090 - false
   * Goal 5. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I30 Branch 94 IFEQ L1090 - true
   */

  @Test
  public void test53()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
      
      JSONObject jSONObject0 = new JSONObject(object0);
      assertNotNull(jSONObject0);
      assertEquals(1, jSONObject0.length());
      
      Long long0 = new Long(1000000L);
      assertEquals(1000000L, (long)long0);
      
      JSONObject jSONObject1 = jSONObject0.put("issetBeginPosition", (double) long0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      
      try {
        JSONObject jSONObject2 = jSONObject1.getJSONObject("issetBeginPosition");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"issetBeginPosition\"] is not a JSONObject.
         //
      }
  }

  //Test case number: 54
  /*
   * 9 covered goals:
   * Goal 1. wheel.json.JSONObject.remove(Ljava/lang/String;)Ljava/lang/Object;: root-Branch
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONObject;[Ljava/lang/String;)V: I15 Branch 3 IF_ICMPGE L162 - true
   * Goal 3. wheel.json.JSONObject.<init>(Lwheel/json/JSONObject;[Ljava/lang/String;)V: I15 Branch 3 IF_ICMPGE L162 - false
   * Goal 4. wheel.json.JSONObject.opt(Ljava/lang/String;)Ljava/lang/Object;: I6 Branch 63 IFNONNULL L688 - false
   * Goal 5. wheel.json.JSONObject.optJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 65 IFEQ L815 - true
   * Goal 6. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I20 Branch 70 IFNULL L978 - true
   * Goal 7. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 71 IFNULL L999 - true
   * Goal 8. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I11 Branch 72 IFNULL L999 - true
   * Goal 9. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I6 Branch 91 IFNULL L1088 - true
   */

  @Test
  public void test54()  throws Throwable  {
      HashMap<LabeledWord, WordLemmaTag> hashMap0 = new HashMap<LabeledWord, WordLemmaTag>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONArray jSONArray0 = jSONObject0.optJSONArray("\"(s!Z8Pdk!QC;Am4)Y");
      assertNull(jSONArray0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\"(s!Z8Pdk!QC;Am4)Y";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotNull(jSONObject1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, jSONObject1.length());
      
      JSONObject jSONObject2 = jSONObject0.accumulate("\"(s!Z8Pdk!QC;Am4)Y", (Object) null);
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertNotNull(jSONObject2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, jSONObject2.length());
  }

  //Test case number: 55
  /*
   * 17 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I33 Branch 17 IF_ICMPGE L263 - true
   * Goal 2. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I33 Branch 17 IF_ICMPGE L263 - false
   * Goal 3. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I58 Branch 18 IFLE L268 - true
   * Goal 4. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I58 Branch 18 IFLE L268 - false
   * Goal 5. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I78 Branch 19 IFLE L270 - true
   * Goal 6. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I78 Branch 19 IFLE L270 - false
   * Goal 7. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I92 Branch 20 IFLE L273 - true
   * Goal 8. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I92 Branch 20 IFLE L273 - false
   * Goal 9. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I100 Branch 21 IFEQ L273 - false
   * Goal 10. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I107 Branch 22 IFNE L273 - true
   * Goal 11. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I107 Branch 22 IFNE L273 - false
   * Goal 12. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I116 Branch 23 IF_ICMPNE L276 - true
   * Goal 13. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I135 Branch 24 IFNE L278 - false
   * Goal 14. wheel.json.JSONObject.getDouble(Ljava/lang/String;)D: I13 Branch 45 IFEQ L463 - true
   * Goal 15. wheel.json.JSONObject.getLong(Ljava/lang/String;)J: I13 Branch 49 IFEQ L536 - true
   * Goal 16. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 71 IFNULL L999 - false
   * Goal 17. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I11 Branch 72 IFNULL L999 - false
   */

  @Test
  public void test55()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "9");
      assertNotNull(jSONObject0);
      assertEquals(3, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("9", false);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      assertEquals(4, jSONObject1.length());
      assertEquals(4, jSONObject0.length());
      
      long long0 = jSONObject1.optLong("9");
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0L, long0);
      assertEquals(4, jSONObject1.length());
      assertEquals(4, jSONObject0.length());
      
      JSONObject jSONObject2 = jSONObject0.putOpt("9", (Object) "9");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNotNull(jSONObject2);
      assertEquals(4, jSONObject0.length());
      assertEquals(4, jSONObject2.length());
  }

  //Test case number: 56
  /*
   * 22 covered goals:
   * Goal 1. wheel.json.JSONObject.optBoolean(Ljava/lang/String;Z)Z: root-Branch
   * Goal 2. wheel.json.JSONObject.optBoolean(Ljava/lang/String;)Z: root-Branch
   * Goal 3. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 26 IFNONNULL L346 - true
   * Goal 4. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I52 Branch 28 IFEQ L350 - false
   * Goal 5. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 29 IFNONNULL L374 - false
   * Goal 6. wheel.json.JSONObject.put(Ljava/lang/String;Z)Lwheel/json/JSONObject;: I8 Branch 68 IFEQ L902 - true
   * Goal 7. wheel.json.JSONObject.put(Ljava/lang/String;Z)Lwheel/json/JSONObject;: I8 Branch 68 IFEQ L902 - false
   * Goal 8. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 81 LOOKUPSWITCH L1030 Case 34 - true
   * Goal 9. wheel.json.JSONObject.toString()Ljava/lang/String;: I19 Branch 101 IFEQ L1140 - true
   * Goal 10. wheel.json.JSONObject.toString()Ljava/lang/String;: I19 Branch 101 IFEQ L1140 - false
   * Goal 11. wheel.json.JSONObject.toString()Ljava/lang/String;: I28 Branch 102 IF_ICMPLE L1141 - true
   * Goal 12. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I6 Branch 110 IFNULL L1253 - false
   * Goal 13. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I13 Branch 111 IFEQ L1253 - true
   * Goal 14. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I25 Branch 112 IFEQ L1256 - true
   * Goal 15. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I82 Branch 114 IFEQ L1268 - true
   * Goal 16. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I96 Branch 115 IFNE L1271 - false
   * Goal 17. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I102 Branch 116 IFNE L1271 - false
   * Goal 18. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I108 Branch 117 IFEQ L1271 - true
   * Goal 19. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I108 Branch 117 IFEQ L1271 - false
   * Goal 20. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I121 Branch 118 IFEQ L1275 - true
   * Goal 21. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I138 Branch 119 IFEQ L1278 - true
   * Goal 22. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I156 Branch 120 IFEQ L1281 - true
   */

  @Test
  public void test56()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.append("] is not a }SONAzray.", (Object) "] is not a }SONAzray.");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      
      String string0 = jSONObject1.toString();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(string0);
      assertEquals("{\"] is not a }SONAzray.\":[\"] is not a }SONAzray.\"]}", string0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      
      Tag tag0 = new Tag("] is not a }SONAzray.");
      assertNotNull(tag0);
      assertEquals("] is not a }SONAzray.", tag0.tag());
      assertEquals(-1, tag0.endPosition());
      assertEquals("] is not a }SONAzray.", tag0.value());
      assertEquals(-1, tag0.beginPosition());
      
      boolean boolean0 = jSONObject0.optBoolean("{\"] is not a }SONAzray.\":[\"] is not a }SONAzray.\"]}");
      assertSame(jSONObject0, jSONObject1);
      assertFalse(boolean0);
      assertEquals(1, jSONObject0.length());
      
      JSONObject jSONObject2 = jSONObject0.accumulate("] is not a }SONAzray.", (Object) tag0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertNotNull(jSONObject2);
      assertEquals(1, jSONObject2.length());
      assertEquals("] is not a }SONAzray.", tag0.tag());
      assertEquals(-1, tag0.endPosition());
      assertEquals("] is not a }SONAzray.", tag0.value());
      assertEquals(-1, tag0.beginPosition());
      assertEquals(1, jSONObject0.length());
      
      JSONObject jSONObject3 = jSONObject2.put("] is not a }SONAzray.", false);
      assertSame(jSONObject2, jSONObject3);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject0);
      assertNotNull(jSONObject3);
      assertEquals(1, jSONObject2.length());
      assertEquals("] is not a }SONAzray.", tag0.tag());
      assertEquals(-1, tag0.endPosition());
      assertEquals("] is not a }SONAzray.", tag0.value());
      assertEquals(-1, tag0.beginPosition());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject3.length());
      
      JSONObject jSONObject4 = jSONObject3.put("] is not a }SONAzray.", true);
      assertSame(jSONObject2, jSONObject4);
      assertSame(jSONObject2, jSONObject3);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject4);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject4);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject4, jSONObject0);
      assertSame(jSONObject4, jSONObject1);
      assertSame(jSONObject4, jSONObject3);
      assertSame(jSONObject4, jSONObject2);
      assertNotNull(jSONObject4);
      assertEquals(1, jSONObject2.length());
      assertEquals("] is not a }SONAzray.", tag0.tag());
      assertEquals(-1, tag0.endPosition());
      assertEquals("] is not a }SONAzray.", tag0.value());
      assertEquals(-1, tag0.beginPosition());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject3.length());
      assertEquals(1, jSONObject4.length());
  }

  //Test case number: 57
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/util/Map;)V: I11 Branch 16 IFNONNULL L234 - false
   */

  @Test
  public void test57()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 58
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 26 IFNONNULL L346 - false
   * Goal 2. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I26 Branch 27 IFEQ L347 - true
   */

  @Test
  public void test58()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.accumulate("+ `M5hm[Q~", (Object) jSONObject0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
  }

  //Test case number: 59
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/util/Map;)V: I11 Branch 16 IFNONNULL L234 - true
   * Goal 2. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 29 IFNONNULL L374 - true
   * Goal 3. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I39 Branch 30 IFEQ L376 - true
   */

  @Test
  public void test59()  throws Throwable  {
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("_54C+*TH,CN", (Object) "_54C+*TH,CN");
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      try {
        JSONObject jSONObject2 = jSONObject0.append("_54C+*TH,CN", (Object) "_54C+*TH,CN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[_54C+*TH,CN] is not a JSONArray.
         //
      }
  }

  //Test case number: 60
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/lang/String;)V: root-Branch
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I12 Branch 4 IF_ICMPEQ L178 - false
   */

  @Test
  public void test60()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("Unterminated string");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Unterminated string
         //
      }
  }

  //Test case number: 61
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I6 Branch 1 IFNULL L115 - true
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I13 Branch 122 IFEQ L1304 - false
   */

  @Test
  public void test61()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
      
      String string0 = JSONObject.valueToString(object0, 1922, 1922);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  //Test case number: 62
  /*
   * 43 covered goals:
   * Goal 1. wheel.json.JSONObject.keys()Ljava/util/Iterator;: root-Branch
   * Goal 2. wheel.json.JSONObject.<init>()V: root-Branch
   * Goal 3. wheel.json.JSONObject.optLong(Ljava/lang/String;J)J: root-Branch
   * Goal 4. wheel.json.JSONObject.put(Ljava/lang/String;I)Lwheel/json/JSONObject;: root-Branch
   * Goal 5. wheel.json.JSONObject.length()I: root-Branch
   * Goal 6. wheel.json.JSONObject.optLong(Ljava/lang/String;)J: root-Branch
   * Goal 7. wheel.json.JSONObject.toString(I)Ljava/lang/String;: root-Branch
   * Goal 8. wheel.json.JSONObject.get(Ljava/lang/String;)Ljava/lang/Object;: I12 Branch 38 IFNONNULL L421 - true
   * Goal 9. wheel.json.JSONObject.get(Ljava/lang/String;)Ljava/lang/Object;: I12 Branch 38 IFNONNULL L421 - false
   * Goal 10. wheel.json.JSONObject.getDouble(Ljava/lang/String;)D: I13 Branch 45 IFEQ L463 - false
   * Goal 11. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I6 Branch 57 IFNONNULL L662 - true
   * Goal 12. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I31 Branch 58 IFLE L670 - true
   * Goal 13. wheel.json.JSONObject.opt(Ljava/lang/String;)Ljava/lang/Object;: I6 Branch 63 IFNONNULL L688 - true
   * Goal 14. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 69 IFNONNULL L975 - true
   * Goal 15. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I20 Branch 70 IFNULL L978 - false
   * Goal 16. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I6 Branch 73 IFNULL L1015 - false
   * Goal 17. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I12 Branch 74 IFNE L1015 - true
   * Goal 18. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I51 Branch 75 IF_ICMPGE L1027 - true
   * Goal 19. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I51 Branch 75 IF_ICMPGE L1027 - false
   * Goal 20. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 76 LOOKUPSWITCH L1030 Case 8 - false
   * Goal 21. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 77 LOOKUPSWITCH L1030 Case 9 - false
   * Goal 22. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 78 LOOKUPSWITCH L1030 Case 10 - false
   * Goal 23. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 79 LOOKUPSWITCH L1030 Case 12 - false
   * Goal 24. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 80 LOOKUPSWITCH L1030 Case 13 - false
   * Goal 25. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 81 LOOKUPSWITCH L1030 Case 34 - false
   * Goal 26. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 82 LOOKUPSWITCH L1030 Case 47 - true
   * Goal 27. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 82 LOOKUPSWITCH L1030 Case 47 - false
   * Goal 28. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 83 LOOKUPSWITCH L1030 Case 92 - false
   * Goal 29. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 84 LOOKUPSWITCH L1030 Default-Case - true
   * Goal 30. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 84 LOOKUPSWITCH L1030 Default-Case - false
   * Goal 31. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I91 Branch 85 IF_ICMPNE L1037 - true
   * Goal 32. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I177 Branch 86 IF_ICMPLT L1058 - false
   * Goal 33. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I183 Branch 87 IF_ICMPLT L1058 - true
   * Goal 34. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I196 Branch 89 IF_ICMPLT L1058 - true
   * Goal 35. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I6 Branch 91 IFNULL L1088 - false
   * Goal 36. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I14 Branch 92 IFEQ L1089 - true
   * Goal 37. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I45 Branch 95 IFEQ L1094 - true
   * Goal 38. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I11 Branch 103 IFNE L1190 - true
   * Goal 39. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I41 Branch 104 IF_ICMPNE L1197 - false
   * Goal 40. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I6 Branch 121 IFNULL L1304 - false
   * Goal 41. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I13 Branch 122 IFEQ L1304 - true
   * Goal 42. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I25 Branch 123 IFEQ L1308 - true
   * Goal 43. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I62 Branch 125 IFEQ L1317 - false
   */

  @Test
  public void test62()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      long long0 = jSONObject0.optLong(" phkasal cat/gory ypes, ");
      assertEquals(0L, long0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put(" phkasal cat/gory ypes, ", 1922);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      
      String string0 = jSONObject1.toString(1922);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(string0);
      assertEquals("{\" phkasal cat/gory ypes, \": 1922}", string0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      
      double double0 = jSONObject1.getDouble(" phkasal cat/gory ypes, ");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1922.0, double0, 0.01D);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
  }
}
