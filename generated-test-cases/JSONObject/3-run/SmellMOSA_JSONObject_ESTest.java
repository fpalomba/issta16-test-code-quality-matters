/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 18 02:44:33 GMT 2015
 */

package wheel.json;

import static org.junit.Assert.*;
import org.junit.Test;
import edu.stanford.nlp.ling.CategoryWordTag;
import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.ling.IndexedWord;
import edu.stanford.nlp.ling.Label;
import edu.stanford.nlp.ling.LabeledWord;
import edu.stanford.nlp.ling.StringLabel;
import edu.stanford.nlp.ling.Tag;
import edu.stanford.nlp.ling.TaggedWord;
import edu.stanford.nlp.ling.TaggedWordFactory;
import edu.stanford.nlp.ling.Word;
import edu.stanford.nlp.ling.WordLemmaTag;
import edu.stanford.nlp.ling.WordTag;
import edu.stanford.nlp.process.CoreLabelTokenFactory;
import edu.stanford.nlp.util.HasInterval;
import edu.stanford.nlp.util.HashIndex;
import edu.stanford.nlp.util.HashableCoreMap;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 66 IFEQ L829 - false
   */

  @Test
  public void test00()  throws Throwable  {
      HashMap<Byte, IndexedWord> hashMap0 = new HashMap<Byte, IndexedWord>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      HashMap<IndexedWord, Integer> hashMap1 = new HashMap<IndexedWord, Integer>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      JSONObject jSONObject1 = jSONObject0.put("N(=,6Q%", (Map) hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      JSONObject jSONObject2 = jSONObject1.optJSONObject("N(=,6Q%");
      assertEquals(0, jSONObject2.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject2);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I11 Branch 50 IFNE L548 - false
   */

  @Test
  public void test01()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertNull(stringArray0);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 48 IFEQ L517 - true
   */

  @Test
  public void test02()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("W0", true);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      try {
        JSONObject jSONObject2 = jSONObject1.getJSONObject("W0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"W0\"] is not a JSONObject.
         //
      }
  }

  //Test case number: 3
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I12 Branch 99 IFNE L1113 - true
   * Goal 2. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I34 Branch 100 IF_ICMPGE L1117 - true
   * Goal 3. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I34 Branch 100 IF_ICMPGE L1117 - false
   */

  @Test
  public void test03()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      JSONObject jSONObject1 = jSONObject0.put("=d3jLG", (Collection) linkedHashSet0);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      JSONArray jSONArray0 = jSONObject1.getJSONArray("=d3jLG");
      assertEquals(0, jSONArray0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(jSONArray0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      JSONArray jSONArray1 = jSONArray0.put(true);
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(jSONArray1);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      JSONArray jSONArray2 = jSONObject1.toJSONArray(jSONArray1);
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONArray2.length());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(jSONArray2);
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray2));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray1);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I41 Branch 104 IF_ICMPNE L1197 - false
   */

  @Test
  public void test04()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("eaf value=L\"", (Object) jSONObject0);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      // Undeclared exception!
      try {
        String string0 = JSONObject.valueToString(jSONObject0, (-1399), (-1399));
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I6 Branch 57 IFNONNULL L662 - false
   */

  @Test
  public void test05()  throws Throwable  {
      try {
        String string0 = JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
      }
  }

  //Test case number: 6
  /*
   * 9 covered goals:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 76 LOOKUPSWITCH L1030 Case 8 - true
   * Goal 2. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 77 LOOKUPSWITCH L1030 Case 9 - true
   * Goal 3. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 79 LOOKUPSWITCH L1030 Case 12 - true
   * Goal 4. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 80 LOOKUPSWITCH L1030 Case 13 - true
   * Goal 5. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I177 Branch 86 IF_ICMPLT L1058 - true
   * Goal 6. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I183 Branch 87 IF_ICMPLT L1058 - false
   * Goal 7. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I189 Branch 88 IF_ICMPLT L1058 - false
   * Goal 8. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I196 Branch 89 IF_ICMPLT L1058 - false
   * Goal 9. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I202 Branch 90 IF_ICMPGE L1058 - true
   */

  @Test
  public void test06()  throws Throwable  {
      String string0 = JSONObject.quote("\t\u0000\u0001 \u0001 \u0001 \u0001 \u0001 \u0012\u0000\u0001 \u0003\u0000\u0001$\u0002\u0000\u0001\"\u0003\u0000\u0001\u0001\u0001\u0000\u0001\u001F\u0001#\u0001\u0000\n\u0001\u0007\u0000\u0001&\u0001\u0005\u0001\u0006\u0001%\u0001\u001A\u0001\b\u0001\t\u0001\n\u0001\u001C\u0001\u000B\u0001\r\u0001\u000E\u0001\u000F\u0001\u0010\u0001\u001D\u0001'\u0001\u0012\u0001\u0013\u0001\u0015\u0001\u0016\u0001\u0002\u0001\u0017\u0001\u0018\u0001\u0019\u0001\u0003\u0001\u0004\u0004\u0000\u0001\u001E\u0001\u0000\u0001!\u0001\u0005\u0001\u0006\u0001\u0007\u0001\u001A\u0001\b\u0001\t\u0001\n\u0001\u001C\u0001\u000B\u0001\r\u0001\u000E\u0001\u000F\u0001\u0010\u0001\u001D\u0001\u0011\u0001\u0012\u0001\u0013\u0001\u0015\u0001\u0016\u0001\u0002\u0001\u0017\u0001\u0018\u0001\u0019\u0001\u0003\u0001\u0004\n\u0000\u0001 \u00AA\u0000\u0002\u001BM\u0000\u0001\u0014\u1EA8\u0000\u0001 \u0001 \u0100\u0000\u0001\f\uDED5\u0000");
      assertNotNull(string0);
      assertEquals("\"\\t\\u0000\\u0001 \\u0001 \\u0001 \\u0001 \\u0001 \\u0012\\u0000\\u0001 \\u0003\\u0000\\u0001$\\u0002\\u0000\\u0001\\\"\\u0003\\u0000\\u0001\\u0001\\u0001\\u0000\\u0001\\u001f\\u0001#\\u0001\\u0000\\n\\u0001\\u0007\\u0000\\u0001&\\u0001\\u0005\\u0001\\u0006\\u0001%\\u0001\\u001a\\u0001\\b\\u0001\\t\\u0001\\n\\u0001\\u001c\\u0001\\u000b\\u0001\\r\\u0001\\u000e\\u0001\\u000f\\u0001\\u0010\\u0001\\u001d\\u0001'\\u0001\\u0012\\u0001\\u0013\\u0001\\u0015\\u0001\\u0016\\u0001\\u0002\\u0001\\u0017\\u0001\\u0018\\u0001\\u0019\\u0001\\u0003\\u0001\\u0004\\u0004\\u0000\\u0001\\u001e\\u0001\\u0000\\u0001!\\u0001\\u0005\\u0001\\u0006\\u0001\\u0007\\u0001\\u001a\\u0001\\b\\u0001\\t\\u0001\\n\\u0001\\u001c\\u0001\\u000b\\u0001\\r\\u0001\\u000e\\u0001\\u000f\\u0001\\u0010\\u0001\\u001d\\u0001\\u0011\\u0001\\u0012\\u0001\\u0013\\u0001\\u0015\\u0001\\u0016\\u0001\\u0002\\u0001\\u0017\\u0001\\u0018\\u0001\\u0019\\u0001\\u0003\\u0001\\u0004\\n\\u0000\\u0001 \u00AA\\u0000\\u0002\\u001bM\\u0000\\u0001\\u0014\u1EA8\\u0000\\u0001 \\u0001 \u0100\\u0000\\u0001\\f\uDED5\\u0000\"", string0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I45 Branch 60 IFGE L670 - true
   */

  @Test
  public void test07()  throws Throwable  {
      double double0 = Double.MAX_VALUE;
      assertEquals(1.7976931348623157E308, double0, 0.01D);
      
      String string0 = JSONObject.numberToString((Number) 1.7976931348623157E308);
      assertNotNull(string0);
      assertEquals("1.7976931348623157E308", string0);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I121 Branch 118 IFEQ L1275 - false
   */

  @Test
  public void test08()  throws Throwable  {
      HashMap<Object, HashableCoreMap> hashMap0 = new HashMap<Object, HashableCoreMap>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 5 LOOKUPSWITCH L183 Case 0 - true
   */

  @Test
  public void test09()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      assertTrue(jSONTokener0.more());
      assertNotNull(jSONTokener0);
      
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
      }
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject$Null.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(3198, (long) 3198);
      assertEquals(3199, jSONArray1.length());
      assertEquals(3199, jSONArray0.length());
      assertNotNull(jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray1);
      assertEquals(3199, jSONArray1.length());
      assertEquals(3199, jSONArray0.length());
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject0);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray0, jSONArray1);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I7 Branch 31 IFNE L393 - true
   */

  @Test
  public void test11()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.POSITIVE_INFINITY);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  //Test case number: 12
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I45 Branch 95 IFEQ L1094 - false
   * Goal 2. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I54 Branch 96 IFNE L1095 - false
   * Goal 3. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I61 Branch 97 IFEQ L1095 - true
   */

  @Test
  public void test12()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Float float0 = new Float((float) 78);
      assertEquals(78.0F, (float)float0, 0.01F);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("data.length                ", (Object) float0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 65 IFEQ L815 - false
   */

  @Test
  public void test13()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "0.00");
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("0.00", (Object) "0.00");
      assertEquals(4, jSONObject1.length());
      assertEquals(4, jSONObject0.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      JSONObject jSONObject2 = jSONObject1.accumulate("0.00", (Object) "0.00");
      assertEquals(4, jSONObject1.length());
      assertEquals(4, jSONObject2.length());
      assertEquals(4, jSONObject0.length());
      assertNotNull(jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      
      JSONArray jSONArray0 = jSONObject2.optJSONArray("0.00");
      assertEquals(4, jSONObject1.length());
      assertEquals(2, jSONArray0.length());
      assertEquals(4, jSONObject2.length());
      assertEquals(4, jSONObject0.length());
      assertNotNull(jSONArray0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
  }

  //Test case number: 14
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 6 LOOKUPSWITCH L183 Case 125 - true
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 7 LOOKUPSWITCH L183 Default-Case - false
   */

  @Test
  public void test14()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      assertTrue(jSONTokener0.more());
      assertNotNull(jSONTokener0);
      
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
      assertFalse(jSONTokener0.more());
      assertNotNull(jSONObject0);
  }

  //Test case number: 15
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I11 Branch 50 IFNE L548 - true
   * Goal 2. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I37 Branch 51 IFEQ L554 - true
   * Goal 3. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I37 Branch 51 IFEQ L554 - false
   */

  @Test
  public void test15()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("TgeWjin", (Object) jSONObject0);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertNotNull(stringArray0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I37 Branch 56 IFNE L651 - false
   */

  @Test
  public void test16()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I65 Branch 134 IFEQ L1365 - false
   */

  @Test
  public void test17()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      HashMap<Double, TaggedWord> hashMap0 = new HashMap<Double, TaggedWord>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject1 = jSONObject0.put("iscopyValueOf", (Map) hashMap0);
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(49);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      CharArrayWriter charArrayWriter1 = (CharArrayWriter)jSONObject0.write((Writer) charArrayWriter0);
      assertEquals("{\"iscopyValueOf\":{}}", charArrayWriter1.toString());
      assertEquals(20, charArrayWriter1.size());
      assertEquals(1, jSONObject0.length());
      assertEquals("{\"iscopyValueOf\":{}}", charArrayWriter0.toString());
      assertEquals(20, charArrayWriter0.size());
      assertNotNull(charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(charArrayWriter0, charArrayWriter1);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I52 Branch 28 IFEQ L350 - false
   */

  @Test
  public void test18()  throws Throwable  {
      LabeledWord labeledWord0 = new LabeledWord();
      assertEquals(-1, labeledWord0.beginPosition());
      assertNull(labeledWord0.word());
      assertEquals(-1, labeledWord0.endPosition());
      assertNull(labeledWord0.value());
      assertNotNull(labeledWord0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "] is not a Boolean.";
      JSONObject jSONObject0 = new JSONObject((Object) labeledWord0, stringArray0);
      assertEquals(0, jSONObject0.length());
      assertEquals(-1, labeledWord0.beginPosition());
      assertNull(labeledWord0.word());
      assertEquals(-1, labeledWord0.endPosition());
      assertNull(labeledWord0.value());
      assertNotNull(jSONObject0);
      
      TaggedWord taggedWord0 = new TaggedWord();
      assertEquals(-1, taggedWord0.endPosition());
      assertNull(taggedWord0.word());
      assertNull(taggedWord0.value());
      assertNull(taggedWord0.tag());
      assertEquals(-1, taggedWord0.beginPosition());
      assertNotNull(taggedWord0);
      
      HashIndex<HashableCoreMap> hashIndex0 = new HashIndex<HashableCoreMap>(0);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertNotNull(hashIndex0);
      
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", (Collection) hashIndex0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(-1, labeledWord0.beginPosition());
      assertNull(labeledWord0.word());
      assertEquals(-1, labeledWord0.endPosition());
      assertNull(labeledWord0.value());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONObject jSONObject2 = jSONObject1.accumulate("] is not a Boolean.", (Object) taggedWord0);
      assertEquals(1, jSONObject2.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(-1, labeledWord0.beginPosition());
      assertNull(labeledWord0.word());
      assertEquals(-1, labeledWord0.endPosition());
      assertNull(labeledWord0.value());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertEquals(-1, taggedWord0.endPosition());
      assertNull(taggedWord0.word());
      assertNull(taggedWord0.value());
      assertNull(taggedWord0.tag());
      assertEquals(-1, taggedWord0.beginPosition());
      assertNotNull(jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
  }

  //Test case number: 19
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.optDouble(Ljava/lang/String;)D: root-Branch
   * Goal 2. wheel.json.JSONObject.getJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 48 IFEQ L517 - false
   * Goal 3. wheel.json.JSONObject.optDouble(Ljava/lang/String;D)D: I13 Branch 64 IFEQ L764 - true
   */

  @Test
  public void test19()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("useNextRealWord", (Map) null);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONObject jSONObject2 = jSONObject1.getJSONObject("useNextRealWord");
      assertEquals(0, jSONObject2.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject2);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject1, jSONObject2);
      
      double double0 = jSONObject1.optDouble("useNextRealWord");
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(Double.NaN, double0, 0.01D);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject1, jSONObject2);
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 47 IFEQ L499 - false
   */

  @Test
  public void test20()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "0.00");
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("0.00", (Object) "0.00");
      assertEquals(4, jSONObject0.length());
      assertEquals(4, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONObject jSONObject2 = jSONObject1.accumulate("0.00", (Object) "0.00");
      assertEquals(4, jSONObject2.length());
      assertEquals(4, jSONObject0.length());
      assertEquals(4, jSONObject1.length());
      assertNotNull(jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.getJSONArray("0.00");
      assertEquals(4, jSONObject0.length());
      assertEquals(2, jSONArray0.length());
      assertNotNull(jSONArray0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 21
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.getDouble(Ljava/lang/String;)D: I13 Branch 45 IFEQ L463 - false
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I6 Branch 121 IFNULL L1304 - true
   */

  @Test
  public void test21()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put(" ", 16);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      double double0 = jSONObject0.getDouble(" ");
      assertEquals(1, jSONObject0.length());
      assertEquals(16.0, double0, 0.01D);
      assertSame(jSONObject0, jSONObject1);
      
      String string0 = JSONObject.valueToString((Object) null, 16, 16);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I40 Branch 53 IFNE L574 - false
   */

  @Test
  public void test22()  throws Throwable  {
      StringLabel stringLabel0 = new StringLabel((String) null);
      assertNull(stringLabel0.value());
      assertEquals(-1, stringLabel0.endPosition());
      assertEquals(-1, stringLabel0.beginPosition());
      assertNotNull(stringLabel0);
      
      String[] stringArray0 = JSONObject.getNames((Object) stringLabel0);
      assertNull(stringLabel0.value());
      assertEquals(-1, stringLabel0.endPosition());
      assertEquals(-1, stringLabel0.beginPosition());
      assertNull(stringArray0);
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I6 Branch 98 IFNULL L1113 - true
   */

  @Test
  public void test23()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.toString(I)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertEquals("byte", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      JSONObject jSONObject0 = new JSONObject((Object) class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertEquals("byte", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertEquals(30, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = jSONObject0.toString((-2011));
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertEquals("byte", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertEquals(30, jSONObject0.length());
      assertNotNull(string0);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I121 Branch 129 IFEQ L1329 - false
   */

  @Test
  public void test25()  throws Throwable  {
      HashMap<Object, StringLabel> hashMap0 = new HashMap<Object, StringLabel>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = JSONObject.valueToString(hashMap0, 112, 112);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I13 Branch 32 IFEQ L393 - false
   */

  @Test
  public void test26()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I45 Branch 35 IFGE L400 - true
   */

  @Test
  public void test27()  throws Throwable  {
      String string0 = JSONObject.doubleToString(3.0E9);
      assertNotNull(string0);
      assertEquals("3.0E9", string0);
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I13 Branch 111 IFEQ L1253 - false
   */

  @Test
  public void test28()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
      
      String string0 = JSONObject.valueToString(object0);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I140 Branch 130 IFEQ L1332 - false
   */

  @Test
  public void test29()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = JSONObject.valueToString(linkedList0, 3434, 3434);
      assertEquals(0, linkedList0.size());
      assertNotNull(string0);
      assertEquals("[]", string0);
  }

  //Test case number: 30
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I20 Branch 40 IFEQ L439 - false
   * Goal 2. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I28 Branch 41 IFLE L439 - true
   * Goal 3. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I47 Branch 43 IFEQ L443 - false
   * Goal 4. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I55 Branch 44 IFLE L443 - true
   */

  @Test
  public void test30()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "=z?K;!_3K44LSx}0");
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("=z?K;!_3K44LSx}0", (Object) "=z?K;!_3K44LSx}0");
      assertEquals(4, jSONObject1.length());
      assertEquals(4, jSONObject0.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      boolean boolean0 = jSONObject0.optBoolean("=z?K;!_3K44LSx}0");
      assertEquals(4, jSONObject0.length());
      assertFalse(boolean0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 31
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I125 Branch 107 IF_ICMPGE L1211 - false
   * Goal 2. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I194 Branch 109 IF_ICMPGE L1221 - false
   * Goal 3. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I13 Branch 122 IFEQ L1304 - false
   */

  @Test
  public void test31()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("TgeWjin", object0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONObject jSONObject2 = jSONObject0.put("to", true);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject2.length());
      assertNotNull(jSONObject2);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      
      String string0 = JSONObject.valueToString(jSONObject0, 4377, 4377);
      assertEquals(2, jSONObject0.length());
      assertNotNull(string0);
      assertEquals("{\nto\": true,\ngeWjin\": null\n}", string0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 32
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I6 Branch 91 IFNULL L1088 - true
   */

  @Test
  public void test32()  throws Throwable  {
      CategoryWordTag categoryWordTag0 = new CategoryWordTag("data.length                    ", "data.length                    ", "data.length                    ");
      assertTrue(categoryWordTag0.printWordTag);
      assertFalse(categoryWordTag0.suppressTerminalDetails);
      assertEquals("data.length                    ", categoryWordTag0.tag());
      assertEquals("data.length                    ", categoryWordTag0.category());
      assertEquals("data.length                    ", categoryWordTag0.word());
      assertEquals(-1, categoryWordTag0.beginPosition());
      assertEquals(-1, categoryWordTag0.endPosition());
      assertEquals("data.length                    ", categoryWordTag0.value());
      assertNotNull(categoryWordTag0);
      
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject((Object) categoryWordTag0, stringArray0);
      assertTrue(categoryWordTag0.printWordTag);
      assertFalse(categoryWordTag0.suppressTerminalDetails);
      assertEquals("data.length                    ", categoryWordTag0.tag());
      assertEquals("data.length                    ", categoryWordTag0.category());
      assertEquals("data.length                    ", categoryWordTag0.word());
      assertEquals(-1, categoryWordTag0.beginPosition());
      assertEquals(-1, categoryWordTag0.endPosition());
      assertEquals("data.length                    ", categoryWordTag0.value());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      try {
        JSONObject jSONObject1 = jSONObject0.accumulate(stringArray0[5], (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
      }
  }

  //Test case number: 33
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I156 Branch 120 IFEQ L1281 - false
   */

  @Test
  public void test33()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "=z?K2!_3KX4LS_0");
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
      assertEquals("{\"bytes\":[61,122,63,75,50,33,95,51,75,88,52,76,83,95,48],\"class\":\"class java.lang.String\",\"empty\":false}", string0);
  }

  //Test case number: 34
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optDouble(Ljava/lang/String;D)D: I13 Branch 64 IFEQ L764 - false
   */

  @Test
  public void test34()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("data.length                   ", 4855);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      double double0 = jSONObject0.optDouble("data.length                   ", (double) 4855);
      assertEquals(1, jSONObject0.length());
      assertEquals(4855.0, double0, 0.01D);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 35
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I138 Branch 119 IFEQ L1278 - false
   */

  @Test
  public void test35()  throws Throwable  {
      LinkedList<LinkedList<String>> linkedList0 = new LinkedList<LinkedList<String>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(string0);
      assertEquals("[]", string0);
  }

  //Test case number: 36
  /*
   * 6 covered goals:
   * Goal 1. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I21 Branch 132 IFEQ L1357 - true
   * Goal 2. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I21 Branch 132 IFEQ L1357 - false
   * Goal 3. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I28 Branch 133 IFEQ L1358 - true
   * Goal 4. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I28 Branch 133 IFEQ L1358 - false
   * Goal 5. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I65 Branch 134 IFEQ L1365 - true
   * Goal 6. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I84 Branch 135 IFEQ L1367 - true
   */

  @Test
  public void test36()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("dou", (double) (-2909));
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONObject jSONObject2 = jSONObject0.put("data.length                    ", (-2909));
      assertEquals(2, jSONObject2.length());
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      
      MockFile mockFile0 = new MockFile("dou");
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("dou", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals("dou", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter((File) mockFile0, true);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("dou", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("dou", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertNotNull(mockFileWriter0);
      
      MockFileWriter mockFileWriter1 = (MockFileWriter)jSONObject0.write((Writer) mockFileWriter0);
      assertEquals(2, jSONObject0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("dou", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("dou", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertNotNull(mockFileWriter1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(mockFileWriter1, mockFileWriter0);
      assertSame(mockFileWriter0, mockFileWriter1);
  }

  //Test case number: 37
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I39 Branch 30 IFEQ L376 - true
   */

  @Test
  public void test37()  throws Throwable  {
      HashMap<LabeledWord, Class<CoreLabel.GenericAnnotation<String>>> hashMap0 = new HashMap<LabeledWord, Class<CoreLabel.GenericAnnotation<String>>>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(jSONObject0);
      
      TaggedWord taggedWord0 = new TaggedWord("K");
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("K", taggedWord0.value());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals("K", taggedWord0.word());
      assertNull(taggedWord0.tag());
      assertNotNull(taggedWord0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("K", (Object) taggedWord0);
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("K", taggedWord0.value());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals("K", taggedWord0.word());
      assertNull(taggedWord0.tag());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      try {
        JSONObject jSONObject2 = jSONObject1.append("K", (Object) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[K] is not a JSONArray.
         //
      }
  }

  //Test case number: 38
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I6 Branch 52 IFNONNULL L568 - false
   */

  @Test
  public void test38()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  //Test case number: 39
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I6 Branch 98 IFNULL L1113 - false
   * Goal 2. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I12 Branch 99 IFNE L1113 - false
   */

  @Test
  public void test39()  throws Throwable  {
      HashMap<HasInterval<Double>, Class<String>> hashMap0 = new HashMap<HasInterval<Double>, Class<String>>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      LinkedList<Tag> linkedList0 = new LinkedList<Tag>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      assertEquals(0, jSONArray0.length());
      assertEquals(0, linkedList0.size());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONArray0.length());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, linkedList0.size());
      assertNull(jSONArray1);
  }

  //Test case number: 40
  @Test
  public void test40()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("data.l%ngth           6        ", (-1421));
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      long long0 = jSONObject1.optLong("data.l%ngth           6        ");
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals((-1421L), long0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  //Test case number: 41
  @Test
  public void test41()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("data.length                 ", 4451.0498463724325);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      ArrayList<CategoryWordTag> arrayList0 = new ArrayList<CategoryWordTag>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      JSONObject jSONObject2 = jSONObject0.put("0", (Collection) arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(2, jSONObject2.length());
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      
      String string0 = JSONObject.valueToString(jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertNotNull(string0);
      assertEquals("{\"0\":[],\"data.length                 \":4451.0498463724325}", string0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 42
  /*
   * 17 covered goals:
   * Goal 1. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I11 Branch 103 IFNE L1190 - true
   * Goal 2. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I41 Branch 104 IF_ICMPNE L1197 - true
   * Goal 3. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I84 Branch 105 IFEQ L1204 - true
   * Goal 4. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I84 Branch 105 IFEQ L1204 - false
   * Goal 5. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I98 Branch 106 IF_ICMPLE L1206 - true
   * Goal 6. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I98 Branch 106 IF_ICMPLE L1206 - false
   * Goal 7. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I125 Branch 107 IF_ICMPGE L1211 - true
   * Goal 8. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I177 Branch 108 IF_ICMPLE L1219 - false
   * Goal 9. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I194 Branch 109 IF_ICMPGE L1221 - true
   * Goal 10. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I76 Branch 126 IFEQ L1320 - false
   * Goal 11. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I89 Branch 127 IFEQ L1323 - true
   * Goal 12. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I105 Branch 128 IFEQ L1326 - true
   * Goal 13. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I105 Branch 128 IFEQ L1326 - false
   * Goal 14. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I121 Branch 129 IFEQ L1329 - true
   * Goal 15. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I140 Branch 130 IFEQ L1332 - true
   * Goal 16. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I160 Branch 131 IFEQ L1335 - true
   * Goal 17. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I160 Branch 131 IFEQ L1335 - false
   */

  @Test
  public void test42()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "=z?K2!_3KX4LSx}0");
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("=z?K2!_3KX4LSx}0", (Object) "=z?K2!_3KX4LSx}0");
      assertEquals(4, jSONObject0.length());
      assertEquals(4, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONObject jSONObject2 = jSONObject1.accumulate("=z?K2!_3KX4LSx}0", (Object) "=z?K2!_3KX4LSx}0");
      assertEquals(4, jSONObject0.length());
      assertEquals(4, jSONObject2.length());
      assertEquals(4, jSONObject1.length());
      assertNotNull(jSONObject2);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      
      String string0 = JSONObject.valueToString(jSONObject0, (-2575), (-2575));
      assertEquals(4, jSONObject0.length());
      assertNotNull(string0);
      assertEquals("{\n\"=z?K2!_3KX4LSx}0\": [\n\"=z?K2!_3KX4LSx}0\",\n\"=z?K2!_3KX4LSx}0\"\n],\n\"bytes\": [\n61,\n122,\n63,\n75,\n50,\n33,\n95,\n51,\n75,\n88,\n52,\n76,\n83,\n120,\n125,\n48\n],\n\"class\": \"class java.lang.String\",\n\"empty\": false\n}", string0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 43
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I14 Branch 39 IFNE L439 - true
   */

  @Test
  public void test43()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("UkAMU,`brz-3Uv '#f", false);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      boolean boolean0 = jSONObject0.optBoolean("UkAMU,`brz-3Uv '#f");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 44
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I30 Branch 94 IFEQ L1090 - false
   */

  @Test
  public void test44()  throws Throwable  {
      LabeledWord labeledWord0 = new LabeledWord();
      assertNull(labeledWord0.value());
      assertEquals(-1, labeledWord0.endPosition());
      assertNull(labeledWord0.word());
      assertEquals(-1, labeledWord0.beginPosition());
      assertNotNull(labeledWord0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "] is not a Boolean.";
      JSONObject jSONObject0 = new JSONObject((Object) labeledWord0, stringArray0);
      assertEquals(0, jSONObject0.length());
      assertNull(labeledWord0.value());
      assertEquals(-1, labeledWord0.endPosition());
      assertNull(labeledWord0.word());
      assertEquals(-1, labeledWord0.beginPosition());
      assertNotNull(jSONObject0);
      
      try {
        JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
      }
  }

  //Test case number: 45
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I96 Branch 115 IFNE L1271 - true
   */

  @Test
  public void test45()  throws Throwable  {
      HashMap<LabeledWord, TaggedWord> hashMap0 = new HashMap<LabeledWord, TaggedWord>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", true);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      String string0 = JSONObject.valueToString(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(string0);
      assertEquals("{\"] is not a JSONObject.\":true}", string0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 46
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I14 Branch 39 IFNE L439 - false
   * Goal 2. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I20 Branch 40 IFEQ L439 - true
   * Goal 3. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I41 Branch 42 IFNE L443 - false
   * Goal 4. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I47 Branch 43 IFEQ L443 - true
   */

  @Test
  public void test46()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HashMap<Double, CoreLabel> hashMap0 = new HashMap<Double, CoreLabel>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("JIR", (-7136.700994));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      boolean boolean1 = jSONObject0.optBoolean("JIR", false);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 47
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optBoolean(Ljava/lang/String;)Z: root-Branch
   */

  @Test
  public void test47()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = jSONObject0.optBoolean("data.length                    ");
      assertEquals(0, jSONObject0.length());
      assertFalse(boolean0);
  }

  //Test case number: 48
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optInt(Ljava/lang/String;)I: root-Branch
   */

  @Test
  public void test48()  throws Throwable  {
      Byte byte0 = new Byte((byte)27);
      assertEquals((byte)27, (byte)byte0);
      
      JSONObject jSONObject0 = new JSONObject((Object) byte0);
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      int int0 = jSONObject0.optInt("in");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  //Test case number: 49
  /*
   * 5 covered goals:
   * Goal 1. wheel.json.JSONObject.length()I: root-Branch
   * Goal 2. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I11 Branch 103 IFNE L1190 - false
   * Goal 3. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I62 Branch 125 IFEQ L1317 - true
   * Goal 4. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I76 Branch 126 IFEQ L1320 - true
   * Goal 5. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I89 Branch 127 IFEQ L1323 - false
   */

  @Test
  public void test49()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = JSONObject.valueToString(jSONObject0, 2509, 2509);
      assertEquals(0, jSONObject0.length());
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  //Test case number: 50
  /*
   * 9 covered goals:
   * Goal 1. wheel.json.JSONObject.optString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I12 Branch 67 IFNULL L889 - true
   * Goal 2. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 82 LOOKUPSWITCH L1030 Case 47 - true
   * Goal 3. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I91 Branch 85 IF_ICMPNE L1037 - true
   * Goal 4. wheel.json.JSONObject.toString()Ljava/lang/String;: I19 Branch 101 IFEQ L1140 - true
   * Goal 5. wheel.json.JSONObject.toString()Ljava/lang/String;: I28 Branch 102 IF_ICMPLE L1141 - false
   * Goal 6. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I108 Branch 117 IFEQ L1271 - true
   * Goal 7. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I121 Branch 118 IFEQ L1275 - true
   * Goal 8. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I138 Branch 119 IFEQ L1278 - true
   * Goal 9. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I156 Branch 120 IFEQ L1281 - true
   */

  @Test
  public void test50()  throws Throwable  {
      TaggedWordFactory taggedWordFactory0 = new TaggedWordFactory('[');
      assertEquals(2, taggedWordFactory0.TAG_LABEL);
      assertNotNull(taggedWordFactory0);
      
      TaggedWord taggedWord0 = (TaggedWord)taggedWordFactory0.newLabel(" !< (/^VB/ < !");
      assertEquals(2, taggedWordFactory0.TAG_LABEL);
      assertEquals(" !< (/^VB/ < !", taggedWord0.word());
      assertEquals(" !< (/^VB/ < !", taggedWord0.value());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals(-1, taggedWord0.endPosition());
      assertNull(taggedWord0.tag());
      assertNotNull(taggedWord0);
      
      TaggedWord taggedWord1 = new TaggedWord((Label) taggedWord0, (Label) taggedWord0);
      assertEquals(2, taggedWordFactory0.TAG_LABEL);
      assertEquals(" !< (/^VB/ < !", taggedWord0.word());
      assertEquals(" !< (/^VB/ < !", taggedWord0.value());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals(-1, taggedWord0.endPosition());
      assertNull(taggedWord0.tag());
      assertEquals(-1, taggedWord1.beginPosition());
      assertEquals(-1, taggedWord1.endPosition());
      assertEquals(" !< (/^VB/ < !", taggedWord1.value());
      assertEquals(" !< (/^VB/ < !", taggedWord1.tag());
      assertEquals(" !< (/^VB/ < !", taggedWord1.word());
      assertNotNull(taggedWord1);
      assertTrue(taggedWord0.equals((Object)taggedWord1));
      assertTrue(taggedWord1.equals((Object)taggedWord0));
      assertNotSame(taggedWord0, taggedWord1);
      assertNotSame(taggedWord1, taggedWord0);
      
      JSONObject jSONObject0 = new JSONObject((Object) taggedWord1);
      assertEquals(2, taggedWordFactory0.TAG_LABEL);
      assertEquals(" !< (/^VB/ < !", taggedWord0.word());
      assertEquals(" !< (/^VB/ < !", taggedWord0.value());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals(-1, taggedWord0.endPosition());
      assertNull(taggedWord0.tag());
      assertEquals(1, jSONObject0.length());
      assertEquals(-1, taggedWord1.beginPosition());
      assertEquals(-1, taggedWord1.endPosition());
      assertEquals(" !< (/^VB/ < !", taggedWord1.value());
      assertEquals(" !< (/^VB/ < !", taggedWord1.tag());
      assertEquals(" !< (/^VB/ < !", taggedWord1.word());
      assertNotNull(jSONObject0);
      assertTrue(taggedWord0.equals((Object)taggedWord1));
      assertTrue(taggedWord1.equals((Object)taggedWord0));
      assertNotSame(taggedWord0, taggedWord1);
      assertNotSame(taggedWord1, taggedWord0);
      
      JSONObject jSONObject1 = jSONObject0.put("9qxi(", (Map) null);
      assertEquals(2, taggedWordFactory0.TAG_LABEL);
      assertEquals(" !< (/^VB/ < !", taggedWord0.word());
      assertEquals(" !< (/^VB/ < !", taggedWord0.value());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals(-1, taggedWord0.endPosition());
      assertNull(taggedWord0.tag());
      assertEquals(2, jSONObject0.length());
      assertEquals(-1, taggedWord1.beginPosition());
      assertEquals(-1, taggedWord1.endPosition());
      assertEquals(" !< (/^VB/ < !", taggedWord1.value());
      assertEquals(" !< (/^VB/ < !", taggedWord1.tag());
      assertEquals(" !< (/^VB/ < !", taggedWord1.word());
      assertEquals(2, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertTrue(taggedWord0.equals((Object)taggedWord1));
      assertTrue(taggedWord1.equals((Object)taggedWord0));
      assertNotSame(taggedWord0, taggedWord1);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(taggedWord1, taggedWord0);
      assertSame(jSONObject1, jSONObject0);
      
      JSONObject jSONObject2 = jSONObject1.put("A JSONObject text must begin with '{'", (Object) taggedWord0);
      assertEquals(2, taggedWordFactory0.TAG_LABEL);
      assertEquals(3, jSONObject2.length());
      assertEquals(" !< (/^VB/ < !", taggedWord0.word());
      assertEquals(" !< (/^VB/ < !", taggedWord0.value());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals(-1, taggedWord0.endPosition());
      assertNull(taggedWord0.tag());
      assertEquals(3, jSONObject0.length());
      assertEquals(-1, taggedWord1.beginPosition());
      assertEquals(-1, taggedWord1.endPosition());
      assertEquals(" !< (/^VB/ < !", taggedWord1.value());
      assertEquals(" !< (/^VB/ < !", taggedWord1.tag());
      assertEquals(" !< (/^VB/ < !", taggedWord1.word());
      assertEquals(3, jSONObject1.length());
      assertNotNull(jSONObject2);
      assertTrue(taggedWord0.equals((Object)taggedWord1));
      assertTrue(taggedWord1.equals((Object)taggedWord0));
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNotSame(taggedWord0, taggedWord1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(taggedWord1, taggedWord0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      
      String string0 = jSONObject1.toString();
      assertEquals(2, taggedWordFactory0.TAG_LABEL);
      assertEquals(" !< (/^VB/ < !", taggedWord0.word());
      assertEquals(" !< (/^VB/ < !", taggedWord0.value());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals(-1, taggedWord0.endPosition());
      assertNull(taggedWord0.tag());
      assertEquals(3, jSONObject0.length());
      assertEquals(-1, taggedWord1.beginPosition());
      assertEquals(-1, taggedWord1.endPosition());
      assertEquals(" !< (/^VB/ < !", taggedWord1.value());
      assertEquals(" !< (/^VB/ < !", taggedWord1.tag());
      assertEquals(" !< (/^VB/ < !", taggedWord1.word());
      assertEquals(3, jSONObject1.length());
      assertNotNull(string0);
      assertEquals("{\"9qxi(\":{},\"A JSONObject text must begin with '{'\":\" !< (/^VB/ < !/null\",\"class\":\"class edu.stanford.nlp.ling.TaggedWord\"}", string0);
      assertTrue(taggedWord0.equals((Object)taggedWord1));
      assertTrue(taggedWord1.equals((Object)taggedWord0));
      assertNotSame(taggedWord0, taggedWord1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(taggedWord1, taggedWord0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      
      String string1 = jSONObject2.optString(" !< (/^VB/ < !", " !< (/^VB/ < !");
      assertEquals(2, taggedWordFactory0.TAG_LABEL);
      assertEquals(3, jSONObject2.length());
      assertEquals(" !< (/^VB/ < !", taggedWord0.word());
      assertEquals(" !< (/^VB/ < !", taggedWord0.value());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals(-1, taggedWord0.endPosition());
      assertNull(taggedWord0.tag());
      assertEquals(3, jSONObject0.length());
      assertEquals(-1, taggedWord1.beginPosition());
      assertEquals(-1, taggedWord1.endPosition());
      assertEquals(" !< (/^VB/ < !", taggedWord1.value());
      assertEquals(" !< (/^VB/ < !", taggedWord1.tag());
      assertEquals(" !< (/^VB/ < !", taggedWord1.word());
      assertEquals(3, jSONObject1.length());
      assertNotNull(string1);
      assertEquals(" !< (/^VB/ < !", string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(taggedWord0.equals((Object)taggedWord1));
      assertTrue(taggedWord1.equals((Object)taggedWord0));
      assertNotSame(string1, string0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNotSame(taggedWord0, taggedWord1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(taggedWord1, taggedWord0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
  }

  //Test case number: 51
  /*
   * 6 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONObject;[Ljava/lang/String;)V: I15 Branch 3 IF_ICMPGE L162 - true
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONObject;[Ljava/lang/String;)V: I15 Branch 3 IF_ICMPGE L162 - false
   * Goal 3. wheel.json.JSONObject.<init>(Ljava/lang/Object;[Ljava/lang/String;)V: I20 Branch 25 IF_ICMPGE L304 - true
   * Goal 4. wheel.json.JSONObject.<init>(Ljava/lang/Object;[Ljava/lang/String;)V: I20 Branch 25 IF_ICMPGE L304 - false
   * Goal 5. wheel.json.JSONObject.put(Ljava/lang/String;Z)Lwheel/json/JSONObject;: I8 Branch 68 IFEQ L902 - false
   * Goal 6. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I11 Branch 72 IFNULL L999 - true
   */

  @Test
  public void test51()  throws Throwable  {
      StringLabel stringLabel0 = new StringLabel("get", 0, 0);
      assertEquals(0, stringLabel0.endPosition());
      assertEquals(0, stringLabel0.beginPosition());
      assertEquals("get", stringLabel0.value());
      assertNotNull(stringLabel0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "get";
      JSONObject jSONObject0 = new JSONObject((Object) stringLabel0, stringArray0);
      assertEquals(0, stringLabel0.endPosition());
      assertEquals(0, stringLabel0.beginPosition());
      assertEquals("get", stringLabel0.value());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
      assertEquals(0, stringLabel0.endPosition());
      assertEquals(0, stringLabel0.beginPosition());
      assertEquals("get", stringLabel0.value());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject1);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertNotSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject0, jSONObject1);
      
      try {
        JSONObject jSONObject2 = jSONObject1.put(stringArray0[4], true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
      }
  }

  //Test case number: 52
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I77 Branch 62 IFLE L674 - true
   */

  @Test
  public void test52()  throws Throwable  {
      Double double0 = new Double(925.0118524412551);
      assertEquals(925.0118524412551, (double)double0, 0.01D);
      
      String string0 = JSONObject.valueToString(double0, 98, 98);
      assertNotNull(string0);
      assertEquals("925.0118524412551", string0);
  }

  //Test case number: 53
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I12 Branch 4 IF_ICMPEQ L178 - false
   */

  @Test
  public void test53()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("data.length                    ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of data.length                    
         //
      }
  }

  //Test case number: 54
  /*
   * 5 covered goals:
   * Goal 1. wheel.json.JSONObject.optInt(Ljava/lang/String;I)I: root-Branch
   * Goal 2. wheel.json.JSONObject.getInt(Ljava/lang/String;)I: I13 Branch 46 IFEQ L484 - true
   * Goal 3. wheel.json.JSONObject.opt(Ljava/lang/String;)Ljava/lang/Object;: I6 Branch 63 IFNONNULL L688 - false
   * Goal 4. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I6 Branch 73 IFNULL L1015 - true
   * Goal 5. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 81 LOOKUPSWITCH L1030 Case 34 - true
   */

  @Test
  public void test54()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("eaf value=L\"", (Object) jSONObject0);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      int int0 = jSONObject1.optInt("eaf value=L\"", (-1399));
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals((-1399), int0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      try {
        JSONObject jSONObject2 = jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
      }
  }

  //Test case number: 55
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.optJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 65 IFEQ L815 - true
   * Goal 2. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I12 Branch 74 IFNE L1015 - false
   */

  @Test
  public void test55()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.optJSONArray("$ ");
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
      
      try {
        String string0 = jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
      }
  }

  //Test case number: 56
  /*
   * 7 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/lang/String;)V: root-Branch
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I12 Branch 4 IF_ICMPEQ L178 - true
   * Goal 3. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 5 LOOKUPSWITCH L183 Case 0 - false
   * Goal 4. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 6 LOOKUPSWITCH L183 Case 125 - false
   * Goal 5. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 7 LOOKUPSWITCH L183 Default-Case - true
   * Goal 6. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I61 Branch 8 IF_ICMPNE L198 - true
   * Goal 7. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I86 Branch 10 IF_ICMPEQ L202 - false
   */

  @Test
  public void test56()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{*K!CCGY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 8 of {*K!CCGY
         //
      }
  }

  //Test case number: 57
  /*
   * 6 covered goals:
   * Goal 1. wheel.json.JSONObject.optString(Ljava/lang/String;)Ljava/lang/String;: root-Branch
   * Goal 2. wheel.json.JSONObject.optLong(Ljava/lang/String;J)J: root-Branch
   * Goal 3. wheel.json.JSONObject.optLong(Ljava/lang/String;)J: root-Branch
   * Goal 4. wheel.json.JSONObject.getInt(Ljava/lang/String;)I: I13 Branch 46 IFEQ L484 - false
   * Goal 5. wheel.json.JSONObject.getLong(Ljava/lang/String;)J: I13 Branch 49 IFEQ L536 - false
   * Goal 6. wheel.json.JSONObject.optString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I12 Branch 67 IFNULL L889 - false
   */

  @Test
  public void test57()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put(" ", 16);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      String string0 = jSONObject1.optString(" ");
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(string0);
      assertEquals("16", string0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      long long0 = jSONObject1.optLong(" ");
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(16L, long0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      int int0 = jSONObject1.getInt(" ");
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(16, int0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 58
  /*
   * 17 covered goals:
   * Goal 1. wheel.json.JSONObject.getString(Ljava/lang/String;)Ljava/lang/String;: root-Branch
   * Goal 2. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I6 Branch 1 IFNULL L115 - false
   * Goal 3. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I12 Branch 2 IF_ACMPNE L115 - true
   * Goal 4. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 29 IFNONNULL L374 - true
   * Goal 5. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I39 Branch 30 IFEQ L376 - false
   * Goal 6. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I31 Branch 58 IFLE L670 - true
   * Goal 7. wheel.json.JSONObject.toString()Ljava/lang/String;: I19 Branch 101 IFEQ L1140 - false
   * Goal 8. wheel.json.JSONObject.toString()Ljava/lang/String;: I28 Branch 102 IF_ICMPLE L1141 - true
   * Goal 9. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I6 Branch 110 IFNULL L1253 - false
   * Goal 10. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I13 Branch 111 IFEQ L1253 - true
   * Goal 11. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I25 Branch 112 IFEQ L1256 - true
   * Goal 12. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I82 Branch 114 IFEQ L1268 - true
   * Goal 13. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I82 Branch 114 IFEQ L1268 - false
   * Goal 14. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I96 Branch 115 IFNE L1271 - false
   * Goal 15. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I102 Branch 116 IFNE L1271 - true
   * Goal 16. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I102 Branch 116 IFNE L1271 - false
   * Goal 17. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I108 Branch 117 IFEQ L1271 - false
   */

  @Test
  public void test58()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("$ ", 16);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      boolean boolean0 = jSONObject0.isNull("$ ");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
      assertSame(jSONObject0, jSONObject1);
      
      CoreLabel coreLabel0 = new CoreLabel(16);
      assertEquals(-1, coreLabel0.beginPosition());
      assertEquals(0, coreLabel0.copyCount());
      assertNull(coreLabel0.docID());
      assertNull(coreLabel0.lemma());
      assertEquals(0, coreLabel0.size());
      assertNull(coreLabel0.category());
      assertNull(coreLabel0.tag());
      assertEquals(-1, coreLabel0.index());
      assertEquals("", coreLabel0.originalText());
      assertNull(coreLabel0.ner());
      assertEquals(-1, coreLabel0.sentIndex());
      assertEquals("", coreLabel0.before());
      assertNull(coreLabel0.word());
      assertEquals(-1, coreLabel0.endPosition());
      assertNull(coreLabel0.value());
      assertEquals("", coreLabel0.after());
      assertNotNull(coreLabel0);
      
      JSONObject jSONObject2 = jSONObject0.accumulate("$ ", (Object) jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
      assertNotNull(jSONObject2);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      
      JSONObject jSONObject3 = jSONObject0.append("$ ", (Object) coreLabel0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject3.length());
      assertEquals(-1, coreLabel0.beginPosition());
      assertEquals(0, coreLabel0.copyCount());
      assertNull(coreLabel0.docID());
      assertNull(coreLabel0.lemma());
      assertEquals(0, coreLabel0.size());
      assertNull(coreLabel0.category());
      assertNull(coreLabel0.tag());
      assertEquals(-1, coreLabel0.index());
      assertEquals("", coreLabel0.originalText());
      assertNull(coreLabel0.ner());
      assertEquals(-1, coreLabel0.sentIndex());
      assertEquals("", coreLabel0.before());
      assertNull(coreLabel0.word());
      assertEquals(-1, coreLabel0.endPosition());
      assertNull(coreLabel0.value());
      assertEquals("", coreLabel0.after());
      assertNotNull(jSONObject3);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject1);
      
      // Undeclared exception!
      try {
        String string0 = jSONObject1.getString("$ ");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 59
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I54 Branch 36 IFLE L401 - false
   * Goal 2. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I77 Branch 37 IFLE L404 - false
   */

  @Test
  public void test59()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertNotNull(string0);
      assertEquals("0", string0);
  }

  //Test case number: 60
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;J)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 26 IFNONNULL L346 - false
   * Goal 3. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I26 Branch 27 IFEQ L347 - true
   * Goal 4. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 69 IFNONNULL L975 - false
   */

  @Test
  public void test60()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      HashMap<StringLabel, WordTag> hashMap0 = new HashMap<StringLabel, WordTag>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("lsG.3He;", (Object) hashMap0);
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      HashMap<Word, HashableCoreMap> hashMap1 = new HashMap<Word, HashableCoreMap>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      JSONObject jSONObject2 = jSONObject1.put("lsG.3He;", (long) (-2901));
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      
      try {
        JSONObject jSONObject3 = jSONObject2.put((String) null, (Map) hashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
      }
  }

  //Test case number: 61
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 78 LOOKUPSWITCH L1030 Case 10 - true
   * Goal 2. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 84 LOOKUPSWITCH L1030 Default-Case - false
   */

  @Test
  public void test61()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      try {
        long long0 = jSONObject0.getLong("\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\n\"] not found.
         //
      }
  }

  //Test case number: 62
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/util/Map;)V: I11 Branch 16 IFNONNULL L234 - false
   */

  @Test
  public void test62()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
  }

  //Test case number: 63
  /*
   * 7 covered goals:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I7 Branch 31 IFNE L393 - false
   * Goal 2. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I13 Branch 32 IFEQ L393 - true
   * Goal 3. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I31 Branch 33 IFLE L400 - false
   * Goal 4. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I38 Branch 34 IFGE L400 - false
   * Goal 5. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I45 Branch 35 IFGE L400 - false
   * Goal 6. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I54 Branch 36 IFLE L401 - true
   * Goal 7. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I77 Branch 37 IFLE L404 - true
   */

  @Test
  public void test63()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-0.23370681477417615));
      assertNotNull(string0);
      assertEquals("-0.23370681477417615", string0);
  }

  //Test case number: 64
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.keys()Ljava/util/Iterator;: root-Branch
   * Goal 2. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I18 Branch 55 IFEQ L648 - true
   * Goal 3. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I18 Branch 55 IFEQ L648 - false
   * Goal 4. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I37 Branch 56 IFNE L651 - true
   */

  @Test
  public void test64()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "JSON does not allow non-finite numbers.");
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(3, jSONObject0.length());
      assertEquals(3, jSONArray0.length());
      assertNotNull(jSONArray0);
  }

  //Test case number: 65
  /*
   * 9 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/util/Collection;)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.put(Ljava/lang/String;D)Lwheel/json/JSONObject;: root-Branch
   * Goal 3. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/util/Map;)Lwheel/json/JSONObject;: root-Branch
   * Goal 4. wheel.json.JSONObject.optBoolean(Ljava/lang/String;Z)Z: root-Branch
   * Goal 5. wheel.json.JSONObject.<init>(Ljava/util/Map;)V: I11 Branch 16 IFNONNULL L234 - true
   * Goal 6. wheel.json.JSONObject.get(Ljava/lang/String;)Ljava/lang/Object;: I12 Branch 38 IFNONNULL L421 - false
   * Goal 7. wheel.json.JSONObject.optJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 66 IFEQ L829 - true
   * Goal 8. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 71 IFNULL L999 - true
   * Goal 9. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I6 Branch 110 IFNULL L1253 - true
   */

  @Test
  public void test65()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      JSONObject jSONObject1 = jSONObject0.put(";lOjl4L(`-", (double) 40);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      boolean boolean1 = jSONObject0.optBoolean("Null key.", false);
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertSame(jSONObject0, jSONObject1);
      
      CoreLabelTokenFactory coreLabelTokenFactory0 = new CoreLabelTokenFactory();
      assertNotNull(coreLabelTokenFactory0);
      
      CoreLabel coreLabel0 = coreLabelTokenFactory0.makeToken();
      assertEquals("", coreLabel0.originalText());
      assertEquals(-1, coreLabel0.sentIndex());
      assertEquals(-1, coreLabel0.endPosition());
      assertEquals(0, coreLabel0.copyCount());
      assertEquals(-1, coreLabel0.index());
      assertNull(coreLabel0.lemma());
      assertEquals(0, coreLabel0.size());
      assertNull(coreLabel0.docID());
      assertEquals(-1, coreLabel0.beginPosition());
      assertEquals("", coreLabel0.before());
      assertNull(coreLabel0.word());
      assertEquals("", coreLabel0.after());
      assertNull(coreLabel0.tag());
      assertNull(coreLabel0.ner());
      assertNull(coreLabel0.value());
      assertNull(coreLabel0.category());
      assertNotNull(coreLabel0);
      
      IndexedWord indexedWord0 = new IndexedWord(coreLabel0);
      assertNull(indexedWord0.word());
      assertNull(indexedWord0.ner());
      assertNull(indexedWord0.tag());
      assertEquals(-1, indexedWord0.beginPosition());
      assertNull(indexedWord0.docID());
      assertNull(indexedWord0.value());
      assertNull(indexedWord0.lemma());
      assertEquals(-1, indexedWord0.sentIndex());
      assertEquals(0, indexedWord0.copyCount());
      assertEquals(-1, indexedWord0.index());
      assertEquals(0, indexedWord0.size());
      assertEquals(-1, indexedWord0.endPosition());
      assertEquals("", indexedWord0.originalText());
      assertEquals("", coreLabel0.originalText());
      assertEquals(-1, coreLabel0.sentIndex());
      assertEquals(-1, coreLabel0.endPosition());
      assertEquals(0, coreLabel0.copyCount());
      assertEquals(-1, coreLabel0.index());
      assertNull(coreLabel0.lemma());
      assertEquals(0, coreLabel0.size());
      assertNull(coreLabel0.docID());
      assertEquals(-1, coreLabel0.beginPosition());
      assertEquals("", coreLabel0.before());
      assertNull(coreLabel0.word());
      assertEquals("", coreLabel0.after());
      assertNull(coreLabel0.tag());
      assertNull(coreLabel0.ner());
      assertNull(coreLabel0.value());
      assertNull(coreLabel0.category());
      assertNotNull(indexedWord0);
      
      WordTag wordTag0 = new WordTag(indexedWord0);
      assertNull(wordTag0.value());
      assertNull(wordTag0.word());
      assertNull(wordTag0.tag());
      assertNull(indexedWord0.word());
      assertNull(indexedWord0.ner());
      assertNull(indexedWord0.tag());
      assertEquals(-1, indexedWord0.beginPosition());
      assertNull(indexedWord0.docID());
      assertNull(indexedWord0.value());
      assertNull(indexedWord0.lemma());
      assertEquals(-1, indexedWord0.sentIndex());
      assertEquals(0, indexedWord0.copyCount());
      assertEquals(-1, indexedWord0.index());
      assertEquals(0, indexedWord0.size());
      assertEquals(-1, indexedWord0.endPosition());
      assertEquals("", indexedWord0.originalText());
      assertEquals("", coreLabel0.originalText());
      assertEquals(-1, coreLabel0.sentIndex());
      assertEquals(-1, coreLabel0.endPosition());
      assertEquals(0, coreLabel0.copyCount());
      assertEquals(-1, coreLabel0.index());
      assertNull(coreLabel0.lemma());
      assertEquals(0, coreLabel0.size());
      assertNull(coreLabel0.docID());
      assertEquals(-1, coreLabel0.beginPosition());
      assertEquals("", coreLabel0.before());
      assertNull(coreLabel0.word());
      assertEquals("", coreLabel0.after());
      assertNull(coreLabel0.tag());
      assertNull(coreLabel0.ner());
      assertNull(coreLabel0.value());
      assertNull(coreLabel0.category());
      assertNotNull(wordTag0);
      
      JSONObject jSONObject2 = jSONObject0.putOpt((String) null, (Object) wordTag0);
      assertNull(wordTag0.value());
      assertNull(wordTag0.word());
      assertNull(wordTag0.tag());
      assertNull(indexedWord0.word());
      assertNull(indexedWord0.ner());
      assertNull(indexedWord0.tag());
      assertEquals(-1, indexedWord0.beginPosition());
      assertNull(indexedWord0.docID());
      assertNull(indexedWord0.value());
      assertNull(indexedWord0.lemma());
      assertEquals(-1, indexedWord0.sentIndex());
      assertEquals(0, indexedWord0.copyCount());
      assertEquals(-1, indexedWord0.index());
      assertEquals(0, indexedWord0.size());
      assertEquals(-1, indexedWord0.endPosition());
      assertEquals("", indexedWord0.originalText());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
      assertEquals("", coreLabel0.originalText());
      assertEquals(-1, coreLabel0.sentIndex());
      assertEquals(-1, coreLabel0.endPosition());
      assertEquals(0, coreLabel0.copyCount());
      assertEquals(-1, coreLabel0.index());
      assertNull(coreLabel0.lemma());
      assertEquals(0, coreLabel0.size());
      assertNull(coreLabel0.docID());
      assertEquals(-1, coreLabel0.beginPosition());
      assertEquals("", coreLabel0.before());
      assertNull(coreLabel0.word());
      assertEquals("", coreLabel0.after());
      assertNull(coreLabel0.tag());
      assertNull(coreLabel0.ner());
      assertNull(coreLabel0.value());
      assertNull(coreLabel0.category());
      assertNotNull(jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      
      HashMap<Byte, WordLemmaTag> hashMap0 = new HashMap<Byte, WordLemmaTag>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject3 = jSONObject0.put("Null key.", (Map) hashMap0);
      assertEquals(2, jSONObject3.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject3);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      
      LinkedList<TaggedWord> linkedList0 = new LinkedList<TaggedWord>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONObject jSONObject4 = jSONObject0.put(";lOjl4L(`-", (Collection) linkedList0);
      assertEquals(2, jSONObject4.length());
      assertEquals(0, linkedList0.size());
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject4);
      assertSame(jSONObject4, jSONObject2);
      assertSame(jSONObject4, jSONObject3);
      assertSame(jSONObject4, jSONObject0);
      assertSame(jSONObject4, jSONObject1);
      assertSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      
      JSONObject jSONObject5 = jSONObject1.optJSONObject(";lOjl4L(`-");
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject0.length());
      assertNull(jSONObject5);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject4);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      
      String string0 = JSONObject.valueToString((Object) null);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  //Test case number: 66
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I6 Branch 52 IFNONNULL L568 - true
   * Goal 2. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I40 Branch 53 IFNE L574 - true
   * Goal 3. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I60 Branch 54 IF_ICMPGE L578 - true
   * Goal 4. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I60 Branch 54 IF_ICMPGE L578 - false
   */

  @Test
  public void test66()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "JSON does not allow non-finite numbers.");
      assertNotNull(stringArray0);
  }

  //Test case number: 67
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.has(Ljava/lang/String;)Z: root-Branch
   * Goal 2. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 29 IFNONNULL L374 - false
   * Goal 3. wheel.json.JSONObject.put(Ljava/lang/String;Z)Lwheel/json/JSONObject;: I8 Branch 68 IFEQ L902 - true
   */

  @Test
  public void test67()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("UkAMU,`brz-3Uv '#f", false);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      boolean boolean0 = jSONObject1.has("XMD))");
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(boolean0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONObject jSONObject2 = jSONObject0.append("XMD))", (Object) "XMD))");
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject2.length());
      assertNotNull(jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
  }

  //Test case number: 68
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.isNull(Ljava/lang/String;)Z: root-Branch
   * Goal 2. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I6 Branch 1 IFNULL L115 - true
   * Goal 3. wheel.json.JSONObject.getJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 47 IFEQ L499 - true
   */

  @Test
  public void test68()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "=z?K2!_3KX4LS_0");
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("lsG.3He;", (Object) "lsG.3He;");
      assertEquals(4, jSONObject0.length());
      assertEquals(4, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      boolean boolean0 = jSONObject1.isNull("=z?K2!_3KX4LS_0");
      assertEquals(4, jSONObject0.length());
      assertEquals(4, jSONObject1.length());
      assertTrue(boolean0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      try {
        JSONArray jSONArray0 = jSONObject0.getJSONArray("lsG.3He;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"lsG.3He;\"] is not a JSONArray.
         //
      }
  }

  //Test case number: 69
  /*
   * 14 covered goals:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I6 Branch 57 IFNONNULL L662 - true
   * Goal 2. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I31 Branch 58 IFLE L670 - false
   * Goal 3. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I38 Branch 59 IFGE L670 - false
   * Goal 4. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I45 Branch 60 IFGE L670 - false
   * Goal 5. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I54 Branch 61 IFLE L671 - true
   * Goal 6. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I54 Branch 61 IFLE L671 - false
   * Goal 7. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I77 Branch 62 IFLE L674 - false
   * Goal 8. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I14 Branch 92 IFEQ L1089 - false
   * Goal 9. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I23 Branch 93 IFNE L1090 - false
   * Goal 10. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I30 Branch 94 IFEQ L1090 - true
   * Goal 11. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I6 Branch 121 IFNULL L1304 - false
   * Goal 12. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I13 Branch 122 IFEQ L1304 - true
   * Goal 13. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I25 Branch 123 IFEQ L1308 - true
   * Goal 14. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I62 Branch 125 IFEQ L1317 - false
   */

  @Test
  public void test69()  throws Throwable  {
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01D);
      
      String string0 = JSONObject.valueToString(double0, 129, 129);
      assertNotNull(string0);
      assertEquals("1", string0);
  }

  //Test case number: 70
  /*
   * 44 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>()V: root-Branch
   * Goal 2. wheel.json.JSONObject.put(Ljava/lang/String;I)Lwheel/json/JSONObject;: root-Branch
   * Goal 3. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I33 Branch 17 IF_ICMPGE L263 - true
   * Goal 4. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I33 Branch 17 IF_ICMPGE L263 - false
   * Goal 5. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I58 Branch 18 IFLE L268 - true
   * Goal 6. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I58 Branch 18 IFLE L268 - false
   * Goal 7. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I78 Branch 19 IFLE L270 - true
   * Goal 8. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I78 Branch 19 IFLE L270 - false
   * Goal 9. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I92 Branch 20 IFLE L273 - true
   * Goal 10. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I92 Branch 20 IFLE L273 - false
   * Goal 11. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I100 Branch 21 IFEQ L273 - false
   * Goal 12. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I107 Branch 22 IFNE L273 - true
   * Goal 13. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I107 Branch 22 IFNE L273 - false
   * Goal 14. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I116 Branch 23 IF_ICMPNE L276 - true
   * Goal 15. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I135 Branch 24 IFNE L278 - false
   * Goal 16. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 26 IFNONNULL L346 - true
   * Goal 17. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I52 Branch 28 IFEQ L350 - true
   * Goal 18. wheel.json.JSONObject.get(Ljava/lang/String;)Ljava/lang/Object;: I12 Branch 38 IFNONNULL L421 - true
   * Goal 19. wheel.json.JSONObject.getDouble(Ljava/lang/String;)D: I13 Branch 45 IFEQ L463 - true
   * Goal 20. wheel.json.JSONObject.getLong(Ljava/lang/String;)J: I13 Branch 49 IFEQ L536 - true
   * Goal 21. wheel.json.JSONObject.opt(Ljava/lang/String;)Ljava/lang/Object;: I6 Branch 63 IFNONNULL L688 - true
   * Goal 22. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 69 IFNONNULL L975 - true
   * Goal 23. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I20 Branch 70 IFNULL L978 - false
   * Goal 24. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 71 IFNULL L999 - false
   * Goal 25. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I11 Branch 72 IFNULL L999 - false
   * Goal 26. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I6 Branch 73 IFNULL L1015 - false
   * Goal 27. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I12 Branch 74 IFNE L1015 - true
   * Goal 28. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I51 Branch 75 IF_ICMPGE L1027 - true
   * Goal 29. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I51 Branch 75 IF_ICMPGE L1027 - false
   * Goal 30. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 76 LOOKUPSWITCH L1030 Case 8 - false
   * Goal 31. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 77 LOOKUPSWITCH L1030 Case 9 - false
   * Goal 32. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 78 LOOKUPSWITCH L1030 Case 10 - false
   * Goal 33. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 79 LOOKUPSWITCH L1030 Case 12 - false
   * Goal 34. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 80 LOOKUPSWITCH L1030 Case 13 - false
   * Goal 35. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 81 LOOKUPSWITCH L1030 Case 34 - false
   * Goal 36. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 82 LOOKUPSWITCH L1030 Case 47 - false
   * Goal 37. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 83 LOOKUPSWITCH L1030 Case 92 - false
   * Goal 38. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 84 LOOKUPSWITCH L1030 Default-Case - true
   * Goal 39. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I177 Branch 86 IF_ICMPLT L1058 - false
   * Goal 40. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I183 Branch 87 IF_ICMPLT L1058 - true
   * Goal 41. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I196 Branch 89 IF_ICMPLT L1058 - true
   * Goal 42. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I6 Branch 91 IFNULL L1088 - false
   * Goal 43. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I14 Branch 92 IFEQ L1089 - true
   * Goal 44. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I45 Branch 95 IFEQ L1094 - true
   */

  @Test
  public void test70()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "0.00");
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("sG;er", (Object) "sG;er");
      assertEquals(4, jSONObject1.length());
      assertEquals(4, jSONObject0.length());
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      JSONObject jSONObject2 = jSONObject1.accumulate("sG;er", (Object) "0.00");
      assertEquals(4, jSONObject1.length());
      assertEquals(4, jSONObject0.length());
      assertEquals(4, jSONObject2.length());
      assertNotNull(jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      
      JSONObject jSONObject3 = jSONObject0.put("0.00", (-2901));
      assertEquals(5, jSONObject3.length());
      assertEquals(5, jSONObject0.length());
      assertNotNull(jSONObject3);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      
      JSONObject jSONObject4 = jSONObject3.putOpt("get", (Object) "sG;er");
      assertEquals(6, jSONObject3.length());
      assertEquals(6, jSONObject0.length());
      assertEquals(6, jSONObject4.length());
      assertNotNull(jSONObject4);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject4);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject4, jSONObject1);
      assertSame(jSONObject4, jSONObject3);
      assertSame(jSONObject4, jSONObject2);
      assertSame(jSONObject4, jSONObject0);
      
      try {
        long long0 = jSONObject4.getLong("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] is not a number.
         //
      }
  }
}
