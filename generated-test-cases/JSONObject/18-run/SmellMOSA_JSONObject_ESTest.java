/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 18 03:36:27 GMT 2015
 */

package wheel.json;

import static org.junit.Assert.*;
import org.junit.Test;
import edu.stanford.nlp.ling.CategoryWordTag;
import edu.stanford.nlp.ling.CategoryWordTagFactory;
import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.ling.IndexedWord;
import edu.stanford.nlp.ling.Label;
import edu.stanford.nlp.ling.LabeledWord;
import edu.stanford.nlp.ling.Tag;
import edu.stanford.nlp.ling.TaggedWord;
import edu.stanford.nlp.ling.Word;
import edu.stanford.nlp.ling.WordLemmaTag;
import edu.stanford.nlp.ling.WordTag;
import edu.stanford.nlp.util.HashIndex;
import edu.stanford.nlp.util.HashableCoreMap;
import edu.stanford.nlp.util.TypesafeMap;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I11 Branch 50 IFNE L548 - false
   */

  @Test
  public void test00()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertNull(stringArray0);
  }

  //Test case number: 1
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I21 Branch 132 IFEQ L1357 - false
   * Goal 2. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I28 Branch 133 IFEQ L1358 - true
   * Goal 3. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I65 Branch 134 IFEQ L1365 - true
   * Goal 4. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I84 Branch 135 IFEQ L1367 - true
   */

  @Test
  public void test01()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("z+o#", (-1556L));
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = (StringWriter)jSONObject0.write((Writer) stringWriter0);
      assertSame(stringWriter1, stringWriter0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(stringWriter0, stringWriter1);
      assertEquals("{\"z+o#\":-1556}", stringWriter1.toString());
      assertEquals(1, jSONObject0.length());
      assertEquals("{\"z+o#\":-1556}", stringWriter0.toString());
      assertNotNull(stringWriter1);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I86 Branch 10 IF_ICMPEQ L202 - false
   */

  @Test
  public void test02()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{-7e");
      assertTrue(jSONTokener0.more());
      assertNotNull(jSONTokener0);
      
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {-7e
         //
      }
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 48 IFEQ L517 - true
   */

  @Test
  public void test03()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("X>Lzi%*P=Ht4oN4IQ", 0.0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      
      try {
        JSONObject jSONObject2 = jSONObject1.getJSONObject("X>Lzi%*P=Ht4oN4IQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"X>Lzi%*P=Ht4oN4IQ\"] is not a JSONObject.
         //
      }
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 5 LOOKUPSWITCH L183 Case 0 - true
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 7 LOOKUPSWITCH L183 Default-Case - false
   */

  @Test
  public void test04()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
      }
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.optString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I12 Branch 67 IFNULL L889 - false
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I96 Branch 115 IFNE L1271 - true
   */

  @Test
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSONObject jSONObject0 = new JSONObject(object0);
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      HashMap<Word, WordLemmaTag> hashMap0 = new HashMap<Word, WordLemmaTag>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject1 = jSONObject0.put("istoString", (Map) hashMap0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject1);
      
      Boolean boolean0 = new Boolean("istoString");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject0.accumulate("istoString", (Object) boolean0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject2.length());
      assertNotNull(jSONObject2);
      
      String string0 = jSONObject2.optString("istoString", "istoString");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject2.length());
      assertNotNull(string0);
      assertEquals("[{},false]", string0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 47 IFEQ L499 - true
   */

  @Test
  public void test06()  throws Throwable  {
      HashMap<IndexedWord, Long> hashMap0 = new HashMap<IndexedWord, Long>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("D5", (Object) hashMap0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(jSONObject1);
      
      try {
        JSONArray jSONArray0 = jSONObject1.getJSONArray("D5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"D5\"] is not a JSONArray.
         //
      }
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optString(Ljava/lang/String;)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test07()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = jSONObject0.optString("A JSONObject text must end with '}'");
      assertEquals(0, jSONObject0.length());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I105 Branch 128 IFEQ L1326 - false
   */

  @Test
  public void test08()  throws Throwable  {
      HashMap<IndexedWord, Long> hashMap0 = new HashMap<IndexedWord, Long>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("D_R@Y?1fL}9k=", true);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject0.append(" V7M(z[sX8KqejD'G", (Object) "D_R@Y?1fL}9k=");
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(2, jSONObject2.length());
      assertEquals(2, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject2);
      
      String string0 = jSONObject0.toString(0, 83);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(2, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(string0);
      assertEquals("{\n                                                                                   \"D_R@Y?1fL}9k=\": true,\n                                                                                   \" V7M(z[sX8KqejD'G\": [\"D_R@Y?1fL}9k=\"]\n                                                                                   }", string0);
  }

  //Test case number: 9
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I52 Branch 28 IFEQ L350 - false
   * Goal 2. wheel.json.JSONObject.getDouble(Ljava/lang/String;)D: I13 Branch 45 IFEQ L463 - false
   */

  @Test
  public void test09()  throws Throwable  {
      HashMap<Float, CoreLabel> hashMap0 = new HashMap<Float, CoreLabel>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      CategoryWordTagFactory categoryWordTagFactory0 = new CategoryWordTagFactory();
      assertNotNull(categoryWordTagFactory0);
      
      CategoryWordTag categoryWordTag0 = (CategoryWordTag)categoryWordTagFactory0.newLabel("isequals", (-651));
      assertEquals("isequals", categoryWordTag0.value());
      assertEquals(-1, categoryWordTag0.beginPosition());
      assertEquals(-1, categoryWordTag0.endPosition());
      assertNull(categoryWordTag0.word());
      assertNull(categoryWordTag0.tag());
      assertEquals("isequals", categoryWordTag0.category());
      assertNotNull(categoryWordTag0);
      assertTrue(categoryWordTag0.printWordTag);
      assertFalse(categoryWordTag0.suppressTerminalDetails);
      
      TaggedWord taggedWord0 = new TaggedWord((Label) categoryWordTag0, (Label) categoryWordTag0);
      assertEquals("isequals", categoryWordTag0.value());
      assertEquals(-1, categoryWordTag0.beginPosition());
      assertEquals(-1, categoryWordTag0.endPosition());
      assertNull(categoryWordTag0.word());
      assertNull(categoryWordTag0.tag());
      assertEquals("isequals", categoryWordTag0.category());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("isequals", taggedWord0.value());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals("isequals", taggedWord0.tag());
      assertEquals("isequals", taggedWord0.word());
      assertNotNull(taggedWord0);
      assertTrue(categoryWordTag0.printWordTag);
      assertFalse(categoryWordTag0.suppressTerminalDetails);
      
      JSONObject jSONObject1 = jSONObject0.append("isequals", (Object) taggedWord0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals("isequals", categoryWordTag0.value());
      assertEquals(-1, categoryWordTag0.beginPosition());
      assertEquals(-1, categoryWordTag0.endPosition());
      assertNull(categoryWordTag0.word());
      assertNull(categoryWordTag0.tag());
      assertEquals("isequals", categoryWordTag0.category());
      assertEquals(1, jSONObject0.length());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("isequals", taggedWord0.value());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals("isequals", taggedWord0.tag());
      assertEquals("isequals", taggedWord0.word());
      assertNotNull(jSONObject1);
      assertTrue(categoryWordTag0.printWordTag);
      assertFalse(categoryWordTag0.suppressTerminalDetails);
      
      JSONObject jSONObject2 = jSONObject1.accumulate("isequals", (Object) categoryWordTag0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertEquals("isequals", categoryWordTag0.value());
      assertEquals(-1, categoryWordTag0.beginPosition());
      assertEquals(-1, categoryWordTag0.endPosition());
      assertNull(categoryWordTag0.word());
      assertNull(categoryWordTag0.tag());
      assertEquals("isequals", categoryWordTag0.category());
      assertEquals(1, jSONObject0.length());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("isequals", taggedWord0.value());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals("isequals", taggedWord0.tag());
      assertEquals("isequals", taggedWord0.word());
      assertNotNull(jSONObject2);
      assertTrue(categoryWordTag0.printWordTag);
      assertFalse(categoryWordTag0.suppressTerminalDetails);
      
      JSONObject jSONObject3 = jSONObject1.put("isequals", (long) (-651));
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals("isequals", categoryWordTag0.value());
      assertEquals(-1, categoryWordTag0.beginPosition());
      assertEquals(-1, categoryWordTag0.endPosition());
      assertNull(categoryWordTag0.word());
      assertNull(categoryWordTag0.tag());
      assertEquals("isequals", categoryWordTag0.category());
      assertEquals(1, jSONObject0.length());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("isequals", taggedWord0.value());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals("isequals", taggedWord0.tag());
      assertEquals("isequals", taggedWord0.word());
      assertEquals(1, jSONObject3.length());
      assertNotNull(jSONObject3);
      assertTrue(categoryWordTag0.printWordTag);
      assertFalse(categoryWordTag0.suppressTerminalDetails);
      
      double double0 = jSONObject3.getDouble("isequals");
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals("isequals", categoryWordTag0.value());
      assertEquals(-1, categoryWordTag0.beginPosition());
      assertEquals(-1, categoryWordTag0.endPosition());
      assertNull(categoryWordTag0.word());
      assertNull(categoryWordTag0.tag());
      assertEquals("isequals", categoryWordTag0.category());
      assertEquals(1, jSONObject0.length());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("isequals", taggedWord0.value());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals("isequals", taggedWord0.tag());
      assertEquals("isequals", taggedWord0.word());
      assertEquals(1, jSONObject3.length());
      assertEquals((-651.0), double0, 0.01D);
      assertTrue(categoryWordTag0.printWordTag);
      assertFalse(categoryWordTag0.suppressTerminalDetails);
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getLong(Ljava/lang/String;)J: I13 Branch 49 IFEQ L536 - false
   */

  @Test
  public void test10()  throws Throwable  {
      HashMap<IndexedWord, Long> hashMap0 = new HashMap<IndexedWord, Long>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("D}5N", 2294);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      long long0 = jSONObject0.optLong("D}5N");
      assertSame(jSONObject0, jSONObject1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertEquals(2294L, long0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I61 Branch 97 IFEQ L1095 - false
   */

  @Test
  public void test11()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      Float float0 = new Float(Float.NaN);
      assertEquals(Float.NaN, (float)float0, 0.01F);
      
      try {
        JSONObject jSONObject1 = jSONObject0.accumulate("] not found.", (Object) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
      }
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I160 Branch 131 IFEQ L1335 - false
   */

  @Test
  public void test12()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) " outside the bounds [0,");
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = jSONObject0.toString(138, 138);
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
      assertEquals("{\n                                                                                                                                                                                                                                                                                    \"bytes\": [\n                                                                                                                                                                                                                                                                                                                                                                                                                              32,\n                                                                                                                                                                                                                                                                                                                                                                                                                              111,\n                                                                                                                                                                                                                                                                                                                                                                                                                              117,\n                                                                                                                                                                                                                                                                                                                                                                                                                              116,\n                                                                                                                                                                                                                                                                                                                                                                                                                              115,\n                                                                                                                                                                                                                                                                                                                                                                                                                              105,\n                                                                                                                                                                                                                                                                                                                                                                                                                              100,\n                                                                                                                                                                                                                                                                                                                                                                                                                              101,\n                                                                                                                                                                                                                                                                                                                                                                                                                              32,\n                                                                                                                                                                                                                                                                                                                                                                                                                              116,\n                                                                                                                                                                                                                                                                                                                                                                                                                              104,\n                                                                                                                                                                                                                                                                                                                                                                                                                              101,\n                                                                                                                                                                                                                                                                                                                                                                                                                              32,\n                                                                                                                                                                                                                                                                                                                                                                                                                              98,\n                                                                                                                                                                                                                                                                                                                                                                                                                              111,\n                                                                                                                                                                                                                                                                                                                                                                                                                              117,\n                                                                                                                                                                                                                                                                                                                                                                                                                              110,\n                                                                                                                                                                                                                                                                                                                                                                                                                              100,\n                                                                                                                                                                                                                                                                                                                                                                                                                              115,\n                                                                                                                                                                                                                                                                                                                                                                                                                              32,\n                                                                                                                                                                                                                                                                                                                                                                                                                              91,\n                                                                                                                                                                                                                                                                                                                                                                                                                              48,\n                                                                                                                                                                                                                                                                                                                                                                                                                              44\n                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                    \"class\": \"class java.lang.String\",\n                                                                                                                                                                                                                                                                                    \"empty\": false\n                                                                                                                                          }", string0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getInt(Ljava/lang/String;)I: I13 Branch 46 IFEQ L484 - true
   */

  @Test
  public void test13()  throws Throwable  {
      HashMap<IndexedWord, Long> hashMap0 = new HashMap<IndexedWord, Long>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a Boolean.", (Object) hashMap0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      try {
        int int0 = jSONObject1.getInt("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a Boolean.\"] is not a number.
         //
      }
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I140 Branch 130 IFEQ L1332 - false
   */

  @Test
  public void test14()  throws Throwable  {
      LinkedList<Tag> linkedList0 = new LinkedList<Tag>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = JSONObject.valueToString(linkedList0, (-1990), (-1990));
      assertEquals(0, linkedList0.size());
      assertNotNull(string0);
      assertEquals("[]", string0);
  }

  //Test case number: 15
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/util/Collection;)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I39 Branch 30 IFEQ L376 - false
   */

  @Test
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSONObject jSONObject0 = new JSONObject(object0);
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      int int0 = jSONObject0.length();
      assertEquals(1, jSONObject0.length());
      assertEquals(1, int0);
      
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      HashIndex<JSONArray> hashIndex0 = new HashIndex<JSONArray>((Collection<? extends JSONArray>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertNotNull(hashIndex0);
      
      JSONObject jSONObject1 = jSONObject0.put("istoString", (Collection) hashIndex0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, linkedList0.size());
      assertEquals(2, jSONObject0.length());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertEquals(2, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject0.append("istoString", (Object) 1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(2, jSONObject2.length());
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONObject2);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I89 Branch 127 IFEQ L1323 - false
   */

  @Test
  public void test16()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("\r", (Object) jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      // Undeclared exception!
      try {
        String string0 = jSONObject0.toString(2076);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 17
  /*
   * 6 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I12 Branch 4 IF_ICMPEQ L178 - true
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 5 LOOKUPSWITCH L183 Case 0 - false
   * Goal 3. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 6 LOOKUPSWITCH L183 Case 125 - false
   * Goal 4. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 7 LOOKUPSWITCH L183 Default-Case - true
   * Goal 5. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I61 Branch 8 IF_ICMPNE L198 - true
   * Goal 6. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I86 Branch 10 IF_ICMPEQ L202 - true
   */

  @Test
  public void test17()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{S9:=}M)@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 4 of {S9:=}M)@
         //
      }
  }

  //Test case number: 18
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I11 Branch 50 IFNE L548 - true
   * Goal 2. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I37 Branch 51 IFEQ L554 - true
   * Goal 3. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I37 Branch 51 IFEQ L554 - false
   */

  @Test
  public void test18()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1.0);
      assertNotNull(string0);
      assertEquals("1", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("1", (Object) "1");
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(stringArray0);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getString(Ljava/lang/String;)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      try {
        String string0 = jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
      }
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I121 Branch 129 IFEQ L1329 - false
   */

  @Test
  public void test20()  throws Throwable  {
      HashMap<WordTag, Tag> hashMap0 = new HashMap<WordTag, Tag>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = JSONObject.valueToString(hashMap0, (-19), (-19));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  //Test case number: 21
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.optBoolean(Ljava/lang/String;)Z: root-Branch
   * Goal 2. wheel.json.JSONObject.getInt(Ljava/lang/String;)I: I13 Branch 46 IFEQ L484 - false
   */

  @Test
  public void test21()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("gethashCode", (int) (byte) (-113));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = jSONObject1.optBoolean("gethashCode");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(boolean0);
      
      int int0 = jSONObject0.optInt("gethashCode", (int) (byte) (-113));
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals((-113), int0);
  }

  //Test case number: 22
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.toString(I)Ljava/lang/String;: root-Branch
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I102 Branch 116 IFNE L1271 - true
   */

  @Test
  public void test22()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = jSONObject0.toString(999);
      assertEquals(0, jSONObject0.length());
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      String string1 = JSONObject.valueToString(jSONObject0);
      assertNotSame(string1, string0);
      assertEquals(0, jSONObject0.length());
      assertNotNull(string1);
      assertEquals("{}", string1);
      assertTrue(string1.equals((Object)string0));
  }

  //Test case number: 23
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I13 Branch 32 IFEQ L393 - false
   * Goal 2. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I21 Branch 132 IFEQ L1357 - true
   */

  @Test
  public void test23()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = (StringWriter)jSONObject0.write((Writer) stringWriter0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("{}", stringWriter0.toString());
      assertEquals(0, jSONObject0.length());
      assertEquals("{}", stringWriter1.toString());
      assertNotNull(stringWriter1);
      
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  //Test case number: 24
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I121 Branch 118 IFEQ L1275 - true
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I138 Branch 119 IFEQ L1278 - true
   * Goal 3. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I156 Branch 120 IFEQ L1281 - true
   */

  @Test
  public void test24()  throws Throwable  {
      TaggedWord taggedWord0 = new TaggedWord("j5IoLTRu9)EpdVfQK", "j5IoLTRu9)EpdVfQK");
      assertEquals("j5IoLTRu9)EpdVfQK", taggedWord0.word());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals("j5IoLTRu9)EpdVfQK", taggedWord0.tag());
      assertEquals("j5IoLTRu9)EpdVfQK", taggedWord0.value());
      assertEquals(-1, taggedWord0.endPosition());
      assertNotNull(taggedWord0);
      
      String string0 = JSONObject.valueToString(taggedWord0);
      assertEquals("j5IoLTRu9)EpdVfQK", taggedWord0.word());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals("j5IoLTRu9)EpdVfQK", taggedWord0.tag());
      assertEquals("j5IoLTRu9)EpdVfQK", taggedWord0.value());
      assertEquals(-1, taggedWord0.endPosition());
      assertNotNull(string0);
      assertEquals("\"j5IoLTRu9)EpdVfQK/j5IoLTRu9)EpdVfQK\"", string0);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I6 Branch 98 IFNULL L1113 - true
   */

  @Test
  public void test25()  throws Throwable  {
      HashMap<IndexedWord, Long> hashMap0 = new HashMap<IndexedWord, Long>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(jSONArray0);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I6 Branch 52 IFNONNULL L568 - false
   */

  @Test
  public void test26()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 29 IFNONNULL L374 - false
   */

  @Test
  public void test27()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.append("FjR", (Object) "FjR");
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
  }

  //Test case number: 28
  /*
   * 10 covered goals:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 76 LOOKUPSWITCH L1030 Case 8 - true
   * Goal 2. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 77 LOOKUPSWITCH L1030 Case 9 - true
   * Goal 3. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 78 LOOKUPSWITCH L1030 Case 10 - true
   * Goal 4. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 79 LOOKUPSWITCH L1030 Case 12 - true
   * Goal 5. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 80 LOOKUPSWITCH L1030 Case 13 - true
   * Goal 6. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I177 Branch 86 IF_ICMPLT L1058 - true
   * Goal 7. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I183 Branch 87 IF_ICMPLT L1058 - false
   * Goal 8. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I189 Branch 88 IF_ICMPLT L1058 - false
   * Goal 9. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I196 Branch 89 IF_ICMPLT L1058 - false
   * Goal 10. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I202 Branch 90 IF_ICMPGE L1058 - true
   */

  @Test
  public void test28()  throws Throwable  {
      String string0 = JSONObject.quote("\t\u0000\u0001 \u0001 \u0001 \u0001 \u0001 \u0012\u0000\u0001 \u0003\u0000\u0001$\u0002\u0000\u0001\"\u0003\u0000\u0001\u0001\u0001\u0000\u0001\u001F\u0001#\u0001\u0000\n\u0001\u0007\u0000\u0001&\u0001\u0005\u0001\u0006\u0001%\u0001\u001A\u0001\b\u0001\t\u0001\n\u0001\u001C\u0001\u000B\u0001\r\u0001\u000E\u0001\u000F\u0001\u0010\u0001\u001D\u0001'\u0001\u0012\u0001\u0013\u0001\u0015\u0001\u0016\u0001\u0002\u0001\u0017\u0001\u0018\u0001\u0019\u0001\u0003\u0001\u0004\u0004\u0000\u0001\u001E\u0001\u0000\u0001!\u0001\u0005\u0001\u0006\u0001\u0007\u0001\u001A\u0001\b\u0001\t\u0001\n\u0001\u001C\u0001\u000B\u0001\r\u0001\u000E\u0001\u000F\u0001\u0010\u0001\u001D\u0001\u0011\u0001\u0012\u0001\u0013\u0001\u0015\u0001\u0016\u0001\u0002\u0001\u0017\u0001\u0018\u0001\u0019\u0001\u0003\u0001\u0004\n\u0000\u0001 \u00AA\u0000\u0002\u001BM\u0000\u0001\u0014\u1EA8\u0000\u0001 \u0001 \u0100\u0000\u0001\f\uDED5\u0000");
      assertNotNull(string0);
      assertEquals("\"\\t\\u0000\\u0001 \\u0001 \\u0001 \\u0001 \\u0001 \\u0012\\u0000\\u0001 \\u0003\\u0000\\u0001$\\u0002\\u0000\\u0001\\\"\\u0003\\u0000\\u0001\\u0001\\u0001\\u0000\\u0001\\u001f\\u0001#\\u0001\\u0000\\n\\u0001\\u0007\\u0000\\u0001&\\u0001\\u0005\\u0001\\u0006\\u0001%\\u0001\\u001a\\u0001\\b\\u0001\\t\\u0001\\n\\u0001\\u001c\\u0001\\u000b\\u0001\\r\\u0001\\u000e\\u0001\\u000f\\u0001\\u0010\\u0001\\u001d\\u0001'\\u0001\\u0012\\u0001\\u0013\\u0001\\u0015\\u0001\\u0016\\u0001\\u0002\\u0001\\u0017\\u0001\\u0018\\u0001\\u0019\\u0001\\u0003\\u0001\\u0004\\u0004\\u0000\\u0001\\u001e\\u0001\\u0000\\u0001!\\u0001\\u0005\\u0001\\u0006\\u0001\\u0007\\u0001\\u001a\\u0001\\b\\u0001\\t\\u0001\\n\\u0001\\u001c\\u0001\\u000b\\u0001\\r\\u0001\\u000e\\u0001\\u000f\\u0001\\u0010\\u0001\\u001d\\u0001\\u0011\\u0001\\u0012\\u0001\\u0013\\u0001\\u0015\\u0001\\u0016\\u0001\\u0002\\u0001\\u0017\\u0001\\u0018\\u0001\\u0019\\u0001\\u0003\\u0001\\u0004\\n\\u0000\\u0001 \u00AA\\u0000\\u0002\\u001bM\\u0000\\u0001\\u0014\u1EA8\\u0000\\u0001 \\u0001 \u0100\\u0000\\u0001\\f\uDED5\\u0000\"", string0);
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I45 Branch 35 IFGE L400 - true
   */

  @Test
  public void test29()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-3.4587292534E10));
      assertNotNull(string0);
      assertEquals("-3.4587292534E10", string0);
  }

  //Test case number: 30
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I14 Branch 39 IFNE L439 - true
   */

  @Test
  public void test30()  throws Throwable  {
      HashMap<IndexedWord, Long> hashMap0 = new HashMap<IndexedWord, Long>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.put("D}5N", false);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = jSONObject0.optBoolean("D}5N", false);
      assertSame(jSONObject0, jSONObject1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  //Test case number: 31
  /*
   * 6 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/util/Map;)V: I11 Branch 16 IFNONNULL L234 - false
   * Goal 2. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I6 Branch 98 IFNULL L1113 - false
   * Goal 3. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I12 Branch 99 IFNE L1113 - true
   * Goal 4. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I34 Branch 100 IF_ICMPGE L1117 - true
   * Goal 5. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I34 Branch 100 IF_ICMPGE L1117 - false
   * Goal 6. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I82 Branch 114 IFEQ L1268 - false
   */

  @Test
  public void test31()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("+cCTO+&aYEUIw", (Object) "+cCTO+&aYEUIw");
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      
      Float float0 = new Float((float) 3877);
      assertEquals(3877.0F, (float)float0, 0.01F);
      
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
      assertEquals("3877", string0);
  }

  //Test case number: 32
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I77 Branch 62 IFLE L674 - true
   */

  @Test
  public void test32()  throws Throwable  {
      String string0 = JSONObject.numberToString((Number) 32.07220765978933);
      assertNotNull(string0);
      assertEquals("32.07220765978933", string0);
  }

  //Test case number: 33
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I11 Branch 103 IFNE L1190 - false
   */

  @Test
  public void test33()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String string0 = jSONObject0.toString(992, 992);
      assertEquals(0, jSONObject0.length());
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  //Test case number: 34
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I6 Branch 57 IFNONNULL L662 - false
   */

  @Test
  public void test34()  throws Throwable  {
      try {
        String string0 = JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
      }
  }

  //Test case number: 35
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I6 Branch 110 IFNULL L1253 - true
   */

  @Test
  public void test35()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  //Test case number: 36
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.optDouble(Ljava/lang/String;)D: root-Branch
   * Goal 2. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I41 Branch 42 IFNE L443 - false
   * Goal 3. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I47 Branch 43 IFEQ L443 - true
   * Goal 4. wheel.json.JSONObject.optDouble(Ljava/lang/String;D)D: I13 Branch 64 IFEQ L764 - false
   */

  @Test
  public void test36()  throws Throwable  {
      HashMap<IndexedWord, Long> hashMap0 = new HashMap<IndexedWord, Long>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("}5N", (Object) hashMap0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = jSONObject1.optBoolean("}5N", true);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.put("}5N", (-762));
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject2.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(jSONObject2);
      
      double double0 = jSONObject0.optDouble("}5N");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals((-762.0), double0, 0.01D);
  }

  //Test case number: 37
  /*
   * 5 covered goals:
   * Goal 1. wheel.json.JSONObject.toString()Ljava/lang/String;: I19 Branch 101 IFEQ L1140 - false
   * Goal 2. wheel.json.JSONObject.toString()Ljava/lang/String;: I28 Branch 102 IF_ICMPLE L1141 - true
   * Goal 3. wheel.json.JSONObject.toString()Ljava/lang/String;: I28 Branch 102 IF_ICMPLE L1141 - false
   * Goal 4. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I13 Branch 111 IFEQ L1253 - false
   * Goal 5. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I108 Branch 117 IFEQ L1271 - false
   */

  @Test
  public void test37()  throws Throwable  {
      HashIndex<TaggedWord> hashIndex0 = new HashIndex<TaggedWord>(12);
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertNotNull(hashIndex0);
      
      JSONArray jSONArray0 = new JSONArray((Collection) hashIndex0);
      assertEquals(0, jSONArray0.length());
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(12, (Collection) hashIndex0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(13, jSONArray0.length());
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertEquals(13, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray1);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(13, jSONArray0.length());
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertEquals(2, jSONObject0.length());
      assertEquals(13, jSONArray1.length());
      assertNotNull(jSONObject0);
      
      String string0 = jSONObject0.toString();
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(13, jSONArray0.length());
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertEquals(2, jSONObject0.length());
      assertEquals(13, jSONArray1.length());
      assertNotNull(string0);
      assertEquals("{\"[]\":[],\"null\":null}", string0);
  }

  //Test case number: 38
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.optInt(Ljava/lang/String;)I: root-Branch
   * Goal 2. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 82 LOOKUPSWITCH L1030 Case 47 - true
   * Goal 3. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I91 Branch 85 IF_ICMPNE L1037 - true
   */

  @Test
  public void test38()  throws Throwable  {
      HashMap<IndexedWord, Long> hashMap0 = new HashMap<IndexedWord, Long>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      int int0 = jSONObject0.optInt("#I/");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, int0);
  }

  //Test case number: 39
  @Test
  public void test39()  throws Throwable  {
      String string0 = JSONObject.quote("J9KRVY2UuaI(>qpsAt");
      assertNotNull(string0);
      assertEquals("\"J9KRVY2UuaI(>qpsAt\"", string0);
  }

  //Test case number: 40
  /*
   * 6 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I78 Branch 19 IFLE L270 - false
   * Goal 2. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I45 Branch 60 IFGE L670 - true
   * Goal 3. wheel.json.JSONObject.optJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 66 IFEQ L829 - false
   * Goal 4. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I45 Branch 95 IFEQ L1094 - false
   * Goal 5. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I54 Branch 96 IFNE L1095 - false
   * Goal 6. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I61 Branch 97 IFEQ L1095 - true
   */

  @Test
  public void test40()  throws Throwable  {
      Double double0 = new Double((-987.484025));
      assertEquals((-987.484025), (double)double0, 0.01D);
      
      JSONObject jSONObject0 = new JSONObject((Object) double0);
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "#:?vLf(g@0P`$oii";
      HashMap<LabeledWord, Float> hashMap0 = new HashMap<LabeledWord, Float>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject1 = jSONObject0.put("#:?vLf(g@0P`$oii", (Map) hashMap0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(4, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(4, jSONObject0.length());
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject0.optJSONObject("#:?vLf(g@0P`$oii");
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, jSONObject2.length());
      assertEquals(4, jSONObject0.length());
      assertNotNull(jSONObject2);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      
      float float0 = Float.MAX_VALUE;
      assertEquals(3.4028235E38F, float0, 0.01F);
      
      String string0 = JSONObject.numberToString((Number) 3.4028235E38F);
      assertNotNull(string0);
      assertEquals("3.4028235E38", string0);
  }

  //Test case number: 41
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I12 Branch 74 IFNE L1015 - false
   */

  @Test
  public void test41()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      try {
        JSONArray jSONArray0 = jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
      }
  }

  //Test case number: 42
  /*
   * 25 covered goals:
   * Goal 1. wheel.json.JSONObject$Null.toString()Ljava/lang/String;: root-Branch
   * Goal 2. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I33 Branch 17 IF_ICMPGE L263 - true
   * Goal 3. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I33 Branch 17 IF_ICMPGE L263 - false
   * Goal 4. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I58 Branch 18 IFLE L268 - true
   * Goal 5. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I58 Branch 18 IFLE L268 - false
   * Goal 6. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I78 Branch 19 IFLE L270 - true
   * Goal 7. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I92 Branch 20 IFLE L273 - true
   * Goal 8. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I92 Branch 20 IFLE L273 - false
   * Goal 9. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I100 Branch 21 IFEQ L273 - false
   * Goal 10. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I107 Branch 22 IFNE L273 - true
   * Goal 11. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I107 Branch 22 IFNE L273 - false
   * Goal 12. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I116 Branch 23 IF_ICMPNE L276 - true
   * Goal 13. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I135 Branch 24 IFNE L278 - false
   * Goal 14. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I31 Branch 58 IFLE L670 - true
   * Goal 15. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I41 Branch 104 IF_ICMPNE L1197 - true
   * Goal 16. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I84 Branch 105 IFEQ L1204 - true
   * Goal 17. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I84 Branch 105 IFEQ L1204 - false
   * Goal 18. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I98 Branch 106 IF_ICMPLE L1206 - true
   * Goal 19. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I98 Branch 106 IF_ICMPLE L1206 - false
   * Goal 20. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I125 Branch 107 IF_ICMPGE L1211 - true
   * Goal 21. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I125 Branch 107 IF_ICMPGE L1211 - false
   * Goal 22. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I177 Branch 108 IF_ICMPLE L1219 - false
   * Goal 23. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I194 Branch 109 IF_ICMPGE L1221 - true
   * Goal 24. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I194 Branch 109 IF_ICMPGE L1221 - false
   * Goal 25. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I13 Branch 122 IFEQ L1304 - false
   */

  @Test
  public void test42()  throws Throwable  {
      Long long0 = new Long((-1859L));
      assertEquals((-1859L), (long)long0);
      
      JSONObject jSONObject0 = new JSONObject((Object) long0);
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      int int0 = jSONObject0.optInt("i&yCtu'f>x9<V.AYT", 0);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.put(1131, 0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1132, jSONArray0.length());
      assertEquals(1132, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      JSONObject jSONObject1 = jSONArray1.toJSONObject(jSONArray0);
      assertNotSame(jSONObject1, jSONObject0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(2, jSONObject1.length());
      assertEquals(1132, jSONArray0.length());
      assertEquals(1132, jSONArray1.length());
      assertNotNull(jSONObject1);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      
      String string0 = jSONObject1.toString(1131, 1131);
      assertNotSame(jSONObject1, jSONObject0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(2, jSONObject1.length());
      assertEquals(1132, jSONArray0.length());
      assertEquals(1132, jSONArray1.length());
      assertNotNull(string0);
      assertEquals("{\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \"0\": 0,\nnull\": null\n}", string0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  //Test case number: 43
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I40 Branch 53 IFNE L574 - true
   * Goal 2. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I60 Branch 54 IF_ICMPGE L578 - true
   * Goal 3. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I60 Branch 54 IF_ICMPGE L578 - false
   */

  @Test
  public void test43()  throws Throwable  {
      IndexedWord indexedWord0 = IndexedWord.NO_WORD;
      assertEquals(0, indexedWord0.copyCount());
      assertNull(indexedWord0.lemma());
      assertEquals("", indexedWord0.originalText());
      assertEquals(-1, indexedWord0.sentIndex());
      assertEquals(-1, indexedWord0.index());
      assertNull(indexedWord0.docID());
      assertEquals(-1, indexedWord0.beginPosition());
      assertNull(indexedWord0.value());
      assertNull(indexedWord0.tag());
      assertEquals(3, indexedWord0.size());
      assertNull(indexedWord0.ner());
      assertNull(indexedWord0.word());
      assertEquals(-1, indexedWord0.endPosition());
      assertNotNull(indexedWord0);
      
      String[] stringArray0 = JSONObject.getNames((Object) indexedWord0);
      assertEquals(0, indexedWord0.copyCount());
      assertNull(indexedWord0.lemma());
      assertEquals("", indexedWord0.originalText());
      assertEquals(-1, indexedWord0.sentIndex());
      assertEquals(-1, indexedWord0.index());
      assertNull(indexedWord0.docID());
      assertEquals(-1, indexedWord0.beginPosition());
      assertNull(indexedWord0.value());
      assertNull(indexedWord0.tag());
      assertEquals(3, indexedWord0.size());
      assertNull(indexedWord0.ner());
      assertNull(indexedWord0.word());
      assertEquals(-1, indexedWord0.endPosition());
      assertNotNull(stringArray0);
  }

  //Test case number: 44
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 66 IFEQ L829 - true
   */

  @Test
  public void test44()  throws Throwable  {
      HashMap<WordTag, CategoryWordTag> hashMap0 = new HashMap<WordTag, CategoryWordTag>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.optJSONObject("X s<|X={*uyp5^?");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertNull(jSONObject1);
  }

  //Test case number: 45
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I77 Branch 37 IFLE L404 - true
   */

  @Test
  public void test45()  throws Throwable  {
      String string0 = JSONObject.doubleToString(12.155998677670134);
      assertNotNull(string0);
      assertEquals("12.155998677670134", string0);
  }

  //Test case number: 46
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 29 IFNONNULL L374 - true
   * Goal 2. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I39 Branch 30 IFEQ L376 - true
   */

  @Test
  public void test46()  throws Throwable  {
      HashMap<IndexedWord, Long> hashMap0 = new HashMap<IndexedWord, Long>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("}5N", (Object) hashMap0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(jSONObject1);
      
      HashMap<WordLemmaTag, JSONObject> hashMap1 = new HashMap<WordLemmaTag, JSONObject>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      try {
        JSONObject jSONObject2 = jSONObject0.append("}5N", (Object) hashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[}5N] is not a JSONArray.
         //
      }
  }

  //Test case number: 47
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/lang/Object;[Ljava/lang/String;)V: I20 Branch 25 IF_ICMPGE L304 - true
   * Goal 2. wheel.json.JSONObject.<init>(Ljava/lang/Object;[Ljava/lang/String;)V: I20 Branch 25 IF_ICMPGE L304 - false
   * Goal 3. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I30 Branch 94 IFEQ L1090 - false
   */

  @Test
  public void test47()  throws Throwable  {
      HashMap<Word, HashableCoreMap> hashMap0 = new HashMap<Word, HashableCoreMap>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String[] stringArray0 = new String[10];
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0, stringArray0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      try {
        JSONObject jSONObject1 = jSONObject0.put("get", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
      }
  }

  //Test case number: 48
  /*
   * 5 covered goals:
   * Goal 1. wheel.json.JSONObject.optLong(Ljava/lang/String;J)J: root-Branch
   * Goal 2. wheel.json.JSONObject.optLong(Ljava/lang/String;)J: root-Branch
   * Goal 3. wheel.json.JSONObject.getDouble(Ljava/lang/String;)D: I13 Branch 45 IFEQ L463 - true
   * Goal 4. wheel.json.JSONObject.getLong(Ljava/lang/String;)J: I13 Branch 49 IFEQ L536 - true
   * Goal 5. wheel.json.JSONObject.optDouble(Ljava/lang/String;D)D: I13 Branch 64 IFEQ L764 - true
   */

  @Test
  public void test48()  throws Throwable  {
      HashMap<IndexedWord, Long> hashMap0 = new HashMap<IndexedWord, Long>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("D}5N", (Object) hashMap0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(jSONObject1);
      
      long long0 = jSONObject1.optLong("D}5N");
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0L, long0);
      
      double double0 = jSONObject1.optDouble("D}5N", (double) 2294);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(2294.0, double0, 0.01D);
  }

  //Test case number: 49
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I6 Branch 52 IFNONNULL L568 - true
   * Goal 2. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I40 Branch 53 IFNE L574 - false
   */

  @Test
  public void test49()  throws Throwable  {
      HashMap<CategoryWordTag, Object> hashMap0 = new HashMap<CategoryWordTag, Object>(296);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(stringArray0);
  }

  //Test case number: 50
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.optJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 65 IFEQ L815 - true
   * Goal 2. wheel.json.JSONObject.optString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I12 Branch 67 IFNULL L889 - true
   * Goal 3. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I6 Branch 121 IFNULL L1304 - true
   */

  @Test
  public void test50()  throws Throwable  {
      HashMap<TypesafeMap.Key<WordTag>, Tag> hashMap0 = new HashMap<TypesafeMap.Key<WordTag>, Tag>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.optJSONArray("d6'F| HEdI*RDozi]");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
      
      String string0 = jSONObject0.optString("d6'F| HEdI*RDozi]", "d6'F| HEdI*RDozi]");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertNotNull(string0);
      assertEquals("d6'F| HEdI*RDozi]", string0);
      
      int int0 = jSONObject0.length();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, int0);
      
      String string1 = JSONObject.valueToString((Object) null, 0, 0);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("null", string1);
      assertFalse(string1.equals((Object)string0));
  }

  //Test case number: 51
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I6 Branch 1 IFNULL L115 - false
   * Goal 2. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I12 Branch 2 IF_ACMPNE L115 - true
   * Goal 3. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I76 Branch 126 IFEQ L1320 - false
   */

  @Test
  public void test51()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("FjR", (Object) "FjR");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      boolean boolean0 = jSONObject0.isNull("FjR");
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.put("FjR", false);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject2);
      
      String string0 = jSONObject1.toString(999, 999);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(string0);
      assertEquals("{\"FjR\": false}", string0);
  }

  //Test case number: 52
  /*
   * 9 covered goals:
   * Goal 1. wheel.json.JSONObject.toString()Ljava/lang/String;: I19 Branch 101 IFEQ L1140 - true
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I6 Branch 110 IFNULL L1253 - false
   * Goal 3. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I13 Branch 111 IFEQ L1253 - true
   * Goal 4. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I25 Branch 112 IFEQ L1256 - true
   * Goal 5. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I82 Branch 114 IFEQ L1268 - true
   * Goal 6. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I96 Branch 115 IFNE L1271 - false
   * Goal 7. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I102 Branch 116 IFNE L1271 - false
   * Goal 8. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I108 Branch 117 IFEQ L1271 - true
   * Goal 9. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I121 Branch 118 IFEQ L1275 - false
   */

  @Test
  public void test52()  throws Throwable  {
      HashMap<HashableCoreMap, Word> hashMap0 = new HashMap<HashableCoreMap, Word>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  //Test case number: 53
  /*
   * 15 covered goals:
   * Goal 1. wheel.json.JSONObject.has(Ljava/lang/String;)Z: root-Branch
   * Goal 2. wheel.json.JSONObject.put(Ljava/lang/String;J)Lwheel/json/JSONObject;: root-Branch
   * Goal 3. wheel.json.JSONObject.remove(Ljava/lang/String;)Ljava/lang/Object;: root-Branch
   * Goal 4. wheel.json.JSONObject.optBoolean(Ljava/lang/String;Z)Z: root-Branch
   * Goal 5. wheel.json.JSONObject.put(Ljava/lang/String;I)Lwheel/json/JSONObject;: root-Branch
   * Goal 6. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 26 IFNONNULL L346 - false
   * Goal 7. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I26 Branch 27 IFEQ L347 - true
   * Goal 8. wheel.json.JSONObject.get(Ljava/lang/String;)Ljava/lang/Object;: I12 Branch 38 IFNONNULL L421 - true
   * Goal 9. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I14 Branch 39 IFNE L439 - false
   * Goal 10. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I20 Branch 40 IFEQ L439 - true
   * Goal 11. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I41 Branch 42 IFNE L443 - true
   * Goal 12. wheel.json.JSONObject.put(Ljava/lang/String;Z)Lwheel/json/JSONObject;: I8 Branch 68 IFEQ L902 - false
   * Goal 13. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I20 Branch 70 IFNULL L978 - true
   * Goal 14. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I11 Branch 72 IFNULL L999 - false
   * Goal 15. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I6 Branch 91 IFNULL L1088 - true
   */

  @Test
  public void test53()  throws Throwable  {
      HashMap<IndexedWord, Long> hashMap0 = new HashMap<IndexedWord, Long>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("D}5N", (Object) null);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject1);
      
      JSONObject jSONObject2 = jSONObject1.put("D}5N", true);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertEquals(1, jSONObject2.length());
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject2);
      
      boolean boolean0 = jSONObject1.optBoolean("D}5N", true);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
      
      JSONObject jSONObject3 = jSONObject1.putOpt("D}5N", (Object) "D}5N");
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertEquals(1, jSONObject3.length());
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject3);
      
      boolean boolean1 = jSONObject2.has("D}5N");
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject3);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertEquals(1, jSONObject2.length());
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONObject jSONObject4 = jSONObject0.put("D}5N", (-762));
      assertSame(jSONObject4, jSONObject2);
      assertSame(jSONObject4, jSONObject1);
      assertSame(jSONObject4, jSONObject0);
      assertSame(jSONObject4, jSONObject3);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject3);
      assertEquals(1, jSONObject4.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject4);
      
      JSONObject jSONObject5 = jSONObject4.put("D}5N", (long) (-762));
      assertSame(jSONObject5, jSONObject4);
      assertSame(jSONObject5, jSONObject2);
      assertSame(jSONObject5, jSONObject1);
      assertSame(jSONObject5, jSONObject3);
      assertSame(jSONObject5, jSONObject0);
      assertSame(jSONObject4, jSONObject2);
      assertSame(jSONObject4, jSONObject1);
      assertSame(jSONObject4, jSONObject0);
      assertSame(jSONObject4, jSONObject5);
      assertSame(jSONObject4, jSONObject3);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject4);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject5);
      assertEquals(1, jSONObject5.length());
      assertEquals(1, jSONObject4.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject5);
  }

  //Test case number: 54
  /*
   * 8 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/util/Map;)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.<init>(Ljava/util/Map;)V: I11 Branch 16 IFNONNULL L234 - true
   * Goal 3. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 26 IFNONNULL L346 - true
   * Goal 4. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I52 Branch 28 IFEQ L350 - true
   * Goal 5. wheel.json.JSONObject.put(Ljava/lang/String;Z)Lwheel/json/JSONObject;: I8 Branch 68 IFEQ L902 - true
   * Goal 6. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 69 IFNONNULL L975 - false
   * Goal 7. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I14 Branch 92 IFEQ L1089 - true
   * Goal 8. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I45 Branch 95 IFEQ L1094 - true
   */

  @Test
  public void test54()  throws Throwable  {
      HashMap<TypesafeMap.Key<WordTag>, Tag> hashMap0 = new HashMap<TypesafeMap.Key<WordTag>, Tag>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "d6'F| HEdI*RDozi]");
      assertFalse(boolean0);
      
      JSONObject jSONObject1 = jSONObject0.put("d6'F| HEdI*RDozi]", false);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject1);
      
      HashMap<CoreLabel, Double> hashMap1 = new HashMap<CoreLabel, Double>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      JSONObject jSONObject2 = jSONObject1.accumulate("d6'F| HEdI*RDozi]", (Object) hashMap1);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject2.length());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONObject2);
      
      try {
        JSONObject jSONObject3 = jSONObject2.put((String) null, (Map) hashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
      }
  }

  //Test case number: 55
  /*
   * 50 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;D)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.<init>(Ljava/lang/String;)V: root-Branch
   * Goal 3. wheel.json.JSONObject.length()I: root-Branch
   * Goal 4. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I12 Branch 4 IF_ICMPEQ L178 - false
   * Goal 5. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I18 Branch 55 IFEQ L648 - false
   * Goal 6. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I37 Branch 56 IFNE L651 - true
   * Goal 7. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I6 Branch 57 IFNONNULL L662 - true
   * Goal 8. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I31 Branch 58 IFLE L670 - false
   * Goal 9. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I38 Branch 59 IFGE L670 - false
   * Goal 10. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I45 Branch 60 IFGE L670 - false
   * Goal 11. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I54 Branch 61 IFLE L671 - true
   * Goal 12. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I54 Branch 61 IFLE L671 - false
   * Goal 13. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I77 Branch 62 IFLE L674 - false
   * Goal 14. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 69 IFNONNULL L975 - true
   * Goal 15. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I20 Branch 70 IFNULL L978 - false
   * Goal 16. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I6 Branch 73 IFNULL L1015 - false
   * Goal 17. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I12 Branch 74 IFNE L1015 - true
   * Goal 18. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I51 Branch 75 IF_ICMPGE L1027 - true
   * Goal 19. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I51 Branch 75 IF_ICMPGE L1027 - false
   * Goal 20. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 76 LOOKUPSWITCH L1030 Case 8 - false
   * Goal 21. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 77 LOOKUPSWITCH L1030 Case 9 - false
   * Goal 22. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 78 LOOKUPSWITCH L1030 Case 10 - false
   * Goal 23. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 79 LOOKUPSWITCH L1030 Case 12 - false
   * Goal 24. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 80 LOOKUPSWITCH L1030 Case 13 - false
   * Goal 25. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 81 LOOKUPSWITCH L1030 Case 34 - true
   * Goal 26. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 81 LOOKUPSWITCH L1030 Case 34 - false
   * Goal 27. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 82 LOOKUPSWITCH L1030 Case 47 - false
   * Goal 28. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 83 LOOKUPSWITCH L1030 Case 92 - false
   * Goal 29. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 84 LOOKUPSWITCH L1030 Default-Case - true
   * Goal 30. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 84 LOOKUPSWITCH L1030 Default-Case - false
   * Goal 31. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I177 Branch 86 IF_ICMPLT L1058 - false
   * Goal 32. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I183 Branch 87 IF_ICMPLT L1058 - true
   * Goal 33. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I196 Branch 89 IF_ICMPLT L1058 - true
   * Goal 34. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I6 Branch 91 IFNULL L1088 - false
   * Goal 35. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I14 Branch 92 IFEQ L1089 - false
   * Goal 36. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I23 Branch 93 IFNE L1090 - false
   * Goal 37. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I30 Branch 94 IFEQ L1090 - true
   * Goal 38. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I11 Branch 103 IFNE L1190 - true
   * Goal 39. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I41 Branch 104 IF_ICMPNE L1197 - false
   * Goal 40. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I6 Branch 121 IFNULL L1304 - false
   * Goal 41. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I13 Branch 122 IFEQ L1304 - true
   * Goal 42. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I25 Branch 123 IFEQ L1308 - true
   * Goal 43. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I62 Branch 125 IFEQ L1317 - true
   * Goal 44. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I62 Branch 125 IFEQ L1317 - false
   * Goal 45. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I76 Branch 126 IFEQ L1320 - true
   * Goal 46. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I89 Branch 127 IFEQ L1323 - true
   * Goal 47. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I105 Branch 128 IFEQ L1326 - true
   * Goal 48. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I121 Branch 129 IFEQ L1329 - true
   * Goal 49. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I140 Branch 130 IFEQ L1332 - true
   * Goal 50. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I160 Branch 131 IFEQ L1335 - true
   */

  @Test
  public void test55()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONTokener jSONTokener0 = new JSONTokener("F+jR");
      assertTrue(jSONTokener0.more());
      assertNotNull(jSONTokener0);
      
      JSONObject jSONObject1 = jSONObject0.put("i\"_Lb#;tA!_S'#s\"2", (double) 1021);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONObject1);
      
      String string0 = jSONObject1.toString(1021, 1021);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(string0);
      assertEquals("{\"i\\\"_Lb#;tA!_S'#s\\\"2\": 1021}", string0);
      
      JSONArray jSONArray0 = jSONObject1.names();
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONArray0);
      
      String string1 = JSONObject.valueToString(jSONTokener0, 1021, 1021);
      assertNotSame(string1, string0);
      assertTrue(jSONTokener0.more());
      assertNotNull(string1);
      assertEquals("\" at character 0 of F+jR\"", string1);
      assertFalse(string1.equals((Object)string0));
      
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("i\"_Lb#;tA!_S'#s\"2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of i\"_Lb#;tA!_S'#s\"2
         //
      }
  }

  //Test case number: 56
  /*
   * 20 covered goals:
   * Goal 1. wheel.json.JSONObject.isNull(Ljava/lang/String;)Z: root-Branch
   * Goal 2. wheel.json.JSONObject.optInt(Ljava/lang/String;I)I: root-Branch
   * Goal 3. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I6 Branch 1 IFNULL L115 - true
   * Goal 4. wheel.json.JSONObject.<init>(Lwheel/json/JSONObject;[Ljava/lang/String;)V: I15 Branch 3 IF_ICMPGE L162 - true
   * Goal 5. wheel.json.JSONObject.<init>(Lwheel/json/JSONObject;[Ljava/lang/String;)V: I15 Branch 3 IF_ICMPGE L162 - false
   * Goal 6. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I7 Branch 31 IFNE L393 - false
   * Goal 7. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I13 Branch 32 IFEQ L393 - true
   * Goal 8. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I31 Branch 33 IFLE L400 - false
   * Goal 9. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I38 Branch 34 IFGE L400 - false
   * Goal 10. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I45 Branch 35 IFGE L400 - false
   * Goal 11. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I54 Branch 36 IFLE L401 - true
   * Goal 12. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I54 Branch 36 IFLE L401 - false
   * Goal 13. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I77 Branch 37 IFLE L404 - false
   * Goal 14. wheel.json.JSONObject.get(Ljava/lang/String;)Ljava/lang/Object;: I12 Branch 38 IFNONNULL L421 - false
   * Goal 15. wheel.json.JSONObject.opt(Ljava/lang/String;)Ljava/lang/Object;: I6 Branch 63 IFNONNULL L688 - true
   * Goal 16. wheel.json.JSONObject.opt(Ljava/lang/String;)Ljava/lang/Object;: I6 Branch 63 IFNONNULL L688 - false
   * Goal 17. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 71 IFNULL L999 - true
   * Goal 18. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 71 IFNULL L999 - false
   * Goal 19. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I11 Branch 72 IFNULL L999 - true
   * Goal 20. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I6 Branch 73 IFNULL L1015 - true
   */

  @Test
  public void test56()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      boolean boolean0 = jSONObject0.isNull("FjR");
      assertEquals(0, jSONObject0.length());
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "FjR";
      String string0 = JSONObject.doubleToString((double) 999);
      assertNotNull(string0);
      assertEquals("999", string0);
      
      int int0 = jSONObject0.optInt((String) null, 999);
      assertEquals(0, jSONObject0.length());
      assertEquals(999, int0);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, jSONObject1.length());
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  //Test case number: 57
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.keys()Ljava/util/Iterator;: root-Branch
   * Goal 2. wheel.json.JSONObject.<init>()V: root-Branch
   * Goal 3. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I18 Branch 55 IFEQ L648 - true
   * Goal 4. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I37 Branch 56 IFNE L651 - false
   */

  @Test
  public void test57()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      assertNotNull(jSONObject0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(0, jSONObject0.length());
      assertNull(jSONArray0);
  }
}
