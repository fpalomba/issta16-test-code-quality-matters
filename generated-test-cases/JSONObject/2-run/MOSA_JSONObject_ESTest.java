/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 18 04:37:35 GMT 2015
 */

package wheel.json;

import static org.junit.Assert.*;
import org.junit.Test;
import edu.stanford.nlp.ling.CategoryWordTag;
import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.ling.IndexedWord;
import edu.stanford.nlp.ling.Label;
import edu.stanford.nlp.ling.LabeledWord;
import edu.stanford.nlp.ling.Tag;
import edu.stanford.nlp.ling.TaggedWord;
import edu.stanford.nlp.ling.Word;
import edu.stanford.nlp.ling.WordLemmaTag;
import edu.stanford.nlp.ling.WordTag;
import edu.stanford.nlp.process.WordTokenFactory;
import edu.stanford.nlp.util.ArrayCoreMap;
import edu.stanford.nlp.util.DeltaIndex;
import edu.stanford.nlp.util.HashIndex;
import edu.stanford.nlp.util.HashableCoreMap;
import edu.stanford.nlp.util.Index;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I65 Branch 134 IFEQ L1365 - false
   */

  @Test
  public void test00()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<LabeledWord, Object> hashMap0 = new HashMap<LabeledWord, Object>();
      JSONObject jSONObject1 = jSONObject0.put("0rT`Ook<V iVS/FrU", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(36);
      StringWriter stringWriter1 = (StringWriter)jSONObject1.write((Writer) stringWriter0);
      assertEquals("{\"0rT`Ook<V iVS/FrU\":{}}", stringWriter0.toString());
      assertEquals("{\"0rT`Ook<V iVS/FrU\":{}}", stringWriter1.toString());
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I140 Branch 130 IFEQ L1332 - false
   */

  @Test
  public void test01()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashIndex<WordLemmaTag> hashIndex0 = new HashIndex<WordLemmaTag>();
      DeltaIndex<WordLemmaTag> deltaIndex0 = new DeltaIndex<WordLemmaTag>((Index<WordLemmaTag>) hashIndex0);
      JSONObject jSONObject1 = jSONObject0.append(" 6", (Object) deltaIndex0);
      String string0 = jSONObject0.toString((-188), 147);
      assertEquals("{\" 6\": [[]]}", string0);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I121 Branch 129 IFEQ L1329 - false
   */

  @Test
  public void test02()  throws Throwable  {
      HashMap<Short, ArrayCoreMap> hashMap0 = new HashMap<Short, ArrayCoreMap>();
      String string0 = JSONObject.valueToString(hashMap0, 3, (-1));
      assertEquals("{}", string0);
  }

  //Test case number: 3
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I91 Branch 85 IF_ICMPNE L1037 - true
   * Goal 2. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I11 Branch 103 IFNE L1190 - false
   * Goal 3. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I89 Branch 127 IFEQ L1323 - false
   */

  @Test
  public void test03()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<LabeledWord, Object> hashMap0 = new HashMap<LabeledWord, Object>();
      JSONObject jSONObject1 = jSONObject0.put("0rT`Ook<V iVS/FrU", (Map) hashMap0);
      String string0 = jSONObject1.toString((-188), 147);
      assertEquals("{\"0rT`Ook<V iVS/FrU\": {}}", string0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I6 Branch 121 IFNULL L1304 - true
   */

  @Test
  public void test04()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-3265), (-2134));
      assertEquals("null", string0);
  }

  //Test case number: 5
  /*
   * 8 covered goals:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I96 Branch 115 IFNE L1271 - true
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I156 Branch 120 IFEQ L1281 - false
   * Goal 3. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I21 Branch 132 IFEQ L1357 - true
   * Goal 4. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I21 Branch 132 IFEQ L1357 - false
   * Goal 5. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I28 Branch 133 IFEQ L1358 - true
   * Goal 6. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I28 Branch 133 IFEQ L1358 - false
   * Goal 7. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I65 Branch 134 IFEQ L1365 - true
   * Goal 8. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I84 Branch 135 IFEQ L1367 - true
   */

  @Test
  public void test05()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      PipedReader pipedReader0 = new PipedReader(518);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedWriter pipedWriter1 = (PipedWriter)jSONObject0.write((Writer) pipedWriter0);
      assertEquals(3, jSONObject0.length());
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.optString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I12 Branch 67 IFNULL L889 - false
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I138 Branch 119 IFEQ L1278 - false
   */

  @Test
  public void test06()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashIndex<WordLemmaTag> hashIndex0 = new HashIndex<WordLemmaTag>();
      DeltaIndex<WordLemmaTag> deltaIndex0 = new DeltaIndex<WordLemmaTag>((Index<WordLemmaTag>) hashIndex0);
      JSONObject jSONObject1 = jSONObject0.append(" 6", (Object) deltaIndex0);
      String string0 = jSONObject0.optString(" 6");
      assertEquals("[[]]", string0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I6 Branch 110 IFNULL L1253 - true
   */

  @Test
  public void test07()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  //Test case number: 8
  /*
   * 7 covered goals:
   * Goal 1. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I125 Branch 107 IF_ICMPGE L1211 - false
   * Goal 2. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I194 Branch 109 IF_ICMPGE L1221 - false
   * Goal 3. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I105 Branch 128 IFEQ L1326 - true
   * Goal 4. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I121 Branch 129 IFEQ L1329 - true
   * Goal 5. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I140 Branch 130 IFEQ L1332 - true
   * Goal 6. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I160 Branch 131 IFEQ L1335 - true
   * Goal 7. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I160 Branch 131 IFEQ L1335 - false
   */

  @Test
  public void test08()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String string0 = jSONObject0.toString(1394, 1394);
      assertEquals("{\nbytes\": [],\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \"class\": \"class java.lang.String\",\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \"empty\": true\n}", string0);
  }

  //Test case number: 9
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.toString()Ljava/lang/String;: I28 Branch 102 IF_ICMPLE L1141 - false
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I121 Branch 118 IFEQ L1275 - true
   * Goal 3. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I138 Branch 119 IFEQ L1278 - true
   * Goal 4. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I156 Branch 120 IFEQ L1281 - true
   */

  @Test
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      HashMap<HashableCoreMap, JSONObject> hashMap0 = new HashMap<HashableCoreMap, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  //Test case number: 10
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I12 Branch 99 IFNE L1113 - true
   * Goal 2. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I34 Branch 100 IF_ICMPGE L1117 - true
   * Goal 3. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I34 Branch 100 IF_ICMPGE L1117 - false
   */

  @Test
  public void test10()  throws Throwable  {
      HashMap<WordTag, CategoryWordTag> hashMap0 = new HashMap<WordTag, CategoryWordTag>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float((float) 2422);
      JSONObject jSONObject1 = jSONObject0.append("!>", (Object) float0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("!>");
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray1.length());
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I6 Branch 98 IFNULL L1113 - true
   */

  @Test
  public void test11()  throws Throwable  {
      HashMap<WordTag, CategoryWordTag> hashMap0 = new HashMap<WordTag, CategoryWordTag>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I61 Branch 97 IFEQ L1095 - false
   */

  @Test
  public void test12()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try {
        String string0 = JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
      }
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I54 Branch 96 IFNE L1095 - true
   */

  @Test
  public void test13()  throws Throwable  {
      try {
        String string0 = JSONObject.numberToString((Number) Float.NEGATIVE_INFINITY);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
      }
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I30 Branch 94 IFEQ L1090 - false
   */

  @Test
  public void test14()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try {
        String string0 = JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
      }
  }

  //Test case number: 15
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I78 Branch 19 IFLE L270 - false
   * Goal 2. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I107 Branch 22 IFNE L273 - true
   * Goal 3. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I177 Branch 86 IF_ICMPLT L1058 - true
   */

  @Test
  public void test15()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject((Object) double0);
      try {
        JSONArray jSONArray0 = jSONObject0.getJSONArray("VgA\u0007jXfv.<e^ye}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"VgA\\u0007jXfv.<e^ye}\"] not found.
         //
      }
  }

  //Test case number: 16
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 82 LOOKUPSWITCH L1030 Case 47 - true
   * Goal 2. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I91 Branch 85 IF_ICMPNE L1037 - false
   */

  @Test
  public void test16()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try {
        JSONObject jSONObject1 = jSONObject0.getJSONObject("</node>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<\\/node>\"] not found.
         //
      }
  }

  //Test case number: 17
  /*
   * 12 covered goals:
   * Goal 1. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I6 Branch 1 IFNULL L115 - true
   * Goal 2. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 78 LOOKUPSWITCH L1030 Case 10 - true
   * Goal 3. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I41 Branch 104 IF_ICMPNE L1197 - true
   * Goal 4. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I84 Branch 105 IFEQ L1204 - true
   * Goal 5. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I84 Branch 105 IFEQ L1204 - false
   * Goal 6. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I98 Branch 106 IF_ICMPLE L1206 - true
   * Goal 7. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I98 Branch 106 IF_ICMPLE L1206 - false
   * Goal 8. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I125 Branch 107 IF_ICMPGE L1211 - true
   * Goal 9. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I177 Branch 108 IF_ICMPLE L1219 - false
   * Goal 10. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I194 Branch 109 IF_ICMPGE L1221 - true
   * Goal 11. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I13 Branch 122 IFEQ L1304 - false
   * Goal 12. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I76 Branch 126 IFEQ L1320 - false
   */

  @Test
  public void test17()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(63, true);
      JSONObject jSONObject0 = jSONArray1.toJSONObject(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("{\n                                                               \"null\": null,\n                                                               \"true\": true\n}", false);
      String string0 = jSONObject0.toString(0);
      assertEquals("{\n\"null\": null,\n\"true\": true,\n\"{\\n                                                               \\\"null\\\": null,\\n                                                               \\\"true\\\": true\\n}\": false\n}", string0);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 77 LOOKUPSWITCH L1030 Case 9 - true
   */

  @Test
  public void test18()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<LabeledWord, Object> hashMap0 = new HashMap<LabeledWord, Object>();
      JSONObject jSONObject1 = jSONObject0.put("inputLayerWeights.length=\t%d%n", (Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertEquals("{\"inputLayerWeights.length=\\t%d%n\":{}}", string0);
      assertNotNull(string0);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I6 Branch 73 IFNULL L1015 - true
   */

  @Test
  public void test19()  throws Throwable  {
      HashMap<WordTag, CategoryWordTag> hashMap0 = new HashMap<WordTag, CategoryWordTag>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try {
        JSONObject jSONObject1 = jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
      }
  }

  //Test case number: 20
  /*
   * 5 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONObject;[Ljava/lang/String;)V: I15 Branch 3 IF_ICMPGE L162 - true
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONObject;[Ljava/lang/String;)V: I15 Branch 3 IF_ICMPGE L162 - false
   * Goal 3. wheel.json.JSONObject.opt(Ljava/lang/String;)Ljava/lang/Object;: I6 Branch 63 IFNONNULL L688 - false
   * Goal 4. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 71 IFNULL L999 - true
   * Goal 5. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I11 Branch 72 IFNULL L999 - true
   */

  @Test
  public void test20()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "{\"class\": \"class java.lang.Object\"}";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  //Test case number: 21
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.remove(Ljava/lang/String;)Ljava/lang/Object;: root-Branch
   * Goal 2. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I20 Branch 70 IFNULL L978 - true
   */

  @Test
  public void test21()  throws Throwable  {
      IndexedWord indexedWord0 = new IndexedWord();
      CoreLabel coreLabel0 = indexedWord0.backingLabel();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject((Object) coreLabel0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put(": ", (Object) null);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 22
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/lang/Object;[Ljava/lang/String;)V: I20 Branch 25 IF_ICMPGE L304 - true
   * Goal 2. wheel.json.JSONObject.<init>(Ljava/lang/Object;[Ljava/lang/String;)V: I20 Branch 25 IF_ICMPGE L304 - false
   * Goal 3. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 69 IFNONNULL L975 - false
   */

  @Test
  public void test22()  throws Throwable  {
      IndexedWord indexedWord0 = new IndexedWord();
      CoreLabel coreLabel0 = indexedWord0.backingLabel();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject((Object) coreLabel0, stringArray0);
      try {
        JSONObject jSONObject1 = jSONObject0.put((String) null, (-115.54804212883222));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
      }
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Z)Lwheel/json/JSONObject;: I8 Branch 68 IFEQ L902 - false
   */

  @Test
  public void test23()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject", true);
      assertEquals(2, jSONObject0.length());
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 66 IFEQ L829 - false
   */

  @Test
  public void test24()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<LabeledWord, Object> hashMap0 = new HashMap<LabeledWord, Object>();
      JSONObject jSONObject1 = jSONObject0.put("inputLayerWeights.length=\t%d%n", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("inputLayerWeights.length=\t%d%n");
      assertNotSame(jSONObject2, jSONObject0);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 66 IFEQ L829 - true
   */

  @Test
  public void test25()  throws Throwable  {
      WordTokenFactory wordTokenFactory0 = new WordTokenFactory();
      Word word0 = wordTokenFactory0.makeToken(".PV(D*X]$;@E8Ld|", 0, 0);
      JSONObject jSONObject0 = new JSONObject((Object) word0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("getsetEndPosition");
      assertEquals(1, jSONObject0.length());
  }

  //Test case number: 26
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.optJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 65 IFEQ L815 - false
   * Goal 2. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I6 Branch 98 IFNULL L1113 - false
   * Goal 3. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I12 Branch 99 IFNE L1113 - false
   */

  @Test
  public void test26()  throws Throwable  {
      HashMap<WordTag, CategoryWordTag> hashMap0 = new HashMap<WordTag, CategoryWordTag>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashIndex<WordLemmaTag> hashIndex0 = new HashIndex<WordLemmaTag>(5772);
      DeltaIndex<WordLemmaTag> deltaIndex0 = new DeltaIndex<WordLemmaTag>((Index<WordLemmaTag>) hashIndex0);
      JSONObject jSONObject1 = jSONObject0.put("!>", (Collection) deltaIndex0);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("!>");
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 65 IFEQ L815 - true
   */

  @Test
  public void test27()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("false");
      assertNull(jSONArray0);
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optDouble(Ljava/lang/String;D)D: I13 Branch 64 IFEQ L764 - false
   */

  @Test
  public void test28()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getcompare", 0L);
      double double0 = jSONObject0.optDouble("getcompare");
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I77 Branch 62 IFLE L674 - true
   */

  @Test
  public void test29()  throws Throwable  {
      Double double0 = new Double((-0.18152660323252953));
      String string0 = JSONObject.valueToString(double0, 38, 38);
      assertEquals("-0.18152660323252953", string0);
  }

  //Test case number: 30
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I45 Branch 60 IFGE L670 - true
   */

  @Test
  public void test30()  throws Throwable  {
      String string0 = JSONObject.numberToString((Number) 1.7976931348623157E308);
      assertEquals("1.7976931348623157E308", string0);
  }

  //Test case number: 31
  /*
   * 20 covered goals:
   * Goal 1. wheel.json.JSONObject.toString(I)Ljava/lang/String;: root-Branch
   * Goal 2. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I31 Branch 58 IFLE L670 - false
   * Goal 3. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I38 Branch 59 IFGE L670 - false
   * Goal 4. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I45 Branch 60 IFGE L670 - false
   * Goal 5. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I54 Branch 61 IFLE L671 - true
   * Goal 6. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I54 Branch 61 IFLE L671 - false
   * Goal 7. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I77 Branch 62 IFLE L674 - false
   * Goal 8. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I45 Branch 95 IFEQ L1094 - false
   * Goal 9. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I54 Branch 96 IFNE L1095 - false
   * Goal 10. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I61 Branch 97 IFEQ L1095 - true
   * Goal 11. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I11 Branch 103 IFNE L1190 - true
   * Goal 12. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I41 Branch 104 IF_ICMPNE L1197 - false
   * Goal 13. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I6 Branch 121 IFNULL L1304 - false
   * Goal 14. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I13 Branch 122 IFEQ L1304 - true
   * Goal 15. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I25 Branch 123 IFEQ L1308 - true
   * Goal 16. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I62 Branch 125 IFEQ L1317 - true
   * Goal 17. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I62 Branch 125 IFEQ L1317 - false
   * Goal 18. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I76 Branch 126 IFEQ L1320 - true
   * Goal 19. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I89 Branch 127 IFEQ L1323 - true
   * Goal 20. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I105 Branch 128 IFEQ L1326 - false
   */

  @Test
  public void test31()  throws Throwable  {
      HashMap<WordTag, CategoryWordTag> hashMap0 = new HashMap<WordTag, CategoryWordTag>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float((float) 2422);
      JSONObject jSONObject1 = jSONObject0.append("!>", (Object) float0);
      String string0 = jSONObject0.toString(2259);
      assertEquals("{\"!>\": [2422]}", string0);
  }

  //Test case number: 32
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I6 Branch 57 IFNONNULL L662 - false
   */

  @Test
  public void test32()  throws Throwable  {
      try {
        String string0 = JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
      }
  }

  //Test case number: 33
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I6 Branch 57 IFNONNULL L662 - true
   * Goal 2. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I31 Branch 58 IFLE L670 - true
   * Goal 3. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I82 Branch 114 IFEQ L1268 - false
   */

  @Test
  public void test33()  throws Throwable  {
      Integer integer0 = new Integer(2422);
      String string0 = JSONObject.valueToString(integer0);
      assertEquals("2422", string0);
  }

  //Test case number: 34
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I37 Branch 56 IFNE L651 - false
   */

  @Test
  public void test34()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  //Test case number: 35
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I40 Branch 53 IFNE L574 - false
   */

  @Test
  public void test35()  throws Throwable  {
      CategoryWordTag categoryWordTag0 = new CategoryWordTag("Null pointer");
      WordTag wordTag0 = new WordTag((Label) categoryWordTag0, (Label) categoryWordTag0);
      String[] stringArray0 = JSONObject.getNames((Object) wordTag0);
      assertNull(stringArray0);
  }

  //Test case number: 36
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I6 Branch 52 IFNONNULL L568 - false
   */

  @Test
  public void test36()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  //Test case number: 37
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I6 Branch 52 IFNONNULL L568 - true
   * Goal 2. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I40 Branch 53 IFNE L574 - true
   * Goal 3. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I60 Branch 54 IF_ICMPGE L578 - true
   * Goal 4. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I60 Branch 54 IF_ICMPGE L578 - false
   */

  @Test
  public void test37()  throws Throwable  {
      Short short0 = new Short((short)2312);
      JSONObject jSONObject0 = new JSONObject((Object) short0);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertNotNull(stringArray0);
  }

  //Test case number: 38
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I11 Branch 50 IFNE L548 - false
   */

  @Test
  public void test38()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  //Test case number: 39
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.length()I: root-Branch
   * Goal 2. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I11 Branch 50 IFNE L548 - true
   * Goal 3. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I37 Branch 51 IFEQ L554 - true
   * Goal 4. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I37 Branch 51 IFEQ L554 - false
   */

  @Test
  public void test39()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  //Test case number: 40
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getLong(Ljava/lang/String;)J: I13 Branch 49 IFEQ L536 - false
   */

  @Test
  public void test40()  throws Throwable  {
      WordTokenFactory wordTokenFactory0 = new WordTokenFactory();
      Word word0 = wordTokenFactory0.makeToken(".PV(D*X]$;@E8Ld|", 0, 0);
      JSONObject jSONObject0 = new JSONObject((Object) word0);
      JSONObject jSONObject1 = jSONObject0.put(".PV(D*X]$;@E8Ld|", 0L);
      long long0 = jSONObject1.getLong(".PV(D*X]$;@E8Ld|");
      assertEquals(2, jSONObject0.length());
  }

  //Test case number: 41
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getLong(Ljava/lang/String;)J: I13 Branch 49 IFEQ L536 - true
   */

  @Test
  public void test41()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("com", (Object) jSONObject0);
      long long0 = jSONObject0.optLong("com", 0L);
      assertEquals(0L, long0);
  }

  //Test case number: 42
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 48 IFEQ L517 - true
   */

  @Test
  public void test42()  throws Throwable  {
      WordTokenFactory wordTokenFactory0 = new WordTokenFactory();
      Word word0 = wordTokenFactory0.makeToken(".PV(D*X]$;@E8Ld|", 0, 0);
      JSONObject jSONObject0 = new JSONObject((Object) word0);
      JSONObject jSONObject1 = jSONObject0.putOpt(".PV(D*X]$;@E8Ld|", (Object) word0);
      try {
        JSONObject jSONObject2 = jSONObject1.getJSONObject(".PV(D*X]$;@E8Ld|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".PV(D*X]$;@E8Ld|\"] is not a JSONObject.
         //
      }
  }

  //Test case number: 43
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 47 IFEQ L499 - true
   */

  @Test
  public void test43()  throws Throwable  {
      HashMap<IndexedWord, TaggedWord> hashMap0 = new HashMap<IndexedWord, TaggedWord>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      WordLemmaTag wordLemmaTag0 = new WordLemmaTag("", "N", "N");
      JSONObject jSONObject1 = jSONObject0.put("", (Object) wordLemmaTag0);
      try {
        JSONArray jSONArray0 = jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
      }
  }

  //Test case number: 44
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getInt(Ljava/lang/String;)I: I13 Branch 46 IFEQ L484 - false
   */

  @Test
  public void test44()  throws Throwable  {
      HashMap<WordTag, CategoryWordTag> hashMap0 = new HashMap<WordTag, CategoryWordTag>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("com", 1L);
      int int0 = jSONObject1.getInt("com");
      assertEquals(1, int0);
  }

  //Test case number: 45
  /*
   * 5 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;D)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.getDouble(Ljava/lang/String;)D: I13 Branch 45 IFEQ L463 - false
   * Goal 3. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I14 Branch 92 IFEQ L1089 - false
   * Goal 4. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I23 Branch 93 IFNE L1090 - false
   * Goal 5. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I30 Branch 94 IFEQ L1090 - true
   */

  @Test
  public void test45()  throws Throwable  {
      HashMap<WordTag, CategoryWordTag> hashMap0 = new HashMap<WordTag, CategoryWordTag>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("JSON does not allow non-finite numbers.", 0.0);
      double double0 = jSONObject0.getDouble("JSON does not allow non-finite numbers.");
      assertEquals(0.0, double0, 0.01D);
  }

  //Test case number: 46
  /*
   * 5 covered goals:
   * Goal 1. wheel.json.JSONObject.optBoolean(Ljava/lang/String;)Z: root-Branch
   * Goal 2. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I14 Branch 39 IFNE L439 - false
   * Goal 3. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I20 Branch 40 IFEQ L439 - true
   * Goal 4. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I41 Branch 42 IFNE L443 - false
   * Goal 5. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I47 Branch 43 IFEQ L443 - true
   */

  @Test
  public void test46()  throws Throwable  {
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("A JSONObject text must end with '}'", (Map) hashMap0);
      boolean boolean0 = jSONObject1.optBoolean("A JSONObject text must end with '}'");
      assertFalse(boolean0);
  }

  //Test case number: 47
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.optBoolean(Ljava/lang/String;Z)Z: root-Branch
   * Goal 2. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I14 Branch 39 IFNE L439 - true
   * Goal 3. wheel.json.JSONObject.put(Ljava/lang/String;Z)Lwheel/json/JSONObject;: I8 Branch 68 IFEQ L902 - true
   */

  @Test
  public void test47()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(63, true);
      JSONObject jSONObject0 = jSONArray1.toJSONObject(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("{\n                                                                                                                              \"null\": null,\n                                                                                                                              \"true\": true\n                                                               }", false);
      boolean boolean0 = jSONObject0.optBoolean("{\n                                                                                                                              \"null\": null,\n                                                                                                                              \"true\": true\n                                                               }", false);
      assertFalse(boolean0);
  }

  //Test case number: 48
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I54 Branch 36 IFLE L401 - false
   * Goal 2. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I77 Branch 37 IFLE L404 - false
   */

  @Test
  public void test48()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  //Test case number: 49
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I45 Branch 35 IFGE L400 - true
   */

  @Test
  public void test49()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1.0E-8);
      assertEquals("1.0E-8", string0);
  }

  //Test case number: 50
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I13 Branch 32 IFEQ L393 - false
   */

  @Test
  public void test50()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  //Test case number: 51
  /*
   * 7 covered goals:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I7 Branch 31 IFNE L393 - false
   * Goal 2. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I13 Branch 32 IFEQ L393 - true
   * Goal 3. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I31 Branch 33 IFLE L400 - false
   * Goal 4. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I38 Branch 34 IFGE L400 - false
   * Goal 5. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I45 Branch 35 IFGE L400 - false
   * Goal 6. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I54 Branch 36 IFLE L401 - true
   * Goal 7. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I77 Branch 37 IFLE L404 - true
   */

  @Test
  public void test51()  throws Throwable  {
      String string0 = JSONObject.doubleToString(3083.465);
      assertEquals("3083.465", string0);
  }

  //Test case number: 52
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I7 Branch 31 IFNE L393 - true
   */

  @Test
  public void test52()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NEGATIVE_INFINITY);
      assertEquals("null", string0);
  }

  //Test case number: 53
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;J)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I39 Branch 30 IFEQ L376 - true
   * Goal 3. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I6 Branch 91 IFNULL L1088 - true
   */

  @Test
  public void test53()  throws Throwable  {
      HashMap<WordTag, CategoryWordTag> hashMap0 = new HashMap<WordTag, CategoryWordTag>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Y~3fD )'hM~CK_QqJ", 1L);
      try {
        JSONObject jSONObject2 = jSONObject1.append("Y~3fD )'hM~CK_QqJ", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[Y~3fD )'hM~CK_QqJ] is not a JSONArray.
         //
      }
  }

  //Test case number: 54
  /*
   * 17 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/util/Map;)V: I11 Branch 16 IFNONNULL L234 - false
   * Goal 2. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 29 IFNONNULL L374 - false
   * Goal 3. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 81 LOOKUPSWITCH L1030 Case 34 - true
   * Goal 4. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 84 LOOKUPSWITCH L1030 Default-Case - false
   * Goal 5. wheel.json.JSONObject.toString()Ljava/lang/String;: I19 Branch 101 IFEQ L1140 - true
   * Goal 6. wheel.json.JSONObject.toString()Ljava/lang/String;: I19 Branch 101 IFEQ L1140 - false
   * Goal 7. wheel.json.JSONObject.toString()Ljava/lang/String;: I28 Branch 102 IF_ICMPLE L1141 - true
   * Goal 8. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I6 Branch 110 IFNULL L1253 - false
   * Goal 9. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I13 Branch 111 IFEQ L1253 - true
   * Goal 10. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I25 Branch 112 IFEQ L1256 - true
   * Goal 11. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I82 Branch 114 IFEQ L1268 - true
   * Goal 12. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I96 Branch 115 IFNE L1271 - false
   * Goal 13. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I102 Branch 116 IFNE L1271 - true
   * Goal 14. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I102 Branch 116 IFNE L1271 - false
   * Goal 15. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I108 Branch 117 IFEQ L1271 - true
   * Goal 16. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I108 Branch 117 IFEQ L1271 - false
   * Goal 17. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I121 Branch 118 IFEQ L1275 - false
   */

  @Test
  public void test54()  throws Throwable  {
      HashMap<IndexedWord, TaggedWord> hashMap0 = new HashMap<IndexedWord, TaggedWord>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.append("\" ", (Object) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject1);
      assertEquals("{\"\\\" \":[{}]}", string0);
      assertNotNull(string0);
  }

  //Test case number: 55
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 29 IFNONNULL L374 - true
   * Goal 2. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I39 Branch 30 IFEQ L376 - false
   */

  @Test
  public void test55()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashIndex<WordLemmaTag> hashIndex0 = new HashIndex<WordLemmaTag>();
      DeltaIndex<WordLemmaTag> deltaIndex0 = new DeltaIndex<WordLemmaTag>((Index<WordLemmaTag>) hashIndex0);
      JSONObject jSONObject1 = jSONObject0.put(" 6", (Collection) hashIndex0);
      JSONObject jSONObject2 = jSONObject1.append(" 6", (Object) deltaIndex0);
      assertSame(jSONObject0, jSONObject2);
  }

  //Test case number: 56
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/util/Collection;)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I52 Branch 28 IFEQ L350 - false
   */

  @Test
  public void test56()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedHashSet<Short> linkedHashSet0 = new LinkedHashSet<Short>();
      JSONObject jSONObject1 = jSONObject0.put("\n", (Collection) linkedHashSet0);
      JSONObject jSONObject2 = jSONObject1.accumulate("\n", (Object) jSONObject1);
      assertSame(jSONObject0, jSONObject2);
  }

  //Test case number: 57
  /*
   * 6 covered goals:
   * Goal 1. wheel.json.JSONObject.keys()Ljava/util/Iterator;: root-Branch
   * Goal 2. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 26 IFNONNULL L346 - false
   * Goal 3. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I26 Branch 27 IFEQ L347 - false
   * Goal 4. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I18 Branch 55 IFEQ L648 - true
   * Goal 5. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I18 Branch 55 IFEQ L648 - false
   * Goal 6. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I37 Branch 56 IFNE L651 - true
   */

  @Test
  public void test57()  throws Throwable  {
      Short short0 = new Short((short)2312);
      JSONObject jSONObject0 = new JSONObject((Object) short0);
      JSONArray jSONArray0 = jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.accumulate("A JSONObject text must end with '}'", (Object) jSONArray0);
      assertEquals(2, jSONObject0.length());
  }

  //Test case number: 58
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 26 IFNONNULL L346 - true
   * Goal 2. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I52 Branch 28 IFEQ L350 - true
   * Goal 3. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 71 IFNULL L999 - false
   * Goal 4. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I11 Branch 72 IFNULL L999 - false
   */

  @Test
  public void test58()  throws Throwable  {
      Tag tag0 = new Tag();
      JSONObject jSONObject0 = new JSONObject((Object) tag0);
      CategoryWordTag categoryWordTag0 = new CategoryWordTag("issetFromString");
      JSONObject jSONObject1 = jSONObject0.putOpt("issetFromString", (Object) categoryWordTag0);
      JSONObject jSONObject2 = jSONObject1.accumulate("issetFromString", (Object) categoryWordTag0);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject2.length());
  }

  //Test case number: 59
  /*
   * 5 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I86 Branch 10 IF_ICMPEQ L202 - true
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I105 Branch 11 LOOKUPSWITCH L211 Case 44 - true
   * Goal 3. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I105 Branch 13 LOOKUPSWITCH L211 Case 125 - true
   * Goal 4. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I105 Branch 14 LOOKUPSWITCH L211 Default-Case - false
   * Goal 5. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I114 Branch 15 IF_ICMPNE L214 - true
   */

  @Test
  public void test59()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\n                                                                                                                              \"null\": null,\n                                                                                                                              \"true\": true\n                                                               }");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(2, jSONObject0.length());
  }

  //Test case number: 60
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I61 Branch 8 IF_ICMPNE L198 - true
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I86 Branch 10 IF_ICMPEQ L202 - false
   */

  @Test
  public void test60()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{T.nv}.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 6 of {T.nv}.
         //
      }
  }

  //Test case number: 61
  /*
   * 7 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 7 LOOKUPSWITCH L183 Default-Case - true
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I61 Branch 8 IF_ICMPNE L198 - false
   * Goal 3. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I70 Branch 9 IF_ICMPEQ L199 - false
   * Goal 4. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I105 Branch 11 LOOKUPSWITCH L211 Case 44 - false
   * Goal 5. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I105 Branch 12 LOOKUPSWITCH L211 Case 59 - false
   * Goal 6. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I105 Branch 13 LOOKUPSWITCH L211 Case 125 - false
   * Goal 7. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I105 Branch 14 LOOKUPSWITCH L211 Default-Case - true
   */

  @Test
  public void test61()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{VJ|M=lf@|= __[(@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 11 of {VJ|M=lf@|= __[(@
         //
      }
  }

  //Test case number: 62
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 5 LOOKUPSWITCH L183 Case 0 - true
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 6 LOOKUPSWITCH L183 Case 125 - false
   */

  @Test
  public void test62()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
      }
  }

  //Test case number: 63
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I12 Branch 4 IF_ICMPEQ L178 - false
   */

  @Test
  public void test63()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("ty1/)7N");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ty1/)7N
         //
      }
  }

  //Test case number: 64
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.isNull(Ljava/lang/String;)Z: root-Branch
   * Goal 2. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I6 Branch 1 IFNULL L115 - false
   * Goal 3. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I12 Branch 2 IF_ACMPNE L115 - true
   */

  @Test
  public void test64()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<LabeledWord, Object> hashMap0 = new HashMap<LabeledWord, Object>();
      JSONObject jSONObject1 = jSONObject0.put("0rT`ok<V iVS/FrU", (Map) hashMap0);
      boolean boolean0 = jSONObject1.isNull("0rT`ok<V iVS/FrU");
      assertFalse(boolean0);
  }

  //Test case number: 65
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.optInt(Ljava/lang/String;I)I: root-Branch
   * Goal 2. wheel.json.JSONObject.optInt(Ljava/lang/String;)I: root-Branch
   */

  @Test
  public void test65()  throws Throwable  {
      HashMap<WordTag, CategoryWordTag> hashMap0 = new HashMap<WordTag, CategoryWordTag>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("4;DQjD<");
      assertEquals(0, int0);
  }

  //Test case number: 66
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;I)Lwheel/json/JSONObject;: root-Branch
   */

  @Test
  public void test66()  throws Throwable  {
      Short short0 = new Short((short)2312);
      JSONObject jSONObject0 = new JSONObject((Object) short0);
      JSONObject jSONObject1 = jSONObject0.put("A JSONObject text must end with '}'", (int) (short)2312);
      assertEquals(2, jSONObject0.length());
  }

  //Test case number: 67
  /*
   * 17 covered goals:
   * Goal 1. wheel.json.JSONObject.optLong(Ljava/lang/String;J)J: root-Branch
   * Goal 2. wheel.json.JSONObject.optLong(Ljava/lang/String;)J: root-Branch
   * Goal 3. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I12 Branch 74 IFNE L1015 - true
   * Goal 4. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I51 Branch 75 IF_ICMPGE L1027 - true
   * Goal 5. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I51 Branch 75 IF_ICMPGE L1027 - false
   * Goal 6. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 76 LOOKUPSWITCH L1030 Case 8 - false
   * Goal 7. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 77 LOOKUPSWITCH L1030 Case 9 - false
   * Goal 8. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 78 LOOKUPSWITCH L1030 Case 10 - false
   * Goal 9. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 79 LOOKUPSWITCH L1030 Case 12 - false
   * Goal 10. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 80 LOOKUPSWITCH L1030 Case 13 - false
   * Goal 11. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 81 LOOKUPSWITCH L1030 Case 34 - false
   * Goal 12. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 82 LOOKUPSWITCH L1030 Case 47 - false
   * Goal 13. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 83 LOOKUPSWITCH L1030 Case 92 - false
   * Goal 14. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 84 LOOKUPSWITCH L1030 Default-Case - true
   * Goal 15. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I177 Branch 86 IF_ICMPLT L1058 - false
   * Goal 16. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I183 Branch 87 IF_ICMPLT L1058 - true
   * Goal 17. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I196 Branch 89 IF_ICMPLT L1058 - true
   */

  @Test
  public void test67()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong(".$$.");
      assertEquals(0L, long0);
  }

  //Test case number: 68
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.optString(Ljava/lang/String;)Ljava/lang/String;: root-Branch
   * Goal 2. wheel.json.JSONObject.optString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I12 Branch 67 IFNULL L889 - true
   */

  @Test
  public void test68()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString(" 6");
      assertEquals("", string0);
  }

  //Test case number: 69
  /*
   * 5 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/lang/String;)V: root-Branch
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I12 Branch 4 IF_ICMPEQ L178 - true
   * Goal 3. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 5 LOOKUPSWITCH L183 Case 0 - false
   * Goal 4. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 6 LOOKUPSWITCH L183 Case 125 - true
   * Goal 5. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 7 LOOKUPSWITCH L183 Default-Case - false
   */

  @Test
  public void test69()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 70
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/util/Map;)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.get(Ljava/lang/String;)Ljava/lang/Object;: I12 Branch 38 IFNONNULL L421 - true
   * Goal 3. wheel.json.JSONObject.getJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 48 IFEQ L517 - false
   */

  @Test
  public void test70()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<LabeledWord, Object> hashMap0 = new HashMap<LabeledWord, Object>();
      JSONObject jSONObject1 = jSONObject0.put("0rT`Ook<V iVS/FrU", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.getJSONObject("0rT`Ook<V iVS/FrU");
      assertNotSame(jSONObject2, jSONObject1);
  }

  //Test case number: 71
  /*
   * 15 covered goals:
   * Goal 1. wheel.json.JSONObject.getString(Ljava/lang/String;)Ljava/lang/String;: root-Branch
   * Goal 2. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I33 Branch 17 IF_ICMPGE L263 - true
   * Goal 3. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I33 Branch 17 IF_ICMPGE L263 - false
   * Goal 4. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I58 Branch 18 IFLE L268 - true
   * Goal 5. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I58 Branch 18 IFLE L268 - false
   * Goal 6. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I78 Branch 19 IFLE L270 - true
   * Goal 7. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I92 Branch 20 IFLE L273 - true
   * Goal 8. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I92 Branch 20 IFLE L273 - false
   * Goal 9. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I100 Branch 21 IFEQ L273 - false
   * Goal 10. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I107 Branch 22 IFNE L273 - false
   * Goal 11. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I116 Branch 23 IF_ICMPNE L276 - true
   * Goal 12. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I135 Branch 24 IFNE L278 - false
   * Goal 13. wheel.json.JSONObject.get(Ljava/lang/String;)Ljava/lang/Object;: I12 Branch 38 IFNONNULL L421 - false
   * Goal 14. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I6 Branch 73 IFNULL L1015 - false
   * Goal 15. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I12 Branch 74 IFNE L1015 - false
   */

  @Test
  public void test71()  throws Throwable  {
      WordTokenFactory wordTokenFactory0 = new WordTokenFactory();
      Word word0 = wordTokenFactory0.makeToken(".PV(D*X]$;@E8Ld|", 0, 0);
      JSONObject jSONObject0 = new JSONObject((Object) word0);
      try {
        String string0 = jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
      }
  }

  //Test case number: 72
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.optDouble(Ljava/lang/String;)D: root-Branch
   * Goal 2. wheel.json.JSONObject.<init>(Ljava/util/Map;)V: I11 Branch 16 IFNONNULL L234 - true
   * Goal 3. wheel.json.JSONObject.opt(Ljava/lang/String;)Ljava/lang/Object;: I6 Branch 63 IFNONNULL L688 - true
   * Goal 4. wheel.json.JSONObject.optDouble(Ljava/lang/String;D)D: I13 Branch 64 IFEQ L764 - true
   */

  @Test
  public void test72()  throws Throwable  {
      HashMap<WordTag, CategoryWordTag> hashMap0 = new HashMap<WordTag, CategoryWordTag>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("ro");
      assertEquals(Double.NaN, double0, 0.01D);
  }

  //Test case number: 73
  /*
   * 8 covered goals:
   * Goal 1. wheel.json.JSONObject.has(Ljava/lang/String;)Z: root-Branch
   * Goal 2. wheel.json.JSONObject.<init>()V: root-Branch
   * Goal 3. wheel.json.JSONObject$Null.toString()Ljava/lang/String;: root-Branch
   * Goal 4. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 69 IFNONNULL L975 - true
   * Goal 5. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I20 Branch 70 IFNULL L978 - false
   * Goal 6. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I6 Branch 91 IFNULL L1088 - false
   * Goal 7. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I14 Branch 92 IFEQ L1089 - true
   * Goal 8. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I45 Branch 95 IFEQ L1094 - true
   */

  @Test
  public void test73()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(63, true);
      JSONObject jSONObject0 = jSONArray1.toJSONObject(jSONArray0);
      boolean boolean0 = jSONObject0.has("iswait");
      assertEquals(2, jSONObject0.length());
  }
}
