/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 18 03:33:59 GMT 2015
 */

package wheel.json;

import static org.junit.Assert.*;
import org.junit.Test;
import edu.stanford.nlp.ling.CategoryWordTag;
import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.ling.IndexedWord;
import edu.stanford.nlp.ling.LabeledWord;
import edu.stanford.nlp.ling.StringLabel;
import edu.stanford.nlp.ling.Tag;
import edu.stanford.nlp.ling.TaggedWord;
import edu.stanford.nlp.ling.Word;
import edu.stanford.nlp.ling.WordLemmaTag;
import edu.stanford.nlp.ling.WordTag;
import edu.stanford.nlp.sequences.SeqClassifierFlags;
import edu.stanford.nlp.util.HasInterval;
import edu.stanford.nlp.util.HashIndex;
import edu.stanford.nlp.util.HashableCoreMap;
import java.io.ByteArrayInputStream;
import java.io.CharArrayWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I37 Branch 56 IFNE L651 - false
   */

  @Test
  public void test00()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I160 Branch 131 IFEQ L1335 - false
   */

  @Test
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      String string0 = JSONObject.valueToString(byteArray0, (-1430), (-1430));
      assertEquals("[\n0,\n0,\n0,\n0,\n0,\n0,\n0,\n0,\n0\n]", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.has(Ljava/lang/String;)Z: root-Branch
   */

  @Test
  public void test02()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      boolean boolean0 = jSONObject0.has("S < (SBAR|S=target !$+ /^,$/ $++ (VP <+(VP) (VP < VBN|VBD > (VP < (/^(?:VB|AUX)/ < /^(?i:am|is|are|r|be|being|'s|'re|'m|was|were|been|s|ai|m|art|ar|wase|seem|seems|seemed|seeming|appear|appears|appeared|become|becomes|became|becoming|get|got|getting|gets|gotten|remains|remained|remain)$/))) !$-- NP))");
      assertFalse(boolean0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I41 Branch 42 IFNE L443 - true
   */

  @Test
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSONObject jSONObject0 = new JSONObject(object0);
      assertNotNull(jSONObject0);
      assertEquals(1, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("<Egu][Z%,yIVq3sn", true);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      
      boolean boolean0 = jSONObject1.optBoolean("<Egu][Z%,yIVq3sn", true);
      assertTrue(boolean0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getInt(Ljava/lang/String;)I: I13 Branch 46 IFEQ L484 - true
   */

  @Test
  public void test04()  throws Throwable  {
      HashMap<HashableCoreMap, CoreLabel> hashMap0 = new HashMap<HashableCoreMap, CoreLabel>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("isintitsToFlo1at", (Map) hashMap0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      try {
        int int0 = jSONObject1.getInt("isintitsToFlo1at");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isintitsToFlo1at\"] is not a number.
         //
      }
  }

  //Test case number: 5
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I11 Branch 50 IFNE L548 - true
   * Goal 2. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I37 Branch 51 IFEQ L554 - true
   * Goal 3. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I37 Branch 51 IFEQ L554 - false
   */

  @Test
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      Byte byte0 = new Byte((byte)80);
      assertEquals((byte)80, (byte)byte0);
      
      JSONObject jSONObject0 = new JSONObject((Object) byte0, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      HashIndex<IndexedWord> hashIndex0 = new HashIndex<IndexedWord>();
      assertNotNull(hashIndex0);
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      
      JSONObject jSONObject1 = jSONObject0.put("A JSONObject text must begin with '{'", (Collection) hashIndex0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      
      String[] stringArray1 = JSONObject.getNames(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotSame(stringArray1, stringArray0);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 47 IFEQ L499 - true
   */

  @Test
  public void test06()  throws Throwable  {
      HashMap<TaggedWord, WordLemmaTag> hashMap0 = new HashMap<TaggedWord, WordLemmaTag>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("Qp", (Map) hashMap0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      try {
        JSONArray jSONArray0 = jSONObject0.getJSONArray("Qp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Qp\"] is not a JSONArray.
         //
      }
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getLong(Ljava/lang/String;)J: I13 Branch 49 IFEQ L536 - false
   */

  @Test
  public void test07()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put(";'$|jL3nScwd@]EsQ", 3702);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      
      long long0 = jSONObject1.getLong(";'$|jL3nScwd@]EsQ");
      assertEquals(3702L, long0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
  }

  //Test case number: 8
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I12 Branch 99 IFNE L1113 - true
   * Goal 2. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I34 Branch 100 IF_ICMPGE L1117 - true
   * Goal 3. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I34 Branch 100 IF_ICMPGE L1117 - false
   */

  @Test
  public void test08()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject((Object) jSONArray0, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONArray0.length());
      assertEquals(0, jSONObject0.length());
      
      JSONArray jSONArray1 = jSONArray0.put(1938, 1938);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1939, jSONArray0.length());
      assertEquals(1939, jSONArray1.length());
      
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray2));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertEquals(1939, jSONArray0.length());
      assertEquals(1939, jSONArray1.length());
      assertEquals(1939, jSONArray2.length());
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I6 Branch 57 IFNONNULL L662 - false
   */

  @Test
  public void test09()  throws Throwable  {
      try {
        String string0 = JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
      }
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I45 Branch 60 IFGE L670 - true
   */

  @Test
  public void test10()  throws Throwable  {
      SeqClassifierFlags seqClassifierFlags0 = new SeqClassifierFlags();
      assertTrue(seqClassifierFlags0.separateASCIIandRange);
      assertFalse(seqClassifierFlags0.hardcodeSoftmaxOutputWeights);
      assertFalse(seqClassifierFlags0.useBagOfWords);
      assertFalse(seqClassifierFlags0.useQuartic);
      assertFalse(seqClassifierFlags0.useFloat);
      assertFalse(seqClassifierFlags0.useDisjunctive);
      assertFalse(seqClassifierFlags0.usePre);
      assertEquals(0, seqClassifierFlags0.numOfFeatureSlices);
      assertFalse(seqClassifierFlags0.useDictCTB2);
      assertFalse(seqClassifierFlags0.useSegmentation);
      assertFalse(seqClassifierFlags0.doAdaptation);
      assertFalse(seqClassifierFlags0.useLongSequences);
      assertEquals(0.0, seqClassifierFlags0.l1reg, 0.01D);
      assertFalse(seqClassifierFlags0.blockInitialize);
      assertFalse(seqClassifierFlags0.dump);
      assertFalse(seqClassifierFlags0.useRadical);
      assertFalse(seqClassifierFlags0.includeFullCRFInLOP);
      assertFalse(seqClassifierFlags0.useCommonWordsFeature);
      assertFalse(seqClassifierFlags0.removeBackgroundSingletonFeatures);
      assertFalse(seqClassifierFlags0.subCWGaz);
      assertFalse(seqClassifierFlags0.timitDatum);
      assertFalse(seqClassifierFlags0.useEntityTypeSequences);
      assertFalse(seqClassifierFlags0.useDualDecomp);
      assertEquals(0.1, seqClassifierFlags0.initRate, 0.01D);
      assertFalse(seqClassifierFlags0.useShapeConjunctions);
      assertFalse(seqClassifierFlags0.useGazettes);
      assertFalse(seqClassifierFlags0.useMinimalAbbr);
      assertEquals(1, seqClassifierFlags0.multiThreadGrad);
      assertFalse(seqClassifierFlags0.useLemmas);
      assertTrue(seqClassifierFlags0.learnCHBasedOnEN);
      assertFalse(seqClassifierFlags0.useNextRealWord);
      assertFalse(seqClassifierFlags0.useBeginSent);
      assertFalse(seqClassifierFlags0.expandMidDot);
      assertFalse(seqClassifierFlags0.useOutDict2);
      assertFalse(seqClassifierFlags0.useSentenceNumber);
      assertEquals(0.1, seqClassifierFlags0.gainSGD, 0.01D);
      assertFalse(seqClassifierFlags0.useSigmoid);
      assertEquals(4, seqClassifierFlags0.disjunctionWidth);
      assertFalse(seqClassifierFlags0.randomLopFeatureSplit);
      assertTrue(seqClassifierFlags0.useMemoryEvaluator);
      assertFalse(seqClassifierFlags0.useCRFforUnsup);
      assertFalse(seqClassifierFlags0.useHk);
      assertEquals(1, seqClassifierFlags0.endFold);
      assertEquals(1.0, seqClassifierFlags0.dropoutScale, 0.01D);
      assertFalse(seqClassifierFlags0.useObservedSequencesOnly);
      assertFalse(seqClassifierFlags0.dehyphenateNGrams);
      assertFalse(seqClassifierFlags0.useBoundarySequences);
      assertFalse(seqClassifierFlags0.useRad2b);
      assertFalse(seqClassifierFlags0.useABSTRFreq);
      assertEquals(0, seqClassifierFlags0.multiThreadGibbs);
      assertFalse(seqClassifierFlags0.useOrdinal);
      assertFalse(seqClassifierFlags0.useSuf);
      assertFalse(seqClassifierFlags0.useGoodForNamesCpC);
      assertFalse(seqClassifierFlags0.useAcqPrior);
      assertFalse(seqClassifierFlags0.combo);
      assertFalse(seqClassifierFlags0.useAbbr1);
      assertEquals(1, seqClassifierFlags0.selfTrainWindowSize);
      assertFalse(seqClassifierFlags0.useASBCPre1);
      assertEquals(0.0, seqClassifierFlags0.softmaxTieLambda, 0.01D);
      assertFalse(seqClassifierFlags0.testVariance);
      assertEquals(100, seqClassifierFlags0.printClassifierParam);
      assertEquals(10, seqClassifierFlags0.totalFeatureSlice);
      assertFalse(seqClassifierFlags0.normalize);
      assertFalse(seqClassifierFlags0.testHessSamples);
      assertEquals(1.0E-4, seqClassifierFlags0.tolerance, 0.01D);
      assertFalse(seqClassifierFlags0.useDict2);
      assertEquals(1, seqClassifierFlags0.numFolds);
      assertFalse(seqClassifierFlags0.useShapeStrings3);
      assertFalse(seqClassifierFlags0.useShapeStrings1);
      assertEquals((-1), seqClassifierFlags0.wordShape);
      assertFalse(seqClassifierFlags0.useShapeStrings4);
      assertFalse(seqClassifierFlags0.useShapeStrings5);
      assertFalse(seqClassifierFlags0.useNERPrior);
      assertFalse(seqClassifierFlags0.printWeights);
      assertEquals(0.0, seqClassifierFlags0.pctSegmenterScale, 0.01D);
      assertFalse(seqClassifierFlags0.checkGradient);
      assertFalse(seqClassifierFlags0.usePhraseWordTags);
      assertFalse(seqClassifierFlags0.useURLSequences);
      assertEquals(1, seqClassifierFlags0.numRuns);
      assertEquals(10, seqClassifierFlags0.totalDataSlice);
      assertFalse(seqClassifierFlags0.useYear);
      assertEquals(50, seqClassifierFlags0.SGD2QNhessSamples);
      assertEquals(0, seqClassifierFlags0.hybridCutoffIteration);
      assertFalse(seqClassifierFlags0.printNR);
      assertFalse(seqClassifierFlags0.useMUCFeatures);
      assertFalse(seqClassifierFlags0.factorInBiEdgePotential);
      assertFalse(seqClassifierFlags0.useTrainLexicon);
      assertEquals(25, seqClassifierFlags0.QNsize2);
      assertEquals(1.0, seqClassifierFlags0.alignDDAlpha, 0.01D);
      assertFalse(seqClassifierFlags0.softmaxOutputLayer);
      assertEquals(0.01, seqClassifierFlags0.epsilon, 0.01D);
      assertFalse(seqClassifierFlags0.useSum);
      assertFalse(seqClassifierFlags0.useTopics);
      assertFalse(seqClassifierFlags0.useEmbedding);
      assertFalse(seqClassifierFlags0.useParenMatching);
      assertEquals(0.0, seqClassifierFlags0.priorLambda, 0.01D);
      assertFalse(seqClassifierFlags0.useTags);
      assertFalse(seqClassifierFlags0.useTypeSeqs2);
      assertFalse(seqClassifierFlags0.useTypeSeqs3);
      assertFalse(seqClassifierFlags0.cacheNGrams);
      assertFalse(seqClassifierFlags0.useDictASBC2);
      assertFalse(seqClassifierFlags0.deleteBlankLines);
      assertFalse(seqClassifierFlags0.useEntityRule);
      assertTrue(seqClassifierFlags0.useSequences);
      assertFalse(seqClassifierFlags0.useFeaturesC4gram);
      assertEquals(0, seqClassifierFlags0.dualDecompMaxItr);
      assertFalse(seqClassifierFlags0.regularizeSoftmaxTieParam);
      assertFalse(seqClassifierFlags0.useASBCSuf1);
      assertEquals(0, seqClassifierFlags0.nerSkipFirstK);
      assertFalse(seqClassifierFlags0.useHKSuf1);
      assertEquals((-1), seqClassifierFlags0.arbitraryInputLayerSize);
      assertEquals(1, seqClassifierFlags0.CRForder);
      assertFalse(seqClassifierFlags0.useRule2);
      assertFalse(seqClassifierFlags0.doGibbs);
      assertFalse(seqClassifierFlags0.addBiasToEmbedding);
      assertFalse(seqClassifierFlags0.useAs);
      assertFalse(seqClassifierFlags0.dropoutApprox);
      assertFalse(seqClassifierFlags0.useDictPK2);
      assertEquals(1, seqClassifierFlags0.kBest);
      assertFalse(seqClassifierFlags0.normalizeTerms);
      assertFalse(seqClassifierFlags0.retainEntitySubclassification);
      assertFalse(seqClassifierFlags0.useMsr);
      assertFalse(seqClassifierFlags0.selfTest);
      assertFalse(seqClassifierFlags0.useClassFeature);
      assertEquals(0, seqClassifierFlags0.startEvaluateIters);
      assertFalse(seqClassifierFlags0.useRobustQN);
      assertFalse(seqClassifierFlags0.useUnknown);
      assertFalse(seqClassifierFlags0.useMSRChar2);
      assertEquals(0, seqClassifierFlags0.featureCountThreshold);
      assertFalse(seqClassifierFlags0.useMidDotShape);
      assertFalse(seqClassifierFlags0.doFE);
      assertFalse(seqClassifierFlags0.useBigramInTwoClique);
      assertFalse(seqClassifierFlags0.useHybrid);
      assertEquals(Double.POSITIVE_INFINITY, seqClassifierFlags0.searchGraphPrune, 0.01D);
      assertFalse(seqClassifierFlags0.usePhraseFeatures);
      assertFalse(seqClassifierFlags0.sloppyGazette);
      assertEquals(1, seqClassifierFlags0.nerSlowerTimes);
      assertFalse(seqClassifierFlags0.dualDecompDebug);
      assertEquals(2, seqClassifierFlags0.CRFwindow);
      assertFalse(seqClassifierFlags0.useCTBPre1);
      assertFalse(seqClassifierFlags0.useNegDict4);
      assertFalse(seqClassifierFlags0.useNegDict3);
      assertFalse(seqClassifierFlags0.useChPos);
      assertFalse(seqClassifierFlags0.useNegDict2);
      assertFalse(seqClassifierFlags0.usePrediction);
      assertTrue(seqClassifierFlags0.useInternal);
      assertFalse(seqClassifierFlags0.makeConsistent);
      assertFalse(seqClassifierFlags0.useGazFeatures);
      assertFalse(seqClassifierFlags0.useObservedFeaturesOnly);
      assertFalse(seqClassifierFlags0.addCapitalFeatures);
      assertEquals((-1), seqClassifierFlags0.purgeFeatures);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesBigram);
      assertFalse(seqClassifierFlags0.intern);
      assertFalse(seqClassifierFlags0.useNegASBCDict4);
      assertFalse(seqClassifierFlags0.useNegASBCDict3);
      assertFalse(seqClassifierFlags0.printProbs);
      assertFalse(seqClassifierFlags0.iobWrapper);
      assertFalse(seqClassifierFlags0.useNegASBCDict2);
      assertFalse(seqClassifierFlags0.useRandomSeed);
      assertEquals(0.0, seqClassifierFlags0.newgeneThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useOWLQN);
      assertEquals(1, seqClassifierFlags0.numDatasetsPerFile);
      assertFalse(seqClassifierFlags0.useFeaturesCpC4gram);
      assertTrue(seqClassifierFlags0.initWithPosterior);
      assertFalse(seqClassifierFlags0.useDistSim);
      assertFalse(seqClassifierFlags0.useHeadGov);
      assertFalse(seqClassifierFlags0.useTaggySequencesShapeInteraction);
      assertEquals(0.001, seqClassifierFlags0.adaGradEps, 0.01D);
      assertEquals(1.0, seqClassifierFlags0.lambdaCH, 0.01D);
      assertFalse(seqClassifierFlags0.useBerkeleyCompetitivePosterior);
      assertFalse(seqClassifierFlags0.useFREQ);
      assertFalse(seqClassifierFlags0.useFeaturesC5gram);
      assertFalse(seqClassifierFlags0.useLastRealWord);
      assertFalse(seqClassifierFlags0.useRule);
      assertFalse(seqClassifierFlags0.useReverseAffix);
      assertEquals(0.0, seqClassifierFlags0.featureDiffThresh, 0.01D);
      assertEquals(0, seqClassifierFlags0.scaledSGDMethod);
      assertEquals(1, seqClassifierFlags0.featureThreshold);
      assertEquals((-1), seqClassifierFlags0.maxNGramLeng);
      assertFalse(seqClassifierFlags0.perceptronDebug);
      assertEquals(1.0, seqClassifierFlags0.adaptSigma, 0.01D);
      assertFalse(seqClassifierFlags0.useFeaturesC6gram);
      assertFalse(seqClassifierFlags0.useNext);
      assertEquals((-1), seqClassifierFlags0.tuneSampleSize);
      assertFalse(seqClassifierFlags0.purgeDatasets);
      assertFalse(seqClassifierFlags0.useSymWordPairs);
      assertFalse(seqClassifierFlags0.useHKPre1);
      assertFalse(seqClassifierFlags0.twoStage);
      assertFalse(seqClassifierFlags0.dualDecompNotBIO);
      assertFalse(seqClassifierFlags0.greekifyNGrams);
      assertEquals(1, seqClassifierFlags0.multiThreadPerceptron);
      assertFalse(seqClassifierFlags0.useShapeStrings);
      assertFalse(seqClassifierFlags0.checkNameList);
      assertEquals(1, seqClassifierFlags0.selfTrainIterations);
      assertFalse(seqClassifierFlags0.useLabelSource);
      assertFalse(seqClassifierFlags0.usePrevNextLemmas);
      assertFalse(seqClassifierFlags0.useOnlySeenWeights);
      assertFalse(seqClassifierFlags0.useDictleng);
      assertFalse(seqClassifierFlags0.useChromaticSampling);
      assertFalse(seqClassifierFlags0.useTypeySequences);
      assertEquals(10, seqClassifierFlags0.wideDisjunctionWidth);
      assertEquals(0.0, seqClassifierFlags0.dropoutRate, 0.01D);
      assertFalse(seqClassifierFlags0.useWordnetFeatures);
      assertFalse(seqClassifierFlags0.useASBCChar2);
      assertFalse(seqClassifierFlags0.noEdgeFeature);
      assertFalse(seqClassifierFlags0.useExtraTaggySequences);
      assertTrue(seqClassifierFlags0.restrictLabels);
      assertFalse(seqClassifierFlags0.useNoisyNonNoisyFeature);
      assertFalse(seqClassifierFlags0.usePhraseWords);
      assertFalse(seqClassifierFlags0.useFeaturesCpC5gram);
      assertFalse(seqClassifierFlags0.useWEBFreqDict);
      assertFalse(seqClassifierFlags0.appendLC);
      assertFalse(seqClassifierFlags0.initWithNERPosterior);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions2);
      assertFalse(seqClassifierFlags0.useIsDateRange);
      assertFalse(seqClassifierFlags0.keepEmptySentences);
      assertFalse(seqClassifierFlags0.bioSubmitOutput);
      assertFalse(seqClassifierFlags0.usePrevSequences);
      assertFalse(seqClassifierFlags0.alternateTraining);
      assertFalse(seqClassifierFlags0.useDisjunctiveShapeInteraction);
      assertFalse(seqClassifierFlags0.skipOutputRegularization);
      assertFalse(seqClassifierFlags0.useIsURL);
      assertFalse(seqClassifierFlags0.factorInAlignmentProb);
      assertFalse(seqClassifierFlags0.printFirstOrderProbs);
      assertFalse(seqClassifierFlags0.pctSegmenterScaleByCRF);
      assertFalse(seqClassifierFlags0.useWEB);
      assertEquals(8, seqClassifierFlags0.distSimMaxBits);
      assertFalse(seqClassifierFlags0.randomLopWeights);
      assertFalse(seqClassifierFlags0.strictGoodCoNLL);
      assertEquals(1, seqClassifierFlags0.numStartLayers);
      assertTrue(seqClassifierFlags0.useKnownLCWords);
      assertFalse(seqClassifierFlags0.useGazettePhrases);
      assertFalse(seqClassifierFlags0.usePKSuf1);
      assertTrue(seqClassifierFlags0.useViterbi);
      assertFalse(seqClassifierFlags0.useWordUTypeConjunctions3);
      assertFalse(seqClassifierFlags0.usePrevVB);
      assertFalse(seqClassifierFlags0.useNeighborNGrams);
      assertFalse(seqClassifierFlags0.verboseMode);
      assertFalse(seqClassifierFlags0.useBilingualNERPrior);
      assertFalse(seqClassifierFlags0.useEitherSideDisjunctive);
      assertFalse(seqClassifierFlags0.useSequentialScanSampling);
      assertTrue(seqClassifierFlags0.averagePerceptron);
      assertFalse(seqClassifierFlags0.use2W);
      assertFalse(seqClassifierFlags0.testObjFunction);
      assertFalse(seqClassifierFlags0.useAdaDiff);
      assertFalse(seqClassifierFlags0.useGENIA);
      assertTrue(seqClassifierFlags0.useWord);
      assertEquals(0, seqClassifierFlags0.removeTopN);
      assertFalse(seqClassifierFlags0.useACR);
      assertFalse(seqClassifierFlags0.useSGD);
      assertFalse(seqClassifierFlags0.useABSTRFreqDict);
      assertFalse(seqClassifierFlags0.useUniformPrior);
      assertFalse(seqClassifierFlags0.pctSegmenterLenAdjust);
      assertFalse(seqClassifierFlags0.usePKPre1);
      assertEquals(1.0, seqClassifierFlags0.unsupDropoutScale, 0.01D);
      assertFalse(seqClassifierFlags0.useNegPKDict3);
      assertFalse(seqClassifierFlags0.useRad1);
      assertFalse(seqClassifierFlags0.useNegPKDict2);
      assertEquals(0, seqClassifierFlags0.ocrFold);
      assertFalse(seqClassifierFlags0.useRad2);
      assertFalse(seqClassifierFlags0.useFirstWord);
      assertFalse(seqClassifierFlags0.useNPHead);
      assertFalse(seqClassifierFlags0.mergeTags);
      assertFalse(seqClassifierFlags0.useFilter);
      assertEquals(1, seqClassifierFlags0.terminateOnEvalImprovementNumOfEpoch);
      assertFalse(seqClassifierFlags0.useNextVB);
      assertEquals(0, seqClassifierFlags0.featureCountThresh);
      assertTrue(seqClassifierFlags0.useCWSFeatures);
      assertEquals(0.0, seqClassifierFlags0.annealingRate, 0.01D);
      assertFalse(seqClassifierFlags0.useBig5);
      assertFalse(seqClassifierFlags0.useChunks);
      assertFalse(seqClassifierFlags0.useFeaturesCpC6gram);
      assertEquals(0.0, seqClassifierFlags0.featureWeightThreshold, 0.01D);
      assertEquals(0, seqClassifierFlags0.maxQNItr);
      assertFalse(seqClassifierFlags0.gradientDebug);
      assertFalse(seqClassifierFlags0.useCWSWordFeatures);
      assertFalse(seqClassifierFlags0.useLemmaAsWord);
      assertFalse(seqClassifierFlags0.weightByEntropy);
      assertFalse(seqClassifierFlags0.useANTE);
      assertFalse(seqClassifierFlags0.useCWSWordFeaturesAll);
      assertEquals(0, seqClassifierFlags0.interimOutputFreq);
      assertFalse(seqClassifierFlags0.useBerkeleyAlignerForViterbi);
      assertFalse(seqClassifierFlags0.useTaggySequences);
      assertFalse(seqClassifierFlags0.useNegPKDict4);
      assertFalse(seqClassifierFlags0.justify);
      assertFalse(seqClassifierFlags0.iobTags);
      assertFalse(seqClassifierFlags0.useProtoFeatures);
      assertFalse(seqClassifierFlags0.useCTBSuf1);
      assertEquals(0.5, seqClassifierFlags0.alignmentDecodeThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useCorefFeatures);
      assertEquals(1, seqClassifierFlags0.bisequencePriorType);
      assertEquals(1.0, seqClassifierFlags0.lambdaEN, 0.01D);
      assertFalse(seqClassifierFlags0.conjoinShapeNGrams);
      assertFalse(seqClassifierFlags0.groupByOutputClass);
      assertFalse(seqClassifierFlags0.baseline);
      assertFalse(seqClassifierFlags0.powerAlignProb);
      assertFalse(seqClassifierFlags0.largeChSegFile);
      assertFalse(seqClassifierFlags0.announceObjectBankEntries);
      assertEquals(30, seqClassifierFlags0.beamSize);
      assertFalse(seqClassifierFlags0.useMoreTags);
      assertFalse(seqClassifierFlags0.useWordTag);
      assertFalse(seqClassifierFlags0.useInPlaceSGD);
      assertFalse(seqClassifierFlags0.useSemPrior);
      assertFalse(seqClassifierFlags0.useABGENE);
      assertEquals(1, seqClassifierFlags0.startFold);
      assertTrue(seqClassifierFlags0.useExternal);
      assertFalse(seqClassifierFlags0.groupByHiddenUnit);
      assertEquals(1, seqClassifierFlags0.numLopExpert);
      assertFalse(seqClassifierFlags0.useScaledSGD);
      assertFalse(seqClassifierFlags0.useChunkySequences);
      assertFalse(seqClassifierFlags0.usePhraseWordSpecialTags);
      assertEquals((-1), seqClassifierFlags0.labelDictionaryCutoff);
      assertEquals(1.0, seqClassifierFlags0.sigma, 0.01D);
      assertFalse(seqClassifierFlags0.useHuber);
      assertTrue(seqClassifierFlags0.useOutputLayer);
      assertFalse(seqClassifierFlags0.backpropLopTraining);
      assertFalse(seqClassifierFlags0.suppressMidDotPostprocessing);
      assertFalse(seqClassifierFlags0.useAltGazFeatures);
      assertEquals(0.0, seqClassifierFlags0.priorAlpha, 0.01D);
      assertFalse(seqClassifierFlags0.geDebug);
      assertFalse(seqClassifierFlags0.usePrev);
      assertFalse(seqClassifierFlags0.dampDDStepSizeWithAlignmentProb);
      assertFalse(seqClassifierFlags0.terminateOnAvgImprovement);
      assertTrue(seqClassifierFlags0.biAlignmentPriorIsPMI);
      assertFalse(seqClassifierFlags0.useYetMoreCpCShapes);
      assertEquals(0, seqClassifierFlags0.maxRight);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSizeAlignment, 0.01D);
      assertFalse(seqClassifierFlags0.useNGrams);
      assertFalse(seqClassifierFlags0.booleanFeatures);
      assertFalse(seqClassifierFlags0.useHKChar2);
      assertFalse(seqClassifierFlags0.terminateOnEvalImprovement);
      assertFalse(seqClassifierFlags0.strictlyThirdOrder);
      assertEquals(1.0, seqClassifierFlags0.randomizedRatio, 0.01D);
      assertFalse(seqClassifierFlags0.useCTBChar2);
      assertFalse(seqClassifierFlags0.dontExtendTaggy);
      assertFalse(seqClassifierFlags0.noNeighborConstraints);
      assertFalse(seqClassifierFlags0.estimateInitial);
      assertFalse(seqClassifierFlags0.useVB);
      assertFalse(seqClassifierFlags0.printLabelValue);
      assertFalse(seqClassifierFlags0.strictlyFirstOrder);
      assertFalse(seqClassifierFlags0.useIfInteger);
      assertFalse(seqClassifierFlags0.secondOrderNonLinear);
      assertFalse(seqClassifierFlags0.keepEnglishWhitespaces);
      assertFalse(seqClassifierFlags0.sparseOutputLayer);
      assertFalse(seqClassifierFlags0.lazyUpdate);
      assertFalse(seqClassifierFlags0.tieOutputLayer);
      assertEquals(1, seqClassifierFlags0.numTimesRemoveTopN);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions);
      assertFalse(seqClassifierFlags0.useDictHK2);
      assertTrue(seqClassifierFlags0.includeC2EViterbi);
      assertFalse(seqClassifierFlags0.useNERPriorBIO);
      assertEquals(0, seqClassifierFlags0.evaluateIters);
      assertFalse(seqClassifierFlags0.useGenericFeatures);
      assertFalse(seqClassifierFlags0.useKL);
      assertFalse(seqClassifierFlags0.useNegCTBDict4);
      assertFalse(seqClassifierFlags0.useNegHKDict4);
      assertTrue(seqClassifierFlags0.splitDocuments);
      assertFalse(seqClassifierFlags0.useNegCTBDict2);
      assertFalse(seqClassifierFlags0.useNegCTBDict3);
      assertFalse(seqClassifierFlags0.suppressTestDebug);
      assertFalse(seqClassifierFlags0.useHardGE);
      assertFalse(seqClassifierFlags0.useNegHKDict3);
      assertFalse(seqClassifierFlags0.useWideDisjunctive);
      assertFalse(seqClassifierFlags0.useNegHKDict2);
      assertFalse(seqClassifierFlags0.useLC);
      assertFalse(seqClassifierFlags0.ocrTrain);
      assertFalse(seqClassifierFlags0.evaluateBackground);
      assertFalse(seqClassifierFlags0.restrictTransitionsTimit);
      assertFalse(seqClassifierFlags0.useNextSequences);
      assertFalse(seqClassifierFlags0.useUnicodeType4gram);
      assertEquals(Integer.MAX_VALUE, seqClassifierFlags0.printFeaturesUpto);
      assertFalse(seqClassifierFlags0.sighanPostProcessing);
      assertFalse(seqClassifierFlags0.useDictionaryConjunctions3);
      assertFalse(seqClassifierFlags0.useABSTR);
      assertFalse(seqClassifierFlags0.removeStrictGoodCoNLLDuplicates);
      assertFalse(seqClassifierFlags0.useOccurrencePatterns);
      assertFalse(seqClassifierFlags0.lowerNewgeneThreshold);
      assertEquals(15, seqClassifierFlags0.stochasticBatchSize);
      assertFalse(seqClassifierFlags0.useTypeSeqs);
      assertFalse(seqClassifierFlags0.useMoreAbbr);
      assertFalse(seqClassifierFlags0.useAbbr);
      assertFalse(seqClassifierFlags0.dualDecompAlignment);
      assertEquals((-1), seqClassifierFlags0.QNPasses);
      assertEquals(0, seqClassifierFlags0.maxDocSize);
      assertFalse(seqClassifierFlags0.useWordn);
      assertFalse(seqClassifierFlags0.useKBest);
      assertEquals(3, seqClassifierFlags0.charHalfWindow);
      assertEquals((-1), seqClassifierFlags0.samplingSpeedUpThreshold);
      assertFalse(seqClassifierFlags0.useNumberFeature);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions2);
      assertFalse(seqClassifierFlags0.useEntityTypes);
      assertFalse(seqClassifierFlags0.useNPGovernor);
      assertFalse(seqClassifierFlags0.tuneSGD);
      assertFalse(seqClassifierFlags0.readStdin);
      assertFalse(seqClassifierFlags0.useWordShapeConjunctions3);
      assertFalse(seqClassifierFlags0.use4Clique);
      assertFalse(seqClassifierFlags0.printFactorTable);
      assertFalse(seqClassifierFlags0.learnENBasedOnCH);
      assertFalse(seqClassifierFlags0.printXML);
      assertTrue(seqClassifierFlags0.useHiddenLayer);
      assertFalse(seqClassifierFlags0.useNoisyLabel);
      assertFalse(seqClassifierFlags0.usePk);
      assertFalse(seqClassifierFlags0.evaluateTrain);
      assertFalse(seqClassifierFlags0.strictlyZeroethOrder);
      assertFalse(seqClassifierFlags0.useAdaGradFOBOS);
      assertFalse(seqClassifierFlags0.matchNERIncentive);
      assertEquals(1000, seqClassifierFlags0.wordSegBeamSize);
      assertFalse(seqClassifierFlags0.useSymTags);
      assertFalse(seqClassifierFlags0.useEitherSideWord);
      assertEquals(0.95, seqClassifierFlags0.adaDeltaRho, 0.01D);
      assertFalse(seqClassifierFlags0.printTrainLabels);
      assertFalse(seqClassifierFlags0.prependEmbedding);
      assertFalse(seqClassifierFlags0.lowercaseNGrams);
      assertFalse(seqClassifierFlags0.powerAlignProbAsAddition);
      assertFalse(seqClassifierFlags0.useReverse);
      assertFalse(seqClassifierFlags0.memoryThrift);
      assertEquals(8, seqClassifierFlags0.maxAllowedChromaticSize);
      assertFalse(seqClassifierFlags0.useSeenFeaturesOnly);
      assertFalse(seqClassifierFlags0.groupByInput);
      assertEquals(0.0, seqClassifierFlags0.alignmentPruneThreshold, 0.01D);
      assertTrue(seqClassifierFlags0.applyNERPenalty);
      assertTrue(seqClassifierFlags0.initViterbi);
      assertFalse(seqClassifierFlags0.keepAllWhitespaces);
      assertEquals(0, seqClassifierFlags0.multiThreadClassifier);
      assertFalse(seqClassifierFlags0.usePosition);
      assertFalse(seqClassifierFlags0.augmentedDateChars);
      assertFalse(seqClassifierFlags0.useWordShapeGaz);
      assertFalse(seqClassifierFlags0.useSGDtoQN);
      assertEquals(100, seqClassifierFlags0.numSamples);
      assertTrue(seqClassifierFlags0.useDenero);
      assertFalse(seqClassifierFlags0.numberEquivalenceDistSim);
      assertTrue(seqClassifierFlags0.useQN);
      assertTrue(seqClassifierFlags0.keepOBInMemory);
      assertFalse(seqClassifierFlags0.useDisjShape);
      assertEquals(0, seqClassifierFlags0.numTimesPruneFeatures);
      assertFalse(seqClassifierFlags0.casedDistSim);
      assertFalse(seqClassifierFlags0.groupByFeatureTemplate);
      assertEquals((-1), seqClassifierFlags0.SGDPasses);
      assertEquals(0.0, seqClassifierFlags0.removeTopNPercent, 0.01D);
      assertFalse(seqClassifierFlags0.usePKChar2);
      assertEquals((-1), seqClassifierFlags0.maxIterations);
      assertFalse(seqClassifierFlags0.useAdaDelta);
      assertFalse(seqClassifierFlags0.verboseForTrueCasing);
      assertEquals(25, seqClassifierFlags0.QNsize);
      assertFalse(seqClassifierFlags0.useStochasticQN);
      assertEquals(0, seqClassifierFlags0.numOfSlices);
      assertFalse(seqClassifierFlags0.useUnicodeType5gram);
      assertFalse(seqClassifierFlags0.transitionEdgeOnly);
      assertFalse(seqClassifierFlags0.intern2);
      assertFalse(seqClassifierFlags0.normalizeTimex);
      assertFalse(seqClassifierFlags0.splitOnHead);
      assertFalse(seqClassifierFlags0.useUnicodeBlock);
      assertFalse(seqClassifierFlags0.nonLinearCRF);
      assertFalse(seqClassifierFlags0.outputIterationsToFile);
      assertEquals(0.1, seqClassifierFlags0.initialGain, 0.01D);
      assertFalse(seqClassifierFlags0.useSMD);
      assertFalse(seqClassifierFlags0.cleanGazette);
      assertEquals((-1), seqClassifierFlags0.numHiddenUnits);
      assertEquals(0.1, seqClassifierFlags0.dualDecompInitialStepSize, 0.01D);
      assertFalse(seqClassifierFlags0.noMidNGrams);
      assertFalse(seqClassifierFlags0.useGEforSup);
      assertFalse(seqClassifierFlags0.saveFeatureIndexToDisk);
      assertFalse(seqClassifierFlags0.useTOK);
      assertFalse(seqClassifierFlags0.useWordPairs);
      assertFalse(seqClassifierFlags0.useUnicodeType);
      assertFalse(seqClassifierFlags0.fakeDataset);
      assertFalse(seqClassifierFlags0.useTitle);
      assertFalse(seqClassifierFlags0.useWord3);
      assertFalse(seqClassifierFlags0.useWord4);
      assertFalse(seqClassifierFlags0.useNB);
      assertFalse(seqClassifierFlags0.usePrediction2);
      assertFalse(seqClassifierFlags0.useMinimalAbbr1);
      assertFalse(seqClassifierFlags0.strictlySecondOrder);
      assertFalse(seqClassifierFlags0.useWord1);
      assertFalse(seqClassifierFlags0.useWord2);
      assertEquals(0.9, seqClassifierFlags0.selfTrainConfidenceThreshold, 0.01D);
      assertFalse(seqClassifierFlags0.useMoreGazFeatures);
      assertFalse(seqClassifierFlags0.doFeatureDiscovery);
      assertEquals(2, seqClassifierFlags0.maxLeft);
      assertNotNull(seqClassifierFlags0);
      assertEquals("", seqClassifierFlags0.toString());
      
      Double double0 = new Double(1.0E-4);
      assertEquals(1.0E-4, (double)double0, 0.01D);
      
      String string0 = JSONObject.valueToString(double0, 1000, 0);
      assertEquals("1.0E-4", string0);
      assertNotNull(string0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I52 Branch 28 IFEQ L350 - false
   */

  @Test
  public void test11()  throws Throwable  {
      HashMap<TaggedWord, WordLemmaTag> hashMap0 = new HashMap<TaggedWord, WordLemmaTag>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.append("td|ua^fN3", (Object) hashMap0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject2 = jSONObject0.accumulate("td|ua^fN3", (Object) "td|ua^fN3");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertNotNull(jSONObject2);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject2.length());
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I40 Branch 53 IFNE L574 - false
   */

  @Test
  public void test12()  throws Throwable  {
      WordTag wordTag0 = new WordTag("Null pointer");
      assertNotNull(wordTag0);
      assertEquals("Null pointer", wordTag0.word());
      assertEquals("Null pointer", wordTag0.value());
      assertNull(wordTag0.tag());
      
      String[] stringArray0 = JSONObject.getNames((Object) wordTag0);
      assertNull(stringArray0);
      assertEquals("Null pointer", wordTag0.word());
      assertEquals("Null pointer", wordTag0.value());
      assertNull(wordTag0.tag());
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I13 Branch 111 IFEQ L1253 - false
   */

  @Test
  public void test13()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      JSONArray jSONArray1 = jSONArray0.put(74, false);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      assertNotNull(jSONArray1);
      assertEquals(75, jSONArray1.length());
      assertEquals(75, jSONArray0.length());
      
      String string0 = jSONArray0.join("toU");
      assertEquals("nulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUnulltoUfalse", string0);
      assertSame(jSONArray0, jSONArray1);
      assertNotNull(string0);
      assertEquals(75, jSONArray0.length());
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I26 Branch 27 IFEQ L347 - false
   */

  @Test
  public void test14()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      JSONObject jSONObject1 = jSONObject0.accumulate("]6VaXU}OZb50x", (Object) jSONArray0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, jSONArray0.length());
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optDouble(Ljava/lang/String;D)D: I13 Branch 64 IFEQ L764 - false
   */

  @Test
  public void test15()  throws Throwable  {
      HashMap<CoreLabel, JSONObject> hashMap0 = new HashMap<CoreLabel, JSONObject>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("we", 909L);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      
      double double0 = jSONObject1.optDouble("we", (double) 909L);
      assertEquals(909.0, double0, 0.01D);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 47 IFEQ L499 - false
   */

  @Test
  public void test16()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      HashIndex<CategoryWordTag> hashIndex0 = new HashIndex<CategoryWordTag>();
      assertNotNull(hashIndex0);
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      
      JSONObject jSONObject1 = jSONObject0.put(";'$|jL3nScwd@]EsQ", (Collection) hashIndex0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertEquals(1, jSONObject1.length());
      
      JSONArray jSONArray0 = jSONObject0.getJSONArray(";'$|jL3nScwd@]EsQ");
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONArray0);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, jSONArray0.length());
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I6 Branch 98 IFNULL L1113 - true
   */

  @Test
  public void test17()  throws Throwable  {
      HashMap<TaggedWord, WordLemmaTag> hashMap0 = new HashMap<TaggedWord, WordLemmaTag>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I138 Branch 119 IFEQ L1278 - false
   */

  @Test
  public void test18()  throws Throwable  {
      HashIndex<Short> hashIndex0 = new HashIndex<Short>(1896);
      assertNotNull(hashIndex0);
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      
      String string0 = JSONObject.valueToString(hashIndex0);
      assertEquals("[]", string0);
      assertNotNull(string0);
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
  }

  //Test case number: 19
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.optString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I12 Branch 67 IFNULL L889 - false
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I156 Branch 120 IFEQ L1281 - false
   */

  @Test
  public void test19()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "iss\"etValue");
      assertNotNull(jSONObject0);
      assertEquals(3, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.accumulate("iss\"etValue", (Object) jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(4, jSONObject0.length());
      assertEquals(4, jSONObject1.length());
      
      // Undeclared exception!
      try {
        String string0 = jSONObject0.optString("iss\"etValue");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I13 Branch 32 IFEQ L393 - false
   */

  @Test
  public void test20()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
      assertNotNull(string0);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I96 Branch 115 IFNE L1271 - true
   */

  @Test
  public void test21()  throws Throwable  {
      Float float0 = new Float((float) 76);
      assertEquals(76.0F, (float)float0, 0.01F);
      
      JSONObject jSONObject0 = new JSONObject((Object) float0);
      assertNotNull(jSONObject0);
      assertEquals(3, jSONObject0.length());
      
      String string0 = JSONObject.valueToString(jSONObject0);
      assertEquals("{\"infinite\":false,\"naN\":false,\"class\":\"class java.lang.Float\"}", string0);
      assertNotNull(string0);
      assertEquals(3, jSONObject0.length());
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I7 Branch 31 IFNE L393 - true
   */

  @Test
  public void test22()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.POSITIVE_INFINITY);
      assertEquals("null", string0);
      assertNotNull(string0);
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I121 Branch 118 IFEQ L1275 - false
   */

  @Test
  public void test23()  throws Throwable  {
      HashMap<TaggedWord, WordLemmaTag> hashMap0 = new HashMap<TaggedWord, WordLemmaTag>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getDouble(Ljava/lang/String;)D: I13 Branch 45 IFEQ L463 - false
   */

  @Test
  public void test24()  throws Throwable  {
      HashMap<Tag, HashableCoreMap> hashMap0 = new HashMap<Tag, HashableCoreMap>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject1 = jSONObject0.put("node cliqueFeatures[n]=", 389);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      double double0 = jSONObject0.getDouble("node cliqueFeatures[n]=");
      assertEquals(389.0, double0, 0.01D);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getInt(Ljava/lang/String;)I: I13 Branch 46 IFEQ L484 - false
   */

  @Test
  public void test25()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("A JSONObject text must begin with '{'", 436);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      
      int int0 = jSONObject1.getInt("A JSONObject text must begin with '{'");
      assertEquals(436, int0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I6 Branch 110 IFNULL L1253 - true
   */

  @Test
  public void test26()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
      assertNotNull(string0);
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I77 Branch 62 IFLE L674 - true
   */

  @Test
  public void test27()  throws Throwable  {
      Double double0 = new Double(1519.3341693582054);
      assertEquals(1519.3341693582054, (double)double0, 0.01D);
      
      String string0 = JSONObject.valueToString(double0, 0, 0);
      assertEquals("1519.3341693582054", string0);
      assertNotNull(string0);
  }

  //Test case number: 28
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I6 Branch 98 IFNULL L1113 - false
   * Goal 2. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I12 Branch 99 IFNE L1113 - false
   */

  @Test
  public void test28()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, jSONArray0.length());
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 66 IFEQ L829 - false
   */

  @Test
  public void test29()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSONObject jSONObject0 = new JSONObject(object0);
      assertNotNull(jSONObject0);
      assertEquals(1, jSONObject0.length());
      
      HashMap<CategoryWordTag, Word> hashMap0 = new HashMap<CategoryWordTag, Word>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject1 = jSONObject0.put("<Egu][Z%,yIVq3sn", (Map) hashMap0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject2 = jSONObject1.optJSONObject("<Egu][Z%,yIVq3sn");
      assertSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
      assertNotNull(jSONObject2);
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertEquals(2, jSONObject1.length());
      assertEquals(0, jSONObject2.length());
      assertEquals(2, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  //Test case number: 30
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I14 Branch 39 IFNE L439 - true
   */

  @Test
  public void test30()  throws Throwable  {
      HashMap<Object, TaggedWord> hashMap0 = new HashMap<Object, TaggedWord>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject1 = jSONObject0.put("re", false);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
      
      boolean boolean0 = jSONObject1.optBoolean("re");
      assertFalse(boolean0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
  }

  //Test case number: 31
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I6 Branch 1 IFNULL L115 - false
   * Goal 2. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I12 Branch 2 IF_ACMPNE L115 - true
   */

  @Test
  public void test31()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("A JSONObject text must end with '}'", (Map) null);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      
      boolean boolean0 = jSONObject1.isNull("A JSONObject text must end with '}'");
      assertFalse(boolean0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
  }

  //Test case number: 32
  /*
   * 12 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 6 LOOKUPSWITCH L183 Case 125 - true
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 7 LOOKUPSWITCH L183 Default-Case - false
   * Goal 3. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I86 Branch 10 IF_ICMPEQ L202 - true
   * Goal 4. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I105 Branch 11 LOOKUPSWITCH L211 Case 44 - true
   * Goal 5. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I105 Branch 11 LOOKUPSWITCH L211 Case 44 - false
   * Goal 6. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I105 Branch 12 LOOKUPSWITCH L211 Case 59 - false
   * Goal 7. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I105 Branch 13 LOOKUPSWITCH L211 Case 125 - true
   * Goal 8. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I105 Branch 13 LOOKUPSWITCH L211 Case 125 - false
   * Goal 9. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I105 Branch 14 LOOKUPSWITCH L211 Default-Case - false
   * Goal 10. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I114 Branch 15 IF_ICMPNE L214 - true
   * Goal 11. wheel.json.JSONObject.toString()Ljava/lang/String;: I28 Branch 102 IF_ICMPLE L1141 - false
   * Goal 12. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I108 Branch 117 IFEQ L1271 - false
   */

  @Test
  public void test32()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("/6VaX]}IZL50x", (Map) null);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      
      JSONObject jSONObject2 = new JSONObject();
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertNotNull(jSONObject2);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertEquals(0, jSONObject2.length());
      
      JSONObject jSONObject3 = jSONObject1.append("useSigmVKid", (Object) jSONObject2);
      assertSame(jSONObject3, jSONObject1);
      assertNotSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject0);
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject3);
      assertNotSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject3);
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject3));
      assertFalse(jSONObject1.equals((Object)jSONObject2));
      assertEquals(2, jSONObject3.length());
      assertEquals(2, jSONObject0.length());
      assertEquals(0, jSONObject2.length());
      assertEquals(2, jSONObject1.length());
      
      String string0 = jSONObject0.toString();
      assertEquals("{\"useSigmVKid\":[{}],\"/6VaX]}IZL50x\":{}}", string0);
      assertNotSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject3);
      assertNotNull(string0);
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertEquals(2, jSONObject0.length());
      
      JSONObject jSONObject4 = new JSONObject("{\"useSigmVKid\":[{}],\"/6VaX]}IZL50x\":{}}");
      assertNotSame(jSONObject4, jSONObject2);
      assertNotSame(jSONObject4, jSONObject1);
      assertNotSame(jSONObject4, jSONObject0);
      assertNotSame(jSONObject4, jSONObject3);
      assertNotNull(jSONObject4);
      assertFalse(jSONObject4.equals((Object)jSONObject2));
      assertFalse(jSONObject4.equals((Object)jSONObject1));
      assertFalse(jSONObject4.equals((Object)jSONObject0));
      assertFalse(jSONObject4.equals((Object)jSONObject3));
      assertEquals(2, jSONObject4.length());
  }

  //Test case number: 33
  /*
   * 7 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/lang/String;)V: root-Branch
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I12 Branch 4 IF_ICMPEQ L178 - true
   * Goal 3. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 5 LOOKUPSWITCH L183 Case 0 - false
   * Goal 4. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 6 LOOKUPSWITCH L183 Case 125 - false
   * Goal 5. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 7 LOOKUPSWITCH L183 Default-Case - true
   * Goal 6. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I61 Branch 8 IF_ICMPNE L198 - true
   * Goal 7. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I86 Branch 10 IF_ICMPEQ L202 - false
   */

  @Test
  public void test33()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{97'@s ^Ca&b\"eMZ1m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 13 of {97'@s ^Ca&b\"eMZ1m
         //
      }
  }

  //Test case number: 34
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I65 Branch 134 IFEQ L1365 - false
   */

  @Test
  public void test34()  throws Throwable  {
      HashMap<Integer, CoreLabel.GenericAnnotation<Object>> hashMap0 = new HashMap<Integer, CoreLabel.GenericAnnotation<Object>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("aMylM$N&", (Map) hashMap0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      CharArrayWriter charArrayWriter1 = (CharArrayWriter)jSONObject0.write((Writer) charArrayWriter0);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(charArrayWriter1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(15, charArrayWriter1.size());
      assertEquals("{\"aMylM$N&\":{}}", charArrayWriter1.toString());
      assertEquals("{\"aMylM$N&\":{}}", charArrayWriter0.toString());
      assertEquals(15, charArrayWriter0.size());
      assertEquals(1, jSONObject0.length());
  }

  //Test case number: 35
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.optString(Ljava/lang/String;)Ljava/lang/String;: root-Branch
   * Goal 2. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I20 Branch 70 IFNULL L978 - true
   */

  @Test
  public void test35()  throws Throwable  {
      Integer integer0 = new Integer(22);
      assertEquals(22, (int)integer0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      JSONObject jSONObject0 = new JSONObject((Object) integer0, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      String string0 = jSONObject0.optString("");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("", (Object) null);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      assertEquals(0, jSONObject1.length());
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 36
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I30 Branch 94 IFEQ L1090 - false
   */

  @Test
  public void test36()  throws Throwable  {
      WordLemmaTag wordLemmaTag0 = new WordLemmaTag("E_3e=6LWr6$t{X_");
      assertNotNull(wordLemmaTag0);
      assertNull(wordLemmaTag0.lemma());
      assertEquals("E_3e=6LWr6$t{X_", wordLemmaTag0.value());
      assertNull(wordLemmaTag0.tag());
      assertEquals("E_3e=6LWr6$t{X_", wordLemmaTag0.word());
      
      JSONObject jSONObject0 = new JSONObject((Object) wordLemmaTag0);
      assertNotNull(jSONObject0);
      assertNull(wordLemmaTag0.lemma());
      assertEquals("E_3e=6LWr6$t{X_", wordLemmaTag0.value());
      assertNull(wordLemmaTag0.tag());
      assertEquals("E_3e=6LWr6$t{X_", wordLemmaTag0.word());
      assertEquals(1, jSONObject0.length());
      
      try {
        JSONObject jSONObject1 = jSONObject0.put("E_3e=6LWr6$t{X_", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
      }
  }

  //Test case number: 37
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I39 Branch 30 IFEQ L376 - false
   */

  @Test
  public void test37()  throws Throwable  {
      HashMap<TaggedWord, WordLemmaTag> hashMap0 = new HashMap<TaggedWord, WordLemmaTag>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HashIndex<CategoryWordTag> hashIndex0 = new HashIndex<CategoryWordTag>();
      assertNotNull(hashIndex0);
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      
      JSONObject jSONObject1 = jSONObject0.put("%4QdKp", (Collection) hashIndex0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject2 = jSONObject1.append("%4QdKp", (Object) jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject2);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  //Test case number: 38
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 77 LOOKUPSWITCH L1030 Case 9 - true
   */

  @Test
  public void test38()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      try {
        long long0 = jSONObject0.getLong(",;e\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",;e\\t\"] not found.
         //
      }
  }

  //Test case number: 39
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.toString()Ljava/lang/String;: I19 Branch 101 IFEQ L1140 - true
   * Goal 2. wheel.json.JSONObject.toString()Ljava/lang/String;: I19 Branch 101 IFEQ L1140 - false
   * Goal 3. wheel.json.JSONObject.toString()Ljava/lang/String;: I28 Branch 102 IF_ICMPLE L1141 - true
   * Goal 4. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I102 Branch 116 IFNE L1271 - true
   */

  @Test
  public void test39()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("- s87t/-)u*5?", 1194);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.valueToString(jSONObject1);
      assertEquals("{\"- s87t/-)u*5?\":1194}", string0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(string0);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
  }

  //Test case number: 40
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 29 IFNONNULL L374 - true
   * Goal 2. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I39 Branch 30 IFEQ L376 - true
   */

  @Test
  public void test40()  throws Throwable  {
      HashMap<TaggedWord, WordLemmaTag> hashMap0 = new HashMap<TaggedWord, WordLemmaTag>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.accumulate("td|ua^fN3", (Object) jSONObject0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      
      try {
        JSONObject jSONObject2 = jSONObject1.append("td|ua^fN3", (Object) "td|ua^fN3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[td|ua^fN3] is not a JSONArray.
         //
      }
  }

  //Test case number: 41
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I18 Branch 55 IFEQ L648 - true
   * Goal 2. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I18 Branch 55 IFEQ L648 - false
   * Goal 3. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I37 Branch 56 IFNE L651 - true
   */

  @Test
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[15];
      stringArray0[2] = "vum";
      JSONObject jSONObject0 = new JSONObject((Object) "vum", stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.append("vum", (Object) "vum");
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONArray0);
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONObject0.length());
  }

  //Test case number: 42
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/util/Map;)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.getJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 48 IFEQ L517 - false
   * Goal 3. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I11 Branch 72 IFNULL L999 - false
   */

  @Test
  public void test42()  throws Throwable  {
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject1 = jSONObject0.putOpt("Bad value from toJSONString: ", (Object) jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
      
      JSONObject jSONObject2 = jSONObject1.getJSONObject("Bad value from toJSONString: ");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNotNull(jSONObject2);
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      
      JSONObject jSONObject3 = jSONObject2.put("Bad value from toJSONString: ", (Map) hashMap0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject3);
      assertSame(jSONObject2, jSONObject0);
      assertNotNull(jSONObject3);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject3.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
  }

  //Test case number: 43
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getString(Ljava/lang/String;)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test43()  throws Throwable  {
      HashMap<TaggedWord, WordLemmaTag> hashMap0 = new HashMap<TaggedWord, WordLemmaTag>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      try {
        String string0 = jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
      }
  }

  //Test case number: 44
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I12 Branch 74 IFNE L1015 - false
   */

  @Test
  public void test44()  throws Throwable  {
      String string0 = JSONObject.valueToString("", 6380, 6380);
      assertEquals("\"\"", string0);
      assertNotNull(string0);
  }

  //Test case number: 45
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I6 Branch 52 IFNONNULL L568 - true
   * Goal 2. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I40 Branch 53 IFNE L574 - true
   * Goal 3. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I60 Branch 54 IF_ICMPGE L578 - true
   * Goal 4. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I60 Branch 54 IF_ICMPGE L578 - false
   */

  @Test
  public void test45()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      assertNotNull(stringArray0);
  }

  //Test case number: 46
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I13 Branch 122 IFEQ L1304 - false
   */

  @Test
  public void test46()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
      
      String string0 = JSONObject.valueToString(object0, 6411, 6411);
      assertEquals("null", string0);
      assertNotNull(string0);
  }

  //Test case number: 47
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I62 Branch 125 IFEQ L1317 - false
   */

  @Test
  public void test47()  throws Throwable  {
      Double double0 = new Double((double) 6411);
      assertEquals(6411.0, (double)double0, 0.01D);
      
      String string0 = JSONObject.valueToString(double0, 6411, 6411);
      assertEquals("6411", string0);
      assertNotNull(string0);
  }

  //Test case number: 48
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I12 Branch 4 IF_ICMPEQ L178 - false
   */

  @Test
  public void test48()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("(._+{z{<R0edl;lN");
      assertNotNull(jSONTokener0);
      assertTrue(jSONTokener0.more());
      
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of (._+{z{<R0edl;lN
         //
      }
  }

  //Test case number: 49
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I140 Branch 130 IFEQ L1332 - false
   */

  @Test
  public void test49()  throws Throwable  {
      HashIndex<CategoryWordTag> hashIndex0 = new HashIndex<CategoryWordTag>();
      assertNotNull(hashIndex0);
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      
      String string0 = JSONObject.valueToString(hashIndex0, (-205), (-205));
      assertEquals("[]", string0);
      assertNotNull(string0);
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
  }

  //Test case number: 50
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;J)Lwheel/json/JSONObject;: root-Branch
   */

  @Test
  public void test50()  throws Throwable  {
      HashMap<TaggedWord, WordLemmaTag> hashMap0 = new HashMap<TaggedWord, WordLemmaTag>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("%4QdKp", 1L);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      
      try {
        Object object0 = jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
      }
  }

  //Test case number: 51
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I77 Branch 37 IFLE L404 - true
   */

  @Test
  public void test51()  throws Throwable  {
      String string0 = JSONObject.doubleToString(2.1956591893335458);
      assertEquals("2.1956591893335458", string0);
      assertNotNull(string0);
  }

  //Test case number: 52
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I45 Branch 35 IFGE L400 - true
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I6 Branch 121 IFNULL L1304 - true
   */

  @Test
  public void test52()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 2763, 2763);
      assertEquals("null", string0);
      assertNotNull(string0);
      
      String string1 = JSONObject.doubleToString(1.0E-100);
      assertEquals("1.0E-100", string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  //Test case number: 53
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.remove(Ljava/lang/String;)Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test53()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      Object object0 = jSONObject0.remove("\"\"");
      assertNull(object0);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 54
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.toString(I)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test54()  throws Throwable  {
      HashMap<TaggedWord, WordLemmaTag> hashMap0 = new HashMap<TaggedWord, WordLemmaTag>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      
      String string0 = jSONObject0.toString(0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 55
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.optDouble(Ljava/lang/String;)D: root-Branch
   * Goal 2. wheel.json.JSONObject.optDouble(Ljava/lang/String;D)D: I13 Branch 64 IFEQ L764 - true
   */

  @Test
  public void test55()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      double double0 = jSONObject0.optDouble("JSONObject[");
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  //Test case number: 56
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/util/Collection;)Lwheel/json/JSONObject;: root-Branch
   */

  @Test
  public void test56()  throws Throwable  {
      HashMap<StringLabel, WordLemmaTag> hashMap0 = new HashMap<StringLabel, WordLemmaTag>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      try {
        JSONObject jSONObject1 = jSONObject0.put((String) null, (Collection) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
      }
  }

  //Test case number: 57
  /*
   * 8 covered goals:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I7 Branch 31 IFNE L393 - false
   * Goal 2. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I13 Branch 32 IFEQ L393 - true
   * Goal 3. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I31 Branch 33 IFLE L400 - false
   * Goal 4. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I38 Branch 34 IFGE L400 - false
   * Goal 5. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I45 Branch 35 IFGE L400 - false
   * Goal 6. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I54 Branch 36 IFLE L401 - true
   * Goal 7. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I54 Branch 36 IFLE L401 - false
   * Goal 8. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I77 Branch 37 IFLE L404 - false
   */

  @Test
  public void test57()  throws Throwable  {
      String string0 = JSONObject.doubleToString((double) (-1852L));
      assertEquals("-1852", string0);
      assertNotNull(string0);
  }

  //Test case number: 58
  /*
   * 17 covered goals:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I6 Branch 52 IFNONNULL L568 - false
   * Goal 2. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I31 Branch 58 IFLE L670 - true
   * Goal 3. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I6 Branch 73 IFNULL L1015 - true
   * Goal 4. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I82 Branch 114 IFEQ L1268 - true
   * Goal 5. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I96 Branch 115 IFNE L1271 - false
   * Goal 6. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I102 Branch 116 IFNE L1271 - false
   * Goal 7. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I108 Branch 117 IFEQ L1271 - true
   * Goal 8. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I121 Branch 118 IFEQ L1275 - true
   * Goal 9. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I138 Branch 119 IFEQ L1278 - true
   * Goal 10. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I156 Branch 120 IFEQ L1281 - true
   * Goal 11. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I21 Branch 132 IFEQ L1357 - true
   * Goal 12. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I21 Branch 132 IFEQ L1357 - false
   * Goal 13. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I28 Branch 133 IFEQ L1358 - true
   * Goal 14. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I28 Branch 133 IFEQ L1358 - false
   * Goal 15. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I65 Branch 134 IFEQ L1365 - true
   * Goal 16. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I84 Branch 135 IFEQ L1367 - true
   * Goal 17. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I84 Branch 135 IFEQ L1367 - false
   */

  @Test
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte)0, (int) (byte) (-11));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(-11, byteArrayInputStream0.available());
      
      String[] stringArray0 = new String[7];
      stringArray0[1] = "w";
      JSONObject jSONObject0 = new JSONObject((Object) byteArrayInputStream0, stringArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertEquals(-11, byteArrayInputStream0.available());
      
      boolean boolean0 = jSONObject0.optBoolean(stringArray0[6]);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, jSONObject0.length());
      assertEquals(-11, byteArrayInputStream0.available());
      
      Short short0 = new Short((short) (byte) (-11));
      assertEquals((short) (-11), (short)short0);
      
      JSONObject jSONObject1 = new JSONObject((Object) short0);
      assertNotSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(1, jSONObject1.length());
      
      JSONObject jSONObject2 = jSONObject1.append("w", (Object) short0);
      assertNotSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject2);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(2, jSONObject2.length());
      assertEquals(2, jSONObject1.length());
      
      String[] stringArray1 = JSONObject.getNames((Object) null);
      assertNull(stringArray1);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("w", false);
      assertNotNull(mockFileWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((Writer) mockFileWriter0);
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)jSONObject2.write((Writer) mockPrintWriter0);
      assertNotSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertNotSame(jSONObject1, jSONObject0);
      assertSame(mockPrintWriter1, mockPrintWriter0);
      assertSame(mockPrintWriter0, mockPrintWriter1);
      assertNotNull(mockPrintWriter1);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(2, jSONObject2.length());
      assertEquals(2, jSONObject1.length());
  }

  //Test case number: 59
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.optJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 66 IFEQ L829 - true
   * Goal 2. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 69 IFNONNULL L975 - false
   */

  @Test
  public void test59()  throws Throwable  {
      HashMap<TaggedWord, WordLemmaTag> hashMap0 = new HashMap<TaggedWord, WordLemmaTag>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.optJSONObject("] is not a number.");
      assertNull(jSONObject1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      
      try {
        JSONObject jSONObject2 = jSONObject0.append((String) null, (Object) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
      }
  }

  //Test case number: 60
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 26 IFNONNULL L346 - true
   * Goal 2. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I52 Branch 28 IFEQ L350 - true
   * Goal 3. wheel.json.JSONObject.put(Ljava/lang/String;Z)Lwheel/json/JSONObject;: I8 Branch 68 IFEQ L902 - false
   */

  @Test
  public void test60()  throws Throwable  {
      String[] stringArray0 = new String[26];
      JSONObject jSONObject0 = new JSONObject((Object) "vum", stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("vum", true);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      
      String string0 = jSONObject1.optString(stringArray0[25], "vum");
      assertEquals("vum", string0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(string0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      
      JSONObject jSONObject2 = jSONObject1.accumulate("vum", (Object) 6390);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject2);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
      assertEquals(1, jSONObject1.length());
  }

  //Test case number: 61
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I41 Branch 104 IF_ICMPNE L1197 - false
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I121 Branch 129 IFEQ L1329 - true
   * Goal 3. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I140 Branch 130 IFEQ L1332 - true
   * Goal 4. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I160 Branch 131 IFEQ L1335 - true
   */

  @Test
  public void test61()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      String string0 = jSONObject0.optString("isopt", "isopt");
      assertEquals("isopt", string0);
      assertNotNull(string0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.append("isopt", (Object) "isopt");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      
      String string1 = JSONObject.valueToString(jSONObject0, (-610), (-610));
      assertEquals("{\"isopt\": [\"isopt\"]}", string1);
      assertNotSame(string1, string0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, jSONObject0.length());
  }

  //Test case number: 62
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I11 Branch 50 IFNE L548 - false
   */

  @Test
  public void test62()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 63
  /*
   * 8 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONObject;[Ljava/lang/String;)V: I15 Branch 3 IF_ICMPGE L162 - true
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONObject;[Ljava/lang/String;)V: I15 Branch 3 IF_ICMPGE L162 - false
   * Goal 3. wheel.json.JSONObject.<init>(Ljava/lang/Object;[Ljava/lang/String;)V: I20 Branch 25 IF_ICMPGE L304 - true
   * Goal 4. wheel.json.JSONObject.<init>(Ljava/lang/Object;[Ljava/lang/String;)V: I20 Branch 25 IF_ICMPGE L304 - false
   * Goal 5. wheel.json.JSONObject.opt(Ljava/lang/String;)Ljava/lang/Object;: I6 Branch 63 IFNONNULL L688 - false
   * Goal 6. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 71 IFNULL L999 - true
   * Goal 7. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 71 IFNULL L999 - false
   * Goal 8. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I11 Branch 72 IFNULL L999 - true
   */

  @Test
  public void test63()  throws Throwable  {
      HashMap<TaggedWord, WordLemmaTag> hashMap0 = new HashMap<TaggedWord, WordLemmaTag>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      String[] stringArray0 = new String[18];
      stringArray0[15] = "Qp";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      assertNotSame(jSONObject1, jSONObject0);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject1.length());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject0, jSONObject2);
      assertNotNull(jSONObject2);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject0.equals((Object)jSONObject2));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject2.length());
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 64
  /*
   * 16 covered goals:
   * Goal 1. wheel.json.JSONObject.keys()Ljava/util/Iterator;: root-Branch
   * Goal 2. wheel.json.JSONObject.optJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 65 IFEQ L815 - false
   * Goal 3. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 78 LOOKUPSWITCH L1030 Case 10 - true
   * Goal 4. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I11 Branch 103 IFNE L1190 - true
   * Goal 5. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I41 Branch 104 IF_ICMPNE L1197 - true
   * Goal 6. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I84 Branch 105 IFEQ L1204 - true
   * Goal 7. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I84 Branch 105 IFEQ L1204 - false
   * Goal 8. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I98 Branch 106 IF_ICMPLE L1206 - true
   * Goal 9. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I98 Branch 106 IF_ICMPLE L1206 - false
   * Goal 10. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I125 Branch 107 IF_ICMPGE L1211 - true
   * Goal 11. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I125 Branch 107 IF_ICMPGE L1211 - false
   * Goal 12. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I177 Branch 108 IF_ICMPLE L1219 - false
   * Goal 13. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I194 Branch 109 IF_ICMPGE L1221 - true
   * Goal 14. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I194 Branch 109 IF_ICMPGE L1221 - false
   * Goal 15. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I76 Branch 126 IFEQ L1320 - false
   * Goal 16. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I105 Branch 128 IFEQ L1326 - false
   */

  @Test
  public void test64()  throws Throwable  {
      HashMap<TaggedWord, WordLemmaTag> hashMap0 = new HashMap<TaggedWord, WordLemmaTag>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      
      boolean boolean0 = jSONObject0.optBoolean("td|ua^fN3");
      assertFalse(boolean0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("\"\"", false);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      
      JSONObject jSONObject2 = jSONObject1.append("td|ua^fN3", (Object) hashMap0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertNotNull(jSONObject2);
      assertEquals(2, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(2, jSONObject2.length());
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.valueToString(jSONObject1, (-7), 22);
      assertEquals("{\n               \"\\\"\\\"\": false,\n               \"td|ua^fN3\": [{}]\n                      }", string0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertNotNull(string0);
      assertEquals(2, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(2, jSONObject0.length());
      
      long long0 = jSONObject1.optLong("{\n               \"\"\"\": false,\n               \"td|ua^fN3\": [{}]\n                      }", (long) (-7));
      assertEquals((-7L), long0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertEquals(2, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(2, jSONObject0.length());
      
      JSONArray jSONArray0 = jSONObject2.optJSONArray("td|ua^fN3");
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertNotNull(jSONArray0);
      assertEquals(1, jSONArray0.length());
      assertEquals(2, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(2, jSONObject2.length());
      assertEquals(2, jSONObject0.length());
  }

  //Test case number: 65
  /*
   * 14 covered goals:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I6 Branch 57 IFNONNULL L662 - true
   * Goal 2. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I31 Branch 58 IFLE L670 - false
   * Goal 3. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I38 Branch 59 IFGE L670 - false
   * Goal 4. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I45 Branch 60 IFGE L670 - false
   * Goal 5. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I54 Branch 61 IFLE L671 - true
   * Goal 6. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I54 Branch 61 IFLE L671 - false
   * Goal 7. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I77 Branch 62 IFLE L674 - false
   * Goal 8. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I45 Branch 95 IFEQ L1094 - false
   * Goal 9. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I54 Branch 96 IFNE L1095 - false
   * Goal 10. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I61 Branch 97 IFEQ L1095 - true
   * Goal 11. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I6 Branch 110 IFNULL L1253 - false
   * Goal 12. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I13 Branch 111 IFEQ L1253 - true
   * Goal 13. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I25 Branch 112 IFEQ L1256 - true
   * Goal 14. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I82 Branch 114 IFEQ L1268 - false
   */

  @Test
  public void test65()  throws Throwable  {
      Float float0 = new Float((-2274.0F));
      assertEquals((-2274.0F), (float)float0, 0.01F);
      
      String string0 = JSONObject.valueToString(float0);
      assertEquals("-2274", string0);
      assertNotNull(string0);
  }

  //Test case number: 66
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.optLong(Ljava/lang/String;)J: root-Branch
   * Goal 2. wheel.json.JSONObject.getJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 48 IFEQ L517 - true
   * Goal 3. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I6 Branch 91 IFNULL L1088 - true
   */

  @Test
  public void test66()  throws Throwable  {
      HashMap<TaggedWord, WordLemmaTag> hashMap0 = new HashMap<TaggedWord, WordLemmaTag>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      
      long long0 = jSONObject0.optLong("9Y|y{r\"/, TxZ");
      assertEquals(0L, long0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.append("9Y|y{r\"/, TxZ", (Object) null);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      
      try {
        JSONObject jSONObject2 = jSONObject1.getJSONObject("9Y|y{r\"/, TxZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"9Y|y{r\\\"/, TxZ\"] is not a JSONObject.
         //
      }
  }

  //Test case number: 67
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;D)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.put(Ljava/lang/String;I)Lwheel/json/JSONObject;: root-Branch
   */

  @Test
  public void test67()  throws Throwable  {
      HashMap<HasInterval<Float>, WordTag> hashMap0 = new HashMap<HasInterval<Float>, WordTag>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("vum", 1194);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject2 = jSONObject1.put("vum", (double) 1194);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertNotNull(jSONObject2);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  //Test case number: 68
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/util/Map;)V: I11 Branch 16 IFNONNULL L234 - false
   */

  @Test
  public void test68()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 69
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I91 Branch 85 IF_ICMPNE L1037 - true
   */

  @Test
  public void test69()  throws Throwable  {
      LabeledWord labeledWord0 = new LabeledWord("[MiHG;/");
      assertNotNull(labeledWord0);
      assertEquals("[MiHG;/", labeledWord0.word());
      assertEquals(-1, labeledWord0.beginPosition());
      assertEquals(-1, labeledWord0.endPosition());
      assertEquals("[MiHG;/", labeledWord0.value());
      
      JSONObject jSONObject0 = new JSONObject((Object) labeledWord0);
      assertNotNull(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals("[MiHG;/", labeledWord0.word());
      assertEquals(-1, labeledWord0.beginPosition());
      assertEquals(-1, labeledWord0.endPosition());
      assertEquals("[MiHG;/", labeledWord0.value());
      
      int int0 = jSONObject0.optInt("[MiHG;/");
      assertEquals(0, int0);
      assertEquals(1, jSONObject0.length());
      assertEquals("[MiHG;/", labeledWord0.word());
      assertEquals(-1, labeledWord0.beginPosition());
      assertEquals(-1, labeledWord0.endPosition());
      assertEquals("[MiHG;/", labeledWord0.value());
  }

  //Test case number: 70
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I89 Branch 127 IFEQ L1323 - true
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I105 Branch 128 IFEQ L1326 - true
   * Goal 3. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I121 Branch 129 IFEQ L1329 - false
   */

  @Test
  public void test70()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = JSONObject.valueToString(hashMap0, 79, 79);
      assertEquals("{}", string0);
      assertNotNull(string0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  //Test case number: 71
  /*
   * 9 covered goals:
   * Goal 1. wheel.json.JSONObject.optInt(Ljava/lang/String;I)I: root-Branch
   * Goal 2. wheel.json.JSONObject.optInt(Ljava/lang/String;)I: root-Branch
   * Goal 3. wheel.json.JSONObject$Null.toString()Ljava/lang/String;: root-Branch
   * Goal 4. wheel.json.JSONObject.get(Ljava/lang/String;)Ljava/lang/Object;: I12 Branch 38 IFNONNULL L421 - false
   * Goal 5. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 82 LOOKUPSWITCH L1030 Case 47 - true
   * Goal 6. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I91 Branch 85 IF_ICMPNE L1037 - false
   * Goal 7. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I14 Branch 92 IFEQ L1089 - false
   * Goal 8. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I23 Branch 93 IFNE L1090 - false
   * Goal 9. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I30 Branch 94 IFEQ L1090 - true
   */

  @Test
  public void test71()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      HashIndex<Short> hashIndex0 = new HashIndex<Short>(1896);
      assertNotNull(hashIndex0);
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      
      JSONArray jSONArray1 = jSONArray0.put(1896, (Collection) hashIndex0);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      assertNotNull(jSONArray1);
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertEquals(1897, jSONArray1.length());
      assertEquals(1897, jSONArray0.length());
      
      JSONArray jSONArray2 = jSONArray0.put((double) 1896);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertNotNull(jSONArray2);
      assertEquals(1898, jSONArray2.length());
      assertEquals(1898, jSONArray0.length());
      
      JSONObject jSONObject0 = jSONArray2.toJSONObject(jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertNotNull(jSONObject0);
      assertEquals(1898, jSONArray2.length());
      assertEquals(3, jSONObject0.length());
      assertEquals(1898, jSONArray0.length());
      
      int int0 = jSONObject0.optInt("Pa<</71\"`@sY]LFtqa");
      assertEquals(0, int0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertEquals(1898, jSONArray2.length());
      assertEquals(3, jSONObject0.length());
      assertEquals(1898, jSONArray0.length());
  }

  //Test case number: 72
  /*
   * 22 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>()V: root-Branch
   * Goal 2. wheel.json.JSONObject.length()I: root-Branch
   * Goal 3. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I33 Branch 17 IF_ICMPGE L263 - true
   * Goal 4. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I33 Branch 17 IF_ICMPGE L263 - false
   * Goal 5. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I58 Branch 18 IFLE L268 - true
   * Goal 6. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I58 Branch 18 IFLE L268 - false
   * Goal 7. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I78 Branch 19 IFLE L270 - true
   * Goal 8. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I78 Branch 19 IFLE L270 - false
   * Goal 9. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I92 Branch 20 IFLE L273 - true
   * Goal 10. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I92 Branch 20 IFLE L273 - false
   * Goal 11. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I100 Branch 21 IFEQ L273 - false
   * Goal 12. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I107 Branch 22 IFNE L273 - true
   * Goal 13. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I107 Branch 22 IFNE L273 - false
   * Goal 14. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I116 Branch 23 IF_ICMPNE L276 - true
   * Goal 15. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I135 Branch 24 IFNE L278 - false
   * Goal 16. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I11 Branch 103 IFNE L1190 - false
   * Goal 17. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I6 Branch 121 IFNULL L1304 - false
   * Goal 18. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I13 Branch 122 IFEQ L1304 - true
   * Goal 19. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I25 Branch 123 IFEQ L1308 - true
   * Goal 20. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I62 Branch 125 IFEQ L1317 - true
   * Goal 21. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I76 Branch 126 IFEQ L1320 - true
   * Goal 22. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I89 Branch 127 IFEQ L1323 - false
   */

  @Test
  public void test72()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      String string0 = JSONObject.valueToString(jSONObject0, (-610), (-610));
      assertEquals("{}", string0);
      assertNotNull(string0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
  }

  //Test case number: 73
  /*
   * 16 covered goals:
   * Goal 1. wheel.json.JSONObject.isNull(Ljava/lang/String;)Z: root-Branch
   * Goal 2. wheel.json.JSONObject.optBoolean(Ljava/lang/String;Z)Z: root-Branch
   * Goal 3. wheel.json.JSONObject.optBoolean(Ljava/lang/String;)Z: root-Branch
   * Goal 4. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I6 Branch 1 IFNULL L115 - true
   * Goal 5. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 26 IFNONNULL L346 - false
   * Goal 6. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I26 Branch 27 IFEQ L347 - true
   * Goal 7. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 29 IFNONNULL L374 - false
   * Goal 8. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I14 Branch 39 IFNE L439 - false
   * Goal 9. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I20 Branch 40 IFEQ L439 - true
   * Goal 10. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I41 Branch 42 IFNE L443 - false
   * Goal 11. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I47 Branch 43 IFEQ L443 - true
   * Goal 12. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 81 LOOKUPSWITCH L1030 Case 34 - false
   * Goal 13. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 84 LOOKUPSWITCH L1030 Default-Case - true
   * Goal 14. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I177 Branch 86 IF_ICMPLT L1058 - false
   * Goal 15. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I183 Branch 87 IF_ICMPLT L1058 - true
   * Goal 16. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I196 Branch 89 IF_ICMPLT L1058 - true
   */

  @Test
  public void test73()  throws Throwable  {
      HashMap<Class<CoreLabel.GenericAnnotation<Integer>>, Word> hashMap0 = new HashMap<Class<CoreLabel.GenericAnnotation<Integer>>, Word>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      
      boolean boolean0 = jSONObject0.isNull("}OEEVXT$cJ(0C@#Zy%C");
      assertTrue(boolean0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.accumulate("}OEEVXT$cJ(0C@#Zy%C", (Object) jSONObject0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      
      JSONObject jSONObject2 = jSONObject1.append("Unknown feature type ", (Object) jSONObject0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(jSONObject2);
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject2.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(2, jSONObject0.length());
      
      boolean boolean1 = jSONObject2.optBoolean("}OEEVXT$cJ(0C@#Zy%C");
      assertFalse(boolean1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject2.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(2, jSONObject0.length());
  }

  //Test case number: 74
  /*
   * 27 covered goals:
   * Goal 1. wheel.json.JSONObject.optLong(Ljava/lang/String;J)J: root-Branch
   * Goal 2. wheel.json.JSONObject.<init>(Ljava/util/Map;)V: I11 Branch 16 IFNONNULL L234 - true
   * Goal 3. wheel.json.JSONObject.get(Ljava/lang/String;)Ljava/lang/Object;: I12 Branch 38 IFNONNULL L421 - true
   * Goal 4. wheel.json.JSONObject.getDouble(Ljava/lang/String;)D: I13 Branch 45 IFEQ L463 - true
   * Goal 5. wheel.json.JSONObject.getLong(Ljava/lang/String;)J: I13 Branch 49 IFEQ L536 - true
   * Goal 6. wheel.json.JSONObject.opt(Ljava/lang/String;)Ljava/lang/Object;: I6 Branch 63 IFNONNULL L688 - true
   * Goal 7. wheel.json.JSONObject.optJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 65 IFEQ L815 - true
   * Goal 8. wheel.json.JSONObject.optString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I12 Branch 67 IFNULL L889 - true
   * Goal 9. wheel.json.JSONObject.put(Ljava/lang/String;Z)Lwheel/json/JSONObject;: I8 Branch 68 IFEQ L902 - true
   * Goal 10. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 69 IFNONNULL L975 - true
   * Goal 11. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I20 Branch 70 IFNULL L978 - false
   * Goal 12. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I6 Branch 73 IFNULL L1015 - false
   * Goal 13. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I12 Branch 74 IFNE L1015 - true
   * Goal 14. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I51 Branch 75 IF_ICMPGE L1027 - true
   * Goal 15. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I51 Branch 75 IF_ICMPGE L1027 - false
   * Goal 16. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 76 LOOKUPSWITCH L1030 Case 8 - false
   * Goal 17. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 77 LOOKUPSWITCH L1030 Case 9 - false
   * Goal 18. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 78 LOOKUPSWITCH L1030 Case 10 - false
   * Goal 19. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 79 LOOKUPSWITCH L1030 Case 12 - false
   * Goal 20. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 80 LOOKUPSWITCH L1030 Case 13 - false
   * Goal 21. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 81 LOOKUPSWITCH L1030 Case 34 - true
   * Goal 22. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 82 LOOKUPSWITCH L1030 Case 47 - false
   * Goal 23. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 83 LOOKUPSWITCH L1030 Case 92 - false
   * Goal 24. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 84 LOOKUPSWITCH L1030 Default-Case - false
   * Goal 25. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I6 Branch 91 IFNULL L1088 - false
   * Goal 26. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I14 Branch 92 IFEQ L1089 - true
   * Goal 27. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I45 Branch 95 IFEQ L1094 - true
   */

  @Test
  public void test74()  throws Throwable  {
      HashMap<TaggedWord, WordLemmaTag> hashMap0 = new HashMap<TaggedWord, WordLemmaTag>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("\"", false);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      
      String string0 = jSONObject0.optString("td|ua^fN3", "td|ua^fN3");
      assertEquals("td|ua^fN3", string0);
      assertSame(jSONObject0, jSONObject1);
      assertNotNull(string0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      
      long long0 = jSONObject0.optLong("\"", (long) 1);
      assertEquals(1L, long0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      
      JSONArray jSONArray0 = jSONObject1.optJSONArray("td|ua^fN3");
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertNull(jSONArray0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
  }
}
