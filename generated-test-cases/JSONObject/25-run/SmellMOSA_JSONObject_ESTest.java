/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 18 04:00:02 GMT 2015
 */

package wheel.json;

import static org.junit.Assert.*;
import org.junit.Test;
import edu.stanford.nlp.ling.CategoryWordTag;
import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.ling.IndexedWord;
import edu.stanford.nlp.ling.StringLabel;
import edu.stanford.nlp.ling.Tag;
import edu.stanford.nlp.ling.TaggedWord;
import edu.stanford.nlp.ling.Word;
import edu.stanford.nlp.ling.WordLemmaTag;
import edu.stanford.nlp.util.HashableCoreMap;
import java.io.ObjectStreamConstants;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 29 IFNONNULL L374 - true
   * Goal 2. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I39 Branch 30 IFEQ L376 - false
   */

  @Test
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[2] = "f%lH^;SDK4C!S|M92C";
      JSONObject jSONObject0 = new JSONObject((Object) "f%lH^;SDK4C!S|M92C", stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.append("f%lH^;SDK4C!S|M92C", (Object) "f%lH^;SDK4C!S|M92C");
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      JSONObject jSONObject2 = jSONObject0.append("f%lH^;SDK4C!S|M92C", (Object) "f%lH^;SDK4C!S|M92C");
      assertNotNull(jSONObject2);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
  }

  //Test case number: 1
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I45 Branch 95 IFEQ L1094 - false
   * Goal 2. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I54 Branch 96 IFNE L1095 - false
   * Goal 3. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I61 Branch 97 IFEQ L1095 - true
   */

  @Test
  public void test01()  throws Throwable  {
      HashMap<Integer, LinkedList<Tag>> hashMap0 = new HashMap<Integer, LinkedList<Tag>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Float float0 = new Float(774.17F);
      assertEquals(774.17F, (float)float0, 0.01F);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("pO4B", (Object) float0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 48 IFEQ L517 - false
   */

  @Test
  public void test02()  throws Throwable  {
      HashMap<Integer, LinkedList<Tag>> hashMap0 = new HashMap<Integer, LinkedList<Tag>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.put("", (Object) jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      JSONObject jSONObject2 = jSONObject1.getJSONObject("");
      assertNotNull(jSONObject2);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject2.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I82 Branch 114 IFEQ L1268 - false
   */

  @Test
  public void test03()  throws Throwable  {
      Long long0 = new Long((-2339L));
      assertEquals((-2339L), (long)long0);
      
      String string0 = JSONObject.valueToString(long0);
      assertNotNull(string0);
      assertEquals("-2339", string0);
  }

  //Test case number: 4
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I40 Branch 53 IFNE L574 - true
   * Goal 2. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I60 Branch 54 IF_ICMPGE L578 - true
   * Goal 3. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I60 Branch 54 IF_ICMPGE L578 - false
   */

  @Test
  public void test04()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-63));
      assertEquals((byte) (-63), (byte)byte0);
      
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      assertNotNull(stringArray0);
  }

  //Test case number: 5
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.remove(Ljava/lang/String;)Ljava/lang/Object;: root-Branch
   * Goal 2. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I6 Branch 57 IFNONNULL L662 - true
   * Goal 3. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I31 Branch 58 IFLE L670 - true
   */

  @Test
  public void test05()  throws Throwable  {
      TaggedWord taggedWord0 = new TaggedWord("re;qbC_BQF|3c0}2,", "re;qbC_BQF|3c0}2,");
      assertNotNull(taggedWord0);
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("re;qbC_BQF|3c0}2,", taggedWord0.word());
      assertEquals("re;qbC_BQF|3c0}2,", taggedWord0.tag());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals("re;qbC_BQF|3c0}2,", taggedWord0.value());
      
      String[] stringArray0 = new String[2];
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATA;
      assertEquals((byte)119, byte0);
      
      String string0 = JSONObject.numberToString((Number) (byte)119);
      assertNotNull(string0);
      assertEquals("119", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) taggedWord0, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("re;qbC_BQF|3c0}2,", taggedWord0.word());
      assertEquals("re;qbC_BQF|3c0}2,", taggedWord0.tag());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals("re;qbC_BQF|3c0}2,", taggedWord0.value());
      assertEquals(0, jSONObject0.length());
      
      Object object0 = jSONObject0.remove(stringArray0[0]);
      assertNull(object0);
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("re;qbC_BQF|3c0}2,", taggedWord0.word());
      assertEquals("re;qbC_BQF|3c0}2,", taggedWord0.tag());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals("re;qbC_BQF|3c0}2,", taggedWord0.value());
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Z)Lwheel/json/JSONObject;: I8 Branch 68 IFEQ L902 - true
   */

  @Test
  public void test06()  throws Throwable  {
      CoreLabel coreLabel0 = new CoreLabel();
      assertNotNull(coreLabel0);
      assertNull(coreLabel0.docID());
      assertEquals(-1, coreLabel0.beginPosition());
      assertEquals(0, coreLabel0.copyCount());
      assertEquals("", coreLabel0.originalText());
      assertNull(coreLabel0.ner());
      assertEquals(-1, coreLabel0.sentIndex());
      assertNull(coreLabel0.tag());
      assertNull(coreLabel0.word());
      assertNull(coreLabel0.value());
      assertNull(coreLabel0.category());
      assertEquals("", coreLabel0.after());
      assertEquals("", coreLabel0.before());
      assertEquals(-1, coreLabel0.endPosition());
      assertEquals(0, coreLabel0.size());
      assertNull(coreLabel0.lemma());
      assertEquals(-1, coreLabel0.index());
      
      JSONObject jSONObject0 = new JSONObject((Object) coreLabel0);
      assertNotNull(jSONObject0);
      assertNull(coreLabel0.docID());
      assertEquals(-1, coreLabel0.beginPosition());
      assertEquals(0, coreLabel0.copyCount());
      assertEquals("", coreLabel0.originalText());
      assertNull(coreLabel0.ner());
      assertEquals(-1, coreLabel0.sentIndex());
      assertNull(coreLabel0.tag());
      assertNull(coreLabel0.word());
      assertNull(coreLabel0.value());
      assertNull(coreLabel0.category());
      assertEquals("", coreLabel0.after());
      assertEquals("", coreLabel0.before());
      assertEquals(-1, coreLabel0.endPosition());
      assertEquals(0, coreLabel0.size());
      assertNull(coreLabel0.lemma());
      assertEquals(-1, coreLabel0.index());
      assertEquals(1, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put(".Yqs\"\"++:)_[A@^e", false);
      assertNotNull(jSONObject1);
      assertEquals(2, jSONObject1.length());
      assertNull(coreLabel0.docID());
      assertEquals(-1, coreLabel0.beginPosition());
      assertEquals(0, coreLabel0.copyCount());
      assertEquals("", coreLabel0.originalText());
      assertNull(coreLabel0.ner());
      assertEquals(-1, coreLabel0.sentIndex());
      assertNull(coreLabel0.tag());
      assertNull(coreLabel0.word());
      assertNull(coreLabel0.value());
      assertNull(coreLabel0.category());
      assertEquals("", coreLabel0.after());
      assertEquals("", coreLabel0.before());
      assertEquals(-1, coreLabel0.endPosition());
      assertEquals(0, coreLabel0.size());
      assertNull(coreLabel0.lemma());
      assertEquals(-1, coreLabel0.index());
      assertEquals(2, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/lang/String;)V: root-Branch
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I12 Branch 4 IF_ICMPEQ L178 - false
   */

  @Test
  public void test07()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("Encountered \"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Encountered \"
         //
      }
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optBoolean(Ljava/lang/String;Z)Z: root-Branch
   */

  @Test
  public void test08()  throws Throwable  {
      HashMap<CoreLabel, Object> hashMap0 = new HashMap<CoreLabel, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      boolean boolean0 = jSONObject0.optBoolean("ALG0H/", false);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(boolean0);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I12 Branch 67 IFNULL L889 - true
   */

  @Test
  public void test09()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertNull(string0);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 10
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.getString(Ljava/lang/String;)Ljava/lang/String;: root-Branch
   * Goal 2. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I77 Branch 37 IFLE L404 - true
   */

  @Test
  public void test10()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1180.5651836);
      assertNotNull(string0);
      assertEquals("1180.5651836", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      try {
        String string1 = jSONObject0.getString("1180.5651836");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1180.5651836\"] not found.
         //
      }
  }

  //Test case number: 11
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 26 IFNONNULL L346 - false
   * Goal 2. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I26 Branch 27 IFEQ L347 - true
   * Goal 3. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I6 Branch 91 IFNULL L1088 - true
   */

  @Test
  public void test11()  throws Throwable  {
      HashMap<IndexedWord, Boolean> hashMap0 = new HashMap<IndexedWord, Boolean>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      
      try {
        JSONObject jSONObject1 = jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
      }
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/util/Collection;)Lwheel/json/JSONObject;: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      JSONArray jSONArray1 = jSONArray0.put(0, (double) 0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      JSONObject jSONObject0 = jSONArray1.toJSONObject(jSONArray0);
      assertNotNull(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      LinkedHashSet<StringLabel> linkedHashSet0 = new LinkedHashSet<StringLabel>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JSONObject jSONObject1 = jSONObject0.put("vmPhF$rajtYL+C];Y", (Collection) linkedHashSet0);
      assertNotNull(jSONObject1);
      assertEquals(2, jSONObject0.length());
      assertEquals(1, jSONArray0.length());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(1, jSONArray1.length());
      assertEquals(2, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONObject1, jSONObject0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I65 Branch 134 IFEQ L1365 - false
   */

  @Test
  public void test13()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      HashMap<IndexedWord, JSONObject> hashMap0 = new HashMap<IndexedWord, JSONObject>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject1 = jSONObject0.put(" GV/9", (Map) hashMap0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(" GV/9");
      assertNotNull(mockFileWriter0);
      
      MockFileWriter mockFileWriter1 = (MockFileWriter)jSONObject1.write((Writer) mockFileWriter0);
      assertNotNull(mockFileWriter1);
      assertEquals(1, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(mockFileWriter0, mockFileWriter1);
      assertSame(mockFileWriter1, mockFileWriter0);
      assertSame(jSONObject1, jSONObject0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.isNull(Ljava/lang/String;)Z: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      CoreLabel coreLabel0 = new CoreLabel();
      assertNotNull(coreLabel0);
      assertEquals(-1, coreLabel0.beginPosition());
      assertEquals(0, coreLabel0.copyCount());
      assertEquals("", coreLabel0.originalText());
      assertNull(coreLabel0.ner());
      assertNull(coreLabel0.docID());
      assertEquals(-1, coreLabel0.sentIndex());
      assertNull(coreLabel0.tag());
      assertEquals("", coreLabel0.after());
      assertNull(coreLabel0.value());
      assertNull(coreLabel0.word());
      assertNull(coreLabel0.category());
      assertEquals("", coreLabel0.before());
      assertEquals(-1, coreLabel0.endPosition());
      assertEquals(0, coreLabel0.size());
      assertNull(coreLabel0.lemma());
      assertEquals(-1, coreLabel0.index());
      
      JSONObject jSONObject0 = new JSONObject((Object) coreLabel0);
      assertNotNull(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(-1, coreLabel0.beginPosition());
      assertEquals(0, coreLabel0.copyCount());
      assertEquals("", coreLabel0.originalText());
      assertNull(coreLabel0.ner());
      assertNull(coreLabel0.docID());
      assertEquals(-1, coreLabel0.sentIndex());
      assertNull(coreLabel0.tag());
      assertEquals("", coreLabel0.after());
      assertNull(coreLabel0.value());
      assertNull(coreLabel0.word());
      assertNull(coreLabel0.category());
      assertEquals("", coreLabel0.before());
      assertEquals(-1, coreLabel0.endPosition());
      assertEquals(0, coreLabel0.size());
      assertNull(coreLabel0.lemma());
      assertEquals(-1, coreLabel0.index());
      
      boolean boolean0 = jSONObject0.isNull(".Yqs\"\"++:)_[A@^e");
      assertEquals(1, jSONObject0.length());
      assertEquals(-1, coreLabel0.beginPosition());
      assertEquals(0, coreLabel0.copyCount());
      assertEquals("", coreLabel0.originalText());
      assertNull(coreLabel0.ner());
      assertNull(coreLabel0.docID());
      assertEquals(-1, coreLabel0.sentIndex());
      assertNull(coreLabel0.tag());
      assertEquals("", coreLabel0.after());
      assertNull(coreLabel0.value());
      assertNull(coreLabel0.word());
      assertNull(coreLabel0.category());
      assertEquals("", coreLabel0.before());
      assertEquals(-1, coreLabel0.endPosition());
      assertEquals(0, coreLabel0.size());
      assertNull(coreLabel0.lemma());
      assertEquals(-1, coreLabel0.index());
      assertTrue(boolean0);
  }

  //Test case number: 15
  /*
   * 5 covered goals:
   * Goal 1. wheel.json.JSONObject.optInt(Ljava/lang/String;I)I: root-Branch
   * Goal 2. wheel.json.JSONObject.optInt(Ljava/lang/String;)I: root-Branch
   * Goal 3. wheel.json.JSONObject.getDouble(Ljava/lang/String;)D: I13 Branch 45 IFEQ L463 - true
   * Goal 4. wheel.json.JSONObject.getInt(Ljava/lang/String;)I: I13 Branch 46 IFEQ L484 - true
   * Goal 5. wheel.json.JSONObject.put(Ljava/lang/String;Z)Lwheel/json/JSONObject;: I8 Branch 68 IFEQ L902 - false
   */

  @Test
  public void test15()  throws Throwable  {
      HashMap<Boolean, TaggedWord> hashMap0 = new HashMap<Boolean, TaggedWord>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("aMKk$)2tF)1r6", true);
      assertNotNull(jSONObject1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      int int0 = jSONObject0.optInt("aMKk$)2tF)1r6");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I45 Branch 35 IFGE L400 - true
   */

  @Test
  public void test16()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1.0E-100);
      assertNotNull(string0);
      assertEquals("1.0E-100", string0);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.toString(I)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      HashMap<WordLemmaTag, HashableCoreMap> hashMap0 = new HashMap<WordLemmaTag, HashableCoreMap>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      
      String string0 = jSONObject0.toString(431);
      assertNotNull(string0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      assertEquals("{}", string0);
  }

  //Test case number: 18
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I6 Branch 52 IFNONNULL L568 - true
   * Goal 2. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I40 Branch 53 IFNE L574 - false
   */

  @Test
  public void test18()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;J)Lwheel/json/JSONObject;: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("getformat", (-1551L));
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
  }

  //Test case number: 20
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I6 Branch 73 IFNULL L1015 - true
   * Goal 2. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 81 LOOKUPSWITCH L1030 Case 34 - true
   */

  @Test
  public void test20()  throws Throwable  {
      CategoryWordTag categoryWordTag0 = new CategoryWordTag();
      assertNotNull(categoryWordTag0);
      assertNull(categoryWordTag0.category());
      assertEquals(-1, categoryWordTag0.beginPosition());
      assertNull(categoryWordTag0.tag());
      assertEquals(-1, categoryWordTag0.endPosition());
      assertNull(categoryWordTag0.word());
      assertNull(categoryWordTag0.value());
      assertTrue(categoryWordTag0.printWordTag);
      assertFalse(categoryWordTag0.suppressTerminalDetails);
      
      String string0 = JSONObject.valueToString(categoryWordTag0, (-1183), (-1183));
      assertNotNull(string0);
      assertNull(categoryWordTag0.category());
      assertEquals(-1, categoryWordTag0.beginPosition());
      assertNull(categoryWordTag0.tag());
      assertEquals(-1, categoryWordTag0.endPosition());
      assertNull(categoryWordTag0.word());
      assertNull(categoryWordTag0.value());
      assertEquals("\"\"", string0);
      assertTrue(categoryWordTag0.printWordTag);
      assertFalse(categoryWordTag0.suppressTerminalDetails);
      
      String string1 = JSONObject.quote("\"\"");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"\\\"\\\"\"", string1);
      assertNotSame(string1, string0);
  }

  //Test case number: 21
  /*
   * 11 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I78 Branch 19 IFLE L270 - false
   * Goal 2. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I11 Branch 50 IFNE L548 - true
   * Goal 3. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I37 Branch 51 IFEQ L554 - true
   * Goal 4. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I37 Branch 51 IFEQ L554 - false
   * Goal 5. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I96 Branch 115 IFNE L1271 - true
   * Goal 6. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I21 Branch 132 IFEQ L1357 - true
   * Goal 7. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I21 Branch 132 IFEQ L1357 - false
   * Goal 8. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I28 Branch 133 IFEQ L1358 - true
   * Goal 9. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I28 Branch 133 IFEQ L1358 - false
   * Goal 10. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I65 Branch 134 IFEQ L1365 - true
   * Goal 11. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I84 Branch 135 IFEQ L1367 - true
   */

  @Test
  public void test21()  throws Throwable  {
      LinkedList<WordLemmaTag> linkedList0 = new LinkedList<WordLemmaTag>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      WordLemmaTag wordLemmaTag0 = new WordLemmaTag("g{PKYl+@'|U}>");
      assertNotNull(wordLemmaTag0);
      assertNull(wordLemmaTag0.lemma());
      assertEquals("g{PKYl+@'|U}>", wordLemmaTag0.word());
      assertNull(wordLemmaTag0.tag());
      assertEquals("g{PKYl+@'|U}>", wordLemmaTag0.value());
      
      boolean boolean0 = linkedList0.add(wordLemmaTag0);
      assertEquals(1, linkedList0.size());
      assertNull(wordLemmaTag0.lemma());
      assertEquals("g{PKYl+@'|U}>", wordLemmaTag0.word());
      assertNull(wordLemmaTag0.tag());
      assertEquals("g{PKYl+@'|U}>", wordLemmaTag0.value());
      assertTrue(boolean0);
      
      JSONObject jSONObject0 = new JSONObject((Object) linkedList0);
      assertNotNull(jSONObject0);
      assertEquals(4, jSONObject0.length());
      assertEquals(1, linkedList0.size());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("Gex0rq>,{i");
      assertNotNull(mockFileWriter0);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(4, jSONObject0.length());
      assertEquals(1, linkedList0.size());
      
      MockFileWriter mockFileWriter1 = (MockFileWriter)jSONObject0.write((Writer) mockFileWriter0);
      assertNotNull(mockFileWriter1);
      assertEquals(4, jSONObject0.length());
      assertEquals(1, linkedList0.size());
      assertSame(mockFileWriter1, mockFileWriter0);
      assertSame(mockFileWriter0, mockFileWriter1);
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/util/Map;)Lwheel/json/JSONObject;: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      HashMap<LinkedList<Byte>, Object> hashMap0 = new HashMap<LinkedList<Byte>, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject1 = jSONObject0.put("^9+S_7", (Map) hashMap0);
      assertNotNull(jSONObject1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 23
  /*
   * 7 covered goals:
   * Goal 1. wheel.json.JSONObject$Null.toString()Ljava/lang/String;: root-Branch
   * Goal 2. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I6 Branch 1 IFNULL L115 - true
   * Goal 3. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I14 Branch 92 IFEQ L1089 - false
   * Goal 4. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I23 Branch 93 IFNE L1090 - false
   * Goal 5. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I30 Branch 94 IFEQ L1090 - true
   * Goal 6. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I13 Branch 111 IFEQ L1253 - false
   * Goal 7. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I108 Branch 117 IFEQ L1271 - false
   */

  @Test
  public void test23()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      JSONArray jSONArray1 = jSONArray0.put(732, (Object) jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(733, jSONArray0.length());
      assertEquals(733, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      JSONArray jSONArray2 = jSONArray1.put(4227, (double) 4227);
      assertNotNull(jSONArray2);
      assertEquals(4228, jSONArray0.length());
      assertEquals(4228, jSONArray2.length());
      assertEquals(4228, jSONArray1.length());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      
      try {
        JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
      }
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optDouble(Ljava/lang/String;)D: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      HashMap<CategoryWordTag, CategoryWordTag> hashMap0 = new HashMap<CategoryWordTag, CategoryWordTag>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      double double0 = jSONObject0.optDouble("Z')*KxR");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01D);
  }

  //Test case number: 25
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I11 Branch 103 IFNE L1190 - true
   * Goal 2. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I41 Branch 104 IF_ICMPNE L1197 - false
   * Goal 3. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I89 Branch 127 IFEQ L1323 - false
   */

  @Test
  public void test25()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.putOpt("O;Ikj`=h9yI", (Object) jSONObject0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      // Undeclared exception!
      try {
        String string0 = JSONObject.valueToString(jSONObject1, 0, 0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 26
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 29 IFNONNULL L374 - false
   * Goal 2. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I6 Branch 57 IFNONNULL L662 - false
   * Goal 3. wheel.json.JSONObject.optDouble(Ljava/lang/String;D)D: I13 Branch 64 IFEQ L764 - true
   */

  @Test
  public void test26()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      Byte byte0 = new Byte((byte) (-33));
      assertEquals((byte) (-33), (byte)byte0);
      
      JSONArray jSONArray1 = jSONArray0.put((Object) byte0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray1.length());
      assertEquals(1, jSONArray0.length());
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray1);
      assertNotNull(jSONObject0);
      assertEquals(1, jSONArray1.length());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      
      JSONObject jSONObject1 = jSONObject0.append("is", (Object) jSONArray1);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONArray1.length());
      assertEquals(2, jSONObject1.length());
      assertEquals(1, jSONArray0.length());
      assertEquals(2, jSONObject0.length());
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONObject0, jSONObject1);
      
      double double0 = jSONObject1.optDouble("is", (double) byte0);
      assertEquals(1, jSONArray1.length());
      assertEquals(2, jSONObject1.length());
      assertEquals(1, jSONArray0.length());
      assertEquals(2, jSONObject0.length());
      assertEquals((-33.0), double0, 0.01D);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONObject0, jSONObject1);
      
      try {
        String string0 = JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
      }
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/util/Map;)V: I11 Branch 16 IFNONNULL L234 - false
   */

  @Test
  public void test27()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 28
  /*
   * 6 covered goals:
   * Goal 1. wheel.json.JSONObject.optLong(Ljava/lang/String;J)J: root-Branch
   * Goal 2. wheel.json.JSONObject.get(Ljava/lang/String;)Ljava/lang/Object;: I12 Branch 38 IFNONNULL L421 - false
   * Goal 3. wheel.json.JSONObject.optJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 66 IFEQ L829 - true
   * Goal 4. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 82 LOOKUPSWITCH L1030 Case 47 - true
   * Goal 5. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 84 LOOKUPSWITCH L1030 Default-Case - false
   * Goal 6. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I91 Branch 85 IF_ICMPNE L1037 - true
   */

  @Test
  public void test28()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      long long0 = jSONObject0.optLong("wGV/9", (long) (-1183));
      assertEquals(0, jSONObject0.length());
      assertEquals((-1183L), long0);
      
      JSONObject jSONObject1 = jSONObject0.optJSONObject("wGV/9");
      assertNull(jSONObject1);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 29
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I11 Branch 103 IFNE L1190 - false
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I121 Branch 129 IFEQ L1329 - false
   */

  @Test
  public void test29()  throws Throwable  {
      HashMap<Tag, TaggedWord> hashMap0 = new HashMap<Tag, TaggedWord>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = JSONObject.valueToString(hashMap0, 171, 171);
      assertNotNull(string0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", string0);
  }

  //Test case number: 30
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I6 Branch 110 IFNULL L1253 - true
   */

  @Test
  public void test30()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  //Test case number: 31
  /*
   * 14 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;D)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.<init>(Ljava/lang/Object;[Ljava/lang/String;)V: I20 Branch 25 IF_ICMPGE L304 - true
   * Goal 3. wheel.json.JSONObject.<init>(Ljava/lang/Object;[Ljava/lang/String;)V: I20 Branch 25 IF_ICMPGE L304 - false
   * Goal 4. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 69 IFNONNULL L975 - false
   * Goal 5. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I6 Branch 110 IFNULL L1253 - false
   * Goal 6. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I13 Branch 111 IFEQ L1253 - true
   * Goal 7. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I25 Branch 112 IFEQ L1256 - true
   * Goal 8. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I82 Branch 114 IFEQ L1268 - true
   * Goal 9. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I96 Branch 115 IFNE L1271 - false
   * Goal 10. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I102 Branch 116 IFNE L1271 - false
   * Goal 11. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I108 Branch 117 IFEQ L1271 - true
   * Goal 12. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I121 Branch 118 IFEQ L1275 - true
   * Goal 13. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I138 Branch 119 IFEQ L1278 - true
   * Goal 14. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I156 Branch 120 IFEQ L1281 - true
   */

  @Test
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[13];
      String string0 = JSONObject.valueToString("");
      assertNotNull(string0);
      assertEquals("\"\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "", stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      try {
        JSONObject jSONObject1 = jSONObject0.put(stringArray0[0], (-956.2498));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
      }
  }

  //Test case number: 32
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.get(Ljava/lang/String;)Ljava/lang/Object;: I12 Branch 38 IFNONNULL L421 - true
   * Goal 2. wheel.json.JSONObject.getJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 48 IFEQ L517 - true
   * Goal 3. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I12 Branch 74 IFNE L1015 - false
   */

  @Test
  public void test32()  throws Throwable  {
      HashMap<Integer, LinkedList<Tag>> hashMap0 = new HashMap<Integer, LinkedList<Tag>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSONObject jSONObject1 = jSONObject0.put("", object0);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      
      try {
        JSONObject jSONObject2 = jSONObject1.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
      }
  }

  //Test case number: 33
  /*
   * 24 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/util/Map;)V: I11 Branch 16 IFNONNULL L234 - true
   * Goal 2. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I33 Branch 17 IF_ICMPGE L263 - true
   * Goal 3. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I33 Branch 17 IF_ICMPGE L263 - false
   * Goal 4. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I58 Branch 18 IFLE L268 - true
   * Goal 5. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I58 Branch 18 IFLE L268 - false
   * Goal 6. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I78 Branch 19 IFLE L270 - true
   * Goal 7. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I92 Branch 20 IFLE L273 - true
   * Goal 8. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I92 Branch 20 IFLE L273 - false
   * Goal 9. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I100 Branch 21 IFEQ L273 - false
   * Goal 10. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I107 Branch 22 IFNE L273 - true
   * Goal 11. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I107 Branch 22 IFNE L273 - false
   * Goal 12. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I116 Branch 23 IF_ICMPNE L276 - true
   * Goal 13. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I135 Branch 24 IFNE L278 - false
   * Goal 14. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I7 Branch 31 IFNE L393 - false
   * Goal 15. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I13 Branch 32 IFEQ L393 - true
   * Goal 16. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I31 Branch 33 IFLE L400 - false
   * Goal 17. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I38 Branch 34 IFGE L400 - false
   * Goal 18. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I45 Branch 35 IFGE L400 - false
   * Goal 19. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I54 Branch 36 IFLE L401 - true
   * Goal 20. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I54 Branch 36 IFLE L401 - false
   * Goal 21. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I77 Branch 37 IFLE L404 - false
   * Goal 22. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I18 Branch 55 IFEQ L648 - false
   * Goal 23. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I37 Branch 56 IFNE L651 - true
   * Goal 24. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I11 Branch 72 IFNULL L999 - false
   */

  @Test
  public void test33()  throws Throwable  {
      Integer integer0 = new Integer(5425);
      assertEquals(5425, (int)integer0);
      
      JSONObject jSONObject0 = new JSONObject((Object) integer0);
      assertNotNull(jSONObject0);
      assertEquals(1, jSONObject0.length());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "0";
      HashMap<Word, CoreLabel> hashMap0 = new HashMap<Word, CoreLabel>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = JSONObject.doubleToString((double) 5425);
      assertNotNull(string0);
      assertEquals("5425", string0);
      
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject1);
      assertEquals(0, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotSame(jSONObject1, jSONObject0);
      
      stringArray0[6] = "0";
      JSONObject jSONObject2 = jSONObject0.put("0", (Object) "0");
      assertNotNull(jSONObject2);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject2.length());
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject2.equals((Object)jSONObject1));
      assertSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONArray0.length());
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject1);
      
      JSONObject jSONObject3 = new JSONObject(jSONObject0, stringArray0);
      assertNotNull(jSONObject3);
      assertEquals(1, jSONObject3.length());
      assertEquals(2, jSONObject0.length());
      assertFalse(jSONObject3.equals((Object)jSONObject2));
      assertFalse(jSONObject3.equals((Object)jSONObject0));
      assertFalse(jSONObject3.equals((Object)jSONObject1));
      assertFalse(jSONObject0.equals((Object)jSONObject3));
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertNotSame(jSONObject3, jSONObject2);
      assertNotSame(jSONObject3, jSONObject0);
      assertNotSame(jSONObject3, jSONObject1);
      assertNotSame(jSONObject0, jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertNotSame(jSONObject0, jSONObject1);
  }

  //Test case number: 34
  /*
   * 36 covered goals:
   * Goal 1. wheel.json.JSONObject.keys()Ljava/util/Iterator;: root-Branch
   * Goal 2. wheel.json.JSONObject.put(Ljava/lang/String;I)Lwheel/json/JSONObject;: root-Branch
   * Goal 3. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I18 Branch 55 IFEQ L648 - true
   * Goal 4. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I37 Branch 56 IFNE L651 - false
   * Goal 5. wheel.json.JSONObject.optJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 65 IFEQ L815 - true
   * Goal 6. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 69 IFNONNULL L975 - true
   * Goal 7. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I20 Branch 70 IFNULL L978 - false
   * Goal 8. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I6 Branch 73 IFNULL L1015 - false
   * Goal 9. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I12 Branch 74 IFNE L1015 - true
   * Goal 10. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I51 Branch 75 IF_ICMPGE L1027 - true
   * Goal 11. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I51 Branch 75 IF_ICMPGE L1027 - false
   * Goal 12. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 76 LOOKUPSWITCH L1030 Case 8 - false
   * Goal 13. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 77 LOOKUPSWITCH L1030 Case 9 - false
   * Goal 14. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 78 LOOKUPSWITCH L1030 Case 10 - false
   * Goal 15. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 79 LOOKUPSWITCH L1030 Case 12 - false
   * Goal 16. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 80 LOOKUPSWITCH L1030 Case 13 - false
   * Goal 17. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 81 LOOKUPSWITCH L1030 Case 34 - false
   * Goal 18. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 82 LOOKUPSWITCH L1030 Case 47 - false
   * Goal 19. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 83 LOOKUPSWITCH L1030 Case 92 - false
   * Goal 20. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 84 LOOKUPSWITCH L1030 Default-Case - true
   * Goal 21. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I177 Branch 86 IF_ICMPLT L1058 - false
   * Goal 22. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I183 Branch 87 IF_ICMPLT L1058 - true
   * Goal 23. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I196 Branch 89 IF_ICMPLT L1058 - true
   * Goal 24. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I6 Branch 91 IFNULL L1088 - false
   * Goal 25. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I14 Branch 92 IFEQ L1089 - true
   * Goal 26. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I45 Branch 95 IFEQ L1094 - true
   * Goal 27. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I6 Branch 121 IFNULL L1304 - false
   * Goal 28. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I13 Branch 122 IFEQ L1304 - true
   * Goal 29. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I25 Branch 123 IFEQ L1308 - true
   * Goal 30. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I62 Branch 125 IFEQ L1317 - true
   * Goal 31. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I76 Branch 126 IFEQ L1320 - true
   * Goal 32. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I89 Branch 127 IFEQ L1323 - true
   * Goal 33. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I105 Branch 128 IFEQ L1326 - true
   * Goal 34. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I121 Branch 129 IFEQ L1329 - true
   * Goal 35. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I140 Branch 130 IFEQ L1332 - true
   * Goal 36. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I160 Branch 131 IFEQ L1335 - true
   */

  @Test
  public void test34()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
      assertEquals(0, jSONObject0.length());
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      assertEquals(0, jSONObject0.length());
      
      JSONArray jSONArray1 = jSONObject0.optJSONArray("toU");
      assertNull(jSONArray1);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("toU", 2518);
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      String string0 = JSONObject.valueToString(iterator0, 2518, 2518);
      assertNotNull(string0);
      assertEquals(1, jSONObject0.length());
      assertSame(jSONObject0, jSONObject1);
  }

  //Test case number: 35
  /*
   * 10 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>()V: root-Branch
   * Goal 2. wheel.json.JSONObject.length()I: root-Branch
   * Goal 3. wheel.json.JSONObject.<init>(Lwheel/json/JSONObject;[Ljava/lang/String;)V: I15 Branch 3 IF_ICMPGE L162 - true
   * Goal 4. wheel.json.JSONObject.<init>(Lwheel/json/JSONObject;[Ljava/lang/String;)V: I15 Branch 3 IF_ICMPGE L162 - false
   * Goal 5. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I11 Branch 50 IFNE L548 - false
   * Goal 6. wheel.json.JSONObject.opt(Ljava/lang/String;)Ljava/lang/Object;: I6 Branch 63 IFNONNULL L688 - true
   * Goal 7. wheel.json.JSONObject.opt(Ljava/lang/String;)Ljava/lang/Object;: I6 Branch 63 IFNONNULL L688 - false
   * Goal 8. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 71 IFNULL L999 - true
   * Goal 9. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 71 IFNULL L999 - false
   * Goal 10. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I11 Branch 72 IFNULL L999 - true
   */

  @Test
  public void test35()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      String[] stringArray0 = new String[14];
      stringArray0[3] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertNotNull(jSONObject1);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, jSONObject1.length());
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
      
      String[] stringArray1 = JSONObject.getNames(jSONObject1);
      assertNull(stringArray1);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, jSONObject1.length());
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
  }
}
