/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 18 02:48:33 GMT 2015
 */

package wheel.json;

import static org.junit.Assert.*;
import org.junit.Test;
import edu.stanford.nlp.ling.CategoryWordTag;
import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.ling.IndexedWord;
import edu.stanford.nlp.ling.LabeledWord;
import edu.stanford.nlp.ling.StringLabel;
import edu.stanford.nlp.ling.Tag;
import edu.stanford.nlp.ling.TaggedWord;
import edu.stanford.nlp.ling.Word;
import edu.stanford.nlp.ling.WordLemmaTag;
import edu.stanford.nlp.ling.WordTag;
import edu.stanford.nlp.util.ArrayCoreMap;
import edu.stanford.nlp.util.HashIndex;
import edu.stanford.nlp.util.HashableCoreMap;
import java.io.OutputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.TooManyResourcesException;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I41 Branch 42 IFNE L443 - true
   */

  @Test
  public void test00()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("DGvu[", true);
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      
      boolean boolean0 = jSONObject0.optBoolean("DGvu[");
      assertTrue(boolean0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I140 Branch 130 IFEQ L1332 - false
   */

  @Test
  public void test01()  throws Throwable  {
      LinkedHashSet<ArrayCoreMap> linkedHashSet0 = new LinkedHashSet<ArrayCoreMap>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      String string0 = JSONObject.valueToString(linkedHashSet0, 402, 402);
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I6 Branch 110 IFNULL L1253 - true
   */

  @Test
  public void test02()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optDouble(Ljava/lang/String;D)D: I13 Branch 64 IFEQ L764 - false
   */

  @Test
  public void test03()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("i!16", 0.95);
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      
      double double0 = jSONObject1.optDouble("i!16");
      assertEquals(0.95, double0, 0.01D);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I11 Branch 50 IFNE L548 - false
   */

  @Test
  public void test04()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
      
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray1);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I39 Branch 30 IFEQ L376 - false
   */

  @Test
  public void test05()  throws Throwable  {
      WordTag wordTag0 = WordTag.valueOf("$nl$");
      assertNotNull(wordTag0);
      assertEquals("$nl$", wordTag0.value());
      assertEquals("$nl$", wordTag0.word());
      assertNull(wordTag0.tag());
      
      JSONObject jSONObject0 = new JSONObject((Object) wordTag0);
      assertNotNull(jSONObject0);
      assertEquals("$nl$", wordTag0.value());
      assertEquals("$nl$", wordTag0.word());
      assertNull(wordTag0.tag());
      assertEquals(1, jSONObject0.length());
      
      HashIndex<Double> hashIndex0 = new HashIndex<Double>();
      assertNotNull(hashIndex0);
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      
      JSONObject jSONObject1 = jSONObject0.put("$nl$", (Collection) hashIndex0);
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertEquals("$nl$", wordTag0.value());
      assertEquals("$nl$", wordTag0.word());
      assertNull(wordTag0.tag());
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject0.length());
      
      CategoryWordTag categoryWordTag0 = new CategoryWordTag("$nl$");
      assertNotNull(categoryWordTag0);
      assertEquals(-1, categoryWordTag0.endPosition());
      assertNull(categoryWordTag0.word());
      assertEquals(-1, categoryWordTag0.beginPosition());
      assertNull(categoryWordTag0.tag());
      assertEquals("$nl$", categoryWordTag0.category());
      assertEquals("$nl$", categoryWordTag0.value());
      assertTrue(categoryWordTag0.printWordTag);
      assertFalse(categoryWordTag0.suppressTerminalDetails);
      
      JSONObject jSONObject2 = jSONObject1.append("$nl$", (Object) categoryWordTag0);
      assertNotNull(jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(-1, categoryWordTag0.endPosition());
      assertNull(categoryWordTag0.word());
      assertEquals(-1, categoryWordTag0.beginPosition());
      assertNull(categoryWordTag0.tag());
      assertEquals("$nl$", categoryWordTag0.category());
      assertEquals("$nl$", categoryWordTag0.value());
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertEquals("$nl$", wordTag0.value());
      assertEquals("$nl$", wordTag0.word());
      assertNull(wordTag0.tag());
      assertEquals(2, jSONObject2.length());
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject0.length());
      assertTrue(categoryWordTag0.printWordTag);
      assertFalse(categoryWordTag0.suppressTerminalDetails);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getDouble(Ljava/lang/String;)D: I13 Branch 45 IFEQ L463 - false
   */

  @Test
  public void test06()  throws Throwable  {
      TaggedWord taggedWord0 = new TaggedWord("Expected a ':' after a key", "Expected a ':' after a key");
      assertNotNull(taggedWord0);
      assertEquals("Expected a ':' after a key", taggedWord0.tag());
      assertEquals("Expected a ':' after a key", taggedWord0.word());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("Expected a ':' after a key", taggedWord0.value());
      
      String[] stringArray0 = new String[10];
      JSONObject jSONObject0 = new JSONObject((Object) taggedWord0, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertEquals("Expected a ':' after a key", taggedWord0.tag());
      assertEquals("Expected a ':' after a key", taggedWord0.word());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("Expected a ':' after a key", taggedWord0.value());
      
      int int0 = jSONObject0.optInt(stringArray0[7]);
      assertEquals(0, int0);
      assertEquals(0, jSONObject0.length());
      assertEquals("Expected a ':' after a key", taggedWord0.tag());
      assertEquals("Expected a ':' after a key", taggedWord0.word());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("Expected a ':' after a key", taggedWord0.value());
      
      JSONObject jSONObject1 = jSONObject0.put("Expected a ':' after a key", (long) 0);
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals("Expected a ':' after a key", taggedWord0.tag());
      assertEquals("Expected a ':' after a key", taggedWord0.word());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("Expected a ':' after a key", taggedWord0.value());
      
      double double0 = jSONObject0.getDouble("Expected a ':' after a key");
      assertEquals(0.0, double0, 0.01D);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals("Expected a ':' after a key", taggedWord0.tag());
      assertEquals("Expected a ':' after a key", taggedWord0.word());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("Expected a ':' after a key", taggedWord0.value());
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I45 Branch 60 IFGE L670 - true
   */

  @Test
  public void test07()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      LinkedHashSet<IndexedWord> linkedHashSet0 = new LinkedHashSet<IndexedWord>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JSONArray jSONArray1 = jSONArray0.put((Collection) linkedHashSet0);
      assertNotNull(jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(1, jSONArray1.length());
      assertEquals(1, jSONArray0.length());
      
      JSONObject jSONObject0 = jSONArray1.toJSONObject(jSONArray0);
      assertNotNull(jSONObject0);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(1, jSONArray1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONArray0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("&3X~Jk`}m4{:Q;", 1.0E-7);
      assertNotNull(jSONObject1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONArray0, jSONArray1);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(1, jSONArray1.length());
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject0.length());
      assertEquals(1, jSONArray0.length());
      
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{\"[]\":[],\"&3X~Jk`}m4{:Q;\":1.0E-7}", string0);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONArray0, jSONArray1);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(1, jSONArray1.length());
      assertEquals(2, jSONObject0.length());
      assertEquals(1, jSONArray0.length());
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I37 Branch 51 IFEQ L554 - true
   */

  @Test
  public void test08()  throws Throwable  {
      TaggedWord taggedWord0 = new TaggedWord("n!", "n!");
      assertNotNull(taggedWord0);
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals("n!", taggedWord0.value());
      assertEquals("n!", taggedWord0.tag());
      assertEquals("n!", taggedWord0.word());
      assertEquals(-1, taggedWord0.endPosition());
      
      JSONObject jSONObject0 = new JSONObject((Object) taggedWord0);
      assertNotNull(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals("n!", taggedWord0.value());
      assertEquals("n!", taggedWord0.tag());
      assertEquals("n!", taggedWord0.word());
      assertEquals(-1, taggedWord0.endPosition());
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, jSONObject0.length());
      assertEquals(-1, taggedWord0.beginPosition());
      assertEquals("n!", taggedWord0.value());
      assertEquals("n!", taggedWord0.tag());
      assertEquals("n!", taggedWord0.word());
      assertEquals(-1, taggedWord0.endPosition());
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 6 LOOKUPSWITCH L183 Case 125 - true
   */

  @Test
  public void test09()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I13 Branch 32 IFEQ L393 - false
   */

  @Test
  public void test10()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I12 Branch 99 IFNE L1113 - false
   */

  @Test
  public void test11()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      HashIndex<StringLabel> hashIndex0 = new HashIndex<StringLabel>(0);
      assertNotNull(hashIndex0);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      
      JSONArray jSONArray0 = new JSONArray((Collection) hashIndex0);
      assertNotNull(jSONArray0);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertEquals(0, jSONArray0.length());
      
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, hashIndex0.size());
      assertEquals(0, jSONObject0.length());
      assertEquals(0, jSONArray0.length());
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I194 Branch 109 IF_ICMPGE L1221 - false
   */

  @Test
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(22);
      assertEquals(22, (int)integer0);
      
      Float float0 = new Float((double) 22);
      assertEquals(22.0F, (float)float0, 0.01F);
      
      JSONObject jSONObject0 = new JSONObject((Object) float0);
      assertNotNull(jSONObject0);
      assertEquals(3, jSONObject0.length());
      
      String string0 = jSONObject0.toString(22, (int) integer0);
      assertNotNull(string0);
      assertEquals("{\n                                            \"infinite\": false,\n                                            \"naN\": false,\n                                            \"class\": \"class java.lang.Float\"\n                      }", string0);
      assertEquals(3, jSONObject0.length());
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I26 Branch 27 IFEQ L347 - false
   */

  @Test
  public void test13()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      LinkedHashSet<ArrayCoreMap> linkedHashSet0 = new LinkedHashSet<ArrayCoreMap>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      HashIndex<Object> hashIndex0 = new HashIndex<Object>((Collection<?>) linkedHashSet0);
      assertNotNull(hashIndex0);
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JSONArray jSONArray0 = new JSONArray((Collection) hashIndex0);
      assertNotNull(jSONArray0);
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, jSONArray0.length());
      
      JSONObject jSONObject1 = jSONObject0.accumulate("rea", (Object) jSONArray0);
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(1, jSONObject0.length());
      assertEquals(0, jSONArray0.length());
      assertEquals(1, jSONObject1.length());
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 48 IFEQ L517 - false
   */

  @Test
  public void test14()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.putOpt("getcompare", (Object) jSONObject0);
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      
      JSONObject jSONObject2 = jSONObject1.getJSONObject("getcompare");
      assertNotNull(jSONObject2);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
  }

  //Test case number: 15
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 5 LOOKUPSWITCH L183 Case 0 - false
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 7 LOOKUPSWITCH L183 Default-Case - true
   * Goal 3. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I61 Branch 8 IF_ICMPNE L198 - true
   * Goal 4. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I86 Branch 10 IF_ICMPEQ L202 - false
   */

  @Test
  public void test15()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{<5");
      assertNotNull(jSONTokener0);
      assertTrue(jSONTokener0.more());
      
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {<5
         //
      }
  }

  //Test case number: 16
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 29 IFNONNULL L374 - true
   * Goal 2. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I39 Branch 30 IFEQ L376 - true
   */

  @Test
  public void test16()  throws Throwable  {
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.putOpt("$WdL_h3g1C", (Object) hashMap0);
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Tag tag0 = new Tag("$WdL_h3g1C");
      assertNotNull(tag0);
      assertEquals(-1, tag0.endPosition());
      assertEquals(-1, tag0.beginPosition());
      assertEquals("$WdL_h3g1C", tag0.value());
      assertEquals("$WdL_h3g1C", tag0.tag());
      
      try {
        JSONObject jSONObject2 = jSONObject1.append("$WdL_h3g1C", (Object) tag0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[$WdL_h3g1C] is not a JSONArray.
         //
      }
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 77 LOOKUPSWITCH L1030 Case 9 - true
   */

  @Test
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[0] = "featureIndex.size()=\t%d%n";
      String string0 = JSONObject.valueToString("featureIndex.size()=\t%d%n", (-235), (-235));
      assertNotNull(string0);
      assertEquals("\"featureIndex.size()=\\t%d%n\"", string0);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I156 Branch 120 IFEQ L1281 - false
   */

  @Test
  public void test18()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "h");
      assertNotNull(jSONObject0);
      assertEquals(3, jSONObject0.length());
      
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{\"bytes\":[104],\"class\":\"class java.lang.String\",\"empty\":false}", string0);
      assertEquals(3, jSONObject0.length());
  }

  //Test case number: 19
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I11 Branch 50 IFNE L548 - true
   * Goal 2. wheel.json.JSONObject.getNames(Lwheel/json/JSONObject;)[Ljava/lang/String;: I37 Branch 51 IFEQ L554 - false
   */

  @Test
  public void test19()  throws Throwable  {
      HashMap<ArrayCoreMap, CoreLabel> hashMap0 = new HashMap<ArrayCoreMap, CoreLabel>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ArrayCoreMap arrayCoreMap0 = new ArrayCoreMap(6741);
      assertNotNull(arrayCoreMap0);
      assertEquals(0, arrayCoreMap0.size());
      
      CoreLabel coreLabel0 = hashMap0.put(arrayCoreMap0, (CoreLabel) null);
      assertNull(coreLabel0);
      assertEquals(0, arrayCoreMap0.size());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      // Undeclared exception!
      try {
        String[] stringArray0 = JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // edu.stanford.nlp.util.ArrayCoreMap cannot be cast to java.lang.String
         //
      }
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I23 Branch 93 IFNE L1090 - true
   */

  @Test
  public void test20()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      try {
        JSONObject jSONObject1 = jSONObject0.put("?IwB^qE9pP|v?&", Double.POSITIVE_INFINITY);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
      }
  }

  //Test case number: 21
  /*
   * 6 covered goals:
   * Goal 1. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I18 Branch 55 IFEQ L648 - false
   * Goal 2. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I37 Branch 56 IFNE L651 - true
   * Goal 3. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I6 Branch 98 IFNULL L1113 - false
   * Goal 4. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I12 Branch 99 IFNE L1113 - true
   * Goal 5. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I34 Branch 100 IF_ICMPGE L1117 - true
   * Goal 6. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I34 Branch 100 IF_ICMPGE L1117 - false
   */

  @Test
  public void test21()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
      assertEquals("{}", string0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("{}", (Object) jSONObject0);
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONArray0.length());
      
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertEquals(1, jSONObject1.length());
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I177 Branch 86 IF_ICMPLT L1058 - true
   */

  @Test
  public void test22()  throws Throwable  {
      HashMap<LabeledWord, Long> hashMap0 = new HashMap<LabeledWord, Long>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      
      long long0 = jSONObject0.optLong("\u001B[32m", 2820L);
      assertEquals(2820L, long0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optDouble(Ljava/lang/String;)D: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      HashMap<WordLemmaTag, Integer> hashMap0 = new HashMap<WordLemmaTag, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      double double0 = jSONObject0.optDouble("useDisjunctiveShapeInteraction");
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(2, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  //Test case number: 24
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.toString(I)Ljava/lang/String;: root-Branch
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I160 Branch 131 IFEQ L1335 - false
   */

  @Test
  public void test24()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "] is not a number.");
      assertNotNull(jSONObject0);
      assertEquals(3, jSONObject0.length());
      
      // Undeclared exception!
      try {
        String string0 = jSONObject0.toString(3722);
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 100000
         //
      }
  }

  //Test case number: 25
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I40 Branch 53 IFNE L574 - true
   * Goal 2. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I60 Branch 54 IF_ICMPGE L578 - true
   * Goal 3. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I60 Branch 54 IF_ICMPGE L578 - false
   */

  @Test
  public void test25()  throws Throwable  {
      Short short0 = new Short((short)410);
      assertEquals((short)410, (short)short0);
      
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      assertNotNull(stringArray0);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I61 Branch 97 IFEQ L1095 - false
   */

  @Test
  public void test26()  throws Throwable  {
      float float0 = Float.NaN;
      assertEquals(Float.NaN, float0, 0.01F);
      
      try {
        String string0 = JSONObject.numberToString((Number) Float.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
      }
  }

  //Test case number: 27
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.toString()Ljava/lang/String;: I28 Branch 102 IF_ICMPLE L1141 - false
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I108 Branch 117 IFEQ L1271 - false
   */

  @Test
  public void test27()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      Boolean boolean0 = Boolean.valueOf("getparseFloat");
      assertFalse(boolean0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("] is not a JSONArray.", (Object) boolean0);
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      
      JSONObject jSONObject2 = jSONObject1.append("getparseFloat", (Object) "] is not a JSONArray.");
      assertNotNull(jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(2, jSONObject2.length());
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject0.length());
      
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{\"] is not a JSONArray.\":false,\"getparseFloat\":[\"] is not a JSONArray.\"]}", string0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(2, jSONObject0.length());
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I91 Branch 85 IF_ICMPNE L1037 - false
   */

  @Test
  public void test28()  throws Throwable  {
      String string0 = JSONObject.valueToString("2\"xU)v_Dx?</ dO", 0, 0);
      assertNotNull(string0);
      assertEquals("\"2\\\"xU)v_Dx?<\\/ dO\"", string0);
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 47 IFEQ L499 - false
   */

  @Test
  public void test29()  throws Throwable  {
      HashMap<CategoryWordTag, Tag> hashMap0 = new HashMap<CategoryWordTag, Tag>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      CategoryWordTag categoryWordTag0 = new CategoryWordTag("^");
      assertNotNull(categoryWordTag0);
      assertNull(categoryWordTag0.tag());
      assertEquals("^", categoryWordTag0.category());
      assertEquals(-1, categoryWordTag0.beginPosition());
      assertEquals("^", categoryWordTag0.value());
      assertEquals(-1, categoryWordTag0.endPosition());
      assertNull(categoryWordTag0.word());
      assertTrue(categoryWordTag0.printWordTag);
      assertFalse(categoryWordTag0.suppressTerminalDetails);
      
      JSONObject jSONObject1 = jSONObject0.append("^", (Object) categoryWordTag0);
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(categoryWordTag0.tag());
      assertEquals("^", categoryWordTag0.category());
      assertEquals(-1, categoryWordTag0.beginPosition());
      assertEquals("^", categoryWordTag0.value());
      assertEquals(-1, categoryWordTag0.endPosition());
      assertNull(categoryWordTag0.word());
      assertEquals(1, jSONObject1.length());
      assertTrue(categoryWordTag0.printWordTag);
      assertFalse(categoryWordTag0.suppressTerminalDetails);
      
      JSONArray jSONArray0 = jSONObject1.getJSONArray("^");
      assertNotNull(jSONArray0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(categoryWordTag0.tag());
      assertEquals("^", categoryWordTag0.category());
      assertEquals(-1, categoryWordTag0.beginPosition());
      assertEquals("^", categoryWordTag0.value());
      assertEquals(-1, categoryWordTag0.endPosition());
      assertNull(categoryWordTag0.word());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONArray0.length());
      assertTrue(categoryWordTag0.printWordTag);
      assertFalse(categoryWordTag0.suppressTerminalDetails);
  }

  //Test case number: 30
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.toJSONArray(Lwheel/json/JSONArray;)Lwheel/json/JSONArray;: I6 Branch 98 IFNULL L1113 - true
   */

  @Test
  public void test30()  throws Throwable  {
      HashMap<WordLemmaTag, Integer> hashMap0 = new HashMap<WordLemmaTag, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      
      JSONArray jSONArray0 = jSONObject0.optJSONArray("0S{yAHhp7-:Xrp");
      assertNull(jSONArray0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
      
      JSONArray jSONArray1 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 31
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I52 Branch 28 IFEQ L350 - false
   */

  @Test
  public void test31()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      Byte byte0 = new Byte((byte)48);
      assertEquals((byte)48, (byte)byte0);
      
      JSONObject jSONObject1 = jSONObject0.append("", (Object) byte0);
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      
      JSONObject jSONObject2 = jSONObject0.accumulate("", (Object) "");
      assertNotNull(jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
      
      try {
        long long0 = jSONObject1.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
      }
  }

  //Test case number: 32
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I12 Branch 4 IF_ICMPEQ L178 - true
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 5 LOOKUPSWITCH L183 Case 0 - true
   * Goal 3. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 6 LOOKUPSWITCH L183 Case 125 - false
   * Goal 4. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I27 Branch 7 LOOKUPSWITCH L183 Default-Case - false
   */

  @Test
  public void test32()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      assertNotNull(jSONTokener0);
      assertTrue(jSONTokener0.more());
      
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
      }
  }

  //Test case number: 33
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getInt(Ljava/lang/String;)I: I13 Branch 46 IFEQ L484 - false
   */

  @Test
  public void test33()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("{", 0);
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      
      int int0 = jSONObject1.optInt("{", 0);
      assertEquals(0, int0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
  }

  //Test case number: 34
  @Test
  public void test34()  throws Throwable  {
      Long long0 = new Long((long) 0);
      assertEquals(0L, (long)long0);
      
      String string0 = JSONObject.valueToString(long0, 0, 0);
      assertNotNull(string0);
      assertEquals("0", string0);
  }

  //Test case number: 35
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I18 Branch 55 IFEQ L648 - true
   * Goal 2. wheel.json.JSONObject.names()Lwheel/json/JSONArray;: I37 Branch 56 IFNE L651 - false
   */

  @Test
  public void test35()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 36
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I45 Branch 95 IFEQ L1094 - false
   * Goal 2. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I54 Branch 96 IFNE L1095 - false
   * Goal 3. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I61 Branch 97 IFEQ L1095 - true
   * Goal 4. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I82 Branch 114 IFEQ L1268 - false
   */

  @Test
  public void test36()  throws Throwable  {
      Float float0 = new Float(1001.1825892572592);
      assertEquals(1001.1826F, (float)float0, 0.01F);
      
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
      assertEquals("1001.1826", string0);
  }

  //Test case number: 37
  @Test
  public void test37()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("] is not a JSONArray.");
      assertFalse(boolean0);
      
      String string0 = JSONObject.valueToString(boolean0, (byte)55, (byte)55);
      assertNotNull(string0);
      assertEquals("false", string0);
  }

  //Test case number: 38
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I30 Branch 94 IFEQ L1090 - false
   */

  @Test
  public void test38()  throws Throwable  {
      double double0 = Double.NaN;
      assertEquals(Double.NaN, double0, 0.01D);
      
      try {
        String string0 = JSONObject.numberToString((Number) Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
      }
  }

  //Test case number: 39
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optLong(Ljava/lang/String;)J: root-Branch
   */

  @Test
  public void test39()  throws Throwable  {
      HashMap<CategoryWordTag, Object> hashMap0 = new HashMap<CategoryWordTag, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      long long0 = jSONObject0.optLong("uV7u/M0");
      assertEquals(0L, long0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 40
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I6 Branch 52 IFNONNULL L568 - false
   */

  @Test
  public void test40()  throws Throwable  {
      TaggedWord taggedWord0 = new TaggedWord("Warning: could not find a constructor for objects of ", "Warning: could not find a constructor for objects of ");
      assertNotNull(taggedWord0);
      assertEquals("Warning: could not find a constructor for objects of ", taggedWord0.word());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("Warning: could not find a constructor for objects of ", taggedWord0.tag());
      assertEquals("Warning: could not find a constructor for objects of ", taggedWord0.value());
      assertEquals(-1, taggedWord0.beginPosition());
      
      HashMap<TaggedWord, TaggedWord> hashMap0 = new HashMap<TaggedWord, TaggedWord>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      TaggedWord taggedWord1 = hashMap0.put(taggedWord0, taggedWord0);
      assertNull(taggedWord1);
      assertEquals("Warning: could not find a constructor for objects of ", taggedWord0.word());
      assertEquals(-1, taggedWord0.endPosition());
      assertEquals("Warning: could not find a constructor for objects of ", taggedWord0.tag());
      assertEquals("Warning: could not find a constructor for objects of ", taggedWord0.value());
      assertEquals(-1, taggedWord0.beginPosition());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  //Test case number: 41
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I6 Branch 52 IFNONNULL L568 - true
   * Goal 2. wheel.json.JSONObject.getNames(Ljava/lang/Object;)[Ljava/lang/String;: I40 Branch 53 IFNE L574 - false
   */

  @Test
  public void test41()  throws Throwable  {
      LinkedList<CoreLabel> linkedList0 = new LinkedList<CoreLabel>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String[] stringArray0 = JSONObject.getNames((Object) linkedList0);
      assertNull(stringArray0);
      assertEquals(0, linkedList0.size());
  }

  //Test case number: 42
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I45 Branch 35 IFGE L400 - true
   */

  @Test
  public void test42()  throws Throwable  {
      String string0 = JSONObject.doubleToString(3.0E9);
      assertNotNull(string0);
      assertEquals("3.0E9", string0);
  }

  //Test case number: 43
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I84 Branch 135 IFEQ L1367 - false
   */

  @Test
  public void test43()  throws Throwable  {
      HashMap<TaggedWord, String> hashMap0 = new HashMap<TaggedWord, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject1 = jSONObject0.append("2\"xU)v_DxG<dO", (Object) jSONObject0);
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("2\"xU)v_DxG<dO");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((OutputStream) mockFileOutputStream0, false);
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try {
        Writer writer0 = jSONObject1.write((Writer) mockPrintWriter0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 44
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;I)Lwheel/json/JSONObject;: root-Branch
   */

  @Test
  public void test44()  throws Throwable  {
      Word word0 = new Word("|44{~x>fim/ZwCm");
      assertNotNull(word0);
      assertEquals(-1, word0.beginPosition());
      assertEquals(-1, word0.endPosition());
      assertEquals("|44{~x>fim/ZwCm", word0.value());
      assertEquals("|44{~x>fim/ZwCm", word0.word());
      
      JSONObject jSONObject0 = new JSONObject((Object) word0);
      assertNotNull(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(-1, word0.beginPosition());
      assertEquals(-1, word0.endPosition());
      assertEquals("|44{~x>fim/ZwCm", word0.value());
      assertEquals("|44{~x>fim/ZwCm", word0.word());
      
      JSONObject jSONObject1 = jSONObject0.put("|44{~x>fim/ZwCm", 0);
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertEquals(-1, word0.beginPosition());
      assertEquals(-1, word0.endPosition());
      assertEquals("|44{~x>fim/ZwCm", word0.value());
      assertEquals("|44{~x>fim/ZwCm", word0.word());
      assertEquals(2, jSONObject1.length());
  }

  //Test case number: 45
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.has(Ljava/lang/String;)Z: root-Branch
   */

  @Test
  public void test45()  throws Throwable  {
      Float float0 = new Float(1000.0);
      assertEquals(1000.0F, (float)float0, 0.01F);
      
      JSONObject jSONObject0 = new JSONObject((Object) float0);
      assertNotNull(jSONObject0);
      assertEquals(3, jSONObject0.length());
      
      boolean boolean0 = jSONObject0.has("useDisjunctgveShapeInteraction");
      assertFalse(boolean0);
      assertEquals(3, jSONObject0.length());
  }

  //Test case number: 46
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/lang/String;)V: root-Branch
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONTokener;)V: I12 Branch 4 IF_ICMPEQ L178 - false
   */

  @Test
  public void test46()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("NP=root <1 (NP=monthdayroot <1 (NNP=month <: /January|February|March|April|May|June|July|August|September|October|November|December|Jan.|Feb.|Mar.|Apr.|Aug.|Sep.|Sept.|Oct.|Nov.|Dec./) <2 (CD=day <: __)) <2 (/^,$/=comma <: /^,$/) <3 (NP=yearroot <: (CD=year <: __)) : (=root <- =yearroot) : (=monthdayroot <- =day)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of NP=root <1 (NP=monthdayroot <1 (NNP=month <: /January|February|March|April|May|June|July|August|September|October|November|December|Jan.|Feb.|Mar.|Apr.|Aug.|Sep.|Sept.|Oct.|Nov.|Dec./) <2 (CD=day <: __)) <2 (/^,$/=comma <: /^,$/) <3 (NP=yearroot <: (CD=year <: __)) : (=root <- =yearroot) : (=monthdayroot <- =day)
         //
      }
  }

  //Test case number: 47
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.optJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 66 IFEQ L829 - false
   * Goal 2. wheel.json.JSONObject.toString()Ljava/lang/String;: I19 Branch 101 IFEQ L1140 - false
   * Goal 3. wheel.json.JSONObject.toString()Ljava/lang/String;: I28 Branch 102 IF_ICMPLE L1141 - true
   * Goal 4. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I102 Branch 116 IFNE L1271 - true
   */

  @Test
  public void test47()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.putOpt("NP=root <1 (NP=monthdayroot <1 (NNP=month <: /January|February|March|April|May|June|July|Agust|September|October|November|December|Jan.|Feb.|Mar.|Apr.|Aug.|Sep.|Sept.|Oct.|ov|Dec./) <2 (CD=day <: __)) <2 (/^,$/=comma <: /^,$/) <3 (NP=yearroot <: (CD=year <: __)) : (=root <- =yearroot) : (=monthdayroot <- =day)", (Object) jSONObject0);
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      
      JSONObject jSONObject2 = jSONObject0.optJSONObject("NP=root <1 (NP=monthdayroot <1 (NNP=month <: /January|February|March|April|May|June|July|Agust|September|October|November|December|Jan.|Feb.|Mar.|Apr.|Aug.|Sep.|Sept.|Oct.|ov|Dec./) <2 (CD=day <: __)) <2 (/^,$/=comma <: /^,$/) <3 (NP=yearroot <: (CD=year <: __)) : (=root <- =yearroot) : (=monthdayroot <- =day)");
      assertNotNull(jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertEquals(1, jSONObject2.length());
      assertEquals(1, jSONObject0.length());
      
      String string0 = jSONObject0.toString();
  }

  //Test case number: 48
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I12 Branch 74 IFNE L1015 - false
   * Goal 2. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I125 Branch 107 IF_ICMPGE L1211 - false
   * Goal 3. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I62 Branch 125 IFEQ L1317 - false
   * Goal 4. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I105 Branch 128 IFEQ L1326 - false
   */

  @Test
  public void test48()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.append("\"DGvu[", (Object) jSONObject0);
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      
      Byte byte0 = new Byte((byte)48);
      assertEquals((byte)48, (byte)byte0);
      
      JSONObject jSONObject2 = jSONObject0.append("", (Object) byte0);
      assertNotNull(jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertEquals(2, jSONObject2.length());
      assertEquals(2, jSONObject0.length());
      
      // Undeclared exception!
      try {
        String string0 = JSONObject.valueToString(jSONObject0, (byte)48, (byte)48);
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 100000
         //
      }
  }

  //Test case number: 49
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 69 IFNONNULL L975 - false
   */

  @Test
  public void test49()  throws Throwable  {
      Integer integer0 = new Integer(22);
      assertEquals(22, (int)integer0);
      
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject((Object) integer0, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      try {
        JSONObject jSONObject1 = jSONObject0.put(stringArray0[0], (double) 22);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
      }
  }

  //Test case number: 50
  /*
   * 3 covered goals:
   * Goal 1. wheel.json.JSONObject.optJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 65 IFEQ L815 - false
   * Goal 2. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I6 Branch 73 IFNULL L1015 - true
   * Goal 3. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I6 Branch 91 IFNULL L1088 - true
   */

  @Test
  public void test50()  throws Throwable  {
      HashMap<TaggedWord, String> hashMap0 = new HashMap<TaggedWord, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.append("2\"xU)vyn#_DxG<dO", (Object) null);
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      
      JSONArray jSONArray0 = jSONObject0.optJSONArray("2\"xU)vyn#_DxG<dO");
      assertNotNull(jSONArray0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONObject0.length());
      
      try {
        JSONObject jSONObject2 = jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
      }
  }

  //Test case number: 51
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I54 Branch 61 IFLE L671 - false
   * Goal 2. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I77 Branch 62 IFLE L674 - false
   */

  @Test
  public void test51()  throws Throwable  {
      String string0 = JSONObject.numberToString((Number) 1000.0);
      assertNotNull(string0);
      assertEquals("1000", string0);
  }

  //Test case number: 52
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I14 Branch 39 IFNE L439 - false
   * Goal 2. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I20 Branch 40 IFEQ L439 - true
   * Goal 3. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I41 Branch 42 IFNE L443 - false
   * Goal 4. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I47 Branch 43 IFEQ L443 - true
   */

  @Test
  public void test52()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.append("\"DGvu[", (Object) jSONObject0);
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      
      boolean boolean0 = jSONObject0.optBoolean("\"DGvu[");
      assertFalse(boolean0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
  }

  //Test case number: 53
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.optInt(Ljava/lang/String;)I: root-Branch
   * Goal 2. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 81 LOOKUPSWITCH L1030 Case 34 - true
   * Goal 3. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 82 LOOKUPSWITCH L1030 Case 47 - true
   * Goal 4. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I91 Branch 85 IF_ICMPNE L1037 - true
   */

  @Test
  public void test53()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      int int0 = jSONObject0.optInt("id8!\"Gb|]/`Rokr@");
      assertEquals(0, int0);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 54
  /*
   * 12 covered goals:
   * Goal 1. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I41 Branch 104 IF_ICMPNE L1197 - true
   * Goal 2. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I84 Branch 105 IFEQ L1204 - true
   * Goal 3. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I84 Branch 105 IFEQ L1204 - false
   * Goal 4. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I98 Branch 106 IF_ICMPLE L1206 - true
   * Goal 5. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I98 Branch 106 IF_ICMPLE L1206 - false
   * Goal 6. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I125 Branch 107 IF_ICMPGE L1211 - true
   * Goal 7. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I177 Branch 108 IF_ICMPLE L1219 - false
   * Goal 8. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I194 Branch 109 IF_ICMPGE L1221 - true
   * Goal 9. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I76 Branch 126 IFEQ L1320 - false
   * Goal 10. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I121 Branch 129 IFEQ L1329 - true
   * Goal 11. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I140 Branch 130 IFEQ L1332 - true
   * Goal 12. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I160 Branch 131 IFEQ L1335 - true
   */

  @Test
  public void test54()  throws Throwable  {
      Float float0 = new Float(1000.0);
      assertEquals(1000.0F, (float)float0, 0.01F);
      
      JSONObject jSONObject0 = new JSONObject((Object) float0);
      assertNotNull(jSONObject0);
      assertEquals(3, jSONObject0.length());
      
      String string0 = jSONObject0.toString((-1897), (-1897));
      assertNotNull(string0);
      assertEquals("{\n\"infinite\": false,\n\"naN\": false,\n\"class\": \"class java.lang.Float\"\n}", string0);
      assertEquals(3, jSONObject0.length());
  }

  //Test case number: 55
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.remove(Ljava/lang/String;)Ljava/lang/Object;: root-Branch
   * Goal 2. wheel.json.JSONObject.put(Ljava/lang/String;D)Lwheel/json/JSONObject;: root-Branch
   * Goal 3. wheel.json.JSONObject.getJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 48 IFEQ L517 - true
   * Goal 4. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I20 Branch 70 IFNULL L978 - true
   */

  @Test
  public void test55()  throws Throwable  {
      Integer integer0 = new Integer(36);
      assertEquals(36, (int)integer0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "TR,IivnotFa num9er.";
      JSONObject jSONObject0 = new JSONObject((Object) integer0, stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("TR,IivnotFa num9er.", (double) 36);
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      
      JSONObject jSONObject2 = jSONObject1.put("TR,IivnotFa num9er.", (Object) null);
      assertNotNull(jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, jSONObject1.length());
      assertEquals(0, jSONObject2.length());
      
      Long long0 = new Long((long) integer0);
      assertEquals(36L, (long)long0);
      
      JSONObject jSONObject3 = jSONObject2.putOpt("TR,IivnotFa num9er.", (Object) long0);
      assertNotNull(jSONObject3);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject3);
      assertSame(jSONObject1, jSONObject3);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject3);
      assertSame(jSONObject3, jSONObject1);
      assertSame(jSONObject3, jSONObject0);
      assertSame(jSONObject3, jSONObject2);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject2.length());
      assertEquals(1, jSONObject3.length());
      
      try {
        JSONObject jSONObject4 = jSONObject3.getJSONObject("TR,IivnotFa num9er.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"TR,IivnotFa num9er.\"] is not a JSONObject.
         //
      }
  }

  //Test case number: 56
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I12 Branch 67 IFNULL L889 - true
   */

  @Test
  public void test56()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      String string0 = jSONObject0.optString("BEGIN_POSITION_KEY");
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 57
  /*
   * 14 covered goals:
   * Goal 1. wheel.json.JSONObject.length()I: root-Branch
   * Goal 2. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 26 IFNONNULL L346 - true
   * Goal 3. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I52 Branch 28 IFEQ L350 - true
   * Goal 4. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I11 Branch 103 IFNE L1190 - true
   * Goal 5. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I11 Branch 103 IFNE L1190 - false
   * Goal 6. wheel.json.JSONObject.toString(II)Ljava/lang/String;: I41 Branch 104 IF_ICMPNE L1197 - false
   * Goal 7. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I13 Branch 122 IFEQ L1304 - true
   * Goal 8. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I25 Branch 123 IFEQ L1308 - true
   * Goal 9. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I62 Branch 125 IFEQ L1317 - true
   * Goal 10. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I76 Branch 126 IFEQ L1320 - true
   * Goal 11. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I89 Branch 127 IFEQ L1323 - true
   * Goal 12. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I89 Branch 127 IFEQ L1323 - false
   * Goal 13. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I105 Branch 128 IFEQ L1326 - true
   * Goal 14. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I121 Branch 129 IFEQ L1329 - false
   */

  @Test
  public void test57()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[6] = "shot";
      JSONObject jSONObject0 = new JSONObject((Object) "shot", stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      HashMap<Tag, Byte> hashMap0 = new HashMap<Tag, Byte>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject1 = jSONObject0.putOpt("shot", (Object) hashMap0);
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.valueToString(jSONObject0, (short)1581, (short)1581);
      assertNotNull(string0);
      assertEquals("{\"shot\": {}}", string0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject0.length());
      
      Short short0 = new Short((short)1581);
      assertEquals((short)1581, (short)short0);
      
      JSONObject jSONObject2 = jSONObject0.accumulate("shot", (Object) short0);
      assertNotNull(jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertEquals(1, jSONObject2.length());
      assertEquals(1, jSONObject0.length());
  }

  //Test case number: 58
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.optLong(Ljava/lang/String;J)J: root-Branch
   * Goal 2. wheel.json.JSONObject.getLong(Ljava/lang/String;)J: I13 Branch 49 IFEQ L536 - true
   */

  @Test
  public void test58()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      long long0 = jSONObject0.optLong("?IqB^qE9p3|v&", (-2633L));
      assertEquals((-2633L), long0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.append("?IqB^qE9p3|v&", (Object) jSONObject0);
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      
      try {
        long long1 = jSONObject1.getLong("?IqB^qE9p3|v&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"?IqB^qE9p3|v&\"] is not a number.
         //
      }
  }

  //Test case number: 59
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I6 Branch 57 IFNONNULL L662 - false
   */

  @Test
  public void test59()  throws Throwable  {
      try {
        String string0 = JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
      }
  }

  //Test case number: 60
  /*
   * 5 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/util/Map;)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I96 Branch 115 IFNE L1271 - true
   * Goal 3. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I138 Branch 119 IFEQ L1278 - true
   * Goal 4. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I156 Branch 120 IFEQ L1281 - true
   * Goal 5. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I65 Branch 134 IFEQ L1365 - false
   */

  @Test
  public void test60()  throws Throwable  {
      Float float0 = new Float(1000.0);
      assertEquals(1000.0F, (float)float0, 0.01F);
      
      JSONObject jSONObject0 = new JSONObject((Object) float0);
      assertNotNull(jSONObject0);
      assertEquals(3, jSONObject0.length());
      
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject1 = jSONObject0.put("useDisjunctiveShapeInteraction", (Map) hashMap0);
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(4, jSONObject0.length());
      assertEquals(4, jSONObject1.length());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("useDisjunctiveShapeInteraction");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((OutputStream) mockFileOutputStream0, true);
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)jSONObject0.write((Writer) mockPrintWriter0);
      assertNotNull(mockPrintWriter1);
      assertSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(mockPrintWriter1, mockPrintWriter0);
      assertEquals(4, jSONObject0.length());
  }

  //Test case number: 61
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.toString()Ljava/lang/String;: I19 Branch 101 IFEQ L1140 - true
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I121 Branch 118 IFEQ L1275 - false
   */

  @Test
  public void test61()  throws Throwable  {
      HashMap<WordLemmaTag, Integer> hashMap0 = new HashMap<WordLemmaTag, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  //Test case number: 62
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I6 Branch 121 IFNULL L1304 - false
   * Goal 2. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I13 Branch 122 IFEQ L1304 - false
   */

  @Test
  public void test62()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
      
      String string0 = JSONObject.valueToString(object0, 1755, 1755);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  //Test case number: 63
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.isNull(Ljava/lang/String;)Z: root-Branch
   * Goal 2. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I6 Branch 1 IFNULL L115 - false
   * Goal 3. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I12 Branch 2 IF_ACMPNE L115 - true
   * Goal 4. wheel.json.JSONObject.put(Ljava/lang/String;Z)Lwheel/json/JSONObject;: I8 Branch 68 IFEQ L902 - false
   */

  @Test
  public void test63()  throws Throwable  {
      Float float0 = new Float(1000.0);
      assertEquals(1000.0F, (float)float0, 0.01F);
      
      JSONObject jSONObject0 = new JSONObject((Object) float0);
      assertNotNull(jSONObject0);
      assertEquals(3, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.put("0S{yAHhp7-:Xrp", true);
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(4, jSONObject1.length());
      assertEquals(4, jSONObject0.length());
      
      boolean boolean0 = jSONObject0.isNull("0S{yAHhp7-:Xrp");
      assertFalse(boolean0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(4, jSONObject0.length());
  }

  //Test case number: 64
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I77 Branch 37 IFLE L404 - true
   */

  @Test
  public void test64()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.5);
      assertNotNull(string0);
      assertEquals("0.5", string0);
  }

  //Test case number: 65
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I31 Branch 58 IFLE L670 - true
   */

  @Test
  public void test65()  throws Throwable  {
      int int0 = Short.BYTES;
      assertEquals(2, int0);
      
      String string0 = JSONObject.numberToString((Number) 2);
      assertNotNull(string0);
      assertEquals("2", string0);
  }

  //Test case number: 66
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I11 Branch 72 IFNULL L999 - false
   */

  @Test
  public void test66()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      Boolean boolean0 = Boolean.valueOf("] is not a JSONArray.");
      assertFalse(boolean0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt("] is not a JSONArray.", (Object) boolean0);
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
  }

  //Test case number: 67
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.optDouble(Ljava/lang/String;D)D: I13 Branch 64 IFEQ L764 - true
   */

  @Test
  public void test67()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      double double0 = jSONObject0.optDouble("to", (double) 0);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 68
  /*
   * 2 covered goals:
   * Goal 1. wheel.json.JSONObject.optString(Ljava/lang/String;)Ljava/lang/String;: root-Branch
   * Goal 2. wheel.json.JSONObject.optString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I12 Branch 67 IFNULL L889 - false
   */

  @Test
  public void test68()  throws Throwable  {
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, jSONObject0.length());
      
      Byte byte0 = new Byte((byte)78);
      assertEquals((byte)78, (byte)byte0);
      
      JSONObject jSONObject1 = jSONObject0.put("BEGIN_POSITION_KEY", (Object) byte0);
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
      
      String string0 = jSONObject1.optString("BEGIN_POSITION_KEY");
      assertNotNull(string0);
      assertEquals("78", string0);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONObject0.length());
  }

  //Test case number: 69
  /*
   * 9 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/util/Collection;)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.getString(Ljava/lang/String;)Ljava/lang/String;: root-Branch
   * Goal 3. wheel.json.JSONObject.<init>(Ljava/lang/Object;[Ljava/lang/String;)V: I20 Branch 25 IF_ICMPGE L304 - true
   * Goal 4. wheel.json.JSONObject.<init>(Ljava/lang/Object;[Ljava/lang/String;)V: I20 Branch 25 IF_ICMPGE L304 - false
   * Goal 5. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 26 IFNONNULL L346 - false
   * Goal 6. wheel.json.JSONObject.accumulate(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I26 Branch 27 IFEQ L347 - true
   * Goal 7. wheel.json.JSONObject.get(Ljava/lang/String;)Ljava/lang/Object;: I12 Branch 38 IFNONNULL L421 - false
   * Goal 8. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 78 LOOKUPSWITCH L1030 Case 10 - true
   * Goal 9. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 84 LOOKUPSWITCH L1030 Default-Case - false
   */

  @Test
  public void test69()  throws Throwable  {
      String[] stringArray0 = new String[17];
      stringArray0[0] = "istrim";
      JSONObject jSONObject0 = new JSONObject((Object) "istrim", stringArray0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.accumulate("istrim", (Object) 1760);
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      
      LinkedList<StringLabel> linkedList0 = new LinkedList<StringLabel>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      JSONObject jSONObject2 = jSONObject1.put("istrim", (Collection) linkedList0);
      assertNotNull(jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(1, jSONObject2.length());
      assertEquals(0, linkedList0.size());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      
      try {
        String string0 = jSONObject0.getString(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
      }
  }

  //Test case number: 70
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.<init>(Ljava/util/Map;)V: I11 Branch 16 IFNONNULL L234 - false
   */

  @Test
  public void test70()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  //Test case number: 71
  /*
   * 4 covered goals:
   * Goal 1. wheel.json.JSONObject.optBoolean(Ljava/lang/String;Z)Z: root-Branch
   * Goal 2. wheel.json.JSONObject.optBoolean(Ljava/lang/String;)Z: root-Branch
   * Goal 3. wheel.json.JSONObject.append(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I16 Branch 29 IFNONNULL L374 - false
   * Goal 4. wheel.json.JSONObject.getBoolean(Ljava/lang/String;)Z: I14 Branch 39 IFNE L439 - true
   */

  @Test
  public void test71()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = jSONObject0.append("\"DGvu[", (Object) jSONObject0);
      assertNotNull(jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      
      JSONObject jSONObject2 = jSONObject1.put("\"DGvu[", false);
      assertNotNull(jSONObject2);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
      
      boolean boolean0 = jSONObject0.optBoolean("\"DGvu[");
      assertFalse(boolean0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertEquals(1, jSONObject0.length());
  }

  //Test case number: 72
  /*
   * 19 covered goals:
   * Goal 1. wheel.json.JSONObject.keys()Ljava/util/Iterator;: root-Branch
   * Goal 2. wheel.json.JSONObject$Null.toString()Ljava/lang/String;: root-Branch
   * Goal 3. wheel.json.JSONObject$Null.equals(Ljava/lang/Object;)Z: I6 Branch 1 IFNULL L115 - true
   * Goal 4. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I6 Branch 110 IFNULL L1253 - false
   * Goal 5. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I13 Branch 111 IFEQ L1253 - true
   * Goal 6. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I13 Branch 111 IFEQ L1253 - false
   * Goal 7. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I25 Branch 112 IFEQ L1256 - true
   * Goal 8. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I82 Branch 114 IFEQ L1268 - true
   * Goal 9. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I96 Branch 115 IFNE L1271 - false
   * Goal 10. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I102 Branch 116 IFNE L1271 - false
   * Goal 11. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I108 Branch 117 IFEQ L1271 - true
   * Goal 12. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I121 Branch 118 IFEQ L1275 - true
   * Goal 13. wheel.json.JSONObject.valueToString(Ljava/lang/Object;)Ljava/lang/String;: I138 Branch 119 IFEQ L1278 - false
   * Goal 14. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I21 Branch 132 IFEQ L1357 - true
   * Goal 15. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I21 Branch 132 IFEQ L1357 - false
   * Goal 16. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I28 Branch 133 IFEQ L1358 - true
   * Goal 17. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I28 Branch 133 IFEQ L1358 - false
   * Goal 18. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I65 Branch 134 IFEQ L1365 - true
   * Goal 19. wheel.json.JSONObject.write(Ljava/io/Writer;)Ljava/io/Writer;: I84 Branch 135 IFEQ L1367 - true
   */

  @Test
  public void test72()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(29);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      HashIndex<IndexedWord> hashIndex0 = new HashIndex<IndexedWord>(29);
      assertNotNull(hashIndex0);
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      
      JSONArray jSONArray0 = new JSONArray((Collection) hashIndex0);
      assertNotNull(jSONArray0);
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertEquals(0, jSONArray0.length());
      
      JSONArray jSONArray1 = jSONArray0.put(29, (Object) hashIndex0);
      assertNotNull(jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertEquals(30, jSONArray1.length());
      assertEquals(30, jSONArray0.length());
      
      JSONObject jSONObject0 = jSONArray1.toJSONObject(jSONArray0);
      assertNotNull(jSONObject0);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertEquals(30, jSONArray1.length());
      assertEquals(2, jSONObject0.length());
      assertEquals(30, jSONArray0.length());
      
      StringWriter stringWriter1 = (StringWriter)jSONObject0.write((Writer) stringWriter0);
      assertNotNull(stringWriter1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(jSONArray0, jSONArray1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals(0, hashIndex0.size());
      assertFalse(hashIndex0.isLocked());
      assertEquals(30, jSONArray1.length());
      assertEquals("{\"[]\":[],\"null\":null}", stringWriter0.toString());
      assertEquals(2, jSONObject0.length());
      assertEquals(30, jSONArray0.length());
      assertEquals("{\"[]\":[],\"null\":null}", stringWriter1.toString());
  }

  //Test case number: 73
  /*
   * 7 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>(Lwheel/json/JSONObject;[Ljava/lang/String;)V: I15 Branch 3 IF_ICMPGE L162 - true
   * Goal 2. wheel.json.JSONObject.<init>(Lwheel/json/JSONObject;[Ljava/lang/String;)V: I15 Branch 3 IF_ICMPGE L162 - false
   * Goal 3. wheel.json.JSONObject.<init>(Ljava/util/Map;)V: I11 Branch 16 IFNONNULL L234 - true
   * Goal 4. wheel.json.JSONObject.opt(Ljava/lang/String;)Ljava/lang/Object;: I6 Branch 63 IFNONNULL L688 - false
   * Goal 5. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 71 IFNULL L999 - true
   * Goal 6. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 71 IFNULL L999 - false
   * Goal 7. wheel.json.JSONObject.putOpt(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I11 Branch 72 IFNULL L999 - true
   */

  @Test
  public void test73()  throws Throwable  {
      HashMap<CategoryWordTag, HashableCoreMap> hashMap0 = new HashMap<CategoryWordTag, HashableCoreMap>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String[] stringArray0 = new String[12];
      stringArray0[1] = "fase";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertNotNull(jSONObject1);
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
      assertEquals(0, jSONObject0.length());
      assertEquals(0, jSONObject1.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jSONObject0.equals((Object)jSONObject1));
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  //Test case number: 74
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.valueToString(Ljava/lang/Object;II)Ljava/lang/String;: I6 Branch 121 IFNULL L1304 - true
   */

  @Test
  public void test74()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-3292), (-3292));
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  //Test case number: 75
  /*
   * 1 covered goal:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I7 Branch 31 IFNE L393 - true
   */

  @Test
  public void test75()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.POSITIVE_INFINITY);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  //Test case number: 76
  /*
   * 9 covered goals:
   * Goal 1. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I6 Branch 57 IFNONNULL L662 - true
   * Goal 2. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I31 Branch 58 IFLE L670 - false
   * Goal 3. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I38 Branch 59 IFGE L670 - false
   * Goal 4. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I45 Branch 60 IFGE L670 - false
   * Goal 5. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I54 Branch 61 IFLE L671 - true
   * Goal 6. wheel.json.JSONObject.numberToString(Ljava/lang/Number;)Ljava/lang/String;: I77 Branch 62 IFLE L674 - true
   * Goal 7. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I14 Branch 92 IFEQ L1089 - false
   * Goal 8. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I23 Branch 93 IFNE L1090 - false
   * Goal 9. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I30 Branch 94 IFEQ L1090 - true
   */

  @Test
  public void test76()  throws Throwable  {
      String string0 = JSONObject.numberToString((Number) 988.278512448632);
      assertNotNull(string0);
      assertEquals("988.278512448632", string0);
  }

  //Test case number: 77
  /*
   * 8 covered goals:
   * Goal 1. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I7 Branch 31 IFNE L393 - false
   * Goal 2. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I13 Branch 32 IFEQ L393 - true
   * Goal 3. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I31 Branch 33 IFLE L400 - false
   * Goal 4. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I38 Branch 34 IFGE L400 - false
   * Goal 5. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I45 Branch 35 IFGE L400 - false
   * Goal 6. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I54 Branch 36 IFLE L401 - true
   * Goal 7. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I54 Branch 36 IFLE L401 - false
   * Goal 8. wheel.json.JSONObject.doubleToString(D)Ljava/lang/String;: I77 Branch 37 IFLE L404 - false
   */

  @Test
  public void test77()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1000.0);
      assertNotNull(string0);
      assertEquals("1000", string0);
  }

  //Test case number: 78
  /*
   * 27 covered goals:
   * Goal 1. wheel.json.JSONObject.put(Ljava/lang/String;J)Lwheel/json/JSONObject;: root-Branch
   * Goal 2. wheel.json.JSONObject.optInt(Ljava/lang/String;I)I: root-Branch
   * Goal 3. wheel.json.JSONObject.get(Ljava/lang/String;)Ljava/lang/Object;: I12 Branch 38 IFNONNULL L421 - true
   * Goal 4. wheel.json.JSONObject.getDouble(Ljava/lang/String;)D: I13 Branch 45 IFEQ L463 - true
   * Goal 5. wheel.json.JSONObject.getInt(Ljava/lang/String;)I: I13 Branch 46 IFEQ L484 - true
   * Goal 6. wheel.json.JSONObject.getJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 47 IFEQ L499 - true
   * Goal 7. wheel.json.JSONObject.getLong(Ljava/lang/String;)J: I13 Branch 49 IFEQ L536 - false
   * Goal 8. wheel.json.JSONObject.opt(Ljava/lang/String;)Ljava/lang/Object;: I6 Branch 63 IFNONNULL L688 - true
   * Goal 9. wheel.json.JSONObject.optJSONArray(Ljava/lang/String;)Lwheel/json/JSONArray;: I13 Branch 65 IFEQ L815 - true
   * Goal 10. wheel.json.JSONObject.optJSONObject(Ljava/lang/String;)Lwheel/json/JSONObject;: I13 Branch 66 IFEQ L829 - true
   * Goal 11. wheel.json.JSONObject.put(Ljava/lang/String;Z)Lwheel/json/JSONObject;: I8 Branch 68 IFEQ L902 - true
   * Goal 12. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I6 Branch 73 IFNULL L1015 - false
   * Goal 13. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I12 Branch 74 IFNE L1015 - true
   * Goal 14. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I51 Branch 75 IF_ICMPGE L1027 - true
   * Goal 15. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I51 Branch 75 IF_ICMPGE L1027 - false
   * Goal 16. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 76 LOOKUPSWITCH L1030 Case 8 - false
   * Goal 17. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 77 LOOKUPSWITCH L1030 Case 9 - false
   * Goal 18. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 78 LOOKUPSWITCH L1030 Case 10 - false
   * Goal 19. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 79 LOOKUPSWITCH L1030 Case 12 - false
   * Goal 20. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 80 LOOKUPSWITCH L1030 Case 13 - false
   * Goal 21. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 81 LOOKUPSWITCH L1030 Case 34 - false
   * Goal 22. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 82 LOOKUPSWITCH L1030 Case 47 - false
   * Goal 23. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 83 LOOKUPSWITCH L1030 Case 92 - false
   * Goal 24. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I65 Branch 84 LOOKUPSWITCH L1030 Default-Case - true
   * Goal 25. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I177 Branch 86 IF_ICMPLT L1058 - false
   * Goal 26. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I183 Branch 87 IF_ICMPLT L1058 - true
   * Goal 27. wheel.json.JSONObject.quote(Ljava/lang/String;)Ljava/lang/String;: I196 Branch 89 IF_ICMPLT L1058 - true
   */

  @Test
  public void test78()  throws Throwable  {
      WordTag wordTag0 = WordTag.valueOf("& s not a JSONArNay.");
      assertNotNull(wordTag0);
      assertNull(wordTag0.tag());
      assertEquals("& s not a JSONArNay.", wordTag0.word());
      assertEquals("& s not a JSONArNay.", wordTag0.value());
      
      JSONObject jSONObject0 = new JSONObject((Object) wordTag0);
      assertNotNull(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertNull(wordTag0.tag());
      assertEquals("& s not a JSONArNay.", wordTag0.word());
      assertEquals("& s not a JSONArNay.", wordTag0.value());
      
      JSONObject jSONObject1 = jSONObject0.put("& s not a JSONArNay.", (-5L));
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
      assertNull(wordTag0.tag());
      assertEquals("& s not a JSONArNay.", wordTag0.word());
      assertEquals("& s not a JSONArNay.", wordTag0.value());
      
      JSONObject jSONObject2 = jSONObject1.put("getintern", false);
      assertNotNull(jSONObject2);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(3, jSONObject0.length());
      assertEquals(3, jSONObject1.length());
      assertEquals(3, jSONObject2.length());
      assertNull(wordTag0.tag());
      assertEquals("& s not a JSONArNay.", wordTag0.word());
      assertEquals("& s not a JSONArNay.", wordTag0.value());
      
      int int0 = jSONObject0.optInt("getintern", 425);
      assertEquals(425, int0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(3, jSONObject0.length());
      assertNull(wordTag0.tag());
      assertEquals("& s not a JSONArNay.", wordTag0.word());
      assertEquals("& s not a JSONArNay.", wordTag0.value());
      
      JSONObject jSONObject3 = jSONObject2.optJSONObject("& s not a JSONArNay.");
      assertNull(jSONObject3);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(3, jSONObject0.length());
      assertEquals(3, jSONObject1.length());
      assertEquals(3, jSONObject2.length());
      assertNull(wordTag0.tag());
      assertEquals("& s not a JSONArNay.", wordTag0.word());
      assertEquals("& s not a JSONArNay.", wordTag0.value());
      
      JSONArray jSONArray0 = jSONObject0.optJSONArray("& s not a JSONArNay.");
      assertNull(jSONArray0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(3, jSONObject0.length());
      assertNull(wordTag0.tag());
      assertEquals("& s not a JSONArNay.", wordTag0.word());
      assertEquals("& s not a JSONArNay.", wordTag0.value());
      
      long long0 = jSONObject2.getLong("& s not a JSONArNay.");
      assertEquals((-5L), long0);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(3, jSONObject0.length());
      assertEquals(3, jSONObject1.length());
      assertEquals(3, jSONObject2.length());
      assertNull(wordTag0.tag());
      assertEquals("& s not a JSONArNay.", wordTag0.word());
      assertEquals("& s not a JSONArNay.", wordTag0.value());
      
      try {
        JSONArray jSONArray1 = jSONObject2.getJSONArray("& s not a JSONArNay.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"& s not a JSONArNay.\"] is not a JSONArray.
         //
      }
  }

  //Test case number: 79
  /*
   * 19 covered goals:
   * Goal 1. wheel.json.JSONObject.<init>()V: root-Branch
   * Goal 2. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I33 Branch 17 IF_ICMPGE L263 - true
   * Goal 3. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I33 Branch 17 IF_ICMPGE L263 - false
   * Goal 4. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I58 Branch 18 IFLE L268 - true
   * Goal 5. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I58 Branch 18 IFLE L268 - false
   * Goal 6. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I78 Branch 19 IFLE L270 - true
   * Goal 7. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I78 Branch 19 IFLE L270 - false
   * Goal 8. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I92 Branch 20 IFLE L273 - true
   * Goal 9. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I92 Branch 20 IFLE L273 - false
   * Goal 10. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I100 Branch 21 IFEQ L273 - false
   * Goal 11. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I107 Branch 22 IFNE L273 - true
   * Goal 12. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I107 Branch 22 IFNE L273 - false
   * Goal 13. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I116 Branch 23 IF_ICMPNE L276 - true
   * Goal 14. wheel.json.JSONObject.<init>(Ljava/lang/Object;)V: I135 Branch 24 IFNE L278 - false
   * Goal 15. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I6 Branch 69 IFNONNULL L975 - true
   * Goal 16. wheel.json.JSONObject.put(Ljava/lang/String;Ljava/lang/Object;)Lwheel/json/JSONObject;: I20 Branch 70 IFNULL L978 - false
   * Goal 17. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I6 Branch 91 IFNULL L1088 - false
   * Goal 18. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I14 Branch 92 IFEQ L1089 - true
   * Goal 19. wheel.json.JSONObject.testValidity(Ljava/lang/Object;)V: I45 Branch 95 IFEQ L1094 - true
   */

  @Test
  public void test79()  throws Throwable  {
      HashMap<ArrayCoreMap, Word> hashMap0 = new HashMap<ArrayCoreMap, Word>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      assertNotNull(jSONObject0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(2, jSONObject0.length());
  }
}
