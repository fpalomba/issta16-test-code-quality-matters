/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 16 16:00:25 GMT 2015
 */

package org.jsecurity.authc;

import static org.junit.Assert.*;
import org.junit.Test;
import java.net.Inet4Address;
import java.net.InetAddress;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.jsecurity.authc.UsernamePasswordToken;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UsernamePasswordToken_ESTest extends UsernamePasswordToken_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 2 covered goals:
   * Goal 1. org.jsecurity.authc.UsernamePasswordToken.getPrincipal()Ljava/lang/Object;: root-Branch
   * Goal 2. org.jsecurity.authc.UsernamePasswordToken.getUsername()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test00()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      assertNotNull(usernamePasswordToken0);
      assertFalse(usernamePasswordToken0.isRememberMe());
      assertNull(usernamePasswordToken0.getUsername());
      
      Object object0 = usernamePasswordToken0.getPrincipal();
      assertNull(object0);
      assertFalse(usernamePasswordToken0.isRememberMe());
      assertNull(usernamePasswordToken0.getUsername());
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * Goal 1. org.jsecurity.authc.UsernamePasswordToken.getPassword()[C: root-Branch
   * Goal 2. org.jsecurity.authc.UsernamePasswordToken.getCredentials()Ljava/lang/Object;: root-Branch
   */

  @Test
  public void test01()  throws Throwable  {
      Inet4Address inet4Address0 = (Inet4Address)MockInetAddress.getLocalHost();
      assertNotNull(inet4Address0);
      assertFalse(inet4Address0.isMCSiteLocal());
      assertFalse(inet4Address0.isMCOrgLocal());
      assertFalse(inet4Address0.isAnyLocalAddress());
      assertFalse(inet4Address0.isMCNodeLocal());
      assertFalse(inet4Address0.isMCGlobal());
      assertFalse(inet4Address0.isLoopbackAddress());
      assertEquals("192.168.1.42", inet4Address0.getHostAddress());
      assertFalse(inet4Address0.isMCLinkLocal());
      assertFalse(inet4Address0.isLinkLocalAddress());
      assertEquals("/192.168.1.42", inet4Address0.toString());
      assertTrue(inet4Address0.isSiteLocalAddress());
      assertFalse(inet4Address0.isMulticastAddress());
      
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("y{ v+j~~l{CC]", "y{ v+j~~l{CC]", (InetAddress) inet4Address0);
      assertNotNull(usernamePasswordToken0);
      assertEquals("y{ v+j~~l{CC]", usernamePasswordToken0.getUsername());
      assertFalse(usernamePasswordToken0.isRememberMe());
      assertFalse(inet4Address0.isMCSiteLocal());
      assertFalse(inet4Address0.isMCOrgLocal());
      assertFalse(inet4Address0.isAnyLocalAddress());
      assertFalse(inet4Address0.isMCNodeLocal());
      assertFalse(inet4Address0.isMCGlobal());
      assertFalse(inet4Address0.isLoopbackAddress());
      assertEquals("192.168.1.42", inet4Address0.getHostAddress());
      assertFalse(inet4Address0.isMCLinkLocal());
      assertFalse(inet4Address0.isLinkLocalAddress());
      assertEquals("/192.168.1.42", inet4Address0.toString());
      assertTrue(inet4Address0.isSiteLocalAddress());
      assertFalse(inet4Address0.isMulticastAddress());
      
      Object object0 = usernamePasswordToken0.getCredentials();
      assertNotNull(object0);
      assertEquals("y{ v+j~~l{CC]", usernamePasswordToken0.getUsername());
      assertFalse(usernamePasswordToken0.isRememberMe());
      assertFalse(inet4Address0.isMCSiteLocal());
      assertFalse(inet4Address0.isMCOrgLocal());
      assertFalse(inet4Address0.isAnyLocalAddress());
      assertFalse(inet4Address0.isMCNodeLocal());
      assertFalse(inet4Address0.isMCGlobal());
      assertFalse(inet4Address0.isLoopbackAddress());
      assertEquals("192.168.1.42", inet4Address0.getHostAddress());
      assertFalse(inet4Address0.isMCLinkLocal());
      assertFalse(inet4Address0.isLinkLocalAddress());
      assertEquals("/192.168.1.42", inet4Address0.toString());
      assertTrue(inet4Address0.isSiteLocalAddress());
      assertFalse(inet4Address0.isMulticastAddress());
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * Goal 1. org.jsecurity.authc.UsernamePasswordToken.toString()Ljava/lang/String;: I43 Branch 7 IFNULL L363 - false
   */

  @Test
  public void test02()  throws Throwable  {
      Inet4Address inet4Address0 = (Inet4Address)MockInetAddress.getByName("f oc/FG8k");
      assertNotNull(inet4Address0);
      assertFalse(inet4Address0.isMCOrgLocal());
      assertFalse(inet4Address0.isMulticastAddress());
      assertFalse(inet4Address0.isAnyLocalAddress());
      assertFalse(inet4Address0.isMCSiteLocal());
      assertFalse(inet4Address0.isSiteLocalAddress());
      assertFalse(inet4Address0.isLinkLocalAddress());
      assertEquals("200.42.42.0", inet4Address0.getHostAddress());
      assertEquals("f oc/FG8k/200.42.42.0", inet4Address0.toString());
      assertFalse(inet4Address0.isMCNodeLocal());
      assertFalse(inet4Address0.isLoopbackAddress());
      assertFalse(inet4Address0.isMCLinkLocal());
      assertFalse(inet4Address0.isMCGlobal());
      
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("f oc/FG8k", "f oc/FG8k", (InetAddress) inet4Address0);
      assertNotNull(usernamePasswordToken0);
      assertEquals("f oc/FG8k", usernamePasswordToken0.getUsername());
      assertFalse(usernamePasswordToken0.isRememberMe());
      assertFalse(inet4Address0.isMCOrgLocal());
      assertFalse(inet4Address0.isMulticastAddress());
      assertFalse(inet4Address0.isAnyLocalAddress());
      assertFalse(inet4Address0.isMCSiteLocal());
      assertFalse(inet4Address0.isSiteLocalAddress());
      assertFalse(inet4Address0.isLinkLocalAddress());
      assertEquals("200.42.42.0", inet4Address0.getHostAddress());
      assertEquals("f oc/FG8k/200.42.42.0", inet4Address0.toString());
      assertFalse(inet4Address0.isMCNodeLocal());
      assertFalse(inet4Address0.isLoopbackAddress());
      assertFalse(inet4Address0.isMCLinkLocal());
      assertFalse(inet4Address0.isMCGlobal());
      
      String string0 = usernamePasswordToken0.toString();
      assertNotNull(string0);
      assertEquals("f oc/FG8k", usernamePasswordToken0.getUsername());
      assertFalse(usernamePasswordToken0.isRememberMe());
      assertFalse(inet4Address0.isMCOrgLocal());
      assertFalse(inet4Address0.isMulticastAddress());
      assertFalse(inet4Address0.isAnyLocalAddress());
      assertFalse(inet4Address0.isMCSiteLocal());
      assertFalse(inet4Address0.isSiteLocalAddress());
      assertFalse(inet4Address0.isLinkLocalAddress());
      assertEquals("200.42.42.0", inet4Address0.getHostAddress());
      assertEquals("f oc/FG8k/200.42.42.0", inet4Address0.toString());
      assertFalse(inet4Address0.isMCNodeLocal());
      assertFalse(inet4Address0.isLoopbackAddress());
      assertFalse(inet4Address0.isMCLinkLocal());
      assertFalse(inet4Address0.isMCGlobal());
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - f oc/FG8k, rememberMe=false (f oc/FG8k/200.42.42.0)", string0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * Goal 1. org.jsecurity.authc.UsernamePasswordToken.setRememberMe(Z)V: root-Branch
   */

  @Test
  public void test03()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(", rememberMe=", ", rememberMe=", false);
      assertNotNull(usernamePasswordToken0);
      assertEquals(", rememberMe=", usernamePasswordToken0.getUsername());
      assertFalse(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.setRememberMe(false);
      assertEquals(", rememberMe=", usernamePasswordToken0.getUsername());
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * Goal 1. org.jsecurity.authc.UsernamePasswordToken.setPassword([C)V: root-Branch
   */

  @Test
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[12];
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      assertNotNull(usernamePasswordToken0);
      assertNull(usernamePasswordToken0.getUsername());
      assertFalse(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.setPassword(charArray0);
      assertNull(usernamePasswordToken0.getUsername());
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  //Test case number: 5
  /*
   * 3 covered goals:
   * Goal 1. org.jsecurity.authc.UsernamePasswordToken.clear()V: I22 Branch 5 IFNULL L340 - false
   * Goal 2. org.jsecurity.authc.UsernamePasswordToken.clear()V: I35 Branch 6 IF_ICMPGE L341 - true
   * Goal 3. org.jsecurity.authc.UsernamePasswordToken.clear()V: I35 Branch 6 IF_ICMPGE L341 - false
   */

  @Test
  public void test05()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(" a=(", " a=(");
      assertNotNull(usernamePasswordToken0);
      assertEquals(" a=(", usernamePasswordToken0.getUsername());
      assertFalse(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.clear();
      assertNull(usernamePasswordToken0.getUsername());
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * Goal 1. org.jsecurity.authc.UsernamePasswordToken.isRememberMe()Z: root-Branch
   */

  @Test
  public void test06()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      assertNotNull(usernamePasswordToken0);
      assertFalse(usernamePasswordToken0.isRememberMe());
      assertNull(usernamePasswordToken0.getUsername());
      
      boolean boolean0 = usernamePasswordToken0.isRememberMe();
      assertFalse(usernamePasswordToken0.isRememberMe());
      assertNull(usernamePasswordToken0.getUsername());
      assertFalse(boolean0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * Goal 1. org.jsecurity.authc.UsernamePasswordToken.getInetAddress()Ljava/net/InetAddress;: root-Branch
   */

  @Test
  public void test07()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      assertNotNull(usernamePasswordToken0);
      assertFalse(usernamePasswordToken0.isRememberMe());
      assertNull(usernamePasswordToken0.getUsername());
      
      InetAddress inetAddress0 = usernamePasswordToken0.getInetAddress();
      assertNull(inetAddress0);
      assertFalse(usernamePasswordToken0.isRememberMe());
      assertNull(usernamePasswordToken0.getUsername());
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * Goal 1. org.jsecurity.authc.UsernamePasswordToken.clear()V: I22 Branch 5 IFNULL L340 - true
   */

  @Test
  public void test08()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      assertNotNull(usernamePasswordToken0);
      assertNull(usernamePasswordToken0.getUsername());
      assertFalse(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.clear();
      assertNull(usernamePasswordToken0.getUsername());
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * Goal 1. org.jsecurity.authc.UsernamePasswordToken.<init>(Ljava/lang/String;[CZ)V: root-Branch
   */

  @Test
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[12];
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("4:a-ZA~*nb*-A  ", charArray0, false);
      assertNotNull(usernamePasswordToken0);
      assertEquals("4:a-ZA~*nb*-A  ", usernamePasswordToken0.getUsername());
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * Goal 1. org.jsecurity.authc.UsernamePasswordToken.<init>(Ljava/lang/String;[CLjava/net/InetAddress;)V: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[14];
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("$ ", charArray0, (InetAddress) null);
      assertNotNull(usernamePasswordToken0);
      assertFalse(usernamePasswordToken0.isRememberMe());
      assertEquals("$ ", usernamePasswordToken0.getUsername());
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * Goal 1. org.jsecurity.authc.UsernamePasswordToken.toString()Ljava/lang/String;: I43 Branch 7 IFNULL L363 - true
   */

  @Test
  public void test11()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(", remeberMe=", ", remeberMe=");
      assertNotNull(usernamePasswordToken0);
      assertFalse(usernamePasswordToken0.isRememberMe());
      assertEquals(", remeberMe=", usernamePasswordToken0.getUsername());
      
      String string0 = usernamePasswordToken0.toString();
      assertNotNull(string0);
      assertFalse(usernamePasswordToken0.isRememberMe());
      assertEquals(", remeberMe=", usernamePasswordToken0.getUsername());
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - , remeberMe=, rememberMe=false", string0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * Goal 1. org.jsecurity.authc.UsernamePasswordToken.<init>(Ljava/lang/String;[C)V: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[7];
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("?b@ry", charArray0);
      assertNotNull(usernamePasswordToken0);
      assertEquals("?b@ry", usernamePasswordToken0.getUsername());
      assertFalse(usernamePasswordToken0.isRememberMe());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 13
  /*
   * 2 covered goals:
   * Goal 1. org.jsecurity.authc.UsernamePasswordToken.setInetAddress(Ljava/net/InetAddress;)V: root-Branch
   * Goal 2. org.jsecurity.authc.UsernamePasswordToken.<init>()V: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      Inet4Address inet4Address0 = (Inet4Address)MockInetAddress.getLocalHost();
      assertNotNull(inet4Address0);
      assertEquals("192.168.1.42", inet4Address0.getHostAddress());
      assertFalse(inet4Address0.isLinkLocalAddress());
      assertFalse(inet4Address0.isMCGlobal());
      assertFalse(inet4Address0.isAnyLocalAddress());
      assertFalse(inet4Address0.isMCLinkLocal());
      assertFalse(inet4Address0.isMCNodeLocal());
      assertTrue(inet4Address0.isSiteLocalAddress());
      assertFalse(inet4Address0.isLoopbackAddress());
      assertFalse(inet4Address0.isMCSiteLocal());
      assertFalse(inet4Address0.isMulticastAddress());
      assertFalse(inet4Address0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inet4Address0.toString());
      
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      assertNotNull(usernamePasswordToken0);
      assertFalse(usernamePasswordToken0.isRememberMe());
      assertNull(usernamePasswordToken0.getUsername());
      
      usernamePasswordToken0.setInetAddress((InetAddress) inet4Address0);
      assertEquals("192.168.1.42", inet4Address0.getHostAddress());
      assertFalse(inet4Address0.isLinkLocalAddress());
      assertFalse(inet4Address0.isMCGlobal());
      assertFalse(inet4Address0.isAnyLocalAddress());
      assertFalse(inet4Address0.isMCLinkLocal());
      assertFalse(inet4Address0.isMCNodeLocal());
      assertTrue(inet4Address0.isSiteLocalAddress());
      assertFalse(inet4Address0.isLoopbackAddress());
      assertFalse(inet4Address0.isMCSiteLocal());
      assertFalse(inet4Address0.isMulticastAddress());
      assertFalse(inet4Address0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inet4Address0.toString());
      assertFalse(usernamePasswordToken0.isRememberMe());
      assertNull(usernamePasswordToken0.getUsername());
  }

  //Test case number: 14
  /*
   * 2 covered goals:
   * Goal 1. org.jsecurity.authc.UsernamePasswordToken.<init>(Ljava/lang/String;[CZLjava/net/InetAddress;)V: root-Branch
   * Goal 2. org.jsecurity.authc.UsernamePasswordToken.setUsername(Ljava/lang/String;)V: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(", rememberMe=", ", rememberMe=");
      assertNotNull(usernamePasswordToken0);
      assertFalse(usernamePasswordToken0.isRememberMe());
      assertEquals(", rememberMe=", usernamePasswordToken0.getUsername());
      
      usernamePasswordToken0.setUsername(", rememberMe=");
      assertFalse(usernamePasswordToken0.isRememberMe());
      assertEquals(", rememberMe=", usernamePasswordToken0.getUsername());
  }
}
