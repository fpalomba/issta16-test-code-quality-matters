/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 16 02:00:33 GMT 2015
 */

package net.sourceforge.squirrel_sql.plugins.dbcopy.util;

import static org.junit.Assert.*;
import org.junit.Test;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import net.sourceforge.squirrel_sql.client.IApplication;
import net.sourceforge.squirrel_sql.client.session.ISession;
import net.sourceforge.squirrel_sql.client.session.schemainfo.SchemaInfo;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectType;
import net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.ISQLConnection;
import net.sourceforge.squirrel_sql.fw.sql.ITableInfo;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import net.sourceforge.squirrel_sql.fw.sql.TableInfo;
import net.sourceforge.squirrel_sql.plugins.dbcopy.DBCopyPlugin;
import net.sourceforge.squirrel_sql.plugins.dbcopy.SessionInfoProvider;
import net.sourceforge.squirrel_sql.plugins.dbcopy.prefs.DBCopyPreferenceBean;
import net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.validateColumnNames(Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;Lnet/sourceforge/squirrel_sql/plugins/dbcopy/SessionInfoProvider;)V: I6 Branch 211 IFNONNULL L1864 - true
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.validateColumnNames(Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;Lnet/sourceforge/squirrel_sql/plugins/dbcopy/SessionInfoProvider;)V: I26 Branch 212 IFNULL L1870 - true
   */

  @Test
  public void test00()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertNotNull(dBCopyPlugin0);
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      
      DBUtil.validateColumnNames((ITableInfo) null, (SessionInfoProvider) dBCopyPlugin0);
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnType(Lnet/sourceforge/squirrel_sql/fw/sql/ISQLConnection;Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;Ljava/lang/String;)I: I10 Branch 161 IFNULL L1267 - true
   */

  @Test
  public void test01()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertNotNull(dBCopyPlugin0);
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      
      TableInfo tableInfo0 = dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, " \"wHM/FF[Wc_Z,", " \"wHM/FF[Wc_Z,");
      assertNull(tableInfo0);
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      
      int int0 = DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, " \"wHM/FF[Wc_Z,");
      assertEquals((-1), int0);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.convertObjectToTableList(Ljava/util/List;)Ljava/util/List;: I17 Branch 220 IFEQ L2031 - true
   */

  @Test
  public void test02()  throws Throwable  {
      LinkedList<IDatabaseObjectInfo> linkedList0 = new LinkedList<IDatabaseObjectInfo>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<ITableInfo> list0 = DBUtil.convertObjectToTableList((List<IDatabaseObjectInfo>) linkedList0);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, linkedList0.size());
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.setLastStatement(Ljava/lang/String;)V: root-Branch
   */

  @Test
  public void test03()  throws Throwable  {
      DBUtil.setLastStatement("(");
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnSql(Lnet/sourceforge/squirrel_sql/plugins/dbcopy/SessionInfoProvider;Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I12 Branch 182 IFEQ L1519 - false
   */

  @Test
  public void test04()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      assertNotNull(dBCopyPreferenceBean0);
      assertNull(dBCopyPreferenceBean0.getClientVersion());
      assertTrue(dBCopyPreferenceBean0.isCopyIndexDefs());
      assertTrue(dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertFalse(dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertFalse(dBCopyPreferenceBean0.isPromptForDialect());
      assertTrue(dBCopyPreferenceBean0.isCopyForeignKeys());
      assertNull(dBCopyPreferenceBean0.getClientName());
      assertTrue(dBCopyPreferenceBean0.isCopyData());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertFalse(dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertTrue(dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(0L, dBCopyPreferenceBean0.getRecordDelayMillis());
      assertFalse(dBCopyPreferenceBean0.isWriteScript());
      assertTrue(dBCopyPreferenceBean0.isUseTruncate());
      assertTrue(dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertEquals(0L, dBCopyPreferenceBean0.getTableDelayMillis());
      assertFalse(dBCopyPreferenceBean0.isAppendRecordsToExisting());
      assertTrue(dBCopyPreferenceBean0.isUseFileCaching());
      assertTrue(dBCopyPreferenceBean0.isCheckKeywords());
      assertTrue(dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      
      DBUtil.setPreferences(dBCopyPreferenceBean0);
      assertNull(dBCopyPreferenceBean0.getClientVersion());
      assertTrue(dBCopyPreferenceBean0.isCopyIndexDefs());
      assertTrue(dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertFalse(dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertFalse(dBCopyPreferenceBean0.isPromptForDialect());
      assertTrue(dBCopyPreferenceBean0.isCopyForeignKeys());
      assertNull(dBCopyPreferenceBean0.getClientName());
      assertTrue(dBCopyPreferenceBean0.isCopyData());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertFalse(dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertTrue(dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(0L, dBCopyPreferenceBean0.getRecordDelayMillis());
      assertFalse(dBCopyPreferenceBean0.isWriteScript());
      assertTrue(dBCopyPreferenceBean0.isUseTruncate());
      assertTrue(dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertEquals(0L, dBCopyPreferenceBean0.getTableDelayMillis());
      assertFalse(dBCopyPreferenceBean0.isAppendRecordsToExisting());
      assertTrue(dBCopyPreferenceBean0.isUseFileCaching());
      assertTrue(dBCopyPreferenceBean0.isCheckKeywords());
      assertTrue(dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("Null 'columnKey' argument.", "Null 'columnKey' argument.", "Null 'columnKey' argument.", "Null 'columnKey' argument.", 326, "Null 'columnKey' argument.", 326, 326, 326, 326, "Null 'columnKey' argument.", "Null 'columnKey' argument.", 326, 326, "Null 'columnKey' argument.");
      assertNotNull(tableColumnInfo0);
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getTableName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getSimpleName());
      assertEquals(326, tableColumnInfo0.getOrdinalPosition());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.isNullable());
      assertEquals(326, tableColumnInfo0.isNullAllowed());
      assertEquals(326, tableColumnInfo0.getRadix());
      assertEquals(326, tableColumnInfo0.getOctetLength());
      assertEquals(326, tableColumnInfo0.getDecimalDigits());
      assertEquals(326, tableColumnInfo0.getColumnSize());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.toString());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getRemarks());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getSchemaName());
      assertEquals(326, tableColumnInfo0.getDataType());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getDefaultValue());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getQualifiedName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getTypeName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getColumnName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getCatalogName());
      
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertNotNull(dBCopyPlugin0);
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      
      // Undeclared exception!
      try {
        String string0 = DBUtil.getColumnSql((SessionInfoProvider) dBCopyPlugin0, tableColumnInfo0, "Null 'columnKey' argument.", "Null 'columnKey' argument.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 5
  @Test
  public void test05()  throws Throwable  {
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[4];
      List<ITableInfo> list0 = DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
      assertNotNull(list0);
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isBinaryType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Z: I34 Branch 189 IF_ICMPNE L1661 - false
   */

  @Test
  public void test06()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("723)]d", "723)]d", "723)]d", "723)]d", (-3), "723)]d", (-3), (-3), (-3), (-3), "723)]d", "723)]d", (-3), (-3), "723)]d");
      assertNotNull(tableColumnInfo0);
      assertEquals("723)]d", tableColumnInfo0.isNullable());
      assertEquals("723)]d", tableColumnInfo0.getTableName());
      assertEquals("723)]d", tableColumnInfo0.getSimpleName());
      assertEquals(-3, tableColumnInfo0.getColumnSize());
      assertEquals("723)]d", tableColumnInfo0.getRemarks());
      assertEquals("723)]d", tableColumnInfo0.getQualifiedName());
      assertEquals("723)]d", tableColumnInfo0.getTypeName());
      assertEquals(-3, tableColumnInfo0.getOctetLength());
      assertEquals(-3, tableColumnInfo0.getDataType());
      assertEquals("723)]d", tableColumnInfo0.getDefaultValue());
      assertEquals("723)]d", tableColumnInfo0.getCatalogName());
      assertEquals(-3, tableColumnInfo0.getOrdinalPosition());
      assertEquals(-3, tableColumnInfo0.isNullAllowed());
      assertEquals(-3, tableColumnInfo0.getRadix());
      assertEquals("723)]d", tableColumnInfo0.getColumnName());
      assertEquals("723)]d", tableColumnInfo0.toString());
      assertEquals("723)]d", tableColumnInfo0.getSchemaName());
      assertEquals(-3, tableColumnInfo0.getDecimalDigits());
      
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertEquals("723)]d", tableColumnInfo0.isNullable());
      assertEquals("723)]d", tableColumnInfo0.getTableName());
      assertEquals("723)]d", tableColumnInfo0.getSimpleName());
      assertEquals(-3, tableColumnInfo0.getColumnSize());
      assertEquals("723)]d", tableColumnInfo0.getRemarks());
      assertEquals("723)]d", tableColumnInfo0.getQualifiedName());
      assertEquals("723)]d", tableColumnInfo0.getTypeName());
      assertEquals(-3, tableColumnInfo0.getOctetLength());
      assertEquals(-3, tableColumnInfo0.getDataType());
      assertEquals("723)]d", tableColumnInfo0.getDefaultValue());
      assertEquals("723)]d", tableColumnInfo0.getCatalogName());
      assertEquals(-3, tableColumnInfo0.getOrdinalPosition());
      assertEquals(-3, tableColumnInfo0.isNullAllowed());
      assertEquals(-3, tableColumnInfo0.getRadix());
      assertEquals("723)]d", tableColumnInfo0.getColumnName());
      assertEquals("723)]d", tableColumnInfo0.toString());
      assertEquals("723)]d", tableColumnInfo0.getSchemaName());
      assertEquals(-3, tableColumnInfo0.getDecimalDigits());
      assertTrue(boolean0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getSchemaFromDbObject(Lnet/sourceforge/squirrel_sql/fw/sql/IDatabaseObjectInfo;Lnet/sourceforge/squirrel_sql/client/session/schemainfo/SchemaInfo;)Lnet/sourceforge/squirrel_sql/fw/sql/IDatabaseObjectInfo;: I9 Branch 224 IFEQ L2073 - false
   */

  @Test
  public void test07()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("Null 'columnKey' argument.", "Null 'columnKey' argument.", "Null 'columnKey' argument.", "Null 'columnKey' argument.", (-622), "Null 'columnKey' argument.", (-622), (-622), (-622), (-622), "Null 'columnKey' argument.", "Null 'columnKey' argument.", (-622), (-622), "Null 'columnKey' argument.");
      assertNotNull(tableColumnInfo0);
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getDefaultValue());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getCatalogName());
      assertEquals(-622, tableColumnInfo0.getRadix());
      assertEquals(-622, tableColumnInfo0.isNullAllowed());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getSchemaName());
      assertEquals(-622, tableColumnInfo0.getOctetLength());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getColumnName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getSimpleName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getTableName());
      assertEquals(-622, tableColumnInfo0.getDataType());
      assertEquals(-622, tableColumnInfo0.getOrdinalPosition());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getRemarks());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getQualifiedName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getTypeName());
      assertEquals(-622, tableColumnInfo0.getColumnSize());
      assertEquals(-622, tableColumnInfo0.getDecimalDigits());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.isNullable());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.toString());
      
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SCHEMA;
      assertNotNull(databaseObjectType0);
      assertEquals("Schema", databaseObjectType0.toString());
      assertEquals("Schema", databaseObjectType0.getKeyForSerializationReplace());
      assertEquals("Schema", databaseObjectType0.getName());
      
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      assertEquals("Schema", databaseObjectType0.toString());
      assertEquals("Schema", databaseObjectType0.getKeyForSerializationReplace());
      assertEquals("Schema", databaseObjectType0.getName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getDefaultValue());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getCatalogName());
      assertEquals(-622, tableColumnInfo0.getRadix());
      assertEquals(-622, tableColumnInfo0.isNullAllowed());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getSchemaName());
      assertEquals(-622, tableColumnInfo0.getOctetLength());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getColumnName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getSimpleName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getTableName());
      assertEquals(-622, tableColumnInfo0.getDataType());
      assertEquals(-622, tableColumnInfo0.getOrdinalPosition());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getRemarks());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getQualifiedName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getTypeName());
      assertEquals(-622, tableColumnInfo0.getColumnSize());
      assertEquals(-622, tableColumnInfo0.getDecimalDigits());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.isNullable());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.toString());
      
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertNotNull(dBCopyPlugin0);
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      
      IApplication iApplication0 = dBCopyPlugin0.getApplication();
      assertNull(iApplication0);
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      assertEquals(2, schemaInfo0.TABLE_EXT_COLS_LOADED_BEFORE);
      assertEquals(1, schemaInfo0.TABLE_EXT_COLS_LOADED_IN_THIS_CALL);
      assertEquals(0, schemaInfo0.TABLE_EXT_NOT_A_TABLE);
      assertNotNull(schemaInfo0);
      assertFalse(schemaInfo0.isLoaded());
      
      TableColumnInfo tableColumnInfo1 = (TableColumnInfo)DBUtil.getSchemaFromDbObject((IDatabaseObjectInfo) tableColumnInfo0, schemaInfo0);
      assertEquals(2, schemaInfo0.TABLE_EXT_COLS_LOADED_BEFORE);
      assertEquals(1, schemaInfo0.TABLE_EXT_COLS_LOADED_IN_THIS_CALL);
      assertEquals(0, schemaInfo0.TABLE_EXT_NOT_A_TABLE);
      assertNotNull(tableColumnInfo1);
      assertSame(tableColumnInfo1, tableColumnInfo0);
      assertSame(tableColumnInfo0, tableColumnInfo1);
      assertFalse(schemaInfo0.isLoaded());
      assertEquals(-622, tableColumnInfo1.getOrdinalPosition());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo1.toString());
      assertEquals(-622, tableColumnInfo1.getRadix());
      assertEquals(-622, tableColumnInfo1.isNullAllowed());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo1.getRemarks());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo1.getColumnName());
      assertEquals(-622, tableColumnInfo1.getOctetLength());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo1.getSchemaName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo1.getCatalogName());
      assertEquals(-622, tableColumnInfo1.getDecimalDigits());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo1.getSimpleName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo1.getDefaultValue());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo1.isNullable());
      assertEquals(-622, tableColumnInfo1.getDataType());
      assertEquals(-622, tableColumnInfo1.getColumnSize());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo1.getQualifiedName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo1.getTypeName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo1.getTableName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getDefaultValue());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getCatalogName());
      assertEquals(-622, tableColumnInfo0.getRadix());
      assertEquals(-622, tableColumnInfo0.isNullAllowed());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getSchemaName());
      assertEquals(-622, tableColumnInfo0.getOctetLength());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getColumnName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getSimpleName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getTableName());
      assertEquals(-622, tableColumnInfo0.getDataType());
      assertEquals(-622, tableColumnInfo0.getOrdinalPosition());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getRemarks());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getQualifiedName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getTypeName());
      assertEquals(-622, tableColumnInfo0.getColumnSize());
      assertEquals(-622, tableColumnInfo0.getDecimalDigits());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.isNullable());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.toString());
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.replaceOtherDataType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;Lnet/sourceforge/squirrel_sql/client/session/ISession;)I: I12 Branch 58 IF_ICMPNE L686 - true
   */

  @Test
  public void test08()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("length", "length", "length", "length", (-1655), "length", (-1655), (-1655), (-1655), (-1655), "length", "length", (-1655), (-1655), "length");
      assertNotNull(tableColumnInfo0);
      assertEquals("length", tableColumnInfo0.getTypeName());
      assertEquals(-1655, tableColumnInfo0.getDataType());
      assertEquals(-1655, tableColumnInfo0.getDecimalDigits());
      assertEquals("length", tableColumnInfo0.getRemarks());
      assertEquals("length", tableColumnInfo0.toString());
      assertEquals("length", tableColumnInfo0.getQualifiedName());
      assertEquals(-1655, tableColumnInfo0.isNullAllowed());
      assertEquals(-1655, tableColumnInfo0.getOrdinalPosition());
      assertEquals("length", tableColumnInfo0.getTableName());
      assertEquals(-1655, tableColumnInfo0.getColumnSize());
      assertEquals("length", tableColumnInfo0.getCatalogName());
      assertEquals("length", tableColumnInfo0.getDefaultValue());
      assertEquals("length", tableColumnInfo0.getSchemaName());
      assertEquals("length", tableColumnInfo0.getSimpleName());
      assertEquals(-1655, tableColumnInfo0.getRadix());
      assertEquals("length", tableColumnInfo0.getColumnName());
      assertEquals(-1655, tableColumnInfo0.getOctetLength());
      assertEquals("length", tableColumnInfo0.isNullable());
      
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals("length", tableColumnInfo0.getTypeName());
      assertEquals(-1655, tableColumnInfo0.getDataType());
      assertEquals(-1655, tableColumnInfo0.getDecimalDigits());
      assertEquals("length", tableColumnInfo0.getRemarks());
      assertEquals("length", tableColumnInfo0.toString());
      assertEquals("length", tableColumnInfo0.getQualifiedName());
      assertEquals(-1655, tableColumnInfo0.isNullAllowed());
      assertEquals(-1655, tableColumnInfo0.getOrdinalPosition());
      assertEquals("length", tableColumnInfo0.getTableName());
      assertEquals(-1655, tableColumnInfo0.getColumnSize());
      assertEquals("length", tableColumnInfo0.getCatalogName());
      assertEquals("length", tableColumnInfo0.getDefaultValue());
      assertEquals("length", tableColumnInfo0.getSchemaName());
      assertEquals("length", tableColumnInfo0.getSimpleName());
      assertEquals(-1655, tableColumnInfo0.getRadix());
      assertEquals("length", tableColumnInfo0.getColumnName());
      assertEquals(-1655, tableColumnInfo0.getOctetLength());
      assertEquals("length", tableColumnInfo0.isNullable());
      assertEquals((-1655), int0);
  }

  //Test case number: 9
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I41 Branch 51 IF_ICMPNE L630 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I47 Branch 52 IF_ICMPNE L630 - true
   */

  @Test
  public void test09()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent(2, 2);
      assertTrue(boolean0);
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.fixCase(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;)Ljava/lang/String;: I6 Branch 203 IFNULL L1768 - true
   */

  @Test
  public void test10()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertNotNull(dBCopyPlugin0);
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      
      ISession iSession0 = dBCopyPlugin0.getSourceSession();
      assertNull(iSession0);
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      
      String string0 = DBUtil.fixCase((ISession) null, (String) null);
      assertNull(string0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getSchemaFromDbObject(Lnet/sourceforge/squirrel_sql/fw/sql/IDatabaseObjectInfo;Lnet/sourceforge/squirrel_sql/client/session/schemainfo/SchemaInfo;)Lnet/sourceforge/squirrel_sql/fw/sql/IDatabaseObjectInfo;: I9 Branch 224 IFEQ L2073 - true
   */

  @Test
  public void test11()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("%r^K?N", "%r^K?N", "%r^K?N", "%r^K?N", 0, "%r^K?N", 0, 0, 0, 0, "%r^K?N", "%r^K?N", 0, 0, "%r^K?N");
      assertNotNull(tableColumnInfo0);
      assertEquals("%r^K?N", tableColumnInfo0.getSimpleName());
      assertEquals(0, tableColumnInfo0.getColumnSize());
      assertEquals("%r^K?N", tableColumnInfo0.getCatalogName());
      assertEquals(0, tableColumnInfo0.getOrdinalPosition());
      assertEquals("%r^K?N", tableColumnInfo0.getRemarks());
      assertEquals("%r^K?N", tableColumnInfo0.getQualifiedName());
      assertEquals("%r^K?N", tableColumnInfo0.getTypeName());
      assertEquals(0, tableColumnInfo0.isNullAllowed());
      assertEquals(0, tableColumnInfo0.getDataType());
      assertEquals("%r^K?N", tableColumnInfo0.getColumnName());
      assertEquals(0, tableColumnInfo0.getDecimalDigits());
      assertEquals("%r^K?N", tableColumnInfo0.getSchemaName());
      assertEquals("%r^K?N", tableColumnInfo0.getDefaultValue());
      assertEquals("%r^K?N", tableColumnInfo0.isNullable());
      assertEquals("%r^K?N", tableColumnInfo0.getTableName());
      assertEquals(0, tableColumnInfo0.getOctetLength());
      assertEquals(0, tableColumnInfo0.getRadix());
      assertEquals("%r^K?N", tableColumnInfo0.toString());
      
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertNotNull(dBCopyPlugin0);
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      
      IApplication iApplication0 = dBCopyPlugin0.getApplication();
      assertNull(iApplication0);
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      assertEquals(0, schemaInfo0.TABLE_EXT_NOT_A_TABLE);
      assertEquals(2, schemaInfo0.TABLE_EXT_COLS_LOADED_BEFORE);
      assertEquals(1, schemaInfo0.TABLE_EXT_COLS_LOADED_IN_THIS_CALL);
      assertNotNull(schemaInfo0);
      assertFalse(schemaInfo0.isLoaded());
      
      // Undeclared exception!
      try {
        IDatabaseObjectInfo iDatabaseObjectInfo0 = DBUtil.getSchemaFromDbObject((IDatabaseObjectInfo) tableColumnInfo0, schemaInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SQLDatabaseMetaData == null
         //
      }
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 77 LOOKUPSWITCH L772 Case 5 - true
   */

  @Test
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try {
        String string0 = DBUtil.bindVariable((PreparedStatement) null, 5, 5, 9009, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 81 LOOKUPSWITCH L772 Case 12 - true
   */

  @Test
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try {
        String string0 = DBUtil.bindVariable((PreparedStatement) null, 12, 12, 9004, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnType(Lnet/sourceforge/squirrel_sql/fw/sql/ISQLConnection;Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;I)I: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertNotNull(dBCopyPlugin0);
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      
      TableInfo tableInfo0 = dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "dbcopytest", "dbcopytest");
      assertNull(tableInfo0);
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      
      // Undeclared exception!
      try {
        int int0 = DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 69 LOOKUPSWITCH L772 Case -3 - true
   */

  @Test
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try {
        String string0 = DBUtil.bindVariable((PreparedStatement) null, (-3), (-3), (-3), (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 68 LOOKUPSWITCH L772 Case -4 - true
   */

  @Test
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try {
        String string0 = DBUtil.bindVariable((PreparedStatement) null, (-4), (-4), (-4), (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isBinaryType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Z: I22 Branch 187 IF_ICMPEQ L1661 - true
   */

  @Test
  public void test17()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("Null 'columnKey' argument.", "Null 'columnKey' argument.", "Null 'columnKey' argument.", "Null 'columnKey' argument.", 2004, "Null 'columnKey' argument.", 320, 2004, 320, 2004, "Null 'columnKey' argument.", "Null 'columnKey' argument.", 320, 320, "Null 'columnKey' argument.");
      assertNotNull(tableColumnInfo0);
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getRemarks());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.toString());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getSchemaName());
      assertEquals(320, tableColumnInfo0.getColumnSize());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getDefaultValue());
      assertEquals(320, tableColumnInfo0.getOrdinalPosition());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getSimpleName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.isNullable());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getTableName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getColumnName());
      assertEquals(2004, tableColumnInfo0.getDecimalDigits());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getCatalogName());
      assertEquals(320, tableColumnInfo0.getRadix());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getQualifiedName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getTypeName());
      assertEquals(2004, tableColumnInfo0.getDataType());
      assertEquals(320, tableColumnInfo0.getOctetLength());
      assertEquals(2004, tableColumnInfo0.isNullAllowed());
      
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getRemarks());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.toString());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getSchemaName());
      assertEquals(320, tableColumnInfo0.getColumnSize());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getDefaultValue());
      assertEquals(320, tableColumnInfo0.getOrdinalPosition());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getSimpleName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.isNullable());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getTableName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getColumnName());
      assertEquals(2004, tableColumnInfo0.getDecimalDigits());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getCatalogName());
      assertEquals(320, tableColumnInfo0.getRadix());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getQualifiedName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getTypeName());
      assertEquals(2004, tableColumnInfo0.getDataType());
      assertEquals(320, tableColumnInfo0.getOctetLength());
      assertEquals(2004, tableColumnInfo0.isNullAllowed());
      assertTrue(boolean0);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 66 LOOKUPSWITCH L772 Case -6 - true
   */

  @Test
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try {
        String string0 = DBUtil.bindVariable((PreparedStatement) null, (-6), (-6), 9009, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 82 LOOKUPSWITCH L772 Case 16 - true
   */

  @Test
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try {
        String string0 = DBUtil.bindVariable((PreparedStatement) null, 16, 16, 9022, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getSelectQuery(Lnet/sourceforge/squirrel_sql/plugins/dbcopy/SessionInfoProvider;Ljava/lang/String;Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test20()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertNotNull(dBCopyPlugin0);
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      
      // Undeclared exception!
      try {
        String string0 = DBUtil.getSelectQuery((SessionInfoProvider) dBCopyPlugin0, "`", (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isBinaryType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Z: I16 Branch 186 IF_ICMPEQ L1661 - true
   */

  @Test
  public void test21()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("E7K!Mn3[|HF", "E7K!Mn3[|HF", "E7K!Mn3[|HF", "E7K!Mn3[|HF", (-2), "E7K!Mn3[|HF", (-2), 1321, (-2), 1321, "E7K!Mn3[|HF", "E7K!Mn3[|HF", (-2), (-2), "E7K!Mn3[|HF");
      assertNotNull(tableColumnInfo0);
      assertEquals("E7K!Mn3[|HF", tableColumnInfo0.isNullable());
      assertEquals(-2, tableColumnInfo0.getOctetLength());
      assertEquals("E7K!Mn3[|HF", tableColumnInfo0.getTableName());
      assertEquals(-2, tableColumnInfo0.getDataType());
      assertEquals(-2, tableColumnInfo0.getColumnSize());
      assertEquals(1321, tableColumnInfo0.getDecimalDigits());
      assertEquals(1321, tableColumnInfo0.isNullAllowed());
      assertEquals("E7K!Mn3[|HF", tableColumnInfo0.toString());
      assertEquals("E7K!Mn3[|HF", tableColumnInfo0.getSchemaName());
      assertEquals(-2, tableColumnInfo0.getRadix());
      assertEquals(-2, tableColumnInfo0.getOrdinalPosition());
      assertEquals("E7K!Mn3[|HF", tableColumnInfo0.getColumnName());
      assertEquals("E7K!Mn3[|HF", tableColumnInfo0.getRemarks());
      assertEquals("E7K!Mn3[|HF", tableColumnInfo0.getQualifiedName());
      assertEquals("E7K!Mn3[|HF", tableColumnInfo0.getDefaultValue());
      assertEquals("E7K!Mn3[|HF", tableColumnInfo0.getSimpleName());
      assertEquals("E7K!Mn3[|HF", tableColumnInfo0.getTypeName());
      assertEquals("E7K!Mn3[|HF", tableColumnInfo0.getCatalogName());
      
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertEquals("E7K!Mn3[|HF", tableColumnInfo0.isNullable());
      assertEquals(-2, tableColumnInfo0.getOctetLength());
      assertEquals("E7K!Mn3[|HF", tableColumnInfo0.getTableName());
      assertEquals(-2, tableColumnInfo0.getDataType());
      assertEquals(-2, tableColumnInfo0.getColumnSize());
      assertEquals(1321, tableColumnInfo0.getDecimalDigits());
      assertEquals(1321, tableColumnInfo0.isNullAllowed());
      assertEquals("E7K!Mn3[|HF", tableColumnInfo0.toString());
      assertEquals("E7K!Mn3[|HF", tableColumnInfo0.getSchemaName());
      assertEquals(-2, tableColumnInfo0.getRadix());
      assertEquals(-2, tableColumnInfo0.getOrdinalPosition());
      assertEquals("E7K!Mn3[|HF", tableColumnInfo0.getColumnName());
      assertEquals("E7K!Mn3[|HF", tableColumnInfo0.getRemarks());
      assertEquals("E7K!Mn3[|HF", tableColumnInfo0.getQualifiedName());
      assertEquals("E7K!Mn3[|HF", tableColumnInfo0.getDefaultValue());
      assertEquals("E7K!Mn3[|HF", tableColumnInfo0.getSimpleName());
      assertEquals("E7K!Mn3[|HF", tableColumnInfo0.getTypeName());
      assertEquals("E7K!Mn3[|HF", tableColumnInfo0.getCatalogName());
      assertTrue(boolean0);
  }

  //Test case number: 22
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.convertObjectArrayToTableList([Lnet/sourceforge/squirrel_sql/fw/sql/IDatabaseObjectInfo;)Ljava/util/List;: I17 Branch 221 IF_ICMPGE L2040 - true
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.convertObjectArrayToTableList([Lnet/sourceforge/squirrel_sql/fw/sql/IDatabaseObjectInfo;)Ljava/util/List;: I17 Branch 221 IF_ICMPGE L2040 - false
   */

  @Test
  public void test22()  throws Throwable  {
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[1];
      List<ITableInfo> list0 = DBUtil.convertObjectArrayToTableList((IDatabaseObjectInfo[]) tableColumnInfoArray0);
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnCount(Lnet/sourceforge/squirrel_sql/fw/sql/ISQLConnection;Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;)I: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertNotNull(dBCopyPlugin0);
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      
      TableInfo tableInfo0 = dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "3=>)&u?t%", "3=>)&u?t%");
      assertNull(tableInfo0);
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      
      // Undeclared exception!
      try {
        int int0 = DBUtil.getColumnCount((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getQualifiedObjectName(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String;: I19 Branch 190 IF_ICMPNE L1692 - false
   */

  @Test
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try {
        int int0 = DBUtil.getTableCount((ISession) null, "ge", "ge", "ge", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 65 LOOKUPSWITCH L772 Case -7 - true
   */

  @Test
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try {
        String string0 = DBUtil.bindVariable((PreparedStatement) null, (-7), (-7), 9014, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 89 LOOKUPSWITCH L772 Case 2001 - true
   */

  @Test
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try {
        String string0 = DBUtil.bindVariable((PreparedStatement) null, 2001, 2001, 9001, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.convertObjectToTableList(Ljava/util/List;)Ljava/util/List;: I17 Branch 220 IFEQ L2031 - false
   */

  @Test
  public void test27()  throws Throwable  {
      ArrayList<IDatabaseObjectInfo> arrayList0 = new ArrayList<IDatabaseObjectInfo>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("         /ssignng to ^otx(;)%n", "         /ssignng to ^otx(;)%n", "         /ssignng to ^otx(;)%n");
      assertNotNull(databaseObjectInfo0);
      assertEquals("         /ssignng to ^otx(;)%n", databaseObjectInfo0.getCatalogName());
      assertEquals("         /ssignng to ^otx(;)%n", databaseObjectInfo0.getSimpleName());
      assertEquals("         /ssignng to ^otx(;)%n", databaseObjectInfo0.getQualifiedName());
      assertEquals("         /ssignng to ^otx(;)%n", databaseObjectInfo0.toString());
      assertEquals("         /ssignng to ^otx(;)%n", databaseObjectInfo0.getSchemaName());
      
      boolean boolean0 = arrayList0.add((IDatabaseObjectInfo) databaseObjectInfo0);
      assertEquals("         /ssignng to ^otx(;)%n", databaseObjectInfo0.getCatalogName());
      assertEquals("         /ssignng to ^otx(;)%n", databaseObjectInfo0.getSimpleName());
      assertEquals("         /ssignng to ^otx(;)%n", databaseObjectInfo0.getQualifiedName());
      assertEquals("         /ssignng to ^otx(;)%n", databaseObjectInfo0.toString());
      assertEquals("         /ssignng to ^otx(;)%n", databaseObjectInfo0.getSchemaName());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try {
        List<ITableInfo> list0 = DBUtil.convertObjectToTableList((List<IDatabaseObjectInfo>) arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo cannot be cast to net.sourceforge.squirrel_sql.fw.sql.ITableInfo
         //
      }
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.fixCase(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;)Ljava/lang/String;: I13 Branch 204 IFLE L1768 - true
   */

  @Test
  public void test28()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertNotNull(dBCopyPlugin0);
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      
      ISession iSession0 = dBCopyPlugin0.getSourceSession();
      assertNull(iSession0);
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      
      // Undeclared exception!
      try {
        String string0 = DBUtil.fixCase((ISession) null, "FHuhEGy a'l");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 29
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I77 Branch 55 IF_ICMPNE L638 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I83 Branch 56 IF_ICMPNE L638 - true
   */

  @Test
  public void test29()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent((-7), (-7));
      assertTrue(boolean0);
  }

  //Test case number: 30
  /*
   * 4 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnList([Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Ljava/lang/String;: I17 Branch 180 IF_ICMPGE L1492 - true
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnList([Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Ljava/lang/String;: I17 Branch 180 IF_ICMPGE L1492 - false
   * Goal 3. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnList([Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Ljava/lang/String;: I45 Branch 181 IF_ICMPGE L1497 - true
   * Goal 4. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnList([Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Ljava/lang/String;: I45 Branch 181 IF_ICMPGE L1497 - false
   */

  @Test
  public void test30()  throws Throwable  {
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[3];
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("Fn;)i^~Yy?B", "Fn;)i^~Yy?B", "Fn;)i^~Yy?B", "Fn;)i^~Yy?B", 0, "Fn;)i^~Yy?B", 0, 0, 0, 0, "Fn;)i^~Yy?B", "Fn;)i^~Yy?B", 0, 0, "Fn;)i^~Yy?B");
      assertNotNull(tableColumnInfo0);
      assertEquals("Fn;)i^~Yy?B", tableColumnInfo0.getTableName());
      assertEquals("Fn;)i^~Yy?B", tableColumnInfo0.getSimpleName());
      assertEquals("Fn;)i^~Yy?B", tableColumnInfo0.isNullable());
      assertEquals(0, tableColumnInfo0.getOctetLength());
      assertEquals(0, tableColumnInfo0.getOrdinalPosition());
      assertEquals(0, tableColumnInfo0.getRadix());
      assertEquals(0, tableColumnInfo0.isNullAllowed());
      assertEquals(0, tableColumnInfo0.getDataType());
      assertEquals("Fn;)i^~Yy?B", tableColumnInfo0.getDefaultValue());
      assertEquals("Fn;)i^~Yy?B", tableColumnInfo0.getQualifiedName());
      assertEquals("Fn;)i^~Yy?B", tableColumnInfo0.getTypeName());
      assertEquals("Fn;)i^~Yy?B", tableColumnInfo0.getColumnName());
      assertEquals("Fn;)i^~Yy?B", tableColumnInfo0.getCatalogName());
      assertEquals("Fn;)i^~Yy?B", tableColumnInfo0.getRemarks());
      assertEquals("Fn;)i^~Yy?B", tableColumnInfo0.getSchemaName());
      assertEquals(0, tableColumnInfo0.getColumnSize());
      assertEquals("Fn;)i^~Yy?B", tableColumnInfo0.toString());
      assertEquals(0, tableColumnInfo0.getDecimalDigits());
      
      tableColumnInfoArray0[0] = tableColumnInfo0;
      tableColumnInfoArray0[1] = tableColumnInfo0;
      tableColumnInfoArray0[2] = tableColumnInfo0;
      String string0 = DBUtil.getColumnList(tableColumnInfoArray0);
      assertNotNull(string0);
      assertEquals("Fn;)i^~Yy?B, Fn;)i^~Yy?B, Fn;)i^~Yy?B", string0);
  }

  //Test case number: 31
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.validateColumnNames(Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;Lnet/sourceforge/squirrel_sql/plugins/dbcopy/SessionInfoProvider;)V: I6 Branch 211 IFNONNULL L1864 - false
   */

  @Test
  public void test31()  throws Throwable  {
      DBUtil.validateColumnNames((ITableInfo) null, (SessionInfoProvider) null);
  }

  //Test case number: 32
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isBinaryType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Z: I28 Branch 188 IF_ICMPEQ L1661 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isBinaryType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Z: I34 Branch 189 IF_ICMPNE L1661 - true
   */

  @Test
  public void test32()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("hw{^w./jr[", "hw{^w./jr[", "hw{^w./jr[", "hw{^w./jr[", 1920, "hw{^w./jr[", 1920, 1920, 1920, 1920, "hw{^w./jr[", "hw{^w./jr[", 1920, 1920, "hw{^w./jr[");
      assertNotNull(tableColumnInfo0);
      assertEquals("hw{^w./jr[", tableColumnInfo0.getTypeName());
      assertEquals("hw{^w./jr[", tableColumnInfo0.getQualifiedName());
      assertEquals(1920, tableColumnInfo0.getDecimalDigits());
      assertEquals("hw{^w./jr[", tableColumnInfo0.getRemarks());
      assertEquals("hw{^w./jr[", tableColumnInfo0.toString());
      assertEquals("hw{^w./jr[", tableColumnInfo0.getSimpleName());
      assertEquals("hw{^w./jr[", tableColumnInfo0.isNullable());
      assertEquals(1920, tableColumnInfo0.getOctetLength());
      assertEquals(1920, tableColumnInfo0.getRadix());
      assertEquals("hw{^w./jr[", tableColumnInfo0.getCatalogName());
      assertEquals("hw{^w./jr[", tableColumnInfo0.getSchemaName());
      assertEquals("hw{^w./jr[", tableColumnInfo0.getDefaultValue());
      assertEquals("hw{^w./jr[", tableColumnInfo0.getColumnName());
      assertEquals(1920, tableColumnInfo0.isNullAllowed());
      assertEquals("hw{^w./jr[", tableColumnInfo0.getTableName());
      assertEquals(1920, tableColumnInfo0.getDataType());
      assertEquals(1920, tableColumnInfo0.getOrdinalPosition());
      assertEquals(1920, tableColumnInfo0.getColumnSize());
      
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertEquals("hw{^w./jr[", tableColumnInfo0.getTypeName());
      assertEquals("hw{^w./jr[", tableColumnInfo0.getQualifiedName());
      assertEquals(1920, tableColumnInfo0.getDecimalDigits());
      assertEquals("hw{^w./jr[", tableColumnInfo0.getRemarks());
      assertEquals("hw{^w./jr[", tableColumnInfo0.toString());
      assertEquals("hw{^w./jr[", tableColumnInfo0.getSimpleName());
      assertEquals("hw{^w./jr[", tableColumnInfo0.isNullable());
      assertEquals(1920, tableColumnInfo0.getOctetLength());
      assertEquals(1920, tableColumnInfo0.getRadix());
      assertEquals("hw{^w./jr[", tableColumnInfo0.getCatalogName());
      assertEquals("hw{^w./jr[", tableColumnInfo0.getSchemaName());
      assertEquals("hw{^w./jr[", tableColumnInfo0.getDefaultValue());
      assertEquals("hw{^w./jr[", tableColumnInfo0.getColumnName());
      assertEquals(1920, tableColumnInfo0.isNullAllowed());
      assertEquals("hw{^w./jr[", tableColumnInfo0.getTableName());
      assertEquals(1920, tableColumnInfo0.getDataType());
      assertEquals(1920, tableColumnInfo0.getOrdinalPosition());
      assertEquals(1920, tableColumnInfo0.getColumnSize());
      assertFalse(boolean0);
  }

  //Test case number: 33
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 86 LOOKUPSWITCH L772 Case 93 - true
   */

  @Test
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try {
        String string0 = DBUtil.bindVariable((PreparedStatement) null, 93, 93, 8989, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 34
  /*
   * 3 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isBinaryType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Z: I16 Branch 186 IF_ICMPEQ L1661 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isBinaryType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Z: I22 Branch 187 IF_ICMPEQ L1661 - false
   * Goal 3. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isBinaryType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Z: I28 Branch 188 IF_ICMPEQ L1661 - true
   */

  @Test
  public void test34()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("g", "g", "g", "g", (-4), "g", (-4), (-4), (-1301), (-4), "g", "g", (-1301), (-4), "g");
      assertNotNull(tableColumnInfo0);
      assertEquals("g", tableColumnInfo0.getTypeName());
      assertEquals(-1301, tableColumnInfo0.getRadix());
      assertEquals(-4, tableColumnInfo0.getDecimalDigits());
      assertEquals("g", tableColumnInfo0.isNullable());
      assertEquals("g", tableColumnInfo0.getSimpleName());
      assertEquals("g", tableColumnInfo0.getRemarks());
      assertEquals("g", tableColumnInfo0.getTableName());
      assertEquals(-4, tableColumnInfo0.getDataType());
      assertEquals(-1301, tableColumnInfo0.getOctetLength());
      assertEquals(-4, tableColumnInfo0.getColumnSize());
      assertEquals("g", tableColumnInfo0.getQualifiedName());
      assertEquals(-4, tableColumnInfo0.getOrdinalPosition());
      assertEquals("g", tableColumnInfo0.getSchemaName());
      assertEquals("g", tableColumnInfo0.getCatalogName());
      assertEquals(-4, tableColumnInfo0.isNullAllowed());
      assertEquals("g", tableColumnInfo0.getDefaultValue());
      assertEquals("g", tableColumnInfo0.getColumnName());
      assertEquals("g", tableColumnInfo0.toString());
      
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertEquals("g", tableColumnInfo0.getTypeName());
      assertEquals(-1301, tableColumnInfo0.getRadix());
      assertEquals(-4, tableColumnInfo0.getDecimalDigits());
      assertEquals("g", tableColumnInfo0.isNullable());
      assertEquals("g", tableColumnInfo0.getSimpleName());
      assertEquals("g", tableColumnInfo0.getRemarks());
      assertEquals("g", tableColumnInfo0.getTableName());
      assertEquals(-4, tableColumnInfo0.getDataType());
      assertEquals(-1301, tableColumnInfo0.getOctetLength());
      assertEquals(-4, tableColumnInfo0.getColumnSize());
      assertEquals("g", tableColumnInfo0.getQualifiedName());
      assertEquals(-4, tableColumnInfo0.getOrdinalPosition());
      assertEquals("g", tableColumnInfo0.getSchemaName());
      assertEquals("g", tableColumnInfo0.getCatalogName());
      assertEquals(-4, tableColumnInfo0.isNullAllowed());
      assertEquals("g", tableColumnInfo0.getDefaultValue());
      assertEquals("g", tableColumnInfo0.getColumnName());
      assertEquals("g", tableColumnInfo0.toString());
      assertTrue(boolean0);
  }

  //Test case number: 35
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 70 LOOKUPSWITCH L772 Case -2 - true
   */

  @Test
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try {
        String string0 = DBUtil.bindVariable((PreparedStatement) null, (-2), (-2), (-2), (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 36
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 76 LOOKUPSWITCH L772 Case 4 - true
   */

  @Test
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try {
        String string0 = DBUtil.bindVariable((PreparedStatement) null, 4, 4, 9009, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 37
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnName(Lnet/sourceforge/squirrel_sql/fw/sql/ISQLConnection;Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;I)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test37()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertNotNull(dBCopyPlugin0);
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      
      TableInfo tableInfo0 = dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "z&V$(R_G", "z&V$(R_G");
      assertNull(tableInfo0);
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      
      // Undeclared exception!
      try {
        String string0 = DBUtil.getColumnName((ISQLConnection) null, (ITableInfo) null, 435);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 38
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 78 LOOKUPSWITCH L772 Case 6 - true
   */

  @Test
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try {
        String string0 = DBUtil.bindVariable((PreparedStatement) null, 6, 6, 6, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 39
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 73 LOOKUPSWITCH L772 Case 1 - true
   */

  @Test
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try {
        String string0 = DBUtil.bindVariable((PreparedStatement) null, 1, 1, 9009, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 40
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getInsertSQL(Lnet/sourceforge/squirrel_sql/plugins/dbcopy/SessionInfoProvider;Ljava/lang/String;Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;I)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test40()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertNotNull(dBCopyPlugin0);
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      
      // Undeclared exception!
      try {
        String string0 = DBUtil.getInsertSQL((SessionInfoProvider) dBCopyPlugin0, (String) null, (ITableInfo) null, (-1703));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 41
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 74 LOOKUPSWITCH L772 Case 2 - true
   */

  @Test
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try {
        String string0 = DBUtil.bindVariable((PreparedStatement) null, 2, 2, 2, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 42
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getLastStatementValues()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test42()  throws Throwable  {
      String string0 = DBUtil.getLastStatementValues();
      assertNull(string0);
  }

  //Test case number: 43
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 72 LOOKUPSWITCH L772 Case 0 - true
   */

  @Test
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try {
        String string0 = DBUtil.bindVariable((PreparedStatement) null, 0, 0, 5, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 44
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getSchemaNameFromDbObject(Lnet/sourceforge/squirrel_sql/fw/sql/IDatabaseObjectInfo;)Ljava/lang/String;: I9 Branch 223 IFEQ L2060 - true
   */

  @Test
  public void test44()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("usage: java edu.stanford.nlp.process.PTBEscapingProcessor fileOrUrl", "usage: java edu.stanford.nlp.process.PTBEscapingProcessor fileOrUrl", "usage: java edu.stanford.nlp.process.PTBEscapingProcessor fileOrUrl", "usage: java edu.stanford.nlp.process.PTBEscapingProcessor fileOrUrl", 0, "usage: java edu.stanford.nlp.process.PTBEscapingProcessor fileOrUrl", 0, 0, 0, 0, "usage: java edu.stanford.nlp.process.PTBEscapingProcessor fileOrUrl", "usage: java edu.stanford.nlp.process.PTBEscapingProcessor fileOrUrl", 0, 0, "usage: java edu.stanford.nlp.process.PTBEscapingProcessor fileOrUrl");
      assertNotNull(tableColumnInfo0);
      assertEquals("usage: java edu.stanford.nlp.process.PTBEscapingProcessor fileOrUrl", tableColumnInfo0.getTableName());
      assertEquals("usage: java edu.stanford.nlp.process.PTBEscapingProcessor fileOrUrl", tableColumnInfo0.getSimpleName());
      assertEquals(0, tableColumnInfo0.getRadix());
      assertEquals(0, tableColumnInfo0.getDataType());
      assertEquals(0, tableColumnInfo0.getOctetLength());
      assertEquals("usage: java edu.stanford.nlp.process.PTBEscapingProcessor fileOrUrl", tableColumnInfo0.toString());
      assertEquals("usage: java edu.stanford.nlp.process.PTBEscapingProcessor fileOrUrl", tableColumnInfo0.getRemarks());
      assertEquals("usage: java edu.stanford.nlp.process.PTBEscapingProcessor fileOrUrl", tableColumnInfo0.getQualifiedName());
      assertEquals(0, tableColumnInfo0.getDecimalDigits());
      assertEquals("usage: java edu.stanford.nlp.process.PTBEscapingProcessor fileOrUrl", tableColumnInfo0.getDefaultValue());
      assertEquals("usage: java edu.stanford.nlp.process.PTBEscapingProcessor fileOrUrl", tableColumnInfo0.getTypeName());
      assertEquals("usage: java edu.stanford.nlp.process.PTBEscapingProcessor fileOrUrl", tableColumnInfo0.getCatalogName());
      assertEquals(0, tableColumnInfo0.getColumnSize());
      assertEquals(0, tableColumnInfo0.getOrdinalPosition());
      assertEquals("usage: java edu.stanford.nlp.process.PTBEscapingProcessor fileOrUrl", tableColumnInfo0.getSchemaName());
      assertEquals(0, tableColumnInfo0.isNullAllowed());
      assertEquals("usage: java edu.stanford.nlp.process.PTBEscapingProcessor fileOrUrl", tableColumnInfo0.getColumnName());
      assertEquals("usage: java edu.stanford.nlp.process.PTBEscapingProcessor fileOrUrl", tableColumnInfo0.isNullable());
      
      String string0 = DBUtil.getSchemaNameFromDbObject((IDatabaseObjectInfo) tableColumnInfo0);
      assertNotNull(string0);
      assertEquals("usage: java edu.stanford.nlp.process.PTBEscapingProcessor fileOrUrl", tableColumnInfo0.getTableName());
      assertEquals("usage: java edu.stanford.nlp.process.PTBEscapingProcessor fileOrUrl", tableColumnInfo0.getSimpleName());
      assertEquals(0, tableColumnInfo0.getRadix());
      assertEquals(0, tableColumnInfo0.getDataType());
      assertEquals(0, tableColumnInfo0.getOctetLength());
      assertEquals("usage: java edu.stanford.nlp.process.PTBEscapingProcessor fileOrUrl", tableColumnInfo0.toString());
      assertEquals("usage: java edu.stanford.nlp.process.PTBEscapingProcessor fileOrUrl", tableColumnInfo0.getRemarks());
      assertEquals("usage: java edu.stanford.nlp.process.PTBEscapingProcessor fileOrUrl", tableColumnInfo0.getQualifiedName());
      assertEquals(0, tableColumnInfo0.getDecimalDigits());
      assertEquals("usage: java edu.stanford.nlp.process.PTBEscapingProcessor fileOrUrl", tableColumnInfo0.getDefaultValue());
      assertEquals("usage: java edu.stanford.nlp.process.PTBEscapingProcessor fileOrUrl", tableColumnInfo0.getTypeName());
      assertEquals("usage: java edu.stanford.nlp.process.PTBEscapingProcessor fileOrUrl", tableColumnInfo0.getCatalogName());
      assertEquals(0, tableColumnInfo0.getColumnSize());
      assertEquals(0, tableColumnInfo0.getOrdinalPosition());
      assertEquals("usage: java edu.stanford.nlp.process.PTBEscapingProcessor fileOrUrl", tableColumnInfo0.getSchemaName());
      assertEquals(0, tableColumnInfo0.isNullAllowed());
      assertEquals("usage: java edu.stanford.nlp.process.PTBEscapingProcessor fileOrUrl", tableColumnInfo0.getColumnName());
      assertEquals("usage: java edu.stanford.nlp.process.PTBEscapingProcessor fileOrUrl", tableColumnInfo0.isNullable());
      assertEquals("usage: java edu.stanford.nlp.process.PTBEscapingProcessor fileOrUrl", string0);
  }

  //Test case number: 45
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 67 LOOKUPSWITCH L772 Case -5 - true
   */

  @Test
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try {
        String string0 = DBUtil.bindVariable((PreparedStatement) null, (-5), (-5), 2203, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 46
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.fixCase(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;)Ljava/lang/String;: I6 Branch 203 IFNULL L1768 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.fixCase(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;)Ljava/lang/String;: I13 Branch 204 IFLE L1768 - false
   */

  @Test
  public void test46()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertNotNull(dBCopyPlugin0);
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      
      ISession iSession0 = dBCopyPlugin0.getSourceSession();
      assertNull(iSession0);
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      
      String string0 = DBUtil.fixCase((ISession) null, "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  //Test case number: 47
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.setLastStatementValues(Ljava/lang/String;)V: root-Branch
   */

  @Test
  public void test47()  throws Throwable  {
      DBUtil.setLastStatementValues("Length function is null for dialect=");
  }

  //Test case number: 48
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 80 LOOKUPSWITCH L772 Case 8 - true
   */

  @Test
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try {
        String string0 = DBUtil.bindVariable((PreparedStatement) null, 8, 8, 9019, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 49
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I23 Branch 49 IF_ICMPNE L626 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I29 Branch 50 IF_ICMPNE L626 - true
   */

  @Test
  public void test49()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent(3, 3);
      assertTrue(boolean0);
  }

  //Test case number: 50
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 79 LOOKUPSWITCH L772 Case 7 - true
   */

  @Test
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try {
        String string0 = DBUtil.bindVariable((PreparedStatement) null, 7, 7, 8995, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 51
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getLastStatement()Ljava/lang/String;: root-Branch
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.convertTableToObjectList(Ljava/util/List;)Ljava/util/List;: I17 Branch 222 IFEQ L2050 - true
   */

  @Test
  public void test51()  throws Throwable  {
      LinkedList<ITableInfo> linkedList0 = new LinkedList<ITableInfo>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<IDatabaseObjectInfo> list0 = DBUtil.convertTableToObjectList((List<ITableInfo>) linkedList0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, linkedList0.size());
      
      String string0 = DBUtil.getLastStatement();
      assertNull(string0);
  }

  //Test case number: 52
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 75 LOOKUPSWITCH L772 Case 3 - true
   */

  @Test
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try {
        String string0 = DBUtil.bindVariable((PreparedStatement) null, 3, 3, 9022, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 53
  /*
   * 3 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getTableCount(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)I: root-Branch
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.<init>()V: root-Branch
   * Goal 3. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getQualifiedObjectName(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String;: I19 Branch 190 IF_ICMPNE L1692 - true
   */

  @Test
  public void test53()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertNotNull(dBCopyPlugin0);
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      
      DBUtil dBUtil0 = new DBUtil();
      assertNotNull(dBUtil0);
      assertNull(dBUtil0.getLastStatementValues());
      assertNull(dBUtil0.getLastStatement());
      
      ISession iSession0 = dBCopyPlugin0.getDestSession();
      assertNull(iSession0);
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      
      // Undeclared exception!
      try {
        int int0 = DBUtil.getTableCount((ISession) null, "fet", "fet", "fet", (-950));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 54
  /*
   * 3 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I11 Branch 48 IF_ICMPNE L622 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I59 Branch 53 IF_ICMPNE L634 - false
   * Goal 3. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I65 Branch 54 IF_ICMPNE L634 - true
   */

  @Test
  public void test54()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent(16, 16);
      assertTrue(boolean0);
  }

  //Test case number: 55
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 95 LOOKUPSWITCH L772 Default-Case - true
   */

  @Test
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try {
        String string0 = DBUtil.bindVariable((PreparedStatement) null, 327, 327, 327, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 56
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 71 LOOKUPSWITCH L772 Case -1 - true
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 91 LOOKUPSWITCH L772 Case 2003 - false
   */

  @Test
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try {
        String string0 = DBUtil.bindVariable((PreparedStatement) null, (-1), (-1), 2203, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 57
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getCatSep(Lnet/sourceforge/squirrel_sql/client/session/ISession;)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test57()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertNotNull(dBCopyPlugin0);
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      
      ISession iSession0 = dBCopyPlugin0.getSourceSession();
      assertNull(iSession0);
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      
      // Undeclared exception!
      try {
        String string0 = DBUtil.getCatSep((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 58
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isKeyword(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;)Z: root-Branch
   */

  @Test
  public void test58()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertNotNull(dBCopyPlugin0);
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      
      ISession iSession0 = dBCopyPlugin0.getDestSession();
      assertNull(iSession0);
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      
      // Undeclared exception!
      try {
        DBUtil.checkKeyword((ISession) null, "(", "(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 59
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.replaceDistinctDataType(ILnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;Lnet/sourceforge/squirrel_sql/client/session/ISession;)I: I7 Branch 60 IF_ICMPNE L721 - true
   */

  @Test
  public void test59()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("Null 'columnKey' argument.", "Null 'columnKey' argument.", "Null 'columnKey' argument.", "Null 'columnKey' argument.", 312, "Null 'columnKey' argument.", 312, 312, 312, 312, "Null 'columnKey' argument.", "Null 'columnKey' argument.", 312, 312, "Null 'columnKey' argument.");
      assertNotNull(tableColumnInfo0);
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getColumnName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getSimpleName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getCatalogName());
      assertEquals(312, tableColumnInfo0.getDecimalDigits());
      assertEquals(312, tableColumnInfo0.getOctetLength());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getDefaultValue());
      assertEquals(312, tableColumnInfo0.getRadix());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getSchemaName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.isNullable());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getRemarks());
      assertEquals(312, tableColumnInfo0.getOrdinalPosition());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getQualifiedName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getTypeName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.toString());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getTableName());
      assertEquals(312, tableColumnInfo0.getDataType());
      assertEquals(312, tableColumnInfo0.getColumnSize());
      assertEquals(312, tableColumnInfo0.isNullAllowed());
      
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertNotNull(dBCopyPlugin0);
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      
      ISession iSession0 = dBCopyPlugin0.getDestSession();
      assertNull(iSession0);
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      
      int int0 = DBUtil.replaceDistinctDataType(312, tableColumnInfo0, (ISession) null);
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getColumnName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getSimpleName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getCatalogName());
      assertEquals(312, tableColumnInfo0.getDecimalDigits());
      assertEquals(312, tableColumnInfo0.getOctetLength());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getDefaultValue());
      assertEquals(312, tableColumnInfo0.getRadix());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getSchemaName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.isNullable());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getRemarks());
      assertEquals(312, tableColumnInfo0.getOrdinalPosition());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getQualifiedName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getTypeName());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.toString());
      assertEquals("Null 'columnKey' argument.", tableColumnInfo0.getTableName());
      assertEquals(312, tableColumnInfo0.getDataType());
      assertEquals(312, tableColumnInfo0.getColumnSize());
      assertEquals(312, tableColumnInfo0.isNullAllowed());
      assertEquals(312, int0);
  }

  //Test case number: 60
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getTables(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;: I53 Branch 46 IFNULL L575 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getTables(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;: I59 Branch 47 IFNE L575 - false
   */

  @Test
  public void test60()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertNotNull(dBCopyPlugin0);
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      
      ISession iSession0 = dBCopyPlugin0.getDestSession();
      assertNull(iSession0);
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      
      // Undeclared exception!
      try {
        ITableInfo[] iTableInfoArray0 = DBUtil.getTables((ISession) null, "Null 'columnKey' argument.", "Null 'columnKey' argument.", "Null 'columnKey' argument.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 61
  /*
   * 31 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 65 LOOKUPSWITCH L772 Case -7 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 66 LOOKUPSWITCH L772 Case -6 - false
   * Goal 3. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 67 LOOKUPSWITCH L772 Case -5 - false
   * Goal 4. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 68 LOOKUPSWITCH L772 Case -4 - false
   * Goal 5. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 69 LOOKUPSWITCH L772 Case -3 - false
   * Goal 6. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 70 LOOKUPSWITCH L772 Case -2 - false
   * Goal 7. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 71 LOOKUPSWITCH L772 Case -1 - false
   * Goal 8. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 72 LOOKUPSWITCH L772 Case 0 - false
   * Goal 9. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 73 LOOKUPSWITCH L772 Case 1 - false
   * Goal 10. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 74 LOOKUPSWITCH L772 Case 2 - false
   * Goal 11. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 75 LOOKUPSWITCH L772 Case 3 - false
   * Goal 12. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 76 LOOKUPSWITCH L772 Case 4 - false
   * Goal 13. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 77 LOOKUPSWITCH L772 Case 5 - false
   * Goal 14. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 78 LOOKUPSWITCH L772 Case 6 - false
   * Goal 15. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 79 LOOKUPSWITCH L772 Case 7 - false
   * Goal 16. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 80 LOOKUPSWITCH L772 Case 8 - false
   * Goal 17. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 81 LOOKUPSWITCH L772 Case 12 - false
   * Goal 18. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 82 LOOKUPSWITCH L772 Case 16 - false
   * Goal 19. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 83 LOOKUPSWITCH L772 Case 70 - false
   * Goal 20. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 84 LOOKUPSWITCH L772 Case 91 - false
   * Goal 21. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 85 LOOKUPSWITCH L772 Case 92 - false
   * Goal 22. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 86 LOOKUPSWITCH L772 Case 93 - false
   * Goal 23. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 87 LOOKUPSWITCH L772 Case 1111 - false
   * Goal 24. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 88 LOOKUPSWITCH L772 Case 2000 - false
   * Goal 25. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 89 LOOKUPSWITCH L772 Case 2001 - false
   * Goal 26. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 90 LOOKUPSWITCH L772 Case 2002 - false
   * Goal 27. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 91 LOOKUPSWITCH L772 Case 2003 - true
   * Goal 28. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 92 LOOKUPSWITCH L772 Case 2004 - false
   * Goal 29. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 93 LOOKUPSWITCH L772 Case 2005 - false
   * Goal 30. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 94 LOOKUPSWITCH L772 Case 2006 - false
   * Goal 31. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 95 LOOKUPSWITCH L772 Default-Case - false
   */

  @Test
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try {
        String string0 = DBUtil.bindVariable((PreparedStatement) null, 2003, 2003, 9004, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 62
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.replaceDistinctDataType(ILnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;Lnet/sourceforge/squirrel_sql/client/session/ISession;)I: I7 Branch 60 IF_ICMPNE L721 - false
   */

  @Test
  public void test62()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("0", "0", "0", "0", 2001, "0", 2001, 2001, 2001, 2001, "0", "0", 2001, 2001, "0");
      assertNotNull(tableColumnInfo0);
      assertEquals(2001, tableColumnInfo0.getDataType());
      assertEquals(2001, tableColumnInfo0.getColumnSize());
      assertEquals("0", tableColumnInfo0.getDefaultValue());
      assertEquals("0", tableColumnInfo0.getColumnName());
      assertEquals(2001, tableColumnInfo0.getOctetLength());
      assertEquals("0", tableColumnInfo0.getCatalogName());
      assertEquals(2001, tableColumnInfo0.getDecimalDigits());
      assertEquals("0", tableColumnInfo0.getTypeName());
      assertEquals("0", tableColumnInfo0.getQualifiedName());
      assertEquals("0", tableColumnInfo0.getRemarks());
      assertEquals(2001, tableColumnInfo0.getOrdinalPosition());
      assertEquals("0", tableColumnInfo0.getSimpleName());
      assertEquals(2001, tableColumnInfo0.getRadix());
      assertEquals("0", tableColumnInfo0.getTableName());
      assertEquals(2001, tableColumnInfo0.isNullAllowed());
      assertEquals("0", tableColumnInfo0.isNullable());
      assertEquals("0", tableColumnInfo0.getSchemaName());
      assertEquals("0", tableColumnInfo0.toString());
      
      // Undeclared exception!
      try {
        int int0 = DBUtil.replaceDistinctDataType(2001, tableColumnInfo0, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 63
  /*
   * 5 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I11 Branch 48 IF_ICMPNE L622 - true
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I23 Branch 49 IF_ICMPNE L626 - true
   * Goal 3. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I41 Branch 51 IF_ICMPNE L630 - true
   * Goal 4. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I59 Branch 53 IF_ICMPNE L634 - true
   * Goal 5. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I77 Branch 55 IF_ICMPNE L638 - true
   */

  @Test
  public void test63()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent(326, 16);
      assertFalse(boolean0);
  }
}
