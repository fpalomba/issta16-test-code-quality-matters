/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 16 01:15:33 GMT 2015
 */

package net.sourceforge.squirrel_sql.plugins.dbcopy.util;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.List;
import net.sourceforge.squirrel_sql.client.IApplication;
import net.sourceforge.squirrel_sql.client.session.ISession;
import net.sourceforge.squirrel_sql.client.session.schemainfo.SchemaInfo;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.ISQLConnection;
import net.sourceforge.squirrel_sql.fw.sql.ITableInfo;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import net.sourceforge.squirrel_sql.plugins.dbcopy.DBCopyPlugin;
import net.sourceforge.squirrel_sql.plugins.dbcopy.SessionInfoProvider;
import net.sourceforge.squirrel_sql.plugins.dbcopy.prefs.DBCopyPreferenceBean;
import net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isBinaryType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Z: I34 Branch 189 IF_ICMPNE L1661 - false
   */

  @Test
  public void test00()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("         Assigning to root (0)%n", "         Assigning to root (0)%n", "         Assigning to root (0)%n", "         Assigning to root (0)%n", (-3), "         Assigning to root (0)%n", (-3), (-3), (-3), (-3), "         Assigning to root (0)%n", "         Assigning to root (0)%n", (-3), (-3), "         Assigning to root (0)%n");
      assertEquals(-3, tableColumnInfo0.getDecimalDigits());
      assertEquals(-3, tableColumnInfo0.getDataType());
      assertEquals("         Assigning to root (0)%n", tableColumnInfo0.getSchemaName());
      assertEquals(-3, tableColumnInfo0.getOrdinalPosition());
      assertEquals("         Assigning to root (0)%n", tableColumnInfo0.toString());
      assertEquals(-3, tableColumnInfo0.getColumnSize());
      assertEquals(-3, tableColumnInfo0.isNullAllowed());
      assertEquals(-3, tableColumnInfo0.getRadix());
      assertEquals("         Assigning to root (0)%n", tableColumnInfo0.getColumnName());
      assertEquals("         Assigning to root (0)%n", tableColumnInfo0.getDefaultValue());
      assertEquals("         Assigning to root (0)%n", tableColumnInfo0.getTableName());
      assertEquals("         Assigning to root (0)%n", tableColumnInfo0.getSimpleName());
      assertEquals("         Assigning to root (0)%n", tableColumnInfo0.isNullable());
      assertEquals(-3, tableColumnInfo0.getOctetLength());
      assertEquals("         Assigning to root (0)%n", tableColumnInfo0.getCatalogName());
      assertEquals("         Assigning to root (0)%n", tableColumnInfo0.getTypeName());
      assertEquals("         Assigning to root (0)%n", tableColumnInfo0.getRemarks());
      assertEquals("         Assigning to root (0)%n", tableColumnInfo0.getQualifiedName());
      assertNotNull(tableColumnInfo0);
      
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertTrue(boolean0);
      assertEquals(-3, tableColumnInfo0.getDecimalDigits());
      assertEquals(-3, tableColumnInfo0.getDataType());
      assertEquals("         Assigning to root (0)%n", tableColumnInfo0.getSchemaName());
      assertEquals(-3, tableColumnInfo0.getOrdinalPosition());
      assertEquals("         Assigning to root (0)%n", tableColumnInfo0.toString());
      assertEquals(-3, tableColumnInfo0.getColumnSize());
      assertEquals(-3, tableColumnInfo0.isNullAllowed());
      assertEquals(-3, tableColumnInfo0.getRadix());
      assertEquals("         Assigning to root (0)%n", tableColumnInfo0.getColumnName());
      assertEquals("         Assigning to root (0)%n", tableColumnInfo0.getDefaultValue());
      assertEquals("         Assigning to root (0)%n", tableColumnInfo0.getTableName());
      assertEquals("         Assigning to root (0)%n", tableColumnInfo0.getSimpleName());
      assertEquals("         Assigning to root (0)%n", tableColumnInfo0.isNullable());
      assertEquals(-3, tableColumnInfo0.getOctetLength());
      assertEquals("         Assigning to root (0)%n", tableColumnInfo0.getCatalogName());
      assertEquals("         Assigning to root (0)%n", tableColumnInfo0.getTypeName());
      assertEquals("         Assigning to root (0)%n", tableColumnInfo0.getRemarks());
      assertEquals("         Assigning to root (0)%n", tableColumnInfo0.getQualifiedName());
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnType(Lnet/sourceforge/squirrel_sql/fw/sql/ISQLConnection;Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;I)I: root-Branch
   */

  @Test
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try {
        int int0 = DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, 288);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getSelectQuery(Lnet/sourceforge/squirrel_sql/plugins/dbcopy/SessionInfoProvider;Ljava/lang/String;Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test02()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertNotNull(dBCopyPlugin0);
      
      // Undeclared exception!
      try {
        String string0 = DBUtil.getSelectQuery((SessionInfoProvider) dBCopyPlugin0, "         Assigning to root (0)%n", (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnSql(Lnet/sourceforge/squirrel_sql/plugins/dbcopy/SessionInfoProvider;Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I12 Branch 182 IFEQ L1519 - false
   */

  @Test
  public void test03()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertNotNull(dBCopyPlugin0);
      
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      assertTrue(dBCopyPreferenceBean0.isCheckKeywords());
      assertTrue(dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertFalse(dBCopyPreferenceBean0.isPromptForDialect());
      assertTrue(dBCopyPreferenceBean0.isCopyIndexDefs());
      assertFalse(dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertTrue(dBCopyPreferenceBean0.isUseFileCaching());
      assertNull(dBCopyPreferenceBean0.getClientName());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertNull(dBCopyPreferenceBean0.getClientVersion());
      assertTrue(dBCopyPreferenceBean0.isUseTruncate());
      assertTrue(dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertFalse(dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(0L, dBCopyPreferenceBean0.getTableDelayMillis());
      assertTrue(dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertTrue(dBCopyPreferenceBean0.isCopyData());
      assertFalse(dBCopyPreferenceBean0.isAppendRecordsToExisting());
      assertFalse(dBCopyPreferenceBean0.isWriteScript());
      assertTrue(dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertEquals(0L, dBCopyPreferenceBean0.getRecordDelayMillis());
      assertTrue(dBCopyPreferenceBean0.isTestColumnNames());
      assertNotNull(dBCopyPreferenceBean0);
      
      DBUtil.setPreferences(dBCopyPreferenceBean0);
      assertTrue(dBCopyPreferenceBean0.isCheckKeywords());
      assertTrue(dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertFalse(dBCopyPreferenceBean0.isPromptForDialect());
      assertTrue(dBCopyPreferenceBean0.isCopyIndexDefs());
      assertFalse(dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertTrue(dBCopyPreferenceBean0.isUseFileCaching());
      assertNull(dBCopyPreferenceBean0.getClientName());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertNull(dBCopyPreferenceBean0.getClientVersion());
      assertTrue(dBCopyPreferenceBean0.isUseTruncate());
      assertTrue(dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertFalse(dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(0L, dBCopyPreferenceBean0.getTableDelayMillis());
      assertTrue(dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertTrue(dBCopyPreferenceBean0.isCopyData());
      assertFalse(dBCopyPreferenceBean0.isAppendRecordsToExisting());
      assertFalse(dBCopyPreferenceBean0.isWriteScript());
      assertTrue(dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertEquals(0L, dBCopyPreferenceBean0.getRecordDelayMillis());
      assertTrue(dBCopyPreferenceBean0.isTestColumnNames());
      
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("XHUQ;vYWVd", "XHUQ;vYWVd", "XHUQ;vYWVd", "XHUQ;vYWVd", (-613), "XHUQ;vYWVd", (-613), (-613), (-613), (-613), "XHUQ;vYWVd", "XHUQ;vYWVd", (-613), (-613), "XHUQ;vYWVd");
      assertEquals(-613, tableColumnInfo0.getDataType());
      assertEquals("XHUQ;vYWVd", tableColumnInfo0.getTableName());
      assertEquals("XHUQ;vYWVd", tableColumnInfo0.isNullable());
      assertEquals(-613, tableColumnInfo0.getDecimalDigits());
      assertEquals(-613, tableColumnInfo0.isNullAllowed());
      assertEquals(-613, tableColumnInfo0.getOrdinalPosition());
      assertEquals("XHUQ;vYWVd", tableColumnInfo0.toString());
      assertEquals(-613, tableColumnInfo0.getColumnSize());
      assertEquals("XHUQ;vYWVd", tableColumnInfo0.getSchemaName());
      assertEquals(-613, tableColumnInfo0.getRadix());
      assertEquals("XHUQ;vYWVd", tableColumnInfo0.getColumnName());
      assertEquals("XHUQ;vYWVd", tableColumnInfo0.getDefaultValue());
      assertEquals("XHUQ;vYWVd", tableColumnInfo0.getQualifiedName());
      assertEquals("XHUQ;vYWVd", tableColumnInfo0.getRemarks());
      assertEquals("XHUQ;vYWVd", tableColumnInfo0.getSimpleName());
      assertEquals("XHUQ;vYWVd", tableColumnInfo0.getTypeName());
      assertEquals(-613, tableColumnInfo0.getOctetLength());
      assertEquals("XHUQ;vYWVd", tableColumnInfo0.getCatalogName());
      assertNotNull(tableColumnInfo0);
      
      // Undeclared exception!
      try {
        String string0 = DBUtil.getColumnSql((SessionInfoProvider) dBCopyPlugin0, tableColumnInfo0, "XHUQ;vYWVd", "XHUQ;vYWVd");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getQualifiedObjectName(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String;: I19 Branch 190 IF_ICMPNE L1692 - false
   */

  @Test
  public void test04()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertNotNull(dBCopyPlugin0);
      
      ISession iSession0 = dBCopyPlugin0.getSourceSession();
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertNull(iSession0);
      
      // Undeclared exception!
      try {
        int int0 = DBUtil.getTableCount((ISession) null, "Encountered unexpected exception while attempting to determine if catalogs are used in table definitions", "Encountered unexpected exception while attempting to determine if catalogs are used in table definitions", "Encountered unexpected exception while attempting to determine if catalogs are used in table definitions", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I41 Branch 51 IF_ICMPNE L630 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I47 Branch 52 IF_ICMPNE L630 - true
   */

  @Test
  public void test05()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent(2, 2);
      assertTrue(boolean0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getSchemaFromDbObject(Lnet/sourceforge/squirrel_sql/fw/sql/IDatabaseObjectInfo;Lnet/sourceforge/squirrel_sql/client/session/schemainfo/SchemaInfo;)Lnet/sourceforge/squirrel_sql/fw/sql/IDatabaseObjectInfo;: I9 Branch 224 IFEQ L2073 - true
   */

  @Test
  public void test06()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("DBUtil.error(missingtabl", "DBUtil.error(missingtabl", "DBUtil.error(missingtabl", "DBUtil.error(missingtabl", (-1), "DBUtil.error(missingtabl", (-1), (-1), (-1), (-1), "DBUtil.error(missingtabl", "DBUtil.error(missingtabl", (-1), (-1), "DBUtil.error(missingtabl");
      assertEquals("DBUtil.error(missingtabl", tableColumnInfo0.isNullable());
      assertEquals("DBUtil.error(missingtabl", tableColumnInfo0.getTableName());
      assertEquals(-1, tableColumnInfo0.getDecimalDigits());
      assertEquals(-1, tableColumnInfo0.getDataType());
      assertEquals(-1, tableColumnInfo0.getColumnSize());
      assertEquals("DBUtil.error(missingtabl", tableColumnInfo0.getSimpleName());
      assertEquals("DBUtil.error(missingtabl", tableColumnInfo0.getColumnName());
      assertEquals(-1, tableColumnInfo0.getOctetLength());
      assertEquals(-1, tableColumnInfo0.isNullAllowed());
      assertEquals("DBUtil.error(missingtabl", tableColumnInfo0.toString());
      assertEquals("DBUtil.error(missingtabl", tableColumnInfo0.getSchemaName());
      assertEquals(-1, tableColumnInfo0.getOrdinalPosition());
      assertEquals(-1, tableColumnInfo0.getRadix());
      assertEquals("DBUtil.error(missingtabl", tableColumnInfo0.getDefaultValue());
      assertEquals("DBUtil.error(missingtabl", tableColumnInfo0.getQualifiedName());
      assertEquals("DBUtil.error(missingtabl", tableColumnInfo0.getCatalogName());
      assertEquals("DBUtil.error(missingtabl", tableColumnInfo0.getTypeName());
      assertEquals("DBUtil.error(missingtabl", tableColumnInfo0.getRemarks());
      assertNotNull(tableColumnInfo0);
      
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertNotNull(dBCopyPlugin0);
      
      IApplication iApplication0 = dBCopyPlugin0.getApplication();
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertNull(iApplication0);
      
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      assertFalse(schemaInfo0.isLoaded());
      assertNotNull(schemaInfo0);
      assertEquals(0, schemaInfo0.TABLE_EXT_NOT_A_TABLE);
      assertEquals(2, schemaInfo0.TABLE_EXT_COLS_LOADED_BEFORE);
      assertEquals(1, schemaInfo0.TABLE_EXT_COLS_LOADED_IN_THIS_CALL);
      
      // Undeclared exception!
      try {
        IDatabaseObjectInfo iDatabaseObjectInfo0 = DBUtil.getSchemaFromDbObject((IDatabaseObjectInfo) tableColumnInfo0, schemaInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SQLDatabaseMetaData == null
         //
      }
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getLastStatementValues()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test07()  throws Throwable  {
      String string0 = DBUtil.getLastStatementValues();
      assertNull(string0);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.replaceDistinctDataType(ILnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;Lnet/sourceforge/squirrel_sql/client/session/ISession;)I: I7 Branch 60 IF_ICMPNE L721 - true
   */

  @Test
  public void test08()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("6b|85-@/$m", "6b|85-@/$m", "6b|85-@/$m", "6b|85-@/$m", (-613), "6b|85-@/$m", (-613), (-613), (-613), (-613), "6b|85-@/$m", "6b|85-@/$m", (-613), (-613), "6b|85-@/$m");
      assertEquals("6b|85-@/$m", tableColumnInfo0.getRemarks());
      assertEquals("6b|85-@/$m", tableColumnInfo0.toString());
      assertEquals("6b|85-@/$m", tableColumnInfo0.getQualifiedName());
      assertEquals("6b|85-@/$m", tableColumnInfo0.getTypeName());
      assertEquals(-613, tableColumnInfo0.getColumnSize());
      assertEquals("6b|85-@/$m", tableColumnInfo0.getSchemaName());
      assertEquals("6b|85-@/$m", tableColumnInfo0.getCatalogName());
      assertEquals("6b|85-@/$m", tableColumnInfo0.isNullable());
      assertEquals("6b|85-@/$m", tableColumnInfo0.getColumnName());
      assertEquals("6b|85-@/$m", tableColumnInfo0.getSimpleName());
      assertEquals(-613, tableColumnInfo0.getDecimalDigits());
      assertEquals("6b|85-@/$m", tableColumnInfo0.getDefaultValue());
      assertEquals(-613, tableColumnInfo0.getOctetLength());
      assertEquals(-613, tableColumnInfo0.getRadix());
      assertEquals(-613, tableColumnInfo0.getDataType());
      assertEquals(-613, tableColumnInfo0.isNullAllowed());
      assertEquals(-613, tableColumnInfo0.getOrdinalPosition());
      assertEquals("6b|85-@/$m", tableColumnInfo0.getTableName());
      assertNotNull(tableColumnInfo0);
      
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertNotNull(dBCopyPlugin0);
      
      ISession iSession0 = dBCopyPlugin0.getSourceSession();
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertNull(iSession0);
      
      int int0 = DBUtil.replaceDistinctDataType((-613), tableColumnInfo0, (ISession) null);
      assertEquals((-613), int0);
      assertEquals("6b|85-@/$m", tableColumnInfo0.getRemarks());
      assertEquals("6b|85-@/$m", tableColumnInfo0.toString());
      assertEquals("6b|85-@/$m", tableColumnInfo0.getQualifiedName());
      assertEquals("6b|85-@/$m", tableColumnInfo0.getTypeName());
      assertEquals(-613, tableColumnInfo0.getColumnSize());
      assertEquals("6b|85-@/$m", tableColumnInfo0.getSchemaName());
      assertEquals("6b|85-@/$m", tableColumnInfo0.getCatalogName());
      assertEquals("6b|85-@/$m", tableColumnInfo0.isNullable());
      assertEquals("6b|85-@/$m", tableColumnInfo0.getColumnName());
      assertEquals("6b|85-@/$m", tableColumnInfo0.getSimpleName());
      assertEquals(-613, tableColumnInfo0.getDecimalDigits());
      assertEquals("6b|85-@/$m", tableColumnInfo0.getDefaultValue());
      assertEquals(-613, tableColumnInfo0.getOctetLength());
      assertEquals(-613, tableColumnInfo0.getRadix());
      assertEquals(-613, tableColumnInfo0.getDataType());
      assertEquals(-613, tableColumnInfo0.isNullAllowed());
      assertEquals(-613, tableColumnInfo0.getOrdinalPosition());
      assertEquals("6b|85-@/$m", tableColumnInfo0.getTableName());
  }

  //Test case number: 9
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I59 Branch 53 IF_ICMPNE L634 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I65 Branch 54 IF_ICMPNE L634 - true
   */

  @Test
  public void test09()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent(16, 16);
      assertTrue(boolean0);
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.fixCase(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;)Ljava/lang/String;: I13 Branch 204 IFLE L1768 - true
   */

  @Test
  public void test10()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertNotNull(dBCopyPlugin0);
      
      ISession iSession0 = dBCopyPlugin0.getDestSession();
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertNull(iSession0);
      
      // Undeclared exception!
      try {
        String string0 = DBUtil.fixCase((ISession) null, ".nH+2RqbuX;($'5p");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.replaceOtherDataType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;Lnet/sourceforge/squirrel_sql/client/session/ISession;)I: I12 Branch 58 IF_ICMPNE L686 - false
   */

  @Test
  public void test11()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("an~HI", "an~HI", "an~HI", "an~HI", 1111, "an~HI", 5357, 1111, 5357, 5357, "an~HI", "an~HI", 5357, 5357, "an~HI");
      assertEquals("an~HI", tableColumnInfo0.getColumnName());
      assertEquals(5357, tableColumnInfo0.getColumnSize());
      assertEquals("an~HI", tableColumnInfo0.getCatalogName());
      assertEquals("an~HI", tableColumnInfo0.getSchemaName());
      assertEquals(5357, tableColumnInfo0.getOrdinalPosition());
      assertEquals("an~HI", tableColumnInfo0.getTableName());
      assertEquals(5357, tableColumnInfo0.isNullAllowed());
      assertEquals(5357, tableColumnInfo0.getRadix());
      assertEquals(1111, tableColumnInfo0.getDataType());
      assertEquals("an~HI", tableColumnInfo0.toString());
      assertEquals(5357, tableColumnInfo0.getOctetLength());
      assertEquals(1111, tableColumnInfo0.getDecimalDigits());
      assertEquals("an~HI", tableColumnInfo0.getTypeName());
      assertEquals("an~HI", tableColumnInfo0.getRemarks());
      assertEquals("an~HI", tableColumnInfo0.getQualifiedName());
      assertEquals("an~HI", tableColumnInfo0.getSimpleName());
      assertEquals("an~HI", tableColumnInfo0.getDefaultValue());
      assertEquals("an~HI", tableColumnInfo0.isNullable());
      assertNotNull(tableColumnInfo0);
      
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertNotNull(dBCopyPlugin0);
      
      ISession iSession0 = dBCopyPlugin0.getSourceSession();
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertNull(iSession0);
      
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals(1111, int0);
      assertEquals("an~HI", tableColumnInfo0.getColumnName());
      assertEquals(5357, tableColumnInfo0.getColumnSize());
      assertEquals("an~HI", tableColumnInfo0.getCatalogName());
      assertEquals("an~HI", tableColumnInfo0.getSchemaName());
      assertEquals(5357, tableColumnInfo0.getOrdinalPosition());
      assertEquals("an~HI", tableColumnInfo0.getTableName());
      assertEquals(5357, tableColumnInfo0.isNullAllowed());
      assertEquals(5357, tableColumnInfo0.getRadix());
      assertEquals(1111, tableColumnInfo0.getDataType());
      assertEquals("an~HI", tableColumnInfo0.toString());
      assertEquals(5357, tableColumnInfo0.getOctetLength());
      assertEquals(1111, tableColumnInfo0.getDecimalDigits());
      assertEquals("an~HI", tableColumnInfo0.getTypeName());
      assertEquals("an~HI", tableColumnInfo0.getRemarks());
      assertEquals("an~HI", tableColumnInfo0.getQualifiedName());
      assertEquals("an~HI", tableColumnInfo0.getSimpleName());
      assertEquals("an~HI", tableColumnInfo0.getDefaultValue());
      assertEquals("an~HI", tableColumnInfo0.isNullable());
  }

  //Test case number: 12
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.fixCase(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;)Ljava/lang/String;: I6 Branch 203 IFNULL L1768 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.fixCase(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;)Ljava/lang/String;: I13 Branch 204 IFLE L1768 - false
   */

  @Test
  public void test12()  throws Throwable  {
      String string0 = DBUtil.fixCase((ISession) null, "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  //Test case number: 13
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getTableCount(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)I: root-Branch
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getQualifiedObjectName(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String;: I19 Branch 190 IF_ICMPNE L1692 - true
   */

  @Test
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try {
        int int0 = DBUtil.getTableCount((ISession) null, " words (tokens)", " words (tokens)", " words (tokens)", 153);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getSchemaNameFromDbObject(Lnet/sourceforge/squirrel_sql/fw/sql/IDatabaseObjectInfo;)Ljava/lang/String;: I9 Branch 223 IFEQ L2060 - true
   */

  @Test
  public void test14()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("        Assigning to root (0)%n", "        Assigning to root (0)%n", "        Assigning to root (0)%n");
      assertEquals("        Assigning to root (0)%n", databaseObjectInfo0.getSchemaName());
      assertEquals("        Assigning to root (0)%n", databaseObjectInfo0.getSimpleName());
      assertEquals("        Assigning to root (0)%n", databaseObjectInfo0.getCatalogName());
      assertEquals("        Assigning to root (0)%n", databaseObjectInfo0.getQualifiedName());
      assertEquals("        Assigning to root (0)%n", databaseObjectInfo0.toString());
      assertNotNull(databaseObjectInfo0);
      
      String string0 = DBUtil.getSchemaNameFromDbObject((IDatabaseObjectInfo) databaseObjectInfo0);
      assertEquals("        Assigning to root (0)%n", string0);
      assertEquals("        Assigning to root (0)%n", databaseObjectInfo0.getSchemaName());
      assertEquals("        Assigning to root (0)%n", databaseObjectInfo0.getSimpleName());
      assertEquals("        Assigning to root (0)%n", databaseObjectInfo0.getCatalogName());
      assertEquals("        Assigning to root (0)%n", databaseObjectInfo0.getQualifiedName());
      assertEquals("        Assigning to root (0)%n", databaseObjectInfo0.toString());
      assertNotNull(string0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnCount(Lnet/sourceforge/squirrel_sql/fw/sql/ISQLConnection;Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;)I: root-Branch
   */

  @Test
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try {
        int int0 = DBUtil.getColumnCount((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.validateColumnNames(Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;Lnet/sourceforge/squirrel_sql/plugins/dbcopy/SessionInfoProvider;)V: I6 Branch 211 IFNONNULL L1864 - false
   */

  @Test
  public void test16()  throws Throwable  {
      DBUtil.validateColumnNames((ITableInfo) null, (SessionInfoProvider) null);
  }

  //Test case number: 17
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I23 Branch 49 IF_ICMPNE L626 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I29 Branch 50 IF_ICMPNE L626 - true
   */

  @Test
  public void test17()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent(3, 3);
      assertTrue(boolean0);
  }

  //Test case number: 18
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getTables(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;: I53 Branch 46 IFNULL L575 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getTables(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;: I59 Branch 47 IFNE L575 - false
   */

  @Test
  public void test18()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertNotNull(dBCopyPlugin0);
      
      ISession iSession0 = dBCopyPlugin0.getDestSession();
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertNull(iSession0);
      
      // Undeclared exception!
      try {
        ITableInfo[] iTableInfoArray0 = DBUtil.getTables((ISession) null, "rA~oO,zd;uF$;Qkm", "rA~oO,zd;uF$;Qkm", "rA~oO,zd;uF$;Qkm");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 19
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnList([Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Ljava/lang/String;: I17 Branch 180 IF_ICMPGE L1492 - true
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnList([Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Ljava/lang/String;: I45 Branch 181 IF_ICMPGE L1497 - true
   */

  @Test
  public void test19()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("         Assining o root (0)%n", "         Assining o root (0)%n", "         Assining o root (0)%n", "         Assining o root (0)%n", (-2613), "         Assining o root (0)%n", (-2613), (-2613), (-2613), (-2613), "         Assining o root (0)%n", "         Assining o root (0)%n", (-2613), (-2613), "         Assining o root (0)%n");
      assertEquals("         Assining o root (0)%n", tableColumnInfo0.getTableName());
      assertEquals("         Assining o root (0)%n", tableColumnInfo0.getSimpleName());
      assertEquals(-2613, tableColumnInfo0.getOctetLength());
      assertEquals(-2613, tableColumnInfo0.getDataType());
      assertEquals("         Assining o root (0)%n", tableColumnInfo0.isNullable());
      assertEquals(-2613, tableColumnInfo0.isNullAllowed());
      assertEquals("         Assining o root (0)%n", tableColumnInfo0.getColumnName());
      assertEquals("         Assining o root (0)%n", tableColumnInfo0.getDefaultValue());
      assertEquals(-2613, tableColumnInfo0.getOrdinalPosition());
      assertEquals(-2613, tableColumnInfo0.getColumnSize());
      assertEquals("         Assining o root (0)%n", tableColumnInfo0.getSchemaName());
      assertEquals("         Assining o root (0)%n", tableColumnInfo0.toString());
      assertEquals("         Assining o root (0)%n", tableColumnInfo0.getRemarks());
      assertEquals("         Assining o root (0)%n", tableColumnInfo0.getCatalogName());
      assertEquals(-2613, tableColumnInfo0.getDecimalDigits());
      assertEquals("         Assining o root (0)%n", tableColumnInfo0.getQualifiedName());
      assertEquals("         Assining o root (0)%n", tableColumnInfo0.getTypeName());
      assertEquals(-2613, tableColumnInfo0.getRadix());
      assertNotNull(tableColumnInfo0);
      
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[1];
      tableColumnInfoArray0[0] = tableColumnInfo0;
      String string0 = DBUtil.getColumnList(tableColumnInfoArray0);
      assertEquals("         Assining o root (0)%n", string0);
      assertNotNull(string0);
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isBinaryType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Z: I16 Branch 186 IF_ICMPEQ L1661 - true
   */

  @Test
  public void test20()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, (String) null, (String) null, (String) null, (-2), (String) null, (-561), (-561), (-561), (-561), (String) null, (String) null, (-561), (-561), (String) null);
      assertEquals(-2, tableColumnInfo0.getDataType());
      assertEquals(-561, tableColumnInfo0.getOrdinalPosition());
      assertNull(tableColumnInfo0.getCatalogName());
      assertNull(tableColumnInfo0.toString());
      assertEquals(-561, tableColumnInfo0.isNullAllowed());
      assertNull(tableColumnInfo0.getColumnName());
      assertEquals(-561, tableColumnInfo0.getColumnSize());
      assertEquals(-561, tableColumnInfo0.getDecimalDigits());
      assertNull(tableColumnInfo0.getDefaultValue());
      assertNull(tableColumnInfo0.getSchemaName());
      assertNull(tableColumnInfo0.isNullable());
      assertNull(tableColumnInfo0.getSimpleName());
      assertNull(tableColumnInfo0.getTypeName());
      assertEquals(-561, tableColumnInfo0.getOctetLength());
      assertNull(tableColumnInfo0.getQualifiedName());
      assertNull(tableColumnInfo0.getRemarks());
      assertEquals(-561, tableColumnInfo0.getRadix());
      assertNull(tableColumnInfo0.getTableName());
      assertNotNull(tableColumnInfo0);
      
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertTrue(boolean0);
      assertEquals(-2, tableColumnInfo0.getDataType());
      assertEquals(-561, tableColumnInfo0.getOrdinalPosition());
      assertNull(tableColumnInfo0.getCatalogName());
      assertNull(tableColumnInfo0.toString());
      assertEquals(-561, tableColumnInfo0.isNullAllowed());
      assertNull(tableColumnInfo0.getColumnName());
      assertEquals(-561, tableColumnInfo0.getColumnSize());
      assertEquals(-561, tableColumnInfo0.getDecimalDigits());
      assertNull(tableColumnInfo0.getDefaultValue());
      assertNull(tableColumnInfo0.getSchemaName());
      assertNull(tableColumnInfo0.isNullable());
      assertNull(tableColumnInfo0.getSimpleName());
      assertNull(tableColumnInfo0.getTypeName());
      assertEquals(-561, tableColumnInfo0.getOctetLength());
      assertNull(tableColumnInfo0.getQualifiedName());
      assertNull(tableColumnInfo0.getRemarks());
      assertEquals(-561, tableColumnInfo0.getRadix());
      assertNull(tableColumnInfo0.getTableName());
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.replaceOtherDataType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;Lnet/sourceforge/squirrel_sql/client/session/ISession;)I: I12 Branch 58 IF_ICMPNE L686 - true
   */

  @Test
  public void test21()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("HR{>a!", "HR{>a!", "HR{>a!", "HR{>a!", (-575), "HR{>a!", (-575), (-575), (-575), (-575), "HR{>a!", "HR{>a!", (-575), (-575), "HR{>a!");
      assertEquals(-575, tableColumnInfo0.getOctetLength());
      assertEquals(-575, tableColumnInfo0.isNullAllowed());
      assertEquals("HR{>a!", tableColumnInfo0.getTypeName());
      assertEquals(-575, tableColumnInfo0.getRadix());
      assertEquals(-575, tableColumnInfo0.getDataType());
      assertEquals("HR{>a!", tableColumnInfo0.toString());
      assertEquals("HR{>a!", tableColumnInfo0.getRemarks());
      assertEquals("HR{>a!", tableColumnInfo0.getQualifiedName());
      assertEquals("HR{>a!", tableColumnInfo0.getSchemaName());
      assertEquals("HR{>a!", tableColumnInfo0.getDefaultValue());
      assertEquals("HR{>a!", tableColumnInfo0.getSimpleName());
      assertEquals("HR{>a!", tableColumnInfo0.isNullable());
      assertEquals("HR{>a!", tableColumnInfo0.getColumnName());
      assertEquals("HR{>a!", tableColumnInfo0.getCatalogName());
      assertEquals(-575, tableColumnInfo0.getOrdinalPosition());
      assertEquals(-575, tableColumnInfo0.getColumnSize());
      assertEquals(-575, tableColumnInfo0.getDecimalDigits());
      assertEquals("HR{>a!", tableColumnInfo0.getTableName());
      assertNotNull(tableColumnInfo0);
      
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertNotNull(dBCopyPlugin0);
      
      ISession iSession0 = dBCopyPlugin0.getSourceSession();
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertNull(iSession0);
      
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals((-575), int0);
      assertEquals(-575, tableColumnInfo0.getOctetLength());
      assertEquals(-575, tableColumnInfo0.isNullAllowed());
      assertEquals("HR{>a!", tableColumnInfo0.getTypeName());
      assertEquals(-575, tableColumnInfo0.getRadix());
      assertEquals(-575, tableColumnInfo0.getDataType());
      assertEquals("HR{>a!", tableColumnInfo0.toString());
      assertEquals("HR{>a!", tableColumnInfo0.getRemarks());
      assertEquals("HR{>a!", tableColumnInfo0.getQualifiedName());
      assertEquals("HR{>a!", tableColumnInfo0.getSchemaName());
      assertEquals("HR{>a!", tableColumnInfo0.getDefaultValue());
      assertEquals("HR{>a!", tableColumnInfo0.getSimpleName());
      assertEquals("HR{>a!", tableColumnInfo0.isNullable());
      assertEquals("HR{>a!", tableColumnInfo0.getColumnName());
      assertEquals("HR{>a!", tableColumnInfo0.getCatalogName());
      assertEquals(-575, tableColumnInfo0.getOrdinalPosition());
      assertEquals(-575, tableColumnInfo0.getColumnSize());
      assertEquals(-575, tableColumnInfo0.getDecimalDigits());
      assertEquals("HR{>a!", tableColumnInfo0.getTableName());
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isBinaryType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Z: I28 Branch 188 IF_ICMPEQ L1661 - true
   */

  @Test
  public void test22()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("eecuteQuery: TimesTen allows a maximum fetch size of 128. eAltering prefered fetch size from ", "eecuteQuery: TimesTen allows a maximum fetch size of 128. eAltering prefered fetch size from ", "eecuteQuery: TimesTen allows a maximum fetch size of 128. eAltering prefered fetch size from ", "eecuteQuery: TimesTen allows a maximum fetch size of 128. eAltering prefered fetch size from ", (-4), "eecuteQuery: TimesTen allows a maximum fetch size of 128. eAltering prefered fetch size from ", (-4), (-4), (-4), (-4), "eecuteQuery: TimesTen allows a maximum fetch size of 128. eAltering prefered fetch size from ", "eecuteQuery: TimesTen allows a maximum fetch size of 128. eAltering prefered fetch size from ", (-4), (-4), "eecuteQuery: TimesTen allows a maximum fetch size of 128. eAltering prefered fetch size from ");
      assertEquals("eecuteQuery: TimesTen allows a maximum fetch size of 128. eAltering prefered fetch size from ", tableColumnInfo0.getTypeName());
      assertEquals("eecuteQuery: TimesTen allows a maximum fetch size of 128. eAltering prefered fetch size from ", tableColumnInfo0.getQualifiedName());
      assertEquals(-4, tableColumnInfo0.getColumnSize());
      assertEquals("eecuteQuery: TimesTen allows a maximum fetch size of 128. eAltering prefered fetch size from ", tableColumnInfo0.getRemarks());
      assertEquals("eecuteQuery: TimesTen allows a maximum fetch size of 128. eAltering prefered fetch size from ", tableColumnInfo0.getSimpleName());
      assertEquals("eecuteQuery: TimesTen allows a maximum fetch size of 128. eAltering prefered fetch size from ", tableColumnInfo0.getCatalogName());
      assertEquals("eecuteQuery: TimesTen allows a maximum fetch size of 128. eAltering prefered fetch size from ", tableColumnInfo0.isNullable());
      assertEquals("eecuteQuery: TimesTen allows a maximum fetch size of 128. eAltering prefered fetch size from ", tableColumnInfo0.getColumnName());
      assertEquals("eecuteQuery: TimesTen allows a maximum fetch size of 128. eAltering prefered fetch size from ", tableColumnInfo0.getDefaultValue());
      assertEquals(-4, tableColumnInfo0.getRadix());
      assertEquals(-4, tableColumnInfo0.getOrdinalPosition());
      assertEquals("eecuteQuery: TimesTen allows a maximum fetch size of 128. eAltering prefered fetch size from ", tableColumnInfo0.getSchemaName());
      assertEquals(-4, tableColumnInfo0.isNullAllowed());
      assertEquals(-4, tableColumnInfo0.getDataType());
      assertEquals("eecuteQuery: TimesTen allows a maximum fetch size of 128. eAltering prefered fetch size from ", tableColumnInfo0.toString());
      assertEquals(-4, tableColumnInfo0.getOctetLength());
      assertEquals("eecuteQuery: TimesTen allows a maximum fetch size of 128. eAltering prefered fetch size from ", tableColumnInfo0.getTableName());
      assertEquals(-4, tableColumnInfo0.getDecimalDigits());
      assertNotNull(tableColumnInfo0);
      
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertTrue(boolean0);
      assertEquals("eecuteQuery: TimesTen allows a maximum fetch size of 128. eAltering prefered fetch size from ", tableColumnInfo0.getTypeName());
      assertEquals("eecuteQuery: TimesTen allows a maximum fetch size of 128. eAltering prefered fetch size from ", tableColumnInfo0.getQualifiedName());
      assertEquals(-4, tableColumnInfo0.getColumnSize());
      assertEquals("eecuteQuery: TimesTen allows a maximum fetch size of 128. eAltering prefered fetch size from ", tableColumnInfo0.getRemarks());
      assertEquals("eecuteQuery: TimesTen allows a maximum fetch size of 128. eAltering prefered fetch size from ", tableColumnInfo0.getSimpleName());
      assertEquals("eecuteQuery: TimesTen allows a maximum fetch size of 128. eAltering prefered fetch size from ", tableColumnInfo0.getCatalogName());
      assertEquals("eecuteQuery: TimesTen allows a maximum fetch size of 128. eAltering prefered fetch size from ", tableColumnInfo0.isNullable());
      assertEquals("eecuteQuery: TimesTen allows a maximum fetch size of 128. eAltering prefered fetch size from ", tableColumnInfo0.getColumnName());
      assertEquals("eecuteQuery: TimesTen allows a maximum fetch size of 128. eAltering prefered fetch size from ", tableColumnInfo0.getDefaultValue());
      assertEquals(-4, tableColumnInfo0.getRadix());
      assertEquals(-4, tableColumnInfo0.getOrdinalPosition());
      assertEquals("eecuteQuery: TimesTen allows a maximum fetch size of 128. eAltering prefered fetch size from ", tableColumnInfo0.getSchemaName());
      assertEquals(-4, tableColumnInfo0.isNullAllowed());
      assertEquals(-4, tableColumnInfo0.getDataType());
      assertEquals("eecuteQuery: TimesTen allows a maximum fetch size of 128. eAltering prefered fetch size from ", tableColumnInfo0.toString());
      assertEquals(-4, tableColumnInfo0.getOctetLength());
      assertEquals("eecuteQuery: TimesTen allows a maximum fetch size of 128. eAltering prefered fetch size from ", tableColumnInfo0.getTableName());
      assertEquals(-4, tableColumnInfo0.getDecimalDigits());
  }

  //Test case number: 23
  /*
   * 3 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isBinaryType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Z: I22 Branch 187 IF_ICMPEQ L1661 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isBinaryType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Z: I28 Branch 188 IF_ICMPEQ L1661 - false
   * Goal 3. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isBinaryType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Z: I34 Branch 189 IF_ICMPNE L1661 - true
   */

  @Test
  public void test23()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(",{Y", ",{Y", ",{Y", ",{Y", (-613), ",{Y", (-613), (-613), (-613), (-613), ",{Y", ",{Y", (-613), (-613), ",{Y");
      assertEquals(",{Y", tableColumnInfo0.getTableName());
      assertEquals(",{Y", tableColumnInfo0.isNullable());
      assertEquals(",{Y", tableColumnInfo0.getDefaultValue());
      assertEquals(-613, tableColumnInfo0.getDecimalDigits());
      assertEquals(",{Y", tableColumnInfo0.getColumnName());
      assertEquals(",{Y", tableColumnInfo0.getSimpleName());
      assertEquals(",{Y", tableColumnInfo0.getCatalogName());
      assertEquals(",{Y", tableColumnInfo0.getQualifiedName());
      assertEquals(",{Y", tableColumnInfo0.getTypeName());
      assertEquals(-613, tableColumnInfo0.getOctetLength());
      assertEquals(-613, tableColumnInfo0.getRadix());
      assertEquals(",{Y", tableColumnInfo0.toString());
      assertEquals(-613, tableColumnInfo0.isNullAllowed());
      assertEquals(",{Y", tableColumnInfo0.getRemarks());
      assertEquals(-613, tableColumnInfo0.getDataType());
      assertEquals(",{Y", tableColumnInfo0.getSchemaName());
      assertEquals(-613, tableColumnInfo0.getColumnSize());
      assertEquals(-613, tableColumnInfo0.getOrdinalPosition());
      assertNotNull(tableColumnInfo0);
      
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertFalse(boolean0);
      assertEquals(",{Y", tableColumnInfo0.getTableName());
      assertEquals(",{Y", tableColumnInfo0.isNullable());
      assertEquals(",{Y", tableColumnInfo0.getDefaultValue());
      assertEquals(-613, tableColumnInfo0.getDecimalDigits());
      assertEquals(",{Y", tableColumnInfo0.getColumnName());
      assertEquals(",{Y", tableColumnInfo0.getSimpleName());
      assertEquals(",{Y", tableColumnInfo0.getCatalogName());
      assertEquals(",{Y", tableColumnInfo0.getQualifiedName());
      assertEquals(",{Y", tableColumnInfo0.getTypeName());
      assertEquals(-613, tableColumnInfo0.getOctetLength());
      assertEquals(-613, tableColumnInfo0.getRadix());
      assertEquals(",{Y", tableColumnInfo0.toString());
      assertEquals(-613, tableColumnInfo0.isNullAllowed());
      assertEquals(",{Y", tableColumnInfo0.getRemarks());
      assertEquals(-613, tableColumnInfo0.getDataType());
      assertEquals(",{Y", tableColumnInfo0.getSchemaName());
      assertEquals(-613, tableColumnInfo0.getColumnSize());
      assertEquals(-613, tableColumnInfo0.getOrdinalPosition());
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.setLastStatementValues(Ljava/lang/String;)V: root-Branch
   */

  @Test
  public void test24()  throws Throwable  {
      DBUtil.setLastStatementValues("Unexpected exception while attempting to determine if a table (");
  }

  //Test case number: 25
  /*
   * 3 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I11 Branch 48 IF_ICMPNE L622 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I77 Branch 55 IF_ICMPNE L638 - false
   * Goal 3. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I83 Branch 56 IF_ICMPNE L638 - true
   */

  @Test
  public void test25()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent((-7), (-7));
      assertTrue(boolean0);
  }

  //Test case number: 26
  /*
   * 4 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.convertObjectToTableList(Ljava/util/List;)Ljava/util/List;: I17 Branch 220 IFEQ L2031 - true
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.convertObjectToTableList(Ljava/util/List;)Ljava/util/List;: I17 Branch 220 IFEQ L2031 - false
   * Goal 3. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.convertTableToObjectList(Ljava/util/List;)Ljava/util/List;: I17 Branch 222 IFEQ L2050 - true
   * Goal 4. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.convertTableToObjectList(Ljava/util/List;)Ljava/util/List;: I17 Branch 222 IFEQ L2050 - false
   */

  @Test
  public void test26()  throws Throwable  {
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[18];
      List<ITableInfo> list0 = DBUtil.convertObjectArrayToTableList((IDatabaseObjectInfo[]) tableColumnInfoArray0);
      assertFalse(list0.isEmpty());
      assertEquals(18, list0.size());
      assertNotNull(list0);
      
      List<IDatabaseObjectInfo> list1 = DBUtil.convertTableToObjectList(list0);
      assertEquals(18, list1.size());
      assertFalse(list1.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(18, list0.size());
      assertNotNull(list1);
      
      List<ITableInfo> list2 = DBUtil.convertObjectToTableList(list1);
      assertNotSame(list0, list2);
      assertNotSame(list2, list0);
      assertEquals(18, list1.size());
      assertFalse(list1.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(18, list0.size());
      assertFalse(list2.isEmpty());
      assertEquals(18, list2.size());
      assertNotNull(list2);
      assertTrue(list0.equals((Object)list2));
      assertTrue(list2.equals((Object)list0));
  }

  //Test case number: 27
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isBinaryType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Z: I16 Branch 186 IF_ICMPEQ L1661 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isBinaryType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Z: I22 Branch 187 IF_ICMPEQ L1661 - true
   */

  @Test
  public void test27()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("endeavoring", "endeavoring", "endeavoring", "endeavoring", 2004, "endeavoring", (-1), (-1), (-1), (-1), "endeavoring", "endeavoring", 2004, (-1), "endeavoring");
      assertEquals(-1, tableColumnInfo0.getColumnSize());
      assertEquals("endeavoring", tableColumnInfo0.getSchemaName());
      assertEquals(-1, tableColumnInfo0.getDecimalDigits());
      assertEquals(2004, tableColumnInfo0.getOctetLength());
      assertEquals("endeavoring", tableColumnInfo0.getCatalogName());
      assertEquals("endeavoring", tableColumnInfo0.toString());
      assertEquals(-1, tableColumnInfo0.isNullAllowed());
      assertEquals(-1, tableColumnInfo0.getOrdinalPosition());
      assertEquals("endeavoring", tableColumnInfo0.getTableName());
      assertEquals(-1, tableColumnInfo0.getRadix());
      assertEquals("endeavoring", tableColumnInfo0.getTypeName());
      assertEquals("endeavoring", tableColumnInfo0.getQualifiedName());
      assertEquals("endeavoring", tableColumnInfo0.getRemarks());
      assertEquals("endeavoring", tableColumnInfo0.getSimpleName());
      assertEquals("endeavoring", tableColumnInfo0.getColumnName());
      assertEquals(2004, tableColumnInfo0.getDataType());
      assertEquals("endeavoring", tableColumnInfo0.getDefaultValue());
      assertEquals("endeavoring", tableColumnInfo0.isNullable());
      assertNotNull(tableColumnInfo0);
      
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertTrue(boolean0);
      assertEquals(-1, tableColumnInfo0.getColumnSize());
      assertEquals("endeavoring", tableColumnInfo0.getSchemaName());
      assertEquals(-1, tableColumnInfo0.getDecimalDigits());
      assertEquals(2004, tableColumnInfo0.getOctetLength());
      assertEquals("endeavoring", tableColumnInfo0.getCatalogName());
      assertEquals("endeavoring", tableColumnInfo0.toString());
      assertEquals(-1, tableColumnInfo0.isNullAllowed());
      assertEquals(-1, tableColumnInfo0.getOrdinalPosition());
      assertEquals("endeavoring", tableColumnInfo0.getTableName());
      assertEquals(-1, tableColumnInfo0.getRadix());
      assertEquals("endeavoring", tableColumnInfo0.getTypeName());
      assertEquals("endeavoring", tableColumnInfo0.getQualifiedName());
      assertEquals("endeavoring", tableColumnInfo0.getRemarks());
      assertEquals("endeavoring", tableColumnInfo0.getSimpleName());
      assertEquals("endeavoring", tableColumnInfo0.getColumnName());
      assertEquals(2004, tableColumnInfo0.getDataType());
      assertEquals("endeavoring", tableColumnInfo0.getDefaultValue());
      assertEquals("endeavoring", tableColumnInfo0.isNullable());
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getLastStatement()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test28()  throws Throwable  {
      String string0 = DBUtil.getLastStatement();
      assertNull(string0);
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnType(Lnet/sourceforge/squirrel_sql/fw/sql/ISQLConnection;Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;Ljava/lang/String;)I: I10 Branch 161 IFNULL L1267 - true
   */

  @Test
  public void test29()  throws Throwable  {
      int int0 = DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, "         Assigning to root (0)%n");
      assertEquals((-1), int0);
  }

  //Test case number: 30
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getInsertSQL(Lnet/sourceforge/squirrel_sql/plugins/dbcopy/SessionInfoProvider;Ljava/lang/String;Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;I)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test30()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertNotNull(dBCopyPlugin0);
      
      // Undeclared exception!
      try {
        String string0 = DBUtil.getInsertSQL((SessionInfoProvider) dBCopyPlugin0, "Encountered unexpected exception while attempting to determine if schemas are used in table definitions", (ITableInfo) null, (-3980));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 31
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.setLastStatement(Ljava/lang/String;)V: root-Branch
   */

  @Test
  public void test31()  throws Throwable  {
      DBUtil.setLastStatement("Encountered unexkected exception while attempting t1determine if schemas are used in table definituons");
  }

  //Test case number: 32
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getCatSep(Lnet/sourceforge/squirrel_sql/client/session/ISession;)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try {
        String string0 = DBUtil.getCatSep((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 33
  /*
   * 5 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I11 Branch 48 IF_ICMPNE L622 - true
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I23 Branch 49 IF_ICMPNE L626 - true
   * Goal 3. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I41 Branch 51 IF_ICMPNE L630 - true
   * Goal 4. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I59 Branch 53 IF_ICMPNE L634 - true
   * Goal 5. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I77 Branch 55 IF_ICMPNE L638 - true
   */

  @Test
  public void test33()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent((-613), (-7));
      assertFalse(boolean0);
  }

  //Test case number: 34
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnList([Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Ljava/lang/String;: I17 Branch 180 IF_ICMPGE L1492 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnList([Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Ljava/lang/String;: I45 Branch 181 IF_ICMPGE L1497 - false
   */

  @Test
  public void test34()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("HR{>a!", "HR{>a!", "HR{>a!", "HR{>a!", (-575), "HR{>a!", (-575), (-575), (-575), (-575), "HR{>a!", "HR{>a!", (-575), (-575), "HR{>a!");
      assertEquals("HR{>a!", tableColumnInfo0.getRemarks());
      assertEquals(-575, tableColumnInfo0.getDataType());
      assertEquals("HR{>a!", tableColumnInfo0.toString());
      assertEquals("HR{>a!", tableColumnInfo0.getSchemaName());
      assertEquals("HR{>a!", tableColumnInfo0.getDefaultValue());
      assertEquals(-575, tableColumnInfo0.getColumnSize());
      assertEquals(-575, tableColumnInfo0.isNullAllowed());
      assertEquals(-575, tableColumnInfo0.getOrdinalPosition());
      assertEquals("HR{>a!", tableColumnInfo0.getSimpleName());
      assertEquals("HR{>a!", tableColumnInfo0.isNullable());
      assertEquals("HR{>a!", tableColumnInfo0.getTableName());
      assertEquals("HR{>a!", tableColumnInfo0.getColumnName());
      assertEquals("HR{>a!", tableColumnInfo0.getCatalogName());
      assertEquals("HR{>a!", tableColumnInfo0.getQualifiedName());
      assertEquals(-575, tableColumnInfo0.getRadix());
      assertEquals(-575, tableColumnInfo0.getDecimalDigits());
      assertEquals("HR{>a!", tableColumnInfo0.getTypeName());
      assertEquals(-575, tableColumnInfo0.getOctetLength());
      assertNotNull(tableColumnInfo0);
      
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[18];
      tableColumnInfoArray0[0] = tableColumnInfo0;
      // Undeclared exception!
      try {
        String string0 = DBUtil.getColumnList(tableColumnInfoArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 35
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.setPreferences(Lnet/sourceforge/squirrel_sql/plugins/dbcopy/prefs/DBCopyPreferenceBean;)V: root-Branch
   */

  @Test
  public void test35()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      assertFalse(dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertTrue(dBCopyPreferenceBean0.isUseTruncate());
      assertNull(dBCopyPreferenceBean0.getClientName());
      assertTrue(dBCopyPreferenceBean0.isTestColumnNames());
      assertFalse(dBCopyPreferenceBean0.isWriteScript());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertTrue(dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertTrue(dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(0L, dBCopyPreferenceBean0.getRecordDelayMillis());
      assertTrue(dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertTrue(dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(0L, dBCopyPreferenceBean0.getTableDelayMillis());
      assertTrue(dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertFalse(dBCopyPreferenceBean0.isAppendRecordsToExisting());
      assertNull(dBCopyPreferenceBean0.getClientVersion());
      assertTrue(dBCopyPreferenceBean0.isCopyIndexDefs());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertTrue(dBCopyPreferenceBean0.isCopyData());
      assertFalse(dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertTrue(dBCopyPreferenceBean0.isCopyForeignKeys());
      assertFalse(dBCopyPreferenceBean0.isPromptForDialect());
      assertNotNull(dBCopyPreferenceBean0);
      
      DBUtil.setPreferences(dBCopyPreferenceBean0);
      assertFalse(dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertTrue(dBCopyPreferenceBean0.isUseTruncate());
      assertNull(dBCopyPreferenceBean0.getClientName());
      assertTrue(dBCopyPreferenceBean0.isTestColumnNames());
      assertFalse(dBCopyPreferenceBean0.isWriteScript());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertTrue(dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertTrue(dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(0L, dBCopyPreferenceBean0.getRecordDelayMillis());
      assertTrue(dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertTrue(dBCopyPreferenceBean0.isCheckKeywords());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertEquals(0L, dBCopyPreferenceBean0.getTableDelayMillis());
      assertTrue(dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertFalse(dBCopyPreferenceBean0.isAppendRecordsToExisting());
      assertNull(dBCopyPreferenceBean0.getClientVersion());
      assertTrue(dBCopyPreferenceBean0.isCopyIndexDefs());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertTrue(dBCopyPreferenceBean0.isCopyData());
      assertFalse(dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertTrue(dBCopyPreferenceBean0.isCopyForeignKeys());
      assertFalse(dBCopyPreferenceBean0.isPromptForDialect());
  }

  //Test case number: 36
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isKeyword(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;)Z: root-Branch
   */

  @Test
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try {
        DBUtil.checkKeyword((ISession) null, "         Assigning to root (0)%", "         Assigning to root (0)%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 37
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnName(Lnet/sourceforge/squirrel_sql/fw/sql/ISQLConnection;Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;I)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try {
        String string0 = DBUtil.getColumnName((ISQLConnection) null, (ITableInfo) null, 9805);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 38
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.validateColumnNames(Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;Lnet/sourceforge/squirrel_sql/plugins/dbcopy/SessionInfoProvider;)V: I6 Branch 211 IFNONNULL L1864 - true
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.validateColumnNames(Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;Lnet/sourceforge/squirrel_sql/plugins/dbcopy/SessionInfoProvider;)V: I26 Branch 212 IFNULL L1870 - true
   */

  @Test
  public void test38()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertNotNull(dBCopyPlugin0);
      
      DBUtil.validateColumnNames((ITableInfo) null, (SessionInfoProvider) dBCopyPlugin0);
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
  }

  //Test case number: 39
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.<init>()V: root-Branch
   */

  @Test
  public void test39()  throws Throwable  {
      DBUtil dBUtil0 = new DBUtil();
      assertNull(dBUtil0.getLastStatement());
      assertNull(dBUtil0.getLastStatementValues());
      assertNotNull(dBUtil0);
  }

  //Test case number: 40
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.fixCase(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;)Ljava/lang/String;: I6 Branch 203 IFNULL L1768 - true
   */

  @Test
  public void test40()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertNotNull(dBCopyPlugin0);
      
      ISession iSession0 = dBCopyPlugin0.getDestSession();
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertNull(iSession0);
      
      String string0 = DBUtil.fixCase((ISession) null, (String) null);
      assertNull(string0);
  }
}
