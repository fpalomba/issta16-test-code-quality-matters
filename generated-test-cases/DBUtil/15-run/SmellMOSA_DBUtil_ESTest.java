/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 16 01:43:04 GMT 2015
 */

package net.sourceforge.squirrel_sql.plugins.dbcopy.util;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.List;
import java.util.Vector;
import net.sourceforge.squirrel_sql.client.IApplication;
import net.sourceforge.squirrel_sql.client.session.ISession;
import net.sourceforge.squirrel_sql.client.session.schemainfo.SchemaInfo;
import net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.ISQLConnection;
import net.sourceforge.squirrel_sql.fw.sql.ITableInfo;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import net.sourceforge.squirrel_sql.fw.sql.TableInfo;
import net.sourceforge.squirrel_sql.plugins.dbcopy.DBCopyPlugin;
import net.sourceforge.squirrel_sql.plugins.dbcopy.SessionInfoProvider;
import net.sourceforge.squirrel_sql.plugins.dbcopy.prefs.DBCopyPreferenceBean;
import net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.fixCase(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;)Ljava/lang/String;: I6 Branch 203 IFNULL L1768 - true
   */

  @Test
  public void test00()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertNotNull(dBCopyPlugin0);
      
      ISession iSession0 = dBCopyPlugin0.getSourceSession();
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertNull(iSession0);
      
      String string0 = DBUtil.fixCase((ISession) null, (String) null);
      assertNull(string0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnCount(Lnet/sourceforge/squirrel_sql/fw/sql/ISQLConnection;Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;)I: root-Branch
   */

  @Test
  public void test01()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertNotNull(dBCopyPlugin0);
      
      TableInfo tableInfo0 = dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "PP1*{TMP.*", "PP1*{TMP.*");
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertNull(tableInfo0);
      
      // Undeclared exception!
      try {
        int int0 = DBUtil.getColumnCount((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isBinaryType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Z: I22 Branch 187 IF_ICMPEQ L1661 - true
   */

  @Test
  public void test02()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("&                               ", "&                               ", "&                               ", "&                               ", 2004, "&                               ", (-3), (-3), (-3), (-3), "&                               ", "&                               ", (-3), (-3), "&                               ");
      assertEquals(2004, tableColumnInfo0.getDataType());
      assertEquals("&                               ", tableColumnInfo0.getTypeName());
      assertEquals("&                               ", tableColumnInfo0.getTableName());
      assertEquals("&                               ", tableColumnInfo0.isNullable());
      assertEquals(-3, tableColumnInfo0.getColumnSize());
      assertEquals("&                               ", tableColumnInfo0.getSimpleName());
      assertEquals("&                               ", tableColumnInfo0.toString());
      assertEquals(-3, tableColumnInfo0.getOctetLength());
      assertEquals("&                               ", tableColumnInfo0.getSchemaName());
      assertEquals(-3, tableColumnInfo0.getDecimalDigits());
      assertEquals(-3, tableColumnInfo0.getRadix());
      assertEquals("&                               ", tableColumnInfo0.getDefaultValue());
      assertEquals(-3, tableColumnInfo0.getOrdinalPosition());
      assertEquals("&                               ", tableColumnInfo0.getCatalogName());
      assertEquals("&                               ", tableColumnInfo0.getColumnName());
      assertEquals(-3, tableColumnInfo0.isNullAllowed());
      assertEquals("&                               ", tableColumnInfo0.getRemarks());
      assertEquals("&                               ", tableColumnInfo0.getQualifiedName());
      assertNotNull(tableColumnInfo0);
      
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertEquals(2004, tableColumnInfo0.getDataType());
      assertEquals("&                               ", tableColumnInfo0.getTypeName());
      assertEquals("&                               ", tableColumnInfo0.getTableName());
      assertEquals("&                               ", tableColumnInfo0.isNullable());
      assertEquals(-3, tableColumnInfo0.getColumnSize());
      assertEquals("&                               ", tableColumnInfo0.getSimpleName());
      assertEquals("&                               ", tableColumnInfo0.toString());
      assertEquals(-3, tableColumnInfo0.getOctetLength());
      assertEquals("&                               ", tableColumnInfo0.getSchemaName());
      assertEquals(-3, tableColumnInfo0.getDecimalDigits());
      assertEquals(-3, tableColumnInfo0.getRadix());
      assertEquals("&                               ", tableColumnInfo0.getDefaultValue());
      assertEquals(-3, tableColumnInfo0.getOrdinalPosition());
      assertEquals("&                               ", tableColumnInfo0.getCatalogName());
      assertEquals("&                               ", tableColumnInfo0.getColumnName());
      assertEquals(-3, tableColumnInfo0.isNullAllowed());
      assertEquals("&                               ", tableColumnInfo0.getRemarks());
      assertEquals("&                               ", tableColumnInfo0.getQualifiedName());
      assertTrue(boolean0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnType(Lnet/sourceforge/squirrel_sql/fw/sql/ISQLConnection;Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;Ljava/lang/String;)I: I10 Branch 161 IFNULL L1267 - true
   */

  @Test
  public void test03()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertNotNull(dBCopyPlugin0);
      
      TableInfo tableInfo0 = dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "kx", "kx");
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertNull(tableInfo0);
      
      int int0 = DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, "kx");
      assertEquals((-1), int0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.replaceDistinctDataType(ILnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;Lnet/sourceforge/squirrel_sql/client/session/ISession;)I: I7 Branch 60 IF_ICMPNE L721 - true
   */

  @Test
  public void test04()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("&                               ", "&                               ", "&                               ", "&                               ", (-1846), "&                               ", (-1846), (-1846), (-1846), (-1846), "&                               ", "&                               ", (-1846), (-1846), "&                               ");
      assertEquals(-1846, tableColumnInfo0.getColumnSize());
      assertEquals(-1846, tableColumnInfo0.getDecimalDigits());
      assertEquals("&                               ", tableColumnInfo0.getDefaultValue());
      assertEquals("&                               ", tableColumnInfo0.getCatalogName());
      assertEquals(-1846, tableColumnInfo0.getOctetLength());
      assertEquals(-1846, tableColumnInfo0.isNullAllowed());
      assertEquals("&                               ", tableColumnInfo0.getQualifiedName());
      assertEquals("&                               ", tableColumnInfo0.getRemarks());
      assertEquals(-1846, tableColumnInfo0.getDataType());
      assertEquals("&                               ", tableColumnInfo0.getTableName());
      assertEquals(-1846, tableColumnInfo0.getOrdinalPosition());
      assertEquals("&                               ", tableColumnInfo0.isNullable());
      assertEquals("&                               ", tableColumnInfo0.getTypeName());
      assertEquals(-1846, tableColumnInfo0.getRadix());
      assertEquals("&                               ", tableColumnInfo0.getSimpleName());
      assertEquals("&                               ", tableColumnInfo0.getColumnName());
      assertEquals("&                               ", tableColumnInfo0.toString());
      assertEquals("&                               ", tableColumnInfo0.getSchemaName());
      assertNotNull(tableColumnInfo0);
      
      int int0 = DBUtil.replaceDistinctDataType((-1846), tableColumnInfo0, (ISession) null);
      assertEquals(-1846, tableColumnInfo0.getColumnSize());
      assertEquals(-1846, tableColumnInfo0.getDecimalDigits());
      assertEquals("&                               ", tableColumnInfo0.getDefaultValue());
      assertEquals("&                               ", tableColumnInfo0.getCatalogName());
      assertEquals(-1846, tableColumnInfo0.getOctetLength());
      assertEquals(-1846, tableColumnInfo0.isNullAllowed());
      assertEquals("&                               ", tableColumnInfo0.getQualifiedName());
      assertEquals("&                               ", tableColumnInfo0.getRemarks());
      assertEquals(-1846, tableColumnInfo0.getDataType());
      assertEquals("&                               ", tableColumnInfo0.getTableName());
      assertEquals(-1846, tableColumnInfo0.getOrdinalPosition());
      assertEquals("&                               ", tableColumnInfo0.isNullable());
      assertEquals("&                               ", tableColumnInfo0.getTypeName());
      assertEquals(-1846, tableColumnInfo0.getRadix());
      assertEquals("&                               ", tableColumnInfo0.getSimpleName());
      assertEquals("&                               ", tableColumnInfo0.getColumnName());
      assertEquals("&                               ", tableColumnInfo0.toString());
      assertEquals("&                               ", tableColumnInfo0.getSchemaName());
      assertEquals((-1846), int0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnName(Lnet/sourceforge/squirrel_sql/fw/sql/ISQLConnection;Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;I)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try {
        String string0 = DBUtil.getColumnName((ISQLConnection) null, (ITableInfo) null, (-94));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getSchemaFromDbObject(Lnet/sourceforge/squirrel_sql/fw/sql/IDatabaseObjectInfo;Lnet/sourceforge/squirrel_sql/client/session/schemainfo/SchemaInfo;)Lnet/sourceforge/squirrel_sql/fw/sql/IDatabaseObjectInfo;: I9 Branch 224 IFEQ L2073 - true
   */

  @Test
  public void test06()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "", "", "", (-476), "", (-476), (-476), (-476), (-476), "", "", (-476), (-476), "");
      assertEquals(-476, tableColumnInfo0.getColumnSize());
      assertEquals(-476, tableColumnInfo0.getDecimalDigits());
      assertEquals("", tableColumnInfo0.getSchemaName());
      assertEquals(-476, tableColumnInfo0.isNullAllowed());
      assertEquals("", tableColumnInfo0.toString());
      assertEquals(-476, tableColumnInfo0.getDataType());
      assertEquals(-476, tableColumnInfo0.getOrdinalPosition());
      assertEquals("", tableColumnInfo0.isNullable());
      assertEquals("", tableColumnInfo0.getTableName());
      assertEquals("", tableColumnInfo0.getColumnName());
      assertEquals("", tableColumnInfo0.getQualifiedName());
      assertEquals("", tableColumnInfo0.getDefaultValue());
      assertEquals("", tableColumnInfo0.getRemarks());
      assertEquals(-476, tableColumnInfo0.getOctetLength());
      assertEquals("", tableColumnInfo0.getTypeName());
      assertEquals("", tableColumnInfo0.getSimpleName());
      assertEquals(-476, tableColumnInfo0.getRadix());
      assertEquals("", tableColumnInfo0.getCatalogName());
      assertNotNull(tableColumnInfo0);
      
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNotNull(dBCopyPlugin0);
      
      IApplication iApplication0 = dBCopyPlugin0.getApplication();
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNull(iApplication0);
      
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      assertFalse(schemaInfo0.isLoaded());
      assertEquals(2, schemaInfo0.TABLE_EXT_COLS_LOADED_BEFORE);
      assertEquals(0, schemaInfo0.TABLE_EXT_NOT_A_TABLE);
      assertEquals(1, schemaInfo0.TABLE_EXT_COLS_LOADED_IN_THIS_CALL);
      assertNotNull(schemaInfo0);
      
      // Undeclared exception!
      try {
        IDatabaseObjectInfo iDatabaseObjectInfo0 = DBUtil.getSchemaFromDbObject((IDatabaseObjectInfo) tableColumnInfo0, schemaInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SQLDatabaseMetaData == null
         //
      }
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.setLastStatementValues(Ljava/lang/String;)V: root-Branch
   */

  @Test
  public void test07()  throws Throwable  {
      DBUtil.setLastStatementValues("ERROR: to use SUTime, sentences must have TextAnnotation )et, or the individual toGensmust have riginalTeWtAnnotation r TextAnnotation set!");
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getInsertSQL(Lnet/sourceforge/squirrel_sql/plugins/dbcopy/SessionInfoProvider;Ljava/lang/String;Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;I)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test08()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNotNull(dBCopyPlugin0);
      
      // Undeclared exception!
      try {
        String string0 = DBUtil.getInsertSQL((SessionInfoProvider) dBCopyPlugin0, "b@0`4Q,!?VeqJ", (ITableInfo) null, (-1496));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 9
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.convertTableToObjectList(Ljava/util/List;)Ljava/util/List;: I17 Branch 222 IFEQ L2050 - true
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.convertTableToObjectList(Ljava/util/List;)Ljava/util/List;: I17 Branch 222 IFEQ L2050 - false
   */

  @Test
  public void test09()  throws Throwable  {
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[1];
      List<ITableInfo> list0 = DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      List<IDatabaseObjectInfo> list1 = DBUtil.convertTableToObjectList(list0);
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list1);
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getCatSep(Lnet/sourceforge/squirrel_sql/client/session/ISession;)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try {
        String string0 = DBUtil.getCatSep((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.<init>()V: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      DBUtil dBUtil0 = new DBUtil();
      assertNull(dBUtil0.getLastStatement());
      assertNull(dBUtil0.getLastStatementValues());
      assertNotNull(dBUtil0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.validateColumnNames(Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;Lnet/sourceforge/squirrel_sql/plugins/dbcopy/SessionInfoProvider;)V: I6 Branch 211 IFNONNULL L1864 - false
   */

  @Test
  public void test12()  throws Throwable  {
      DBUtil.validateColumnNames((ITableInfo) null, (SessionInfoProvider) null);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I11 Branch 48 IF_ICMPNE L622 - true
   */

  @Test
  public void test13()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent((-1944), 253);
      assertFalse(boolean0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getLastStatementValues()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      String string0 = DBUtil.getLastStatementValues();
      assertNull(string0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.convertObjectToTableList(Ljava/util/List;)Ljava/util/List;: I17 Branch 220 IFEQ L2031 - true
   */

  @Test
  public void test15()  throws Throwable  {
      Vector<IDatabaseObjectInfo> vector0 = new Vector<IDatabaseObjectInfo>(6, 6);
      assertTrue(vector0.isEmpty());
      assertEquals(6, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      List<ITableInfo> list0 = DBUtil.convertObjectToTableList((List<IDatabaseObjectInfo>) vector0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(vector0.isEmpty());
      assertEquals(6, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(list0);
  }

  //Test case number: 16
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I23 Branch 49 IF_ICMPNE L626 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I29 Branch 50 IF_ICMPNE L626 - true
   */

  @Test
  public void test16()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent(3, 3);
      assertTrue(boolean0);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getQualifiedObjectName(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String;: I19 Branch 190 IF_ICMPNE L1692 - true
   */

  @Test
  public void test17()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertNotNull(dBCopyPlugin0);
      
      ISession iSession0 = dBCopyPlugin0.getDestSession();
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertNull(iSession0);
      
      // Undeclared exception!
      try {
        int int0 = DBUtil.getTableCount((ISession) null, "&                               ", "&                               ", "&                               ", (-1846));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 18
  /*
   * 3 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getTableCount(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)I: root-Branch
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getQualifiedObjectName(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String;: I19 Branch 190 IF_ICMPNE L1692 - false
   * Goal 3. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.fixCase(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;)Ljava/lang/String;: I13 Branch 204 IFLE L1768 - true
   */

  @Test
  public void test18()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertNotNull(dBCopyPlugin0);
      
      ISession iSession0 = dBCopyPlugin0.getSourceSession();
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertNull(iSession0);
      
      // Undeclared exception!
      try {
        int int0 = DBUtil.getTableCount((ISession) null, "bZH mKI", "bZH mKI", "bZH mKI", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.replaceOtherDataType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;Lnet/sourceforge/squirrel_sql/client/session/ISession;)I: I12 Branch 58 IF_ICMPNE L686 - true
   */

  @Test
  public void test19()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertNotNull(dBCopyPlugin0);
      
      ISession iSession0 = dBCopyPlugin0.getSourceSession();
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertNull(iSession0);
      
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("&                       '     ", "&                       '     ", "&                       '     ", "&                       '     ", (-1907), "&                       '     ", (-1907), (-1907), (-1907), (-1907), "&                       '     ", "&                       '     ", (-1907), (-1907), "&                       '     ");
      assertEquals("&                       '     ", tableColumnInfo0.getSimpleName());
      assertEquals(-1907, tableColumnInfo0.getColumnSize());
      assertEquals("&                       '     ", tableColumnInfo0.isNullable());
      assertEquals("&                       '     ", tableColumnInfo0.getTableName());
      assertEquals("&                       '     ", tableColumnInfo0.getColumnName());
      assertEquals(-1907, tableColumnInfo0.getDecimalDigits());
      assertEquals("&                       '     ", tableColumnInfo0.getCatalogName());
      assertEquals("&                       '     ", tableColumnInfo0.getQualifiedName());
      assertEquals("&                       '     ", tableColumnInfo0.getRemarks());
      assertEquals("&                       '     ", tableColumnInfo0.getTypeName());
      assertEquals(-1907, tableColumnInfo0.isNullAllowed());
      assertEquals("&                       '     ", tableColumnInfo0.getSchemaName());
      assertEquals(-1907, tableColumnInfo0.getRadix());
      assertEquals("&                       '     ", tableColumnInfo0.getDefaultValue());
      assertEquals(-1907, tableColumnInfo0.getDataType());
      assertEquals(-1907, tableColumnInfo0.getOrdinalPosition());
      assertEquals(-1907, tableColumnInfo0.getOctetLength());
      assertEquals("&                       '     ", tableColumnInfo0.toString());
      assertNotNull(tableColumnInfo0);
      
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals("&                       '     ", tableColumnInfo0.getSimpleName());
      assertEquals(-1907, tableColumnInfo0.getColumnSize());
      assertEquals("&                       '     ", tableColumnInfo0.isNullable());
      assertEquals("&                       '     ", tableColumnInfo0.getTableName());
      assertEquals("&                       '     ", tableColumnInfo0.getColumnName());
      assertEquals(-1907, tableColumnInfo0.getDecimalDigits());
      assertEquals("&                       '     ", tableColumnInfo0.getCatalogName());
      assertEquals("&                       '     ", tableColumnInfo0.getQualifiedName());
      assertEquals("&                       '     ", tableColumnInfo0.getRemarks());
      assertEquals("&                       '     ", tableColumnInfo0.getTypeName());
      assertEquals(-1907, tableColumnInfo0.isNullAllowed());
      assertEquals("&                       '     ", tableColumnInfo0.getSchemaName());
      assertEquals(-1907, tableColumnInfo0.getRadix());
      assertEquals("&                       '     ", tableColumnInfo0.getDefaultValue());
      assertEquals(-1907, tableColumnInfo0.getDataType());
      assertEquals(-1907, tableColumnInfo0.getOrdinalPosition());
      assertEquals(-1907, tableColumnInfo0.getOctetLength());
      assertEquals("&                       '     ", tableColumnInfo0.toString());
      assertEquals((-1907), int0);
  }

  //Test case number: 20
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I59 Branch 53 IF_ICMPNE L634 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I65 Branch 54 IF_ICMPNE L634 - true
   */

  @Test
  public void test20()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent(16, 16);
      assertTrue(boolean0);
  }

  //Test case number: 21
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.validateColumnNames(Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;Lnet/sourceforge/squirrel_sql/plugins/dbcopy/SessionInfoProvider;)V: I6 Branch 211 IFNONNULL L1864 - true
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.validateColumnNames(Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;Lnet/sourceforge/squirrel_sql/plugins/dbcopy/SessionInfoProvider;)V: I26 Branch 212 IFNULL L1870 - true
   */

  @Test
  public void test21()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertNotNull(dBCopyPlugin0);
      
      DBUtil.validateColumnNames((ITableInfo) null, (SessionInfoProvider) dBCopyPlugin0);
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.setLastStatement(Ljava/lang/String;)V: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      DBUtil.setLastStatement("ERROR: to use SUTime, sentences must have TextAnnotation )et, or the individual toGensmust have riginalTeWtAnnotation r TextAnnotation set!");
  }

  //Test case number: 23
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.convertObjectArrayToTableList([Lnet/sourceforge/squirrel_sql/fw/sql/IDatabaseObjectInfo;)Ljava/util/List;: I17 Branch 221 IF_ICMPGE L2040 - true
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.convertObjectArrayToTableList([Lnet/sourceforge/squirrel_sql/fw/sql/IDatabaseObjectInfo;)Ljava/util/List;: I17 Branch 221 IF_ICMPGE L2040 - false
   */

  @Test
  public void test23()  throws Throwable  {
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[3];
      List<ITableInfo> list0 = DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertNotNull(list0);
  }

  //Test case number: 24
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.fixCase(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;)Ljava/lang/String;: I6 Branch 203 IFNULL L1768 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.fixCase(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;)Ljava/lang/String;: I13 Branch 204 IFLE L1768 - false
   */

  @Test
  public void test24()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertNotNull(dBCopyPlugin0);
      
      ISession iSession0 = dBCopyPlugin0.getSourceSession();
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertNull(iSession0);
      
      String string0 = DBUtil.fixCase((ISession) null, "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isBinaryType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Z: I34 Branch 189 IF_ICMPNE L1661 - true
   */

  @Test
  public void test25()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("&                        '     ", "&                        '     ", "&                        '     ", "&                        '     ", (-1917), "&                        '     ", (-1917), (-1917), (-1917), (-1917), "&                        '     ", "&                        '     ", (-1917), (-1917), "&                        '     ");
      assertEquals(-1917, tableColumnInfo0.getOctetLength());
      assertEquals("&                        '     ", tableColumnInfo0.getTableName());
      assertEquals("&                        '     ", tableColumnInfo0.isNullable());
      assertEquals(-1917, tableColumnInfo0.getDataType());
      assertEquals("&                        '     ", tableColumnInfo0.getSimpleName());
      assertEquals(-1917, tableColumnInfo0.isNullAllowed());
      assertEquals(-1917, tableColumnInfo0.getRadix());
      assertEquals("&                        '     ", tableColumnInfo0.getSchemaName());
      assertEquals("&                        '     ", tableColumnInfo0.toString());
      assertEquals(-1917, tableColumnInfo0.getOrdinalPosition());
      assertEquals("&                        '     ", tableColumnInfo0.getQualifiedName());
      assertEquals("&                        '     ", tableColumnInfo0.getDefaultValue());
      assertEquals(-1917, tableColumnInfo0.getColumnSize());
      assertEquals(-1917, tableColumnInfo0.getDecimalDigits());
      assertEquals("&                        '     ", tableColumnInfo0.getCatalogName());
      assertEquals("&                        '     ", tableColumnInfo0.getColumnName());
      assertEquals("&                        '     ", tableColumnInfo0.getRemarks());
      assertEquals("&                        '     ", tableColumnInfo0.getTypeName());
      assertNotNull(tableColumnInfo0);
      
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertEquals(-1917, tableColumnInfo0.getOctetLength());
      assertEquals("&                        '     ", tableColumnInfo0.getTableName());
      assertEquals("&                        '     ", tableColumnInfo0.isNullable());
      assertEquals(-1917, tableColumnInfo0.getDataType());
      assertEquals("&                        '     ", tableColumnInfo0.getSimpleName());
      assertEquals(-1917, tableColumnInfo0.isNullAllowed());
      assertEquals(-1917, tableColumnInfo0.getRadix());
      assertEquals("&                        '     ", tableColumnInfo0.getSchemaName());
      assertEquals("&                        '     ", tableColumnInfo0.toString());
      assertEquals(-1917, tableColumnInfo0.getOrdinalPosition());
      assertEquals("&                        '     ", tableColumnInfo0.getQualifiedName());
      assertEquals("&                        '     ", tableColumnInfo0.getDefaultValue());
      assertEquals(-1917, tableColumnInfo0.getColumnSize());
      assertEquals(-1917, tableColumnInfo0.getDecimalDigits());
      assertEquals("&                        '     ", tableColumnInfo0.getCatalogName());
      assertEquals("&                        '     ", tableColumnInfo0.getColumnName());
      assertEquals("&                        '     ", tableColumnInfo0.getRemarks());
      assertEquals("&                        '     ", tableColumnInfo0.getTypeName());
      assertFalse(boolean0);
  }

  //Test case number: 26
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getTables(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;: I53 Branch 46 IFNULL L575 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getTables(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;: I59 Branch 47 IFNE L575 - false
   */

  @Test
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try {
        ITableInfo[] iTableInfoArray0 = DBUtil.getTables((ISession) null, "ERROR to use SUTime, s.ntences must have TextAnotation )et, or mhe idiqidual toGens must have OriginalTextAnnoation r TextAnn?tation 'et!", "ERROR to use SUTime, s.ntences must have TextAnotation )et, or mhe idiqidual toGens must have OriginalTextAnnoation r TextAnn?tation 'et!", "ERROR to use SUTime, s.ntences must have TextAnotation )et, or mhe idiqidual toGens must have OriginalTextAnnoation r TextAnn?tation 'et!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getSelectQuery(Lnet/sourceforge/squirrel_sql/plugins/dbcopy/SessionInfoProvider;Ljava/lang/String;Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test27()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNotNull(dBCopyPlugin0);
      
      // Undeclared exception!
      try {
        String string0 = DBUtil.getSelectQuery((SessionInfoProvider) dBCopyPlugin0, "&                         '     ", (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isBinaryType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Z: I16 Branch 186 IF_ICMPEQ L1661 - true
   */

  @Test
  public void test28()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("FREQUENCY", "FREQUENCY", "FREQUENCY", "FREQUENCY", (-2), "FREQUENCY", (-1818), (-1818), (-2), (-1818), "FREQUENCY", "FREQUENCY", (-1818), (-2), "FREQUENCY");
      assertEquals("FREQUENCY", tableColumnInfo0.getColumnName());
      assertEquals("FREQUENCY", tableColumnInfo0.getDefaultValue());
      assertEquals(-2, tableColumnInfo0.getDataType());
      assertEquals("FREQUENCY", tableColumnInfo0.getSchemaName());
      assertEquals(-1818, tableColumnInfo0.getDecimalDigits());
      assertEquals("FREQUENCY", tableColumnInfo0.isNullable());
      assertEquals("FREQUENCY", tableColumnInfo0.getSimpleName());
      assertEquals("FREQUENCY", tableColumnInfo0.getCatalogName());
      assertEquals(-1818, tableColumnInfo0.isNullAllowed());
      assertEquals(-1818, tableColumnInfo0.getColumnSize());
      assertEquals("FREQUENCY", tableColumnInfo0.getTypeName());
      assertEquals(-1818, tableColumnInfo0.getOctetLength());
      assertEquals("FREQUENCY", tableColumnInfo0.getQualifiedName());
      assertEquals("FREQUENCY", tableColumnInfo0.getRemarks());
      assertEquals(-2, tableColumnInfo0.getRadix());
      assertEquals(-2, tableColumnInfo0.getOrdinalPosition());
      assertEquals("FREQUENCY", tableColumnInfo0.getTableName());
      assertEquals("FREQUENCY", tableColumnInfo0.toString());
      assertNotNull(tableColumnInfo0);
      
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertEquals("FREQUENCY", tableColumnInfo0.getColumnName());
      assertEquals("FREQUENCY", tableColumnInfo0.getDefaultValue());
      assertEquals(-2, tableColumnInfo0.getDataType());
      assertEquals("FREQUENCY", tableColumnInfo0.getSchemaName());
      assertEquals(-1818, tableColumnInfo0.getDecimalDigits());
      assertEquals("FREQUENCY", tableColumnInfo0.isNullable());
      assertEquals("FREQUENCY", tableColumnInfo0.getSimpleName());
      assertEquals("FREQUENCY", tableColumnInfo0.getCatalogName());
      assertEquals(-1818, tableColumnInfo0.isNullAllowed());
      assertEquals(-1818, tableColumnInfo0.getColumnSize());
      assertEquals("FREQUENCY", tableColumnInfo0.getTypeName());
      assertEquals(-1818, tableColumnInfo0.getOctetLength());
      assertEquals("FREQUENCY", tableColumnInfo0.getQualifiedName());
      assertEquals("FREQUENCY", tableColumnInfo0.getRemarks());
      assertEquals(-2, tableColumnInfo0.getRadix());
      assertEquals(-2, tableColumnInfo0.getOrdinalPosition());
      assertEquals("FREQUENCY", tableColumnInfo0.getTableName());
      assertEquals("FREQUENCY", tableColumnInfo0.toString());
      assertTrue(boolean0);
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnType(Lnet/sourceforge/squirrel_sql/fw/sql/ISQLConnection;Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;I)I: root-Branch
   */

  @Test
  public void test29()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNotNull(dBCopyPlugin0);
      
      TableInfo tableInfo0 = dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "&                         '     ", "&                         '     ");
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNull(tableInfo0);
      
      // Undeclared exception!
      try {
        int int0 = DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, (-1003));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 30
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isKeyword(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;)Z: root-Branch
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnSql(Lnet/sourceforge/squirrel_sql/plugins/dbcopy/SessionInfoProvider;Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I12 Branch 182 IFEQ L1519 - false
   */

  @Test
  public void test30()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertNotNull(dBCopyPlugin0);
      
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      assertFalse(dBCopyPreferenceBean0.isPromptForDialect());
      assertTrue(dBCopyPreferenceBean0.isCheckKeywords());
      assertTrue(dBCopyPreferenceBean0.isUseTruncate());
      assertFalse(dBCopyPreferenceBean0.isAppendRecordsToExisting());
      assertNull(dBCopyPreferenceBean0.getClientVersion());
      assertTrue(dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertTrue(dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(0L, dBCopyPreferenceBean0.getTableDelayMillis());
      assertFalse(dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertTrue(dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertTrue(dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertEquals(0L, dBCopyPreferenceBean0.getRecordDelayMillis());
      assertTrue(dBCopyPreferenceBean0.isTestColumnNames());
      assertFalse(dBCopyPreferenceBean0.isWriteScript());
      assertTrue(dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertTrue(dBCopyPreferenceBean0.isCopyData());
      assertNull(dBCopyPreferenceBean0.getClientName());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertFalse(dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertTrue(dBCopyPreferenceBean0.isCopyIndexDefs());
      assertNotNull(dBCopyPreferenceBean0);
      
      DBUtil.setPreferences(dBCopyPreferenceBean0);
      assertFalse(dBCopyPreferenceBean0.isPromptForDialect());
      assertTrue(dBCopyPreferenceBean0.isCheckKeywords());
      assertTrue(dBCopyPreferenceBean0.isUseTruncate());
      assertFalse(dBCopyPreferenceBean0.isAppendRecordsToExisting());
      assertNull(dBCopyPreferenceBean0.getClientVersion());
      assertTrue(dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertTrue(dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(0L, dBCopyPreferenceBean0.getTableDelayMillis());
      assertFalse(dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertTrue(dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertTrue(dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertEquals(0L, dBCopyPreferenceBean0.getRecordDelayMillis());
      assertTrue(dBCopyPreferenceBean0.isTestColumnNames());
      assertFalse(dBCopyPreferenceBean0.isWriteScript());
      assertTrue(dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertTrue(dBCopyPreferenceBean0.isCopyData());
      assertNull(dBCopyPreferenceBean0.getClientName());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertFalse(dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertTrue(dBCopyPreferenceBean0.isCopyIndexDefs());
      
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("S}", "S}", "S}", "S}", 1936, "S}", 1936, 1936, 1936, 1936, "S}", "S}", 1936, 1936, "S}");
      assertEquals(1936, tableColumnInfo0.isNullAllowed());
      assertEquals(1936, tableColumnInfo0.getRadix());
      assertEquals("S}", tableColumnInfo0.isNullable());
      assertEquals(1936, tableColumnInfo0.getOctetLength());
      assertEquals("S}", tableColumnInfo0.getTableName());
      assertEquals("S}", tableColumnInfo0.getRemarks());
      assertEquals("S}", tableColumnInfo0.getSimpleName());
      assertEquals("S}", tableColumnInfo0.getColumnName());
      assertEquals("S}", tableColumnInfo0.getQualifiedName());
      assertEquals("S}", tableColumnInfo0.getTypeName());
      assertEquals("S}", tableColumnInfo0.getCatalogName());
      assertEquals("S}", tableColumnInfo0.getSchemaName());
      assertEquals("S}", tableColumnInfo0.getDefaultValue());
      assertEquals(1936, tableColumnInfo0.getDecimalDigits());
      assertEquals("S}", tableColumnInfo0.toString());
      assertEquals(1936, tableColumnInfo0.getOrdinalPosition());
      assertEquals(1936, tableColumnInfo0.getColumnSize());
      assertEquals(1936, tableColumnInfo0.getDataType());
      assertNotNull(tableColumnInfo0);
      
      // Undeclared exception!
      try {
        String string0 = DBUtil.getColumnSql((SessionInfoProvider) dBCopyPlugin0, tableColumnInfo0, "S}", "S}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 31
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getLastStatement()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test31()  throws Throwable  {
      String string0 = DBUtil.getLastStatement();
      assertNull(string0);
  }

  //Test case number: 32
  /*
   * 3 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I41 Branch 51 IF_ICMPNE L630 - true
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I77 Branch 55 IF_ICMPNE L638 - false
   * Goal 3. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I83 Branch 56 IF_ICMPNE L638 - true
   */

  @Test
  public void test32()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent((-7), (-7));
      assertTrue(boolean0);
  }

  //Test case number: 33
  /*
   * 6 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I11 Branch 48 IF_ICMPNE L622 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I23 Branch 49 IF_ICMPNE L626 - true
   * Goal 3. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I41 Branch 51 IF_ICMPNE L630 - false
   * Goal 4. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I47 Branch 52 IF_ICMPNE L630 - true
   * Goal 5. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I59 Branch 53 IF_ICMPNE L634 - true
   * Goal 6. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I77 Branch 55 IF_ICMPNE L638 - true
   */

  @Test
  public void test33()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent(2, 2);
      assertTrue(boolean0);
  }

  //Test case number: 34
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.setPreferences(Lnet/sourceforge/squirrel_sql/plugins/dbcopy/prefs/DBCopyPreferenceBean;)V: root-Branch
   */

  @Test
  public void test34()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertTrue(dBCopyPreferenceBean0.isCopyData());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertEquals(0L, dBCopyPreferenceBean0.getTableDelayMillis());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertTrue(dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertTrue(dBCopyPreferenceBean0.isUseTruncate());
      assertTrue(dBCopyPreferenceBean0.isCopyForeignKeys());
      assertFalse(dBCopyPreferenceBean0.isPromptForDialect());
      assertTrue(dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertFalse(dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertNull(dBCopyPreferenceBean0.getClientVersion());
      assertTrue(dBCopyPreferenceBean0.isCopyIndexDefs());
      assertFalse(dBCopyPreferenceBean0.isAppendRecordsToExisting());
      assertTrue(dBCopyPreferenceBean0.isCheckKeywords());
      assertTrue(dBCopyPreferenceBean0.isUseFileCaching());
      assertNull(dBCopyPreferenceBean0.getClientName());
      assertFalse(dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertTrue(dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(0L, dBCopyPreferenceBean0.getRecordDelayMillis());
      assertFalse(dBCopyPreferenceBean0.isWriteScript());
      assertTrue(dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertNotNull(dBCopyPreferenceBean0);
      
      DBUtil.setPreferences(dBCopyPreferenceBean0);
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertTrue(dBCopyPreferenceBean0.isCopyData());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertEquals(0L, dBCopyPreferenceBean0.getTableDelayMillis());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertTrue(dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertTrue(dBCopyPreferenceBean0.isUseTruncate());
      assertTrue(dBCopyPreferenceBean0.isCopyForeignKeys());
      assertFalse(dBCopyPreferenceBean0.isPromptForDialect());
      assertTrue(dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertFalse(dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertNull(dBCopyPreferenceBean0.getClientVersion());
      assertTrue(dBCopyPreferenceBean0.isCopyIndexDefs());
      assertFalse(dBCopyPreferenceBean0.isAppendRecordsToExisting());
      assertTrue(dBCopyPreferenceBean0.isCheckKeywords());
      assertTrue(dBCopyPreferenceBean0.isUseFileCaching());
      assertNull(dBCopyPreferenceBean0.getClientName());
      assertFalse(dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertTrue(dBCopyPreferenceBean0.isTestColumnNames());
      assertEquals(0L, dBCopyPreferenceBean0.getRecordDelayMillis());
      assertFalse(dBCopyPreferenceBean0.isWriteScript());
      assertTrue(dBCopyPreferenceBean0.isAutoCommitEnabled());
  }

  //Test case number: 35
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getSchemaNameFromDbObject(Lnet/sourceforge/squirrel_sql/fw/sql/IDatabaseObjectInfo;)Ljava/lang/String;: I9 Branch 223 IFEQ L2060 - true
   */

  @Test
  public void test35()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "", "", "", (-476), "", (-476), (-476), (-476), (-476), "", "", (-476), (-476), "");
      assertEquals("", tableColumnInfo0.toString());
      assertEquals(-476, tableColumnInfo0.getDataType());
      assertEquals("", tableColumnInfo0.getRemarks());
      assertEquals(-476, tableColumnInfo0.getRadix());
      assertEquals("", tableColumnInfo0.getTypeName());
      assertEquals("", tableColumnInfo0.getQualifiedName());
      assertEquals(-476, tableColumnInfo0.getOctetLength());
      assertEquals(-476, tableColumnInfo0.getDecimalDigits());
      assertEquals("", tableColumnInfo0.getTableName());
      assertEquals("", tableColumnInfo0.isNullable());
      assertEquals(-476, tableColumnInfo0.getOrdinalPosition());
      assertEquals("", tableColumnInfo0.getColumnName());
      assertEquals("", tableColumnInfo0.getSimpleName());
      assertEquals("", tableColumnInfo0.getCatalogName());
      assertEquals(-476, tableColumnInfo0.isNullAllowed());
      assertEquals("", tableColumnInfo0.getDefaultValue());
      assertEquals(-476, tableColumnInfo0.getColumnSize());
      assertEquals("", tableColumnInfo0.getSchemaName());
      assertNotNull(tableColumnInfo0);
      
      String string0 = DBUtil.getSchemaNameFromDbObject((IDatabaseObjectInfo) tableColumnInfo0);
      assertEquals("", tableColumnInfo0.toString());
      assertEquals(-476, tableColumnInfo0.getDataType());
      assertEquals("", tableColumnInfo0.getRemarks());
      assertEquals(-476, tableColumnInfo0.getRadix());
      assertEquals("", tableColumnInfo0.getTypeName());
      assertEquals("", tableColumnInfo0.getQualifiedName());
      assertEquals(-476, tableColumnInfo0.getOctetLength());
      assertEquals(-476, tableColumnInfo0.getDecimalDigits());
      assertEquals("", tableColumnInfo0.getTableName());
      assertEquals("", tableColumnInfo0.isNullable());
      assertEquals(-476, tableColumnInfo0.getOrdinalPosition());
      assertEquals("", tableColumnInfo0.getColumnName());
      assertEquals("", tableColumnInfo0.getSimpleName());
      assertEquals("", tableColumnInfo0.getCatalogName());
      assertEquals(-476, tableColumnInfo0.isNullAllowed());
      assertEquals("", tableColumnInfo0.getDefaultValue());
      assertEquals(-476, tableColumnInfo0.getColumnSize());
      assertEquals("", tableColumnInfo0.getSchemaName());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  //Test case number: 36
  /*
   * 4 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnList([Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Ljava/lang/String;: I17 Branch 180 IF_ICMPGE L1492 - true
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnList([Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Ljava/lang/String;: I17 Branch 180 IF_ICMPGE L1492 - false
   * Goal 3. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnList([Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Ljava/lang/String;: I45 Branch 181 IF_ICMPGE L1497 - true
   * Goal 4. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnList([Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Ljava/lang/String;: I45 Branch 181 IF_ICMPGE L1497 - false
   */

  @Test
  public void test36()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(")", ")", ")", ")", (-476), ")", (-476), (-476), (-476), (-476), ")", ")", (-476), (-476), ")");
      assertEquals(")", tableColumnInfo0.getTypeName());
      assertEquals(")", tableColumnInfo0.getQualifiedName());
      assertEquals(-476, tableColumnInfo0.getOrdinalPosition());
      assertEquals(")", tableColumnInfo0.getRemarks());
      assertEquals(")", tableColumnInfo0.getSimpleName());
      assertEquals(-476, tableColumnInfo0.getRadix());
      assertEquals(-476, tableColumnInfo0.getDecimalDigits());
      assertEquals(-476, tableColumnInfo0.getOctetLength());
      assertEquals(")", tableColumnInfo0.isNullable());
      assertEquals(")", tableColumnInfo0.getColumnName());
      assertEquals(")", tableColumnInfo0.getDefaultValue());
      assertEquals(")", tableColumnInfo0.getCatalogName());
      assertEquals(")", tableColumnInfo0.getSchemaName());
      assertEquals(-476, tableColumnInfo0.getDataType());
      assertEquals(-476, tableColumnInfo0.isNullAllowed());
      assertEquals(")", tableColumnInfo0.getTableName());
      assertEquals(")", tableColumnInfo0.toString());
      assertEquals(-476, tableColumnInfo0.getColumnSize());
      assertNotNull(tableColumnInfo0);
      
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[2];
      tableColumnInfoArray0[0] = tableColumnInfo0;
      tableColumnInfoArray0[1] = tableColumnInfo0;
      String string0 = DBUtil.getColumnList(tableColumnInfoArray0);
      assertEquals("), )", string0);
      assertNotNull(string0);
  }

  //Test case number: 37
  /*
   * 4 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isBinaryType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Z: I16 Branch 186 IF_ICMPEQ L1661 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isBinaryType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Z: I22 Branch 187 IF_ICMPEQ L1661 - false
   * Goal 3. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isBinaryType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Z: I28 Branch 188 IF_ICMPEQ L1661 - false
   * Goal 4. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isBinaryType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Z: I34 Branch 189 IF_ICMPNE L1661 - false
   */

  @Test
  public void test37()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("&                               ", "&                               ", "&                               ", "&                               ", (-3), "&                               ", (-3), (-3), (-3), (-3), "&                               ", "&                               ", (-3), (-3), "&                               ");
      assertEquals("&                               ", tableColumnInfo0.toString());
      assertEquals("&                               ", tableColumnInfo0.getQualifiedName());
      assertEquals("&                               ", tableColumnInfo0.getRemarks());
      assertEquals(-3, tableColumnInfo0.getRadix());
      assertEquals(-3, tableColumnInfo0.getOctetLength());
      assertEquals(-3, tableColumnInfo0.getDataType());
      assertEquals("&                               ", tableColumnInfo0.getColumnName());
      assertEquals("&                               ", tableColumnInfo0.getTableName());
      assertEquals(-3, tableColumnInfo0.getDecimalDigits());
      assertEquals("&                               ", tableColumnInfo0.getSchemaName());
      assertEquals("&                               ", tableColumnInfo0.isNullable());
      assertEquals("&                               ", tableColumnInfo0.getTypeName());
      assertEquals("&                               ", tableColumnInfo0.getDefaultValue());
      assertEquals("&                               ", tableColumnInfo0.getCatalogName());
      assertEquals("&                               ", tableColumnInfo0.getSimpleName());
      assertEquals(-3, tableColumnInfo0.isNullAllowed());
      assertEquals(-3, tableColumnInfo0.getOrdinalPosition());
      assertEquals(-3, tableColumnInfo0.getColumnSize());
      assertNotNull(tableColumnInfo0);
      
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertEquals("&                               ", tableColumnInfo0.toString());
      assertEquals("&                               ", tableColumnInfo0.getQualifiedName());
      assertEquals("&                               ", tableColumnInfo0.getRemarks());
      assertEquals(-3, tableColumnInfo0.getRadix());
      assertEquals(-3, tableColumnInfo0.getOctetLength());
      assertEquals(-3, tableColumnInfo0.getDataType());
      assertEquals("&                               ", tableColumnInfo0.getColumnName());
      assertEquals("&                               ", tableColumnInfo0.getTableName());
      assertEquals(-3, tableColumnInfo0.getDecimalDigits());
      assertEquals("&                               ", tableColumnInfo0.getSchemaName());
      assertEquals("&                               ", tableColumnInfo0.isNullable());
      assertEquals("&                               ", tableColumnInfo0.getTypeName());
      assertEquals("&                               ", tableColumnInfo0.getDefaultValue());
      assertEquals("&                               ", tableColumnInfo0.getCatalogName());
      assertEquals("&                               ", tableColumnInfo0.getSimpleName());
      assertEquals(-3, tableColumnInfo0.isNullAllowed());
      assertEquals(-3, tableColumnInfo0.getOrdinalPosition());
      assertEquals(-3, tableColumnInfo0.getColumnSize());
      assertTrue(boolean0);
  }
}
