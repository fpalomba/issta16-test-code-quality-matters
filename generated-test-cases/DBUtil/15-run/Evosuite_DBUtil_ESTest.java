/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 16 02:17:58 GMT 2015
 */

package net.sourceforge.squirrel_sql.plugins.dbcopy.util;

import static org.junit.Assert.*;
import org.junit.Test;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.List;
import java.util.Vector;
import net.sourceforge.squirrel_sql.client.IApplication;
import net.sourceforge.squirrel_sql.client.session.ISession;
import net.sourceforge.squirrel_sql.client.session.schemainfo.SchemaInfo;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectType;
import net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.ISQLConnection;
import net.sourceforge.squirrel_sql.fw.sql.ITableInfo;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import net.sourceforge.squirrel_sql.fw.sql.TableInfo;
import net.sourceforge.squirrel_sql.plugins.dbcopy.DBCopyPlugin;
import net.sourceforge.squirrel_sql.plugins.dbcopy.SessionInfoProvider;
import net.sourceforge.squirrel_sql.plugins.dbcopy.prefs.DBCopyPreferenceBean;
import net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isBinaryType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Z: I22 Branch 187 IF_ICMPEQ L1661 - true
   */

  @Test
  public void test00()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("fte ransormCC:     l      ", "fte ransormCC:     l      ", "fte ransormCC:     l      ", "fte ransormCC:     l      ", 2004, "fte ransormCC:     l      ", 0, 0, 0, 0, "fte ransormCC:     l      ", "fte ransormCC:     l      ", 0, 2004, "fte ransormCC:     l      ");
      assertEquals(0, tableColumnInfo0.getColumnSize());
      assertEquals(0, tableColumnInfo0.getDecimalDigits());
      assertEquals("fte ransormCC:     l      ", tableColumnInfo0.getTableName());
      assertEquals("fte ransormCC:     l      ", tableColumnInfo0.getSimpleName());
      assertEquals(2004, tableColumnInfo0.getOrdinalPosition());
      assertEquals("fte ransormCC:     l      ", tableColumnInfo0.isNullable());
      assertEquals(2004, tableColumnInfo0.getDataType());
      assertEquals("fte ransormCC:     l      ", tableColumnInfo0.toString());
      assertEquals(0, tableColumnInfo0.getRadix());
      assertEquals("fte ransormCC:     l      ", tableColumnInfo0.getCatalogName());
      assertEquals("fte ransormCC:     l      ", tableColumnInfo0.getSchemaName());
      assertEquals(0, tableColumnInfo0.isNullAllowed());
      assertEquals("fte ransormCC:     l      ", tableColumnInfo0.getDefaultValue());
      assertEquals(0, tableColumnInfo0.getOctetLength());
      assertEquals("fte ransormCC:     l      ", tableColumnInfo0.getColumnName());
      assertEquals("fte ransormCC:     l      ", tableColumnInfo0.getQualifiedName());
      assertEquals("fte ransormCC:     l      ", tableColumnInfo0.getTypeName());
      assertEquals("fte ransormCC:     l      ", tableColumnInfo0.getRemarks());
      assertNotNull(tableColumnInfo0);
      
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertEquals(0, tableColumnInfo0.getColumnSize());
      assertEquals(0, tableColumnInfo0.getDecimalDigits());
      assertEquals("fte ransormCC:     l      ", tableColumnInfo0.getTableName());
      assertEquals("fte ransormCC:     l      ", tableColumnInfo0.getSimpleName());
      assertEquals(2004, tableColumnInfo0.getOrdinalPosition());
      assertEquals("fte ransormCC:     l      ", tableColumnInfo0.isNullable());
      assertEquals(2004, tableColumnInfo0.getDataType());
      assertEquals("fte ransormCC:     l      ", tableColumnInfo0.toString());
      assertEquals(0, tableColumnInfo0.getRadix());
      assertEquals("fte ransormCC:     l      ", tableColumnInfo0.getCatalogName());
      assertEquals("fte ransormCC:     l      ", tableColumnInfo0.getSchemaName());
      assertEquals(0, tableColumnInfo0.isNullAllowed());
      assertEquals("fte ransormCC:     l      ", tableColumnInfo0.getDefaultValue());
      assertEquals(0, tableColumnInfo0.getOctetLength());
      assertEquals("fte ransormCC:     l      ", tableColumnInfo0.getColumnName());
      assertEquals("fte ransormCC:     l      ", tableColumnInfo0.getQualifiedName());
      assertEquals("fte ransormCC:     l      ", tableColumnInfo0.getTypeName());
      assertEquals("fte ransormCC:     l      ", tableColumnInfo0.getRemarks());
      assertTrue(boolean0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnSql(Lnet/sourceforge/squirrel_sql/plugins/dbcopy/SessionInfoProvider;Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;: I12 Branch 182 IFEQ L1519 - false
   */

  @Test
  public void test01()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertNotNull(dBCopyPlugin0);
      
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      assertEquals(0L, dBCopyPreferenceBean0.getRecordDelayMillis());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertFalse(dBCopyPreferenceBean0.isWriteScript());
      assertTrue(dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertTrue(dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(0L, dBCopyPreferenceBean0.getTableDelayMillis());
      assertFalse(dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertTrue(dBCopyPreferenceBean0.isTestColumnNames());
      assertTrue(dBCopyPreferenceBean0.isUseTruncate());
      assertFalse(dBCopyPreferenceBean0.isAppendRecordsToExisting());
      assertTrue(dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertTrue(dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertTrue(dBCopyPreferenceBean0.isCopyIndexDefs());
      assertNull(dBCopyPreferenceBean0.getClientVersion());
      assertTrue(dBCopyPreferenceBean0.isCheckKeywords());
      assertFalse(dBCopyPreferenceBean0.isPromptForDialect());
      assertFalse(dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertTrue(dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertNull(dBCopyPreferenceBean0.getClientName());
      assertTrue(dBCopyPreferenceBean0.isCopyData());
      assertNotNull(dBCopyPreferenceBean0);
      
      DBUtil.setPreferences(dBCopyPreferenceBean0);
      assertEquals(0L, dBCopyPreferenceBean0.getRecordDelayMillis());
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
      assertEquals(8192, dBCopyPreferenceBean0.getFileCacheBufferSize());
      assertFalse(dBCopyPreferenceBean0.isWriteScript());
      assertTrue(dBCopyPreferenceBean0.isCommitAfterTableDefs());
      assertTrue(dBCopyPreferenceBean0.isCopyForeignKeys());
      assertEquals(0L, dBCopyPreferenceBean0.getTableDelayMillis());
      assertFalse(dBCopyPreferenceBean0.isDelayBetweenObjects());
      assertTrue(dBCopyPreferenceBean0.isTestColumnNames());
      assertTrue(dBCopyPreferenceBean0.isUseTruncate());
      assertFalse(dBCopyPreferenceBean0.isAppendRecordsToExisting());
      assertTrue(dBCopyPreferenceBean0.isPruneDuplicateIndexDefs());
      assertTrue(dBCopyPreferenceBean0.isUseFileCaching());
      assertEquals(1000, dBCopyPreferenceBean0.getSelectFetchSize());
      assertTrue(dBCopyPreferenceBean0.isCopyIndexDefs());
      assertNull(dBCopyPreferenceBean0.getClientVersion());
      assertTrue(dBCopyPreferenceBean0.isCheckKeywords());
      assertFalse(dBCopyPreferenceBean0.isPromptForDialect());
      assertFalse(dBCopyPreferenceBean0.isCopyPrimaryKeys());
      assertTrue(dBCopyPreferenceBean0.isAutoCommitEnabled());
      assertNull(dBCopyPreferenceBean0.getClientName());
      assertTrue(dBCopyPreferenceBean0.isCopyData());
      
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, (String) null, (String) null, (String) null, (-2172), (String) null, (-2172), (-2172), (-2172), (-2172), (String) null, (String) null, (-2172), (-2172), (String) null);
      assertEquals(-2172, tableColumnInfo0.getOrdinalPosition());
      assertNull(tableColumnInfo0.isNullable());
      assertNull(tableColumnInfo0.getSimpleName());
      assertEquals(-2172, tableColumnInfo0.getRadix());
      assertEquals(-2172, tableColumnInfo0.isNullAllowed());
      assertNull(tableColumnInfo0.getTypeName());
      assertNull(tableColumnInfo0.getDefaultValue());
      assertNull(tableColumnInfo0.getColumnName());
      assertNull(tableColumnInfo0.getSchemaName());
      assertNull(tableColumnInfo0.toString());
      assertEquals(-2172, tableColumnInfo0.getDataType());
      assertNull(tableColumnInfo0.getRemarks());
      assertEquals(-2172, tableColumnInfo0.getColumnSize());
      assertNull(tableColumnInfo0.getCatalogName());
      assertNull(tableColumnInfo0.getQualifiedName());
      assertEquals(-2172, tableColumnInfo0.getOctetLength());
      assertNull(tableColumnInfo0.getTableName());
      assertEquals(-2172, tableColumnInfo0.getDecimalDigits());
      assertNotNull(tableColumnInfo0);
      
      // Undeclared exception!
      try {
        String string0 = DBUtil.getColumnSql((SessionInfoProvider) dBCopyPlugin0, tableColumnInfo0, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I83 Branch 56 IF_ICMPNE L638 - false
   */

  @Test
  public void test02()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent((-7), 16);
      assertTrue(boolean0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getSelectQuery(Lnet/sourceforge/squirrel_sql/plugins/dbcopy/SessionInfoProvider;Ljava/lang/String;Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test03()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertNotNull(dBCopyPlugin0);
      
      // Undeclared exception!
      try {
        String string0 = DBUtil.getSelectQuery((SessionInfoProvider) dBCopyPlugin0, "BX)uLn]$ypT0#-r;", (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getSchemaFromDbObject(Lnet/sourceforge/squirrel_sql/fw/sql/IDatabaseObjectInfo;Lnet/sourceforge/squirrel_sql/client/session/schemainfo/SchemaInfo;)Lnet/sourceforge/squirrel_sql/fw/sql/IDatabaseObjectInfo;: I9 Branch 224 IFEQ L2073 - false
   */

  @Test
  public void test04()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("@~!:Y", "@~!:Y", "@~!:Y");
      assertEquals("@~!:Y", databaseObjectInfo0.getQualifiedName());
      assertEquals("@~!:Y", databaseObjectInfo0.getCatalogName());
      assertEquals("@~!:Y", databaseObjectInfo0.getSimpleName());
      assertEquals("@~!:Y", databaseObjectInfo0.toString());
      assertEquals("@~!:Y", databaseObjectInfo0.getSchemaName());
      assertNotNull(databaseObjectInfo0);
      
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SCHEMA;
      assertEquals("Schema", databaseObjectType0.toString());
      assertEquals("Schema", databaseObjectType0.getKeyForSerializationReplace());
      assertEquals("Schema", databaseObjectType0.getName());
      assertNotNull(databaseObjectType0);
      
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      assertEquals("Schema", databaseObjectType0.toString());
      assertEquals("Schema", databaseObjectType0.getKeyForSerializationReplace());
      assertEquals("Schema", databaseObjectType0.getName());
      assertEquals("@~!:Y", databaseObjectInfo0.getQualifiedName());
      assertEquals("@~!:Y", databaseObjectInfo0.getCatalogName());
      assertEquals("@~!:Y", databaseObjectInfo0.getSimpleName());
      assertEquals("@~!:Y", databaseObjectInfo0.toString());
      assertEquals("@~!:Y", databaseObjectInfo0.getSchemaName());
      
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertNotNull(dBCopyPlugin0);
      
      IApplication iApplication0 = dBCopyPlugin0.getApplication();
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertNull(iApplication0);
      
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      assertFalse(schemaInfo0.isLoaded());
      assertEquals(2, schemaInfo0.TABLE_EXT_COLS_LOADED_BEFORE);
      assertEquals(1, schemaInfo0.TABLE_EXT_COLS_LOADED_IN_THIS_CALL);
      assertEquals(0, schemaInfo0.TABLE_EXT_NOT_A_TABLE);
      assertNotNull(schemaInfo0);
      
      DatabaseObjectInfo databaseObjectInfo1 = (DatabaseObjectInfo)DBUtil.getSchemaFromDbObject((IDatabaseObjectInfo) databaseObjectInfo0, schemaInfo0);
      assertEquals("@~!:Y", databaseObjectInfo0.getQualifiedName());
      assertEquals("@~!:Y", databaseObjectInfo0.getCatalogName());
      assertEquals("@~!:Y", databaseObjectInfo0.getSimpleName());
      assertEquals("@~!:Y", databaseObjectInfo0.toString());
      assertEquals("@~!:Y", databaseObjectInfo0.getSchemaName());
      assertEquals("@~!:Y", databaseObjectInfo1.getSchemaName());
      assertEquals("@~!:Y", databaseObjectInfo1.getCatalogName());
      assertEquals("@~!:Y", databaseObjectInfo1.toString());
      assertEquals("@~!:Y", databaseObjectInfo1.getQualifiedName());
      assertEquals("@~!:Y", databaseObjectInfo1.getSimpleName());
      assertFalse(schemaInfo0.isLoaded());
      assertEquals(2, schemaInfo0.TABLE_EXT_COLS_LOADED_BEFORE);
      assertEquals(1, schemaInfo0.TABLE_EXT_COLS_LOADED_IN_THIS_CALL);
      assertEquals(0, schemaInfo0.TABLE_EXT_NOT_A_TABLE);
      assertNotNull(databaseObjectInfo1);
      assertSame(databaseObjectInfo0, databaseObjectInfo1);
      assertSame(databaseObjectInfo1, databaseObjectInfo0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isBinaryType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Z: I16 Branch 186 IF_ICMPEQ L1661 - true
   */

  @Test
  public void test05()  throws Throwable  {
      String string0 = DBUtil.getLastStatement();
      assertNull(string0);
      
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, (String) null, (String) null, (String) null, (-2), (String) null, (-2), (-2), (-2), (-2), (String) null, (String) null, (-2), (-2), (String) null);
      assertEquals(-2, tableColumnInfo0.getRadix());
      assertEquals(-2, tableColumnInfo0.isNullAllowed());
      assertNull(tableColumnInfo0.getRemarks());
      assertEquals(-2, tableColumnInfo0.getOrdinalPosition());
      assertNull(tableColumnInfo0.isNullable());
      assertEquals(-2, tableColumnInfo0.getOctetLength());
      assertNull(tableColumnInfo0.getSimpleName());
      assertNull(tableColumnInfo0.getTypeName());
      assertNull(tableColumnInfo0.getCatalogName());
      assertNull(tableColumnInfo0.getQualifiedName());
      assertNull(tableColumnInfo0.getColumnName());
      assertEquals(-2, tableColumnInfo0.getColumnSize());
      assertEquals(-2, tableColumnInfo0.getDecimalDigits());
      assertNull(tableColumnInfo0.getDefaultValue());
      assertNull(tableColumnInfo0.getTableName());
      assertNull(tableColumnInfo0.getSchemaName());
      assertEquals(-2, tableColumnInfo0.getDataType());
      assertNull(tableColumnInfo0.toString());
      assertNotNull(tableColumnInfo0);
      
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertEquals(-2, tableColumnInfo0.getRadix());
      assertEquals(-2, tableColumnInfo0.isNullAllowed());
      assertNull(tableColumnInfo0.getRemarks());
      assertEquals(-2, tableColumnInfo0.getOrdinalPosition());
      assertNull(tableColumnInfo0.isNullable());
      assertEquals(-2, tableColumnInfo0.getOctetLength());
      assertNull(tableColumnInfo0.getSimpleName());
      assertNull(tableColumnInfo0.getTypeName());
      assertNull(tableColumnInfo0.getCatalogName());
      assertNull(tableColumnInfo0.getQualifiedName());
      assertNull(tableColumnInfo0.getColumnName());
      assertEquals(-2, tableColumnInfo0.getColumnSize());
      assertEquals(-2, tableColumnInfo0.getDecimalDigits());
      assertNull(tableColumnInfo0.getDefaultValue());
      assertNull(tableColumnInfo0.getTableName());
      assertNull(tableColumnInfo0.getSchemaName());
      assertEquals(-2, tableColumnInfo0.getDataType());
      assertNull(tableColumnInfo0.toString());
      assertTrue(boolean0);
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getTables(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;: I53 Branch 46 IFNULL L575 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getTables(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;: I59 Branch 47 IFNE L575 - false
   */

  @Test
  public void test06()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertNotNull(dBCopyPlugin0);
      
      ISession iSession0 = dBCopyPlugin0.getDestSession();
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertNull(iSession0);
      
      // Undeclared exception!
      try {
        ITableInfo[] iTableInfoArray0 = DBUtil.getTables((ISession) null, "4!DQUc;<^#y`", "4!DQUc;<^#y`", "4!DQUc;<^#y`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 7
  /*
   * 3 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.convertObjectArrayToTableList([Lnet/sourceforge/squirrel_sql/fw/sql/IDatabaseObjectInfo;)Ljava/util/List;: I17 Branch 221 IF_ICMPGE L2040 - true
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.convertObjectArrayToTableList([Lnet/sourceforge/squirrel_sql/fw/sql/IDatabaseObjectInfo;)Ljava/util/List;: I17 Branch 221 IF_ICMPGE L2040 - false
   * Goal 3. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.convertTableToObjectList(Ljava/util/List;)Ljava/util/List;: I17 Branch 222 IFEQ L2050 - false
   */

  @Test
  public void test07()  throws Throwable  {
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[5];
      List<ITableInfo> list0 = DBUtil.convertObjectArrayToTableList((IDatabaseObjectInfo[]) tableColumnInfoArray0);
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      List<IDatabaseObjectInfo> list1 = DBUtil.convertTableToObjectList(list0);
      assertFalse(list1.isEmpty());
      assertEquals(5, list1.size());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list1);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnType(Lnet/sourceforge/squirrel_sql/fw/sql/ISQLConnection;Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;I)I: root-Branch
   */

  @Test
  public void test08()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertNotNull(dBCopyPlugin0);
      
      TableInfo tableInfo0 = dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "AtertrsormCC:            ", "AtertrsormCC:            ");
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertNull(tableInfo0);
      
      // Undeclared exception!
      try {
        int int0 = DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, 5065);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 9
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getQualifiedObjectName(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String;: I19 Branch 190 IF_ICMPNE L1692 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.fixCase(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;)Ljava/lang/String;: I13 Branch 204 IFLE L1768 - true
   */

  @Test
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try {
        int int0 = DBUtil.getTableCount((ISession) null, "I0Tk WbYo|K)m", "I0Tk WbYo|K)m", "I0Tk WbYo|K)m", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getInsertSQL(Lnet/sourceforge/squirrel_sql/plugins/dbcopy/SessionInfoProvider;Ljava/lang/String;Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;I)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertNotNull(dBCopyPlugin0);
      
      // Undeclared exception!
      try {
        String string0 = DBUtil.getInsertSQL((SessionInfoProvider) dBCopyPlugin0, "@k0C>&K", (ITableInfo) null, 285);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.validateColumnNames(Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;Lnet/sourceforge/squirrel_sql/plugins/dbcopy/SessionInfoProvider;)V: I6 Branch 211 IFNONNULL L1864 - false
   */

  @Test
  public void test11()  throws Throwable  {
      DBUtil.validateColumnNames((ITableInfo) null, (SessionInfoProvider) null);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnName(Lnet/sourceforge/squirrel_sql/fw/sql/ISQLConnection;Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;I)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertNotNull(dBCopyPlugin0);
      
      TableInfo tableInfo0 = dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "Atertr8sfo>mCC:           ", "Atertr8sfo>mCC:           ");
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertNull(tableInfo0);
      
      // Undeclared exception!
      try {
        String string0 = DBUtil.getColumnName((ISQLConnection) null, (ITableInfo) null, (-2188));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnCount(Lnet/sourceforge/squirrel_sql/fw/sql/ISQLConnection;Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;)I: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try {
        int int0 = DBUtil.getColumnCount((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 14
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.validateColumnNames(Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;Lnet/sourceforge/squirrel_sql/plugins/dbcopy/SessionInfoProvider;)V: I6 Branch 211 IFNONNULL L1864 - true
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.validateColumnNames(Lnet/sourceforge/squirrel_sql/fw/sql/ITableInfo;Lnet/sourceforge/squirrel_sql/plugins/dbcopy/SessionInfoProvider;)V: I26 Branch 212 IFNULL L1870 - true
   */

  @Test
  public void test14()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertNotNull(dBCopyPlugin0);
      
      DBUtil.validateColumnNames((ITableInfo) null, (SessionInfoProvider) dBCopyPlugin0);
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
  }

  //Test case number: 15
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.<init>()V: root-Branch
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.replaceOtherDataType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;Lnet/sourceforge/squirrel_sql/client/session/ISession;)I: I12 Branch 58 IF_ICMPNE L686 - false
   */

  @Test
  public void test15()  throws Throwable  {
      DBUtil dBUtil0 = new DBUtil();
      assertNull(dBUtil0.getLastStatementValues());
      assertNull(dBUtil0.getLastStatement());
      assertNotNull(dBUtil0);
      
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("DBUtil.error.unknowntype", "DBUtil.error.unknowntype", "DBUtil.error.unknowntype", "DBUtil.error.unknowntype", 1111, "DBUtil.error.unknowntype", 1111, 1111, 1111, 1111, "DBUtil.error.unknowntype", "DBUtil.error.unknowntype", 1111, 1111, "DBUtil.error.unknowntype");
      assertEquals(1111, tableColumnInfo0.getColumnSize());
      assertEquals(1111, tableColumnInfo0.getDecimalDigits());
      assertEquals("DBUtil.error.unknowntype", tableColumnInfo0.getColumnName());
      assertEquals("DBUtil.error.unknowntype", tableColumnInfo0.getSimpleName());
      assertEquals(1111, tableColumnInfo0.getDataType());
      assertEquals("DBUtil.error.unknowntype", tableColumnInfo0.getCatalogName());
      assertEquals("DBUtil.error.unknowntype", tableColumnInfo0.getTableName());
      assertEquals(1111, tableColumnInfo0.getOrdinalPosition());
      assertEquals("DBUtil.error.unknowntype", tableColumnInfo0.getRemarks());
      assertEquals("DBUtil.error.unknowntype", tableColumnInfo0.toString());
      assertEquals(1111, tableColumnInfo0.isNullAllowed());
      assertEquals("DBUtil.error.unknowntype", tableColumnInfo0.getQualifiedName());
      assertEquals(1111, tableColumnInfo0.getRadix());
      assertEquals("DBUtil.error.unknowntype", tableColumnInfo0.getTypeName());
      assertEquals(1111, tableColumnInfo0.getOctetLength());
      assertEquals("DBUtil.error.unknowntype", tableColumnInfo0.getDefaultValue());
      assertEquals("DBUtil.error.unknowntype", tableColumnInfo0.isNullable());
      assertEquals("DBUtil.error.unknowntype", tableColumnInfo0.getSchemaName());
      assertNotNull(tableColumnInfo0);
      
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertNotNull(dBCopyPlugin0);
      
      ISession iSession0 = dBCopyPlugin0.getDestSession();
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertNull(iSession0);
      
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals(1111, tableColumnInfo0.getColumnSize());
      assertEquals(1111, tableColumnInfo0.getDecimalDigits());
      assertEquals("DBUtil.error.unknowntype", tableColumnInfo0.getColumnName());
      assertEquals("DBUtil.error.unknowntype", tableColumnInfo0.getSimpleName());
      assertEquals(1111, tableColumnInfo0.getDataType());
      assertEquals("DBUtil.error.unknowntype", tableColumnInfo0.getCatalogName());
      assertEquals("DBUtil.error.unknowntype", tableColumnInfo0.getTableName());
      assertEquals(1111, tableColumnInfo0.getOrdinalPosition());
      assertEquals("DBUtil.error.unknowntype", tableColumnInfo0.getRemarks());
      assertEquals("DBUtil.error.unknowntype", tableColumnInfo0.toString());
      assertEquals(1111, tableColumnInfo0.isNullAllowed());
      assertEquals("DBUtil.error.unknowntype", tableColumnInfo0.getQualifiedName());
      assertEquals(1111, tableColumnInfo0.getRadix());
      assertEquals("DBUtil.error.unknowntype", tableColumnInfo0.getTypeName());
      assertEquals(1111, tableColumnInfo0.getOctetLength());
      assertEquals("DBUtil.error.unknowntype", tableColumnInfo0.getDefaultValue());
      assertEquals("DBUtil.error.unknowntype", tableColumnInfo0.isNullable());
      assertEquals("DBUtil.error.unknowntype", tableColumnInfo0.getSchemaName());
      assertEquals(1111, int0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 71 LOOKUPSWITCH L772 Case -1 - true
   */

  @Test
  public void test16()  throws Throwable  {
      int int0 = DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, "AtertrsormCC:            ");
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try {
        String string0 = DBUtil.bindVariable((PreparedStatement) null, (-1), (-1), (-1), (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 17
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getTableCount(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)I: root-Branch
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getQualifiedObjectName(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String;: I19 Branch 190 IF_ICMPNE L1692 - true
   */

  @Test
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try {
        int int0 = DBUtil.getTableCount((ISession) null, "ertrnsfo~mCC:!           ", "ertrnsfo~mCC:!           ", "ertrnsfo~mCC:!           ", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 73 LOOKUPSWITCH L772 Case 1 - true
   */

  @Test
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try {
        String string0 = DBUtil.bindVariable((PreparedStatement) null, 1, 36, 36, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 95 LOOKUPSWITCH L772 Default-Case - true
   */

  @Test
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try {
        String string0 = DBUtil.bindVariable((PreparedStatement) null, 730, 0, 0, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 65 LOOKUPSWITCH L772 Case -7 - true
   */

  @Test
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try {
        String string0 = DBUtil.bindVariable((PreparedStatement) null, (-7), (-7), (-7), (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isKeyword(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;)Z: root-Branch
   */

  @Test
  public void test21()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNotNull(dBCopyPlugin0);
      
      ISession iSession0 = dBCopyPlugin0.getDestSession();
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNull(iSession0);
      
      // Undeclared exception!
      try {
        DBUtil.checkKeyword((ISession) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.setLastStatement(Ljava/lang/String;)V: root-Branch
   */

  @Test
  public void test22()  throws Throwable  {
      DBUtil.setLastStatement((String) null);
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 76 LOOKUPSWITCH L772 Case 4 - true
   */

  @Test
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try {
        String string0 = DBUtil.bindVariable((PreparedStatement) null, 4, 36, 4, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 24
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I23 Branch 49 IF_ICMPNE L626 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I29 Branch 50 IF_ICMPNE L626 - true
   */

  @Test
  public void test24()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent(3, 3);
      assertTrue(boolean0);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.convertObjectToTableList(Ljava/util/List;)Ljava/util/List;: I17 Branch 220 IFEQ L2031 - true
   */

  @Test
  public void test25()  throws Throwable  {
      Vector<IDatabaseObjectInfo> vector0 = new Vector<IDatabaseObjectInfo>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      List<ITableInfo> list0 = DBUtil.convertObjectToTableList((List<IDatabaseObjectInfo>) vector0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(list0);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getSchemaNameFromDbObject(Lnet/sourceforge/squirrel_sql/fw/sql/IDatabaseObjectInfo;)Ljava/lang/String;: I9 Branch 223 IFEQ L2060 - true
   */

  @Test
  public void test26()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo((String) null, (String) null, (String) null);
      assertNull(databaseObjectInfo0.getCatalogName());
      assertNull(databaseObjectInfo0.toString());
      assertNull(databaseObjectInfo0.getQualifiedName());
      assertNull(databaseObjectInfo0.getSchemaName());
      assertNull(databaseObjectInfo0.getSimpleName());
      assertNotNull(databaseObjectInfo0);
      
      String string0 = DBUtil.getSchemaNameFromDbObject((IDatabaseObjectInfo) databaseObjectInfo0);
      assertNull(databaseObjectInfo0.getCatalogName());
      assertNull(databaseObjectInfo0.toString());
      assertNull(databaseObjectInfo0.getQualifiedName());
      assertNull(databaseObjectInfo0.getSchemaName());
      assertNull(databaseObjectInfo0.getSimpleName());
      assertNull(string0);
  }

  //Test case number: 27
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.fixCase(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;)Ljava/lang/String;: I6 Branch 203 IFNULL L1768 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.fixCase(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;)Ljava/lang/String;: I13 Branch 204 IFLE L1768 - false
   */

  @Test
  public void test27()  throws Throwable  {
      String string0 = DBUtil.fixCase((ISession) null, "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 79 LOOKUPSWITCH L772 Case 7 - true
   */

  @Test
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try {
        String string0 = DBUtil.bindVariable((PreparedStatement) null, 7, 7, 7, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 29
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 72 LOOKUPSWITCH L772 Case 0 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 81 LOOKUPSWITCH L772 Case 12 - true
   */

  @Test
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try {
        String string0 = DBUtil.bindVariable((PreparedStatement) null, 12, 2001, 2001, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 30
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.replaceDistinctDataType(ILnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;Lnet/sourceforge/squirrel_sql/client/session/ISession;)I: I7 Branch 60 IF_ICMPNE L721 - true
   */

  @Test
  public void test30()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("+no", "+no", "+no", "+no", (-1267), "+no", (-1267), (-1267), (-1267), (-1267), "+no", "+no", (-1267), (-1267), "+no");
      assertEquals(-1267, tableColumnInfo0.getDecimalDigits());
      assertEquals("+no", tableColumnInfo0.getTypeName());
      assertEquals("+no", tableColumnInfo0.getCatalogName());
      assertEquals("+no", tableColumnInfo0.getDefaultValue());
      assertEquals(-1267, tableColumnInfo0.getOrdinalPosition());
      assertEquals(-1267, tableColumnInfo0.getColumnSize());
      assertEquals(-1267, tableColumnInfo0.getDataType());
      assertEquals("+no", tableColumnInfo0.getRemarks());
      assertEquals("+no", tableColumnInfo0.getQualifiedName());
      assertEquals(-1267, tableColumnInfo0.isNullAllowed());
      assertEquals("+no", tableColumnInfo0.getSimpleName());
      assertEquals(-1267, tableColumnInfo0.getOctetLength());
      assertEquals("+no", tableColumnInfo0.getColumnName());
      assertEquals("+no", tableColumnInfo0.isNullable());
      assertEquals("+no", tableColumnInfo0.getTableName());
      assertEquals("+no", tableColumnInfo0.getSchemaName());
      assertEquals(-1267, tableColumnInfo0.getRadix());
      assertEquals("+no", tableColumnInfo0.toString());
      assertNotNull(tableColumnInfo0);
      
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertNotNull(dBCopyPlugin0);
      
      ISession iSession0 = dBCopyPlugin0.getDestSession();
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertNull(iSession0);
      
      int int0 = DBUtil.replaceDistinctDataType((-1267), tableColumnInfo0, (ISession) null);
      assertEquals(-1267, tableColumnInfo0.getDecimalDigits());
      assertEquals("+no", tableColumnInfo0.getTypeName());
      assertEquals("+no", tableColumnInfo0.getCatalogName());
      assertEquals("+no", tableColumnInfo0.getDefaultValue());
      assertEquals(-1267, tableColumnInfo0.getOrdinalPosition());
      assertEquals(-1267, tableColumnInfo0.getColumnSize());
      assertEquals(-1267, tableColumnInfo0.getDataType());
      assertEquals("+no", tableColumnInfo0.getRemarks());
      assertEquals("+no", tableColumnInfo0.getQualifiedName());
      assertEquals(-1267, tableColumnInfo0.isNullAllowed());
      assertEquals("+no", tableColumnInfo0.getSimpleName());
      assertEquals(-1267, tableColumnInfo0.getOctetLength());
      assertEquals("+no", tableColumnInfo0.getColumnName());
      assertEquals("+no", tableColumnInfo0.isNullable());
      assertEquals("+no", tableColumnInfo0.getTableName());
      assertEquals("+no", tableColumnInfo0.getSchemaName());
      assertEquals(-1267, tableColumnInfo0.getRadix());
      assertEquals("+no", tableColumnInfo0.toString());
      assertEquals((-1267), int0);
  }

  //Test case number: 31
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnList([Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Ljava/lang/String;: I17 Branch 180 IF_ICMPGE L1492 - true
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnList([Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Ljava/lang/String;: I45 Branch 181 IF_ICMPGE L1497 - true
   */

  @Test
  public void test31()  throws Throwable  {
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[1];
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, (String) null, (String) null, (String) null, (-32), (String) null, (-32), (-32), (-32), (-32), (String) null, (String) null, (-32), (-32), (String) null);
      assertEquals(-32, tableColumnInfo0.isNullAllowed());
      assertEquals(-32, tableColumnInfo0.getRadix());
      assertEquals(-32, tableColumnInfo0.getDecimalDigits());
      assertEquals(-32, tableColumnInfo0.getOctetLength());
      assertNull(tableColumnInfo0.getCatalogName());
      assertNull(tableColumnInfo0.getRemarks());
      assertNull(tableColumnInfo0.getQualifiedName());
      assertNull(tableColumnInfo0.getTypeName());
      assertNull(tableColumnInfo0.getColumnName());
      assertEquals(-32, tableColumnInfo0.getColumnSize());
      assertNull(tableColumnInfo0.getSimpleName());
      assertNull(tableColumnInfo0.getSchemaName());
      assertNull(tableColumnInfo0.getDefaultValue());
      assertNull(tableColumnInfo0.isNullable());
      assertNull(tableColumnInfo0.getTableName());
      assertEquals(-32, tableColumnInfo0.getDataType());
      assertEquals(-32, tableColumnInfo0.getOrdinalPosition());
      assertNull(tableColumnInfo0.toString());
      assertNotNull(tableColumnInfo0);
      
      tableColumnInfoArray0[0] = tableColumnInfo0;
      String string0 = DBUtil.getColumnList(tableColumnInfoArray0);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  //Test case number: 32
  /*
   * 31 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 65 LOOKUPSWITCH L772 Case -7 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 66 LOOKUPSWITCH L772 Case -6 - false
   * Goal 3. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 67 LOOKUPSWITCH L772 Case -5 - false
   * Goal 4. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 68 LOOKUPSWITCH L772 Case -4 - false
   * Goal 5. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 69 LOOKUPSWITCH L772 Case -3 - false
   * Goal 6. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 70 LOOKUPSWITCH L772 Case -2 - false
   * Goal 7. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 71 LOOKUPSWITCH L772 Case -1 - false
   * Goal 8. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 72 LOOKUPSWITCH L772 Case 0 - true
   * Goal 9. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 73 LOOKUPSWITCH L772 Case 1 - false
   * Goal 10. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 74 LOOKUPSWITCH L772 Case 2 - false
   * Goal 11. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 75 LOOKUPSWITCH L772 Case 3 - false
   * Goal 12. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 76 LOOKUPSWITCH L772 Case 4 - false
   * Goal 13. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 77 LOOKUPSWITCH L772 Case 5 - false
   * Goal 14. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 78 LOOKUPSWITCH L772 Case 6 - false
   * Goal 15. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 79 LOOKUPSWITCH L772 Case 7 - false
   * Goal 16. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 80 LOOKUPSWITCH L772 Case 8 - false
   * Goal 17. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 81 LOOKUPSWITCH L772 Case 12 - false
   * Goal 18. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 82 LOOKUPSWITCH L772 Case 16 - false
   * Goal 19. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 83 LOOKUPSWITCH L772 Case 70 - false
   * Goal 20. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 84 LOOKUPSWITCH L772 Case 91 - false
   * Goal 21. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 85 LOOKUPSWITCH L772 Case 92 - false
   * Goal 22. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 86 LOOKUPSWITCH L772 Case 93 - false
   * Goal 23. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 87 LOOKUPSWITCH L772 Case 1111 - false
   * Goal 24. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 88 LOOKUPSWITCH L772 Case 2000 - false
   * Goal 25. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 89 LOOKUPSWITCH L772 Case 2001 - false
   * Goal 26. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 90 LOOKUPSWITCH L772 Case 2002 - false
   * Goal 27. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 91 LOOKUPSWITCH L772 Case 2003 - false
   * Goal 28. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 92 LOOKUPSWITCH L772 Case 2004 - false
   * Goal 29. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 93 LOOKUPSWITCH L772 Case 2005 - false
   * Goal 30. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 94 LOOKUPSWITCH L772 Case 2006 - false
   * Goal 31. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.bindVariable(Ljava/sql/PreparedStatement;IIILjava/sql/ResultSet;)Ljava/lang/String;: I7 Branch 95 LOOKUPSWITCH L772 Default-Case - false
   */

  @Test
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try {
        String string0 = DBUtil.bindVariable((PreparedStatement) null, 0, 0, 0, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 33
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getLastStatementValues()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test33()  throws Throwable  {
      String string0 = DBUtil.getLastStatementValues();
      assertNull(string0);
  }

  //Test case number: 34
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.replaceOtherDataType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;Lnet/sourceforge/squirrel_sql/client/session/ISession;)I: I12 Branch 58 IF_ICMPNE L686 - true
   */

  @Test
  public void test34()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("+no", "+no", "+no", "+no", (-1267), "+no", (-1267), (-1267), (-1267), (-1267), "+no", "+no", (-1267), (-1267), "+no");
      assertEquals("+no", tableColumnInfo0.getSchemaName());
      assertEquals(-1267, tableColumnInfo0.getRadix());
      assertEquals("+no", tableColumnInfo0.toString());
      assertEquals(-1267, tableColumnInfo0.getOctetLength());
      assertEquals("+no", tableColumnInfo0.getSimpleName());
      assertEquals("+no", tableColumnInfo0.isNullable());
      assertEquals("+no", tableColumnInfo0.getTableName());
      assertEquals(-1267, tableColumnInfo0.getOrdinalPosition());
      assertEquals("+no", tableColumnInfo0.getColumnName());
      assertEquals(-1267, tableColumnInfo0.getDecimalDigits());
      assertEquals("+no", tableColumnInfo0.getDefaultValue());
      assertEquals(-1267, tableColumnInfo0.getColumnSize());
      assertEquals(-1267, tableColumnInfo0.isNullAllowed());
      assertEquals("+no", tableColumnInfo0.getRemarks());
      assertEquals("+no", tableColumnInfo0.getCatalogName());
      assertEquals(-1267, tableColumnInfo0.getDataType());
      assertEquals("+no", tableColumnInfo0.getQualifiedName());
      assertEquals("+no", tableColumnInfo0.getTypeName());
      assertNotNull(tableColumnInfo0);
      
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNotNull(dBCopyPlugin0);
      
      ISession iSession0 = dBCopyPlugin0.getSourceSession();
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNull(iSession0);
      
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals("+no", tableColumnInfo0.getSchemaName());
      assertEquals(-1267, tableColumnInfo0.getRadix());
      assertEquals("+no", tableColumnInfo0.toString());
      assertEquals(-1267, tableColumnInfo0.getOctetLength());
      assertEquals("+no", tableColumnInfo0.getSimpleName());
      assertEquals("+no", tableColumnInfo0.isNullable());
      assertEquals("+no", tableColumnInfo0.getTableName());
      assertEquals(-1267, tableColumnInfo0.getOrdinalPosition());
      assertEquals("+no", tableColumnInfo0.getColumnName());
      assertEquals(-1267, tableColumnInfo0.getDecimalDigits());
      assertEquals("+no", tableColumnInfo0.getDefaultValue());
      assertEquals(-1267, tableColumnInfo0.getColumnSize());
      assertEquals(-1267, tableColumnInfo0.isNullAllowed());
      assertEquals("+no", tableColumnInfo0.getRemarks());
      assertEquals("+no", tableColumnInfo0.getCatalogName());
      assertEquals(-1267, tableColumnInfo0.getDataType());
      assertEquals("+no", tableColumnInfo0.getQualifiedName());
      assertEquals("+no", tableColumnInfo0.getTypeName());
      assertEquals((-1267), int0);
  }

  //Test case number: 35
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.setLastStatementValues(Ljava/lang/String;)V: root-Branch
   */

  @Test
  public void test35()  throws Throwable  {
      DBUtil.setLastStatementValues("Unexpected exception while attempting to determine if a table (");
  }

  //Test case number: 36
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isBinaryType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Z: I34 Branch 189 IF_ICMPNE L1661 - false
   */

  @Test
  public void test36()  throws Throwable  {
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[1];
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("(", "(", "(", "(", (-3), "(", (-3), 0, 0, 0, "(", "(", (-3), (-3), "(");
      assertEquals("(", tableColumnInfo0.getSchemaName());
      assertEquals("(", tableColumnInfo0.getCatalogName());
      assertEquals("(", tableColumnInfo0.getDefaultValue());
      assertEquals("(", tableColumnInfo0.getColumnName());
      assertEquals(-3, tableColumnInfo0.getDataType());
      assertEquals(-3, tableColumnInfo0.getOrdinalPosition());
      assertEquals("(", tableColumnInfo0.getRemarks());
      assertEquals("(", tableColumnInfo0.getTableName());
      assertEquals(-3, tableColumnInfo0.getColumnSize());
      assertEquals(0, tableColumnInfo0.isNullAllowed());
      assertEquals("(", tableColumnInfo0.getQualifiedName());
      assertEquals("(", tableColumnInfo0.getTypeName());
      assertEquals("(", tableColumnInfo0.getSimpleName());
      assertEquals(0, tableColumnInfo0.getDecimalDigits());
      assertEquals("(", tableColumnInfo0.isNullable());
      assertEquals("(", tableColumnInfo0.toString());
      assertEquals(0, tableColumnInfo0.getRadix());
      assertEquals(-3, tableColumnInfo0.getOctetLength());
      assertNotNull(tableColumnInfo0);
      
      tableColumnInfoArray0[0] = tableColumnInfo0;
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertEquals("(", tableColumnInfo0.getSchemaName());
      assertEquals("(", tableColumnInfo0.getCatalogName());
      assertEquals("(", tableColumnInfo0.getDefaultValue());
      assertEquals("(", tableColumnInfo0.getColumnName());
      assertEquals(-3, tableColumnInfo0.getDataType());
      assertEquals(-3, tableColumnInfo0.getOrdinalPosition());
      assertEquals("(", tableColumnInfo0.getRemarks());
      assertEquals("(", tableColumnInfo0.getTableName());
      assertEquals(-3, tableColumnInfo0.getColumnSize());
      assertEquals(0, tableColumnInfo0.isNullAllowed());
      assertEquals("(", tableColumnInfo0.getQualifiedName());
      assertEquals("(", tableColumnInfo0.getTypeName());
      assertEquals("(", tableColumnInfo0.getSimpleName());
      assertEquals(0, tableColumnInfo0.getDecimalDigits());
      assertEquals("(", tableColumnInfo0.isNullable());
      assertEquals("(", tableColumnInfo0.toString());
      assertEquals(0, tableColumnInfo0.getRadix());
      assertEquals(-3, tableColumnInfo0.getOctetLength());
      assertTrue(boolean0);
  }

  //Test case number: 37
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.fixCase(Lnet/sourceforge/squirrel_sql/client/session/ISession;Ljava/lang/String;)Ljava/lang/String;: I6 Branch 203 IFNULL L1768 - true
   */

  @Test
  public void test37()  throws Throwable  {
      String string0 = DBUtil.fixCase((ISession) null, (String) null);
      assertNull(string0);
  }

  //Test case number: 38
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getSchemaFromDbObject(Lnet/sourceforge/squirrel_sql/fw/sql/IDatabaseObjectInfo;Lnet/sourceforge/squirrel_sql/client/session/schemainfo/SchemaInfo;)Lnet/sourceforge/squirrel_sql/fw/sql/IDatabaseObjectInfo;: I9 Branch 224 IFEQ L2073 - true
   */

  @Test
  public void test38()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("9a',3*}rF-<", "9a',3*}rF-<", "9a',3*}rF-<", "9a',3*}rF-<", 2102, "9a',3*}rF-<", 2102, 2102, 2102, 2102, "9a',3*}rF-<", "9a',3*}rF-<", 2102, 2102, "9a',3*}rF-<");
      assertEquals("9a',3*}rF-<", tableColumnInfo0.getSimpleName());
      assertEquals(2102, tableColumnInfo0.getColumnSize());
      assertEquals(2102, tableColumnInfo0.getOrdinalPosition());
      assertEquals("9a',3*}rF-<", tableColumnInfo0.getTableName());
      assertEquals(2102, tableColumnInfo0.isNullAllowed());
      assertEquals(2102, tableColumnInfo0.getOctetLength());
      assertEquals(2102, tableColumnInfo0.getRadix());
      assertEquals(2102, tableColumnInfo0.getDataType());
      assertEquals("9a',3*}rF-<", tableColumnInfo0.getRemarks());
      assertEquals("9a',3*}rF-<", tableColumnInfo0.toString());
      assertEquals("9a',3*}rF-<", tableColumnInfo0.getQualifiedName());
      assertEquals("9a',3*}rF-<", tableColumnInfo0.getTypeName());
      assertEquals("9a',3*}rF-<", tableColumnInfo0.getCatalogName());
      assertEquals("9a',3*}rF-<", tableColumnInfo0.getDefaultValue());
      assertEquals("9a',3*}rF-<", tableColumnInfo0.getSchemaName());
      assertEquals(2102, tableColumnInfo0.getDecimalDigits());
      assertEquals("9a',3*}rF-<", tableColumnInfo0.getColumnName());
      assertEquals("9a',3*}rF-<", tableColumnInfo0.isNullable());
      assertNotNull(tableColumnInfo0);
      
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertNotNull(dBCopyPlugin0);
      
      IApplication iApplication0 = dBCopyPlugin0.getApplication();
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertNull(iApplication0);
      
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      assertFalse(schemaInfo0.isLoaded());
      assertEquals(1, schemaInfo0.TABLE_EXT_COLS_LOADED_IN_THIS_CALL);
      assertEquals(2, schemaInfo0.TABLE_EXT_COLS_LOADED_BEFORE);
      assertEquals(0, schemaInfo0.TABLE_EXT_NOT_A_TABLE);
      assertNotNull(schemaInfo0);
      
      // Undeclared exception!
      try {
        IDatabaseObjectInfo iDatabaseObjectInfo0 = DBUtil.getSchemaFromDbObject((IDatabaseObjectInfo) tableColumnInfo0, schemaInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SQLDatabaseMetaData == null
         //
      }
  }

  //Test case number: 39
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getCatSep(Lnet/sourceforge/squirrel_sql/client/session/ISession;)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test39()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNotNull(dBCopyPlugin0);
      
      ISession iSession0 = dBCopyPlugin0.getSourceSession();
      assertNull(dBCopyPlugin0.getPasteToTableName());
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
      assertEquals("readme.html", dBCopyPlugin0.getHelpFileName());
      assertEquals("dbcopy", dBCopyPlugin0.getInternalName());
      assertEquals("Dan Dragut", dBCopyPlugin0.getContributors());
      assertEquals("changes.txt", dBCopyPlugin0.getChangeLogFileName());
      assertFalse(dBCopyPlugin0.allowsSessionStartedInBackground());
      assertEquals("1.15", dBCopyPlugin0.getVersion());
      assertEquals("license.txt", dBCopyPlugin0.getLicenceFileName());
      assertEquals("DBCopy Plugin", dBCopyPlugin0.getDescriptiveName());
      assertNull(iSession0);
      
      // Undeclared exception!
      try {
        String string0 = DBUtil.getCatSep((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 40
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnList([Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Ljava/lang/String;: I17 Branch 180 IF_ICMPGE L1492 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.getColumnList([Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Ljava/lang/String;: I45 Branch 181 IF_ICMPGE L1497 - false
   */

  @Test
  public void test40()  throws Throwable  {
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[5];
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, (String) null, (String) null, (String) null, (-32), (String) null, (-32), (-32), (-32), (-32), (String) null, (String) null, (-32), (-32), (String) null);
      assertEquals(-32, tableColumnInfo0.isNullAllowed());
      assertEquals(-32, tableColumnInfo0.getRadix());
      assertNull(tableColumnInfo0.getRemarks());
      assertNull(tableColumnInfo0.getQualifiedName());
      assertEquals(-32, tableColumnInfo0.getDataType());
      assertEquals(-32, tableColumnInfo0.getOrdinalPosition());
      assertEquals(-32, tableColumnInfo0.getColumnSize());
      assertNull(tableColumnInfo0.toString());
      assertNull(tableColumnInfo0.getColumnName());
      assertNull(tableColumnInfo0.getDefaultValue());
      assertNull(tableColumnInfo0.getSchemaName());
      assertEquals(-32, tableColumnInfo0.getDecimalDigits());
      assertNull(tableColumnInfo0.getTableName());
      assertNull(tableColumnInfo0.isNullable());
      assertNull(tableColumnInfo0.getSimpleName());
      assertNull(tableColumnInfo0.getTypeName());
      assertEquals(-32, tableColumnInfo0.getOctetLength());
      assertNull(tableColumnInfo0.getCatalogName());
      assertNotNull(tableColumnInfo0);
      
      tableColumnInfoArray0[0] = tableColumnInfo0;
      // Undeclared exception!
      try {
        String string0 = DBUtil.getColumnList(tableColumnInfoArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 41
  /*
   * 3 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I11 Branch 48 IF_ICMPNE L622 - true
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I59 Branch 53 IF_ICMPNE L634 - false
   * Goal 3. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I65 Branch 54 IF_ICMPNE L634 - true
   */

  @Test
  public void test41()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent(16, (-3));
      assertFalse(boolean0);
  }

  //Test case number: 42
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.convertTableToObjectList(Ljava/util/List;)Ljava/util/List;: I17 Branch 222 IFEQ L2050 - true
   */

  @Test
  public void test42()  throws Throwable  {
      Vector<ITableInfo> vector0 = new Vector<ITableInfo>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      List<IDatabaseObjectInfo> list0 = DBUtil.convertTableToObjectList((List<ITableInfo>) vector0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(list0);
  }

  //Test case number: 43
  /*
   * 2 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isBinaryType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Z: I28 Branch 188 IF_ICMPEQ L1661 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isBinaryType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Z: I34 Branch 189 IF_ICMPNE L1661 - true
   */

  @Test
  public void test43()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("2!2<WI->:/qQ[R~j", "2!2<WI->:/qQ[R~j", "2!2<WI->:/qQ[R~j", "2!2<WI->:/qQ[R~j", 2122, "2!2<WI->:/qQ[R~j", 2122, 2122, 2122, 2122, "2!2<WI->:/qQ[R~j", "2!2<WI->:/qQ[R~j", 2122, 2122, "2!2<WI->:/qQ[R~j");
      assertEquals(2122, tableColumnInfo0.getOrdinalPosition());
      assertEquals(2122, tableColumnInfo0.getRadix());
      assertEquals("2!2<WI->:/qQ[R~j", tableColumnInfo0.isNullable());
      assertEquals("2!2<WI->:/qQ[R~j", tableColumnInfo0.getTableName());
      assertEquals(2122, tableColumnInfo0.isNullAllowed());
      assertEquals("2!2<WI->:/qQ[R~j", tableColumnInfo0.toString());
      assertEquals(2122, tableColumnInfo0.getOctetLength());
      assertEquals(2122, tableColumnInfo0.getDecimalDigits());
      assertEquals("2!2<WI->:/qQ[R~j", tableColumnInfo0.getDefaultValue());
      assertEquals(2122, tableColumnInfo0.getDataType());
      assertEquals(2122, tableColumnInfo0.getColumnSize());
      assertEquals("2!2<WI->:/qQ[R~j", tableColumnInfo0.getSchemaName());
      assertEquals("2!2<WI->:/qQ[R~j", tableColumnInfo0.getRemarks());
      assertEquals("2!2<WI->:/qQ[R~j", tableColumnInfo0.getColumnName());
      assertEquals("2!2<WI->:/qQ[R~j", tableColumnInfo0.getSimpleName());
      assertEquals("2!2<WI->:/qQ[R~j", tableColumnInfo0.getQualifiedName());
      assertEquals("2!2<WI->:/qQ[R~j", tableColumnInfo0.getTypeName());
      assertEquals("2!2<WI->:/qQ[R~j", tableColumnInfo0.getCatalogName());
      assertNotNull(tableColumnInfo0);
      
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertEquals(2122, tableColumnInfo0.getOrdinalPosition());
      assertEquals(2122, tableColumnInfo0.getRadix());
      assertEquals("2!2<WI->:/qQ[R~j", tableColumnInfo0.isNullable());
      assertEquals("2!2<WI->:/qQ[R~j", tableColumnInfo0.getTableName());
      assertEquals(2122, tableColumnInfo0.isNullAllowed());
      assertEquals("2!2<WI->:/qQ[R~j", tableColumnInfo0.toString());
      assertEquals(2122, tableColumnInfo0.getOctetLength());
      assertEquals(2122, tableColumnInfo0.getDecimalDigits());
      assertEquals("2!2<WI->:/qQ[R~j", tableColumnInfo0.getDefaultValue());
      assertEquals(2122, tableColumnInfo0.getDataType());
      assertEquals(2122, tableColumnInfo0.getColumnSize());
      assertEquals("2!2<WI->:/qQ[R~j", tableColumnInfo0.getSchemaName());
      assertEquals("2!2<WI->:/qQ[R~j", tableColumnInfo0.getRemarks());
      assertEquals("2!2<WI->:/qQ[R~j", tableColumnInfo0.getColumnName());
      assertEquals("2!2<WI->:/qQ[R~j", tableColumnInfo0.getSimpleName());
      assertEquals("2!2<WI->:/qQ[R~j", tableColumnInfo0.getQualifiedName());
      assertEquals("2!2<WI->:/qQ[R~j", tableColumnInfo0.getTypeName());
      assertEquals("2!2<WI->:/qQ[R~j", tableColumnInfo0.getCatalogName());
      assertFalse(boolean0);
  }

  //Test case number: 44
  /*
   * 3 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I41 Branch 51 IF_ICMPNE L630 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I47 Branch 52 IF_ICMPNE L630 - true
   * Goal 3. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I77 Branch 55 IF_ICMPNE L638 - true
   */

  @Test
  public void test44()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent(2, 2);
      assertTrue(boolean0);
  }

  //Test case number: 45
  /*
   * 6 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I11 Branch 48 IF_ICMPNE L622 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I23 Branch 49 IF_ICMPNE L626 - true
   * Goal 3. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I41 Branch 51 IF_ICMPNE L630 - true
   * Goal 4. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I59 Branch 53 IF_ICMPNE L634 - true
   * Goal 5. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I77 Branch 55 IF_ICMPNE L638 - false
   * Goal 6. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.typesAreEquivalent(II)Z: I83 Branch 56 IF_ICMPNE L638 - true
   */

  @Test
  public void test45()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent((-7), (-7));
      assertTrue(boolean0);
  }

  //Test case number: 46
  /*
   * 3 covered goals:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isBinaryType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Z: I16 Branch 186 IF_ICMPEQ L1661 - false
   * Goal 2. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isBinaryType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Z: I22 Branch 187 IF_ICMPEQ L1661 - false
   * Goal 3. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.isBinaryType(Lnet/sourceforge/squirrel_sql/fw/sql/TableColumnInfo;)Z: I28 Branch 188 IF_ICMPEQ L1661 - true
   */

  @Test
  public void test46()  throws Throwable  {
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[1];
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("(", "(", "(", "(", (-4), "(", (-4), 38, 38, 38, "(", "(", 38, 38, "(");
      assertEquals(-4, tableColumnInfo0.getColumnSize());
      assertEquals("(", tableColumnInfo0.isNullable());
      assertEquals("(", tableColumnInfo0.getTableName());
      assertEquals(38, tableColumnInfo0.getRadix());
      assertEquals("(", tableColumnInfo0.getColumnName());
      assertEquals(-4, tableColumnInfo0.getDataType());
      assertEquals("(", tableColumnInfo0.getRemarks());
      assertEquals("(", tableColumnInfo0.getQualifiedName());
      assertEquals(38, tableColumnInfo0.getDecimalDigits());
      assertEquals("(", tableColumnInfo0.getTypeName());
      assertEquals("(", tableColumnInfo0.getSimpleName());
      assertEquals("(", tableColumnInfo0.getCatalogName());
      assertEquals("(", tableColumnInfo0.getDefaultValue());
      assertEquals(38, tableColumnInfo0.getOctetLength());
      assertEquals("(", tableColumnInfo0.getSchemaName());
      assertEquals(38, tableColumnInfo0.isNullAllowed());
      assertEquals("(", tableColumnInfo0.toString());
      assertEquals(38, tableColumnInfo0.getOrdinalPosition());
      assertNotNull(tableColumnInfo0);
      
      tableColumnInfoArray0[0] = tableColumnInfo0;
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertEquals(-4, tableColumnInfo0.getColumnSize());
      assertEquals("(", tableColumnInfo0.isNullable());
      assertEquals("(", tableColumnInfo0.getTableName());
      assertEquals(38, tableColumnInfo0.getRadix());
      assertEquals("(", tableColumnInfo0.getColumnName());
      assertEquals(-4, tableColumnInfo0.getDataType());
      assertEquals("(", tableColumnInfo0.getRemarks());
      assertEquals("(", tableColumnInfo0.getQualifiedName());
      assertEquals(38, tableColumnInfo0.getDecimalDigits());
      assertEquals("(", tableColumnInfo0.getTypeName());
      assertEquals("(", tableColumnInfo0.getSimpleName());
      assertEquals("(", tableColumnInfo0.getCatalogName());
      assertEquals("(", tableColumnInfo0.getDefaultValue());
      assertEquals(38, tableColumnInfo0.getOctetLength());
      assertEquals("(", tableColumnInfo0.getSchemaName());
      assertEquals(38, tableColumnInfo0.isNullAllowed());
      assertEquals("(", tableColumnInfo0.toString());
      assertEquals(38, tableColumnInfo0.getOrdinalPosition());
      assertTrue(boolean0);
  }

  //Test case number: 47
  /*
   * 1 covered goal:
   * Goal 1. net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil.setPreferences(Lnet/sourceforge/squirrel_sql/plugins/dbcopy/prefs/DBCopyPreferenceBean;)V: root-Branch
   */

  @Test
  public void test47()  throws Throwable  {
      DBUtil.setPreferences((DBCopyPreferenceBean) null);
  }
}
