/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 16 01:09:05 GMT 2015
 */

package org.jcvi.jillion.core;

import static org.junit.Assert.*;
import org.junit.Test;
import edu.stanford.nlp.ling.Tag;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Spliterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 3 covered goals:
   * Goal 1. org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange.equals(Ljava/lang/Object;)Z: I7 Branch 87 IF_ACMPNE L1669 - true
   * Goal 2. org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange.equals(Ljava/lang/Object;)Z: I18 Branch 88 IFNONNULL L1672 - true
   * Goal 3. org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange.equals(Ljava/lang/Object;)Z: I32 Branch 89 IF_ACMPEQ L1675 - false
   */

  @Test
  public void test00()  throws Throwable  {
      Range range0 = Range.of(2499L);
      Tag tag0 = new Tag("");
      boolean boolean0 = range0.equals((Object) tag0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * Goal 1. org.jcvi.jillion.core.Range$UnsignedByteStartShortLengthRange.equals(Ljava/lang/Object;)Z: I7 Branch 10 IF_ACMPNE L1415 - false
   */

  @Test
  public void test01()  throws Throwable  {
      Range range0 = Range.of(0L);
      boolean boolean0 = range0.equals((Object) range0);
      assertTrue(boolean0);
  }

  //Test case number: 2
  /*
   * 3 covered goals:
   * Goal 1. org.jcvi.jillion.core.Range$ShortRange.equals(Ljava/lang/Object;)Z: I7 Branch 127 IF_ACMPNE L1243 - true
   * Goal 2. org.jcvi.jillion.core.Range$ShortRange.equals(Ljava/lang/Object;)Z: I18 Branch 128 IFNONNULL L1246 - true
   * Goal 3. org.jcvi.jillion.core.Range$ShortRange.equals(Ljava/lang/Object;)Z: I32 Branch 129 IF_ACMPEQ L1249 - false
   */

  @Test
  public void test02()  throws Throwable  {
      Range range0 = Range.of((-1347L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * Goal 1. org.jcvi.jillion.core.Range.split(J)Ljava/util/List;: I8 Branch 74 IFGE L947 - true
   * Goal 2. org.jcvi.jillion.core.Range.split(J)Ljava/util/List;: I44 Branch 75 IFGE L951 - false
   */

  @Test
  public void test03()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      List<Range> list0 = range0.split(32767L);
      assertFalse(range0.isEmpty());
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * Goal 1. org.jcvi.jillion.core.Range.endsBefore(Lorg/jcvi/jillion/core/Range;)Z: I37 Branch 72 IFGE L898 - false
   */

  @Test
  public void test04()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.of(2147483647L);
      boolean boolean0 = range0.endsBefore(range1);
      assertTrue(boolean0);
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * Goal 1. org.jcvi.jillion.core.Range.endsBefore(Lorg/jcvi/jillion/core/Range;)Z: I6 Branch 71 IFNONNULL L894 - true
   * Goal 2. org.jcvi.jillion.core.Range.endsBefore(Lorg/jcvi/jillion/core/Range;)Z: I37 Branch 72 IFGE L898 - true
   */

  @Test
  public void test05()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * Goal 1. org.jcvi.jillion.core.Range.intersection(Lorg/jcvi/jillion/core/Range;)Lorg/jcvi/jillion/core/Range;: I34 Branch 60 IFEQ L799 - false
   * Goal 2. org.jcvi.jillion.core.Range.startsBefore(Lorg/jcvi/jillion/core/Range;)Z: I37 Branch 70 IFGE L880 - false
   */

  @Test
  public void test06()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-215L), (-215L));
      Range range1 = Range.of(1427L, 1427L);
      Range range2 = range0.intersection(range1);
      boolean boolean0 = range2.startsBefore(range1);
      assertTrue(range0.isEmpty());
      assertTrue(boolean0);
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * Goal 1. org.jcvi.jillion.core.Range.startsBefore(Lorg/jcvi/jillion/core/Range;)Z: I6 Branch 69 IFNONNULL L876 - true
   * Goal 2. org.jcvi.jillion.core.Range.startsBefore(Lorg/jcvi/jillion/core/Range;)Z: I37 Branch 70 IFGE L880 - true
   */

  @Test
  public void test07()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-215L), (-215L));
      boolean boolean0 = range0.startsBefore(range0);
      assertTrue(range0.isEmpty());
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * Goal 1. org.jcvi.jillion.core.Range.complementFrom(Ljava/util/Collection;)Ljava/util/List;: I27 Branch 68 IFEQ L858 - true
   */

  @Test
  public void test08()  throws Throwable  {
      Range range0 = Range.of((-1347L));
      ArrayList<Range> arrayList0 = new ArrayList<Range>(0);
      List<Range> list0 = range0.complementFrom((Collection<Range>) arrayList0);
      assertFalse(range0.isEmpty());
  }

  //Test case number: 9
  /*
   * 8 covered goals:
   * Goal 1. org.jcvi.jillion.core.Range$Builder.<init>()V: root-Branch
   * Goal 2. org.jcvi.jillion.core.Range$UnsignedShortStartIntLengthRange.getBegin()J: root-Branch
   * Goal 3. org.jcvi.jillion.core.Range$UnsignedShortStartIntLengthRange.getEnd()J: root-Branch
   * Goal 4. org.jcvi.jillion.core.Range$UnsignedShortStartIntLengthRange.getLength()J: root-Branch
   * Goal 5. org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;: I78 Branch 35 IFGT L532 - true
   * Goal 6. org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;: I98 Branch 36 IFGT L535 - false
   * Goal 7. org.jcvi.jillion.core.Range.intersection(Lorg/jcvi/jillion/core/Range;)Lorg/jcvi/jillion/core/Range;: I83 Branch 62 IFGT L810 - false
   * Goal 8. org.jcvi.jillion.core.Range.complement(Lorg/jcvi/jillion/core/Range;)Ljava/util/List;: I13 Branch 63 IFEQ L832 - false
   */

  @Test
  public void test09()  throws Throwable  {
      Range range0 = Range.of(4908L);
      Range range1 = Range.of(32767L, 4294967295L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range0.isEmpty());
      assertNotSame(range1, range0);
      assertEquals(1, list0.size());
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * Goal 1. org.jcvi.jillion.core.Range.intersection(Lorg/jcvi/jillion/core/Range;)Lorg/jcvi/jillion/core/Range;: I46 Branch 61 IFEQ L802 - false
   */

  @Test
  public void test10()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-215L), (-215L));
      Range range1 = Range.of(1427L, 1427L);
      Range range2 = range1.intersection(range0);
      assertTrue(range0.isEmpty());
      assertSame(range0, range2);
  }

  //Test case number: 11
  /*
   * 4 covered goals:
   * Goal 1. org.jcvi.jillion.core.Range.intersects(Lorg/jcvi/jillion/core/Range;)Z: I34 Branch 55 IFEQ L768 - true
   * Goal 2. org.jcvi.jillion.core.Range.intersects(Lorg/jcvi/jillion/core/Range;)Z: I46 Branch 56 IFEQ L771 - true
   * Goal 3. org.jcvi.jillion.core.Range.intersects(Lorg/jcvi/jillion/core/Range;)Z: I63 Branch 57 IFGT L781 - false
   * Goal 4. org.jcvi.jillion.core.Range.intersects(Lorg/jcvi/jillion/core/Range;)Z: I72 Branch 58 IFLT L781 - false
   */

  @Test
  public void test11()  throws Throwable  {
      Range range0 = Range.of(0L, 478L);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  //Test case number: 12
  /*
   * 3 covered goals:
   * Goal 1. org.jcvi.jillion.core.Range.isSubRangeOf(Lorg/jcvi/jillion/core/Range;)Z: I6 Branch 51 IFNONNULL L746 - true
   * Goal 2. org.jcvi.jillion.core.Range.isSubRangeOf(Lorg/jcvi/jillion/core/Range;)Z: I37 Branch 52 IFLT L749 - false
   * Goal 3. org.jcvi.jillion.core.Range.isSubRangeOf(Lorg/jcvi/jillion/core/Range;)Z: I46 Branch 53 IFGT L749 - false
   */

  @Test
  public void test12()  throws Throwable  {
      Range range0 = Range.of((-1347L));
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * Goal 1. org.jcvi.jillion.core.Range.getBegin(Lorg/jcvi/jillion/core/Range$CoordinateSystem;)J: I6 Branch 49 IFNONNULL L696 - true
   */

  @Test
  public void test13()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
  }

  //Test case number: 14
  /*
   * 3 covered goals:
   * Goal 1. org.jcvi.jillion.core.Range$Comparators$2.compare(Lorg/jcvi/jillion/core/Range;Lorg/jcvi/jillion/core/Range;)I: I6 Branch 159 IFNONNULL L198 - true
   * Goal 2. org.jcvi.jillion.core.Range$Comparators$2.compare(Lorg/jcvi/jillion/core/Range;Lorg/jcvi/jillion/core/Range;)I: I33 Branch 160 IFNONNULL L201 - true
   * Goal 3. org.jcvi.jillion.core.Range$Comparators$2.compare(Lorg/jcvi/jillion/core/Range;Lorg/jcvi/jillion/core/Range;)I: I68 Branch 161 IFNE L210 - false
   */

  @Test
  public void test14()  throws Throwable  {
      Range.Comparators range_Comparators0 = Range.Comparators.DEPARTURE;
      Range range0 = Range.of((-1347L));
      int int0 = range_Comparators0.compare(range0, range0);
      assertFalse(range0.isEmpty());
  }

  //Test case number: 15
  /*
   * 7 covered goals:
   * Goal 1. org.jcvi.jillion.core.Range$EmptyLongRange.getEnd()J: root-Branch
   * Goal 2. org.jcvi.jillion.core.Range$EmptyLongRange.getBegin()J: root-Branch
   * Goal 3. org.jcvi.jillion.core.Range$EmptyLongRange.<init>(J)V: root-Branch
   * Goal 4. org.jcvi.jillion.core.Range$EmptyLongRange.isEmpty()Z: root-Branch
   * Goal 5. org.jcvi.jillion.core.Range.buildNewEmptyRange(J)Lorg/jcvi/jillion/core/Range;: I8 Branch 40 IFLT L553 - true
   * Goal 6. org.jcvi.jillion.core.Range.intersects(Lorg/jcvi/jillion/core/Range;)Z: I6 Branch 54 IFNONNULL L764 - true
   * Goal 7. org.jcvi.jillion.core.Range.intersects(Lorg/jcvi/jillion/core/Range;)Z: I34 Branch 55 IFEQ L768 - false
   */

  @Test
  public void test15()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-215L), (-215L));
      boolean boolean0 = range0.intersects(range0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  //Test case number: 16
  /*
   * 4 covered goals:
   * Goal 1. org.jcvi.jillion.core.Range$UnsignedByteStartLongLengthRange.getBegin()J: root-Branch
   * Goal 2. org.jcvi.jillion.core.Range$UnsignedByteStartLongLengthRange.getLength()J: root-Branch
   * Goal 3. org.jcvi.jillion.core.Range$UnsignedByteStartLongLengthRange.getEnd()J: root-Branch
   * Goal 4. org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;: I38 Branch 33 IFGT L525 - true
   */

  @Test
  public void test16()  throws Throwable  {
      Range range0 = Range.of(244L, 9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  //Test case number: 17
  /*
   * 6 covered goals:
   * Goal 1. org.jcvi.jillion.core.Range$LongStartIntLengthRange.getEnd()J: root-Branch
   * Goal 2. org.jcvi.jillion.core.Range$LongStartIntLengthRange.getLength()J: root-Branch
   * Goal 3. org.jcvi.jillion.core.Range$LongStartIntLengthRange.getBegin()J: root-Branch
   * Goal 4. org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;: I127 Branch 37 IFGT L540 - true
   * Goal 5. org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;: I163 Branch 39 IFGT L546 - false
   * Goal 6. org.jcvi.jillion.core.Range$LongStartIntLengthRange.equals(Ljava/lang/Object;)Z: I7 Branch 112 IF_ACMPNE L2105 - false
   */

  @Test
  public void test17()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      boolean boolean0 = range0.equals((Object) range0);
      assertFalse(range0.isEmpty());
  }

  //Test case number: 18
  /*
   * 6 covered goals:
   * Goal 1. org.jcvi.jillion.core.Range$LongRange.getEnd()J: root-Branch
   * Goal 2. org.jcvi.jillion.core.Range$LongRange.getBegin()J: root-Branch
   * Goal 3. org.jcvi.jillion.core.Range.buildNewSignedRange(JJ)Lorg/jcvi/jillion/core/Range;: I52 Branch 18 IFEQ L486 - true
   * Goal 4. org.jcvi.jillion.core.Range.canFitInSignedByte(JJ)Z: I8 Branch 19 IFGT L493 - true
   * Goal 5. org.jcvi.jillion.core.Range.canFitInSignedShort(JJ)Z: I8 Branch 23 IFGT L497 - true
   * Goal 6. org.jcvi.jillion.core.Range.canFitInSignedInt(JJ)Z: I8 Branch 27 IFGT L501 - true
   */

  @Test
  public void test18()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      assertFalse(range0.isEmpty());
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * Goal 1. org.jcvi.jillion.core.Range$CoordinateSystem.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range_CoordinateSystem0.toString();
      assertEquals("Residue Based", string0);
  }

  //Test case number: 20
  /*
   * 6 covered goals:
   * Goal 1. org.jcvi.jillion.core.Range$Comparators$4.compare(Lorg/jcvi/jillion/core/Range;Lorg/jcvi/jillion/core/Range;)I: root-Branch
   * Goal 2. org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange.getEnd()J: root-Branch
   * Goal 3. org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange.getLength()J: root-Branch
   * Goal 4. org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange.getBegin()J: root-Branch
   * Goal 5. org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;: I69 Branch 34 IFGT L531 - false
   * Goal 6. org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;: I78 Branch 35 IFGT L532 - false
   */

  @Test
  public void test20()  throws Throwable  {
      Range range0 = Range.of(2499L);
      Range.Comparators range_Comparators0 = Range.Comparators.SHORTEST_TO_LONGEST;
      int int0 = range_Comparators0.compare(range0, range0);
      assertFalse(range0.isEmpty());
  }

  //Test case number: 21
  /*
   * 15 covered goals:
   * Goal 1. org.jcvi.jillion.core.Range$EmptyByteRange.getBegin()J: root-Branch
   * Goal 2. org.jcvi.jillion.core.Range$EmptyByteRange.<init>(B)V: root-Branch
   * Goal 3. org.jcvi.jillion.core.Range$EmptyByteRange.getEnd()J: root-Branch
   * Goal 4. org.jcvi.jillion.core.Range$EmptyByteRange.isEmpty()Z: root-Branch
   * Goal 5. org.jcvi.jillion.core.Range$EmptyShortRange.isEmpty()Z: root-Branch
   * Goal 6. org.jcvi.jillion.core.Range$EmptyShortRange.<init>(S)V: root-Branch
   * Goal 7. org.jcvi.jillion.core.Range$EmptyShortRange.getEnd()J: root-Branch
   * Goal 8. org.jcvi.jillion.core.Range$EmptyShortRange.getBegin()J: root-Branch
   * Goal 9. org.jcvi.jillion.core.Range.buildNewEmptyRange(J)Lorg/jcvi/jillion/core/Range;: I17 Branch 41 IFGT L554 - false
   * Goal 10. org.jcvi.jillion.core.Range.buildNewEmptyRange(J)Lorg/jcvi/jillion/core/Range;: I35 Branch 42 IFGT L556 - false
   * Goal 11. org.jcvi.jillion.core.Range.complement(Lorg/jcvi/jillion/core/Range;)Ljava/util/List;: I13 Branch 63 IFEQ L832 - true
   * Goal 12. org.jcvi.jillion.core.Range.complement(Lorg/jcvi/jillion/core/Range;)Ljava/util/List;: I39 Branch 64 IFEQ L836 - false
   * Goal 13. org.jcvi.jillion.core.Range.complement(Lorg/jcvi/jillion/core/Range;)Ljava/util/List;: I57 Branch 65 IFNE L838 - true
   * Goal 14. org.jcvi.jillion.core.Range.complement(Lorg/jcvi/jillion/core/Range;)Ljava/util/List;: I73 Branch 66 IFEQ L843 - false
   * Goal 15. org.jcvi.jillion.core.Range.complement(Lorg/jcvi/jillion/core/Range;)Ljava/util/List;: I91 Branch 67 IFNE L845 - true
   */

  @Test
  public void test21()  throws Throwable  {
      Range range0 = Range.of((-128L), 65535L);
      Range range1 = Range.ofLength(3504L);
      List<Range> list0 = range1.complement(range0);
      assertEquals(0, list0.size());
  }

  //Test case number: 22
  /*
   * 2 covered goals:
   * Goal 1. org.jcvi.jillion.core.Range.convertIntoRange(Ljava/util/regex/Matcher;Lorg/jcvi/jillion/core/Range$CoordinateSystem;)Lorg/jcvi/jillion/core/Range;: root-Branch
   * Goal 2. org.jcvi.jillion.core.Range.parseRange(Ljava/lang/String;Lorg/jcvi/jillion/core/Range$CoordinateSystem;)Lorg/jcvi/jillion/core/Range;: I13 Branch 46 IFEQ L624 - false
   */

  @Test
  public void test22()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.parseRange("[ 0 .. 966 ]/SB", range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * Goal 1. org.jcvi.jillion.core.Range.asRange()Lorg/jcvi/jillion/core/Range;: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      Range range0 = Range.of((-128L), 65535L);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  //Test case number: 24
  /*
   * 4 covered goals:
   * Goal 1. org.jcvi.jillion.core.Range.parseRange(Ljava/lang/String;)Lorg/jcvi/jillion/core/Range;: root-Branch
   * Goal 2. org.jcvi.jillion.core.Range.parseRange(Ljava/lang/String;Lorg/jcvi/jillion/core/Range$CoordinateSystem;)Lorg/jcvi/jillion/core/Range;: I13 Branch 46 IFEQ L624 - true
   * Goal 3. org.jcvi.jillion.core.Range.parseRange(Ljava/lang/String;Lorg/jcvi/jillion/core/Range$CoordinateSystem;)Lorg/jcvi/jillion/core/Range;: I33 Branch 47 IFEQ L628 - true
   * Goal 4. org.jcvi.jillion.core.Range.parseRange(Ljava/lang/String;Lorg/jcvi/jillion/core/Range$CoordinateSystem;)Lorg/jcvi/jillion/core/Range;: I53 Branch 48 IFEQ L632 - true
   */

  @Test
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try {
        Range range0 = Range.parseRange("hap");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse hap into a Range
         //
      }
  }

  //Test case number: 25
  /*
   * 2 covered goals:
   * Goal 1. org.jcvi.jillion.core.Range.iterator()Ljava/util/Iterator;: root-Branch
   * Goal 2. org.jcvi.jillion.core.Range$RangeIterator.<init>(Lorg/jcvi/jillion/core/Range;)V: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Spliterator<Long> spliterator0 = range0.spliterator();
      assertNotNull(spliterator0);
  }

  //Test case number: 26
  /*
   * 11 covered goals:
   * Goal 1. org.jcvi.jillion.core.Range.getLength()J: root-Branch
   * Goal 2. org.jcvi.jillion.core.Range$IntRange.getBegin()J: root-Branch
   * Goal 3. org.jcvi.jillion.core.Range$IntRange.getEnd()J: root-Branch
   * Goal 4. org.jcvi.jillion.core.Range.buildNewSignedRange(JJ)Lorg/jcvi/jillion/core/Range;: I30 Branch 17 IFEQ L484 - true
   * Goal 5. org.jcvi.jillion.core.Range.buildNewSignedRange(JJ)Lorg/jcvi/jillion/core/Range;: I52 Branch 18 IFEQ L486 - false
   * Goal 6. org.jcvi.jillion.core.Range.canFitInSignedByte(JJ)Z: I22 Branch 21 IFGT L493 - true
   * Goal 7. org.jcvi.jillion.core.Range.canFitInSignedShort(JJ)Z: I22 Branch 25 IFGT L497 - true
   * Goal 8. org.jcvi.jillion.core.Range.canFitInSignedInt(JJ)Z: I8 Branch 27 IFGT L501 - false
   * Goal 9. org.jcvi.jillion.core.Range.canFitInSignedInt(JJ)Z: I15 Branch 28 IFLT L501 - false
   * Goal 10. org.jcvi.jillion.core.Range.canFitInSignedInt(JJ)Z: I22 Branch 29 IFGT L501 - false
   * Goal 11. org.jcvi.jillion.core.Range.canFitInSignedInt(JJ)Z: I29 Branch 30 IFLT L501 - false
   */

  @Test
  public void test26()  throws Throwable  {
      Range range0 = Range.of((-128L), 65535L);
      long long0 = range0.getLength();
      assertEquals(65664L, long0);
  }

  //Test case number: 27
  /*
   * 2 covered goals:
   * Goal 1. org.jcvi.jillion.core.Range$Builder.copy()Lorg/jcvi/jillion/core/Range$Builder;: root-Branch
   * Goal 2. org.jcvi.jillion.core.Range$Builder.<init>(Lorg/jcvi/jillion/core/Range$Builder;)V: root-Branch
   */

  @Test
  public void test27()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.copy();
      assertNotSame(range_Builder0, range_Builder1);
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * Goal 1. org.jcvi.jillion.core.Range$Builder.expandBegin(J)Lorg/jcvi/jillion/core/Range$Builder;: root-Branch
   */

  @Test
  public void test28()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(4908L);
      assertSame(range_Builder0, range_Builder1);
  }

  //Test case number: 29
  /*
   * 8 covered goals:
   * Goal 1. org.jcvi.jillion.core.Range$Builder.<init>(JJ)V: root-Branch
   * Goal 2. org.jcvi.jillion.core.Range$Builder.expandEnd(J)Lorg/jcvi/jillion/core/Range$Builder;: root-Branch
   * Goal 3. org.jcvi.jillion.core.Range.of(JJ)Lorg/jcvi/jillion/core/Range;: root-Branch
   * Goal 4. org.jcvi.jillion.core.Range$UnsignedByteStartShortLengthRange.getEnd()J: root-Branch
   * Goal 5. org.jcvi.jillion.core.Range$UnsignedByteStartShortLengthRange.getBegin()J: root-Branch
   * Goal 6. org.jcvi.jillion.core.Range$UnsignedByteStartShortLengthRange.getLength()J: root-Branch
   * Goal 7. org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;: I17 Branch 32 IFGT L522 - false
   * Goal 8. org.jcvi.jillion.core.Range$Builder.<init>(Lorg/jcvi/jillion/core/Range;)V: I10 Branch 4 IFNONNULL L2433 - true
   */

  @Test
  public void test29()  throws Throwable  {
      Range range0 = Range.of(0L, 478L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(966L);
      assertSame(range_Builder1, range_Builder0);
  }

  //Test case number: 30
  /*
   * 2 covered goals:
   * Goal 1. org.jcvi.jillion.core.Range$Builder.contractEnd(J)Lorg/jcvi/jillion/core/Range$Builder;: root-Branch
   * Goal 2. org.jcvi.jillion.core.Range$Builder.assertValidCoordinates(JJ)V: I16 Branch 2 IFGE L2403 - false
   */

  @Test
  public void test30()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 832L);
      // Undeclared exception!
      try {
        Range.Builder range_Builder1 = range_Builder0.contractEnd((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
      }
  }

  //Test case number: 31
  /*
   * 10 covered goals:
   * Goal 1. org.jcvi.jillion.core.Range$ShortRange.getBegin()J: root-Branch
   * Goal 2. org.jcvi.jillion.core.Range$ShortRange.getEnd()J: root-Branch
   * Goal 3. org.jcvi.jillion.core.Range.buildNewSignedRange(JJ)Lorg/jcvi/jillion/core/Range;: I8 Branch 16 IFEQ L482 - true
   * Goal 4. org.jcvi.jillion.core.Range.buildNewSignedRange(JJ)Lorg/jcvi/jillion/core/Range;: I30 Branch 17 IFEQ L484 - false
   * Goal 5. org.jcvi.jillion.core.Range.canFitInSignedByte(JJ)Z: I15 Branch 20 IFLT L493 - true
   * Goal 6. org.jcvi.jillion.core.Range.canFitInSignedShort(JJ)Z: I8 Branch 23 IFGT L497 - false
   * Goal 7. org.jcvi.jillion.core.Range.canFitInSignedShort(JJ)Z: I15 Branch 24 IFLT L497 - false
   * Goal 8. org.jcvi.jillion.core.Range.canFitInSignedShort(JJ)Z: I22 Branch 25 IFGT L497 - false
   * Goal 9. org.jcvi.jillion.core.Range.canFitInSignedShort(JJ)Z: I29 Branch 26 IFLT L497 - false
   * Goal 10. org.jcvi.jillion.core.Range.getEnd(Lorg/jcvi/jillion/core/Range$CoordinateSystem;)J: I6 Branch 50 IFNONNULL L719 - true
   */

  @Test
  public void test31()  throws Throwable  {
      Range range0 = Range.of((-1347L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-1347L), long0);
  }

  //Test case number: 32
  /*
   * 14 covered goals:
   * Goal 1. org.jcvi.jillion.core.Range$ByteRange.getEnd()J: root-Branch
   * Goal 2. org.jcvi.jillion.core.Range$ByteRange.getBegin()J: root-Branch
   * Goal 3. org.jcvi.jillion.core.Range.of(Lorg/jcvi/jillion/core/Range$CoordinateSystem;JJ)Lorg/jcvi/jillion/core/Range;: root-Branch
   * Goal 4. org.jcvi.jillion.core.Range$CoordinateSystem.getStart(J)J: root-Branch
   * Goal 5. org.jcvi.jillion.core.Range$CoordinateSystem.getEnd(J)J: root-Branch
   * Goal 6. org.jcvi.jillion.core.Range.buildNewRange(JJ)Lorg/jcvi/jillion/core/Range;: I8 Branch 15 IFLT L462 - true
   * Goal 7. org.jcvi.jillion.core.Range.buildNewSignedRange(JJ)Lorg/jcvi/jillion/core/Range;: I8 Branch 16 IFEQ L482 - false
   * Goal 8. org.jcvi.jillion.core.Range.canFitInSignedByte(JJ)Z: I8 Branch 19 IFGT L493 - false
   * Goal 9. org.jcvi.jillion.core.Range.canFitInSignedByte(JJ)Z: I15 Branch 20 IFLT L493 - false
   * Goal 10. org.jcvi.jillion.core.Range.canFitInSignedByte(JJ)Z: I22 Branch 21 IFGT L493 - false
   * Goal 11. org.jcvi.jillion.core.Range.canFitInSignedByte(JJ)Z: I29 Branch 22 IFLT L493 - false
   * Goal 12. org.jcvi.jillion.core.Range.split(J)Ljava/util/List;: I8 Branch 74 IFGE L947 - false
   * Goal 13. org.jcvi.jillion.core.Range$Builder.<init>(Lorg/jcvi/jillion/core/Range$CoordinateSystem;JJ)V: I10 Branch 1 IFNONNULL L2392 - true
   * Goal 14. org.jcvi.jillion.core.Range$Builder.assertValidCoordinates(JJ)V: I16 Branch 2 IFGE L2403 - true
   */

  @Test
  public void test32()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-87L), (-87L));
      // Undeclared exception!
      try {
        List<Range> list0 = range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
      }
  }

  //Test case number: 33
  /*
   * 45 covered goals:
   * Goal 1. org.jcvi.jillion.core.Range$EmptyIntRange.getEnd()J: root-Branch
   * Goal 2. org.jcvi.jillion.core.Range$EmptyIntRange.<init>(I)V: root-Branch
   * Goal 3. org.jcvi.jillion.core.Range$EmptyIntRange.getBegin()J: root-Branch
   * Goal 4. org.jcvi.jillion.core.Range$Builder.shift(J)Lorg/jcvi/jillion/core/Range$Builder;: root-Branch
   * Goal 5. org.jcvi.jillion.core.Range.createCacheKeyFor(Lorg/jcvi/jillion/core/Range;)Ljava/lang/String;: root-Branch
   * Goal 6. org.jcvi.jillion.core.Range.ofLength(J)Lorg/jcvi/jillion/core/Range;: root-Branch
   * Goal 7. org.jcvi.jillion.core.Range.isEmpty()Z: root-Branch
   * Goal 8. org.jcvi.jillion.core.Range.toString()Ljava/lang/String;: root-Branch
   * Goal 9. org.jcvi.jillion.core.Range.of(J)Lorg/jcvi/jillion/core/Range;: root-Branch
   * Goal 10. org.jcvi.jillion.core.Range$UnsignedByteStartIntLengthRange.getEnd()J: root-Branch
   * Goal 11. org.jcvi.jillion.core.Range$UnsignedByteStartIntLengthRange.getLength()J: root-Branch
   * Goal 12. org.jcvi.jillion.core.Range$UnsignedByteStartIntLengthRange.getBegin()J: root-Branch
   * Goal 13. org.jcvi.jillion.core.Range$CoordinateSystem.getAbbreviatedName()Ljava/lang/String;: root-Branch
   * Goal 14. org.jcvi.jillion.core.Range$CoordinateSystem.getLocalEnd(J)J: root-Branch
   * Goal 15. org.jcvi.jillion.core.Range$CoordinateSystem.getLocalStart(J)J: root-Branch
   * Goal 16. org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange.getBegin()J: root-Branch
   * Goal 17. org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange.getEnd()J: root-Branch
   * Goal 18. org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange.getLength()J: root-Branch
   * Goal 19. org.jcvi.jillion.core.Range.buildNewRange(JJ)Lorg/jcvi/jillion/core/Range;: I8 Branch 15 IFLT L462 - false
   * Goal 20. org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;: I8 Branch 31 IFGT L521 - true
   * Goal 21. org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;: I8 Branch 31 IFGT L521 - false
   * Goal 22. org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;: I17 Branch 32 IFGT L522 - true
   * Goal 23. org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;: I38 Branch 33 IFGT L525 - false
   * Goal 24. org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;: I69 Branch 34 IFGT L531 - true
   * Goal 25. org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;: I127 Branch 37 IFGT L540 - false
   * Goal 26. org.jcvi.jillion.core.Range.buildNewUnsignedRange(JJJ)Lorg/jcvi/jillion/core/Range;: I136 Branch 38 IFGT L541 - false
   * Goal 27. org.jcvi.jillion.core.Range.buildNewEmptyRange(J)Lorg/jcvi/jillion/core/Range;: I8 Branch 40 IFLT L553 - false
   * Goal 28. org.jcvi.jillion.core.Range.buildNewEmptyRange(J)Lorg/jcvi/jillion/core/Range;: I17 Branch 41 IFGT L554 - true
   * Goal 29. org.jcvi.jillion.core.Range.buildNewEmptyRange(J)Lorg/jcvi/jillion/core/Range;: I35 Branch 42 IFGT L556 - true
   * Goal 30. org.jcvi.jillion.core.Range.buildNewEmptyRange(J)Lorg/jcvi/jillion/core/Range;: I53 Branch 43 IFGT L558 - false
   * Goal 31. org.jcvi.jillion.core.Range.getFromCache(Lorg/jcvi/jillion/core/Range;)Lorg/jcvi/jillion/core/Range;: I6 Branch 44 IFNONNULL L566 - true
   * Goal 32. org.jcvi.jillion.core.Range.getFromCache(Lorg/jcvi/jillion/core/Range;)Lorg/jcvi/jillion/core/Range;: I45 Branch 45 IFNULL L575 - false
   * Goal 33. org.jcvi.jillion.core.Range.intersection(Lorg/jcvi/jillion/core/Range;)Lorg/jcvi/jillion/core/Range;: I6 Branch 59 IFNONNULL L796 - true
   * Goal 34. org.jcvi.jillion.core.Range.intersection(Lorg/jcvi/jillion/core/Range;)Lorg/jcvi/jillion/core/Range;: I34 Branch 60 IFEQ L799 - true
   * Goal 35. org.jcvi.jillion.core.Range.intersection(Lorg/jcvi/jillion/core/Range;)Lorg/jcvi/jillion/core/Range;: I46 Branch 61 IFEQ L802 - true
   * Goal 36. org.jcvi.jillion.core.Range.intersection(Lorg/jcvi/jillion/core/Range;)Lorg/jcvi/jillion/core/Range;: I83 Branch 62 IFGT L810 - true
   * Goal 37. org.jcvi.jillion.core.Range.toString(Lorg/jcvi/jillion/core/Range$CoordinateSystem;)Ljava/lang/String;: I6 Branch 73 IFNONNULL L920 - true
   * Goal 38. org.jcvi.jillion.core.Range$Builder.<init>(J)V: I12 Branch 3 IFGE L2418 - true
   * Goal 39. org.jcvi.jillion.core.Range$Builder.build()Lorg/jcvi/jillion/core/Range;: I18 Branch 5 IFGE L2550 - true
   * Goal 40. org.jcvi.jillion.core.Range$Builder.build()Lorg/jcvi/jillion/core/Range;: I48 Branch 6 IFLE L2553 - true
   * Goal 41. org.jcvi.jillion.core.Range$Builder.build()Lorg/jcvi/jillion/core/Range;: I48 Branch 6 IFLE L2553 - false
   * Goal 42. org.jcvi.jillion.core.Range$Builder.build()Lorg/jcvi/jillion/core/Range;: I66 Branch 7 IFGE L2555 - true
   * Goal 43. org.jcvi.jillion.core.Range$Builder.build()Lorg/jcvi/jillion/core/Range;: I99 Branch 8 IFLT L2563 - true
   * Goal 44. org.jcvi.jillion.core.Range$Builder.build()Lorg/jcvi/jillion/core/Range;: I99 Branch 8 IFLT L2563 - false
   * Goal 45. org.jcvi.jillion.core.Range$Builder.build()Lorg/jcvi/jillion/core/Range;: I125 Branch 9 IFNE L2565 - false
   */

  @Test
  public void test33()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.of(2147483647L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
  }
}
