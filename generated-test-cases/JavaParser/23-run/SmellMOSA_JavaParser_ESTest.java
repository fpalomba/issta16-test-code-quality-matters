/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 17 18:42:43 GMT 2015
 */

package com.soops.CEN4010.JMCA.JParser;

import static org.junit.Assert.*;
import org.junit.Test;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringBufferInputStream;
import java.io.StringReader;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class JavaParser_ESTest extends JavaParser_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.AnnotationTypeBody()V: I125 Branch 3062 IFEQ L6547 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.AnnotationTypeBody()V: I138 Branch 3063 IFEQ L6554 - false
   */

  @Test
  public void test000()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("M]~");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.AnnotationTypeBody();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.Literal()V: I173 Branch 1486 IFEQ L4142 - false
   */

  @Test
  public void test001()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.Literal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceType()V: I143 Branch 944 IFEQ L2252 - false
   */

  @Test
  public void test002()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(" =k");
      assertEquals(3, stringBufferInputStream0.available());
      assertNotNull(stringBufferInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) stringBufferInputStream0);
      assertEquals(3, stringBufferInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      JavaParser javaParser0 = new JavaParser((InputStream) bufferedInputStream0);
      assertEquals(3, stringBufferInputStream0.available());
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.ClassOrInterfaceType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 2.  Encountered: =
         //
      }
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.DoStatement()V: I111 Branch 2230 IFEQ L5353 - false
   */

  @Test
  public void test003()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.DoStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 4
  /*
   * 15 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I26 Branch 1462 IFEQ L4045 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I51 Branch 1463 IFEQ L4048 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I74 Branch 1464 IFEQ L4051 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I91 Branch 1465 IF_ICMPNE L4054 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I102 Branch 1466 LOOKUPSWITCH L4054 Case 77 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I102 Branch 1467 LOOKUPSWITCH L4054 Case 81 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I102 Branch 1468 LOOKUPSWITCH L4054 Case 85 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I102 Branch 1469 LOOKUPSWITCH L4054 Default-Case - true
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I192 Branch 1471 IFEQ L4073 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I220 Branch 1472 IFEQ L4079 - true
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I233 Branch 1473 IFEQ L4086 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I252 Branch 1474 IFEQ L4099 - true
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_26(I)Z: I21 Branch 3195 IFNE L6984 - true
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_27(I)Z: I21 Branch 3196 IFNE L6994 - true
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_28(I)Z: I21 Branch 3197 IFNE L7004 - true
   */

  @Test
  public void test004()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1139);
      assertNotNull(pipedReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader((Reader) pipedReader0);
      assertNotNull(pushbackReader0);
      
      JavaParser javaParser0 = new JavaParser((Reader) pushbackReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.PrimarySuffix();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberSelector()V: I89 Branch 1437 IFEQ L3932 - false
   */

  @Test
  public void test005()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.MemberSelector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 6
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.AnnotationTypeDeclaration(I)V: I67 Branch 2980 IFEQ L6466 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.AnnotationTypeDeclaration(I)V: I95 Branch 2981 IFEQ L6472 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.AnnotationTypeDeclaration(I)V: I108 Branch 2982 IFEQ L6479 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.AnnotationTypeDeclaration(I)V: I127 Branch 2983 IFEQ L6492 - true
   */

  @Test
  public void test006()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("*b^m$O7gRJ0:=]cSeIJ");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.AnnotationTypeDeclaration((-2072));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ReturnStatement()V: I115 Branch 2802 IFEQ L5810 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ReturnStatement()V: I128 Branch 2803 IFEQ L5817 - false
   */

  @Test
  public void test007()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Parse erro at lne ");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.ReturnStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I255 Branch 1460 IFEQ L4020 - true
   */

  @Test
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaParser javaParser0 = new JavaParser((InputStream) byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.PrimaryPrefix();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
         //
      }
  }

  //Test case number: 9
  /*
   * 9 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryExpression()V: I94 Branch 1432 IFEQ L3890 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryExpression()V: I107 Branch 1433 IFEQ L3897 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I164 Branch 1455 LOOKUPSWITCH L3996 Case 74 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I164 Branch 1456 LOOKUPSWITCH L3996 Default-Case - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I242 Branch 1459 IFEQ L4013 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I255 Branch 1460 IFEQ L4020 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_25()Z: I7 Branch 3712 IFEQ L9739 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_104()Z: I7 Branch 3895 IFEQ L10669 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_76()Z: I26 Branch 3897 IFEQ L10680 - false
   */

  @Test
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte)64, (int) (byte)64);
      assertEquals(-59, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader((InputStream) byteArrayInputStream0);
      assertEquals(-59, byteArrayInputStream0.available());
      assertNotNull(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader((Reader) inputStreamReader0);
      assertEquals(-59, byteArrayInputStream0.available());
      assertNotNull(bufferedReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaParser javaParser0 = new JavaParser((Reader) bufferedReader0);
      assertEquals(-59, byteArrayInputStream0.available());
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.PrimaryExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 10
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isPublic(I)Z: I8 Branch 3952 IFEQ L53 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.NameList()V: I123 Branch 1021 IFEQ L2590 - false
   */

  @Test
  public void test010()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      
      boolean boolean0 = javaParser_ModifierSet0.isPublic((-3399));
      assertTrue(boolean0);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      
      // Undeclared exception!
      try {
        javaParser0.NameList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.WhileStatement()V: I112 Branch 2226 IFEQ L5314 - true
   */

  @Test
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      JavaParser javaParser0 = new JavaParser((InputStream) byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.WhileStatement();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
         //
      }
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isFinal(I)Z: I8 Branch 3957 IFEQ L73 - true
   */

  @Test
  public void test012()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal(2508);
      assertFalse(boolean0);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ContinueStatement()V: I88 Branch 2709 IFEQ L5756 - false
   */

  @Test
  public void test013()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaParser javaParser0 = new JavaParser((InputStream) pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.ContinueStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 14
  /*
   * 97 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I26 Branch 2593 IFEQ L5560 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I43 Branch 2594 IF_ICMPNE L5563 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2595 TABLESWITCH L5563 Case 15 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2596 TABLESWITCH L5563 Case 16 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2597 TABLESWITCH L5563 Case 17 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2598 TABLESWITCH L5563 Case 18 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2599 TABLESWITCH L5563 Case 19 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2600 TABLESWITCH L5563 Case 20 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2601 TABLESWITCH L5563 Case 21 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2602 TABLESWITCH L5563 Case 22 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2603 TABLESWITCH L5563 Case 23 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2604 TABLESWITCH L5563 Case 24 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2605 TABLESWITCH L5563 Case 25 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2606 TABLESWITCH L5563 Case 26 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2607 TABLESWITCH L5563 Case 27 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2608 TABLESWITCH L5563 Case 28 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2609 TABLESWITCH L5563 Case 29 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2610 TABLESWITCH L5563 Case 30 - false
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2611 TABLESWITCH L5563 Case 31 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2612 TABLESWITCH L5563 Case 32 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2613 TABLESWITCH L5563 Case 33 - false
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2614 TABLESWITCH L5563 Case 34 - false
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2615 TABLESWITCH L5563 Case 35 - false
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2616 TABLESWITCH L5563 Case 36 - false
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2617 TABLESWITCH L5563 Case 37 - false
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2618 TABLESWITCH L5563 Case 38 - false
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2619 TABLESWITCH L5563 Case 39 - false
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2620 TABLESWITCH L5563 Case 40 - false
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2621 TABLESWITCH L5563 Case 41 - false
   * Goal 30. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2622 TABLESWITCH L5563 Case 42 - false
   * Goal 31. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2623 TABLESWITCH L5563 Case 43 - false
   * Goal 32. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2624 TABLESWITCH L5563 Case 44 - false
   * Goal 33. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2625 TABLESWITCH L5563 Case 45 - false
   * Goal 34. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2626 TABLESWITCH L5563 Case 46 - false
   * Goal 35. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2627 TABLESWITCH L5563 Case 47 - false
   * Goal 36. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2628 TABLESWITCH L5563 Case 48 - false
   * Goal 37. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2629 TABLESWITCH L5563 Case 49 - false
   * Goal 38. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2630 TABLESWITCH L5563 Case 50 - false
   * Goal 39. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2631 TABLESWITCH L5563 Case 51 - false
   * Goal 40. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2632 TABLESWITCH L5563 Case 52 - false
   * Goal 41. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2633 TABLESWITCH L5563 Case 53 - false
   * Goal 42. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2634 TABLESWITCH L5563 Case 54 - false
   * Goal 43. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2635 TABLESWITCH L5563 Case 55 - false
   * Goal 44. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2636 TABLESWITCH L5563 Case 56 - false
   * Goal 45. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2637 TABLESWITCH L5563 Case 57 - false
   * Goal 46. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2638 TABLESWITCH L5563 Case 58 - false
   * Goal 47. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2639 TABLESWITCH L5563 Case 59 - false
   * Goal 48. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2640 TABLESWITCH L5563 Case 60 - false
   * Goal 49. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2641 TABLESWITCH L5563 Case 61 - false
   * Goal 50. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2642 TABLESWITCH L5563 Case 62 - false
   * Goal 51. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2643 TABLESWITCH L5563 Case 63 - false
   * Goal 52. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2644 TABLESWITCH L5563 Case 64 - false
   * Goal 53. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2645 TABLESWITCH L5563 Case 65 - false
   * Goal 54. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2646 TABLESWITCH L5563 Case 66 - false
   * Goal 55. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2647 TABLESWITCH L5563 Case 67 - false
   * Goal 56. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2648 TABLESWITCH L5563 Case 68 - false
   * Goal 57. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2649 TABLESWITCH L5563 Case 69 - false
   * Goal 58. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2650 TABLESWITCH L5563 Case 70 - false
   * Goal 59. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2651 TABLESWITCH L5563 Case 71 - false
   * Goal 60. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2652 TABLESWITCH L5563 Case 72 - false
   * Goal 61. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2653 TABLESWITCH L5563 Case 73 - false
   * Goal 62. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2654 TABLESWITCH L5563 Case 74 - false
   * Goal 63. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2655 TABLESWITCH L5563 Case 75 - false
   * Goal 64. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2656 TABLESWITCH L5563 Case 76 - false
   * Goal 65. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2657 TABLESWITCH L5563 Case 77 - false
   * Goal 66. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2658 TABLESWITCH L5563 Case 78 - false
   * Goal 67. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2659 TABLESWITCH L5563 Case 79 - false
   * Goal 68. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2660 TABLESWITCH L5563 Case 80 - false
   * Goal 69. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2661 TABLESWITCH L5563 Case 81 - false
   * Goal 70. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2662 TABLESWITCH L5563 Case 82 - false
   * Goal 71. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2663 TABLESWITCH L5563 Case 83 - false
   * Goal 72. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2664 TABLESWITCH L5563 Case 84 - false
   * Goal 73. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2665 TABLESWITCH L5563 Case 85 - false
   * Goal 74. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2666 TABLESWITCH L5563 Case 86 - false
   * Goal 75. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2667 TABLESWITCH L5563 Case 87 - false
   * Goal 76. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2668 TABLESWITCH L5563 Case 88 - false
   * Goal 77. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2669 TABLESWITCH L5563 Case 89 - false
   * Goal 78. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2670 TABLESWITCH L5563 Case 90 - false
   * Goal 79. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2671 TABLESWITCH L5563 Case 91 - false
   * Goal 80. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2672 TABLESWITCH L5563 Case 92 - false
   * Goal 81. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2673 TABLESWITCH L5563 Case 93 - false
   * Goal 82. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2674 TABLESWITCH L5563 Case 94 - false
   * Goal 83. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2675 TABLESWITCH L5563 Case 95 - false
   * Goal 84. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2676 TABLESWITCH L5563 Case 96 - false
   * Goal 85. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2677 TABLESWITCH L5563 Case 97 - false
   * Goal 86. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2678 TABLESWITCH L5563 Case 98 - false
   * Goal 87. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2679 TABLESWITCH L5563 Case 99 - false
   * Goal 88. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2680 TABLESWITCH L5563 Case 100 - false
   * Goal 89. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2681 TABLESWITCH L5563 Default-Case - true
   * Goal 90. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I132 Branch 2684 IFEQ L5601 - true
   * Goal 91. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I145 Branch 2685 IFEQ L5608 - false
   * Goal 92. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_36(I)Z: I21 Branch 3205 IFNE L7084 - true
   * Goal 93. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_85()Z: I7 Branch 3219 IFEQ L7185 - false
   * Goal 94. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_60()Z: I12 Branch 3221 IFEQ L7201 - false
   * Goal 95. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_60()Z: I25 Branch 3222 IFEQ L7203 - false
   * Goal 96. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_36()Z: I13 Branch 3488 IFEQ L8583 - false
   * Goal 97. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_36()Z: I26 Branch 3489 IFEQ L8586 - false
   */

  @Test
  public void test014()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.ForInit();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isTransient(I)Z: I8 Branch 3961 IFEQ L89 - true
   */

  @Test
  public void test015()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      
      boolean boolean0 = javaParser_ModifierSet0.isTransient(0);
      assertFalse(boolean0);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
  }

  //Test case number: 16
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ExtendsList(Z)V: I139 Branch 121 IFEQ L647 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ExtendsList(Z)V: I167 Branch 122 IFEQ L653 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ExtendsList(Z)V: I180 Branch 123 IFEQ L660 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ExtendsList(Z)V: I199 Branch 124 IFEQ L673 - true
   */

  @Test
  public void test016()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("/\"KV>mG");
      assertEquals(8, stringBufferInputStream0.available());
      assertNotNull(stringBufferInputStream0);
      
      JavaParser javaParser0 = new JavaParser((InputStream) stringBufferInputStream0);
      assertEquals(8, stringBufferInputStream0.available());
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.ExtendsList(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: /
         //
      }
  }

  //Test case number: 17
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ImportDeclaration()V: I131 Branch 44 IFEQ L313 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ImportDeclaration()V: I159 Branch 45 IFEQ L319 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ImportDeclaration()V: I191 Branch 47 IFEQ L339 - true
   */

  @Test
  public void test017()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.ImportDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 18
  /*
   * 72 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I26 Branch 824 IFEQ L1952 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I55 Branch 825 IF_ICMPNE L1957 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 826 TABLESWITCH L1957 Case 15 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 827 TABLESWITCH L1957 Case 16 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 828 TABLESWITCH L1957 Case 17 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 829 TABLESWITCH L1957 Case 18 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 830 TABLESWITCH L1957 Case 19 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 831 TABLESWITCH L1957 Case 20 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 832 TABLESWITCH L1957 Case 21 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 833 TABLESWITCH L1957 Case 22 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 834 TABLESWITCH L1957 Case 23 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 835 TABLESWITCH L1957 Case 24 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 836 TABLESWITCH L1957 Case 25 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 837 TABLESWITCH L1957 Case 26 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 838 TABLESWITCH L1957 Case 27 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 839 TABLESWITCH L1957 Case 28 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 840 TABLESWITCH L1957 Case 29 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 841 TABLESWITCH L1957 Case 30 - false
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 842 TABLESWITCH L1957 Case 31 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 843 TABLESWITCH L1957 Case 32 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 844 TABLESWITCH L1957 Case 33 - false
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 845 TABLESWITCH L1957 Case 34 - false
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 846 TABLESWITCH L1957 Case 35 - false
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 847 TABLESWITCH L1957 Case 36 - false
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 848 TABLESWITCH L1957 Case 37 - false
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 849 TABLESWITCH L1957 Case 38 - false
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 850 TABLESWITCH L1957 Case 39 - false
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 851 TABLESWITCH L1957 Case 40 - false
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 852 TABLESWITCH L1957 Case 41 - false
   * Goal 30. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 853 TABLESWITCH L1957 Case 42 - false
   * Goal 31. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 854 TABLESWITCH L1957 Case 43 - false
   * Goal 32. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 855 TABLESWITCH L1957 Case 44 - false
   * Goal 33. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 856 TABLESWITCH L1957 Case 45 - false
   * Goal 34. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 857 TABLESWITCH L1957 Case 46 - false
   * Goal 35. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 858 TABLESWITCH L1957 Case 47 - false
   * Goal 36. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 859 TABLESWITCH L1957 Case 48 - false
   * Goal 37. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 860 TABLESWITCH L1957 Case 49 - false
   * Goal 38. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 861 TABLESWITCH L1957 Case 50 - false
   * Goal 39. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 862 TABLESWITCH L1957 Case 51 - false
   * Goal 40. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 863 TABLESWITCH L1957 Case 52 - false
   * Goal 41. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 864 TABLESWITCH L1957 Case 53 - false
   * Goal 42. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 865 TABLESWITCH L1957 Case 54 - false
   * Goal 43. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 866 TABLESWITCH L1957 Case 55 - false
   * Goal 44. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 867 TABLESWITCH L1957 Case 56 - false
   * Goal 45. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 868 TABLESWITCH L1957 Case 57 - false
   * Goal 46. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 869 TABLESWITCH L1957 Case 58 - false
   * Goal 47. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 870 TABLESWITCH L1957 Case 59 - false
   * Goal 48. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 871 TABLESWITCH L1957 Case 60 - false
   * Goal 49. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 872 TABLESWITCH L1957 Case 61 - false
   * Goal 50. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 873 TABLESWITCH L1957 Case 62 - false
   * Goal 51. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 874 TABLESWITCH L1957 Case 63 - false
   * Goal 52. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 875 TABLESWITCH L1957 Case 64 - false
   * Goal 53. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 876 TABLESWITCH L1957 Case 65 - false
   * Goal 54. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 877 TABLESWITCH L1957 Case 66 - false
   * Goal 55. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 878 TABLESWITCH L1957 Case 67 - false
   * Goal 56. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 879 TABLESWITCH L1957 Case 68 - false
   * Goal 57. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 880 TABLESWITCH L1957 Case 69 - false
   * Goal 58. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 881 TABLESWITCH L1957 Case 70 - false
   * Goal 59. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 882 TABLESWITCH L1957 Case 71 - false
   * Goal 60. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 883 TABLESWITCH L1957 Case 72 - false
   * Goal 61. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 884 TABLESWITCH L1957 Case 73 - false
   * Goal 62. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 885 TABLESWITCH L1957 Case 74 - false
   * Goal 63. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 886 TABLESWITCH L1957 Case 75 - false
   * Goal 64. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 887 TABLESWITCH L1957 Case 76 - false
   * Goal 65. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 888 TABLESWITCH L1957 Case 77 - false
   * Goal 66. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I66 Branch 889 TABLESWITCH L1957 Default-Case - true
   * Goal 67. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I147 Branch 892 IFEQ L1995 - false
   * Goal 68. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I175 Branch 893 IFEQ L2001 - true
   * Goal 69. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I188 Branch 894 IFEQ L2008 - false
   * Goal 70. com.soops.CEN4010.JMCA.JParser.JavaParser.ExplicitConstructorInvocation()V: I207 Branch 895 IFEQ L2021 - true
   * Goal 71. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_8(I)Z: I21 Branch 3177 IFNE L6804 - true
   * Goal 72. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_8()Z: I8 Branch 3223 IFEQ L7211 - false
   */

  @Test
  public void test018()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.ExplicitConstructorInvocation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 19
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isPublic(I)Z: I8 Branch 3952 IFEQ L53 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArgument()V: I157 Branch 972 IFEQ L2364 - false
   */

  @Test
  public void test019()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      
      boolean boolean0 = javaParser_ModifierSet0.isPublic(200);
      assertFalse(boolean0);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.TypeArgument();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 20
  /*
   * 168 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.Expression()V: I30 Branch 1024 IFEQ L2626 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.Expression()V: I45 Branch 1025 IFEQ L2659 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalExpression()V: I30 Branch 1068 IF_ICMPNE L2726 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalExpression()V: I41 Branch 1069 LOOKUPSWITCH L2726 Case 91 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalExpression()V: I41 Branch 1070 LOOKUPSWITCH L2726 Default-Case - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalExpression()V: I74 Branch 1071 IFEQ L2763 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalOrExpression()V: I30 Branch 1076 IF_ICMPNE L2777 - true
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalOrExpression()V: I41 Branch 1077 LOOKUPSWITCH L2777 Case 97 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalOrExpression()V: I41 Branch 1078 LOOKUPSWITCH L2777 Default-Case - true
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalOrExpression()V: I74 Branch 1079 IFEQ L2814 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalAndExpression()V: I30 Branch 1084 IF_ICMPNE L2828 - true
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalAndExpression()V: I41 Branch 1085 LOOKUPSWITCH L2828 Case 98 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalAndExpression()V: I41 Branch 1086 LOOKUPSWITCH L2828 Default-Case - true
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalAndExpression()V: I74 Branch 1087 IFEQ L2865 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.InclusiveOrExpression()V: I30 Branch 1092 IF_ICMPNE L2879 - true
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.InclusiveOrExpression()V: I41 Branch 1093 LOOKUPSWITCH L2879 Case 106 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParser.InclusiveOrExpression()V: I41 Branch 1094 LOOKUPSWITCH L2879 Default-Case - true
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParser.InclusiveOrExpression()V: I74 Branch 1095 IFEQ L2916 - false
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParser.ExclusiveOrExpression()V: I30 Branch 1100 IF_ICMPNE L2930 - true
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParser.ExclusiveOrExpression()V: I41 Branch 1101 LOOKUPSWITCH L2930 Case 107 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParser.ExclusiveOrExpression()V: I41 Branch 1102 LOOKUPSWITCH L2930 Default-Case - true
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParser.ExclusiveOrExpression()V: I74 Branch 1103 IFEQ L2967 - false
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParser.AndExpression()V: I30 Branch 1108 IF_ICMPNE L2981 - true
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParser.AndExpression()V: I41 Branch 1109 LOOKUPSWITCH L2981 Case 105 - false
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParser.AndExpression()V: I41 Branch 1110 LOOKUPSWITCH L2981 Default-Case - true
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParser.AndExpression()V: I74 Branch 1111 IFEQ L3018 - false
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParser.EqualityExpression()V: I30 Branch 1116 IF_ICMPNE L3032 - true
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParser.EqualityExpression()V: I41 Branch 1117 LOOKUPSWITCH L3032 Case 93 - false
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParser.EqualityExpression()V: I41 Branch 1118 LOOKUPSWITCH L3032 Case 96 - false
   * Goal 30. com.soops.CEN4010.JMCA.JParser.JavaParser.EqualityExpression()V: I41 Branch 1119 LOOKUPSWITCH L3032 Default-Case - true
   * Goal 31. com.soops.CEN4010.JMCA.JParser.JavaParser.EqualityExpression()V: I124 Branch 1124 IFEQ L3080 - false
   * Goal 32. com.soops.CEN4010.JMCA.JParser.JavaParser.InstanceOfExpression()V: I30 Branch 1129 IF_ICMPNE L3093 - true
   * Goal 33. com.soops.CEN4010.JMCA.JParser.JavaParser.InstanceOfExpression()V: I41 Branch 1130 LOOKUPSWITCH L3093 Case 39 - false
   * Goal 34. com.soops.CEN4010.JMCA.JParser.JavaParser.InstanceOfExpression()V: I41 Branch 1131 LOOKUPSWITCH L3093 Default-Case - true
   * Goal 35. com.soops.CEN4010.JMCA.JParser.JavaParser.InstanceOfExpression()V: I64 Branch 1132 IFEQ L3128 - false
   * Goal 36. com.soops.CEN4010.JMCA.JParser.JavaParser.RelationalExpression()V: I30 Branch 1137 IF_ICMPNE L3142 - true
   * Goal 37. com.soops.CEN4010.JMCA.JParser.JavaParser.RelationalExpression()V: I41 Branch 1138 LOOKUPSWITCH L3142 Case 88 - false
   * Goal 38. com.soops.CEN4010.JMCA.JParser.JavaParser.RelationalExpression()V: I41 Branch 1139 LOOKUPSWITCH L3142 Case 94 - false
   * Goal 39. com.soops.CEN4010.JMCA.JParser.JavaParser.RelationalExpression()V: I41 Branch 1140 LOOKUPSWITCH L3142 Case 95 - false
   * Goal 40. com.soops.CEN4010.JMCA.JParser.JavaParser.RelationalExpression()V: I41 Branch 1141 LOOKUPSWITCH L3142 Case 124 - false
   * Goal 41. com.soops.CEN4010.JMCA.JParser.JavaParser.RelationalExpression()V: I41 Branch 1142 LOOKUPSWITCH L3142 Default-Case - true
   * Goal 42. com.soops.CEN4010.JMCA.JParser.JavaParser.RelationalExpression()V: I148 Branch 1149 IFEQ L3198 - false
   * Goal 43. com.soops.CEN4010.JMCA.JParser.JavaParser.ShiftExpression()V: I30 Branch 1154 IFEQ L3212 - true
   * Goal 44. com.soops.CEN4010.JMCA.JParser.JavaParser.ShiftExpression()V: I123 Branch 1160 IFEQ L3260 - false
   * Goal 45. com.soops.CEN4010.JMCA.JParser.JavaParser.AdditiveExpression()V: I30 Branch 1165 IF_ICMPNE L3274 - true
   * Goal 46. com.soops.CEN4010.JMCA.JParser.JavaParser.AdditiveExpression()V: I41 Branch 1166 LOOKUPSWITCH L3274 Case 101 - false
   * Goal 47. com.soops.CEN4010.JMCA.JParser.JavaParser.AdditiveExpression()V: I41 Branch 1167 LOOKUPSWITCH L3274 Case 102 - false
   * Goal 48. com.soops.CEN4010.JMCA.JParser.JavaParser.AdditiveExpression()V: I41 Branch 1168 LOOKUPSWITCH L3274 Default-Case - true
   * Goal 49. com.soops.CEN4010.JMCA.JParser.JavaParser.AdditiveExpression()V: I124 Branch 1173 IFEQ L3322 - false
   * Goal 50. com.soops.CEN4010.JMCA.JParser.JavaParser.MultiplicativeExpression()V: I30 Branch 1178 IF_ICMPNE L3336 - true
   * Goal 51. com.soops.CEN4010.JMCA.JParser.JavaParser.MultiplicativeExpression()V: I41 Branch 1179 LOOKUPSWITCH L3336 Case 103 - false
   * Goal 52. com.soops.CEN4010.JMCA.JParser.JavaParser.MultiplicativeExpression()V: I41 Branch 1180 LOOKUPSWITCH L3336 Case 104 - false
   * Goal 53. com.soops.CEN4010.JMCA.JParser.JavaParser.MultiplicativeExpression()V: I41 Branch 1181 LOOKUPSWITCH L3336 Case 108 - false
   * Goal 54. com.soops.CEN4010.JMCA.JParser.JavaParser.MultiplicativeExpression()V: I41 Branch 1182 LOOKUPSWITCH L3336 Default-Case - true
   * Goal 55. com.soops.CEN4010.JMCA.JParser.JavaParser.MultiplicativeExpression()V: I136 Branch 1188 IFEQ L3388 - false
   * Goal 56. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1253 TABLESWITCH L3400 Case 74 - true
   * Goal 57. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1282 TABLESWITCH L3400 Default-Case - false
   * Goal 58. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I152 Branch 1287 IFEQ L3478 - false
   * Goal 59. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I26 Branch 1302 IF_ICMPNE L3573 - true
   * Goal 60. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I37 Branch 1303 LOOKUPSWITCH L3573 Case 89 - false
   * Goal 61. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I37 Branch 1304 LOOKUPSWITCH L3573 Case 90 - false
   * Goal 62. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I37 Branch 1305 LOOKUPSWITCH L3573 Default-Case - true
   * Goal 63. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I112 Branch 1310 IFEQ L3590 - true
   * Goal 64. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I129 Branch 1311 IF_ICMPNE L3593 - true
   * Goal 65. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1312 TABLESWITCH L3593 Case 15 - false
   * Goal 66. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1313 TABLESWITCH L3593 Case 16 - false
   * Goal 67. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1314 TABLESWITCH L3593 Case 17 - false
   * Goal 68. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1315 TABLESWITCH L3593 Case 18 - false
   * Goal 69. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1316 TABLESWITCH L3593 Case 19 - false
   * Goal 70. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1317 TABLESWITCH L3593 Case 20 - false
   * Goal 71. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1318 TABLESWITCH L3593 Case 21 - false
   * Goal 72. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1319 TABLESWITCH L3593 Case 22 - false
   * Goal 73. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1320 TABLESWITCH L3593 Case 23 - false
   * Goal 74. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1321 TABLESWITCH L3593 Case 24 - false
   * Goal 75. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1322 TABLESWITCH L3593 Case 25 - false
   * Goal 76. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1323 TABLESWITCH L3593 Case 26 - false
   * Goal 77. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1324 TABLESWITCH L3593 Case 27 - false
   * Goal 78. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1325 TABLESWITCH L3593 Case 28 - false
   * Goal 79. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1326 TABLESWITCH L3593 Case 29 - false
   * Goal 80. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1327 TABLESWITCH L3593 Case 30 - false
   * Goal 81. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1328 TABLESWITCH L3593 Case 31 - false
   * Goal 82. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1329 TABLESWITCH L3593 Case 32 - false
   * Goal 83. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1330 TABLESWITCH L3593 Case 33 - false
   * Goal 84. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1331 TABLESWITCH L3593 Case 34 - false
   * Goal 85. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1332 TABLESWITCH L3593 Case 35 - false
   * Goal 86. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1333 TABLESWITCH L3593 Case 36 - false
   * Goal 87. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1334 TABLESWITCH L3593 Case 37 - false
   * Goal 88. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1335 TABLESWITCH L3593 Case 38 - false
   * Goal 89. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1336 TABLESWITCH L3593 Case 39 - false
   * Goal 90. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1337 TABLESWITCH L3593 Case 40 - false
   * Goal 91. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1338 TABLESWITCH L3593 Case 41 - false
   * Goal 92. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1339 TABLESWITCH L3593 Case 42 - false
   * Goal 93. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1340 TABLESWITCH L3593 Case 43 - false
   * Goal 94. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1341 TABLESWITCH L3593 Case 44 - false
   * Goal 95. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1342 TABLESWITCH L3593 Case 45 - false
   * Goal 96. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1343 TABLESWITCH L3593 Case 46 - false
   * Goal 97. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1344 TABLESWITCH L3593 Case 47 - false
   * Goal 98. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1345 TABLESWITCH L3593 Case 48 - false
   * Goal 99. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1346 TABLESWITCH L3593 Case 49 - false
   * Goal 100. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1347 TABLESWITCH L3593 Case 50 - false
   * Goal 101. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1348 TABLESWITCH L3593 Case 51 - false
   * Goal 102. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1349 TABLESWITCH L3593 Case 52 - false
   * Goal 103. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1350 TABLESWITCH L3593 Case 53 - false
   * Goal 104. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1351 TABLESWITCH L3593 Case 54 - false
   * Goal 105. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1352 TABLESWITCH L3593 Case 55 - false
   * Goal 106. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1353 TABLESWITCH L3593 Case 56 - false
   * Goal 107. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1354 TABLESWITCH L3593 Case 57 - false
   * Goal 108. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1355 TABLESWITCH L3593 Case 58 - false
   * Goal 109. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1356 TABLESWITCH L3593 Case 59 - false
   * Goal 110. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1357 TABLESWITCH L3593 Case 60 - false
   * Goal 111. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1358 TABLESWITCH L3593 Case 61 - false
   * Goal 112. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1359 TABLESWITCH L3593 Case 62 - false
   * Goal 113. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1360 TABLESWITCH L3593 Case 63 - false
   * Goal 114. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1361 TABLESWITCH L3593 Case 64 - false
   * Goal 115. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1362 TABLESWITCH L3593 Case 65 - false
   * Goal 116. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1363 TABLESWITCH L3593 Case 66 - false
   * Goal 117. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1364 TABLESWITCH L3593 Case 67 - false
   * Goal 118. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1365 TABLESWITCH L3593 Case 68 - false
   * Goal 119. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1366 TABLESWITCH L3593 Case 69 - false
   * Goal 120. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1367 TABLESWITCH L3593 Case 70 - false
   * Goal 121. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1368 TABLESWITCH L3593 Case 71 - false
   * Goal 122. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1369 TABLESWITCH L3593 Case 72 - false
   * Goal 123. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1370 TABLESWITCH L3593 Case 73 - false
   * Goal 124. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1371 TABLESWITCH L3593 Case 74 - true
   * Goal 125. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1372 TABLESWITCH L3593 Case 75 - false
   * Goal 126. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1373 TABLESWITCH L3593 Case 76 - false
   * Goal 127. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1374 TABLESWITCH L3593 Case 77 - false
   * Goal 128. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1375 TABLESWITCH L3593 Default-Case - false
   * Goal 129. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I169 Branch 1376 IFEQ L3650 - false
   * Goal 130. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I26 Branch 1440 IF_ICMPNE L3964 - true
   * Goal 131. com.soops.CEN4010.JMCA.JParser.JavaParser.ArgumentList()V: I30 Branch 1592 IF_ICMPNE L4288 - true
   * Goal 132. com.soops.CEN4010.JMCA.JParser.JavaParser.ArgumentList()V: I41 Branch 1593 LOOKUPSWITCH L4288 Case 84 - false
   * Goal 133. com.soops.CEN4010.JMCA.JParser.JavaParser.ArgumentList()V: I41 Branch 1594 LOOKUPSWITCH L4288 Default-Case - true
   * Goal 134. com.soops.CEN4010.JMCA.JParser.JavaParser.ArgumentList()V: I74 Branch 1595 IFEQ L4325 - false
   * Goal 135. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_16(I)Z: I21 Branch 3185 IFNE L6884 - true
   * Goal 136. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_17(I)Z: I21 Branch 3186 IFNE L6894 - true
   * Goal 137. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_20(I)Z: I21 Branch 3189 IFNE L6924 - true
   * Goal 138. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_71()Z: I21 Branch 3405 IF_ICMPNE L8182 - true
   * Goal 139. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_71()Z: I53 Branch 3407 IFEQ L8185 - true
   * Goal 140. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_72()Z: I21 Branch 3421 IF_ICMPNE L8257 - true
   * Goal 141. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_72()Z: I53 Branch 3423 IFEQ L8260 - true
   * Goal 142. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_100()Z: I8 Branch 3767 IFEQ L9999 - false
   * Goal 143. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_99()Z: I8 Branch 3778 IFEQ L10038 - false
   * Goal 144. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_21()Z: I8 Branch 3782 IFEQ L10054 - false
   * Goal 145. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_73()Z: I12 Branch 3784 IFEQ L10066 - false
   * Goal 146. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_73()Z: I25 Branch 3785 IFEQ L10068 - false
   * Goal 147. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_73()Z: I38 Branch 3786 IFEQ L10070 - false
   * Goal 148. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_20()Z: I7 Branch 3787 IFEQ L10079 - false
   * Goal 149. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_19()Z: I7 Branch 3788 IFEQ L10086 - false
   * Goal 150. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_18()Z: I7 Branch 3802 IFEQ L10162 - false
   * Goal 151. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_17()Z: I13 Branch 3810 IFEQ L10206 - false
   * Goal 152. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_17()Z: I26 Branch 3811 IFEQ L10208 - false
   * Goal 153. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_17()Z: I39 Branch 3812 IFEQ L10210 - false
   * Goal 154. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_69()Z: I13 Branch 3871 IFEQ L10557 - false
   * Goal 155. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_69()Z: I27 Branch 3872 IFEQ L10559 - false
   * Goal 156. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_69()Z: I41 Branch 3873 IFEQ L10561 - false
   * Goal 157. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_69()Z: I55 Branch 3874 IFEQ L10563 - false
   * Goal 158. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_69()Z: I69 Branch 3875 IFEQ L10565 - false
   * Goal 159. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_69()Z: I83 Branch 3876 IFEQ L10567 - false
   * Goal 160. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_69()Z: I97 Branch 3877 IFEQ L10569 - false
   * Goal 161. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_69()Z: I111 Branch 3878 IFEQ L10571 - false
   * Goal 162. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_69()Z: I125 Branch 3879 IFEQ L10573 - false
   * Goal 163. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_69()Z: I139 Branch 3880 IFEQ L10575 - false
   * Goal 164. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_69()Z: I153 Branch 3881 IFEQ L10577 - false
   * Goal 165. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_69()Z: I167 Branch 3882 IFEQ L10579 - false
   * Goal 166. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_16()Z: I7 Branch 3883 IFEQ L10597 - false
   * Goal 167. com.soops.CEN4010.JMCA.JParser.JavaParser.getToken(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I7 Branch 3947 IFEQ L11001 - false
   * Goal 168. com.soops.CEN4010.JMCA.JParser.JavaParser.getToken(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I37 Branch 3949 IFNULL L11003 - false
   */

  @Test
  public void test020()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("useStochasticQN");
      assertEquals(15, stringBufferInputStream0.available());
      assertNotNull(stringBufferInputStream0);
      
      JavaParser javaParser0 = new JavaParser((InputStream) stringBufferInputStream0);
      assertEquals(15, stringBufferInputStream0.available());
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.ArgumentList();
      assertEquals(0, stringBufferInputStream0.available());
      assertFalse(javaParser0.lookingAhead);
  }

  //Test case number: 21
  /*
   * 7 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ConstructorDeclaration()V: I26 Branch 723 IF_ICMPNE L1839 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ConstructorDeclaration()V: I37 Branch 724 LOOKUPSWITCH L1839 Case 88 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ConstructorDeclaration()V: I37 Branch 725 LOOKUPSWITCH L1839 Default-Case - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ConstructorDeclaration()V: I186 Branch 820 IFEQ L1913 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.ConstructorDeclaration()V: I214 Branch 821 IFEQ L1919 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.ConstructorDeclaration()V: I227 Branch 822 IFEQ L1926 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.ConstructorDeclaration()V: I246 Branch 823 IFEQ L1939 - true
   */

  @Test
  public void test021()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.ConstructorDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 22
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.DoStatement()V: I83 Branch 2229 IFEQ L5347 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.DoStatement()V: I111 Branch 2230 IFEQ L5353 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.DoStatement()V: I124 Branch 2231 IFEQ L5360 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.DoStatement()V: I143 Branch 2232 IFEQ L5373 - true
   */

  @Test
  public void test022()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("*r0!|>7<k *ujeFs9V");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.DoStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 23
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.Arguments()V: I87 Branch 1588 IFEQ L4248 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.Arguments()V: I115 Branch 1589 IFEQ L4254 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.Arguments()V: I128 Branch 1590 IFEQ L4261 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.Arguments()V: I147 Branch 1591 IFEQ L4274 - true
   */

  @Test
  public void test023()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaParser javaParser0 = new JavaParser((InputStream) pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.Arguments();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 24
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ForStatement()V: I240 Branch 2589 IFEQ L5522 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ForStatement()V: I268 Branch 2590 IFEQ L5528 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ForStatement()V: I281 Branch 2591 IFEQ L5535 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ForStatement()V: I300 Branch 2592 IFEQ L5548 - true
   */

  @Test
  public void test024()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Java Parser Version 1.1:  Encountered errors during parse.");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.ForStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 25
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ArrayInitializer()V: I136 Branch 665 IFEQ L1558 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ArrayInitializer()V: I164 Branch 666 IFEQ L1564 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ArrayInitializer()V: I196 Branch 668 IFEQ L1584 - true
   */

  @Test
  public void test025()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.ArrayInitializer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isVolatile(I)Z: I8 Branch 3962 IFEQ L93 - true
   */

  @Test
  public void test026()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      
      boolean boolean0 = javaParser_ModifierSet0.isVolatile(38);
      assertFalse(boolean0);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.disable_tracing()V: root-Branch
   */

  @Test
  public void test027()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("pehhjauK");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.disable_tracing();
      assertFalse(javaParser0.lookingAhead);
  }

  //Test case number: 28
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ThrowStatement()V: I61 Branch 2806 IFEQ L5846 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ThrowStatement()V: I89 Branch 2807 IFEQ L5852 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ThrowStatement()V: I102 Branch 2808 IFEQ L5859 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ThrowStatement()V: I121 Branch 2809 IFEQ L5872 - true
   */

  @Test
  public void test028()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("bisequenceTestOutputEn");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.ThrowStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isProtected(I)Z: I8 Branch 3953 IFEQ L57 - false
   */

  @Test
  public void test029()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      
      boolean boolean0 = javaParser_ModifierSet0.isProtected(1747);
      assertTrue(boolean0);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
  }

  //Test case number: 30
  /*
   * 11 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalAndExpression()V: I123 Branch 1089 IFEQ L2845 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.InclusiveOrExpression()V: I123 Branch 1097 IFEQ L2896 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ExclusiveOrExpression()V: I123 Branch 1105 IFEQ L2947 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.AndExpression()V: I123 Branch 1113 IFEQ L2998 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.EqualityExpression()V: I173 Branch 1126 IFEQ L3060 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.InstanceOfExpression()V: I113 Branch 1134 IFEQ L3108 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.RelationalExpression()V: I197 Branch 1151 IFEQ L3178 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.ShiftExpression()V: I172 Branch 1162 IFEQ L3240 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.AdditiveExpression()V: I173 Branch 1175 IFEQ L3302 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.MultiplicativeExpression()V: I185 Branch 1190 IFEQ L3368 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I201 Branch 1289 IFEQ L3458 - false
   */

  @Test
  public void test030()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, 0);
      assertNotNull(javaParserTokenManager0);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.ConditionalAndExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 31
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.AnnotationTypeBody()V: I97 Branch 3061 IFEQ L6541 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.AnnotationTypeBody()V: I125 Branch 3062 IFEQ L6547 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.AnnotationTypeBody()V: I157 Branch 3064 IFEQ L6567 - true
   */

  @Test
  public void test031()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.AnnotationTypeBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 32
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.MarkerAnnotation()V: I55 Branch 2853 IFEQ L6146 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.MarkerAnnotation()V: I83 Branch 2854 IFEQ L6152 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.MarkerAnnotation()V: I96 Branch 2855 IFEQ L6159 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.MarkerAnnotation()V: I115 Branch 2856 IFEQ L6172 - true
   */

  @Test
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader((InputStream) byteArrayInputStream0, charset0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertNotNull(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      JavaParser javaParser0 = new JavaParser((Reader) inputStreamReader0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.MarkerAnnotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 33
  /*
   * 8 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.WildcardBounds()V: I26 Branch 975 IF_ICMPNE L2396 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.WildcardBounds()V: I37 Branch 976 LOOKUPSWITCH L2396 Case 29 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.WildcardBounds()V: I37 Branch 977 LOOKUPSWITCH L2396 Case 54 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.WildcardBounds()V: I37 Branch 978 LOOKUPSWITCH L2396 Default-Case - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.WildcardBounds()V: I109 Branch 980 IFEQ L2410 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.WildcardBounds()V: I137 Branch 981 IFEQ L2416 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.WildcardBounds()V: I150 Branch 982 IFEQ L2423 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.WildcardBounds()V: I169 Branch 983 IFEQ L2436 - true
   */

  @Test
  public void test033()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      JavaParser javaParser0 = new JavaParser((InputStream) pushbackInputStream0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.WildcardBounds();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 34
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isSynchronized(I)Z: I8 Branch 3960 IFEQ L85 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.LabeledStatement()V: I102 Branch 1739 IFEQ L4687 - true
   */

  @Test
  public void test034()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      
      boolean boolean0 = javaParser_ModifierSet0.isSynchronized(0);
      assertFalse(boolean0);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 0, (int) 'J');
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'J', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParser javaParser0 = new JavaParser((Reader) charArrayReader0);
      assertNotNull(javaParser0);
      assertArrayEquals(new char[] {'J', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.LabeledStatement();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\" (0), after : \"\"
         //
      }
  }

  //Test case number: 35
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_consume_token(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I56 Branch 3938 IF_ICMPGT L10947 - true
   */

  @Test
  public void test035()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("/\"KV>mG");
      assertEquals(8, stringBufferInputStream0.available());
      assertNotNull(stringBufferInputStream0);
      
      JavaParser javaParser0 = new JavaParser((InputStream) stringBufferInputStream0);
      assertEquals(8, stringBufferInputStream0.available());
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.ArgumentList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: /
         //
      }
  }

  //Test case number: 36
  /*
   * 5 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I176 Branch 936 IFEQ L2193 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceType()V: I102 Branch 942 IFEQ L2239 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceType()V: I130 Branch 943 IFEQ L2245 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceType()V: I143 Branch 944 IFEQ L2252 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceType()V: I162 Branch 945 IFEQ L2265 - true
   */

  @Test
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)111;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)111, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaParser javaParser0 = new JavaParser((InputStream) byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte)111, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.ReferenceType();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\" (0), after : \"\"
         //
      }
  }

  //Test case number: 37
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclaration(I)V: I214 Branch 682 IFEQ L1638 - true
   */

  @Test
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaParser javaParser0 = new JavaParser((InputStream) byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.MethodDeclaration((int) (byte) (-15));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
         //
      }
  }

  //Test case number: 38
  /*
   * 11 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ArrayDimsAndInits()V: I26 Branch 1619 IFEQ L4420 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ArrayDimsAndInits()V: I89 Branch 1622 IF_ICMPNE L4441 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ArrayDimsAndInits()V: I100 Branch 1623 LOOKUPSWITCH L4441 Case 81 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ArrayDimsAndInits()V: I100 Branch 1624 LOOKUPSWITCH L4441 Default-Case - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.ArrayDimsAndInits()V: I194 Branch 1629 IFEQ L4463 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.ArrayDimsAndInits()V: I222 Branch 1630 IFEQ L4469 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.ArrayDimsAndInits()V: I235 Branch 1631 IFEQ L4476 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.ArrayDimsAndInits()V: I254 Branch 1632 IFEQ L4489 - true
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_32(I)Z: I21 Branch 3201 IFNE L7044 - true
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_30()Z: I8 Branch 3659 IFEQ L9453 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_32()Z: I7 Branch 3665 IFEQ L9484 - false
   */

  @Test
  public void test038()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("A class cannot extend more than one other class");
      assertEquals(47, stringBufferInputStream0.available());
      assertNotNull(stringBufferInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) stringBufferInputStream0);
      assertEquals(47, stringBufferInputStream0.available());
      assertNotNull(dataInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) dataInputStream0);
      assertEquals(47, stringBufferInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader((InputStream) pushbackInputStream0, charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(47, stringBufferInputStream0.available());
      assertNotNull(inputStreamReader0);
      
      JavaParser javaParser0 = new JavaParser((Reader) inputStreamReader0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(47, stringBufferInputStream0.available());
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.ArrayDimsAndInits();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: A
         //
      }
  }

  //Test case number: 39
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.WhileStatement()V: I99 Branch 2225 IFEQ L5307 - false
   */

  @Test
  public void test039()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.WhileStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 40
  /*
   * 7 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I26 Branch 1943 IF_ICMPNE L4967 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I197 Branch 2104 IFEQ L5047 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I225 Branch 2105 IFEQ L5053 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I257 Branch 2107 IFEQ L5073 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpressionList()V: I95 Branch 2691 IFEQ L5646 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpressionList()V: I123 Branch 2692 IFEQ L5652 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpressionList()V: I155 Branch 2694 IFEQ L5672 - true
   */

  @Test
  public void test040()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.StatementExpressionList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 41
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isVolatile(I)Z: I8 Branch 3962 IFEQ L93 - false
   */

  @Test
  public void test041()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      
      boolean boolean0 = javaParser_ModifierSet0.isVolatile((-2550));
      assertTrue(boolean0);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
  }

  //Test case number: 42
  /*
   * 12 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.Expression()V: I66 Branch 1026 IFEQ L2633 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.Expression()V: I94 Branch 1027 IFEQ L2639 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.Expression()V: I107 Branch 1028 IFEQ L2646 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.Expression()V: I126 Branch 1029 IFEQ L2659 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalExpression()V: I95 Branch 1072 IFEQ L2737 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalExpression()V: I123 Branch 1073 IFEQ L2743 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalExpression()V: I136 Branch 1074 IFEQ L2750 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalExpression()V: I155 Branch 1075 IFEQ L2763 - true
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.ArgumentList()V: I95 Branch 1596 IFEQ L4299 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.ArgumentList()V: I123 Branch 1597 IFEQ L4305 - true
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.ArgumentList()V: I136 Branch 1598 IFEQ L4312 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.ArgumentList()V: I155 Branch 1599 IFEQ L4325 - true
   */

  @Test
  public void test042()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("*b^m$O7gRa0:=]cSeIJ");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.ArgumentList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 43
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.main([Ljava/lang/String;)V: I11 Branch 1 IFNE L121 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.main([Ljava/lang/String;)V: I36 Branch 2 IF_ICMPNE L125 - true
   */

  @Test
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JavaParser.main(stringArray0);
  }

  //Test case number: 44
  /*
   * 5 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isPrivate(I)Z: I8 Branch 3954 IFEQ L61 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.WhileStatement()V: I71 Branch 2224 IFEQ L5301 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.WhileStatement()V: I99 Branch 2225 IFEQ L5307 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.WhileStatement()V: I112 Branch 2226 IFEQ L5314 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.WhileStatement()V: I131 Branch 2227 IFEQ L5327 - true
   */

  @Test
  public void test044()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("edu.stanford.nlp.trees.Treebank");
      assertEquals(31, stringBufferInputStream0.available());
      assertNotNull(stringBufferInputStream0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader((InputStream) stringBufferInputStream0);
      assertEquals(31, stringBufferInputStream0.available());
      assertNotNull(inputStreamReader0);
      
      boolean boolean0 = javaParser_ModifierSet0.isPrivate(1918);
      assertTrue(boolean0);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      
      JavaParser javaParser0 = new JavaParser((Reader) inputStreamReader0);
      assertEquals(31, stringBufferInputStream0.available());
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.WhileStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: edu
         //
      }
  }

  //Test case number: 45
  /*
   * 138 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalOrExpression()V: I95 Branch 1080 IFEQ L2788 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalOrExpression()V: I123 Branch 1081 IFEQ L2794 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalOrExpression()V: I136 Branch 1082 IFEQ L2801 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalOrExpression()V: I155 Branch 1083 IFEQ L2814 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalAndExpression()V: I95 Branch 1088 IFEQ L2839 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalAndExpression()V: I123 Branch 1089 IFEQ L2845 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalAndExpression()V: I136 Branch 1090 IFEQ L2852 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalAndExpression()V: I155 Branch 1091 IFEQ L2865 - true
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.InclusiveOrExpression()V: I95 Branch 1096 IFEQ L2890 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.InclusiveOrExpression()V: I123 Branch 1097 IFEQ L2896 - true
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.InclusiveOrExpression()V: I136 Branch 1098 IFEQ L2903 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.InclusiveOrExpression()V: I155 Branch 1099 IFEQ L2916 - true
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.ExclusiveOrExpression()V: I95 Branch 1104 IFEQ L2941 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.ExclusiveOrExpression()V: I123 Branch 1105 IFEQ L2947 - true
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.ExclusiveOrExpression()V: I136 Branch 1106 IFEQ L2954 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.ExclusiveOrExpression()V: I155 Branch 1107 IFEQ L2967 - true
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParser.AndExpression()V: I95 Branch 1112 IFEQ L2992 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParser.AndExpression()V: I123 Branch 1113 IFEQ L2998 - true
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParser.AndExpression()V: I136 Branch 1114 IFEQ L3005 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParser.AndExpression()V: I155 Branch 1115 IFEQ L3018 - true
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParser.EqualityExpression()V: I145 Branch 1125 IFEQ L3054 - false
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParser.EqualityExpression()V: I173 Branch 1126 IFEQ L3060 - true
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParser.EqualityExpression()V: I186 Branch 1127 IFEQ L3067 - false
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParser.EqualityExpression()V: I205 Branch 1128 IFEQ L3080 - true
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParser.InstanceOfExpression()V: I85 Branch 1133 IFEQ L3102 - false
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParser.InstanceOfExpression()V: I113 Branch 1134 IFEQ L3108 - true
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParser.InstanceOfExpression()V: I126 Branch 1135 IFEQ L3115 - false
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParser.InstanceOfExpression()V: I145 Branch 1136 IFEQ L3128 - true
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParser.RelationalExpression()V: I169 Branch 1150 IFEQ L3172 - false
   * Goal 30. com.soops.CEN4010.JMCA.JParser.JavaParser.RelationalExpression()V: I197 Branch 1151 IFEQ L3178 - true
   * Goal 31. com.soops.CEN4010.JMCA.JParser.JavaParser.RelationalExpression()V: I210 Branch 1152 IFEQ L3185 - false
   * Goal 32. com.soops.CEN4010.JMCA.JParser.JavaParser.RelationalExpression()V: I229 Branch 1153 IFEQ L3198 - true
   * Goal 33. com.soops.CEN4010.JMCA.JParser.JavaParser.ShiftExpression()V: I144 Branch 1161 IFEQ L3234 - false
   * Goal 34. com.soops.CEN4010.JMCA.JParser.JavaParser.ShiftExpression()V: I172 Branch 1162 IFEQ L3240 - true
   * Goal 35. com.soops.CEN4010.JMCA.JParser.JavaParser.ShiftExpression()V: I185 Branch 1163 IFEQ L3247 - false
   * Goal 36. com.soops.CEN4010.JMCA.JParser.JavaParser.ShiftExpression()V: I204 Branch 1164 IFEQ L3260 - true
   * Goal 37. com.soops.CEN4010.JMCA.JParser.JavaParser.AdditiveExpression()V: I145 Branch 1174 IFEQ L3296 - false
   * Goal 38. com.soops.CEN4010.JMCA.JParser.JavaParser.AdditiveExpression()V: I173 Branch 1175 IFEQ L3302 - true
   * Goal 39. com.soops.CEN4010.JMCA.JParser.JavaParser.AdditiveExpression()V: I186 Branch 1176 IFEQ L3309 - false
   * Goal 40. com.soops.CEN4010.JMCA.JParser.JavaParser.AdditiveExpression()V: I205 Branch 1177 IFEQ L3322 - true
   * Goal 41. com.soops.CEN4010.JMCA.JParser.JavaParser.MultiplicativeExpression()V: I157 Branch 1189 IFEQ L3362 - false
   * Goal 42. com.soops.CEN4010.JMCA.JParser.JavaParser.MultiplicativeExpression()V: I185 Branch 1190 IFEQ L3368 - true
   * Goal 43. com.soops.CEN4010.JMCA.JParser.JavaParser.MultiplicativeExpression()V: I198 Branch 1191 IFEQ L3375 - false
   * Goal 44. com.soops.CEN4010.JMCA.JParser.JavaParser.MultiplicativeExpression()V: I217 Branch 1192 IFEQ L3388 - true
   * Goal 45. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I26 Branch 1193 IF_ICMPNE L3400 - false
   * Goal 46. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1194 TABLESWITCH L3400 Case 15 - false
   * Goal 47. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1195 TABLESWITCH L3400 Case 16 - false
   * Goal 48. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1196 TABLESWITCH L3400 Case 17 - false
   * Goal 49. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1197 TABLESWITCH L3400 Case 18 - false
   * Goal 50. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1198 TABLESWITCH L3400 Case 19 - false
   * Goal 51. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1199 TABLESWITCH L3400 Case 20 - false
   * Goal 52. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1200 TABLESWITCH L3400 Case 21 - false
   * Goal 53. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1201 TABLESWITCH L3400 Case 22 - false
   * Goal 54. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1202 TABLESWITCH L3400 Case 23 - false
   * Goal 55. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1203 TABLESWITCH L3400 Case 24 - false
   * Goal 56. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1204 TABLESWITCH L3400 Case 25 - false
   * Goal 57. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1205 TABLESWITCH L3400 Case 26 - false
   * Goal 58. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1206 TABLESWITCH L3400 Case 27 - false
   * Goal 59. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1207 TABLESWITCH L3400 Case 28 - false
   * Goal 60. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1208 TABLESWITCH L3400 Case 29 - false
   * Goal 61. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1209 TABLESWITCH L3400 Case 30 - false
   * Goal 62. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1210 TABLESWITCH L3400 Case 31 - false
   * Goal 63. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1211 TABLESWITCH L3400 Case 32 - false
   * Goal 64. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1212 TABLESWITCH L3400 Case 33 - false
   * Goal 65. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1213 TABLESWITCH L3400 Case 34 - false
   * Goal 66. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1214 TABLESWITCH L3400 Case 35 - false
   * Goal 67. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1215 TABLESWITCH L3400 Case 36 - false
   * Goal 68. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1216 TABLESWITCH L3400 Case 37 - false
   * Goal 69. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1217 TABLESWITCH L3400 Case 38 - false
   * Goal 70. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1218 TABLESWITCH L3400 Case 39 - false
   * Goal 71. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1219 TABLESWITCH L3400 Case 40 - false
   * Goal 72. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1220 TABLESWITCH L3400 Case 41 - false
   * Goal 73. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1221 TABLESWITCH L3400 Case 42 - false
   * Goal 74. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1222 TABLESWITCH L3400 Case 43 - false
   * Goal 75. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1223 TABLESWITCH L3400 Case 44 - false
   * Goal 76. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1224 TABLESWITCH L3400 Case 45 - false
   * Goal 77. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1225 TABLESWITCH L3400 Case 46 - false
   * Goal 78. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1226 TABLESWITCH L3400 Case 47 - false
   * Goal 79. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1227 TABLESWITCH L3400 Case 48 - false
   * Goal 80. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1228 TABLESWITCH L3400 Case 49 - false
   * Goal 81. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1229 TABLESWITCH L3400 Case 50 - false
   * Goal 82. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1230 TABLESWITCH L3400 Case 51 - false
   * Goal 83. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1231 TABLESWITCH L3400 Case 52 - false
   * Goal 84. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1232 TABLESWITCH L3400 Case 53 - false
   * Goal 85. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1233 TABLESWITCH L3400 Case 54 - false
   * Goal 86. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1234 TABLESWITCH L3400 Case 55 - false
   * Goal 87. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1235 TABLESWITCH L3400 Case 56 - false
   * Goal 88. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1236 TABLESWITCH L3400 Case 57 - false
   * Goal 89. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1237 TABLESWITCH L3400 Case 58 - false
   * Goal 90. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1238 TABLESWITCH L3400 Case 59 - false
   * Goal 91. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1239 TABLESWITCH L3400 Case 60 - false
   * Goal 92. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1240 TABLESWITCH L3400 Case 61 - false
   * Goal 93. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1241 TABLESWITCH L3400 Case 62 - false
   * Goal 94. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1242 TABLESWITCH L3400 Case 63 - false
   * Goal 95. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1243 TABLESWITCH L3400 Case 64 - false
   * Goal 96. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1244 TABLESWITCH L3400 Case 65 - false
   * Goal 97. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1245 TABLESWITCH L3400 Case 66 - false
   * Goal 98. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1246 TABLESWITCH L3400 Case 67 - false
   * Goal 99. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1247 TABLESWITCH L3400 Case 68 - false
   * Goal 100. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1248 TABLESWITCH L3400 Case 69 - false
   * Goal 101. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1249 TABLESWITCH L3400 Case 70 - false
   * Goal 102. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1250 TABLESWITCH L3400 Case 71 - false
   * Goal 103. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1251 TABLESWITCH L3400 Case 72 - false
   * Goal 104. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1252 TABLESWITCH L3400 Case 73 - false
   * Goal 105. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1253 TABLESWITCH L3400 Case 74 - false
   * Goal 106. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1254 TABLESWITCH L3400 Case 75 - false
   * Goal 107. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1255 TABLESWITCH L3400 Case 76 - false
   * Goal 108. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1256 TABLESWITCH L3400 Case 77 - false
   * Goal 109. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1257 TABLESWITCH L3400 Case 78 - false
   * Goal 110. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1258 TABLESWITCH L3400 Case 79 - false
   * Goal 111. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1259 TABLESWITCH L3400 Case 80 - false
   * Goal 112. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1260 TABLESWITCH L3400 Case 81 - false
   * Goal 113. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1261 TABLESWITCH L3400 Case 82 - false
   * Goal 114. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1262 TABLESWITCH L3400 Case 83 - false
   * Goal 115. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1263 TABLESWITCH L3400 Case 84 - false
   * Goal 116. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1264 TABLESWITCH L3400 Case 85 - false
   * Goal 117. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1265 TABLESWITCH L3400 Case 86 - false
   * Goal 118. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1266 TABLESWITCH L3400 Case 87 - false
   * Goal 119. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1267 TABLESWITCH L3400 Case 88 - false
   * Goal 120. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1268 TABLESWITCH L3400 Case 89 - false
   * Goal 121. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1269 TABLESWITCH L3400 Case 90 - false
   * Goal 122. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1270 TABLESWITCH L3400 Case 91 - false
   * Goal 123. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1271 TABLESWITCH L3400 Case 92 - false
   * Goal 124. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1272 TABLESWITCH L3400 Case 93 - false
   * Goal 125. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1273 TABLESWITCH L3400 Case 94 - false
   * Goal 126. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1274 TABLESWITCH L3400 Case 95 - false
   * Goal 127. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1275 TABLESWITCH L3400 Case 96 - false
   * Goal 128. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1276 TABLESWITCH L3400 Case 97 - false
   * Goal 129. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1277 TABLESWITCH L3400 Case 98 - false
   * Goal 130. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1278 TABLESWITCH L3400 Case 99 - false
   * Goal 131. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1279 TABLESWITCH L3400 Case 100 - false
   * Goal 132. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1280 TABLESWITCH L3400 Case 101 - false
   * Goal 133. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1281 TABLESWITCH L3400 Case 102 - false
   * Goal 134. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1282 TABLESWITCH L3400 Default-Case - true
   * Goal 135. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I173 Branch 1288 IFEQ L3452 - false
   * Goal 136. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I201 Branch 1289 IFEQ L3458 - true
   * Goal 137. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I214 Branch 1290 IFEQ L3465 - false
   * Goal 138. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I233 Branch 1291 IFEQ L3478 - true
   */

  @Test
  public void test045()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("  Caution! ");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.ConditionalOrExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 46
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 1006 LOOKUPSWITCH L2490 Case 74 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 1007 LOOKUPSWITCH L2490 Default-Case - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I127 Branch 1010 IFEQ L2516 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I140 Branch 1011 IFEQ L2523 - false
   */

  @Test
  public void test046()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      
      JavaParser javaParser0 = new JavaParser((String) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.ResultType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 47
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberSelector()V: I61 Branch 1436 IFEQ L3926 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberSelector()V: I89 Branch 1437 IFEQ L3932 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberSelector()V: I102 Branch 1438 IFEQ L3939 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberSelector()V: I121 Branch 1439 IFEQ L3952 - true
   */

  @Test
  public void test047()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("tokenFactory");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.MemberSelector();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 48
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isAbstract(I)Z: I8 Branch 3956 IFEQ L69 - false
   */

  @Test
  public void test048()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      
      boolean boolean0 = javaParser_ModifierSet0.isAbstract((-853));
      assertTrue(boolean0);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
  }

  //Test case number: 49
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isTransient(I)Z: I8 Branch 3961 IFEQ L89 - false
   */

  @Test
  public void test049()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      
      boolean boolean0 = javaParser_ModifierSet0.isTransient((-2229));
      assertTrue(boolean0);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
  }

  //Test case number: 50
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isFinal(I)Z: I8 Branch 3957 IFEQ L73 - false
   */

  @Test
  public void test050()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal(616);
      assertTrue(boolean0);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
  }

  //Test case number: 51
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceDeclaration(I)V: I30 Branch 97 IF_ICMPNE L549 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceDeclaration(I)V: I212 Branch 111 IFEQ L585 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceDeclaration(I)V: I240 Branch 112 IFEQ L591 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceDeclaration(I)V: I272 Branch 114 IFEQ L611 - true
   */

  @Test
  public void test051()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.ClassOrInterfaceDeclaration((-3387));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 52
  /*
   * 34 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclaration(I)V: I26 Branch 669 IF_ICMPNE L1596 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclaration(I)V: I37 Branch 670 LOOKUPSWITCH L1596 Case 88 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclaration(I)V: I37 Branch 671 LOOKUPSWITCH L1596 Default-Case - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclaration(I)V: I173 Branch 680 IFEQ L1625 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclaration(I)V: I201 Branch 681 IFEQ L1631 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclaration(I)V: I214 Branch 682 IFEQ L1638 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclaration(I)V: I233 Branch 683 IFEQ L1651 - true
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I26 Branch 904 IFEQ L2083 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I83 Branch 915 IFEQ L2129 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I26 Branch 920 IF_ICMPNE L2141 - true
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I37 Branch 929 LOOKUPSWITCH L2141 Case 74 - true
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I37 Branch 930 LOOKUPSWITCH L2141 Default-Case - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I79 Branch 932 IFEQ L2166 - true
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I114 Branch 933 IFEQ L2206 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceType()V: I32 Branch 938 IFEQ L2219 - true
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceType()V: I45 Branch 939 IFEQ L2225 - true
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceType()V: I81 Branch 941 IFEQ L2265 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I26 Branch 996 IF_ICMPNE L2490 - true
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 997 LOOKUPSWITCH L2490 Case 15 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 998 LOOKUPSWITCH L2490 Case 17 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 999 LOOKUPSWITCH L2490 Case 20 - false
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 1000 LOOKUPSWITCH L2490 Case 26 - false
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 1001 LOOKUPSWITCH L2490 Case 33 - false
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 1002 LOOKUPSWITCH L2490 Case 40 - false
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 1003 LOOKUPSWITCH L2490 Case 42 - false
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 1004 LOOKUPSWITCH L2490 Case 51 - false
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 1005 LOOKUPSWITCH L2490 Case 63 - false
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 1006 LOOKUPSWITCH L2490 Case 74 - true
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 1007 LOOKUPSWITCH L2490 Default-Case - false
   * Goal 30. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I78 Branch 1008 IFEQ L2536 - false
   * Goal 31. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_9(I)Z: I21 Branch 3178 IFNE L6814 - false
   * Goal 32. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_11(I)Z: I21 Branch 3180 IFNE L6834 - true
   * Goal 33. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_12(I)Z: I21 Branch 3181 IFNE L6844 - true
   * Goal 34. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_13(I)Z: I21 Branch 3182 IFNE L6854 - true
   */

  @Test
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)69;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)69}, byteArray0);
      
      JavaParser javaParser0 = new JavaParser((InputStream) byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte)69}, byteArray0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.MethodDeclaration((int) (byte)69);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 53
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArguments()V: I107 Branch 950 IFEQ L2292 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArguments()V: I135 Branch 951 IFEQ L2298 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArguments()V: I148 Branch 952 IFEQ L2305 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArguments()V: I167 Branch 953 IFEQ L2318 - true
   */

  @Test
  public void test053()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("this is a message");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.TypeArguments();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 54
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclarator()V: I144 Branch 690 IFEQ L1690 - false
   */

  @Test
  public void test054()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(826);
      assertNotNull(pipedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) pipedReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      try {
        javaParser0.MethodDeclarator();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 55
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isNative(I)Z: I8 Branch 3958 IFEQ L77 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isSynchronized(I)Z: I8 Branch 3960 IFEQ L85 - false
   */

  @Test
  public void test055()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      
      boolean boolean0 = javaParser_ModifierSet0.isSynchronized((-136));
      assertTrue(boolean0);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      
      boolean boolean1 = javaParser_ModifierSet0.isNative((-136));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
  }

  //Test case number: 56
  /*
   * 88 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I30 Branch 349 IFEQ L1181 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I68 Branch 351 IF_ICMPNE L1192 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 352 TABLESWITCH L1192 Case 13 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 353 TABLESWITCH L1192 Case 14 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 354 TABLESWITCH L1192 Case 15 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 355 TABLESWITCH L1192 Case 16 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 356 TABLESWITCH L1192 Case 17 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 357 TABLESWITCH L1192 Case 18 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 358 TABLESWITCH L1192 Case 19 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 359 TABLESWITCH L1192 Case 20 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 360 TABLESWITCH L1192 Case 21 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 361 TABLESWITCH L1192 Case 22 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 362 TABLESWITCH L1192 Case 23 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 363 TABLESWITCH L1192 Case 24 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 364 TABLESWITCH L1192 Case 25 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 365 TABLESWITCH L1192 Case 26 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 366 TABLESWITCH L1192 Case 27 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 367 TABLESWITCH L1192 Case 28 - false
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 368 TABLESWITCH L1192 Case 29 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 369 TABLESWITCH L1192 Case 30 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 370 TABLESWITCH L1192 Case 31 - false
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 371 TABLESWITCH L1192 Case 32 - false
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 372 TABLESWITCH L1192 Case 33 - false
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 373 TABLESWITCH L1192 Case 34 - false
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 374 TABLESWITCH L1192 Case 35 - false
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 375 TABLESWITCH L1192 Case 36 - false
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 376 TABLESWITCH L1192 Case 37 - false
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 377 TABLESWITCH L1192 Case 38 - false
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 378 TABLESWITCH L1192 Case 39 - false
   * Goal 30. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 379 TABLESWITCH L1192 Case 40 - false
   * Goal 31. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 380 TABLESWITCH L1192 Case 41 - false
   * Goal 32. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 381 TABLESWITCH L1192 Case 42 - false
   * Goal 33. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 382 TABLESWITCH L1192 Case 43 - false
   * Goal 34. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 383 TABLESWITCH L1192 Case 44 - false
   * Goal 35. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 384 TABLESWITCH L1192 Case 45 - false
   * Goal 36. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 385 TABLESWITCH L1192 Case 46 - false
   * Goal 37. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 386 TABLESWITCH L1192 Case 47 - false
   * Goal 38. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 387 TABLESWITCH L1192 Case 48 - false
   * Goal 39. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 388 TABLESWITCH L1192 Case 49 - false
   * Goal 40. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 389 TABLESWITCH L1192 Case 50 - false
   * Goal 41. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 390 TABLESWITCH L1192 Case 51 - false
   * Goal 42. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 391 TABLESWITCH L1192 Case 52 - false
   * Goal 43. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 392 TABLESWITCH L1192 Case 53 - false
   * Goal 44. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 393 TABLESWITCH L1192 Case 54 - false
   * Goal 45. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 394 TABLESWITCH L1192 Case 55 - false
   * Goal 46. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 395 TABLESWITCH L1192 Case 56 - false
   * Goal 47. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 396 TABLESWITCH L1192 Case 57 - false
   * Goal 48. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 397 TABLESWITCH L1192 Case 58 - false
   * Goal 49. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 398 TABLESWITCH L1192 Case 59 - false
   * Goal 50. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 399 TABLESWITCH L1192 Case 60 - false
   * Goal 51. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 400 TABLESWITCH L1192 Case 61 - false
   * Goal 52. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 401 TABLESWITCH L1192 Case 62 - false
   * Goal 53. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 402 TABLESWITCH L1192 Case 63 - false
   * Goal 54. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 403 TABLESWITCH L1192 Case 64 - false
   * Goal 55. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 404 TABLESWITCH L1192 Case 65 - false
   * Goal 56. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 405 TABLESWITCH L1192 Case 66 - false
   * Goal 57. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 406 TABLESWITCH L1192 Case 67 - false
   * Goal 58. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 407 TABLESWITCH L1192 Case 68 - false
   * Goal 59. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 408 TABLESWITCH L1192 Case 69 - false
   * Goal 60. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 409 TABLESWITCH L1192 Case 70 - false
   * Goal 61. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 410 TABLESWITCH L1192 Case 71 - false
   * Goal 62. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 411 TABLESWITCH L1192 Case 72 - false
   * Goal 63. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 412 TABLESWITCH L1192 Case 73 - false
   * Goal 64. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 413 TABLESWITCH L1192 Case 74 - false
   * Goal 65. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 414 TABLESWITCH L1192 Case 75 - false
   * Goal 66. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 415 TABLESWITCH L1192 Case 76 - false
   * Goal 67. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 416 TABLESWITCH L1192 Case 77 - false
   * Goal 68. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 417 TABLESWITCH L1192 Case 78 - false
   * Goal 69. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 418 TABLESWITCH L1192 Case 79 - false
   * Goal 70. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 419 TABLESWITCH L1192 Case 80 - false
   * Goal 71. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 420 TABLESWITCH L1192 Case 81 - false
   * Goal 72. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 421 TABLESWITCH L1192 Case 82 - false
   * Goal 73. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 422 TABLESWITCH L1192 Case 83 - false
   * Goal 74. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 423 TABLESWITCH L1192 Case 84 - false
   * Goal 75. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 424 TABLESWITCH L1192 Case 85 - false
   * Goal 76. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 425 TABLESWITCH L1192 Case 86 - false
   * Goal 77. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 426 TABLESWITCH L1192 Case 87 - false
   * Goal 78. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 427 TABLESWITCH L1192 Case 88 - false
   * Goal 79. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 428 TABLESWITCH L1192 Default-Case - true
   * Goal 80. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I256 Branch 450 IFEQ L1264 - false
   * Goal 81. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I284 Branch 451 IFEQ L1270 - true
   * Goal 82. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I297 Branch 452 IFEQ L1277 - false
   * Goal 83. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I316 Branch 453 IFEQ L1290 - true
   * Goal 84. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_4(I)Z: I21 Branch 3173 IFNE L6764 - true
   * Goal 85. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_62()Z: I13 Branch 3226 IFEQ L7226 - false
   * Goal 86. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_62()Z: I26 Branch 3227 IFEQ L7229 - false
   * Goal 87. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_4()Z: I7 Branch 3359 IFEQ L7924 - false
   * Goal 88. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_86()Z: I8 Branch 3610 IFEQ L9198 - false
   */

  @Test
  public void test056()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/fabiopalomba/Documents/workspace/LunchEvosuite/I\\.2*:<H^");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "ia+B0OG!\"@gdl");
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser("ia+B0OG!\"@gdl");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser javaParser1 = new JavaParser("I.2*:<H^");
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertNotNull(javaParser1);
      assertNotSame(javaParser1, javaParser0);
      assertFalse(javaParser1.lookingAhead);
      
      try {
        javaParser0.ClassOrInterfaceBodyDeclaration(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 57
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.NormalAnnotation()V: I97 Branch 2848 IFEQ L6105 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.NormalAnnotation()V: I125 Branch 2849 IFEQ L6111 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.NormalAnnotation()V: I138 Branch 2850 IFEQ L6118 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.NormalAnnotation()V: I157 Branch 2851 IFEQ L6131 - true
   */

  @Test
  public void test057()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("da9|");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.NormalAnnotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 58
  /*
   * 6 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryExpression()V: I66 Branch 1431 IFEQ L3884 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryExpression()V: I94 Branch 1432 IFEQ L3890 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryExpression()V: I126 Branch 1434 IFEQ L3910 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I214 Branch 1458 IFEQ L4007 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I242 Branch 1459 IFEQ L4013 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I274 Branch 1461 IFEQ L4033 - true
   */

  @Test
  public void test058()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.PrimaryExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 59
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.removeModifier(II)I: root-Branch
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isStatic(I)Z: I8 Branch 3955 IFEQ L65 - false
   */

  @Test
  public void test059()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      
      boolean boolean0 = javaParser_ModifierSet0.isStatic(349);
      assertTrue(boolean0);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      
      int int0 = JavaParser.ModifierSet.removeModifier(349, 349);
      assertEquals(0, int0);
  }

  //Test case number: 60
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeParameter()V: I81 Branch 254 IFEQ L1008 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeParameter()V: I109 Branch 255 IFEQ L1014 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeParameter()V: I122 Branch 256 IFEQ L1021 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeParameter()V: I141 Branch 257 IFEQ L1034 - true
   */

  @Test
  public void test060()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("re-flag");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.TypeParameter();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 61
  /*
   * 5 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.BooleanLiteral()V: I26 Branch 1489 IF_ICMPNE L4174 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.BooleanLiteral()V: I37 Branch 1490 LOOKUPSWITCH L4174 Case 30 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.BooleanLiteral()V: I37 Branch 1491 LOOKUPSWITCH L4174 Case 61 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.BooleanLiteral()V: I37 Branch 1492 LOOKUPSWITCH L4174 Default-Case - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.BooleanLiteral()V: I100 Branch 1494 IFEQ L4186 - false
   */

  @Test
  public void test061()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("ul4. %Xfl~6$yRA)l");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.BooleanLiteral();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 62
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.IfStatement()V: I107 Branch 2219 IFEQ L5257 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.IfStatement()V: I135 Branch 2220 IFEQ L5263 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.IfStatement()V: I148 Branch 2221 IFEQ L5270 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.IfStatement()V: I167 Branch 2222 IFEQ L5283 - true
   */

  @Test
  public void test062()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(986);
      assertNotNull(pipedReader0);
      
      JavaParser javaParser0 = new JavaParser((Reader) pipedReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.IfStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 63
  /*
   * 16 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArgument()V: I26 Branch 954 IF_ICMPNE L2330 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArgument()V: I37 Branch 955 LOOKUPSWITCH L2330 Case 15 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArgument()V: I37 Branch 956 LOOKUPSWITCH L2330 Case 17 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArgument()V: I37 Branch 957 LOOKUPSWITCH L2330 Case 20 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArgument()V: I37 Branch 958 LOOKUPSWITCH L2330 Case 26 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArgument()V: I37 Branch 959 LOOKUPSWITCH L2330 Case 33 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArgument()V: I37 Branch 960 LOOKUPSWITCH L2330 Case 40 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArgument()V: I37 Branch 961 LOOKUPSWITCH L2330 Case 42 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArgument()V: I37 Branch 962 LOOKUPSWITCH L2330 Case 51 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArgument()V: I37 Branch 963 LOOKUPSWITCH L2330 Case 74 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArgument()V: I37 Branch 964 LOOKUPSWITCH L2330 Case 91 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArgument()V: I37 Branch 965 LOOKUPSWITCH L2330 Default-Case - true
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArgument()V: I129 Branch 971 IFEQ L2358 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArgument()V: I157 Branch 972 IFEQ L2364 - true
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArgument()V: I170 Branch 973 IFEQ L2371 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArgument()V: I189 Branch 974 IFEQ L2384 - true
   */

  @Test
  public void test063()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(mockFileInputStream0);
      
      JavaParser javaParser0 = new JavaParser((InputStream) mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.TypeArgument();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 64
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBody(Z)V: I126 Branch 346 IFEQ L1145 - false
   */

  @Test
  public void test064()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.ClassOrInterfaceBody(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 65
  /*
   * 5 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableDeclarator()V: I85 Branch 466 IFEQ L1365 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableDeclarator()V: I113 Branch 467 IFEQ L1371 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableDeclarator()V: I126 Branch 468 IFEQ L1378 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableDeclarator()V: I145 Branch 469 IFEQ L1391 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableDeclaratorId()V: I98 Branch 474 IFEQ L1416 - false
   */

  @Test
  public void test065()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("this is a message");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.VariableDeclarator();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 66
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ImplementsList(Z)V: I126 Branch 130 IFEQ L707 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ImplementsList(Z)V: I154 Branch 131 IFEQ L713 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ImplementsList(Z)V: I167 Branch 132 IFEQ L720 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ImplementsList(Z)V: I186 Branch 133 IFEQ L733 - true
   */

  @Test
  public void test066()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("printTrainLab}els");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.ImplementsList(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 67
  /*
   * 6 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isAbstract(I)Z: I8 Branch 3956 IFEQ L69 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isNative(I)Z: I8 Branch 3958 IFEQ L77 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.EnumDeclaration(I)V: I92 Branch 138 IFEQ L756 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.EnumDeclaration(I)V: I120 Branch 139 IFEQ L762 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.EnumDeclaration(I)V: I133 Branch 140 IFEQ L769 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.EnumDeclaration(I)V: I152 Branch 141 IFEQ L782 - true
   */

  @Test
  public void test067()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      
      boolean boolean0 = javaParser_ModifierSet0.isNative((-853));
      assertTrue(boolean0);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      
      boolean boolean1 = javaParser_ModifierSet0.isAbstract(129);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      JavaParser javaParser0 = new JavaParser("edu.stanford.nlp.trees.Treebank");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.EnumDeclaration(0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 68
  /*
   * 5 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isStatic(I)Z: I8 Branch 3955 IFEQ L65 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeBound()V: I101 Branch 262 IFEQ L1060 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeBound()V: I129 Branch 263 IFEQ L1066 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeBound()V: I142 Branch 264 IFEQ L1073 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeBound()V: I161 Branch 265 IFEQ L1086 - true
   */

  @Test
  public void test068()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      
      boolean boolean0 = javaParser_ModifierSet0.isStatic(9665);
      assertFalse(boolean0);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      
      JavaParser javaParser0 = new JavaParser("sj8P`8{-(|`1");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.TypeBound();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 69
  /*
   * 12 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I37 Branch 921 LOOKUPSWITCH L2141 Case 15 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I37 Branch 922 LOOKUPSWITCH L2141 Case 17 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I37 Branch 923 LOOKUPSWITCH L2141 Case 20 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I37 Branch 924 LOOKUPSWITCH L2141 Case 26 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I37 Branch 925 LOOKUPSWITCH L2141 Case 33 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I37 Branch 926 LOOKUPSWITCH L2141 Case 40 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I37 Branch 927 LOOKUPSWITCH L2141 Case 42 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I37 Branch 928 LOOKUPSWITCH L2141 Case 51 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I37 Branch 929 LOOKUPSWITCH L2141 Case 74 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I37 Branch 930 LOOKUPSWITCH L2141 Default-Case - true
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I163 Branch 935 IFEQ L2186 - true
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I176 Branch 936 IFEQ L2193 - false
   */

  @Test
  public void test069()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.ReferenceType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 70
  /*
   * 10 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.AllocationExpression()V: I26 Branch 1600 IFEQ L4337 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.AllocationExpression()V: I53 Branch 1601 IF_ICMPNE L4342 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.AllocationExpression()V: I64 Branch 1602 LOOKUPSWITCH L4342 Case 44 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.AllocationExpression()V: I64 Branch 1603 LOOKUPSWITCH L4342 Default-Case - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.AllocationExpression()V: I227 Branch 1615 IFEQ L4378 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.AllocationExpression()V: I255 Branch 1616 IFEQ L4384 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.AllocationExpression()V: I268 Branch 1617 IFEQ L4391 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.AllocationExpression()V: I287 Branch 1618 IFEQ L4404 - true
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_29(I)Z: I21 Branch 3198 IFNE L7014 - true
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_29()Z: I8 Branch 3680 IFEQ L9566 - false
   */

  @Test
  public void test070()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      
      MockFile mockFile0 = (MockFile)MockFile.createTempFile("Xr<,-j=<;", (String) null);
      assertEquals("Xr<,-j=<;0.tmp", mockFile0.getName());
      assertEquals("/var/folders/ff/jvqmt14176q7vr5d_h1h729c0000gn/T", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/var/folders/ff/jvqmt14176q7vr5d_h1h729c0000gn/T/Xr<,-j=<;0.tmp", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNotNull(mockFile0);
      
      MockFileReader mockFileReader0 = new MockFileReader((File) mockFile0);
      assertEquals("Xr<,-j=<;0.tmp", mockFile0.getName());
      assertEquals("/var/folders/ff/jvqmt14176q7vr5d_h1h729c0000gn/T", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/var/folders/ff/jvqmt14176q7vr5d_h1h729c0000gn/T/Xr<,-j=<;0.tmp", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNotNull(mockFileReader0);
      
      JavaParser javaParser0 = new JavaParser((Reader) mockFileReader0);
      assertEquals("Xr<,-j=<;0.tmp", mockFile0.getName());
      assertEquals("/var/folders/ff/jvqmt14176q7vr5d_h1h729c0000gn/T", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/var/folders/ff/jvqmt14176q7vr5d_h1h729c0000gn/T/Xr<,-j=<;0.tmp", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.AllocationExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 71
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBody(Z)V: I98 Branch 345 IFEQ L1139 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBody(Z)V: I126 Branch 346 IFEQ L1145 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBody(Z)V: I139 Branch 347 IFEQ L1152 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBody(Z)V: I158 Branch 348 IFEQ L1165 - true
   */

  @Test
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("jC4JPov[<G9");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser((Reader) stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.ClassOrInterfaceBody(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: jC4JPov
         //
      }
  }

  //Test case number: 72
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.Annotation()V: I121 Branch 2840 IFEQ L6055 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.Annotation()V: I149 Branch 2841 IFEQ L6061 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.Annotation()V: I181 Branch 2843 IFEQ L6081 - true
   */

  @Test
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)123;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte) (-49), (int) (byte)123);
      assertEquals(66, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) byteArrayInputStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(66, byteArrayInputStream0.available());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (int) (byte)0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(66, byteArrayInputStream0.available());
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(66, byteArrayInputStream0.available());
      assertNotNull(javaParser0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.Annotation();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 73
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.TryStatement()V: I153 Branch 2822 IFEQ L5953 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.TryStatement()V: I181 Branch 2823 IFEQ L5959 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.TryStatement()V: I194 Branch 2824 IFEQ L5966 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.TryStatement()V: I213 Branch 2825 IFEQ L5979 - true
   */

  @Test
  public void test073()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("*r0!|>7 k *uje3s9V");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.TryStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 74
  /*
   * 13 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.Literal()V: I26 Branch 1475 IF_ICMPNE L4111 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.Literal()V: I37 Branch 1476 LOOKUPSWITCH L4111 Case 30 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.Literal()V: I37 Branch 1477 LOOKUPSWITCH L4111 Case 45 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.Literal()V: I37 Branch 1478 LOOKUPSWITCH L4111 Case 61 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.Literal()V: I37 Branch 1479 LOOKUPSWITCH L4111 Case 66 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.Literal()V: I37 Branch 1480 LOOKUPSWITCH L4111 Case 70 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.Literal()V: I37 Branch 1481 LOOKUPSWITCH L4111 Case 72 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.Literal()V: I37 Branch 1482 LOOKUPSWITCH L4111 Case 73 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.Literal()V: I37 Branch 1483 LOOKUPSWITCH L4111 Default-Case - true
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.Literal()V: I145 Branch 1485 IFEQ L4136 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.Literal()V: I173 Branch 1486 IFEQ L4142 - true
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.Literal()V: I186 Branch 1487 IFEQ L4149 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.Literal()V: I205 Branch 1488 IFEQ L4162 - true
   */

  @Test
  public void test074()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("n3^J]:pt*'N");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.Literal();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 75
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I8 Branch 3946 IFNULL L10991 - true
   */

  @Test
  public void test075()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        Token token0 = javaParser0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 76
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isStrictfp(I)Z: I8 Branch 3959 IFEQ L81 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.EmptyStatement()V: I50 Branch 1942 IFEQ L4955 - false
   */

  @Test
  public void test076()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      
      boolean boolean0 = javaParser_ModifierSet0.isStrictfp(0);
      assertFalse(boolean0);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      
      JavaParser javaParser0 = new JavaParser("KIB373iHu:");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.EmptyStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 77
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isPrivate(I)Z: I8 Branch 3954 IFEQ L61 - true
   */

  @Test
  public void test077()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      
      boolean boolean0 = javaParser_ModifierSet0.isPrivate((-2392));
      assertFalse(boolean0);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
  }

  //Test case number: 78
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I104 Branch 2683 IFEQ L5595 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I132 Branch 2684 IFEQ L5601 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I164 Branch 2686 IFEQ L5621 - true
   */

  @Test
  public void test078()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.ForInit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 79
  /*
   * 5 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclarator()V: I103 Branch 688 IFEQ L1677 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclarator()V: I131 Branch 689 IFEQ L1683 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclarator()V: I144 Branch 690 IFEQ L1690 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclarator()V: I163 Branch 691 IFEQ L1703 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.FormalParameters()V: I168 Branch 710 IFEQ L1759 - true
   */

  @Test
  public void test079()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'A', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader((Reader) charArrayReader0);
      assertNotNull(bufferedReader0);
      assertArrayEquals(new char[] {'A', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParser javaParser0 = new JavaParser((Reader) bufferedReader0);
      assertNotNull(javaParser0);
      assertArrayEquals(new char[] {'A', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.MethodDeclarator();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\" (0), after : \"\"
         //
      }
  }

  //Test case number: 80
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.PackageDeclaration()V: I61 Branch 33 IFEQ L256 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.PackageDeclaration()V: I89 Branch 34 IFEQ L262 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.PackageDeclaration()V: I102 Branch 35 IFEQ L269 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.PackageDeclaration()V: I121 Branch 36 IFEQ L282 - true
   */

  @Test
  public void test080()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.PackageDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 81
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isProtected(I)Z: I8 Branch 3953 IFEQ L57 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isStrictfp(I)Z: I8 Branch 3959 IFEQ L81 - false
   */

  @Test
  public void test081()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      
      boolean boolean0 = javaParser_ModifierSet0.isStrictfp(6757);
      assertTrue(boolean0);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      
      boolean boolean1 = javaParser_ModifierSet0.isProtected(6757);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
  }

  //Test case number: 82
  /*
   * 8 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.SwitchLabel()V: I26 Branch 2206 IF_ICMPNE L5190 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.SwitchLabel()V: I37 Branch 2207 LOOKUPSWITCH L5190 Case 18 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.SwitchLabel()V: I37 Branch 2208 LOOKUPSWITCH L5190 Case 24 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.SwitchLabel()V: I37 Branch 2209 LOOKUPSWITCH L5190 Default-Case - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.SwitchLabel()V: I117 Branch 2211 IFEQ L5205 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.SwitchLabel()V: I145 Branch 2212 IFEQ L5211 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.SwitchLabel()V: I158 Branch 2213 IFEQ L5218 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.SwitchLabel()V: I177 Branch 2214 IFEQ L5231 - true
   */

  @Test
  public void test082()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.SwitchLabel();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 83
  /*
   * 8 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.Initializer()V: I37 Branch 897 LOOKUPSWITCH L2033 Case 52 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.Initializer()V: I37 Branch 898 LOOKUPSWITCH L2033 Default-Case - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.Initializer()V: I109 Branch 901 IFEQ L2048 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.Initializer()V: I122 Branch 902 IFEQ L2055 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.Block()V: I97 Branch 1831 IFEQ L4764 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.Block()V: I125 Branch 1832 IFEQ L4770 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.Block()V: I138 Branch 1833 IFEQ L4777 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.Block()V: I157 Branch 1834 IFEQ L4790 - true
   */

  @Test
  public void test083()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("dep");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.Initializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 84
  /*
   * 8 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValuePairs()V: I95 Branch 2866 IFEQ L6241 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValuePairs()V: I123 Branch 2867 IFEQ L6247 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValuePairs()V: I136 Branch 2868 IFEQ L6254 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValuePairs()V: I155 Branch 2869 IFEQ L6267 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValuePair()V: I61 Branch 2871 IFEQ L6283 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValuePair()V: I89 Branch 2872 IFEQ L6289 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValuePair()V: I102 Branch 2873 IFEQ L6296 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValuePair()V: I121 Branch 2874 IFEQ L6309 - true
   */

  @Test
  public void test084()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("DNN");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.MemberValuePairs();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 85
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I26 Branch 920 IF_ICMPNE L2141 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I135 Branch 934 IFEQ L2180 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I163 Branch 935 IFEQ L2186 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I195 Branch 937 IFEQ L2206 - true
   */

  @Test
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-4681), (int) (byte)96);
      assertEquals(96, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) byteArrayInputStream0);
      assertEquals(96, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      JavaParser javaParser0 = new JavaParser((InputStream) bufferedInputStream0);
      assertEquals(96, byteArrayInputStream0.available());
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.ReferenceType();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 86
  /*
   * 67 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.Name()V: I32 Branch 1013 IFEQ L2550 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.Name()V: I55 Branch 1014 IFEQ L2559 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.PostfixExpression()V: I30 Branch 1407 IF_ICMPNE L3760 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.PostfixExpression()V: I41 Branch 1408 LOOKUPSWITCH L3760 Case 99 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.PostfixExpression()V: I41 Branch 1409 LOOKUPSWITCH L3760 Case 100 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.PostfixExpression()V: I41 Branch 1410 LOOKUPSWITCH L3760 Default-Case - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.PostfixExpression()V: I104 Branch 1415 IFEQ L3805 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryExpression()V: I30 Branch 1429 IFEQ L3876 - true
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryExpression()V: I45 Branch 1430 IFEQ L3910 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I26 Branch 1440 IF_ICMPNE L3964 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1441 LOOKUPSWITCH L3964 Case 30 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1442 LOOKUPSWITCH L3964 Case 44 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1443 LOOKUPSWITCH L3964 Case 45 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1444 LOOKUPSWITCH L3964 Case 54 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1445 LOOKUPSWITCH L3964 Case 57 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1446 LOOKUPSWITCH L3964 Case 61 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1447 LOOKUPSWITCH L3964 Case 66 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1448 LOOKUPSWITCH L3964 Case 70 - false
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1449 LOOKUPSWITCH L3964 Case 72 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1450 LOOKUPSWITCH L3964 Case 73 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1451 LOOKUPSWITCH L3964 Case 77 - false
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1452 LOOKUPSWITCH L3964 Default-Case - true
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I124 Branch 1453 IFEQ L3991 - true
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I153 Branch 1454 IF_ICMPNE L3996 - true
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I164 Branch 1455 LOOKUPSWITCH L3996 Case 74 - true
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I164 Branch 1456 LOOKUPSWITCH L3996 Default-Case - false
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I193 Branch 1457 IFEQ L4033 - false
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_15(I)Z: I21 Branch 3184 IFNE L6874 - true
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_24(I)Z: I21 Branch 3193 IFNE L6964 - true
   * Goal 30. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_25(I)Z: I21 Branch 3194 IFNE L6974 - true
   * Goal 31. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_94()Z: I7 Branch 3210 IFEQ L7131 - true
   * Goal 32. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_94()Z: I24 Branch 3211 IFEQ L7137 - false
   * Goal 33. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_67()Z: I25 Branch 3216 IFEQ L7167 - true
   * Goal 34. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_9()Z: I7 Branch 3220 IFEQ L7192 - true
   * Goal 35. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_60()Z: I12 Branch 3221 IFEQ L7201 - true
   * Goal 36. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_66()Z: I8 Branch 3688 IFEQ L9613 - false
   * Goal 37. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_103()Z: I7 Branch 3703 IFEQ L9692 - false
   * Goal 38. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_102()Z: I8 Branch 3704 IFEQ L9699 - false
   * Goal 39. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_101()Z: I8 Branch 3706 IFEQ L9709 - false
   * Goal 40. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_28()Z: I7 Branch 3709 IFEQ L9722 - false
   * Goal 41. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_27()Z: I8 Branch 3710 IFEQ L9729 - false
   * Goal 42. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_25()Z: I7 Branch 3712 IFEQ L9739 - true
   * Goal 43. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_25()Z: I20 Branch 3713 IFEQ L9742 - false
   * Goal 44. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_26()Z: I8 Branch 3715 IFEQ L9752 - false
   * Goal 45. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_75()Z: I12 Branch 3717 IFEQ L9764 - false
   * Goal 46. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_75()Z: I25 Branch 3718 IFEQ L9766 - false
   * Goal 47. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_75()Z: I38 Branch 3719 IFEQ L9768 - false
   * Goal 48. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_75()Z: I51 Branch 3720 IFEQ L9770 - false
   * Goal 49. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_75()Z: I64 Branch 3721 IFEQ L9772 - false
   * Goal 50. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_75()Z: I77 Branch 3722 IFEQ L9774 - false
   * Goal 51. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_24()Z: I7 Branch 3731 IFEQ L9826 - false
   * Goal 52. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_78()Z: I8 Branch 3745 IFEQ L9892 - false
   * Goal 53. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_15()Z: I8 Branch 3891 IFEQ L10644 - false
   * Goal 54. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_104()Z: I7 Branch 3895 IFEQ L10669 - true
   * Goal 55. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_76()Z: I13 Branch 3896 IFEQ L10678 - false
   * Goal 56. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_76()Z: I26 Branch 3897 IFEQ L10680 - true
   * Goal 57. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_11()Z: I8 Branch 3909 IFEQ L10735 - false
   * Goal 58. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_12()Z: I7 Branch 3920 IFEQ L10796 - false
   * Goal 59. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_68()Z: I8 Branch 3926 IFEQ L10832 - false
   * Goal 60. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_13()Z: I8 Branch 3930 IFEQ L10853 - false
   * Goal 61. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_123()Z: I8 Branch 3933 IFEQ L10868 - true
   * Goal 62. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_123()Z: I25 Branch 3934 IFEQ L10873 - false
   * Goal 63. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_123()Z: I43 Branch 3935 IFEQ L10877 - false
   * Goal 64. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_consume_token(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I74 Branch 3940 IF_ICMPNE L10954 - false
   * Goal 65. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_scan_token(I)Z: I26 Branch 3942 IFNONNULL L10972 - true
   * Goal 66. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_scan_token(I)Z: I75 Branch 3943 IF_ICMPEQ L10981 - true
   * Goal 67. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_scan_token(I)Z: I87 Branch 3944 IFNE L10984 - true
   */

  @Test
  public void test086()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = ' ';
      charArray0[2] = ' ';
      charArray0[3] = ' ';
      charArray0[0] = 'X';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'X', ' ', ' ', ' '}, charArray0);
      
      JavaParser javaParser0 = new JavaParser((Reader) charArrayReader0);
      assertNotNull(javaParser0);
      assertArrayEquals(new char[] {'X', ' ', ' ', ' '}, charArray0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.PostfixExpression();
      assertArrayEquals(new char[] {'X', ' ', ' ', ' '}, charArray0);
      assertFalse(javaParser0.lookingAhead);
  }

  //Test case number: 87
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.LabeledStatement()V: I61 Branch 1737 IFEQ L4674 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.LabeledStatement()V: I89 Branch 1738 IFEQ L4680 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.LabeledStatement()V: I102 Branch 1739 IFEQ L4687 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.LabeledStatement()V: I121 Branch 1740 IFEQ L4700 - true
   */

  @Test
  public void test087()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("`/JdqT1");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.LabeledStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 88
  /*
   * 5 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.enable_tracing()V: root-Branch
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.Initializer()V: I26 Branch 896 IF_ICMPNE L2033 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.Initializer()V: I81 Branch 900 IFEQ L2042 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.Initializer()V: I109 Branch 901 IFEQ L2048 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.Initializer()V: I141 Branch 903 IFEQ L2068 - true
   */

  @Test
  public void test088()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("this is a message");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.enable_tracing();
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser javaParser1 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertNotNull(javaParser1);
      assertNotSame(javaParser1, javaParser0);
      assertFalse(javaParser1.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser1.Initializer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 89
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.PreIncrementExpression()V: I55 Branch 1293 IFEQ L3493 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.PreIncrementExpression()V: I83 Branch 1294 IFEQ L3499 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.PreIncrementExpression()V: I96 Branch 1295 IFEQ L3506 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.PreIncrementExpression()V: I115 Branch 1296 IFEQ L3519 - true
   */

  @Test
  public void test089()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaParser javaParser0 = new JavaParser((InputStream) pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.PreIncrementExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 90
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ReturnStatement()V: I87 Branch 2801 IFEQ L5804 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ReturnStatement()V: I115 Branch 2802 IFEQ L5810 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ReturnStatement()V: I147 Branch 2804 IFEQ L5830 - true
   */

  @Test
  public void test090()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.ReturnStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 91
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.<init>(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V: root-Branch
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.FieldDeclaration(I)V: I133 Branch 459 IFEQ L1323 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I132 Branch 917 IFEQ L2109 - false
   */

  @Test
  public void test091()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.FieldDeclaration(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 92
  /*
   * 94 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I26 Branch 475 IF_ICMPNE L1428 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 476 TABLESWITCH L1428 Case 15 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 477 TABLESWITCH L1428 Case 16 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 478 TABLESWITCH L1428 Case 17 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 479 TABLESWITCH L1428 Case 18 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 480 TABLESWITCH L1428 Case 19 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 481 TABLESWITCH L1428 Case 20 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 482 TABLESWITCH L1428 Case 21 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 483 TABLESWITCH L1428 Case 22 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 484 TABLESWITCH L1428 Case 23 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 485 TABLESWITCH L1428 Case 24 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 486 TABLESWITCH L1428 Case 25 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 487 TABLESWITCH L1428 Case 26 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 488 TABLESWITCH L1428 Case 27 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 489 TABLESWITCH L1428 Case 28 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 490 TABLESWITCH L1428 Case 29 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 491 TABLESWITCH L1428 Case 30 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 492 TABLESWITCH L1428 Case 31 - false
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 493 TABLESWITCH L1428 Case 32 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 494 TABLESWITCH L1428 Case 33 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 495 TABLESWITCH L1428 Case 34 - false
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 496 TABLESWITCH L1428 Case 35 - false
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 497 TABLESWITCH L1428 Case 36 - false
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 498 TABLESWITCH L1428 Case 37 - false
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 499 TABLESWITCH L1428 Case 38 - false
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 500 TABLESWITCH L1428 Case 39 - false
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 501 TABLESWITCH L1428 Case 40 - false
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 502 TABLESWITCH L1428 Case 41 - false
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 503 TABLESWITCH L1428 Case 42 - false
   * Goal 30. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 504 TABLESWITCH L1428 Case 43 - false
   * Goal 31. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 505 TABLESWITCH L1428 Case 44 - false
   * Goal 32. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 506 TABLESWITCH L1428 Case 45 - false
   * Goal 33. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 507 TABLESWITCH L1428 Case 46 - false
   * Goal 34. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 508 TABLESWITCH L1428 Case 47 - false
   * Goal 35. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 509 TABLESWITCH L1428 Case 48 - false
   * Goal 36. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 510 TABLESWITCH L1428 Case 49 - false
   * Goal 37. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 511 TABLESWITCH L1428 Case 50 - false
   * Goal 38. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 512 TABLESWITCH L1428 Case 51 - false
   * Goal 39. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 513 TABLESWITCH L1428 Case 52 - false
   * Goal 40. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 514 TABLESWITCH L1428 Case 53 - false
   * Goal 41. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 515 TABLESWITCH L1428 Case 54 - false
   * Goal 42. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 516 TABLESWITCH L1428 Case 55 - false
   * Goal 43. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 517 TABLESWITCH L1428 Case 56 - false
   * Goal 44. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 518 TABLESWITCH L1428 Case 57 - false
   * Goal 45. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 519 TABLESWITCH L1428 Case 58 - false
   * Goal 46. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 520 TABLESWITCH L1428 Case 59 - false
   * Goal 47. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 521 TABLESWITCH L1428 Case 60 - false
   * Goal 48. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 522 TABLESWITCH L1428 Case 61 - false
   * Goal 49. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 523 TABLESWITCH L1428 Case 62 - false
   * Goal 50. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 524 TABLESWITCH L1428 Case 63 - false
   * Goal 51. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 525 TABLESWITCH L1428 Case 64 - false
   * Goal 52. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 526 TABLESWITCH L1428 Case 65 - false
   * Goal 53. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 527 TABLESWITCH L1428 Case 66 - false
   * Goal 54. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 528 TABLESWITCH L1428 Case 67 - false
   * Goal 55. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 529 TABLESWITCH L1428 Case 68 - false
   * Goal 56. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 530 TABLESWITCH L1428 Case 69 - false
   * Goal 57. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 531 TABLESWITCH L1428 Case 70 - false
   * Goal 58. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 532 TABLESWITCH L1428 Case 71 - false
   * Goal 59. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 533 TABLESWITCH L1428 Case 72 - false
   * Goal 60. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 534 TABLESWITCH L1428 Case 73 - false
   * Goal 61. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 535 TABLESWITCH L1428 Case 74 - false
   * Goal 62. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 536 TABLESWITCH L1428 Case 75 - false
   * Goal 63. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 537 TABLESWITCH L1428 Case 76 - false
   * Goal 64. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 538 TABLESWITCH L1428 Case 77 - false
   * Goal 65. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 539 TABLESWITCH L1428 Case 78 - false
   * Goal 66. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 540 TABLESWITCH L1428 Case 79 - false
   * Goal 67. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 541 TABLESWITCH L1428 Case 80 - false
   * Goal 68. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 542 TABLESWITCH L1428 Case 81 - false
   * Goal 69. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 543 TABLESWITCH L1428 Case 82 - false
   * Goal 70. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 544 TABLESWITCH L1428 Case 83 - false
   * Goal 71. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 545 TABLESWITCH L1428 Case 84 - false
   * Goal 72. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 546 TABLESWITCH L1428 Case 85 - false
   * Goal 73. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 547 TABLESWITCH L1428 Case 86 - false
   * Goal 74. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 548 TABLESWITCH L1428 Case 87 - false
   * Goal 75. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 549 TABLESWITCH L1428 Case 88 - false
   * Goal 76. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 550 TABLESWITCH L1428 Case 89 - false
   * Goal 77. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 551 TABLESWITCH L1428 Case 90 - false
   * Goal 78. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 552 TABLESWITCH L1428 Case 91 - false
   * Goal 79. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 553 TABLESWITCH L1428 Case 92 - false
   * Goal 80. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 554 TABLESWITCH L1428 Case 93 - false
   * Goal 81. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 555 TABLESWITCH L1428 Case 94 - false
   * Goal 82. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 556 TABLESWITCH L1428 Case 95 - false
   * Goal 83. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 557 TABLESWITCH L1428 Case 96 - false
   * Goal 84. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 558 TABLESWITCH L1428 Case 97 - false
   * Goal 85. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 559 TABLESWITCH L1428 Case 98 - false
   * Goal 86. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 560 TABLESWITCH L1428 Case 99 - false
   * Goal 87. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 561 TABLESWITCH L1428 Case 100 - false
   * Goal 88. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 562 TABLESWITCH L1428 Case 101 - false
   * Goal 89. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 563 TABLESWITCH L1428 Case 102 - false
   * Goal 90. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 564 TABLESWITCH L1428 Default-Case - true
   * Goal 91. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I97 Branch 566 IFEQ L1466 - false
   * Goal 92. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I125 Branch 567 IFEQ L1472 - true
   * Goal 93. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I138 Branch 568 IFEQ L1479 - false
   * Goal 94. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I157 Branch 569 IFEQ L1492 - true
   */

  @Test
  public void test092()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser(".  Encountered: ");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.VariableInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 93
  /*
   * 11 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimitiveType()V: I26 Branch 984 IF_ICMPNE L2448 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimitiveType()V: I37 Branch 985 LOOKUPSWITCH L2448 Case 15 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimitiveType()V: I37 Branch 986 LOOKUPSWITCH L2448 Case 17 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimitiveType()V: I37 Branch 987 LOOKUPSWITCH L2448 Case 20 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimitiveType()V: I37 Branch 988 LOOKUPSWITCH L2448 Case 26 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimitiveType()V: I37 Branch 989 LOOKUPSWITCH L2448 Case 33 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimitiveType()V: I37 Branch 990 LOOKUPSWITCH L2448 Case 40 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimitiveType()V: I37 Branch 991 LOOKUPSWITCH L2448 Case 42 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimitiveType()V: I37 Branch 992 LOOKUPSWITCH L2448 Case 51 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimitiveType()V: I37 Branch 993 LOOKUPSWITCH L2448 Default-Case - true
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimitiveType()V: I172 Branch 995 IFEQ L2478 - false
   */

  @Test
  public void test093()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("y[");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.PrimitiveType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 94
  /*
   * 10 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.RSIGNEDSHIFT()V: I28 Branch 2830 IF_ICMPNE L6017 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.RSIGNEDSHIFT()V: I93 Branch 2833 IFEQ L6027 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_consume_token(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I48 Branch 3937 IF_ICMPLT L10947 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_consume_token(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I56 Branch 3938 IF_ICMPGT L10947 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_consume_token(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I64 Branch 3939 IFNULL L10948 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.getToken(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I7 Branch 3947 IFEQ L11001 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.getToken(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I29 Branch 3948 IF_ICMPGE L11002 - true
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.getToken(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I29 Branch 3948 IF_ICMPGE L11002 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.getToken(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I37 Branch 3949 IFNULL L11003 - true
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.generateParseException()Lcom/soops/CEN4010/JMCA/JParser/ParseException;: I22 Branch 3951 IFNE L11023 - true
   */

  @Test
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '9';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'9', '\u0000', '\u0000'}, charArray0);
      
      JavaParser javaParser0 = new JavaParser((Reader) charArrayReader0);
      assertNotNull(javaParser0);
      assertArrayEquals(new char[] {'9', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.RSIGNEDSHIFT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: 9
         //
      }
  }

  //Test case number: 95
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.PreDecrementExpression()V: I55 Branch 1298 IFEQ L3534 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.PreDecrementExpression()V: I83 Branch 1299 IFEQ L3540 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.PreDecrementExpression()V: I96 Branch 1300 IFEQ L3547 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.PreDecrementExpression()V: I115 Branch 1301 IFEQ L3560 - true
   */

  @Test
  public void test095()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("*b^m$O7gRJ0:=]cSeIJ");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.PreDecrementExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 96
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.FormalParameters()V: I127 Branch 708 IFEQ L1746 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.FormalParameters()V: I155 Branch 709 IFEQ L1752 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.FormalParameters()V: I168 Branch 710 IFEQ L1759 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.FormalParameters()V: I187 Branch 711 IFEQ L1772 - true
   */

  @Test
  public void test096()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(mockFileInputStream0);
      
      JavaParser javaParser0 = new JavaParser((InputStream) mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.FormalParameters();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 97
  /*
   * 5 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.Name()V: I75 Branch 1015 IFEQ L2559 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.NameList()V: I95 Branch 1020 IFEQ L2584 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.NameList()V: I123 Branch 1021 IFEQ L2590 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.NameList()V: I136 Branch 1022 IFEQ L2597 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.NameList()V: I155 Branch 1023 IFEQ L2610 - true
   */

  @Test
  public void test097()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      
      JavaParser javaParser0 = new JavaParser((String) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.NameList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 98
  /*
   * 6 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.<init>(Ljava/lang/String;)V: root-Branch
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.SwitchStatement()V: I155 Branch 2202 IFEQ L5152 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.SwitchStatement()V: I183 Branch 2203 IFEQ L5158 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.SwitchStatement()V: I196 Branch 2204 IFEQ L5165 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.SwitchStatement()V: I215 Branch 2205 IFEQ L5178 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_consume_token(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I11 Branch 3936 IFNULL L10939 - true
   */

  @Test
  public void test098()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("*b^m$O7gRJ0:=]cSeIJ");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.SwitchStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 99
  /*
   * 44 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.<init>(Ljava/io/InputStream;)V: root-Branch
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.FieldDeclaration(I)V: I105 Branch 458 IFEQ L1317 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.FieldDeclaration(I)V: I133 Branch 459 IFEQ L1323 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.FieldDeclaration(I)V: I146 Branch 460 IFEQ L1330 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.FieldDeclaration(I)V: I165 Branch 461 IFEQ L1343 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I26 Branch 904 IFEQ L2083 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I43 Branch 905 IF_ICMPNE L2086 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I54 Branch 906 LOOKUPSWITCH L2086 Case 15 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I54 Branch 907 LOOKUPSWITCH L2086 Case 17 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I54 Branch 908 LOOKUPSWITCH L2086 Case 20 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I54 Branch 909 LOOKUPSWITCH L2086 Case 26 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I54 Branch 910 LOOKUPSWITCH L2086 Case 33 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I54 Branch 911 LOOKUPSWITCH L2086 Case 40 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I54 Branch 912 LOOKUPSWITCH L2086 Case 42 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I54 Branch 913 LOOKUPSWITCH L2086 Case 51 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I54 Branch 914 LOOKUPSWITCH L2086 Default-Case - true
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I104 Branch 916 IFEQ L2103 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I132 Branch 917 IFEQ L2109 - true
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I145 Branch 918 IFEQ L2116 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I164 Branch 919 IFEQ L2129 - true
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_9(I)Z: I21 Branch 3178 IFNE L6814 - true
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_94()Z: I7 Branch 3210 IFEQ L7131 - false
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_93()Z: I7 Branch 3212 IFEQ L7146 - false
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_67()Z: I12 Branch 3215 IFEQ L7165 - false
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_67()Z: I25 Branch 3216 IFEQ L7167 - false
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_9()Z: I7 Branch 3220 IFEQ L7192 - false
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_74()Z: I13 Branch 3899 IFEQ L10697 - false
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_74()Z: I27 Branch 3900 IFEQ L10699 - false
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_74()Z: I41 Branch 3901 IFEQ L10701 - false
   * Goal 30. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_74()Z: I55 Branch 3902 IFEQ L10703 - false
   * Goal 31. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_74()Z: I69 Branch 3903 IFEQ L10705 - false
   * Goal 32. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_74()Z: I83 Branch 3904 IFEQ L10707 - false
   * Goal 33. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_74()Z: I97 Branch 3905 IFEQ L10709 - false
   * Goal 34. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_74()Z: I111 Branch 3906 IFEQ L10711 - false
   * Goal 35. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_123()Z: I8 Branch 3933 IFEQ L10868 - false
   * Goal 36. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_consume_token(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I11 Branch 3936 IFNULL L10939 - false
   * Goal 37. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_consume_token(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I48 Branch 3937 IF_ICMPLT L10947 - true
   * Goal 38. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_consume_token(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I74 Branch 3940 IF_ICMPNE L10954 - true
   * Goal 39. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_scan_token(I)Z: I9 Branch 3941 IF_ACMPNE L10970 - true
   * Goal 40. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_scan_token(I)Z: I9 Branch 3941 IF_ACMPNE L10970 - false
   * Goal 41. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_scan_token(I)Z: I26 Branch 3942 IFNONNULL L10972 - false
   * Goal 42. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_scan_token(I)Z: I75 Branch 3943 IF_ICMPEQ L10981 - false
   * Goal 43. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_ntk()I: I11 Branch 3950 IFNONNULL L11013 - true
   * Goal 44. com.soops.CEN4010.JMCA.JParser.JavaParser.generateParseException()Lcom/soops/CEN4010/JMCA/JParser/ParseException;: I22 Branch 3951 IFNE L11023 - false
   */

  @Test
  public void test099()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(8323);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      JavaParser javaParser0 = new JavaParser((InputStream) bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.FieldDeclaration(8323);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 100
  /*
   * 6 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.<init>(Ljava/io/Reader;)V: root-Branch
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I26 Branch 996 IF_ICMPNE L2490 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I99 Branch 1009 IFEQ L2510 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I127 Branch 1010 IFEQ L2516 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I159 Branch 1012 IFEQ L2536 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_ntk()I: I11 Branch 3950 IFNONNULL L11013 - false
   */

  @Test
  public void test100()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.ResultType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
