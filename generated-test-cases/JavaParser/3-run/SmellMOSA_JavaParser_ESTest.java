/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 17 17:34:02 GMT 2015
 */

package com.soops.CEN4010.JMCA.JParser;

import static org.junit.Assert.*;
import org.junit.Test;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.LineNumberInputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringBufferInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class JavaParser_ESTest extends JavaParser_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I43 Branch 905 IF_ICMPNE L2086 - false
   */

  @Test
  public void test00()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      JavaParser javaParser0 = new JavaParser((InputStream) pushbackInputStream0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.Type();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isStatic(I)Z: I8 Branch 3955 IFEQ L65 - true
   */

  @Test
  public void test01()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      
      boolean boolean0 = javaParser_ModifierSet0.isStatic((-349));
      assertFalse(boolean0);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isPrivate(I)Z: I8 Branch 3954 IFEQ L61 - true
   */

  @Test
  public void test02()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      
      boolean boolean0 = javaParser_ModifierSet0.isPrivate(163);
      assertFalse(boolean0);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
  }

  //Test case number: 3
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ThrowStatement()V: I61 Branch 2806 IFEQ L5846 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ThrowStatement()V: I89 Branch 2807 IFEQ L5852 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ThrowStatement()V: I121 Branch 2809 IFEQ L5872 - true
   */

  @Test
  public void test03()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.ThrowStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 4
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ArgumentList()V: I95 Branch 1596 IFEQ L4299 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ArgumentList()V: I123 Branch 1597 IFEQ L4305 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ArgumentList()V: I136 Branch 1598 IFEQ L4312 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ArgumentList()V: I155 Branch 1599 IFEQ L4325 - true
   */

  @Test
  public void test04()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("useDictionaryConjunctions3");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.ArgumentList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 5
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ArrayInitializer()V: I136 Branch 665 IFEQ L1558 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ArrayInitializer()V: I164 Branch 666 IFEQ L1564 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ArrayInitializer()V: I177 Branch 667 IFEQ L1571 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ArrayInitializer()V: I196 Branch 668 IFEQ L1584 - true
   */

  @Test
  public void test05()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("I`+<'=f5VAN");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.ArrayInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 6
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.SynchronizedStatement()V: I71 Branch 2811 IFEQ L5890 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.SynchronizedStatement()V: I99 Branch 2812 IFEQ L5896 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.SynchronizedStatement()V: I112 Branch 2813 IFEQ L5903 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.SynchronizedStatement()V: I131 Branch 2814 IFEQ L5916 - true
   */

  @Test
  public void test06()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("w #ct$%~}S&");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.SynchronizedStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 7
  /*
   * 94 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I26 Branch 2875 IF_ICMPNE L6321 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2876 TABLESWITCH L6321 Case 15 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2877 TABLESWITCH L6321 Case 16 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2878 TABLESWITCH L6321 Case 17 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2879 TABLESWITCH L6321 Case 18 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2880 TABLESWITCH L6321 Case 19 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2881 TABLESWITCH L6321 Case 20 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2882 TABLESWITCH L6321 Case 21 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2883 TABLESWITCH L6321 Case 22 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2884 TABLESWITCH L6321 Case 23 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2885 TABLESWITCH L6321 Case 24 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2886 TABLESWITCH L6321 Case 25 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2887 TABLESWITCH L6321 Case 26 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2888 TABLESWITCH L6321 Case 27 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2889 TABLESWITCH L6321 Case 28 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2890 TABLESWITCH L6321 Case 29 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2891 TABLESWITCH L6321 Case 30 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2892 TABLESWITCH L6321 Case 31 - false
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2893 TABLESWITCH L6321 Case 32 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2894 TABLESWITCH L6321 Case 33 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2895 TABLESWITCH L6321 Case 34 - false
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2896 TABLESWITCH L6321 Case 35 - false
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2897 TABLESWITCH L6321 Case 36 - false
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2898 TABLESWITCH L6321 Case 37 - false
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2899 TABLESWITCH L6321 Case 38 - false
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2900 TABLESWITCH L6321 Case 39 - false
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2901 TABLESWITCH L6321 Case 40 - false
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2902 TABLESWITCH L6321 Case 41 - false
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2903 TABLESWITCH L6321 Case 42 - false
   * Goal 30. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2904 TABLESWITCH L6321 Case 43 - false
   * Goal 31. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2905 TABLESWITCH L6321 Case 44 - false
   * Goal 32. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2906 TABLESWITCH L6321 Case 45 - false
   * Goal 33. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2907 TABLESWITCH L6321 Case 46 - false
   * Goal 34. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2908 TABLESWITCH L6321 Case 47 - false
   * Goal 35. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2909 TABLESWITCH L6321 Case 48 - false
   * Goal 36. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2910 TABLESWITCH L6321 Case 49 - false
   * Goal 37. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2911 TABLESWITCH L6321 Case 50 - false
   * Goal 38. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2912 TABLESWITCH L6321 Case 51 - false
   * Goal 39. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2913 TABLESWITCH L6321 Case 52 - false
   * Goal 40. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2914 TABLESWITCH L6321 Case 53 - false
   * Goal 41. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2915 TABLESWITCH L6321 Case 54 - false
   * Goal 42. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2916 TABLESWITCH L6321 Case 55 - false
   * Goal 43. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2917 TABLESWITCH L6321 Case 56 - false
   * Goal 44. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2918 TABLESWITCH L6321 Case 57 - false
   * Goal 45. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2919 TABLESWITCH L6321 Case 58 - false
   * Goal 46. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2920 TABLESWITCH L6321 Case 59 - false
   * Goal 47. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2921 TABLESWITCH L6321 Case 60 - false
   * Goal 48. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2922 TABLESWITCH L6321 Case 61 - false
   * Goal 49. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2923 TABLESWITCH L6321 Case 62 - false
   * Goal 50. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2924 TABLESWITCH L6321 Case 63 - false
   * Goal 51. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2925 TABLESWITCH L6321 Case 64 - false
   * Goal 52. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2926 TABLESWITCH L6321 Case 65 - false
   * Goal 53. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2927 TABLESWITCH L6321 Case 66 - false
   * Goal 54. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2928 TABLESWITCH L6321 Case 67 - false
   * Goal 55. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2929 TABLESWITCH L6321 Case 68 - false
   * Goal 56. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2930 TABLESWITCH L6321 Case 69 - false
   * Goal 57. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2931 TABLESWITCH L6321 Case 70 - false
   * Goal 58. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2932 TABLESWITCH L6321 Case 71 - false
   * Goal 59. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2933 TABLESWITCH L6321 Case 72 - false
   * Goal 60. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2934 TABLESWITCH L6321 Case 73 - false
   * Goal 61. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2935 TABLESWITCH L6321 Case 74 - false
   * Goal 62. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2936 TABLESWITCH L6321 Case 75 - false
   * Goal 63. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2937 TABLESWITCH L6321 Case 76 - false
   * Goal 64. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2938 TABLESWITCH L6321 Case 77 - false
   * Goal 65. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2939 TABLESWITCH L6321 Case 78 - false
   * Goal 66. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2940 TABLESWITCH L6321 Case 79 - false
   * Goal 67. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2941 TABLESWITCH L6321 Case 80 - false
   * Goal 68. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2942 TABLESWITCH L6321 Case 81 - false
   * Goal 69. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2943 TABLESWITCH L6321 Case 82 - false
   * Goal 70. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2944 TABLESWITCH L6321 Case 83 - false
   * Goal 71. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2945 TABLESWITCH L6321 Case 84 - false
   * Goal 72. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2946 TABLESWITCH L6321 Case 85 - false
   * Goal 73. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2947 TABLESWITCH L6321 Case 86 - false
   * Goal 74. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2948 TABLESWITCH L6321 Case 87 - false
   * Goal 75. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2949 TABLESWITCH L6321 Case 88 - false
   * Goal 76. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2950 TABLESWITCH L6321 Case 89 - false
   * Goal 77. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2951 TABLESWITCH L6321 Case 90 - false
   * Goal 78. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2952 TABLESWITCH L6321 Case 91 - false
   * Goal 79. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2953 TABLESWITCH L6321 Case 92 - false
   * Goal 80. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2954 TABLESWITCH L6321 Case 93 - false
   * Goal 81. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2955 TABLESWITCH L6321 Case 94 - false
   * Goal 82. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2956 TABLESWITCH L6321 Case 95 - false
   * Goal 83. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2957 TABLESWITCH L6321 Case 96 - false
   * Goal 84. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2958 TABLESWITCH L6321 Case 97 - false
   * Goal 85. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2959 TABLESWITCH L6321 Case 98 - false
   * Goal 86. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2960 TABLESWITCH L6321 Case 99 - false
   * Goal 87. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2961 TABLESWITCH L6321 Case 100 - false
   * Goal 88. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2962 TABLESWITCH L6321 Case 101 - false
   * Goal 89. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2963 TABLESWITCH L6321 Case 102 - false
   * Goal 90. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2964 TABLESWITCH L6321 Default-Case - true
   * Goal 91. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I107 Branch 2966 IFEQ L6362 - false
   * Goal 92. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I135 Branch 2967 IFEQ L6368 - true
   * Goal 93. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I148 Branch 2968 IFEQ L6375 - false
   * Goal 94. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I167 Branch 2969 IFEQ L6388 - true
   */

  @Test
  public void test07()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      JavaParser javaParser0 = new JavaParser((InputStream) pushbackInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.MemberValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 8
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclarator()V: I103 Branch 688 IFEQ L1677 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclarator()V: I131 Branch 689 IFEQ L1683 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclarator()V: I144 Branch 690 IFEQ L1690 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclarator()V: I163 Branch 691 IFEQ L1703 - true
   */

  @Test
  public void test08()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("An interface cannot have initializers");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.MethodDeclarator();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 9
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.AnnotationTypeDeclaration(I)V: I67 Branch 2980 IFEQ L6466 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.AnnotationTypeDeclaration(I)V: I95 Branch 2981 IFEQ L6472 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.AnnotationTypeDeclaration(I)V: I127 Branch 2983 IFEQ L6492 - true
   */

  @Test
  public void test09()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.AnnotationTypeDeclaration(6796);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 10
  /*
   * 8 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.AndExpression()V: I123 Branch 1113 IFEQ L2998 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.EqualityExpression()V: I173 Branch 1126 IFEQ L3060 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.InstanceOfExpression()V: I113 Branch 1134 IFEQ L3108 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.RelationalExpression()V: I197 Branch 1151 IFEQ L3178 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.ShiftExpression()V: I172 Branch 1162 IFEQ L3240 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.AdditiveExpression()V: I173 Branch 1175 IFEQ L3302 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.MultiplicativeExpression()V: I185 Branch 1190 IFEQ L3368 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I201 Branch 1289 IFEQ L3458 - false
   */

  @Test
  public void test10()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.AndExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 11
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValueArrayInitializer()V: I116 Branch 2975 IFEQ L6421 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValueArrayInitializer()V: I144 Branch 2976 IFEQ L6427 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValueArrayInitializer()V: I157 Branch 2977 IFEQ L6434 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValueArrayInitializer()V: I176 Branch 2978 IFEQ L6447 - true
   */

  @Test
  public void test11()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("8 Of(N}zEg");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.MemberValueArrayInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 12
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ImportDeclaration()V: I131 Branch 44 IFEQ L313 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ImportDeclaration()V: I159 Branch 45 IFEQ L319 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ImportDeclaration()V: I172 Branch 46 IFEQ L326 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ImportDeclaration()V: I191 Branch 47 IFEQ L339 - true
   */

  @Test
  public void test12()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      
      JavaParser javaParser0 = new JavaParser((String) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.ImportDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 13
  /*
   * 36 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.Modifiers()I: I30 Branch 48 IFEQ L358 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.Modifiers()I: I292 Branch 63 IFEQ L450 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_1(I)Z: I21 Branch 3170 IFNE L6734 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_130()Z: I8 Branch 3354 IFEQ L7905 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_131()Z: I8 Branch 3365 IFEQ L7960 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_129()Z: I8 Branch 3373 IFEQ L8000 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_111()Z: I7 Branch 3389 IFEQ L8078 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_110()Z: I7 Branch 3390 IFEQ L8085 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_109()Z: I7 Branch 3394 IFEQ L8111 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_83()Z: I12 Branch 3395 IFEQ L8124 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_83()Z: I25 Branch 3396 IFEQ L8126 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_83()Z: I38 Branch 3397 IFEQ L8128 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_58()Z: I7 Branch 3512 IFEQ L8706 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_57()Z: I8 Branch 3513 IFEQ L8713 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_56()Z: I8 Branch 3514 IFEQ L8720 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_55()Z: I8 Branch 3521 IFEQ L8751 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_54()Z: I8 Branch 3522 IFEQ L8758 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_53()Z: I8 Branch 3523 IFEQ L8765 - false
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_52()Z: I8 Branch 3531 IFEQ L8797 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_51()Z: I8 Branch 3532 IFEQ L8804 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_50()Z: I8 Branch 3533 IFEQ L8811 - false
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_49()Z: I8 Branch 3539 IFEQ L8837 - false
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_48()Z: I8 Branch 3540 IFEQ L8844 - false
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_47()Z: I8 Branch 3542 IFEQ L8858 - false
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_1()Z: I12 Branch 3549 IFEQ L8891 - false
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_1()Z: I25 Branch 3550 IFEQ L8893 - false
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_1()Z: I38 Branch 3551 IFEQ L8895 - false
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_1()Z: I51 Branch 3552 IFEQ L8897 - false
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_1()Z: I64 Branch 3553 IFEQ L8899 - false
   * Goal 30. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_1()Z: I77 Branch 3554 IFEQ L8901 - false
   * Goal 31. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_1()Z: I90 Branch 3555 IFEQ L8903 - false
   * Goal 32. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_1()Z: I103 Branch 3556 IFEQ L8905 - false
   * Goal 33. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_1()Z: I116 Branch 3557 IFEQ L8907 - false
   * Goal 34. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_1()Z: I129 Branch 3558 IFEQ L8909 - false
   * Goal 35. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_1()Z: I142 Branch 3559 IFEQ L8911 - false
   * Goal 36. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_1()Z: I155 Branch 3560 IFEQ L8913 - false
   */

  @Test
  public void test13()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) bufferedInputStream0, 15);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      JavaParser javaParser0 = new JavaParser((InputStream) pushbackInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      int int0 = javaParser0.Modifiers();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, int0);
      assertFalse(javaParser0.lookingAhead);
  }

  //Test case number: 14
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.LabeledStatement()V: I61 Branch 1737 IFEQ L4674 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.LabeledStatement()V: I89 Branch 1738 IFEQ L4680 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.LabeledStatement()V: I102 Branch 1739 IFEQ L4687 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.LabeledStatement()V: I121 Branch 1740 IFEQ L4700 - true
   */

  @Test
  public void test14()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      JavaParser javaParser0 = new JavaParser((String) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.LabeledStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 15
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberSelector()V: I61 Branch 1436 IFEQ L3926 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberSelector()V: I89 Branch 1437 IFEQ L3932 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberSelector()V: I102 Branch 1438 IFEQ L3939 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberSelector()V: I121 Branch 1439 IFEQ L3952 - true
   */

  @Test
  public void test15()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("over-top");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.MemberSelector();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isTransient(I)Z: I8 Branch 3961 IFEQ L89 - false
   */

  @Test
  public void test16()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      
      boolean boolean0 = javaParser_ModifierSet0.isTransient(4431);
      assertTrue(boolean0);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.IfStatement()V: I135 Branch 2220 IFEQ L5263 - false
   */

  @Test
  public void test17()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.IfStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ContinueStatement()V: I88 Branch 2709 IFEQ L5756 - false
   */

  @Test
  public void test18()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("n");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.ContinueStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 19
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.MarkerAnnotation()V: I83 Branch 2854 IFEQ L6152 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.MarkerAnnotation()V: I96 Branch 2855 IFEQ L6159 - false
   */

  @Test
  public void test19()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser(" _=V\"");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.MarkerAnnotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.SingleMemberAnnotation()V: I99 Branch 2859 IFEQ L6196 - false
   */

  @Test
  public void test20()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.SingleMemberAnnotation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.EnumBody()V: I202 Branch 228 IFEQ L860 - false
   */

  @Test
  public void test21()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.EnumBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 22
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ImplementsList(Z)V: I126 Branch 130 IFEQ L707 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ImplementsList(Z)V: I154 Branch 131 IFEQ L713 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ImplementsList(Z)V: I167 Branch 132 IFEQ L720 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ImplementsList(Z)V: I186 Branch 133 IFEQ L733 - true
   */

  @Test
  public void test22()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("A class cannot extend more than one other class");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.ImplementsList(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.enable_tracing()V: root-Branch
   */

  @Test
  public void test23()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      
      JavaParser javaParser0 = new JavaParser((String) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.enable_tracing();
      assertFalse(javaParser0.lookingAhead);
  }

  //Test case number: 24
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.EnumDeclaration(I)V: I92 Branch 138 IFEQ L756 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.EnumDeclaration(I)V: I120 Branch 139 IFEQ L762 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.EnumDeclaration(I)V: I133 Branch 140 IFEQ L769 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.EnumDeclaration(I)V: I152 Branch 141 IFEQ L782 - true
   */

  @Test
  public void test24()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("upskil");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.EnumDeclaration(0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 25
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.PreIncrementExpression()V: I55 Branch 1293 IFEQ L3493 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.PreIncrementExpression()V: I83 Branch 1294 IFEQ L3499 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.PreIncrementExpression()V: I96 Branch 1295 IFEQ L3506 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.PreIncrementExpression()V: I115 Branch 1296 IFEQ L3519 - true
   */

  @Test
  public void test25()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(2645);
      assertNotNull(pipedReader0);
      
      JavaParser javaParser0 = new JavaParser((Reader) pipedReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.PreIncrementExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 26
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ExtendsList(Z)V: I139 Branch 121 IFEQ L647 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ExtendsList(Z)V: I167 Branch 122 IFEQ L653 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ExtendsList(Z)V: I180 Branch 123 IFEQ L660 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ExtendsList(Z)V: I199 Branch 124 IFEQ L673 - true
   */

  @Test
  public void test26()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("=?ns");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.ExtendsList(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 27
  /*
   * 12 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.disable_tracing()V: root-Branch
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.Annotation()V: I26 Branch 2834 IFEQ L6040 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.Annotation()V: I43 Branch 2835 IFEQ L6042 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.Annotation()V: I60 Branch 2836 IF_ICMPNE L6045 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.Annotation()V: I71 Branch 2837 LOOKUPSWITCH L6045 Case 86 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.Annotation()V: I71 Branch 2838 LOOKUPSWITCH L6045 Default-Case - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.Annotation()V: I149 Branch 2841 IFEQ L6061 - true
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.Annotation()V: I162 Branch 2842 IFEQ L6068 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_37(I)Z: I21 Branch 3206 IFNE L7094 - true
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_38(I)Z: I21 Branch 3207 IFNE L7104 - true
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_38()Z: I8 Branch 3370 IFEQ L7987 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_37()Z: I8 Branch 3381 IFEQ L8039 - false
   */

  @Test
  public void test27()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("         java JavaParser < inputfile");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.disable_tracing();
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.Annotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I220 Branch 1472 IFEQ L4079 - false
   */

  @Test
  public void test28()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.PrimarySuffix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 29
  /*
   * 88 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I30 Branch 349 IFEQ L1181 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I68 Branch 351 IF_ICMPNE L1192 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 352 TABLESWITCH L1192 Case 13 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 353 TABLESWITCH L1192 Case 14 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 354 TABLESWITCH L1192 Case 15 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 355 TABLESWITCH L1192 Case 16 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 356 TABLESWITCH L1192 Case 17 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 357 TABLESWITCH L1192 Case 18 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 358 TABLESWITCH L1192 Case 19 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 359 TABLESWITCH L1192 Case 20 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 360 TABLESWITCH L1192 Case 21 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 361 TABLESWITCH L1192 Case 22 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 362 TABLESWITCH L1192 Case 23 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 363 TABLESWITCH L1192 Case 24 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 364 TABLESWITCH L1192 Case 25 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 365 TABLESWITCH L1192 Case 26 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 366 TABLESWITCH L1192 Case 27 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 367 TABLESWITCH L1192 Case 28 - false
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 368 TABLESWITCH L1192 Case 29 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 369 TABLESWITCH L1192 Case 30 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 370 TABLESWITCH L1192 Case 31 - false
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 371 TABLESWITCH L1192 Case 32 - false
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 372 TABLESWITCH L1192 Case 33 - false
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 373 TABLESWITCH L1192 Case 34 - false
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 374 TABLESWITCH L1192 Case 35 - false
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 375 TABLESWITCH L1192 Case 36 - false
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 376 TABLESWITCH L1192 Case 37 - false
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 377 TABLESWITCH L1192 Case 38 - false
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 378 TABLESWITCH L1192 Case 39 - false
   * Goal 30. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 379 TABLESWITCH L1192 Case 40 - false
   * Goal 31. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 380 TABLESWITCH L1192 Case 41 - false
   * Goal 32. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 381 TABLESWITCH L1192 Case 42 - false
   * Goal 33. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 382 TABLESWITCH L1192 Case 43 - false
   * Goal 34. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 383 TABLESWITCH L1192 Case 44 - false
   * Goal 35. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 384 TABLESWITCH L1192 Case 45 - false
   * Goal 36. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 385 TABLESWITCH L1192 Case 46 - false
   * Goal 37. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 386 TABLESWITCH L1192 Case 47 - false
   * Goal 38. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 387 TABLESWITCH L1192 Case 48 - false
   * Goal 39. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 388 TABLESWITCH L1192 Case 49 - false
   * Goal 40. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 389 TABLESWITCH L1192 Case 50 - false
   * Goal 41. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 390 TABLESWITCH L1192 Case 51 - false
   * Goal 42. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 391 TABLESWITCH L1192 Case 52 - false
   * Goal 43. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 392 TABLESWITCH L1192 Case 53 - false
   * Goal 44. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 393 TABLESWITCH L1192 Case 54 - false
   * Goal 45. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 394 TABLESWITCH L1192 Case 55 - false
   * Goal 46. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 395 TABLESWITCH L1192 Case 56 - false
   * Goal 47. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 396 TABLESWITCH L1192 Case 57 - false
   * Goal 48. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 397 TABLESWITCH L1192 Case 58 - false
   * Goal 49. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 398 TABLESWITCH L1192 Case 59 - false
   * Goal 50. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 399 TABLESWITCH L1192 Case 60 - false
   * Goal 51. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 400 TABLESWITCH L1192 Case 61 - false
   * Goal 52. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 401 TABLESWITCH L1192 Case 62 - false
   * Goal 53. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 402 TABLESWITCH L1192 Case 63 - false
   * Goal 54. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 403 TABLESWITCH L1192 Case 64 - false
   * Goal 55. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 404 TABLESWITCH L1192 Case 65 - false
   * Goal 56. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 405 TABLESWITCH L1192 Case 66 - false
   * Goal 57. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 406 TABLESWITCH L1192 Case 67 - false
   * Goal 58. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 407 TABLESWITCH L1192 Case 68 - false
   * Goal 59. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 408 TABLESWITCH L1192 Case 69 - false
   * Goal 60. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 409 TABLESWITCH L1192 Case 70 - false
   * Goal 61. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 410 TABLESWITCH L1192 Case 71 - false
   * Goal 62. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 411 TABLESWITCH L1192 Case 72 - false
   * Goal 63. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 412 TABLESWITCH L1192 Case 73 - false
   * Goal 64. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 413 TABLESWITCH L1192 Case 74 - false
   * Goal 65. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 414 TABLESWITCH L1192 Case 75 - false
   * Goal 66. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 415 TABLESWITCH L1192 Case 76 - false
   * Goal 67. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 416 TABLESWITCH L1192 Case 77 - false
   * Goal 68. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 417 TABLESWITCH L1192 Case 78 - false
   * Goal 69. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 418 TABLESWITCH L1192 Case 79 - false
   * Goal 70. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 419 TABLESWITCH L1192 Case 80 - false
   * Goal 71. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 420 TABLESWITCH L1192 Case 81 - false
   * Goal 72. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 421 TABLESWITCH L1192 Case 82 - false
   * Goal 73. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 422 TABLESWITCH L1192 Case 83 - false
   * Goal 74. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 423 TABLESWITCH L1192 Case 84 - false
   * Goal 75. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 424 TABLESWITCH L1192 Case 85 - false
   * Goal 76. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 425 TABLESWITCH L1192 Case 86 - false
   * Goal 77. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 426 TABLESWITCH L1192 Case 87 - false
   * Goal 78. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 427 TABLESWITCH L1192 Case 88 - false
   * Goal 79. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I79 Branch 428 TABLESWITCH L1192 Default-Case - true
   * Goal 80. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I256 Branch 450 IFEQ L1264 - false
   * Goal 81. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I284 Branch 451 IFEQ L1270 - true
   * Goal 82. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I297 Branch 452 IFEQ L1277 - false
   * Goal 83. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBodyDeclaration(Z)V: I316 Branch 453 IFEQ L1290 - true
   * Goal 84. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_4(I)Z: I21 Branch 3173 IFNE L6764 - true
   * Goal 85. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_62()Z: I13 Branch 3226 IFEQ L7226 - false
   * Goal 86. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_62()Z: I26 Branch 3227 IFEQ L7229 - false
   * Goal 87. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_4()Z: I7 Branch 3359 IFEQ L7924 - false
   * Goal 88. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_86()Z: I8 Branch 3610 IFEQ L9198 - false
   */

  @Test
  public void test29()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("<?xml version='1.0' encoding='ISO-8859-1' ?>");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.ClassOrInterfaceBodyDeclaration(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 30
  /*
   * 19 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I26 Branch 1462 IFEQ L4045 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I51 Branch 1463 IFEQ L4048 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I74 Branch 1464 IFEQ L4051 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I91 Branch 1465 IF_ICMPNE L4054 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I102 Branch 1466 LOOKUPSWITCH L4054 Case 77 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I102 Branch 1467 LOOKUPSWITCH L4054 Case 81 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I102 Branch 1468 LOOKUPSWITCH L4054 Case 85 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I102 Branch 1469 LOOKUPSWITCH L4054 Default-Case - true
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I192 Branch 1471 IFEQ L4073 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I220 Branch 1472 IFEQ L4079 - true
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I233 Branch 1473 IFEQ L4086 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I252 Branch 1474 IFEQ L4099 - true
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_26(I)Z: I21 Branch 3195 IFNE L6984 - true
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_27(I)Z: I21 Branch 3196 IFNE L6994 - true
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_28(I)Z: I21 Branch 3197 IFNE L7004 - true
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_28()Z: I7 Branch 3709 IFEQ L9722 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_27()Z: I8 Branch 3710 IFEQ L9729 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_26()Z: I8 Branch 3715 IFEQ L9752 - false
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_78()Z: I8 Branch 3745 IFEQ L9892 - false
   */

  @Test
  public void test30()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("h4S>KKNu");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.PrimarySuffix();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 31
  /*
   * 7 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.Initializer()V: I26 Branch 896 IF_ICMPNE L2033 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.Initializer()V: I37 Branch 897 LOOKUPSWITCH L2033 Case 52 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.Initializer()V: I37 Branch 898 LOOKUPSWITCH L2033 Default-Case - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.Initializer()V: I81 Branch 900 IFEQ L2042 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.Initializer()V: I109 Branch 901 IFEQ L2048 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.Initializer()V: I122 Branch 902 IFEQ L2055 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.Initializer()V: I141 Branch 903 IFEQ L2068 - true
   */

  @Test
  public void test31()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("=?ns");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.Initializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 32
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I26 Branch 996 IF_ICMPNE L2490 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I127 Branch 1010 IFEQ L2516 - false
   */

  @Test
  public void test32()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.ResultType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 33
  /*
   * 7 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.FormalParameter()V: I26 Branch 712 IF_ICMPNE L1784 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.FormalParameter()V: I37 Branch 713 LOOKUPSWITCH L1784 Case 31 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.FormalParameter()V: I37 Branch 714 LOOKUPSWITCH L1784 Default-Case - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.FormalParameter()V: I117 Branch 719 IFEQ L1801 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.FormalParameter()V: I145 Branch 720 IFEQ L1807 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.FormalParameter()V: I158 Branch 721 IFEQ L1814 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.FormalParameter()V: I177 Branch 722 IFEQ L1827 - true
   */

  @Test
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser((Reader) stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.FormalParameter();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 34
  /*
   * 20 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclaration(I)V: I37 Branch 670 LOOKUPSWITCH L1596 Case 88 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclaration(I)V: I37 Branch 671 LOOKUPSWITCH L1596 Default-Case - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclaration(I)V: I201 Branch 681 IFEQ L1631 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclaration(I)V: I214 Branch 682 IFEQ L1638 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I26 Branch 996 IF_ICMPNE L2490 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 997 LOOKUPSWITCH L2490 Case 15 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 998 LOOKUPSWITCH L2490 Case 17 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 999 LOOKUPSWITCH L2490 Case 20 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 1000 LOOKUPSWITCH L2490 Case 26 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 1001 LOOKUPSWITCH L2490 Case 33 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 1002 LOOKUPSWITCH L2490 Case 40 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 1003 LOOKUPSWITCH L2490 Case 42 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 1004 LOOKUPSWITCH L2490 Case 51 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 1005 LOOKUPSWITCH L2490 Case 63 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 1006 LOOKUPSWITCH L2490 Case 74 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 1007 LOOKUPSWITCH L2490 Default-Case - true
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I99 Branch 1009 IFEQ L2510 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I127 Branch 1010 IFEQ L2516 - true
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I140 Branch 1011 IFEQ L2523 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I159 Branch 1012 IFEQ L2536 - true
   */

  @Test
  public void test34()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.MethodDeclaration(5628);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 35
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1270 TABLESWITCH L3400 Case 91 - true
   */

  @Test
  public void test35()  throws Throwable  {
      SystemInUtil.addInputLine("?gfXPMj:@3");
      JavaParser javaParser0 = new JavaParser("L");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.UnaryExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: ?
         //
      }
  }

  //Test case number: 36
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.SingleMemberAnnotation()V: I71 Branch 2858 IFEQ L6190 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.SingleMemberAnnotation()V: I99 Branch 2859 IFEQ L6196 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.SingleMemberAnnotation()V: I112 Branch 2860 IFEQ L6203 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.SingleMemberAnnotation()V: I131 Branch 2861 IFEQ L6216 - true
   */

  @Test
  public void test36()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      
      JavaParser javaParser0 = new JavaParser((String) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.SingleMemberAnnotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 37
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.BreakStatement()V: I88 Branch 2704 IFEQ L5734 - false
   */

  @Test
  public void test37()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.BreakStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 38
  /*
   * 26 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.CompilationUnit()V: I26 Branch 3 IF_ICMPNE L170 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.CompilationUnit()V: I37 Branch 4 LOOKUPSWITCH L170 Case 46 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.CompilationUnit()V: I37 Branch 5 LOOKUPSWITCH L170 Default-Case - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.CompilationUnit()V: I56 Branch 6 IF_ICMPNE L178 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.CompilationUnit()V: I67 Branch 7 LOOKUPSWITCH L178 Case 38 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.CompilationUnit()V: I67 Branch 8 LOOKUPSWITCH L178 Default-Case - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.CompilationUnit()V: I96 Branch 9 IF_ICMPNE L188 - true
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.CompilationUnit()V: I107 Branch 10 LOOKUPSWITCH L188 Case 13 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.CompilationUnit()V: I107 Branch 11 LOOKUPSWITCH L188 Case 21 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.CompilationUnit()V: I107 Branch 12 LOOKUPSWITCH L188 Case 28 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.CompilationUnit()V: I107 Branch 13 LOOKUPSWITCH L188 Case 31 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.CompilationUnit()V: I107 Branch 14 LOOKUPSWITCH L188 Case 41 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.CompilationUnit()V: I107 Branch 15 LOOKUPSWITCH L188 Case 43 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.CompilationUnit()V: I107 Branch 16 LOOKUPSWITCH L188 Case 47 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.CompilationUnit()V: I107 Branch 17 LOOKUPSWITCH L188 Case 48 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.CompilationUnit()V: I107 Branch 18 LOOKUPSWITCH L188 Case 49 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParser.CompilationUnit()V: I107 Branch 19 LOOKUPSWITCH L188 Case 52 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParser.CompilationUnit()V: I107 Branch 20 LOOKUPSWITCH L188 Case 53 - false
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParser.CompilationUnit()V: I107 Branch 21 LOOKUPSWITCH L188 Case 56 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParser.CompilationUnit()V: I107 Branch 22 LOOKUPSWITCH L188 Case 60 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParser.CompilationUnit()V: I107 Branch 23 LOOKUPSWITCH L188 Case 64 - false
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParser.CompilationUnit()V: I107 Branch 24 LOOKUPSWITCH L188 Case 83 - false
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParser.CompilationUnit()V: I107 Branch 25 LOOKUPSWITCH L188 Case 86 - false
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParser.CompilationUnit()V: I107 Branch 26 LOOKUPSWITCH L188 Default-Case - true
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParser.CompilationUnit()V: I140 Branch 27 IFEQ L240 - false
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_consume_token(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I74 Branch 3940 IF_ICMPNE L10954 - false
   */

  @Test
  public void test38()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.CompilationUnit();
      assertFalse(javaParser0.lookingAhead);
  }

  //Test case number: 39
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.Block()V: I97 Branch 1831 IFEQ L4764 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.Block()V: I125 Branch 1832 IFEQ L4770 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.Block()V: I138 Branch 1833 IFEQ L4777 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.Block()V: I157 Branch 1834 IFEQ L4790 - true
   */

  @Test
  public void test39()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("jP[/q");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.Block();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 40
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.NormalAnnotation()V: I97 Branch 2848 IFEQ L6105 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.NormalAnnotation()V: I125 Branch 2849 IFEQ L6111 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.NormalAnnotation()V: I138 Branch 2850 IFEQ L6118 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.NormalAnnotation()V: I157 Branch 2851 IFEQ L6131 - true
   */

  @Test
  public void test40()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaParser javaParser0 = new JavaParser((InputStream) pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.NormalAnnotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 41
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeDeclaration()V: I187 Branch 94 IFEQ L514 - false
   */

  @Test
  public void test41()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.TypeDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 42
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArguments()V: I135 Branch 951 IFEQ L2298 - false
   */

  @Test
  public void test42()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.TypeArguments();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 43
  /*
   * 5 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I26 Branch 920 IF_ICMPNE L2141 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I135 Branch 934 IFEQ L2180 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I163 Branch 935 IFEQ L2186 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I176 Branch 936 IFEQ L2193 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I195 Branch 937 IFEQ L2206 - true
   */

  @Test
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte)0, (int) (byte)56);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      LineNumberInputStream lineNumberInputStream0 = new LineNumberInputStream((InputStream) byteArrayInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, lineNumberInputStream0.getLineNumber());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(lineNumberInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) lineNumberInputStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, lineNumberInputStream0.getLineNumber());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (int) (byte)0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, lineNumberInputStream0.getLineNumber());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, lineNumberInputStream0.getLineNumber());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaParser0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.ReferenceType();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
         //
      }
  }

  //Test case number: 44
  /*
   * 16 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArgument()V: I26 Branch 954 IF_ICMPNE L2330 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArgument()V: I37 Branch 955 LOOKUPSWITCH L2330 Case 15 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArgument()V: I37 Branch 956 LOOKUPSWITCH L2330 Case 17 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArgument()V: I37 Branch 957 LOOKUPSWITCH L2330 Case 20 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArgument()V: I37 Branch 958 LOOKUPSWITCH L2330 Case 26 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArgument()V: I37 Branch 959 LOOKUPSWITCH L2330 Case 33 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArgument()V: I37 Branch 960 LOOKUPSWITCH L2330 Case 40 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArgument()V: I37 Branch 961 LOOKUPSWITCH L2330 Case 42 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArgument()V: I37 Branch 962 LOOKUPSWITCH L2330 Case 51 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArgument()V: I37 Branch 963 LOOKUPSWITCH L2330 Case 74 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArgument()V: I37 Branch 964 LOOKUPSWITCH L2330 Case 91 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArgument()V: I37 Branch 965 LOOKUPSWITCH L2330 Default-Case - true
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArgument()V: I129 Branch 971 IFEQ L2358 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArgument()V: I157 Branch 972 IFEQ L2364 - true
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArgument()V: I170 Branch 973 IFEQ L2371 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArgument()V: I189 Branch 974 IFEQ L2384 - true
   */

  @Test
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte) (-13), (int) (byte)0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaParser javaParser0 = new JavaParser((InputStream) byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.TypeArgument();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 45
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceType()V: I130 Branch 943 IFEQ L2245 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceType()V: I143 Branch 944 IFEQ L2252 - false
   */

  @Test
  public void test45()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("h4S>KKNu");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.ClassOrInterfaceType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 46
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isProtected(I)Z: I8 Branch 3953 IFEQ L57 - false
   */

  @Test
  public void test46()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      
      boolean boolean0 = javaParser_ModifierSet0.isProtected((-422));
      assertTrue(boolean0);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
  }

  //Test case number: 47
  /*
   * 21 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I26 Branch 904 IFEQ L2083 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I43 Branch 905 IF_ICMPNE L2086 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I54 Branch 906 LOOKUPSWITCH L2086 Case 15 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I54 Branch 907 LOOKUPSWITCH L2086 Case 17 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I54 Branch 908 LOOKUPSWITCH L2086 Case 20 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I54 Branch 909 LOOKUPSWITCH L2086 Case 26 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I54 Branch 910 LOOKUPSWITCH L2086 Case 33 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I54 Branch 911 LOOKUPSWITCH L2086 Case 40 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I54 Branch 912 LOOKUPSWITCH L2086 Case 42 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I54 Branch 913 LOOKUPSWITCH L2086 Case 51 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I54 Branch 914 LOOKUPSWITCH L2086 Default-Case - true
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I132 Branch 917 IFEQ L2109 - true
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I145 Branch 918 IFEQ L2116 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.LocalVariableDeclaration()V: I26 Branch 1930 IF_ICMPNE L4894 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.LocalVariableDeclaration()V: I37 Branch 1931 LOOKUPSWITCH L4894 Case 31 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.LocalVariableDeclaration()V: I37 Branch 1932 LOOKUPSWITCH L4894 Default-Case - true
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParser.LocalVariableDeclaration()V: I131 Branch 1937 IFEQ L4915 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParser.LocalVariableDeclaration()V: I159 Branch 1938 IFEQ L4921 - true
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParser.LocalVariableDeclaration()V: I172 Branch 1939 IFEQ L4928 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParser.LocalVariableDeclaration()V: I191 Branch 1940 IFEQ L4941 - true
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_9(I)Z: I21 Branch 3178 IFNE L6814 - true
   */

  @Test
  public void test47()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("!Q{ztpa3>uu?bIw5'");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.LocalVariableDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 48
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_consume_token(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I56 Branch 3938 IF_ICMPGT L10947 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_consume_token(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I64 Branch 3939 IFNULL L10948 - false
   */

  @Test
  public void test48()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("i1#_.'\"&");
      assertEquals(8, stringBufferInputStream0.available());
      assertNotNull(stringBufferInputStream0);
      
      JavaParser javaParser0 = new JavaParser((InputStream) stringBufferInputStream0);
      assertEquals(8, stringBufferInputStream0.available());
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.EnumBody();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: i1
         //
      }
  }

  //Test case number: 49
  /*
   * 34 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.Expression()V: I66 Branch 1026 IFEQ L2633 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.Expression()V: I94 Branch 1027 IFEQ L2639 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.Expression()V: I107 Branch 1028 IFEQ L2646 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.Expression()V: I126 Branch 1029 IFEQ L2659 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalExpression()V: I95 Branch 1072 IFEQ L2737 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalExpression()V: I123 Branch 1073 IFEQ L2743 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalExpression()V: I136 Branch 1074 IFEQ L2750 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalExpression()V: I155 Branch 1075 IFEQ L2763 - true
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalOrExpression()V: I95 Branch 1080 IFEQ L2788 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalOrExpression()V: I123 Branch 1081 IFEQ L2794 - true
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalOrExpression()V: I136 Branch 1082 IFEQ L2801 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalOrExpression()V: I155 Branch 1083 IFEQ L2814 - true
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalAndExpression()V: I95 Branch 1088 IFEQ L2839 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalAndExpression()V: I123 Branch 1089 IFEQ L2845 - true
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalAndExpression()V: I136 Branch 1090 IFEQ L2852 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalAndExpression()V: I155 Branch 1091 IFEQ L2865 - true
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParser.InclusiveOrExpression()V: I95 Branch 1096 IFEQ L2890 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParser.InclusiveOrExpression()V: I123 Branch 1097 IFEQ L2896 - true
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParser.InclusiveOrExpression()V: I136 Branch 1098 IFEQ L2903 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParser.InclusiveOrExpression()V: I155 Branch 1099 IFEQ L2916 - true
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParser.ExclusiveOrExpression()V: I95 Branch 1104 IFEQ L2941 - false
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParser.ExclusiveOrExpression()V: I123 Branch 1105 IFEQ L2947 - true
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParser.ExclusiveOrExpression()V: I136 Branch 1106 IFEQ L2954 - false
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParser.ExclusiveOrExpression()V: I155 Branch 1107 IFEQ L2967 - true
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParser.AndExpression()V: I95 Branch 1112 IFEQ L2992 - false
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParser.AndExpression()V: I123 Branch 1113 IFEQ L2998 - true
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParser.AndExpression()V: I136 Branch 1114 IFEQ L3005 - false
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParser.AndExpression()V: I155 Branch 1115 IFEQ L3018 - true
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParser.EqualityExpression()V: I145 Branch 1125 IFEQ L3054 - false
   * Goal 30. com.soops.CEN4010.JMCA.JParser.JavaParser.EqualityExpression()V: I173 Branch 1126 IFEQ L3060 - true
   * Goal 31. com.soops.CEN4010.JMCA.JParser.JavaParser.EqualityExpression()V: I186 Branch 1127 IFEQ L3067 - false
   * Goal 32. com.soops.CEN4010.JMCA.JParser.JavaParser.EqualityExpression()V: I205 Branch 1128 IFEQ L3080 - true
   * Goal 33. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1267 TABLESWITCH L3400 Case 88 - true
   * Goal 34. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1282 TABLESWITCH L3400 Default-Case - false
   */

  @Test
  public void test49()  throws Throwable  {
      SystemInUtil.addInputLine("<?xml version='1.0' encoding='ISO-8859-1' ?>");
      JavaParser javaParser0 = new JavaParser("<?xml version='1.0' encoding='ISO-8859-1' ?>");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.Expression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: <
         //
      }
  }

  //Test case number: 50
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceDeclaration(I)V: I41 Branch 98 LOOKUPSWITCH L549 Case 21 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceDeclaration(I)V: I41 Branch 99 LOOKUPSWITCH L549 Case 41 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceDeclaration(I)V: I41 Branch 100 LOOKUPSWITCH L549 Default-Case - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceDeclaration(I)V: I253 Branch 113 IFEQ L598 - false
   */

  @Test
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.ClassOrInterfaceDeclaration((int) (byte)0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 51
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.dump(Ljava/io/Writer;)V: root-Branch
   */

  @Test
  public void test51()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((Writer) stringWriter0, false);
      assertEquals("", stringWriter0.toString());
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try {
        javaParser0.dump((Writer) mockPrintWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
      }
  }

  //Test case number: 52
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeParameters()V: I107 Branch 246 IFEQ L961 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeParameters()V: I135 Branch 247 IFEQ L967 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeParameters()V: I148 Branch 248 IFEQ L974 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeParameters()V: I167 Branch 249 IFEQ L987 - true
   */

  @Test
  public void test52()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaParser javaParser0 = new JavaParser((InputStream) pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.TypeParameters();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 53
  /*
   * 35 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.PostfixExpression()V: I125 Branch 1416 IFEQ L3779 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.PostfixExpression()V: I153 Branch 1417 IFEQ L3785 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.PostfixExpression()V: I166 Branch 1418 IFEQ L3792 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.PostfixExpression()V: I185 Branch 1419 IFEQ L3805 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryExpression()V: I66 Branch 1431 IFEQ L3884 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryExpression()V: I94 Branch 1432 IFEQ L3890 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryExpression()V: I107 Branch 1433 IFEQ L3897 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryExpression()V: I126 Branch 1434 IFEQ L3910 - true
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I26 Branch 1440 IF_ICMPNE L3964 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1441 LOOKUPSWITCH L3964 Case 30 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1442 LOOKUPSWITCH L3964 Case 44 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1443 LOOKUPSWITCH L3964 Case 45 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1444 LOOKUPSWITCH L3964 Case 54 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1445 LOOKUPSWITCH L3964 Case 57 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1446 LOOKUPSWITCH L3964 Case 61 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1447 LOOKUPSWITCH L3964 Case 66 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1448 LOOKUPSWITCH L3964 Case 70 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1449 LOOKUPSWITCH L3964 Case 72 - false
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1450 LOOKUPSWITCH L3964 Case 73 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1451 LOOKUPSWITCH L3964 Case 77 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1452 LOOKUPSWITCH L3964 Default-Case - true
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I124 Branch 1453 IFEQ L3991 - true
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I153 Branch 1454 IF_ICMPNE L3996 - true
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I164 Branch 1455 LOOKUPSWITCH L3996 Case 74 - false
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I164 Branch 1456 LOOKUPSWITCH L3996 Default-Case - true
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I214 Branch 1458 IFEQ L4007 - false
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I242 Branch 1459 IFEQ L4013 - true
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I255 Branch 1460 IFEQ L4020 - false
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I274 Branch 1461 IFEQ L4033 - true
   * Goal 30. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_25(I)Z: I21 Branch 3194 IFNE L6974 - true
   * Goal 31. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_25()Z: I7 Branch 3712 IFEQ L9739 - false
   * Goal 32. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_104()Z: I7 Branch 3895 IFEQ L10669 - false
   * Goal 33. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_76()Z: I13 Branch 3896 IFEQ L10678 - false
   * Goal 34. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_76()Z: I26 Branch 3897 IFEQ L10680 - false
   * Goal 35. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_scan_token(I)Z: I26 Branch 3942 IFNONNULL L10972 - true
   */

  @Test
  public void test53()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("J f(}9EDg");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.PostfixExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 54
  /*
   * 7 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ConstructorDeclaration()V: I26 Branch 723 IF_ICMPNE L1839 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ConstructorDeclaration()V: I37 Branch 724 LOOKUPSWITCH L1839 Case 88 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ConstructorDeclaration()V: I37 Branch 725 LOOKUPSWITCH L1839 Default-Case - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ConstructorDeclaration()V: I186 Branch 820 IFEQ L1913 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.ConstructorDeclaration()V: I214 Branch 821 IFEQ L1919 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.ConstructorDeclaration()V: I227 Branch 822 IFEQ L1926 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.ConstructorDeclaration()V: I246 Branch 823 IFEQ L1939 - true
   */

  @Test
  public void test54()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("<?xml version='1.0' encoding='ISO-8859-1' ?>");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.ConstructorDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 55
  /*
   * 5 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isStrictfp(I)Z: I8 Branch 3959 IFEQ L81 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclaration(I)V: I26 Branch 669 IF_ICMPNE L1596 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclaration(I)V: I173 Branch 680 IFEQ L1625 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclaration(I)V: I201 Branch 681 IFEQ L1631 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclaration(I)V: I233 Branch 683 IFEQ L1651 - true
   */

  @Test
  public void test55()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      
      boolean boolean0 = javaParser_ModifierSet0.isStrictfp(4431);
      assertTrue(boolean0);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      
      int int0 = JavaParser.ModifierSet.removeModifier(4431, 4431);
      assertEquals(0, int0);
      
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.MethodDeclaration(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 56
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValuePairs()V: I95 Branch 2866 IFEQ L6241 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValuePairs()V: I123 Branch 2867 IFEQ L6247 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValuePairs()V: I136 Branch 2868 IFEQ L6254 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValuePairs()V: I155 Branch 2869 IFEQ L6267 - true
   */

  @Test
  public void test56()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("8la");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.MemberValuePairs();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 57
  /*
   * 8 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.WildcardBounds()V: I26 Branch 975 IF_ICMPNE L2396 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.WildcardBounds()V: I37 Branch 976 LOOKUPSWITCH L2396 Case 29 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.WildcardBounds()V: I37 Branch 977 LOOKUPSWITCH L2396 Case 54 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.WildcardBounds()V: I37 Branch 978 LOOKUPSWITCH L2396 Default-Case - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.WildcardBounds()V: I109 Branch 980 IFEQ L2410 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.WildcardBounds()V: I137 Branch 981 IFEQ L2416 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.WildcardBounds()V: I150 Branch 982 IFEQ L2423 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.WildcardBounds()V: I169 Branch 983 IFEQ L2436 - true
   */

  @Test
  public void test57()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("!YlqM)v9");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.WildcardBounds();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 58
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ReInit(Ljava/io/InputStream;)V: root-Branch
   */

  @Test
  public void test58()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaParser javaParser0 = new JavaParser((InputStream) pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.ReInit((InputStream) pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(javaParser0.lookingAhead);
  }

  //Test case number: 59
  /*
   * 100 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I26 Branch 1835 IFEQ L4802 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I49 Branch 1836 IF_ICMPNE L4806 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1837 TABLESWITCH L4806 Case 14 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1838 TABLESWITCH L4806 Case 15 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1839 TABLESWITCH L4806 Case 16 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1840 TABLESWITCH L4806 Case 17 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1841 TABLESWITCH L4806 Case 18 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1842 TABLESWITCH L4806 Case 19 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1843 TABLESWITCH L4806 Case 20 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1844 TABLESWITCH L4806 Case 21 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1845 TABLESWITCH L4806 Case 22 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1846 TABLESWITCH L4806 Case 23 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1847 TABLESWITCH L4806 Case 24 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1848 TABLESWITCH L4806 Case 25 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1849 TABLESWITCH L4806 Case 26 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1850 TABLESWITCH L4806 Case 27 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1851 TABLESWITCH L4806 Case 28 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1852 TABLESWITCH L4806 Case 29 - false
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1853 TABLESWITCH L4806 Case 30 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1854 TABLESWITCH L4806 Case 31 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1855 TABLESWITCH L4806 Case 32 - false
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1856 TABLESWITCH L4806 Case 33 - false
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1857 TABLESWITCH L4806 Case 34 - false
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1858 TABLESWITCH L4806 Case 35 - false
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1859 TABLESWITCH L4806 Case 36 - false
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1860 TABLESWITCH L4806 Case 37 - false
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1861 TABLESWITCH L4806 Case 38 - false
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1862 TABLESWITCH L4806 Case 39 - false
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1863 TABLESWITCH L4806 Case 40 - false
   * Goal 30. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1864 TABLESWITCH L4806 Case 41 - false
   * Goal 31. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1865 TABLESWITCH L4806 Case 42 - false
   * Goal 32. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1866 TABLESWITCH L4806 Case 43 - false
   * Goal 33. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1867 TABLESWITCH L4806 Case 44 - false
   * Goal 34. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1868 TABLESWITCH L4806 Case 45 - false
   * Goal 35. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1869 TABLESWITCH L4806 Case 46 - false
   * Goal 36. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1870 TABLESWITCH L4806 Case 47 - false
   * Goal 37. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1871 TABLESWITCH L4806 Case 48 - false
   * Goal 38. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1872 TABLESWITCH L4806 Case 49 - false
   * Goal 39. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1873 TABLESWITCH L4806 Case 50 - false
   * Goal 40. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1874 TABLESWITCH L4806 Case 51 - false
   * Goal 41. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1875 TABLESWITCH L4806 Case 52 - false
   * Goal 42. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1876 TABLESWITCH L4806 Case 53 - false
   * Goal 43. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1877 TABLESWITCH L4806 Case 54 - false
   * Goal 44. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1878 TABLESWITCH L4806 Case 55 - false
   * Goal 45. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1879 TABLESWITCH L4806 Case 56 - false
   * Goal 46. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1880 TABLESWITCH L4806 Case 57 - false
   * Goal 47. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1881 TABLESWITCH L4806 Case 58 - false
   * Goal 48. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1882 TABLESWITCH L4806 Case 59 - false
   * Goal 49. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1883 TABLESWITCH L4806 Case 60 - false
   * Goal 50. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1884 TABLESWITCH L4806 Case 61 - false
   * Goal 51. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1885 TABLESWITCH L4806 Case 62 - false
   * Goal 52. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1886 TABLESWITCH L4806 Case 63 - false
   * Goal 53. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1887 TABLESWITCH L4806 Case 64 - false
   * Goal 54. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1888 TABLESWITCH L4806 Case 65 - false
   * Goal 55. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1889 TABLESWITCH L4806 Case 66 - false
   * Goal 56. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1890 TABLESWITCH L4806 Case 67 - false
   * Goal 57. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1891 TABLESWITCH L4806 Case 68 - false
   * Goal 58. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1892 TABLESWITCH L4806 Case 69 - false
   * Goal 59. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1893 TABLESWITCH L4806 Case 70 - false
   * Goal 60. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1894 TABLESWITCH L4806 Case 71 - false
   * Goal 61. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1895 TABLESWITCH L4806 Case 72 - false
   * Goal 62. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1896 TABLESWITCH L4806 Case 73 - false
   * Goal 63. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1897 TABLESWITCH L4806 Case 74 - false
   * Goal 64. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1898 TABLESWITCH L4806 Case 75 - false
   * Goal 65. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1899 TABLESWITCH L4806 Case 76 - false
   * Goal 66. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1900 TABLESWITCH L4806 Case 77 - false
   * Goal 67. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1901 TABLESWITCH L4806 Case 78 - false
   * Goal 68. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1902 TABLESWITCH L4806 Case 79 - false
   * Goal 69. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1903 TABLESWITCH L4806 Case 80 - false
   * Goal 70. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1904 TABLESWITCH L4806 Case 81 - false
   * Goal 71. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1905 TABLESWITCH L4806 Case 82 - false
   * Goal 72. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1906 TABLESWITCH L4806 Case 83 - false
   * Goal 73. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1907 TABLESWITCH L4806 Case 84 - false
   * Goal 74. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1908 TABLESWITCH L4806 Case 85 - false
   * Goal 75. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1909 TABLESWITCH L4806 Case 86 - false
   * Goal 76. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1910 TABLESWITCH L4806 Case 87 - false
   * Goal 77. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1911 TABLESWITCH L4806 Case 88 - false
   * Goal 78. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1912 TABLESWITCH L4806 Case 89 - false
   * Goal 79. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1913 TABLESWITCH L4806 Case 90 - false
   * Goal 80. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1914 TABLESWITCH L4806 Case 91 - false
   * Goal 81. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1915 TABLESWITCH L4806 Case 92 - false
   * Goal 82. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1916 TABLESWITCH L4806 Case 93 - false
   * Goal 83. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1917 TABLESWITCH L4806 Case 94 - false
   * Goal 84. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1918 TABLESWITCH L4806 Case 95 - false
   * Goal 85. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1919 TABLESWITCH L4806 Case 96 - false
   * Goal 86. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1920 TABLESWITCH L4806 Case 97 - false
   * Goal 87. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1921 TABLESWITCH L4806 Case 98 - false
   * Goal 88. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1922 TABLESWITCH L4806 Case 99 - false
   * Goal 89. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1923 TABLESWITCH L4806 Case 100 - false
   * Goal 90. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1924 TABLESWITCH L4806 Default-Case - true
   * Goal 91. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I121 Branch 1926 IFEQ L4856 - false
   * Goal 92. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I149 Branch 1927 IFEQ L4862 - true
   * Goal 93. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I162 Branch 1928 IFEQ L4869 - false
   * Goal 94. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I181 Branch 1929 IFEQ L4882 - true
   * Goal 95. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_34(I)Z: I21 Branch 3203 IFNE L7064 - true
   * Goal 96. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_34()Z: I13 Branch 3597 IFEQ L9129 - false
   * Goal 97. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_34()Z: I26 Branch 3598 IFEQ L9132 - false
   * Goal 98. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_consume_token(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I48 Branch 3937 IF_ICMPLT L10947 - false
   * Goal 99. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_consume_token(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I56 Branch 3938 IF_ICMPGT L10947 - true
   * Goal 100. com.soops.CEN4010.JMCA.JParser.JavaParser.generateParseException()Lcom/soops/CEN4010/JMCA/JParser/ParseException;: I22 Branch 3951 IFNE L11023 - true
   */

  @Test
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&z@");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser((Reader) stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.BlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: &
         //
      }
  }

  //Test case number: 60
  /*
   * 10 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.CastExpression()V: I26 Branch 1420 IFEQ L3817 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.CastExpression()V: I59 Branch 1421 IF_ICMPNE L3823 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.CastExpression()V: I70 Branch 1422 LOOKUPSWITCH L3823 Case 77 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.CastExpression()V: I70 Branch 1423 LOOKUPSWITCH L3823 Default-Case - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.CastExpression()V: I136 Branch 1425 IFEQ L3836 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.CastExpression()V: I164 Branch 1426 IFEQ L3842 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.CastExpression()V: I177 Branch 1427 IFEQ L3849 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.CastExpression()V: I196 Branch 1428 IFEQ L3862 - true
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_23(I)Z: I21 Branch 3192 IFNE L6954 - true
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_23()Z: I8 Branch 3748 IFEQ L9905 - false
   */

  @Test
  public void test60()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser(" ^oQ found.");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.CastExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 61
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValuePair()V: I61 Branch 2871 IFEQ L6283 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValuePair()V: I89 Branch 2872 IFEQ L6289 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValuePair()V: I102 Branch 2873 IFEQ L6296 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValuePair()V: I121 Branch 2874 IFEQ L6309 - true
   */

  @Test
  public void test61()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("w #ct$%~}S&");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.MemberValuePair();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 62
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isPublic(I)Z: I8 Branch 3952 IFEQ L53 - true
   */

  @Test
  public void test62()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      
      int int0 = JavaParser.ModifierSet.removeModifier((-2680), (-2680));
      assertEquals(0, int0);
      
      boolean boolean0 = javaParser_ModifierSet0.isPublic(0);
      assertFalse(boolean0);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
  }

  //Test case number: 63
  /*
   * 101 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.InstanceOfExpression()V: I85 Branch 1133 IFEQ L3102 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.InstanceOfExpression()V: I113 Branch 1134 IFEQ L3108 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.InstanceOfExpression()V: I126 Branch 1135 IFEQ L3115 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.InstanceOfExpression()V: I145 Branch 1136 IFEQ L3128 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.RelationalExpression()V: I169 Branch 1150 IFEQ L3172 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.RelationalExpression()V: I197 Branch 1151 IFEQ L3178 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.RelationalExpression()V: I210 Branch 1152 IFEQ L3185 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.RelationalExpression()V: I229 Branch 1153 IFEQ L3198 - true
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.ShiftExpression()V: I185 Branch 1163 IFEQ L3247 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.AdditiveExpression()V: I186 Branch 1176 IFEQ L3309 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.MultiplicativeExpression()V: I198 Branch 1191 IFEQ L3375 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1194 TABLESWITCH L3400 Case 15 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1195 TABLESWITCH L3400 Case 16 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1196 TABLESWITCH L3400 Case 17 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1197 TABLESWITCH L3400 Case 18 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1198 TABLESWITCH L3400 Case 19 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1199 TABLESWITCH L3400 Case 20 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1200 TABLESWITCH L3400 Case 21 - false
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1201 TABLESWITCH L3400 Case 22 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1202 TABLESWITCH L3400 Case 23 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1203 TABLESWITCH L3400 Case 24 - false
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1204 TABLESWITCH L3400 Case 25 - false
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1205 TABLESWITCH L3400 Case 26 - false
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1206 TABLESWITCH L3400 Case 27 - false
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1207 TABLESWITCH L3400 Case 28 - false
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1208 TABLESWITCH L3400 Case 29 - false
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1209 TABLESWITCH L3400 Case 30 - false
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1210 TABLESWITCH L3400 Case 31 - false
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1211 TABLESWITCH L3400 Case 32 - false
   * Goal 30. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1212 TABLESWITCH L3400 Case 33 - false
   * Goal 31. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1213 TABLESWITCH L3400 Case 34 - false
   * Goal 32. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1214 TABLESWITCH L3400 Case 35 - false
   * Goal 33. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1215 TABLESWITCH L3400 Case 36 - false
   * Goal 34. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1216 TABLESWITCH L3400 Case 37 - false
   * Goal 35. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1217 TABLESWITCH L3400 Case 38 - false
   * Goal 36. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1218 TABLESWITCH L3400 Case 39 - false
   * Goal 37. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1219 TABLESWITCH L3400 Case 40 - false
   * Goal 38. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1220 TABLESWITCH L3400 Case 41 - false
   * Goal 39. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1221 TABLESWITCH L3400 Case 42 - false
   * Goal 40. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1222 TABLESWITCH L3400 Case 43 - false
   * Goal 41. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1223 TABLESWITCH L3400 Case 44 - false
   * Goal 42. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1224 TABLESWITCH L3400 Case 45 - false
   * Goal 43. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1225 TABLESWITCH L3400 Case 46 - false
   * Goal 44. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1226 TABLESWITCH L3400 Case 47 - false
   * Goal 45. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1227 TABLESWITCH L3400 Case 48 - false
   * Goal 46. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1228 TABLESWITCH L3400 Case 49 - false
   * Goal 47. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1229 TABLESWITCH L3400 Case 50 - false
   * Goal 48. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1230 TABLESWITCH L3400 Case 51 - false
   * Goal 49. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1231 TABLESWITCH L3400 Case 52 - false
   * Goal 50. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1232 TABLESWITCH L3400 Case 53 - false
   * Goal 51. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1233 TABLESWITCH L3400 Case 54 - false
   * Goal 52. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1234 TABLESWITCH L3400 Case 55 - false
   * Goal 53. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1235 TABLESWITCH L3400 Case 56 - false
   * Goal 54. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1236 TABLESWITCH L3400 Case 57 - false
   * Goal 55. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1237 TABLESWITCH L3400 Case 58 - false
   * Goal 56. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1238 TABLESWITCH L3400 Case 59 - false
   * Goal 57. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1239 TABLESWITCH L3400 Case 60 - false
   * Goal 58. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1240 TABLESWITCH L3400 Case 61 - false
   * Goal 59. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1241 TABLESWITCH L3400 Case 62 - false
   * Goal 60. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1242 TABLESWITCH L3400 Case 63 - false
   * Goal 61. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1243 TABLESWITCH L3400 Case 64 - false
   * Goal 62. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1244 TABLESWITCH L3400 Case 65 - false
   * Goal 63. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1245 TABLESWITCH L3400 Case 66 - false
   * Goal 64. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1246 TABLESWITCH L3400 Case 67 - false
   * Goal 65. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1247 TABLESWITCH L3400 Case 68 - false
   * Goal 66. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1248 TABLESWITCH L3400 Case 69 - false
   * Goal 67. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1249 TABLESWITCH L3400 Case 70 - false
   * Goal 68. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1250 TABLESWITCH L3400 Case 71 - false
   * Goal 69. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1251 TABLESWITCH L3400 Case 72 - false
   * Goal 70. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1252 TABLESWITCH L3400 Case 73 - false
   * Goal 71. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1253 TABLESWITCH L3400 Case 74 - false
   * Goal 72. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1254 TABLESWITCH L3400 Case 75 - false
   * Goal 73. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1255 TABLESWITCH L3400 Case 76 - false
   * Goal 74. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1256 TABLESWITCH L3400 Case 77 - false
   * Goal 75. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1257 TABLESWITCH L3400 Case 78 - false
   * Goal 76. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1258 TABLESWITCH L3400 Case 79 - false
   * Goal 77. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1259 TABLESWITCH L3400 Case 80 - false
   * Goal 78. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1260 TABLESWITCH L3400 Case 81 - false
   * Goal 79. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1261 TABLESWITCH L3400 Case 82 - false
   * Goal 80. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1262 TABLESWITCH L3400 Case 83 - false
   * Goal 81. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1263 TABLESWITCH L3400 Case 84 - false
   * Goal 82. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1264 TABLESWITCH L3400 Case 85 - false
   * Goal 83. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1265 TABLESWITCH L3400 Case 86 - false
   * Goal 84. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1266 TABLESWITCH L3400 Case 87 - false
   * Goal 85. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1267 TABLESWITCH L3400 Case 88 - false
   * Goal 86. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1268 TABLESWITCH L3400 Case 89 - false
   * Goal 87. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1269 TABLESWITCH L3400 Case 90 - false
   * Goal 88. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1270 TABLESWITCH L3400 Case 91 - false
   * Goal 89. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1271 TABLESWITCH L3400 Case 92 - false
   * Goal 90. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1272 TABLESWITCH L3400 Case 93 - false
   * Goal 91. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1273 TABLESWITCH L3400 Case 94 - false
   * Goal 92. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1274 TABLESWITCH L3400 Case 95 - false
   * Goal 93. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1275 TABLESWITCH L3400 Case 96 - false
   * Goal 94. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1276 TABLESWITCH L3400 Case 97 - false
   * Goal 95. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1277 TABLESWITCH L3400 Case 98 - false
   * Goal 96. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1278 TABLESWITCH L3400 Case 99 - false
   * Goal 97. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1279 TABLESWITCH L3400 Case 100 - false
   * Goal 98. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1280 TABLESWITCH L3400 Case 101 - false
   * Goal 99. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1281 TABLESWITCH L3400 Case 102 - false
   * Goal 100. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1282 TABLESWITCH L3400 Default-Case - true
   * Goal 101. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I214 Branch 1290 IFEQ L3465 - false
   */

  @Test
  public void test63()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaParser javaParser0 = new JavaParser((InputStream) pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.InstanceOfExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 64
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.WhileStatement()V: I71 Branch 2224 IFEQ L5301 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.WhileStatement()V: I99 Branch 2225 IFEQ L5307 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.WhileStatement()V: I112 Branch 2226 IFEQ L5314 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.WhileStatement()V: I131 Branch 2227 IFEQ L5327 - true
   */

  @Test
  public void test64()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.WhileStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 65
  /*
   * 92 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I26 Branch 1943 IF_ICMPNE L4967 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1944 TABLESWITCH L4967 Case 15 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1945 TABLESWITCH L4967 Case 16 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1946 TABLESWITCH L4967 Case 17 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1947 TABLESWITCH L4967 Case 18 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1948 TABLESWITCH L4967 Case 19 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1949 TABLESWITCH L4967 Case 20 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1950 TABLESWITCH L4967 Case 21 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1951 TABLESWITCH L4967 Case 22 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1952 TABLESWITCH L4967 Case 23 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1953 TABLESWITCH L4967 Case 24 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1954 TABLESWITCH L4967 Case 25 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1955 TABLESWITCH L4967 Case 26 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1956 TABLESWITCH L4967 Case 27 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1957 TABLESWITCH L4967 Case 28 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1958 TABLESWITCH L4967 Case 29 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1959 TABLESWITCH L4967 Case 30 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1960 TABLESWITCH L4967 Case 31 - false
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1961 TABLESWITCH L4967 Case 32 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1962 TABLESWITCH L4967 Case 33 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1963 TABLESWITCH L4967 Case 34 - false
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1964 TABLESWITCH L4967 Case 35 - false
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1965 TABLESWITCH L4967 Case 36 - false
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1966 TABLESWITCH L4967 Case 37 - false
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1967 TABLESWITCH L4967 Case 38 - false
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1968 TABLESWITCH L4967 Case 39 - false
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1969 TABLESWITCH L4967 Case 40 - false
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1970 TABLESWITCH L4967 Case 41 - false
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1971 TABLESWITCH L4967 Case 42 - false
   * Goal 30. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1972 TABLESWITCH L4967 Case 43 - false
   * Goal 31. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1973 TABLESWITCH L4967 Case 44 - false
   * Goal 32. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1974 TABLESWITCH L4967 Case 45 - false
   * Goal 33. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1975 TABLESWITCH L4967 Case 46 - false
   * Goal 34. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1976 TABLESWITCH L4967 Case 47 - false
   * Goal 35. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1977 TABLESWITCH L4967 Case 48 - false
   * Goal 36. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1978 TABLESWITCH L4967 Case 49 - false
   * Goal 37. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1979 TABLESWITCH L4967 Case 50 - false
   * Goal 38. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1980 TABLESWITCH L4967 Case 51 - false
   * Goal 39. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1981 TABLESWITCH L4967 Case 52 - false
   * Goal 40. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1982 TABLESWITCH L4967 Case 53 - false
   * Goal 41. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1983 TABLESWITCH L4967 Case 54 - false
   * Goal 42. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1984 TABLESWITCH L4967 Case 55 - false
   * Goal 43. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1985 TABLESWITCH L4967 Case 56 - false
   * Goal 44. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1986 TABLESWITCH L4967 Case 57 - false
   * Goal 45. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1987 TABLESWITCH L4967 Case 58 - false
   * Goal 46. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1988 TABLESWITCH L4967 Case 59 - false
   * Goal 47. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1989 TABLESWITCH L4967 Case 60 - false
   * Goal 48. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1990 TABLESWITCH L4967 Case 61 - false
   * Goal 49. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1991 TABLESWITCH L4967 Case 62 - false
   * Goal 50. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1992 TABLESWITCH L4967 Case 63 - false
   * Goal 51. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1993 TABLESWITCH L4967 Case 64 - false
   * Goal 52. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1994 TABLESWITCH L4967 Case 65 - false
   * Goal 53. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1995 TABLESWITCH L4967 Case 66 - false
   * Goal 54. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1996 TABLESWITCH L4967 Case 67 - false
   * Goal 55. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1997 TABLESWITCH L4967 Case 68 - false
   * Goal 56. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1998 TABLESWITCH L4967 Case 69 - false
   * Goal 57. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1999 TABLESWITCH L4967 Case 70 - false
   * Goal 58. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2000 TABLESWITCH L4967 Case 71 - false
   * Goal 59. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2001 TABLESWITCH L4967 Case 72 - false
   * Goal 60. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2002 TABLESWITCH L4967 Case 73 - false
   * Goal 61. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2003 TABLESWITCH L4967 Case 74 - false
   * Goal 62. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2004 TABLESWITCH L4967 Case 75 - false
   * Goal 63. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2005 TABLESWITCH L4967 Case 76 - false
   * Goal 64. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2006 TABLESWITCH L4967 Case 77 - false
   * Goal 65. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2007 TABLESWITCH L4967 Case 78 - false
   * Goal 66. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2008 TABLESWITCH L4967 Case 79 - false
   * Goal 67. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2009 TABLESWITCH L4967 Case 80 - false
   * Goal 68. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2010 TABLESWITCH L4967 Case 81 - false
   * Goal 69. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2011 TABLESWITCH L4967 Case 82 - false
   * Goal 70. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2012 TABLESWITCH L4967 Case 83 - false
   * Goal 71. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2013 TABLESWITCH L4967 Case 84 - false
   * Goal 72. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2014 TABLESWITCH L4967 Case 85 - false
   * Goal 73. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2015 TABLESWITCH L4967 Case 86 - false
   * Goal 74. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2016 TABLESWITCH L4967 Case 87 - false
   * Goal 75. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2017 TABLESWITCH L4967 Case 88 - false
   * Goal 76. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2018 TABLESWITCH L4967 Case 89 - false
   * Goal 77. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2019 TABLESWITCH L4967 Case 90 - false
   * Goal 78. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2020 TABLESWITCH L4967 Case 91 - false
   * Goal 79. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2021 TABLESWITCH L4967 Case 92 - false
   * Goal 80. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2022 TABLESWITCH L4967 Case 93 - false
   * Goal 81. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2023 TABLESWITCH L4967 Case 94 - false
   * Goal 82. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2024 TABLESWITCH L4967 Case 95 - false
   * Goal 83. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2025 TABLESWITCH L4967 Case 96 - false
   * Goal 84. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2026 TABLESWITCH L4967 Case 97 - false
   * Goal 85. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2027 TABLESWITCH L4967 Case 98 - false
   * Goal 86. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2028 TABLESWITCH L4967 Case 99 - false
   * Goal 87. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2029 TABLESWITCH L4967 Case 100 - false
   * Goal 88. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2030 TABLESWITCH L4967 Default-Case - true
   * Goal 89. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I197 Branch 2104 IFEQ L5047 - false
   * Goal 90. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I225 Branch 2105 IFEQ L5053 - true
   * Goal 91. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I238 Branch 2106 IFEQ L5060 - false
   * Goal 92. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I257 Branch 2107 IFEQ L5073 - true
   */

  @Test
  public void test65()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.StatementExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 66
  /*
   * 5 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceDeclaration(I)V: I30 Branch 97 IF_ICMPNE L549 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceDeclaration(I)V: I212 Branch 111 IFEQ L585 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceDeclaration(I)V: I240 Branch 112 IFEQ L591 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceDeclaration(I)V: I253 Branch 113 IFEQ L598 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceDeclaration(I)V: I272 Branch 114 IFEQ L611 - true
   */

  @Test
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream((InputStream) byteArrayInputStream0, (InputStream) byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) sequenceInputStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(javaParser0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.ClassOrInterfaceDeclaration((int) (byte)0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
         //
      }
  }

  //Test case number: 67
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.Annotation()V: I121 Branch 2840 IFEQ L6055 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.Annotation()V: I149 Branch 2841 IFEQ L6061 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.Annotation()V: I181 Branch 2843 IFEQ L6081 - true
   */

  @Test
  public void test67()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      
      boolean boolean0 = javaParser_ModifierSet0.isNative(275);
      assertFalse(boolean0);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("y||}bwqTDXaeQhFh=", false);
      assertNotNull(mockFileOutputStream0);
      
      FileDescriptor fileDescriptor0 = mockFileOutputStream0.getFD();
      assertTrue(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      assertTrue(fileDescriptor0.valid());
      assertNotNull(mockFileReader0);
      
      JavaParser javaParser0 = new JavaParser((Reader) mockFileReader0);
      assertTrue(fileDescriptor0.valid());
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.Annotation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 68
  /*
   * 8 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.SwitchLabel()V: I26 Branch 2206 IF_ICMPNE L5190 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.SwitchLabel()V: I37 Branch 2207 LOOKUPSWITCH L5190 Case 18 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.SwitchLabel()V: I37 Branch 2208 LOOKUPSWITCH L5190 Case 24 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.SwitchLabel()V: I37 Branch 2209 LOOKUPSWITCH L5190 Default-Case - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.SwitchLabel()V: I117 Branch 2211 IFEQ L5205 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.SwitchLabel()V: I145 Branch 2212 IFEQ L5211 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.SwitchLabel()V: I158 Branch 2213 IFEQ L5218 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.SwitchLabel()V: I177 Branch 2214 IFEQ L5231 - true
   */

  @Test
  public void test68()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("~R#tm;Ym(CP");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.SwitchLabel();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 69
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isPublic(I)Z: I8 Branch 3952 IFEQ L53 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isPrivate(I)Z: I8 Branch 3954 IFEQ L61 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isFinal(I)Z: I8 Branch 3957 IFEQ L73 - false
   */

  @Test
  public void test69()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      
      boolean boolean0 = javaParser_ModifierSet0.isPublic(173);
      assertTrue(boolean0);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      
      boolean boolean1 = javaParser_ModifierSet0.isPrivate(173);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      
      boolean boolean2 = javaParser_ModifierSet0.isFinal(173);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
  }

  //Test case number: 70
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.EmptyStatement()V: I50 Branch 1942 IFEQ L4955 - false
   */

  @Test
  public void test70()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JavaParser javaParser0 = new JavaParser((Reader) pipedReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.EmptyStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 71
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.MarkerAnnotation()V: I55 Branch 2853 IFEQ L6146 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.MarkerAnnotation()V: I83 Branch 2854 IFEQ L6152 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.MarkerAnnotation()V: I115 Branch 2856 IFEQ L6172 - true
   */

  @Test
  public void test71()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.MarkerAnnotation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 72
  /*
   * 22 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeDeclaration()V: I26 Branch 68 IF_ICMPNE L467 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeDeclaration()V: I37 Branch 69 LOOKUPSWITCH L467 Case 13 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeDeclaration()V: I37 Branch 70 LOOKUPSWITCH L467 Case 21 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeDeclaration()V: I37 Branch 71 LOOKUPSWITCH L467 Case 28 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeDeclaration()V: I37 Branch 72 LOOKUPSWITCH L467 Case 31 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeDeclaration()V: I37 Branch 73 LOOKUPSWITCH L467 Case 41 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeDeclaration()V: I37 Branch 74 LOOKUPSWITCH L467 Case 43 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeDeclaration()V: I37 Branch 75 LOOKUPSWITCH L467 Case 47 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeDeclaration()V: I37 Branch 76 LOOKUPSWITCH L467 Case 48 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeDeclaration()V: I37 Branch 77 LOOKUPSWITCH L467 Case 49 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeDeclaration()V: I37 Branch 78 LOOKUPSWITCH L467 Case 52 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeDeclaration()V: I37 Branch 79 LOOKUPSWITCH L467 Case 53 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeDeclaration()V: I37 Branch 80 LOOKUPSWITCH L467 Case 56 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeDeclaration()V: I37 Branch 81 LOOKUPSWITCH L467 Case 60 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeDeclaration()V: I37 Branch 82 LOOKUPSWITCH L467 Case 64 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeDeclaration()V: I37 Branch 83 LOOKUPSWITCH L467 Case 83 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeDeclaration()V: I37 Branch 84 LOOKUPSWITCH L467 Case 86 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeDeclaration()V: I37 Branch 85 LOOKUPSWITCH L467 Default-Case - true
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeDeclaration()V: I159 Branch 93 IFEQ L508 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeDeclaration()V: I187 Branch 94 IFEQ L514 - true
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeDeclaration()V: I200 Branch 95 IFEQ L521 - false
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeDeclaration()V: I219 Branch 96 IFEQ L534 - true
   */

  @Test
  public void test72()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("-57g=J-'ZTg;[]N>");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.TypeDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 73
  /*
   * 5 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isAbstract(I)Z: I8 Branch 3956 IFEQ L69 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArguments()V: I107 Branch 950 IFEQ L2292 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArguments()V: I135 Branch 951 IFEQ L2298 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArguments()V: I148 Branch 952 IFEQ L2305 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.TypeArguments()V: I167 Branch 953 IFEQ L2318 - true
   */

  @Test
  public void test73()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaCharStream javaCharStream0 = javaParser0.token_source.input_stream;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      
      boolean boolean0 = javaParser_ModifierSet0.isAbstract((-1));
      assertTrue(boolean0);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      
      try {
        javaParser0.TypeArguments();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 74
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I132 Branch 2684 IFEQ L5601 - false
   */

  @Test
  public void test74()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.ForInit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 75
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isProtected(I)Z: I8 Branch 3953 IFEQ L57 - true
   */

  @Test
  public void test75()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      
      boolean boolean0 = javaParser_ModifierSet0.isProtected((-423));
      assertFalse(boolean0);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
  }

  //Test case number: 76
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.EnumBody()V: I174 Branch 227 IFEQ L854 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.EnumBody()V: I202 Branch 228 IFEQ L860 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.EnumBody()V: I215 Branch 229 IFEQ L867 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.EnumBody()V: I234 Branch 230 IFEQ L880 - true
   */

  @Test
  public void test76()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.EnumBody();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 77
  /*
   * 117 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I26 Branch 2593 IFEQ L5560 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I43 Branch 2594 IF_ICMPNE L5563 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2595 TABLESWITCH L5563 Case 15 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2596 TABLESWITCH L5563 Case 16 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2597 TABLESWITCH L5563 Case 17 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2598 TABLESWITCH L5563 Case 18 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2599 TABLESWITCH L5563 Case 19 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2600 TABLESWITCH L5563 Case 20 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2601 TABLESWITCH L5563 Case 21 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2602 TABLESWITCH L5563 Case 22 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2603 TABLESWITCH L5563 Case 23 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2604 TABLESWITCH L5563 Case 24 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2605 TABLESWITCH L5563 Case 25 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2606 TABLESWITCH L5563 Case 26 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2607 TABLESWITCH L5563 Case 27 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2608 TABLESWITCH L5563 Case 28 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2609 TABLESWITCH L5563 Case 29 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2610 TABLESWITCH L5563 Case 30 - false
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2611 TABLESWITCH L5563 Case 31 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2612 TABLESWITCH L5563 Case 32 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2613 TABLESWITCH L5563 Case 33 - false
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2614 TABLESWITCH L5563 Case 34 - false
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2615 TABLESWITCH L5563 Case 35 - false
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2616 TABLESWITCH L5563 Case 36 - false
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2617 TABLESWITCH L5563 Case 37 - false
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2618 TABLESWITCH L5563 Case 38 - false
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2619 TABLESWITCH L5563 Case 39 - false
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2620 TABLESWITCH L5563 Case 40 - false
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2621 TABLESWITCH L5563 Case 41 - false
   * Goal 30. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2622 TABLESWITCH L5563 Case 42 - false
   * Goal 31. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2623 TABLESWITCH L5563 Case 43 - false
   * Goal 32. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2624 TABLESWITCH L5563 Case 44 - false
   * Goal 33. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2625 TABLESWITCH L5563 Case 45 - false
   * Goal 34. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2626 TABLESWITCH L5563 Case 46 - false
   * Goal 35. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2627 TABLESWITCH L5563 Case 47 - false
   * Goal 36. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2628 TABLESWITCH L5563 Case 48 - false
   * Goal 37. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2629 TABLESWITCH L5563 Case 49 - false
   * Goal 38. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2630 TABLESWITCH L5563 Case 50 - false
   * Goal 39. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2631 TABLESWITCH L5563 Case 51 - false
   * Goal 40. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2632 TABLESWITCH L5563 Case 52 - false
   * Goal 41. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2633 TABLESWITCH L5563 Case 53 - false
   * Goal 42. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2634 TABLESWITCH L5563 Case 54 - false
   * Goal 43. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2635 TABLESWITCH L5563 Case 55 - false
   * Goal 44. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2636 TABLESWITCH L5563 Case 56 - false
   * Goal 45. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2637 TABLESWITCH L5563 Case 57 - false
   * Goal 46. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2638 TABLESWITCH L5563 Case 58 - false
   * Goal 47. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2639 TABLESWITCH L5563 Case 59 - false
   * Goal 48. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2640 TABLESWITCH L5563 Case 60 - false
   * Goal 49. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2641 TABLESWITCH L5563 Case 61 - false
   * Goal 50. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2642 TABLESWITCH L5563 Case 62 - false
   * Goal 51. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2643 TABLESWITCH L5563 Case 63 - false
   * Goal 52. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2644 TABLESWITCH L5563 Case 64 - false
   * Goal 53. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2645 TABLESWITCH L5563 Case 65 - false
   * Goal 54. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2646 TABLESWITCH L5563 Case 66 - false
   * Goal 55. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2647 TABLESWITCH L5563 Case 67 - false
   * Goal 56. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2648 TABLESWITCH L5563 Case 68 - false
   * Goal 57. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2649 TABLESWITCH L5563 Case 69 - false
   * Goal 58. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2650 TABLESWITCH L5563 Case 70 - false
   * Goal 59. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2651 TABLESWITCH L5563 Case 71 - false
   * Goal 60. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2652 TABLESWITCH L5563 Case 72 - false
   * Goal 61. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2653 TABLESWITCH L5563 Case 73 - false
   * Goal 62. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2654 TABLESWITCH L5563 Case 74 - false
   * Goal 63. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2655 TABLESWITCH L5563 Case 75 - false
   * Goal 64. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2656 TABLESWITCH L5563 Case 76 - false
   * Goal 65. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2657 TABLESWITCH L5563 Case 77 - false
   * Goal 66. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2658 TABLESWITCH L5563 Case 78 - false
   * Goal 67. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2659 TABLESWITCH L5563 Case 79 - false
   * Goal 68. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2660 TABLESWITCH L5563 Case 80 - false
   * Goal 69. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2661 TABLESWITCH L5563 Case 81 - false
   * Goal 70. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2662 TABLESWITCH L5563 Case 82 - false
   * Goal 71. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2663 TABLESWITCH L5563 Case 83 - false
   * Goal 72. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2664 TABLESWITCH L5563 Case 84 - false
   * Goal 73. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2665 TABLESWITCH L5563 Case 85 - false
   * Goal 74. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2666 TABLESWITCH L5563 Case 86 - false
   * Goal 75. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2667 TABLESWITCH L5563 Case 87 - false
   * Goal 76. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2668 TABLESWITCH L5563 Case 88 - false
   * Goal 77. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2669 TABLESWITCH L5563 Case 89 - false
   * Goal 78. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2670 TABLESWITCH L5563 Case 90 - false
   * Goal 79. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2671 TABLESWITCH L5563 Case 91 - false
   * Goal 80. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2672 TABLESWITCH L5563 Case 92 - false
   * Goal 81. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2673 TABLESWITCH L5563 Case 93 - false
   * Goal 82. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2674 TABLESWITCH L5563 Case 94 - false
   * Goal 83. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2675 TABLESWITCH L5563 Case 95 - false
   * Goal 84. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2676 TABLESWITCH L5563 Case 96 - false
   * Goal 85. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2677 TABLESWITCH L5563 Case 97 - false
   * Goal 86. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2678 TABLESWITCH L5563 Case 98 - false
   * Goal 87. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2679 TABLESWITCH L5563 Case 99 - false
   * Goal 88. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2680 TABLESWITCH L5563 Case 100 - false
   * Goal 89. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I54 Branch 2681 TABLESWITCH L5563 Default-Case - true
   * Goal 90. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I104 Branch 2683 IFEQ L5595 - false
   * Goal 91. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I132 Branch 2684 IFEQ L5601 - true
   * Goal 92. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I145 Branch 2685 IFEQ L5608 - false
   * Goal 93. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I164 Branch 2686 IFEQ L5621 - true
   * Goal 94. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_36(I)Z: I21 Branch 3205 IFNE L7084 - true
   * Goal 95. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_94()Z: I7 Branch 3210 IFEQ L7131 - false
   * Goal 96. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_93()Z: I7 Branch 3212 IFEQ L7146 - false
   * Goal 97. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_67()Z: I12 Branch 3215 IFEQ L7165 - false
   * Goal 98. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_67()Z: I25 Branch 3216 IFEQ L7167 - false
   * Goal 99. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_85()Z: I7 Branch 3219 IFEQ L7185 - false
   * Goal 100. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_9()Z: I7 Branch 3220 IFEQ L7192 - false
   * Goal 101. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_60()Z: I12 Branch 3221 IFEQ L7201 - false
   * Goal 102. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_60()Z: I25 Branch 3222 IFEQ L7203 - false
   * Goal 103. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_36()Z: I13 Branch 3488 IFEQ L8583 - false
   * Goal 104. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_36()Z: I26 Branch 3489 IFEQ L8586 - false
   * Goal 105. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_74()Z: I13 Branch 3899 IFEQ L10697 - false
   * Goal 106. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_74()Z: I27 Branch 3900 IFEQ L10699 - false
   * Goal 107. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_74()Z: I41 Branch 3901 IFEQ L10701 - false
   * Goal 108. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_74()Z: I55 Branch 3902 IFEQ L10703 - false
   * Goal 109. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_74()Z: I69 Branch 3903 IFEQ L10705 - false
   * Goal 110. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_74()Z: I83 Branch 3904 IFEQ L10707 - false
   * Goal 111. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_74()Z: I97 Branch 3905 IFEQ L10709 - false
   * Goal 112. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_74()Z: I111 Branch 3906 IFEQ L10711 - false
   * Goal 113. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_123()Z: I8 Branch 3933 IFEQ L10868 - false
   * Goal 114. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_consume_token(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I11 Branch 3936 IFNULL L10939 - false
   * Goal 115. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_scan_token(I)Z: I9 Branch 3941 IF_ACMPNE L10970 - true
   * Goal 116. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_scan_token(I)Z: I75 Branch 3943 IF_ICMPEQ L10981 - false
   * Goal 117. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_ntk()I: I11 Branch 3950 IFNONNULL L11013 - true
   */

  @Test
  public void test77()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      
      JavaParser javaParser0 = new JavaParser((String) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.ForInit();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 78
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.main([Ljava/lang/String;)V: I11 Branch 1 IFNE L121 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.main([Ljava/lang/String;)V: I36 Branch 2 IF_ICMPNE L125 - true
   */

  @Test
  public void test78()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JavaParser.main(stringArray0);
  }

  //Test case number: 79
  /*
   * 20 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.<init>(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V: root-Branch
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isNative(I)Z: I8 Branch 3958 IFEQ L77 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ShiftExpression()V: I144 Branch 1161 IFEQ L3234 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ShiftExpression()V: I172 Branch 1162 IFEQ L3240 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.ShiftExpression()V: I185 Branch 1163 IFEQ L3247 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.ShiftExpression()V: I204 Branch 1164 IFEQ L3260 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.AdditiveExpression()V: I145 Branch 1174 IFEQ L3296 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.AdditiveExpression()V: I173 Branch 1175 IFEQ L3302 - true
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.AdditiveExpression()V: I186 Branch 1176 IFEQ L3309 - true
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.AdditiveExpression()V: I205 Branch 1177 IFEQ L3322 - true
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.MultiplicativeExpression()V: I157 Branch 1189 IFEQ L3362 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.MultiplicativeExpression()V: I185 Branch 1190 IFEQ L3368 - true
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.MultiplicativeExpression()V: I198 Branch 1191 IFEQ L3375 - true
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.MultiplicativeExpression()V: I217 Branch 1192 IFEQ L3388 - true
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I26 Branch 1193 IF_ICMPNE L3400 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I173 Branch 1288 IFEQ L3452 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I201 Branch 1289 IFEQ L3458 - true
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I214 Branch 1290 IFEQ L3465 - true
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I233 Branch 1291 IFEQ L3478 - true
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_ntk()I: I11 Branch 3950 IFNONNULL L11013 - false
   */

  @Test
  public void test79()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      
      boolean boolean0 = javaParser_ModifierSet0.isNative(7347);
      assertTrue(boolean0);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) byteArrayInputStream0, 4431, 4431, 4431);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(javaCharStream0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(javaParser0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.ShiftExpression();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 4431, column 4432.  Encountered: <EOF> after : \"\"
         //
      }
  }

  //Test case number: 80
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.removeModifier(II)I: root-Branch
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isFinal(I)Z: I8 Branch 3957 IFEQ L73 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isTransient(I)Z: I8 Branch 3961 IFEQ L89 - true
   */

  @Test
  public void test80()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal(146);
      assertFalse(boolean0);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      
      int int0 = JavaParser.ModifierSet.removeModifier(146, 146);
      assertEquals(0, int0);
      
      boolean boolean1 = javaParser_ModifierSet0.isTransient(0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
  }

  //Test case number: 81
  /*
   * 5 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableDeclarator()V: I85 Branch 466 IFEQ L1365 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableDeclarator()V: I113 Branch 467 IFEQ L1371 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableDeclarator()V: I126 Branch 468 IFEQ L1378 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableDeclarator()V: I145 Branch 469 IFEQ L1391 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableDeclaratorId()V: I98 Branch 474 IFEQ L1416 - false
   */

  @Test
  public void test81()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("<?xml version='1.0' encoding='ISO-8859-1' ?>");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.VariableDeclarator();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 82
  /*
   * 9 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.<init>(Ljava/lang/String;)V: root-Branch
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.<init>(Ljava/io/InputStream;)V: root-Branch
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.IfStatement()V: I107 Branch 2219 IFEQ L5257 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.IfStatement()V: I135 Branch 2220 IFEQ L5263 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.IfStatement()V: I148 Branch 2221 IFEQ L5270 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.IfStatement()V: I167 Branch 2222 IFEQ L5283 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_consume_token(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I48 Branch 3937 IF_ICMPLT L10947 - true
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_consume_token(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I74 Branch 3940 IF_ICMPNE L10954 - true
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.generateParseException()Lcom/soops/CEN4010/JMCA/JParser/ParseException;: I22 Branch 3951 IFNE L11023 - false
   */

  @Test
  public void test82()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("<?xml version='1.0' encoding='ISO-8859-1' ?>");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.IfStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 83
  /*
   * 5 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I104 Branch 916 IFEQ L2103 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I132 Branch 917 IFEQ L2109 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I164 Branch 919 IFEQ L2129 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_scan_token(I)Z: I9 Branch 3941 IF_ACMPNE L10970 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_scan_token(I)Z: I26 Branch 3942 IFNONNULL L10972 - false
   */

  @Test
  public void test83()  throws Throwable  {
      MockFile mockFile0 = new MockFile("         java JavaParser  inputfie");
      assertFalse(mockFile0.isDirectory());
      assertEquals("         java JavaParser  inputfie", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("         java JavaParser  inputfie", mockFile0.getName());
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream((File) mockFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("         java JavaParser  inputfie", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("         java JavaParser  inputfie", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNotNull(mockFileOutputStream0);
      
      FileDescriptor fileDescriptor0 = mockFileOutputStream0.getFD();
      assertTrue(fileDescriptor0.valid());
      assertFalse(mockFile0.isDirectory());
      assertEquals("         java JavaParser  inputfie", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("         java JavaParser  inputfie", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNotNull(fileDescriptor0);
      
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      assertTrue(fileDescriptor0.valid());
      assertFalse(mockFile0.isDirectory());
      assertEquals("         java JavaParser  inputfie", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("         java JavaParser  inputfie", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNotNull(mockFileReader0);
      
      JavaParser javaParser0 = new JavaParser((Reader) mockFileReader0);
      assertTrue(fileDescriptor0.valid());
      assertFalse(mockFile0.isDirectory());
      assertEquals("         java JavaParser  inputfie", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("         java JavaParser  inputfie", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.Type();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 84
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isAbstract(I)Z: I8 Branch 3956 IFEQ L69 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isVolatile(I)Z: I8 Branch 3962 IFEQ L93 - true
   */

  @Test
  public void test84()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      
      boolean boolean0 = javaParser_ModifierSet0.isVolatile(0);
      assertFalse(boolean0);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      
      boolean boolean1 = javaParser_ModifierSet0.isAbstract(0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
  }

  //Test case number: 85
  /*
   * 5 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.<init>(Ljava/io/Reader;)V: root-Branch
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceType()V: I102 Branch 942 IFEQ L2239 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceType()V: I130 Branch 943 IFEQ L2245 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceType()V: I162 Branch 945 IFEQ L2265 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_consume_token(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I11 Branch 3936 IFNULL L10939 - true
   */

  @Test
  public void test85()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try {
        javaParser0.ClassOrInterfaceType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 86
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.<init>()V: root-Branch
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isNative(I)Z: I8 Branch 3958 IFEQ L77 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isStrictfp(I)Z: I8 Branch 3959 IFEQ L81 - true
   */

  @Test
  public void test86()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      
      boolean boolean0 = javaParser_ModifierSet0.isStrictfp(1252);
      assertFalse(boolean0);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      
      boolean boolean1 = javaParser_ModifierSet0.isNative(4431);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
  }
}
