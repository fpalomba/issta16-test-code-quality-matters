/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 17 18:09:57 GMT 2015
 */

package com.soops.CEN4010.JMCA.JParser;

import static org.junit.Assert.*;
import org.junit.Test;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class JavaParser_ESTest extends JavaParser_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 5 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceDeclaration(I)V: I30 Branch 97 IF_ICMPNE L549 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceDeclaration(I)V: I212 Branch 111 IFEQ L585 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceDeclaration(I)V: I240 Branch 112 IFEQ L591 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceDeclaration(I)V: I253 Branch 113 IFEQ L598 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceDeclaration(I)V: I272 Branch 114 IFEQ L611 - true
   */

  @Test
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaParser javaParser0 = new JavaParser((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try {
        javaParser0.ClassOrInterfaceDeclaration((int) (byte) (-5));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
         //
      }
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I125 Branch 567 IFEQ L1472 - false
   */

  @Test
  public void test01()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try {
        javaParser0.VariableInitializer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isProtected(I)Z: I8 Branch 3953 IFEQ L57 - false
   */

  @Test
  public void test02()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isProtected(7331);
      assertTrue(boolean0);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I291 Branch 1726 IFEQ L4595 - true
   */

  @Test
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(10, byteArrayInputStream0.available());
      
      InputStreamReader inputStreamReader0 = new InputStreamReader((InputStream) byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(inputStreamReader0);
      assertEquals(10, byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser((Reader) inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(10, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try {
        javaParser0.Statement();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
         //
      }
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.WildcardBounds()V: I137 Branch 981 IFEQ L2416 - false
   */

  @Test
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-86);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte) (-86), (int) (byte)52);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-86), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(52, byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser((InputStream) byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-86), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(52, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try {
        javaParser0.WildcardBounds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ContinueStatement()V: I88 Branch 2709 IFEQ L5756 - false
   */

  @Test
  public void test05()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try {
        javaParser0.ContinueStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isPrivate(I)Z: I8 Branch 3954 IFEQ L61 - false
   */

  @Test
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-115);
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isPrivate((int) (byte) (-115));
      assertTrue(boolean0);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
  }

  //Test case number: 7
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I104 Branch 2683 IFEQ L5595 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I132 Branch 2684 IFEQ L5601 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ForInit()V: I164 Branch 2686 IFEQ L5621 - true
   */

  @Test
  public void test07()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try {
        javaParser0.ForInit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 8
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.SynchronizedStatement()V: I71 Branch 2811 IFEQ L5890 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.SynchronizedStatement()V: I99 Branch 2812 IFEQ L5896 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.SynchronizedStatement()V: I112 Branch 2813 IFEQ L5903 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.SynchronizedStatement()V: I131 Branch 2814 IFEQ L5916 - true
   */

  @Test
  public void test08()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("$Z");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.SynchronizedStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 9
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2935 TABLESWITCH L6321 Case 74 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2964 TABLESWITCH L6321 Default-Case - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I86 Branch 2965 IFEQ L6388 - false
   */

  @Test
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'y';
      charArray0[1] = 'y';
      charArray0[2] = 'y';
      charArray0[3] = ',';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'y', 'y', 'y', ',', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaParser javaParser0 = new JavaParser((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'y', 'y', 'y', ',', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.MemberValue();
      assertArrayEquals(new char[] {'y', 'y', 'y', ',', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaParser0.lookingAhead);
  }

  //Test case number: 10
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.NormalAnnotation()V: I97 Branch 2848 IFEQ L6105 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.NormalAnnotation()V: I125 Branch 2849 IFEQ L6111 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.NormalAnnotation()V: I138 Branch 2850 IFEQ L6118 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.NormalAnnotation()V: I157 Branch 2851 IFEQ L6131 - true
   */

  @Test
  public void test10()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Y}H3n< ");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.NormalAnnotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isNative(I)Z: I8 Branch 3958 IFEQ L77 - false
   */

  @Test
  public void test11()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isNative((-44));
      assertTrue(boolean0);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
  }

  //Test case number: 12
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.DefaultValue()V: I55 Branch 3166 IFEQ L6698 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.DefaultValue()V: I83 Branch 3167 IFEQ L6704 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.DefaultValue()V: I96 Branch 3168 IFEQ L6711 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.DefaultValue()V: I115 Branch 3169 IFEQ L6724 - true
   */

  @Test
  public void test12()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.DefaultValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.enable_tracing()V: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("priorType");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.enable_tracing();
      assertFalse(javaParser0.lookingAhead);
  }

  //Test case number: 14
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ExtendsList(Z)V: I139 Branch 121 IFEQ L647 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ExtendsList(Z)V: I167 Branch 122 IFEQ L653 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ExtendsList(Z)V: I180 Branch 123 IFEQ L660 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ExtendsList(Z)V: I199 Branch 124 IFEQ L673 - true
   */

  @Test
  public void test14()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Rj,");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.ExtendsList(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 15
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimitiveType()V: I26 Branch 984 IF_ICMPNE L2448 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimitiveType()V: I172 Branch 995 IFEQ L2478 - false
   */

  @Test
  public void test15()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try {
        javaParser0.PrimitiveType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isProtected(I)Z: I8 Branch 3953 IFEQ L57 - true
   */

  @Test
  public void test16()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isProtected(4145);
      assertFalse(boolean0);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
  }

  //Test case number: 17
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I26 Branch 1440 IF_ICMPNE L3964 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I242 Branch 1459 IFEQ L4013 - false
   */

  @Test
  public void test17()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try {
        javaParser0.PrimaryPrefix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 18
  /*
   * 22 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I26 Branch 904 IFEQ L2083 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I83 Branch 915 IFEQ L2129 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I26 Branch 920 IF_ICMPNE L2141 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I37 Branch 921 LOOKUPSWITCH L2141 Case 15 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I37 Branch 922 LOOKUPSWITCH L2141 Case 17 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I37 Branch 923 LOOKUPSWITCH L2141 Case 20 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I37 Branch 924 LOOKUPSWITCH L2141 Case 26 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I37 Branch 925 LOOKUPSWITCH L2141 Case 33 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I37 Branch 926 LOOKUPSWITCH L2141 Case 40 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I37 Branch 927 LOOKUPSWITCH L2141 Case 42 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I37 Branch 928 LOOKUPSWITCH L2141 Case 51 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I37 Branch 929 LOOKUPSWITCH L2141 Case 74 - true
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I37 Branch 930 LOOKUPSWITCH L2141 Default-Case - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I79 Branch 932 IFEQ L2166 - true
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I114 Branch 933 IFEQ L2206 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceType()V: I32 Branch 938 IFEQ L2219 - true
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceType()V: I45 Branch 939 IFEQ L2225 - true
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceType()V: I81 Branch 941 IFEQ L2265 - false
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_9(I)Z: I21 Branch 3178 IFNE L6814 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_11(I)Z: I21 Branch 3180 IFNE L6834 - true
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_12(I)Z: I21 Branch 3181 IFNE L6844 - true
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_13(I)Z: I21 Branch 3182 IFNE L6854 - true
   */

  @Test
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("P jxF1LtdS{w0!Dk;");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser((Reader) stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.ExclusiveOrExpression();
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.FieldDeclaration(0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 11.  Encountered: {
         //
      }
  }

  //Test case number: 19
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.AnnotationTypeDeclaration(I)V: I67 Branch 2980 IFEQ L6466 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.AnnotationTypeDeclaration(I)V: I95 Branch 2981 IFEQ L6472 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.AnnotationTypeDeclaration(I)V: I108 Branch 2982 IFEQ L6479 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.AnnotationTypeDeclaration(I)V: I127 Branch 2983 IFEQ L6492 - true
   */

  @Test
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)101;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)101, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)101, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser((InputStream) dataInputStream0);
      assertArrayEquals(new byte[] {(byte)101, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(8, byteArrayInputStream0.available());
      
      try {
        javaParser0.AnnotationTypeDeclaration((int) (byte)0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: e
         //
      }
  }

  //Test case number: 20
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.PreIncrementExpression()V: I55 Branch 1293 IFEQ L3493 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.PreIncrementExpression()V: I83 Branch 1294 IFEQ L3499 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.PreIncrementExpression()V: I96 Branch 1295 IFEQ L3506 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.PreIncrementExpression()V: I115 Branch 1296 IFEQ L3519 - true
   */

  @Test
  public void test20()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser((InputStream) pipedInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, pipedInputStream0.available());
      
      try {
        javaParser0.PreIncrementExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isStrictfp(I)Z: I8 Branch 3959 IFEQ L81 - false
   */

  @Test
  public void test21()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isStrictfp((-1123));
      assertTrue(boolean0);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
  }

  //Test case number: 22
  /*
   * 6 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.Initializer()V: I37 Branch 897 LOOKUPSWITCH L2033 Case 52 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.Initializer()V: I37 Branch 898 LOOKUPSWITCH L2033 Default-Case - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.Initializer()V: I109 Branch 901 IFEQ L2048 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.Initializer()V: I122 Branch 902 IFEQ L2055 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.Block()V: I125 Branch 1832 IFEQ L4770 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.Block()V: I138 Branch 1833 IFEQ L4777 - false
   */

  @Test
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'i';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'i'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaParser javaParser0 = new JavaParser((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'i'}, charArray0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.Initializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: i
         //
      }
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.NameList()V: I123 Branch 1021 IFEQ L2590 - false
   */

  @Test
  public void test23()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try {
        javaParser0.NameList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I148 Branch 2968 IFEQ L6375 - true
   */

  @Test
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[9];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaParser javaParser0 = new JavaParser((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try {
        javaParser0.MemberValue();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
         //
      }
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isFinal(I)Z: I8 Branch 3957 IFEQ L73 - true
   */

  @Test
  public void test25()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal(0);
      assertFalse(boolean0);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
  }

  //Test case number: 26
  /*
   * 39 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2003 TABLESWITCH L4967 Case 74 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2030 TABLESWITCH L4967 Default-Case - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I70 Branch 2031 IF_ICMPNE L4996 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2032 TABLESWITCH L4996 Case 87 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2033 TABLESWITCH L4996 Case 88 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2034 TABLESWITCH L4996 Case 89 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2035 TABLESWITCH L4996 Case 90 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2036 TABLESWITCH L4996 Case 91 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2037 TABLESWITCH L4996 Case 92 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2038 TABLESWITCH L4996 Case 93 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2039 TABLESWITCH L4996 Case 94 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2040 TABLESWITCH L4996 Case 95 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2041 TABLESWITCH L4996 Case 96 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2042 TABLESWITCH L4996 Case 97 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2043 TABLESWITCH L4996 Case 98 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2044 TABLESWITCH L4996 Case 99 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2045 TABLESWITCH L4996 Case 100 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2046 TABLESWITCH L4996 Case 101 - false
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2047 TABLESWITCH L4996 Case 102 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2048 TABLESWITCH L4996 Case 103 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2049 TABLESWITCH L4996 Case 104 - false
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2050 TABLESWITCH L4996 Case 105 - false
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2051 TABLESWITCH L4996 Case 106 - false
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2052 TABLESWITCH L4996 Case 107 - false
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2053 TABLESWITCH L4996 Case 108 - false
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2054 TABLESWITCH L4996 Case 109 - false
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2055 TABLESWITCH L4996 Case 110 - false
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2056 TABLESWITCH L4996 Case 111 - false
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2057 TABLESWITCH L4996 Case 112 - false
   * Goal 30. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2058 TABLESWITCH L4996 Case 113 - false
   * Goal 31. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2059 TABLESWITCH L4996 Case 114 - false
   * Goal 32. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2060 TABLESWITCH L4996 Case 115 - false
   * Goal 33. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2061 TABLESWITCH L4996 Case 116 - false
   * Goal 34. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2062 TABLESWITCH L4996 Case 117 - false
   * Goal 35. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2063 TABLESWITCH L4996 Case 118 - false
   * Goal 36. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2064 TABLESWITCH L4996 Case 119 - false
   * Goal 37. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2065 TABLESWITCH L4996 Case 120 - false
   * Goal 38. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I81 Branch 2066 TABLESWITCH L4996 Default-Case - true
   * Goal 39. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I176 Branch 2103 IFEQ L5073 - false
   */

  @Test
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser((Reader) stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.StatementExpression();
      assertFalse(javaParser0.lookingAhead);
  }

  //Test case number: 27
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isTransient(I)Z: I8 Branch 3961 IFEQ L89 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.BreakStatement()V: I88 Branch 2704 IFEQ L5734 - false
   */

  @Test
  public void test27()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isTransient(0);
      assertFalse(boolean0);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      
      try {
        javaParser0.BreakStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 28
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isPublic(I)Z: I8 Branch 3952 IFEQ L53 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.TryStatement()V: I181 Branch 2823 IFEQ L5959 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.TryStatement()V: I194 Branch 2824 IFEQ L5966 - false
   */

  @Test
  public void test28()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isPublic(3414);
      assertFalse(boolean0);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      
      JavaParser javaParser0 = new JavaParser("zag");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.TryStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 29
  /*
   * 8 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.WildcardBounds()V: I26 Branch 975 IF_ICMPNE L2396 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.WildcardBounds()V: I37 Branch 976 LOOKUPSWITCH L2396 Case 29 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.WildcardBounds()V: I37 Branch 977 LOOKUPSWITCH L2396 Case 54 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.WildcardBounds()V: I37 Branch 978 LOOKUPSWITCH L2396 Default-Case - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.WildcardBounds()V: I109 Branch 980 IFEQ L2410 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.WildcardBounds()V: I137 Branch 981 IFEQ L2416 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.WildcardBounds()V: I150 Branch 982 IFEQ L2423 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.WildcardBounds()V: I169 Branch 983 IFEQ L2436 - true
   */

  @Test
  public void test29()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1350);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) pipedInputStream0, 1350);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser((InputStream) bufferedInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, pipedInputStream0.available());
      
      try {
        javaParser0.WildcardBounds();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 30
  /*
   * 7 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.Expression()V: I94 Branch 1027 IFEQ L2639 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalExpression()V: I123 Branch 1073 IFEQ L2743 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalOrExpression()V: I123 Branch 1081 IFEQ L2794 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalAndExpression()V: I123 Branch 1089 IFEQ L2845 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.InclusiveOrExpression()V: I123 Branch 1097 IFEQ L2896 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.ExclusiveOrExpression()V: I123 Branch 1105 IFEQ L2947 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.ArgumentList()V: I123 Branch 1597 IFEQ L4305 - false
   */

  @Test
  public void test30()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try {
        javaParser0.ArgumentList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 31
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 564 TABLESWITCH L1428 Default-Case - true
   */

  @Test
  public void test31()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("fK8nq1FrCtm428nWKK");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.VariableInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 32
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.Annotation()V: I121 Branch 2840 IFEQ L6055 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.Annotation()V: I149 Branch 2841 IFEQ L6061 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.Annotation()V: I181 Branch 2843 IFEQ L6081 - true
   */

  @Test
  public void test32()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try {
        javaParser0.Annotation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 33
  /*
   * 6 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.removeModifier(II)I: root-Branch
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1282 TABLESWITCH L3400 Default-Case - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ArgumentList()V: I95 Branch 1596 IFEQ L4299 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ArgumentList()V: I123 Branch 1597 IFEQ L4305 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.ArgumentList()V: I136 Branch 1598 IFEQ L4312 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.ArgumentList()V: I155 Branch 1599 IFEQ L4325 - true
   */

  @Test
  public void test33()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(8994);
      assertNotNull(pipedReader0);
      
      JavaParser javaParser0 = new JavaParser((Reader) pipedReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      int int0 = JavaParser.ModifierSet.removeModifier(8994, 8994);
      assertEquals(0, int0);
      
      try {
        javaParser0.ArgumentList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 34
  /*
   * 11 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ArrayDimsAndInits()V: I26 Branch 1619 IFEQ L4420 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ArrayDimsAndInits()V: I89 Branch 1622 IF_ICMPNE L4441 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ArrayDimsAndInits()V: I100 Branch 1623 LOOKUPSWITCH L4441 Case 81 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ArrayDimsAndInits()V: I100 Branch 1624 LOOKUPSWITCH L4441 Default-Case - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.ArrayDimsAndInits()V: I194 Branch 1629 IFEQ L4463 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.ArrayDimsAndInits()V: I222 Branch 1630 IFEQ L4469 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.ArrayDimsAndInits()V: I235 Branch 1631 IFEQ L4476 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.ArrayDimsAndInits()V: I254 Branch 1632 IFEQ L4489 - true
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_32(I)Z: I21 Branch 3201 IFNE L7044 - true
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_30()Z: I8 Branch 3659 IFEQ L9453 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_32()Z: I7 Branch 3665 IFEQ L9484 - false
   */

  @Test
  public void test34()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.ArrayDimsAndInits();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 35
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclarator()V: I103 Branch 688 IFEQ L1677 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclarator()V: I131 Branch 689 IFEQ L1683 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclarator()V: I144 Branch 690 IFEQ L1690 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclarator()V: I163 Branch 691 IFEQ L1703 - true
   */

  @Test
  public void test35()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser((InputStream) pipedInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, pipedInputStream0.available());
      
      try {
        javaParser0.MethodDeclarator();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 36
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isVolatile(I)Z: I8 Branch 3962 IFEQ L93 - false
   */

  @Test
  public void test36()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isVolatile((-121));
      assertTrue(boolean0);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
  }

  //Test case number: 37
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.Initializer()V: I26 Branch 896 IF_ICMPNE L2033 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.Initializer()V: I81 Branch 900 IFEQ L2042 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.Initializer()V: I109 Branch 901 IFEQ L2048 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.Initializer()V: I141 Branch 903 IFEQ L2068 - true
   */

  @Test
  public void test37()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try {
        javaParser0.Initializer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 38
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.EmptyStatement()V: I50 Branch 1942 IFEQ L4955 - false
   */

  @Test
  public void test38()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("mDe&n.6Xx)U3h[B^9");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.EmptyStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 39
  /*
   * 10 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.CastExpression()V: I26 Branch 1420 IFEQ L3817 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.CastExpression()V: I59 Branch 1421 IF_ICMPNE L3823 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.CastExpression()V: I70 Branch 1422 LOOKUPSWITCH L3823 Case 77 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.CastExpression()V: I70 Branch 1423 LOOKUPSWITCH L3823 Default-Case - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.CastExpression()V: I136 Branch 1425 IFEQ L3836 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.CastExpression()V: I164 Branch 1426 IFEQ L3842 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.CastExpression()V: I177 Branch 1427 IFEQ L3849 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.CastExpression()V: I196 Branch 1428 IFEQ L3862 - true
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_23(I)Z: I21 Branch 3192 IFNE L6954 - true
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_23()Z: I8 Branch 3748 IFEQ L9905 - false
   */

  @Test
  public void test39()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("LO");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.CastExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 40
  /*
   * 94 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I26 Branch 2875 IF_ICMPNE L6321 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2876 TABLESWITCH L6321 Case 15 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2877 TABLESWITCH L6321 Case 16 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2878 TABLESWITCH L6321 Case 17 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2879 TABLESWITCH L6321 Case 18 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2880 TABLESWITCH L6321 Case 19 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2881 TABLESWITCH L6321 Case 20 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2882 TABLESWITCH L6321 Case 21 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2883 TABLESWITCH L6321 Case 22 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2884 TABLESWITCH L6321 Case 23 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2885 TABLESWITCH L6321 Case 24 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2886 TABLESWITCH L6321 Case 25 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2887 TABLESWITCH L6321 Case 26 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2888 TABLESWITCH L6321 Case 27 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2889 TABLESWITCH L6321 Case 28 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2890 TABLESWITCH L6321 Case 29 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2891 TABLESWITCH L6321 Case 30 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2892 TABLESWITCH L6321 Case 31 - false
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2893 TABLESWITCH L6321 Case 32 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2894 TABLESWITCH L6321 Case 33 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2895 TABLESWITCH L6321 Case 34 - false
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2896 TABLESWITCH L6321 Case 35 - false
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2897 TABLESWITCH L6321 Case 36 - false
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2898 TABLESWITCH L6321 Case 37 - false
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2899 TABLESWITCH L6321 Case 38 - false
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2900 TABLESWITCH L6321 Case 39 - false
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2901 TABLESWITCH L6321 Case 40 - false
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2902 TABLESWITCH L6321 Case 41 - false
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2903 TABLESWITCH L6321 Case 42 - false
   * Goal 30. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2904 TABLESWITCH L6321 Case 43 - false
   * Goal 31. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2905 TABLESWITCH L6321 Case 44 - false
   * Goal 32. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2906 TABLESWITCH L6321 Case 45 - false
   * Goal 33. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2907 TABLESWITCH L6321 Case 46 - false
   * Goal 34. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2908 TABLESWITCH L6321 Case 47 - false
   * Goal 35. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2909 TABLESWITCH L6321 Case 48 - false
   * Goal 36. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2910 TABLESWITCH L6321 Case 49 - false
   * Goal 37. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2911 TABLESWITCH L6321 Case 50 - false
   * Goal 38. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2912 TABLESWITCH L6321 Case 51 - false
   * Goal 39. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2913 TABLESWITCH L6321 Case 52 - false
   * Goal 40. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2914 TABLESWITCH L6321 Case 53 - false
   * Goal 41. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2915 TABLESWITCH L6321 Case 54 - false
   * Goal 42. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2916 TABLESWITCH L6321 Case 55 - false
   * Goal 43. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2917 TABLESWITCH L6321 Case 56 - false
   * Goal 44. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2918 TABLESWITCH L6321 Case 57 - false
   * Goal 45. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2919 TABLESWITCH L6321 Case 58 - false
   * Goal 46. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2920 TABLESWITCH L6321 Case 59 - false
   * Goal 47. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2921 TABLESWITCH L6321 Case 60 - false
   * Goal 48. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2922 TABLESWITCH L6321 Case 61 - false
   * Goal 49. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2923 TABLESWITCH L6321 Case 62 - false
   * Goal 50. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2924 TABLESWITCH L6321 Case 63 - false
   * Goal 51. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2925 TABLESWITCH L6321 Case 64 - false
   * Goal 52. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2926 TABLESWITCH L6321 Case 65 - false
   * Goal 53. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2927 TABLESWITCH L6321 Case 66 - false
   * Goal 54. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2928 TABLESWITCH L6321 Case 67 - false
   * Goal 55. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2929 TABLESWITCH L6321 Case 68 - false
   * Goal 56. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2930 TABLESWITCH L6321 Case 69 - false
   * Goal 57. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2931 TABLESWITCH L6321 Case 70 - false
   * Goal 58. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2932 TABLESWITCH L6321 Case 71 - false
   * Goal 59. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2933 TABLESWITCH L6321 Case 72 - false
   * Goal 60. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2934 TABLESWITCH L6321 Case 73 - false
   * Goal 61. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2935 TABLESWITCH L6321 Case 74 - false
   * Goal 62. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2936 TABLESWITCH L6321 Case 75 - false
   * Goal 63. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2937 TABLESWITCH L6321 Case 76 - false
   * Goal 64. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2938 TABLESWITCH L6321 Case 77 - false
   * Goal 65. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2939 TABLESWITCH L6321 Case 78 - false
   * Goal 66. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2940 TABLESWITCH L6321 Case 79 - false
   * Goal 67. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2941 TABLESWITCH L6321 Case 80 - false
   * Goal 68. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2942 TABLESWITCH L6321 Case 81 - false
   * Goal 69. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2943 TABLESWITCH L6321 Case 82 - false
   * Goal 70. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2944 TABLESWITCH L6321 Case 83 - false
   * Goal 71. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2945 TABLESWITCH L6321 Case 84 - false
   * Goal 72. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2946 TABLESWITCH L6321 Case 85 - false
   * Goal 73. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2947 TABLESWITCH L6321 Case 86 - false
   * Goal 74. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2948 TABLESWITCH L6321 Case 87 - false
   * Goal 75. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2949 TABLESWITCH L6321 Case 88 - false
   * Goal 76. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2950 TABLESWITCH L6321 Case 89 - false
   * Goal 77. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2951 TABLESWITCH L6321 Case 90 - false
   * Goal 78. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2952 TABLESWITCH L6321 Case 91 - false
   * Goal 79. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2953 TABLESWITCH L6321 Case 92 - false
   * Goal 80. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2954 TABLESWITCH L6321 Case 93 - false
   * Goal 81. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2955 TABLESWITCH L6321 Case 94 - false
   * Goal 82. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2956 TABLESWITCH L6321 Case 95 - false
   * Goal 83. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2957 TABLESWITCH L6321 Case 96 - false
   * Goal 84. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2958 TABLESWITCH L6321 Case 97 - false
   * Goal 85. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2959 TABLESWITCH L6321 Case 98 - false
   * Goal 86. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2960 TABLESWITCH L6321 Case 99 - false
   * Goal 87. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2961 TABLESWITCH L6321 Case 100 - false
   * Goal 88. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2962 TABLESWITCH L6321 Case 101 - false
   * Goal 89. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2963 TABLESWITCH L6321 Case 102 - false
   * Goal 90. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I37 Branch 2964 TABLESWITCH L6321 Default-Case - true
   * Goal 91. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I107 Branch 2966 IFEQ L6362 - false
   * Goal 92. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I135 Branch 2967 IFEQ L6368 - true
   * Goal 93. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I148 Branch 2968 IFEQ L6375 - false
   * Goal 94. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValue()V: I167 Branch 2969 IFEQ L6388 - true
   */

  @Test
  public void test40()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("/ecBZp-Y_~N");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.MemberValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 41
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.NullLiteral()V: I50 Branch 1496 IFEQ L4200 - false
   */

  @Test
  public void test41()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(5168);
      assertNotNull(pipedReader0);
      
      JavaParser javaParser0 = new JavaParser((Reader) pipedReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.NullLiteral();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 42
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.EnumBody()V: I174 Branch 227 IFEQ L854 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.EnumBody()V: I202 Branch 228 IFEQ L860 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.EnumBody()V: I215 Branch 229 IFEQ L867 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.EnumBody()V: I234 Branch 230 IFEQ L880 - true
   */

  @Test
  public void test42()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("mDe&n.6Xx)U3h[B^9");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.EnumBody();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 43
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I26 Branch 920 IF_ICMPNE L2141 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I135 Branch 934 IFEQ L2180 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I163 Branch 935 IFEQ L2186 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ReferenceType()V: I195 Branch 937 IFEQ L2206 - true
   */

  @Test
  public void test43()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try {
        javaParser0.ReferenceType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 44
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.IfStatement()V: I107 Branch 2219 IFEQ L5257 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.IfStatement()V: I135 Branch 2220 IFEQ L5263 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.IfStatement()V: I148 Branch 2221 IFEQ L5270 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.IfStatement()V: I167 Branch 2222 IFEQ L5283 - true
   */

  @Test
  public void test44()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("YH3n< ");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.IfStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 45
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.FormalParameters()V: I127 Branch 708 IFEQ L1746 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.FormalParameters()V: I155 Branch 709 IFEQ L1752 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.FormalParameters()V: I168 Branch 710 IFEQ L1759 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.FormalParameters()V: I187 Branch 711 IFEQ L1772 - true
   */

  @Test
  public void test45()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.FormalParameters();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 46
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.DoStatement()V: I111 Branch 2230 IFEQ L5353 - false
   */

  @Test
  public void test46()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try {
        javaParser0.DoStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 47
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.SingleMemberAnnotation()V: I112 Branch 2860 IFEQ L6203 - true
   */

  @Test
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaParser javaParser0 = new JavaParser((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try {
        javaParser0.SingleMemberAnnotation();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
         //
      }
  }

  //Test case number: 48
  /*
   * 7 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ConstructorDeclaration()V: I26 Branch 723 IF_ICMPNE L1839 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ConstructorDeclaration()V: I37 Branch 724 LOOKUPSWITCH L1839 Case 88 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ConstructorDeclaration()V: I37 Branch 725 LOOKUPSWITCH L1839 Default-Case - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ConstructorDeclaration()V: I186 Branch 820 IFEQ L1913 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.ConstructorDeclaration()V: I214 Branch 821 IFEQ L1919 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.ConstructorDeclaration()V: I227 Branch 822 IFEQ L1926 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.ConstructorDeclaration()V: I246 Branch 823 IFEQ L1939 - true
   */

  @Test
  public void test48()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("tqMtW7>Lk");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.ConstructorDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 49
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.Arguments()V: I87 Branch 1588 IFEQ L4248 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.Arguments()V: I115 Branch 1589 IFEQ L4254 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.Arguments()V: I128 Branch 1590 IFEQ L4261 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.Arguments()V: I147 Branch 1591 IFEQ L4274 - true
   */

  @Test
  public void test49()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("/I");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.Arguments();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 50
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ForStatement()V: I240 Branch 2589 IFEQ L5522 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ForStatement()V: I268 Branch 2590 IFEQ L5528 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ForStatement()V: I281 Branch 2591 IFEQ L5535 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ForStatement()V: I300 Branch 2592 IFEQ L5548 - true
   */

  @Test
  public void test50()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("<:+f%fp5C)");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.ForStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 51
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.LabeledStatement()V: I61 Branch 1737 IFEQ L4674 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.LabeledStatement()V: I89 Branch 1738 IFEQ L4680 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.LabeledStatement()V: I102 Branch 1739 IFEQ L4687 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.LabeledStatement()V: I121 Branch 1740 IFEQ L4700 - true
   */

  @Test
  public void test51()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("jog");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.LabeledStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 52
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ReInit(Ljava/io/InputStream;)V: root-Branch
   */

  @Test
  public void test52()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("t'|t2");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      
      javaParser0.ReInit((InputStream) byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, byteArrayInputStream0.available());
  }

  //Test case number: 53
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.SwitchStatement()V: I155 Branch 2202 IFEQ L5152 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.SwitchStatement()V: I183 Branch 2203 IFEQ L5158 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.SwitchStatement()V: I196 Branch 2204 IFEQ L5165 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.SwitchStatement()V: I215 Branch 2205 IFEQ L5178 - true
   */

  @Test
  public void test53()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser((InputStream) pipedInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, pipedInputStream0.available());
      
      try {
        javaParser0.SwitchStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 54
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceType()V: I102 Branch 942 IFEQ L2239 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceType()V: I130 Branch 943 IFEQ L2245 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceType()V: I143 Branch 944 IFEQ L2252 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceType()V: I162 Branch 945 IFEQ L2265 - true
   */

  @Test
  public void test54()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("OR");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.ClassOrInterfaceType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 55
  /*
   * 5 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isTransient(I)Z: I8 Branch 3961 IFEQ L89 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.MarkerAnnotation()V: I55 Branch 2853 IFEQ L6146 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.MarkerAnnotation()V: I83 Branch 2854 IFEQ L6152 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.MarkerAnnotation()V: I96 Branch 2855 IFEQ L6159 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.MarkerAnnotation()V: I115 Branch 2856 IFEQ L6172 - true
   */

  @Test
  public void test55()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isTransient(1434);
      assertTrue(boolean0);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      
      JavaParser javaParser0 = new JavaParser("/I");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.MarkerAnnotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 56
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I278 Branch 1725 IFEQ L4588 - false
   */

  @Test
  public void test56()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try {
        javaParser0.Statement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 57
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I138 Branch 568 IFEQ L1479 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.Expression()V: I107 Branch 1028 IFEQ L2646 - true
   */

  @Test
  public void test57()  throws Throwable  {
      char[] charArray0 = new char[28];
      charArray0[0] = 'm';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaParser javaParser0 = new JavaParser((Reader) charArrayReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try {
        javaParser0.VariableInitializer();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\" (0), after : \"\"
         //
      }
  }

  //Test case number: 58
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.DoStatement()V: I83 Branch 2229 IFEQ L5347 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.DoStatement()V: I111 Branch 2230 IFEQ L5353 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.DoStatement()V: I124 Branch 2231 IFEQ L5360 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.DoStatement()V: I143 Branch 2232 IFEQ L5373 - true
   */

  @Test
  public void test58()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.DoStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 59
  /*
   * 8 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValuePairs()V: I95 Branch 2866 IFEQ L6241 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValuePairs()V: I123 Branch 2867 IFEQ L6247 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValuePairs()V: I136 Branch 2868 IFEQ L6254 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValuePairs()V: I155 Branch 2869 IFEQ L6267 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValuePair()V: I61 Branch 2871 IFEQ L6283 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValuePair()V: I89 Branch 2872 IFEQ L6289 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValuePair()V: I102 Branch 2873 IFEQ L6296 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.MemberValuePair()V: I121 Branch 2874 IFEQ L6309 - true
   */

  @Test
  public void test59()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JavaParser javaParser0 = new JavaParser((Reader) pipedReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.MemberValuePairs();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 60
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isSynchronized(I)Z: I8 Branch 3960 IFEQ L85 - false
   */

  @Test
  public void test60()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isSynchronized(972);
      assertTrue(boolean0);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
  }

  //Test case number: 61
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isAbstract(I)Z: I8 Branch 3956 IFEQ L69 - false
   */

  @Test
  public void test61()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isAbstract((-3));
      assertTrue(boolean0);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
  }

  //Test case number: 62
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.RSIGNEDSHIFT()V: I93 Branch 2833 IFEQ L6027 - false
   */

  @Test
  public void test62()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try {
        javaParser0.RSIGNEDSHIFT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 63
  /*
   * 16 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1245 TABLESWITCH L3400 Case 66 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1253 TABLESWITCH L3400 Case 74 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1363 TABLESWITCH L3593 Case 66 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1371 TABLESWITCH L3593 Case 74 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1447 LOOKUPSWITCH L3964 Case 66 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1452 LOOKUPSWITCH L3964 Default-Case - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.Literal()V: I26 Branch 1475 IF_ICMPNE L4111 - true
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.Literal()V: I37 Branch 1476 LOOKUPSWITCH L4111 Case 30 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.Literal()V: I37 Branch 1477 LOOKUPSWITCH L4111 Case 45 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.Literal()V: I37 Branch 1478 LOOKUPSWITCH L4111 Case 61 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.Literal()V: I37 Branch 1479 LOOKUPSWITCH L4111 Case 66 - true
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.Literal()V: I37 Branch 1480 LOOKUPSWITCH L4111 Case 70 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.Literal()V: I37 Branch 1481 LOOKUPSWITCH L4111 Case 72 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.Literal()V: I37 Branch 1482 LOOKUPSWITCH L4111 Case 73 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.Literal()V: I37 Branch 1483 LOOKUPSWITCH L4111 Default-Case - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.Literal()V: I124 Branch 1484 IFEQ L4162 - false
   */

  @Test
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)53, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser((InputStream) byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)53, (byte)0, (byte)0}, byteArray0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(3, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try {
        javaParser0.RelationalExpression();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\" (0), after : \"\"
         //
      }
  }

  //Test case number: 64
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isPublic(I)Z: I8 Branch 3952 IFEQ L53 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBody(Z)V: I126 Branch 346 IFEQ L1145 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBody(Z)V: I139 Branch 347 IFEQ L1152 - false
   */

  @Test
  public void test64()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isPublic(3381);
      assertTrue(boolean0);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      
      JavaParser javaParser0 = new JavaParser("zag");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.ClassOrInterfaceBody(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 65
  /*
   * 8 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalExpression()V: I136 Branch 1074 IFEQ L2750 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalOrExpression()V: I136 Branch 1082 IFEQ L2801 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalAndExpression()V: I136 Branch 1090 IFEQ L2852 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.InclusiveOrExpression()V: I136 Branch 1098 IFEQ L2903 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.ExclusiveOrExpression()V: I136 Branch 1106 IFEQ L2954 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.AndExpression()V: I136 Branch 1114 IFEQ L3005 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.EqualityExpression()V: I186 Branch 1127 IFEQ L3067 - true
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.InstanceOfExpression()V: I126 Branch 1135 IFEQ L3115 - true
   */

  @Test
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#@b");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser((Reader) stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try {
        javaParser0.ConditionalExpression();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"#\" (35), after : \"\"
         //
      }
  }

  //Test case number: 66
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 535 TABLESWITCH L1428 Case 74 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 543 TABLESWITCH L1428 Case 82 - true
   */

  @Test
  public void test66()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ']';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaParser javaParser0 = new JavaParser((Reader) charArrayReader0);
      assertArrayEquals(new char[] {']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.VariableInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: ]
         //
      }
  }

  //Test case number: 67
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.TryStatement()V: I153 Branch 2822 IFEQ L5953 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.TryStatement()V: I181 Branch 2823 IFEQ L5959 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.TryStatement()V: I213 Branch 2825 IFEQ L5979 - true
   */

  @Test
  public void test67()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try {
        javaParser0.TryStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 68
  /*
   * 97 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I26 Branch 1633 IFEQ L4504 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I43 Branch 1634 IF_ICMPNE L4507 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1635 TABLESWITCH L4507 Case 14 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1636 TABLESWITCH L4507 Case 15 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1637 TABLESWITCH L4507 Case 16 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1638 TABLESWITCH L4507 Case 17 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1639 TABLESWITCH L4507 Case 18 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1640 TABLESWITCH L4507 Case 19 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1641 TABLESWITCH L4507 Case 20 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1642 TABLESWITCH L4507 Case 21 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1643 TABLESWITCH L4507 Case 22 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1644 TABLESWITCH L4507 Case 23 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1645 TABLESWITCH L4507 Case 24 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1646 TABLESWITCH L4507 Case 25 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1647 TABLESWITCH L4507 Case 26 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1648 TABLESWITCH L4507 Case 27 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1649 TABLESWITCH L4507 Case 28 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1650 TABLESWITCH L4507 Case 29 - false
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1651 TABLESWITCH L4507 Case 30 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1652 TABLESWITCH L4507 Case 31 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1653 TABLESWITCH L4507 Case 32 - false
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1654 TABLESWITCH L4507 Case 33 - false
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1655 TABLESWITCH L4507 Case 34 - false
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1656 TABLESWITCH L4507 Case 35 - false
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1657 TABLESWITCH L4507 Case 36 - false
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1658 TABLESWITCH L4507 Case 37 - false
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1659 TABLESWITCH L4507 Case 38 - false
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1660 TABLESWITCH L4507 Case 39 - false
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1661 TABLESWITCH L4507 Case 40 - false
   * Goal 30. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1662 TABLESWITCH L4507 Case 41 - false
   * Goal 31. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1663 TABLESWITCH L4507 Case 42 - false
   * Goal 32. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1664 TABLESWITCH L4507 Case 43 - false
   * Goal 33. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1665 TABLESWITCH L4507 Case 44 - false
   * Goal 34. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1666 TABLESWITCH L4507 Case 45 - false
   * Goal 35. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1667 TABLESWITCH L4507 Case 46 - false
   * Goal 36. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1668 TABLESWITCH L4507 Case 47 - false
   * Goal 37. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1669 TABLESWITCH L4507 Case 48 - false
   * Goal 38. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1670 TABLESWITCH L4507 Case 49 - false
   * Goal 39. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1671 TABLESWITCH L4507 Case 50 - false
   * Goal 40. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1672 TABLESWITCH L4507 Case 51 - false
   * Goal 41. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1673 TABLESWITCH L4507 Case 52 - false
   * Goal 42. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1674 TABLESWITCH L4507 Case 53 - false
   * Goal 43. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1675 TABLESWITCH L4507 Case 54 - false
   * Goal 44. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1676 TABLESWITCH L4507 Case 55 - false
   * Goal 45. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1677 TABLESWITCH L4507 Case 56 - false
   * Goal 46. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1678 TABLESWITCH L4507 Case 57 - false
   * Goal 47. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1679 TABLESWITCH L4507 Case 58 - false
   * Goal 48. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1680 TABLESWITCH L4507 Case 59 - false
   * Goal 49. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1681 TABLESWITCH L4507 Case 60 - false
   * Goal 50. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1682 TABLESWITCH L4507 Case 61 - false
   * Goal 51. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1683 TABLESWITCH L4507 Case 62 - false
   * Goal 52. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1684 TABLESWITCH L4507 Case 63 - false
   * Goal 53. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1685 TABLESWITCH L4507 Case 64 - false
   * Goal 54. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1686 TABLESWITCH L4507 Case 65 - false
   * Goal 55. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1687 TABLESWITCH L4507 Case 66 - false
   * Goal 56. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1688 TABLESWITCH L4507 Case 67 - false
   * Goal 57. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1689 TABLESWITCH L4507 Case 68 - false
   * Goal 58. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1690 TABLESWITCH L4507 Case 69 - false
   * Goal 59. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1691 TABLESWITCH L4507 Case 70 - false
   * Goal 60. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1692 TABLESWITCH L4507 Case 71 - false
   * Goal 61. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1693 TABLESWITCH L4507 Case 72 - false
   * Goal 62. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1694 TABLESWITCH L4507 Case 73 - false
   * Goal 63. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1695 TABLESWITCH L4507 Case 74 - false
   * Goal 64. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1696 TABLESWITCH L4507 Case 75 - false
   * Goal 65. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1697 TABLESWITCH L4507 Case 76 - false
   * Goal 66. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1698 TABLESWITCH L4507 Case 77 - false
   * Goal 67. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1699 TABLESWITCH L4507 Case 78 - false
   * Goal 68. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1700 TABLESWITCH L4507 Case 79 - false
   * Goal 69. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1701 TABLESWITCH L4507 Case 80 - false
   * Goal 70. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1702 TABLESWITCH L4507 Case 81 - false
   * Goal 71. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1703 TABLESWITCH L4507 Case 82 - false
   * Goal 72. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1704 TABLESWITCH L4507 Case 83 - false
   * Goal 73. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1705 TABLESWITCH L4507 Case 84 - false
   * Goal 74. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1706 TABLESWITCH L4507 Case 85 - false
   * Goal 75. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1707 TABLESWITCH L4507 Case 86 - false
   * Goal 76. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1708 TABLESWITCH L4507 Case 87 - false
   * Goal 77. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1709 TABLESWITCH L4507 Case 88 - false
   * Goal 78. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1710 TABLESWITCH L4507 Case 89 - false
   * Goal 79. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1711 TABLESWITCH L4507 Case 90 - false
   * Goal 80. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1712 TABLESWITCH L4507 Case 91 - false
   * Goal 81. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1713 TABLESWITCH L4507 Case 92 - false
   * Goal 82. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1714 TABLESWITCH L4507 Case 93 - false
   * Goal 83. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1715 TABLESWITCH L4507 Case 94 - false
   * Goal 84. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1716 TABLESWITCH L4507 Case 95 - false
   * Goal 85. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1717 TABLESWITCH L4507 Case 96 - false
   * Goal 86. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1718 TABLESWITCH L4507 Case 97 - false
   * Goal 87. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1719 TABLESWITCH L4507 Case 98 - false
   * Goal 88. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1720 TABLESWITCH L4507 Case 99 - false
   * Goal 89. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1721 TABLESWITCH L4507 Case 100 - false
   * Goal 90. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I54 Branch 1722 TABLESWITCH L4507 Default-Case - true
   * Goal 91. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I250 Branch 1724 IFEQ L4582 - false
   * Goal 92. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I278 Branch 1725 IFEQ L4588 - true
   * Goal 93. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I291 Branch 1726 IFEQ L4595 - false
   * Goal 94. com.soops.CEN4010.JMCA.JParser.JavaParser.Statement()V: I310 Branch 1727 IFEQ L4608 - true
   * Goal 95. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_33(I)Z: I21 Branch 3202 IFNE L7054 - true
   * Goal 96. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_79()Z: I8 Branch 3613 IFEQ L9216 - false
   * Goal 97. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_33()Z: I7 Branch 3639 IFEQ L9372 - false
   */

  @Test
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte)0, (int) (byte) (-43));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(-43, byteArrayInputStream0.available());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      assertNotNull(charsetDecoder0);
      assertEquals(1.0F, charsetDecoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder0.averageCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", charsetDecoder0.replacement());
      assertFalse(charsetDecoder0.isAutoDetecting());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      InputStreamReader inputStreamReader0 = new InputStreamReader((InputStream) byteArrayInputStream0, charsetDecoder0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(inputStreamReader0);
      assertEquals(-43, byteArrayInputStream0.available());
      assertEquals(1.0F, charsetDecoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder0.averageCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", charsetDecoder0.replacement());
      assertFalse(charsetDecoder0.isAutoDetecting());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      JavaParser javaParser0 = new JavaParser((Reader) inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(-43, byteArrayInputStream0.available());
      assertEquals(1.0F, charsetDecoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder0.averageCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", charsetDecoder0.replacement());
      assertFalse(charsetDecoder0.isAutoDetecting());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      try {
        javaParser0.Statement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 69
  /*
   * 5 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I145 Branch 918 IFEQ L2116 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I26 Branch 996 IF_ICMPNE L2490 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 1006 LOOKUPSWITCH L2490 Case 74 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 1007 LOOKUPSWITCH L2490 Default-Case - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I140 Branch 1011 IFEQ L2523 - true
   */

  @Test
  public void test69()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'o';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'o', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaParser javaParser0 = new JavaParser((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'o', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try {
        javaParser0.ResultType();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\" (0), after : \"\"
         //
      }
  }

  //Test case number: 70
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.RUNSIGNEDSHIFT()V: I28 Branch 2826 IF_ICMPNE L5994 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.RUNSIGNEDSHIFT()V: I99 Branch 2829 IFEQ L6005 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.getToken(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I7 Branch 3947 IFEQ L11001 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.getToken(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I37 Branch 3949 IFNULL L11003 - true
   */

  @Test
  public void test70()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) pipedInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, pipedInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, pipedInputStream0.available());
      
      try {
        javaParser0.RUNSIGNEDSHIFT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 71
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isNative(I)Z: I8 Branch 3958 IFEQ L77 - true
   */

  @Test
  public void test71()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isNative(0);
      assertFalse(boolean0);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
  }

  //Test case number: 72
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I43 Branch 905 IF_ICMPNE L2086 - false
   */

  @Test
  public void test72()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("y.d.K{bK>:7");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.FieldDeclaration(991);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 73
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ImplementsList(Z)V: I126 Branch 130 IFEQ L707 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ImplementsList(Z)V: I154 Branch 131 IFEQ L713 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ImplementsList(Z)V: I167 Branch 132 IFEQ L720 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ImplementsList(Z)V: I186 Branch 133 IFEQ L733 - true
   */

  @Test
  public void test73()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'4', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaParser javaParser0 = new JavaParser((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'4', '\u0000'}, charArray0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.ImplementsList(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: 4
         //
      }
  }

  //Test case number: 74
  /*
   * 23 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclaration(I)V: I26 Branch 669 IF_ICMPNE L1596 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclaration(I)V: I37 Branch 670 LOOKUPSWITCH L1596 Case 88 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclaration(I)V: I37 Branch 671 LOOKUPSWITCH L1596 Default-Case - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclaration(I)V: I173 Branch 680 IFEQ L1625 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclaration(I)V: I201 Branch 681 IFEQ L1631 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclaration(I)V: I214 Branch 682 IFEQ L1638 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.MethodDeclaration(I)V: I233 Branch 683 IFEQ L1651 - true
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I26 Branch 996 IF_ICMPNE L2490 - true
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 997 LOOKUPSWITCH L2490 Case 15 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 998 LOOKUPSWITCH L2490 Case 17 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 999 LOOKUPSWITCH L2490 Case 20 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 1000 LOOKUPSWITCH L2490 Case 26 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 1001 LOOKUPSWITCH L2490 Case 33 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 1002 LOOKUPSWITCH L2490 Case 40 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 1003 LOOKUPSWITCH L2490 Case 42 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 1004 LOOKUPSWITCH L2490 Case 51 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 1005 LOOKUPSWITCH L2490 Case 63 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 1006 LOOKUPSWITCH L2490 Case 74 - false
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I37 Branch 1007 LOOKUPSWITCH L2490 Default-Case - true
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I99 Branch 1009 IFEQ L2510 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I127 Branch 1010 IFEQ L2516 - true
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I140 Branch 1011 IFEQ L2523 - false
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParser.ResultType()V: I159 Branch 1012 IFEQ L2536 - true
   */

  @Test
  public void test74()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.MethodDeclaration(4242);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 75
  /*
   * 12 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.RelationalExpression()V: I210 Branch 1152 IFEQ L3185 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ShiftExpression()V: I185 Branch 1163 IFEQ L3247 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.AdditiveExpression()V: I186 Branch 1176 IFEQ L3309 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.MultiplicativeExpression()V: I198 Branch 1191 IFEQ L3375 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I214 Branch 1290 IFEQ L3465 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I231 Branch 1379 IFEQ L3637 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.PostfixExpression()V: I166 Branch 1418 IFEQ L3792 - true
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryExpression()V: I107 Branch 1433 IFEQ L3897 - true
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I214 Branch 1458 IFEQ L4007 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I242 Branch 1459 IFEQ L4013 - true
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I255 Branch 1460 IFEQ L4020 - true
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I274 Branch 1461 IFEQ L4033 - true
   */

  @Test
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)118;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)118, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser((InputStream) byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)118, (byte)0, (byte)0}, byteArray0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(3, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try {
        javaParser0.RelationalExpression();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\" (0), after : \"\"
         //
      }
  }

  //Test case number: 76
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isStatic(I)Z: I8 Branch 3955 IFEQ L65 - true
   */

  @Test
  public void test76()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isStatic((-569));
      assertFalse(boolean0);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
  }

  //Test case number: 77
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.AssertStatement()V: I97 Branch 1732 IFEQ L4632 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.AssertStatement()V: I125 Branch 1733 IFEQ L4638 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.AssertStatement()V: I138 Branch 1734 IFEQ L4645 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.AssertStatement()V: I157 Branch 1735 IFEQ L4658 - true
   */

  @Test
  public void test77()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("y/d.K8bK>:7");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.AssertStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 78
  /*
   * 18 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.FieldDeclaration(I)V: I133 Branch 459 IFEQ L1323 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.FieldDeclaration(I)V: I146 Branch 460 IFEQ L1330 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I26 Branch 904 IFEQ L2083 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I43 Branch 905 IF_ICMPNE L2086 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I54 Branch 906 LOOKUPSWITCH L2086 Case 15 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I54 Branch 907 LOOKUPSWITCH L2086 Case 17 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I54 Branch 908 LOOKUPSWITCH L2086 Case 20 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I54 Branch 909 LOOKUPSWITCH L2086 Case 26 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I54 Branch 910 LOOKUPSWITCH L2086 Case 33 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I54 Branch 911 LOOKUPSWITCH L2086 Case 40 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I54 Branch 912 LOOKUPSWITCH L2086 Case 42 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I54 Branch 913 LOOKUPSWITCH L2086 Case 51 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I54 Branch 914 LOOKUPSWITCH L2086 Default-Case - true
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I132 Branch 917 IFEQ L2109 - true
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I145 Branch 918 IFEQ L2116 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_9(I)Z: I21 Branch 3178 IFNE L6814 - true
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_101()Z: I8 Branch 3706 IFEQ L9709 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_11()Z: I8 Branch 3909 IFEQ L10735 - false
   */

  @Test
  public void test78()  throws Throwable  {
      StringReader stringReader0 = new StringReader("u|><ndQ");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser((Reader) stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.ExclusiveOrExpression();
      assertFalse(javaParser0.lookingAhead);
      
      try {
        javaParser0.FieldDeclaration(0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 2.  Encountered: |
         //
      }
  }

  //Test case number: 79
  /*
   * 5 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.Name()V: I75 Branch 1015 IFEQ L2559 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.NameList()V: I95 Branch 1020 IFEQ L2584 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.NameList()V: I123 Branch 1021 IFEQ L2590 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.NameList()V: I136 Branch 1022 IFEQ L2597 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.NameList()V: I155 Branch 1023 IFEQ L2610 - true
   */

  @Test
  public void test79()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Rj,");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.NameList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 80
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I225 Branch 2105 IFEQ L5053 - false
   */

  @Test
  public void test80()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try {
        javaParser0.StatementExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 81
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isPrivate(I)Z: I8 Branch 3954 IFEQ L61 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isStrictfp(I)Z: I8 Branch 3959 IFEQ L81 - true
   */

  @Test
  public void test81()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isStrictfp(0);
      assertFalse(boolean0);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      
      boolean boolean1 = javaParser_ModifierSet0.isPrivate(0);
      assertFalse(boolean1);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertTrue(boolean1 == boolean0);
  }

  //Test case number: 82
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.Block()V: I97 Branch 1831 IFEQ L4764 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.Block()V: I125 Branch 1832 IFEQ L4770 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.Block()V: I157 Branch 1834 IFEQ L4790 - true
   */

  @Test
  public void test82()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try {
        javaParser0.Block();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 83
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ThrowStatement()V: I61 Branch 2806 IFEQ L5846 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ThrowStatement()V: I89 Branch 2807 IFEQ L5852 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ThrowStatement()V: I102 Branch 2808 IFEQ L5859 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.ThrowStatement()V: I121 Branch 2809 IFEQ L5872 - true
   */

  @Test
  public void test83()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Rj,");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.ThrowStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 84
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isAbstract(I)Z: I8 Branch 3956 IFEQ L69 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isVolatile(I)Z: I8 Branch 3962 IFEQ L93 - true
   */

  @Test
  public void test84()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isAbstract(4167);
      assertFalse(boolean0);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      
      boolean boolean1 = javaParser_ModifierSet0.isVolatile(4167);
      assertFalse(boolean1);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertTrue(boolean1 == boolean0);
  }

  //Test case number: 85
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBody(Z)V: I98 Branch 345 IFEQ L1139 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBody(Z)V: I126 Branch 346 IFEQ L1145 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.ClassOrInterfaceBody(Z)V: I158 Branch 348 IFEQ L1165 - true
   */

  @Test
  public void test85()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try {
        javaParser0.ClassOrInterfaceBody(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 86
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.SingleMemberAnnotation()V: I99 Branch 2859 IFEQ L6196 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.SingleMemberAnnotation()V: I112 Branch 2860 IFEQ L6203 - false
   */

  @Test
  public void test86()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.SingleMemberAnnotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 87
  /*
   * 97 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I26 Branch 1835 IFEQ L4802 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I49 Branch 1836 IF_ICMPNE L4806 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1837 TABLESWITCH L4806 Case 14 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1838 TABLESWITCH L4806 Case 15 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1839 TABLESWITCH L4806 Case 16 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1840 TABLESWITCH L4806 Case 17 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1841 TABLESWITCH L4806 Case 18 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1842 TABLESWITCH L4806 Case 19 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1843 TABLESWITCH L4806 Case 20 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1844 TABLESWITCH L4806 Case 21 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1845 TABLESWITCH L4806 Case 22 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1846 TABLESWITCH L4806 Case 23 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1847 TABLESWITCH L4806 Case 24 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1848 TABLESWITCH L4806 Case 25 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1849 TABLESWITCH L4806 Case 26 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1850 TABLESWITCH L4806 Case 27 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1851 TABLESWITCH L4806 Case 28 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1852 TABLESWITCH L4806 Case 29 - false
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1853 TABLESWITCH L4806 Case 30 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1854 TABLESWITCH L4806 Case 31 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1855 TABLESWITCH L4806 Case 32 - false
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1856 TABLESWITCH L4806 Case 33 - false
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1857 TABLESWITCH L4806 Case 34 - false
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1858 TABLESWITCH L4806 Case 35 - false
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1859 TABLESWITCH L4806 Case 36 - false
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1860 TABLESWITCH L4806 Case 37 - false
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1861 TABLESWITCH L4806 Case 38 - false
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1862 TABLESWITCH L4806 Case 39 - false
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1863 TABLESWITCH L4806 Case 40 - false
   * Goal 30. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1864 TABLESWITCH L4806 Case 41 - false
   * Goal 31. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1865 TABLESWITCH L4806 Case 42 - false
   * Goal 32. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1866 TABLESWITCH L4806 Case 43 - false
   * Goal 33. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1867 TABLESWITCH L4806 Case 44 - false
   * Goal 34. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1868 TABLESWITCH L4806 Case 45 - false
   * Goal 35. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1869 TABLESWITCH L4806 Case 46 - false
   * Goal 36. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1870 TABLESWITCH L4806 Case 47 - false
   * Goal 37. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1871 TABLESWITCH L4806 Case 48 - false
   * Goal 38. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1872 TABLESWITCH L4806 Case 49 - false
   * Goal 39. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1873 TABLESWITCH L4806 Case 50 - false
   * Goal 40. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1874 TABLESWITCH L4806 Case 51 - false
   * Goal 41. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1875 TABLESWITCH L4806 Case 52 - false
   * Goal 42. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1876 TABLESWITCH L4806 Case 53 - false
   * Goal 43. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1877 TABLESWITCH L4806 Case 54 - false
   * Goal 44. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1878 TABLESWITCH L4806 Case 55 - false
   * Goal 45. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1879 TABLESWITCH L4806 Case 56 - false
   * Goal 46. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1880 TABLESWITCH L4806 Case 57 - false
   * Goal 47. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1881 TABLESWITCH L4806 Case 58 - false
   * Goal 48. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1882 TABLESWITCH L4806 Case 59 - false
   * Goal 49. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1883 TABLESWITCH L4806 Case 60 - false
   * Goal 50. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1884 TABLESWITCH L4806 Case 61 - false
   * Goal 51. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1885 TABLESWITCH L4806 Case 62 - false
   * Goal 52. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1886 TABLESWITCH L4806 Case 63 - false
   * Goal 53. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1887 TABLESWITCH L4806 Case 64 - false
   * Goal 54. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1888 TABLESWITCH L4806 Case 65 - false
   * Goal 55. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1889 TABLESWITCH L4806 Case 66 - false
   * Goal 56. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1890 TABLESWITCH L4806 Case 67 - false
   * Goal 57. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1891 TABLESWITCH L4806 Case 68 - false
   * Goal 58. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1892 TABLESWITCH L4806 Case 69 - false
   * Goal 59. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1893 TABLESWITCH L4806 Case 70 - false
   * Goal 60. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1894 TABLESWITCH L4806 Case 71 - false
   * Goal 61. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1895 TABLESWITCH L4806 Case 72 - false
   * Goal 62. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1896 TABLESWITCH L4806 Case 73 - false
   * Goal 63. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1897 TABLESWITCH L4806 Case 74 - false
   * Goal 64. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1898 TABLESWITCH L4806 Case 75 - false
   * Goal 65. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1899 TABLESWITCH L4806 Case 76 - false
   * Goal 66. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1900 TABLESWITCH L4806 Case 77 - false
   * Goal 67. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1901 TABLESWITCH L4806 Case 78 - false
   * Goal 68. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1902 TABLESWITCH L4806 Case 79 - false
   * Goal 69. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1903 TABLESWITCH L4806 Case 80 - false
   * Goal 70. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1904 TABLESWITCH L4806 Case 81 - false
   * Goal 71. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1905 TABLESWITCH L4806 Case 82 - false
   * Goal 72. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1906 TABLESWITCH L4806 Case 83 - false
   * Goal 73. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1907 TABLESWITCH L4806 Case 84 - false
   * Goal 74. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1908 TABLESWITCH L4806 Case 85 - false
   * Goal 75. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1909 TABLESWITCH L4806 Case 86 - false
   * Goal 76. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1910 TABLESWITCH L4806 Case 87 - false
   * Goal 77. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1911 TABLESWITCH L4806 Case 88 - false
   * Goal 78. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1912 TABLESWITCH L4806 Case 89 - false
   * Goal 79. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1913 TABLESWITCH L4806 Case 90 - false
   * Goal 80. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1914 TABLESWITCH L4806 Case 91 - false
   * Goal 81. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1915 TABLESWITCH L4806 Case 92 - false
   * Goal 82. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1916 TABLESWITCH L4806 Case 93 - false
   * Goal 83. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1917 TABLESWITCH L4806 Case 94 - false
   * Goal 84. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1918 TABLESWITCH L4806 Case 95 - false
   * Goal 85. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1919 TABLESWITCH L4806 Case 96 - false
   * Goal 86. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1920 TABLESWITCH L4806 Case 97 - false
   * Goal 87. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1921 TABLESWITCH L4806 Case 98 - false
   * Goal 88. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1922 TABLESWITCH L4806 Case 99 - false
   * Goal 89. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1923 TABLESWITCH L4806 Case 100 - false
   * Goal 90. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I60 Branch 1924 TABLESWITCH L4806 Default-Case - true
   * Goal 91. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I121 Branch 1926 IFEQ L4856 - false
   * Goal 92. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I149 Branch 1927 IFEQ L4862 - true
   * Goal 93. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I162 Branch 1928 IFEQ L4869 - false
   * Goal 94. com.soops.CEN4010.JMCA.JParser.JavaParser.BlockStatement()V: I181 Branch 1929 IFEQ L4882 - true
   * Goal 95. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_34(I)Z: I21 Branch 3203 IFNE L7064 - true
   * Goal 96. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_34()Z: I13 Branch 3597 IFEQ L9129 - false
   * Goal 97. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_34()Z: I26 Branch 3598 IFEQ L9132 - false
   */

  @Test
  public void test87()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("OR");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.BlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 88
  /*
   * 100 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I26 Branch 1943 IF_ICMPNE L4967 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1944 TABLESWITCH L4967 Case 15 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1945 TABLESWITCH L4967 Case 16 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1946 TABLESWITCH L4967 Case 17 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1947 TABLESWITCH L4967 Case 18 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1948 TABLESWITCH L4967 Case 19 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1949 TABLESWITCH L4967 Case 20 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1950 TABLESWITCH L4967 Case 21 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1951 TABLESWITCH L4967 Case 22 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1952 TABLESWITCH L4967 Case 23 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1953 TABLESWITCH L4967 Case 24 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1954 TABLESWITCH L4967 Case 25 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1955 TABLESWITCH L4967 Case 26 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1956 TABLESWITCH L4967 Case 27 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1957 TABLESWITCH L4967 Case 28 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1958 TABLESWITCH L4967 Case 29 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1959 TABLESWITCH L4967 Case 30 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1960 TABLESWITCH L4967 Case 31 - false
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1961 TABLESWITCH L4967 Case 32 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1962 TABLESWITCH L4967 Case 33 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1963 TABLESWITCH L4967 Case 34 - false
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1964 TABLESWITCH L4967 Case 35 - false
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1965 TABLESWITCH L4967 Case 36 - false
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1966 TABLESWITCH L4967 Case 37 - false
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1967 TABLESWITCH L4967 Case 38 - false
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1968 TABLESWITCH L4967 Case 39 - false
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1969 TABLESWITCH L4967 Case 40 - false
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1970 TABLESWITCH L4967 Case 41 - false
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1971 TABLESWITCH L4967 Case 42 - false
   * Goal 30. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1972 TABLESWITCH L4967 Case 43 - false
   * Goal 31. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1973 TABLESWITCH L4967 Case 44 - false
   * Goal 32. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1974 TABLESWITCH L4967 Case 45 - false
   * Goal 33. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1975 TABLESWITCH L4967 Case 46 - false
   * Goal 34. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1976 TABLESWITCH L4967 Case 47 - false
   * Goal 35. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1977 TABLESWITCH L4967 Case 48 - false
   * Goal 36. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1978 TABLESWITCH L4967 Case 49 - false
   * Goal 37. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1979 TABLESWITCH L4967 Case 50 - false
   * Goal 38. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1980 TABLESWITCH L4967 Case 51 - false
   * Goal 39. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1981 TABLESWITCH L4967 Case 52 - false
   * Goal 40. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1982 TABLESWITCH L4967 Case 53 - false
   * Goal 41. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1983 TABLESWITCH L4967 Case 54 - false
   * Goal 42. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1984 TABLESWITCH L4967 Case 55 - false
   * Goal 43. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1985 TABLESWITCH L4967 Case 56 - false
   * Goal 44. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1986 TABLESWITCH L4967 Case 57 - false
   * Goal 45. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1987 TABLESWITCH L4967 Case 58 - false
   * Goal 46. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1988 TABLESWITCH L4967 Case 59 - false
   * Goal 47. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1989 TABLESWITCH L4967 Case 60 - false
   * Goal 48. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1990 TABLESWITCH L4967 Case 61 - false
   * Goal 49. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1991 TABLESWITCH L4967 Case 62 - false
   * Goal 50. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1992 TABLESWITCH L4967 Case 63 - false
   * Goal 51. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1993 TABLESWITCH L4967 Case 64 - false
   * Goal 52. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1994 TABLESWITCH L4967 Case 65 - false
   * Goal 53. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1995 TABLESWITCH L4967 Case 66 - false
   * Goal 54. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1996 TABLESWITCH L4967 Case 67 - false
   * Goal 55. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1997 TABLESWITCH L4967 Case 68 - false
   * Goal 56. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1998 TABLESWITCH L4967 Case 69 - false
   * Goal 57. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 1999 TABLESWITCH L4967 Case 70 - false
   * Goal 58. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2000 TABLESWITCH L4967 Case 71 - false
   * Goal 59. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2001 TABLESWITCH L4967 Case 72 - false
   * Goal 60. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2002 TABLESWITCH L4967 Case 73 - false
   * Goal 61. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2003 TABLESWITCH L4967 Case 74 - false
   * Goal 62. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2004 TABLESWITCH L4967 Case 75 - false
   * Goal 63. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2005 TABLESWITCH L4967 Case 76 - false
   * Goal 64. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2006 TABLESWITCH L4967 Case 77 - false
   * Goal 65. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2007 TABLESWITCH L4967 Case 78 - false
   * Goal 66. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2008 TABLESWITCH L4967 Case 79 - false
   * Goal 67. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2009 TABLESWITCH L4967 Case 80 - false
   * Goal 68. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2010 TABLESWITCH L4967 Case 81 - false
   * Goal 69. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2011 TABLESWITCH L4967 Case 82 - false
   * Goal 70. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2012 TABLESWITCH L4967 Case 83 - false
   * Goal 71. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2013 TABLESWITCH L4967 Case 84 - false
   * Goal 72. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2014 TABLESWITCH L4967 Case 85 - false
   * Goal 73. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2015 TABLESWITCH L4967 Case 86 - false
   * Goal 74. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2016 TABLESWITCH L4967 Case 87 - false
   * Goal 75. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2017 TABLESWITCH L4967 Case 88 - false
   * Goal 76. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2018 TABLESWITCH L4967 Case 89 - false
   * Goal 77. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2019 TABLESWITCH L4967 Case 90 - false
   * Goal 78. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2020 TABLESWITCH L4967 Case 91 - false
   * Goal 79. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2021 TABLESWITCH L4967 Case 92 - false
   * Goal 80. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2022 TABLESWITCH L4967 Case 93 - false
   * Goal 81. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2023 TABLESWITCH L4967 Case 94 - false
   * Goal 82. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2024 TABLESWITCH L4967 Case 95 - false
   * Goal 83. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2025 TABLESWITCH L4967 Case 96 - false
   * Goal 84. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2026 TABLESWITCH L4967 Case 97 - false
   * Goal 85. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2027 TABLESWITCH L4967 Case 98 - false
   * Goal 86. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2028 TABLESWITCH L4967 Case 99 - false
   * Goal 87. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2029 TABLESWITCH L4967 Case 100 - false
   * Goal 88. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I37 Branch 2030 TABLESWITCH L4967 Default-Case - true
   * Goal 89. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I197 Branch 2104 IFEQ L5047 - false
   * Goal 90. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I225 Branch 2105 IFEQ L5053 - true
   * Goal 91. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I238 Branch 2106 IFEQ L5060 - false
   * Goal 92. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpression()V: I257 Branch 2107 IFEQ L5073 - true
   * Goal 93. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpressionList()V: I95 Branch 2691 IFEQ L5646 - false
   * Goal 94. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpressionList()V: I123 Branch 2692 IFEQ L5652 - true
   * Goal 95. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpressionList()V: I136 Branch 2693 IFEQ L5659 - false
   * Goal 96. com.soops.CEN4010.JMCA.JParser.JavaParser.StatementExpressionList()V: I155 Branch 2694 IFEQ L5672 - true
   * Goal 97. com.soops.CEN4010.JMCA.JParser.JavaParser.ForUpdate()V: I49 Branch 2696 IFEQ L5686 - false
   * Goal 98. com.soops.CEN4010.JMCA.JParser.JavaParser.ForUpdate()V: I77 Branch 2697 IFEQ L5692 - true
   * Goal 99. com.soops.CEN4010.JMCA.JParser.JavaParser.ForUpdate()V: I90 Branch 2698 IFEQ L5699 - false
   * Goal 100. com.soops.CEN4010.JMCA.JParser.JavaParser.ForUpdate()V: I109 Branch 2699 IFEQ L5712 - true
   */

  @Test
  public void test88()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("_\"'+9p");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.ForUpdate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 89
  /*
   * 7 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableDeclarator()V: I85 Branch 466 IFEQ L1365 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableDeclarator()V: I113 Branch 467 IFEQ L1371 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableDeclarator()V: I126 Branch 468 IFEQ L1378 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableDeclarator()V: I145 Branch 469 IFEQ L1391 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableDeclaratorId()V: I98 Branch 474 IFEQ L1416 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_consume_token(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I48 Branch 3937 IF_ICMPLT L10947 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.generateParseException()Lcom/soops/CEN4010/JMCA/JParser/ParseException;: I22 Branch 3951 IFNE L11023 - false
   */

  @Test
  public void test89()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("T&b@p&4Ic[ `LCv7");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.VariableDeclarator();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
      }
  }

  //Test case number: 90
  /*
   * 579 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I26 Branch 475 IF_ICMPNE L1428 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 476 TABLESWITCH L1428 Case 15 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 477 TABLESWITCH L1428 Case 16 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 478 TABLESWITCH L1428 Case 17 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 479 TABLESWITCH L1428 Case 18 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 480 TABLESWITCH L1428 Case 19 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 481 TABLESWITCH L1428 Case 20 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 482 TABLESWITCH L1428 Case 21 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 483 TABLESWITCH L1428 Case 22 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 484 TABLESWITCH L1428 Case 23 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 485 TABLESWITCH L1428 Case 24 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 486 TABLESWITCH L1428 Case 25 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 487 TABLESWITCH L1428 Case 26 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 488 TABLESWITCH L1428 Case 27 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 489 TABLESWITCH L1428 Case 28 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 490 TABLESWITCH L1428 Case 29 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 491 TABLESWITCH L1428 Case 30 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 492 TABLESWITCH L1428 Case 31 - false
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 493 TABLESWITCH L1428 Case 32 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 494 TABLESWITCH L1428 Case 33 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 495 TABLESWITCH L1428 Case 34 - false
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 496 TABLESWITCH L1428 Case 35 - false
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 497 TABLESWITCH L1428 Case 36 - false
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 498 TABLESWITCH L1428 Case 37 - false
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 499 TABLESWITCH L1428 Case 38 - false
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 500 TABLESWITCH L1428 Case 39 - false
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 501 TABLESWITCH L1428 Case 40 - false
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 502 TABLESWITCH L1428 Case 41 - false
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 503 TABLESWITCH L1428 Case 42 - false
   * Goal 30. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 504 TABLESWITCH L1428 Case 43 - false
   * Goal 31. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 505 TABLESWITCH L1428 Case 44 - false
   * Goal 32. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 506 TABLESWITCH L1428 Case 45 - false
   * Goal 33. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 507 TABLESWITCH L1428 Case 46 - false
   * Goal 34. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 508 TABLESWITCH L1428 Case 47 - false
   * Goal 35. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 509 TABLESWITCH L1428 Case 48 - false
   * Goal 36. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 510 TABLESWITCH L1428 Case 49 - false
   * Goal 37. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 511 TABLESWITCH L1428 Case 50 - false
   * Goal 38. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 512 TABLESWITCH L1428 Case 51 - false
   * Goal 39. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 513 TABLESWITCH L1428 Case 52 - false
   * Goal 40. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 514 TABLESWITCH L1428 Case 53 - false
   * Goal 41. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 515 TABLESWITCH L1428 Case 54 - false
   * Goal 42. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 516 TABLESWITCH L1428 Case 55 - false
   * Goal 43. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 517 TABLESWITCH L1428 Case 56 - false
   * Goal 44. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 518 TABLESWITCH L1428 Case 57 - false
   * Goal 45. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 519 TABLESWITCH L1428 Case 58 - false
   * Goal 46. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 520 TABLESWITCH L1428 Case 59 - false
   * Goal 47. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 521 TABLESWITCH L1428 Case 60 - false
   * Goal 48. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 522 TABLESWITCH L1428 Case 61 - false
   * Goal 49. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 523 TABLESWITCH L1428 Case 62 - false
   * Goal 50. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 524 TABLESWITCH L1428 Case 63 - false
   * Goal 51. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 525 TABLESWITCH L1428 Case 64 - false
   * Goal 52. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 526 TABLESWITCH L1428 Case 65 - false
   * Goal 53. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 527 TABLESWITCH L1428 Case 66 - false
   * Goal 54. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 528 TABLESWITCH L1428 Case 67 - false
   * Goal 55. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 529 TABLESWITCH L1428 Case 68 - false
   * Goal 56. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 530 TABLESWITCH L1428 Case 69 - false
   * Goal 57. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 531 TABLESWITCH L1428 Case 70 - false
   * Goal 58. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 532 TABLESWITCH L1428 Case 71 - false
   * Goal 59. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 533 TABLESWITCH L1428 Case 72 - false
   * Goal 60. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 534 TABLESWITCH L1428 Case 73 - false
   * Goal 61. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 535 TABLESWITCH L1428 Case 74 - true
   * Goal 62. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 536 TABLESWITCH L1428 Case 75 - false
   * Goal 63. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 537 TABLESWITCH L1428 Case 76 - false
   * Goal 64. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 538 TABLESWITCH L1428 Case 77 - false
   * Goal 65. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 539 TABLESWITCH L1428 Case 78 - false
   * Goal 66. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 540 TABLESWITCH L1428 Case 79 - false
   * Goal 67. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 541 TABLESWITCH L1428 Case 80 - false
   * Goal 68. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 542 TABLESWITCH L1428 Case 81 - false
   * Goal 69. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 543 TABLESWITCH L1428 Case 82 - false
   * Goal 70. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 544 TABLESWITCH L1428 Case 83 - false
   * Goal 71. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 545 TABLESWITCH L1428 Case 84 - false
   * Goal 72. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 546 TABLESWITCH L1428 Case 85 - false
   * Goal 73. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 547 TABLESWITCH L1428 Case 86 - false
   * Goal 74. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 548 TABLESWITCH L1428 Case 87 - false
   * Goal 75. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 549 TABLESWITCH L1428 Case 88 - false
   * Goal 76. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 550 TABLESWITCH L1428 Case 89 - false
   * Goal 77. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 551 TABLESWITCH L1428 Case 90 - false
   * Goal 78. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 552 TABLESWITCH L1428 Case 91 - false
   * Goal 79. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 553 TABLESWITCH L1428 Case 92 - false
   * Goal 80. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 554 TABLESWITCH L1428 Case 93 - false
   * Goal 81. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 555 TABLESWITCH L1428 Case 94 - false
   * Goal 82. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 556 TABLESWITCH L1428 Case 95 - false
   * Goal 83. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 557 TABLESWITCH L1428 Case 96 - false
   * Goal 84. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 558 TABLESWITCH L1428 Case 97 - false
   * Goal 85. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 559 TABLESWITCH L1428 Case 98 - false
   * Goal 86. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 560 TABLESWITCH L1428 Case 99 - false
   * Goal 87. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 561 TABLESWITCH L1428 Case 100 - false
   * Goal 88. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 562 TABLESWITCH L1428 Case 101 - false
   * Goal 89. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 563 TABLESWITCH L1428 Case 102 - false
   * Goal 90. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I37 Branch 564 TABLESWITCH L1428 Default-Case - false
   * Goal 91. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I97 Branch 566 IFEQ L1466 - false
   * Goal 92. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I125 Branch 567 IFEQ L1472 - true
   * Goal 93. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I138 Branch 568 IFEQ L1479 - false
   * Goal 94. com.soops.CEN4010.JMCA.JParser.JavaParser.VariableInitializer()V: I157 Branch 569 IFEQ L1492 - true
   * Goal 95. com.soops.CEN4010.JMCA.JParser.JavaParser.Name()V: I32 Branch 1013 IFEQ L2550 - true
   * Goal 96. com.soops.CEN4010.JMCA.JParser.JavaParser.Name()V: I55 Branch 1014 IFEQ L2559 - false
   * Goal 97. com.soops.CEN4010.JMCA.JParser.JavaParser.Expression()V: I30 Branch 1024 IFEQ L2626 - true
   * Goal 98. com.soops.CEN4010.JMCA.JParser.JavaParser.Expression()V: I66 Branch 1026 IFEQ L2633 - false
   * Goal 99. com.soops.CEN4010.JMCA.JParser.JavaParser.Expression()V: I94 Branch 1027 IFEQ L2639 - true
   * Goal 100. com.soops.CEN4010.JMCA.JParser.JavaParser.Expression()V: I107 Branch 1028 IFEQ L2646 - false
   * Goal 101. com.soops.CEN4010.JMCA.JParser.JavaParser.Expression()V: I45 Branch 1025 IFEQ L2659 - false
   * Goal 102. com.soops.CEN4010.JMCA.JParser.JavaParser.Expression()V: I126 Branch 1029 IFEQ L2659 - true
   * Goal 103. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalExpression()V: I30 Branch 1068 IF_ICMPNE L2726 - true
   * Goal 104. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalExpression()V: I41 Branch 1069 LOOKUPSWITCH L2726 Case 91 - false
   * Goal 105. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalExpression()V: I41 Branch 1070 LOOKUPSWITCH L2726 Default-Case - true
   * Goal 106. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalExpression()V: I95 Branch 1072 IFEQ L2737 - false
   * Goal 107. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalExpression()V: I123 Branch 1073 IFEQ L2743 - true
   * Goal 108. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalExpression()V: I136 Branch 1074 IFEQ L2750 - false
   * Goal 109. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalExpression()V: I74 Branch 1071 IFEQ L2763 - false
   * Goal 110. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalExpression()V: I155 Branch 1075 IFEQ L2763 - true
   * Goal 111. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalOrExpression()V: I30 Branch 1076 IF_ICMPNE L2777 - true
   * Goal 112. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalOrExpression()V: I41 Branch 1077 LOOKUPSWITCH L2777 Case 97 - false
   * Goal 113. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalOrExpression()V: I41 Branch 1078 LOOKUPSWITCH L2777 Default-Case - true
   * Goal 114. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalOrExpression()V: I95 Branch 1080 IFEQ L2788 - false
   * Goal 115. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalOrExpression()V: I123 Branch 1081 IFEQ L2794 - true
   * Goal 116. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalOrExpression()V: I136 Branch 1082 IFEQ L2801 - false
   * Goal 117. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalOrExpression()V: I74 Branch 1079 IFEQ L2814 - false
   * Goal 118. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalOrExpression()V: I155 Branch 1083 IFEQ L2814 - true
   * Goal 119. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalAndExpression()V: I30 Branch 1084 IF_ICMPNE L2828 - true
   * Goal 120. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalAndExpression()V: I41 Branch 1085 LOOKUPSWITCH L2828 Case 98 - false
   * Goal 121. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalAndExpression()V: I41 Branch 1086 LOOKUPSWITCH L2828 Default-Case - true
   * Goal 122. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalAndExpression()V: I95 Branch 1088 IFEQ L2839 - false
   * Goal 123. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalAndExpression()V: I123 Branch 1089 IFEQ L2845 - true
   * Goal 124. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalAndExpression()V: I136 Branch 1090 IFEQ L2852 - false
   * Goal 125. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalAndExpression()V: I74 Branch 1087 IFEQ L2865 - false
   * Goal 126. com.soops.CEN4010.JMCA.JParser.JavaParser.ConditionalAndExpression()V: I155 Branch 1091 IFEQ L2865 - true
   * Goal 127. com.soops.CEN4010.JMCA.JParser.JavaParser.InclusiveOrExpression()V: I30 Branch 1092 IF_ICMPNE L2879 - true
   * Goal 128. com.soops.CEN4010.JMCA.JParser.JavaParser.InclusiveOrExpression()V: I41 Branch 1093 LOOKUPSWITCH L2879 Case 106 - false
   * Goal 129. com.soops.CEN4010.JMCA.JParser.JavaParser.InclusiveOrExpression()V: I41 Branch 1094 LOOKUPSWITCH L2879 Default-Case - true
   * Goal 130. com.soops.CEN4010.JMCA.JParser.JavaParser.InclusiveOrExpression()V: I95 Branch 1096 IFEQ L2890 - false
   * Goal 131. com.soops.CEN4010.JMCA.JParser.JavaParser.InclusiveOrExpression()V: I123 Branch 1097 IFEQ L2896 - true
   * Goal 132. com.soops.CEN4010.JMCA.JParser.JavaParser.InclusiveOrExpression()V: I136 Branch 1098 IFEQ L2903 - false
   * Goal 133. com.soops.CEN4010.JMCA.JParser.JavaParser.InclusiveOrExpression()V: I74 Branch 1095 IFEQ L2916 - false
   * Goal 134. com.soops.CEN4010.JMCA.JParser.JavaParser.InclusiveOrExpression()V: I155 Branch 1099 IFEQ L2916 - true
   * Goal 135. com.soops.CEN4010.JMCA.JParser.JavaParser.ExclusiveOrExpression()V: I30 Branch 1100 IF_ICMPNE L2930 - true
   * Goal 136. com.soops.CEN4010.JMCA.JParser.JavaParser.ExclusiveOrExpression()V: I41 Branch 1101 LOOKUPSWITCH L2930 Case 107 - false
   * Goal 137. com.soops.CEN4010.JMCA.JParser.JavaParser.ExclusiveOrExpression()V: I41 Branch 1102 LOOKUPSWITCH L2930 Default-Case - true
   * Goal 138. com.soops.CEN4010.JMCA.JParser.JavaParser.ExclusiveOrExpression()V: I95 Branch 1104 IFEQ L2941 - false
   * Goal 139. com.soops.CEN4010.JMCA.JParser.JavaParser.ExclusiveOrExpression()V: I123 Branch 1105 IFEQ L2947 - true
   * Goal 140. com.soops.CEN4010.JMCA.JParser.JavaParser.ExclusiveOrExpression()V: I136 Branch 1106 IFEQ L2954 - false
   * Goal 141. com.soops.CEN4010.JMCA.JParser.JavaParser.ExclusiveOrExpression()V: I74 Branch 1103 IFEQ L2967 - false
   * Goal 142. com.soops.CEN4010.JMCA.JParser.JavaParser.ExclusiveOrExpression()V: I155 Branch 1107 IFEQ L2967 - true
   * Goal 143. com.soops.CEN4010.JMCA.JParser.JavaParser.AndExpression()V: I30 Branch 1108 IF_ICMPNE L2981 - true
   * Goal 144. com.soops.CEN4010.JMCA.JParser.JavaParser.AndExpression()V: I41 Branch 1109 LOOKUPSWITCH L2981 Case 105 - false
   * Goal 145. com.soops.CEN4010.JMCA.JParser.JavaParser.AndExpression()V: I41 Branch 1110 LOOKUPSWITCH L2981 Default-Case - true
   * Goal 146. com.soops.CEN4010.JMCA.JParser.JavaParser.AndExpression()V: I123 Branch 1113 IFEQ L2998 - true
   * Goal 147. com.soops.CEN4010.JMCA.JParser.JavaParser.AndExpression()V: I136 Branch 1114 IFEQ L3005 - false
   * Goal 148. com.soops.CEN4010.JMCA.JParser.JavaParser.AndExpression()V: I74 Branch 1111 IFEQ L3018 - false
   * Goal 149. com.soops.CEN4010.JMCA.JParser.JavaParser.EqualityExpression()V: I30 Branch 1116 IF_ICMPNE L3032 - true
   * Goal 150. com.soops.CEN4010.JMCA.JParser.JavaParser.EqualityExpression()V: I41 Branch 1117 LOOKUPSWITCH L3032 Case 93 - false
   * Goal 151. com.soops.CEN4010.JMCA.JParser.JavaParser.EqualityExpression()V: I41 Branch 1118 LOOKUPSWITCH L3032 Case 96 - false
   * Goal 152. com.soops.CEN4010.JMCA.JParser.JavaParser.EqualityExpression()V: I41 Branch 1119 LOOKUPSWITCH L3032 Default-Case - true
   * Goal 153. com.soops.CEN4010.JMCA.JParser.JavaParser.EqualityExpression()V: I173 Branch 1126 IFEQ L3060 - true
   * Goal 154. com.soops.CEN4010.JMCA.JParser.JavaParser.EqualityExpression()V: I186 Branch 1127 IFEQ L3067 - false
   * Goal 155. com.soops.CEN4010.JMCA.JParser.JavaParser.EqualityExpression()V: I124 Branch 1124 IFEQ L3080 - false
   * Goal 156. com.soops.CEN4010.JMCA.JParser.JavaParser.InstanceOfExpression()V: I30 Branch 1129 IF_ICMPNE L3093 - true
   * Goal 157. com.soops.CEN4010.JMCA.JParser.JavaParser.InstanceOfExpression()V: I41 Branch 1130 LOOKUPSWITCH L3093 Case 39 - false
   * Goal 158. com.soops.CEN4010.JMCA.JParser.JavaParser.InstanceOfExpression()V: I41 Branch 1131 LOOKUPSWITCH L3093 Default-Case - true
   * Goal 159. com.soops.CEN4010.JMCA.JParser.JavaParser.InstanceOfExpression()V: I113 Branch 1134 IFEQ L3108 - true
   * Goal 160. com.soops.CEN4010.JMCA.JParser.JavaParser.InstanceOfExpression()V: I126 Branch 1135 IFEQ L3115 - false
   * Goal 161. com.soops.CEN4010.JMCA.JParser.JavaParser.InstanceOfExpression()V: I64 Branch 1132 IFEQ L3128 - false
   * Goal 162. com.soops.CEN4010.JMCA.JParser.JavaParser.RelationalExpression()V: I30 Branch 1137 IF_ICMPNE L3142 - true
   * Goal 163. com.soops.CEN4010.JMCA.JParser.JavaParser.RelationalExpression()V: I41 Branch 1138 LOOKUPSWITCH L3142 Case 88 - false
   * Goal 164. com.soops.CEN4010.JMCA.JParser.JavaParser.RelationalExpression()V: I41 Branch 1139 LOOKUPSWITCH L3142 Case 94 - false
   * Goal 165. com.soops.CEN4010.JMCA.JParser.JavaParser.RelationalExpression()V: I41 Branch 1140 LOOKUPSWITCH L3142 Case 95 - false
   * Goal 166. com.soops.CEN4010.JMCA.JParser.JavaParser.RelationalExpression()V: I41 Branch 1141 LOOKUPSWITCH L3142 Case 124 - false
   * Goal 167. com.soops.CEN4010.JMCA.JParser.JavaParser.RelationalExpression()V: I41 Branch 1142 LOOKUPSWITCH L3142 Default-Case - true
   * Goal 168. com.soops.CEN4010.JMCA.JParser.JavaParser.RelationalExpression()V: I197 Branch 1151 IFEQ L3178 - true
   * Goal 169. com.soops.CEN4010.JMCA.JParser.JavaParser.RelationalExpression()V: I210 Branch 1152 IFEQ L3185 - false
   * Goal 170. com.soops.CEN4010.JMCA.JParser.JavaParser.RelationalExpression()V: I148 Branch 1149 IFEQ L3198 - false
   * Goal 171. com.soops.CEN4010.JMCA.JParser.JavaParser.ShiftExpression()V: I30 Branch 1154 IFEQ L3212 - true
   * Goal 172. com.soops.CEN4010.JMCA.JParser.JavaParser.ShiftExpression()V: I172 Branch 1162 IFEQ L3240 - true
   * Goal 173. com.soops.CEN4010.JMCA.JParser.JavaParser.ShiftExpression()V: I185 Branch 1163 IFEQ L3247 - false
   * Goal 174. com.soops.CEN4010.JMCA.JParser.JavaParser.ShiftExpression()V: I123 Branch 1160 IFEQ L3260 - false
   * Goal 175. com.soops.CEN4010.JMCA.JParser.JavaParser.AdditiveExpression()V: I30 Branch 1165 IF_ICMPNE L3274 - true
   * Goal 176. com.soops.CEN4010.JMCA.JParser.JavaParser.AdditiveExpression()V: I41 Branch 1166 LOOKUPSWITCH L3274 Case 101 - false
   * Goal 177. com.soops.CEN4010.JMCA.JParser.JavaParser.AdditiveExpression()V: I41 Branch 1167 LOOKUPSWITCH L3274 Case 102 - false
   * Goal 178. com.soops.CEN4010.JMCA.JParser.JavaParser.AdditiveExpression()V: I41 Branch 1168 LOOKUPSWITCH L3274 Default-Case - true
   * Goal 179. com.soops.CEN4010.JMCA.JParser.JavaParser.AdditiveExpression()V: I173 Branch 1175 IFEQ L3302 - true
   * Goal 180. com.soops.CEN4010.JMCA.JParser.JavaParser.AdditiveExpression()V: I186 Branch 1176 IFEQ L3309 - false
   * Goal 181. com.soops.CEN4010.JMCA.JParser.JavaParser.AdditiveExpression()V: I124 Branch 1173 IFEQ L3322 - false
   * Goal 182. com.soops.CEN4010.JMCA.JParser.JavaParser.MultiplicativeExpression()V: I30 Branch 1178 IF_ICMPNE L3336 - true
   * Goal 183. com.soops.CEN4010.JMCA.JParser.JavaParser.MultiplicativeExpression()V: I41 Branch 1179 LOOKUPSWITCH L3336 Case 103 - false
   * Goal 184. com.soops.CEN4010.JMCA.JParser.JavaParser.MultiplicativeExpression()V: I41 Branch 1180 LOOKUPSWITCH L3336 Case 104 - false
   * Goal 185. com.soops.CEN4010.JMCA.JParser.JavaParser.MultiplicativeExpression()V: I41 Branch 1181 LOOKUPSWITCH L3336 Case 108 - false
   * Goal 186. com.soops.CEN4010.JMCA.JParser.JavaParser.MultiplicativeExpression()V: I41 Branch 1182 LOOKUPSWITCH L3336 Default-Case - true
   * Goal 187. com.soops.CEN4010.JMCA.JParser.JavaParser.MultiplicativeExpression()V: I185 Branch 1190 IFEQ L3368 - true
   * Goal 188. com.soops.CEN4010.JMCA.JParser.JavaParser.MultiplicativeExpression()V: I198 Branch 1191 IFEQ L3375 - false
   * Goal 189. com.soops.CEN4010.JMCA.JParser.JavaParser.MultiplicativeExpression()V: I136 Branch 1188 IFEQ L3388 - false
   * Goal 190. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I26 Branch 1193 IF_ICMPNE L3400 - true
   * Goal 191. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1194 TABLESWITCH L3400 Case 15 - false
   * Goal 192. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1195 TABLESWITCH L3400 Case 16 - false
   * Goal 193. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1196 TABLESWITCH L3400 Case 17 - false
   * Goal 194. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1197 TABLESWITCH L3400 Case 18 - false
   * Goal 195. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1198 TABLESWITCH L3400 Case 19 - false
   * Goal 196. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1199 TABLESWITCH L3400 Case 20 - false
   * Goal 197. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1200 TABLESWITCH L3400 Case 21 - false
   * Goal 198. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1201 TABLESWITCH L3400 Case 22 - false
   * Goal 199. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1202 TABLESWITCH L3400 Case 23 - false
   * Goal 200. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1203 TABLESWITCH L3400 Case 24 - false
   * Goal 201. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1204 TABLESWITCH L3400 Case 25 - false
   * Goal 202. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1205 TABLESWITCH L3400 Case 26 - false
   * Goal 203. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1206 TABLESWITCH L3400 Case 27 - false
   * Goal 204. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1207 TABLESWITCH L3400 Case 28 - false
   * Goal 205. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1208 TABLESWITCH L3400 Case 29 - false
   * Goal 206. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1209 TABLESWITCH L3400 Case 30 - false
   * Goal 207. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1210 TABLESWITCH L3400 Case 31 - false
   * Goal 208. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1211 TABLESWITCH L3400 Case 32 - false
   * Goal 209. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1212 TABLESWITCH L3400 Case 33 - false
   * Goal 210. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1213 TABLESWITCH L3400 Case 34 - false
   * Goal 211. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1214 TABLESWITCH L3400 Case 35 - false
   * Goal 212. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1215 TABLESWITCH L3400 Case 36 - false
   * Goal 213. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1216 TABLESWITCH L3400 Case 37 - false
   * Goal 214. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1217 TABLESWITCH L3400 Case 38 - false
   * Goal 215. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1218 TABLESWITCH L3400 Case 39 - false
   * Goal 216. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1219 TABLESWITCH L3400 Case 40 - false
   * Goal 217. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1220 TABLESWITCH L3400 Case 41 - false
   * Goal 218. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1221 TABLESWITCH L3400 Case 42 - false
   * Goal 219. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1222 TABLESWITCH L3400 Case 43 - false
   * Goal 220. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1223 TABLESWITCH L3400 Case 44 - false
   * Goal 221. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1224 TABLESWITCH L3400 Case 45 - false
   * Goal 222. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1225 TABLESWITCH L3400 Case 46 - false
   * Goal 223. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1226 TABLESWITCH L3400 Case 47 - false
   * Goal 224. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1227 TABLESWITCH L3400 Case 48 - false
   * Goal 225. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1228 TABLESWITCH L3400 Case 49 - false
   * Goal 226. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1229 TABLESWITCH L3400 Case 50 - false
   * Goal 227. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1230 TABLESWITCH L3400 Case 51 - false
   * Goal 228. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1231 TABLESWITCH L3400 Case 52 - false
   * Goal 229. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1232 TABLESWITCH L3400 Case 53 - false
   * Goal 230. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1233 TABLESWITCH L3400 Case 54 - false
   * Goal 231. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1234 TABLESWITCH L3400 Case 55 - false
   * Goal 232. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1235 TABLESWITCH L3400 Case 56 - false
   * Goal 233. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1236 TABLESWITCH L3400 Case 57 - false
   * Goal 234. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1237 TABLESWITCH L3400 Case 58 - false
   * Goal 235. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1238 TABLESWITCH L3400 Case 59 - false
   * Goal 236. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1239 TABLESWITCH L3400 Case 60 - false
   * Goal 237. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1240 TABLESWITCH L3400 Case 61 - false
   * Goal 238. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1241 TABLESWITCH L3400 Case 62 - false
   * Goal 239. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1242 TABLESWITCH L3400 Case 63 - false
   * Goal 240. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1243 TABLESWITCH L3400 Case 64 - false
   * Goal 241. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1244 TABLESWITCH L3400 Case 65 - false
   * Goal 242. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1245 TABLESWITCH L3400 Case 66 - false
   * Goal 243. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1246 TABLESWITCH L3400 Case 67 - false
   * Goal 244. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1247 TABLESWITCH L3400 Case 68 - false
   * Goal 245. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1248 TABLESWITCH L3400 Case 69 - false
   * Goal 246. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1249 TABLESWITCH L3400 Case 70 - false
   * Goal 247. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1250 TABLESWITCH L3400 Case 71 - false
   * Goal 248. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1251 TABLESWITCH L3400 Case 72 - false
   * Goal 249. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1252 TABLESWITCH L3400 Case 73 - false
   * Goal 250. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1253 TABLESWITCH L3400 Case 74 - true
   * Goal 251. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1254 TABLESWITCH L3400 Case 75 - false
   * Goal 252. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1255 TABLESWITCH L3400 Case 76 - false
   * Goal 253. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1256 TABLESWITCH L3400 Case 77 - false
   * Goal 254. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1257 TABLESWITCH L3400 Case 78 - false
   * Goal 255. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1258 TABLESWITCH L3400 Case 79 - false
   * Goal 256. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1259 TABLESWITCH L3400 Case 80 - false
   * Goal 257. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1260 TABLESWITCH L3400 Case 81 - false
   * Goal 258. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1261 TABLESWITCH L3400 Case 82 - false
   * Goal 259. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1262 TABLESWITCH L3400 Case 83 - false
   * Goal 260. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1263 TABLESWITCH L3400 Case 84 - false
   * Goal 261. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1264 TABLESWITCH L3400 Case 85 - false
   * Goal 262. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1265 TABLESWITCH L3400 Case 86 - false
   * Goal 263. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1266 TABLESWITCH L3400 Case 87 - false
   * Goal 264. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1267 TABLESWITCH L3400 Case 88 - false
   * Goal 265. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1268 TABLESWITCH L3400 Case 89 - false
   * Goal 266. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1269 TABLESWITCH L3400 Case 90 - false
   * Goal 267. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1270 TABLESWITCH L3400 Case 91 - false
   * Goal 268. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1271 TABLESWITCH L3400 Case 92 - false
   * Goal 269. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1272 TABLESWITCH L3400 Case 93 - false
   * Goal 270. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1273 TABLESWITCH L3400 Case 94 - false
   * Goal 271. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1274 TABLESWITCH L3400 Case 95 - false
   * Goal 272. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1275 TABLESWITCH L3400 Case 96 - false
   * Goal 273. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1276 TABLESWITCH L3400 Case 97 - false
   * Goal 274. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1277 TABLESWITCH L3400 Case 98 - false
   * Goal 275. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1278 TABLESWITCH L3400 Case 99 - false
   * Goal 276. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1279 TABLESWITCH L3400 Case 100 - false
   * Goal 277. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1280 TABLESWITCH L3400 Case 101 - false
   * Goal 278. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1281 TABLESWITCH L3400 Case 102 - false
   * Goal 279. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I37 Branch 1282 TABLESWITCH L3400 Default-Case - false
   * Goal 280. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I201 Branch 1289 IFEQ L3458 - true
   * Goal 281. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I214 Branch 1290 IFEQ L3465 - false
   * Goal 282. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I152 Branch 1287 IFEQ L3478 - false
   * Goal 283. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I26 Branch 1302 IF_ICMPNE L3573 - true
   * Goal 284. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I37 Branch 1303 LOOKUPSWITCH L3573 Case 89 - false
   * Goal 285. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I37 Branch 1304 LOOKUPSWITCH L3573 Case 90 - false
   * Goal 286. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I37 Branch 1305 LOOKUPSWITCH L3573 Default-Case - true
   * Goal 287. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I112 Branch 1310 IFEQ L3590 - true
   * Goal 288. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I129 Branch 1311 IF_ICMPNE L3593 - true
   * Goal 289. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1312 TABLESWITCH L3593 Case 15 - false
   * Goal 290. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1313 TABLESWITCH L3593 Case 16 - false
   * Goal 291. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1314 TABLESWITCH L3593 Case 17 - false
   * Goal 292. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1315 TABLESWITCH L3593 Case 18 - false
   * Goal 293. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1316 TABLESWITCH L3593 Case 19 - false
   * Goal 294. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1317 TABLESWITCH L3593 Case 20 - false
   * Goal 295. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1318 TABLESWITCH L3593 Case 21 - false
   * Goal 296. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1319 TABLESWITCH L3593 Case 22 - false
   * Goal 297. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1320 TABLESWITCH L3593 Case 23 - false
   * Goal 298. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1321 TABLESWITCH L3593 Case 24 - false
   * Goal 299. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1322 TABLESWITCH L3593 Case 25 - false
   * Goal 300. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1323 TABLESWITCH L3593 Case 26 - false
   * Goal 301. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1324 TABLESWITCH L3593 Case 27 - false
   * Goal 302. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1325 TABLESWITCH L3593 Case 28 - false
   * Goal 303. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1326 TABLESWITCH L3593 Case 29 - false
   * Goal 304. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1327 TABLESWITCH L3593 Case 30 - false
   * Goal 305. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1328 TABLESWITCH L3593 Case 31 - false
   * Goal 306. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1329 TABLESWITCH L3593 Case 32 - false
   * Goal 307. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1330 TABLESWITCH L3593 Case 33 - false
   * Goal 308. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1331 TABLESWITCH L3593 Case 34 - false
   * Goal 309. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1332 TABLESWITCH L3593 Case 35 - false
   * Goal 310. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1333 TABLESWITCH L3593 Case 36 - false
   * Goal 311. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1334 TABLESWITCH L3593 Case 37 - false
   * Goal 312. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1335 TABLESWITCH L3593 Case 38 - false
   * Goal 313. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1336 TABLESWITCH L3593 Case 39 - false
   * Goal 314. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1337 TABLESWITCH L3593 Case 40 - false
   * Goal 315. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1338 TABLESWITCH L3593 Case 41 - false
   * Goal 316. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1339 TABLESWITCH L3593 Case 42 - false
   * Goal 317. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1340 TABLESWITCH L3593 Case 43 - false
   * Goal 318. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1341 TABLESWITCH L3593 Case 44 - false
   * Goal 319. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1342 TABLESWITCH L3593 Case 45 - false
   * Goal 320. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1343 TABLESWITCH L3593 Case 46 - false
   * Goal 321. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1344 TABLESWITCH L3593 Case 47 - false
   * Goal 322. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1345 TABLESWITCH L3593 Case 48 - false
   * Goal 323. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1346 TABLESWITCH L3593 Case 49 - false
   * Goal 324. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1347 TABLESWITCH L3593 Case 50 - false
   * Goal 325. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1348 TABLESWITCH L3593 Case 51 - false
   * Goal 326. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1349 TABLESWITCH L3593 Case 52 - false
   * Goal 327. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1350 TABLESWITCH L3593 Case 53 - false
   * Goal 328. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1351 TABLESWITCH L3593 Case 54 - false
   * Goal 329. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1352 TABLESWITCH L3593 Case 55 - false
   * Goal 330. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1353 TABLESWITCH L3593 Case 56 - false
   * Goal 331. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1354 TABLESWITCH L3593 Case 57 - false
   * Goal 332. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1355 TABLESWITCH L3593 Case 58 - false
   * Goal 333. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1356 TABLESWITCH L3593 Case 59 - false
   * Goal 334. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1357 TABLESWITCH L3593 Case 60 - false
   * Goal 335. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1358 TABLESWITCH L3593 Case 61 - false
   * Goal 336. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1359 TABLESWITCH L3593 Case 62 - false
   * Goal 337. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1360 TABLESWITCH L3593 Case 63 - false
   * Goal 338. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1361 TABLESWITCH L3593 Case 64 - false
   * Goal 339. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1362 TABLESWITCH L3593 Case 65 - false
   * Goal 340. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1363 TABLESWITCH L3593 Case 66 - false
   * Goal 341. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1364 TABLESWITCH L3593 Case 67 - false
   * Goal 342. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1365 TABLESWITCH L3593 Case 68 - false
   * Goal 343. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1366 TABLESWITCH L3593 Case 69 - false
   * Goal 344. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1367 TABLESWITCH L3593 Case 70 - false
   * Goal 345. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1368 TABLESWITCH L3593 Case 71 - false
   * Goal 346. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1369 TABLESWITCH L3593 Case 72 - false
   * Goal 347. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1370 TABLESWITCH L3593 Case 73 - false
   * Goal 348. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1371 TABLESWITCH L3593 Case 74 - true
   * Goal 349. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1372 TABLESWITCH L3593 Case 75 - false
   * Goal 350. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1373 TABLESWITCH L3593 Case 76 - false
   * Goal 351. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1374 TABLESWITCH L3593 Case 77 - false
   * Goal 352. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I140 Branch 1375 TABLESWITCH L3593 Default-Case - false
   * Goal 353. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I190 Branch 1377 IFEQ L3624 - false
   * Goal 354. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I218 Branch 1378 IFEQ L3630 - true
   * Goal 355. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I231 Branch 1379 IFEQ L3637 - false
   * Goal 356. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I169 Branch 1376 IFEQ L3650 - false
   * Goal 357. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpressionNotPlusMinus()V: I250 Branch 1380 IFEQ L3650 - true
   * Goal 358. com.soops.CEN4010.JMCA.JParser.JavaParser.PostfixExpression()V: I30 Branch 1407 IF_ICMPNE L3760 - false
   * Goal 359. com.soops.CEN4010.JMCA.JParser.JavaParser.PostfixExpression()V: I41 Branch 1408 LOOKUPSWITCH L3760 Case 99 - false
   * Goal 360. com.soops.CEN4010.JMCA.JParser.JavaParser.PostfixExpression()V: I41 Branch 1409 LOOKUPSWITCH L3760 Case 100 - false
   * Goal 361. com.soops.CEN4010.JMCA.JParser.JavaParser.PostfixExpression()V: I41 Branch 1410 LOOKUPSWITCH L3760 Default-Case - true
   * Goal 362. com.soops.CEN4010.JMCA.JParser.JavaParser.PostfixExpression()V: I125 Branch 1416 IFEQ L3779 - false
   * Goal 363. com.soops.CEN4010.JMCA.JParser.JavaParser.PostfixExpression()V: I153 Branch 1417 IFEQ L3785 - true
   * Goal 364. com.soops.CEN4010.JMCA.JParser.JavaParser.PostfixExpression()V: I166 Branch 1418 IFEQ L3792 - false
   * Goal 365. com.soops.CEN4010.JMCA.JParser.JavaParser.PostfixExpression()V: I104 Branch 1415 IFEQ L3805 - false
   * Goal 366. com.soops.CEN4010.JMCA.JParser.JavaParser.PostfixExpression()V: I185 Branch 1419 IFEQ L3805 - true
   * Goal 367. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryExpression()V: I30 Branch 1429 IFEQ L3876 - true
   * Goal 368. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryExpression()V: I30 Branch 1429 IFEQ L3876 - false
   * Goal 369. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryExpression()V: I66 Branch 1431 IFEQ L3884 - false
   * Goal 370. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryExpression()V: I94 Branch 1432 IFEQ L3890 - true
   * Goal 371. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryExpression()V: I107 Branch 1433 IFEQ L3897 - false
   * Goal 372. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryExpression()V: I45 Branch 1430 IFEQ L3910 - false
   * Goal 373. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryExpression()V: I126 Branch 1434 IFEQ L3910 - true
   * Goal 374. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I26 Branch 1440 IF_ICMPNE L3964 - true
   * Goal 375. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1441 LOOKUPSWITCH L3964 Case 30 - false
   * Goal 376. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1442 LOOKUPSWITCH L3964 Case 44 - false
   * Goal 377. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1443 LOOKUPSWITCH L3964 Case 45 - false
   * Goal 378. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1444 LOOKUPSWITCH L3964 Case 54 - false
   * Goal 379. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1445 LOOKUPSWITCH L3964 Case 57 - false
   * Goal 380. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1446 LOOKUPSWITCH L3964 Case 61 - false
   * Goal 381. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1447 LOOKUPSWITCH L3964 Case 66 - false
   * Goal 382. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1448 LOOKUPSWITCH L3964 Case 70 - false
   * Goal 383. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1449 LOOKUPSWITCH L3964 Case 72 - false
   * Goal 384. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1450 LOOKUPSWITCH L3964 Case 73 - false
   * Goal 385. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1451 LOOKUPSWITCH L3964 Case 77 - false
   * Goal 386. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I37 Branch 1452 LOOKUPSWITCH L3964 Default-Case - true
   * Goal 387. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I124 Branch 1453 IFEQ L3991 - true
   * Goal 388. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I153 Branch 1454 IF_ICMPNE L3996 - true
   * Goal 389. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I164 Branch 1455 LOOKUPSWITCH L3996 Case 74 - true
   * Goal 390. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I164 Branch 1456 LOOKUPSWITCH L3996 Default-Case - false
   * Goal 391. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimaryPrefix()V: I193 Branch 1457 IFEQ L4033 - false
   * Goal 392. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I26 Branch 1462 IFEQ L4045 - true
   * Goal 393. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I51 Branch 1463 IFEQ L4048 - true
   * Goal 394. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I74 Branch 1464 IFEQ L4051 - true
   * Goal 395. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I91 Branch 1465 IF_ICMPNE L4054 - false
   * Goal 396. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I102 Branch 1466 LOOKUPSWITCH L4054 Case 77 - false
   * Goal 397. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I102 Branch 1467 LOOKUPSWITCH L4054 Case 81 - true
   * Goal 398. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I102 Branch 1468 LOOKUPSWITCH L4054 Case 85 - false
   * Goal 399. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I102 Branch 1469 LOOKUPSWITCH L4054 Default-Case - false
   * Goal 400. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I220 Branch 1472 IFEQ L4079 - true
   * Goal 401. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I233 Branch 1473 IFEQ L4086 - false
   * Goal 402. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_15(I)Z: I21 Branch 3184 IFNE L6874 - true
   * Goal 403. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_16(I)Z: I21 Branch 3185 IFNE L6884 - true
   * Goal 404. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_17(I)Z: I21 Branch 3186 IFNE L6894 - true
   * Goal 405. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_20(I)Z: I21 Branch 3189 IFNE L6924 - true
   * Goal 406. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_24(I)Z: I21 Branch 3193 IFNE L6964 - true
   * Goal 407. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_25(I)Z: I21 Branch 3194 IFNE L6974 - true
   * Goal 408. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_26(I)Z: I21 Branch 3195 IFNE L6984 - true
   * Goal 409. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_27(I)Z: I21 Branch 3196 IFNE L6994 - true
   * Goal 410. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_2_28(I)Z: I21 Branch 3197 IFNE L7004 - true
   * Goal 411. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_94()Z: I7 Branch 3210 IFEQ L7131 - true
   * Goal 412. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_94()Z: I7 Branch 3210 IFEQ L7131 - false
   * Goal 413. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_94()Z: I24 Branch 3211 IFEQ L7137 - false
   * Goal 414. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_93()Z: I7 Branch 3212 IFEQ L7146 - false
   * Goal 415. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_67()Z: I12 Branch 3215 IFEQ L7165 - false
   * Goal 416. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_67()Z: I25 Branch 3216 IFEQ L7167 - true
   * Goal 417. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_67()Z: I25 Branch 3216 IFEQ L7167 - false
   * Goal 418. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_85()Z: I7 Branch 3219 IFEQ L7185 - false
   * Goal 419. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_9()Z: I7 Branch 3220 IFEQ L7192 - true
   * Goal 420. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_9()Z: I7 Branch 3220 IFEQ L7192 - false
   * Goal 421. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_60()Z: I12 Branch 3221 IFEQ L7201 - true
   * Goal 422. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_60()Z: I12 Branch 3221 IFEQ L7201 - false
   * Goal 423. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_60()Z: I25 Branch 3222 IFEQ L7203 - false
   * Goal 424. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_71()Z: I21 Branch 3405 IF_ICMPNE L8182 - true
   * Goal 425. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_71()Z: I53 Branch 3407 IFEQ L8185 - true
   * Goal 426. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_72()Z: I21 Branch 3421 IF_ICMPNE L8257 - true
   * Goal 427. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_72()Z: I53 Branch 3423 IFEQ L8260 - true
   * Goal 428. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_105()Z: I8 Branch 3675 IFEQ L9544 - false
   * Goal 429. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_29()Z: I8 Branch 3680 IFEQ L9566 - false
   * Goal 430. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_77()Z: I12 Branch 3683 IFEQ L9581 - false
   * Goal 431. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_77()Z: I25 Branch 3684 IFEQ L9583 - false
   * Goal 432. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_66()Z: I8 Branch 3688 IFEQ L9613 - false
   * Goal 433. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_149()Z: I8 Branch 3691 IFEQ L9628 - false
   * Goal 434. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_148()Z: I13 Branch 3692 IFEQ L9637 - false
   * Goal 435. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_148()Z: I27 Branch 3693 IFEQ L9639 - false
   * Goal 436. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_142()Z: I7 Branch 3694 IFEQ L9647 - false
   * Goal 437. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_141()Z: I7 Branch 3695 IFEQ L9654 - false
   * Goal 438. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_134()Z: I13 Branch 3697 IFEQ L9670 - false
   * Goal 439. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_134()Z: I27 Branch 3698 IFEQ L9672 - false
   * Goal 440. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_134()Z: I41 Branch 3699 IFEQ L9674 - false
   * Goal 441. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_134()Z: I55 Branch 3700 IFEQ L9676 - false
   * Goal 442. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_134()Z: I68 Branch 3701 IFEQ L9678 - false
   * Goal 443. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_134()Z: I81 Branch 3702 IFEQ L9680 - false
   * Goal 444. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_103()Z: I7 Branch 3703 IFEQ L9692 - false
   * Goal 445. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_102()Z: I8 Branch 3704 IFEQ L9699 - false
   * Goal 446. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_101()Z: I8 Branch 3706 IFEQ L9709 - true
   * Goal 447. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_101()Z: I20 Branch 3707 IFEQ L9712 - false
   * Goal 448. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_28()Z: I7 Branch 3709 IFEQ L9722 - false
   * Goal 449. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_27()Z: I8 Branch 3710 IFEQ L9729 - false
   * Goal 450. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_25()Z: I7 Branch 3712 IFEQ L9739 - true
   * Goal 451. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_25()Z: I20 Branch 3713 IFEQ L9742 - false
   * Goal 452. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_26()Z: I8 Branch 3715 IFEQ L9752 - false
   * Goal 453. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_75()Z: I12 Branch 3717 IFEQ L9764 - false
   * Goal 454. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_75()Z: I25 Branch 3718 IFEQ L9766 - false
   * Goal 455. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_75()Z: I38 Branch 3719 IFEQ L9768 - false
   * Goal 456. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_75()Z: I51 Branch 3720 IFEQ L9770 - false
   * Goal 457. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_75()Z: I64 Branch 3721 IFEQ L9772 - false
   * Goal 458. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_75()Z: I77 Branch 3722 IFEQ L9774 - false
   * Goal 459. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_121()Z: I7 Branch 3723 IFEQ L9786 - false
   * Goal 460. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_120()Z: I7 Branch 3724 IFEQ L9793 - false
   * Goal 461. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_119()Z: I7 Branch 3727 IFEQ L9806 - false
   * Goal 462. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_118()Z: I8 Branch 3728 IFEQ L9813 - false
   * Goal 463. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_24()Z: I7 Branch 3731 IFEQ L9826 - false
   * Goal 464. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_117()Z: I8 Branch 3732 IFEQ L9833 - false
   * Goal 465. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_116()Z: I7 Branch 3735 IFEQ L9846 - false
   * Goal 466. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_91()Z: I12 Branch 3736 IFEQ L9855 - false
   * Goal 467. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_91()Z: I26 Branch 3737 IFEQ L9857 - false
   * Goal 468. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_91()Z: I39 Branch 3738 IFEQ L9859 - false
   * Goal 469. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_91()Z: I52 Branch 3739 IFEQ L9861 - false
   * Goal 470. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_91()Z: I65 Branch 3740 IFEQ L9863 - false
   * Goal 471. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_91()Z: I78 Branch 3741 IFEQ L9865 - false
   * Goal 472. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_91()Z: I91 Branch 3742 IFEQ L9867 - false
   * Goal 473. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_78()Z: I8 Branch 3745 IFEQ L9892 - false
   * Goal 474. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_65()Z: I7 Branch 3750 IFEQ L9915 - false
   * Goal 475. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_278()Z: I8 Branch 3752 IFEQ L9930 - false
   * Goal 476. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_277()Z: I8 Branch 3756 IFEQ L9946 - false
   * Goal 477. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_266()Z: I12 Branch 3760 IFEQ L9964 - false
   * Goal 478. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_266()Z: I25 Branch 3761 IFEQ L9966 - false
   * Goal 479. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_267()Z: I7 Branch 3765 IFEQ L9987 - false
   * Goal 480. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_100()Z: I8 Branch 3767 IFEQ L9999 - false
   * Goal 481. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_99()Z: I8 Branch 3778 IFEQ L10038 - false
   * Goal 482. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_21()Z: I8 Branch 3782 IFEQ L10054 - false
   * Goal 483. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_73()Z: I12 Branch 3784 IFEQ L10066 - false
   * Goal 484. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_73()Z: I25 Branch 3785 IFEQ L10068 - false
   * Goal 485. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_73()Z: I38 Branch 3786 IFEQ L10070 - false
   * Goal 486. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_20()Z: I7 Branch 3787 IFEQ L10079 - false
   * Goal 487. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_19()Z: I7 Branch 3788 IFEQ L10086 - false
   * Goal 488. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_255()Z: I7 Branch 3789 IFEQ L10093 - false
   * Goal 489. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_254()Z: I7 Branch 3790 IFEQ L10100 - false
   * Goal 490. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_235()Z: I12 Branch 3791 IFEQ L10109 - false
   * Goal 491. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_235()Z: I25 Branch 3792 IFEQ L10111 - false
   * Goal 492. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_235()Z: I38 Branch 3793 IFEQ L10113 - false
   * Goal 493. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_253()Z: I13 Branch 3794 IFEQ L10124 - false
   * Goal 494. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_253()Z: I27 Branch 3795 IFEQ L10126 - false
   * Goal 495. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_198()Z: I8 Branch 3797 IFEQ L10137 - false
   * Goal 496. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_18()Z: I7 Branch 3802 IFEQ L10162 - false
   * Goal 497. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_197()Z: I8 Branch 3807 IFEQ L10187 - false
   * Goal 498. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_229()Z: I7 Branch 3809 IFEQ L10197 - false
   * Goal 499. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_17()Z: I13 Branch 3810 IFEQ L10206 - false
   * Goal 500. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_17()Z: I26 Branch 3811 IFEQ L10208 - false
   * Goal 501. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_17()Z: I39 Branch 3812 IFEQ L10210 - false
   * Goal 502. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_228()Z: I7 Branch 3814 IFEQ L10222 - false
   * Goal 503. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_227()Z: I7 Branch 3815 IFEQ L10229 - false
   * Goal 504. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_219()Z: I12 Branch 3816 IFEQ L10238 - false
   * Goal 505. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_219()Z: I25 Branch 3817 IFEQ L10240 - false
   * Goal 506. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_219()Z: I38 Branch 3818 IFEQ L10242 - false
   * Goal 507. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_219()Z: I51 Branch 3819 IFEQ L10244 - false
   * Goal 508. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_226()Z: I13 Branch 3820 IFEQ L10256 - false
   * Goal 509. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_226()Z: I27 Branch 3821 IFEQ L10258 - false
   * Goal 510. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_216()Z: I7 Branch 3830 IFEQ L10300 - false
   * Goal 511. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_213()Z: I7 Branch 3835 IFEQ L10330 - false
   * Goal 512. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_207()Z: I7 Branch 3837 IFEQ L10345 - false
   * Goal 513. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_202()Z: I7 Branch 3841 IFEQ L10370 - false
   * Goal 514. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_195()Z: I7 Branch 3845 IFEQ L10395 - false
   * Goal 515. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_186()Z: I7 Branch 3851 IFEQ L10427 - false
   * Goal 516. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_169()Z: I7 Branch 3855 IFEQ L10452 - false
   * Goal 517. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_151()Z: I7 Branch 3861 IFEQ L10483 - false
   * Goal 518. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_143()Z: I7 Branch 3863 IFEQ L10498 - false
   * Goal 519. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_136()Z: I7 Branch 3865 IFEQ L10513 - false
   * Goal 520. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_126()Z: I7 Branch 3867 IFEQ L10528 - false
   * Goal 521. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_96()Z: I7 Branch 3869 IFEQ L10543 - false
   * Goal 522. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_69()Z: I13 Branch 3871 IFEQ L10557 - false
   * Goal 523. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_69()Z: I27 Branch 3872 IFEQ L10559 - false
   * Goal 524. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_69()Z: I41 Branch 3873 IFEQ L10561 - false
   * Goal 525. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_69()Z: I55 Branch 3874 IFEQ L10563 - false
   * Goal 526. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_69()Z: I69 Branch 3875 IFEQ L10565 - false
   * Goal 527. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_69()Z: I83 Branch 3876 IFEQ L10567 - false
   * Goal 528. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_69()Z: I97 Branch 3877 IFEQ L10569 - false
   * Goal 529. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_69()Z: I111 Branch 3878 IFEQ L10571 - false
   * Goal 530. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_69()Z: I125 Branch 3879 IFEQ L10573 - false
   * Goal 531. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_69()Z: I139 Branch 3880 IFEQ L10575 - false
   * Goal 532. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_69()Z: I153 Branch 3881 IFEQ L10577 - false
   * Goal 533. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_69()Z: I167 Branch 3882 IFEQ L10579 - false
   * Goal 534. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_16()Z: I7 Branch 3883 IFEQ L10597 - false
   * Goal 535. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_70()Z: I7 Branch 3885 IFEQ L10607 - false
   * Goal 536. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_15()Z: I8 Branch 3891 IFEQ L10644 - false
   * Goal 537. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_80()Z: I8 Branch 3893 IFEQ L10654 - false
   * Goal 538. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_104()Z: I7 Branch 3895 IFEQ L10669 - true
   * Goal 539. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_104()Z: I7 Branch 3895 IFEQ L10669 - false
   * Goal 540. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_76()Z: I13 Branch 3896 IFEQ L10678 - false
   * Goal 541. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_76()Z: I26 Branch 3897 IFEQ L10680 - true
   * Goal 542. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_76()Z: I26 Branch 3897 IFEQ L10680 - false
   * Goal 543. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_74()Z: I13 Branch 3899 IFEQ L10697 - false
   * Goal 544. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_74()Z: I27 Branch 3900 IFEQ L10699 - false
   * Goal 545. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_74()Z: I41 Branch 3901 IFEQ L10701 - false
   * Goal 546. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_74()Z: I55 Branch 3902 IFEQ L10703 - false
   * Goal 547. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_74()Z: I69 Branch 3903 IFEQ L10705 - false
   * Goal 548. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_74()Z: I83 Branch 3904 IFEQ L10707 - false
   * Goal 549. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_74()Z: I97 Branch 3905 IFEQ L10709 - false
   * Goal 550. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_74()Z: I111 Branch 3906 IFEQ L10711 - false
   * Goal 551. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_11()Z: I8 Branch 3909 IFEQ L10735 - true
   * Goal 552. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_11()Z: I21 Branch 3910 IFEQ L10738 - false
   * Goal 553. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_12()Z: I7 Branch 3920 IFEQ L10796 - false
   * Goal 554. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_68()Z: I8 Branch 3926 IFEQ L10832 - false
   * Goal 555. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3_13()Z: I8 Branch 3930 IFEQ L10853 - false
   * Goal 556. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_123()Z: I8 Branch 3933 IFEQ L10868 - true
   * Goal 557. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_123()Z: I8 Branch 3933 IFEQ L10868 - false
   * Goal 558. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_123()Z: I25 Branch 3934 IFEQ L10873 - false
   * Goal 559. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_3R_123()Z: I43 Branch 3935 IFEQ L10877 - false
   * Goal 560. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_consume_token(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I11 Branch 3936 IFNULL L10939 - false
   * Goal 561. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_consume_token(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I48 Branch 3937 IF_ICMPLT L10947 - false
   * Goal 562. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_consume_token(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I56 Branch 3938 IF_ICMPGT L10947 - true
   * Goal 563. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_consume_token(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I56 Branch 3938 IF_ICMPGT L10947 - false
   * Goal 564. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_consume_token(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I64 Branch 3939 IFNULL L10948 - false
   * Goal 565. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_consume_token(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I74 Branch 3940 IF_ICMPNE L10954 - true
   * Goal 566. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_consume_token(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I74 Branch 3940 IF_ICMPNE L10954 - false
   * Goal 567. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_scan_token(I)Z: I9 Branch 3941 IF_ACMPNE L10970 - true
   * Goal 568. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_scan_token(I)Z: I26 Branch 3942 IFNONNULL L10972 - true
   * Goal 569. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_scan_token(I)Z: I75 Branch 3943 IF_ICMPEQ L10981 - true
   * Goal 570. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_scan_token(I)Z: I75 Branch 3943 IF_ICMPEQ L10981 - false
   * Goal 571. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_scan_token(I)Z: I87 Branch 3944 IFNE L10984 - true
   * Goal 572. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_scan_token(I)Z: I87 Branch 3944 IFNE L10984 - false
   * Goal 573. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_scan_token(I)Z: I95 Branch 3945 IF_ACMPNE L10984 - false
   * Goal 574. com.soops.CEN4010.JMCA.JParser.JavaParser.getToken(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I7 Branch 3947 IFEQ L11001 - false
   * Goal 575. com.soops.CEN4010.JMCA.JParser.JavaParser.getToken(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I29 Branch 3948 IF_ICMPGE L11002 - true
   * Goal 576. com.soops.CEN4010.JMCA.JParser.JavaParser.getToken(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I29 Branch 3948 IF_ICMPGE L11002 - false
   * Goal 577. com.soops.CEN4010.JMCA.JParser.JavaParser.getToken(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I37 Branch 3949 IFNULL L11003 - false
   * Goal 578. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_ntk()I: I11 Branch 3950 IFNONNULL L11013 - true
   * Goal 579. com.soops.CEN4010.JMCA.JParser.JavaParser.generateParseException()Lcom/soops/CEN4010/JMCA/JParser/ParseException;: I22 Branch 3951 IFNE L11023 - true
   */

  @Test
  public void test90()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      charArray0[3] = 'm';
      charArray0[4] = 'm';
      charArray0[5] = '[';
      charArray0[6] = 'm';
      charArray0[7] = 'm';
      charArray0[8] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'m', 'm', 'm', 'm', 'm', '[', 'm', 'm', '['}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaParser javaParser0 = new JavaParser((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'m', 'm', 'm', 'm', 'm', '[', 'm', 'm', '['}, charArray0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try {
        javaParser0.VariableInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 9.  Encountered: [
         //
      }
  }

  //Test case number: 91
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.SingleMemberAnnotation()V: I71 Branch 2858 IFEQ L6190 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.SingleMemberAnnotation()V: I99 Branch 2859 IFEQ L6196 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.SingleMemberAnnotation()V: I131 Branch 2861 IFEQ L6216 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_consume_token(I)Lcom/soops/CEN4010/JMCA/JParser/Token;: I11 Branch 3936 IFNULL L10939 - true
   */

  @Test
  public void test91()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try {
        javaParser0.SingleMemberAnnotation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 92
  /*
   * 8 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.<init>()V: root-Branch
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet.isStatic(I)Z: I8 Branch 3955 IFEQ L65 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.FieldDeclaration(I)V: I105 Branch 458 IFEQ L1317 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.FieldDeclaration(I)V: I133 Branch 459 IFEQ L1323 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.FieldDeclaration(I)V: I165 Branch 461 IFEQ L1343 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I104 Branch 916 IFEQ L2103 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I132 Branch 917 IFEQ L2109 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.Type()V: I164 Branch 919 IFEQ L2129 - true
   */

  @Test
  public void test92()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isStatic(671);
      assertTrue(boolean0);
      assertEquals(4096, javaParser_ModifierSet0.STRICTFP);
      assertEquals(256, javaParser_ModifierSet0.TRANSIENT);
      assertEquals(2, javaParser_ModifierSet0.PROTECTED);
      assertEquals(64, javaParser_ModifierSet0.SYNCHRONIZED);
      assertEquals(512, javaParser_ModifierSet0.VOLATILE);
      assertEquals(16, javaParser_ModifierSet0.STATIC);
      assertEquals(8, javaParser_ModifierSet0.ABSTRACT);
      assertEquals(32, javaParser_ModifierSet0.FINAL);
      assertEquals(128, javaParser_ModifierSet0.NATIVE);
      assertEquals(4, javaParser_ModifierSet0.PRIVATE);
      assertEquals(1, javaParser_ModifierSet0.PUBLIC);
      
      // Undeclared exception!
      try {
        javaParser0.FieldDeclaration(4422);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 93
  /*
   * 6 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.<init>(Ljava/io/Reader;)V: root-Branch
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I192 Branch 1471 IFEQ L4073 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I220 Branch 1472 IFEQ L4079 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.PrimarySuffix()V: I252 Branch 1474 IFEQ L4099 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_scan_token(I)Z: I9 Branch 3941 IF_ACMPNE L10970 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_scan_token(I)Z: I26 Branch 3942 IFNONNULL L10972 - false
   */

  @Test
  public void test93()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try {
        javaParser0.PrimarySuffix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 94
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.<init>(Ljava/lang/String;)V: root-Branch
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.<init>(Ljava/io/InputStream;)V: root-Branch
   */

  @Test
  public void test94()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("         java JavaParser inputfile");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
  }

  //Test case number: 95
  /*
   * 29 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParser.<init>(Lcom/soops/CEN4010/JMCA/JParser/JavaParserTokenManager;)V: root-Branch
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParser.main([Ljava/lang/String;)V: I11 Branch 1 IFNE L121 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParser.main([Ljava/lang/String;)V: I36 Branch 2 IF_ICMPNE L125 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParser.AndExpression()V: I95 Branch 1112 IFEQ L2992 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParser.AndExpression()V: I123 Branch 1113 IFEQ L2998 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParser.AndExpression()V: I155 Branch 1115 IFEQ L3018 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParser.EqualityExpression()V: I145 Branch 1125 IFEQ L3054 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParser.EqualityExpression()V: I173 Branch 1126 IFEQ L3060 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParser.EqualityExpression()V: I205 Branch 1128 IFEQ L3080 - true
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParser.InstanceOfExpression()V: I85 Branch 1133 IFEQ L3102 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParser.InstanceOfExpression()V: I113 Branch 1134 IFEQ L3108 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParser.InstanceOfExpression()V: I145 Branch 1136 IFEQ L3128 - true
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParser.RelationalExpression()V: I169 Branch 1150 IFEQ L3172 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParser.RelationalExpression()V: I197 Branch 1151 IFEQ L3178 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParser.RelationalExpression()V: I229 Branch 1153 IFEQ L3198 - true
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParser.ShiftExpression()V: I144 Branch 1161 IFEQ L3234 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParser.ShiftExpression()V: I172 Branch 1162 IFEQ L3240 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParser.ShiftExpression()V: I204 Branch 1164 IFEQ L3260 - true
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParser.AdditiveExpression()V: I145 Branch 1174 IFEQ L3296 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParser.AdditiveExpression()V: I173 Branch 1175 IFEQ L3302 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParser.AdditiveExpression()V: I205 Branch 1177 IFEQ L3322 - true
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParser.MultiplicativeExpression()V: I157 Branch 1189 IFEQ L3362 - false
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParser.MultiplicativeExpression()V: I185 Branch 1190 IFEQ L3368 - false
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParser.MultiplicativeExpression()V: I217 Branch 1192 IFEQ L3388 - true
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I26 Branch 1193 IF_ICMPNE L3400 - false
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I173 Branch 1288 IFEQ L3452 - false
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I201 Branch 1289 IFEQ L3458 - false
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParser.UnaryExpression()V: I233 Branch 1291 IFEQ L3478 - true
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParser.jj_ntk()I: I11 Branch 3950 IFNONNULL L11013 - false
   */

  @Test
  public void test95()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JavaParser.main(stringArray0);
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try {
        javaParser0.AndExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
