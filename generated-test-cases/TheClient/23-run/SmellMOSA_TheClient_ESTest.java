/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 16 14:14:14 GMT 2015
 */

package org.quickserver.net.server;

import static org.junit.Assert.*;
import org.junit.Test;
import java.net.Socket;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.junit.runner.RunWith;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 1 covered goal:
   * Goal 1. org.quickserver.net.server.TheClient.setTimeout(I)V: root-Branch
   */

  @Test
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertNotNull(theClient0);
      assertEquals(0, theClient0.getTimeout());
      assertFalse(theClient0.getTrusted());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertTrue(theClient0.getCommunicationLogging());
      assertNull(theClient0.getTimeoutMsg());
      assertNull(theClient0.getMaxConnectionMsg());
      assertNull(theClient0.getMaxAuthTryMsg());
      
      theClient0.setTimeout(124);
      assertFalse(theClient0.getTrusted());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertTrue(theClient0.getCommunicationLogging());
      assertNull(theClient0.getTimeoutMsg());
      assertEquals(124, theClient0.getTimeout());
      assertNull(theClient0.getMaxConnectionMsg());
      assertNull(theClient0.getMaxAuthTryMsg());
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * Goal 1. org.quickserver.net.server.TheClient.setMaxConnectionMsg(Ljava/lang/String;)V: root-Branch
   */

  @Test
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertNotNull(theClient0);
      assertTrue(theClient0.getCommunicationLogging());
      assertNull(theClient0.getTimeoutMsg());
      assertEquals(0, theClient0.getTimeout());
      assertNull(theClient0.getMaxConnectionMsg());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertFalse(theClient0.getTrusted());
      
      theClient0.setMaxConnectionMsg("GaH't set DataType.IN mode to BYTE when ClientComman^HandleF is notset!");
      assertTrue(theClient0.getCommunicationLogging());
      assertNull(theClient0.getTimeoutMsg());
      assertEquals(0, theClient0.getTimeout());
      assertEquals("GaH't set DataType.IN mode to BYTE when ClientComman^HandleF is notset!", theClient0.getMaxConnectionMsg());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertFalse(theClient0.getTrusted());
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * Goal 1. org.quickserver.net.server.TheClient.getClientEvent()Lorg/quickserver/net/server/ClientEvent;: root-Branch
   */

  @Test
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertNotNull(theClient0);
      assertNull(theClient0.getMaxConnectionMsg());
      assertNull(theClient0.getTimeoutMsg());
      assertFalse(theClient0.getTrusted());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, theClient0.getTimeout());
      
      ClientEvent clientEvent0 = theClient0.getClientEvent();
      assertNotNull(clientEvent0);
      assertNull(theClient0.getMaxConnectionMsg());
      assertNull(theClient0.getTimeoutMsg());
      assertFalse(theClient0.getTrusted());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, theClient0.getTimeout());
      assertEquals("(ClientEvent-Run Blocking)", clientEvent0.toString());
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * Goal 1. org.quickserver.net.server.TheClient.getTimeout()I: root-Branch
   */

  @Test
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertNotNull(theClient0);
      assertEquals(0, theClient0.getMaxAuthTry());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertFalse(theClient0.getTrusted());
      assertEquals(0, theClient0.getTimeout());
      assertNull(theClient0.getMaxConnectionMsg());
      assertNull(theClient0.getTimeoutMsg());
      assertTrue(theClient0.getCommunicationLogging());
      
      int int0 = theClient0.getTimeout();
      assertEquals(0, int0);
      assertEquals(0, theClient0.getMaxAuthTry());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertFalse(theClient0.getTrusted());
      assertEquals(0, theClient0.getTimeout());
      assertNull(theClient0.getMaxConnectionMsg());
      assertNull(theClient0.getTimeoutMsg());
      assertTrue(theClient0.getCommunicationLogging());
  }

  //Test case number: 4
  /*
   * 3 covered goals:
   * Goal 1. org.quickserver.net.server.TheClient.setSocketChannel(Ljava/nio/channels/SocketChannel;)V: root-Branch
   * Goal 2. org.quickserver.net.server.TheClient.getSocketChannel()Ljava/nio/channels/SocketChannel;: root-Branch
   * Goal 3. org.quickserver.net.server.TheClient.getSocket()Ljava/net/Socket;: root-Branch
   */

  @Test
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertNotNull(theClient0);
      assertEquals(0, theClient0.getTimeout());
      assertNull(theClient0.getMaxConnectionMsg());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertFalse(theClient0.getTrusted());
      assertNull(theClient0.getTimeoutMsg());
      assertTrue(theClient0.getCommunicationLogging());
      
      Socket socket0 = theClient0.getSocket();
      assertNull(socket0);
      assertEquals(0, theClient0.getTimeout());
      assertNull(theClient0.getMaxConnectionMsg());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertFalse(theClient0.getTrusted());
      assertNull(theClient0.getTimeoutMsg());
      assertTrue(theClient0.getCommunicationLogging());
      
      SocketChannel socketChannel0 = theClient0.getSocketChannel();
      assertNull(socketChannel0);
      assertEquals(0, theClient0.getTimeout());
      assertNull(theClient0.getMaxConnectionMsg());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertFalse(theClient0.getTrusted());
      assertNull(theClient0.getTimeoutMsg());
      assertTrue(theClient0.getCommunicationLogging());
      
      theClient0.setSocketChannel((SocketChannel) null);
      assertEquals(0, theClient0.getTimeout());
      assertNull(theClient0.getMaxConnectionMsg());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertFalse(theClient0.getTrusted());
      assertNull(theClient0.getTimeoutMsg());
      assertTrue(theClient0.getCommunicationLogging());
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * Goal 1. org.quickserver.net.server.TheClient.getMaxAuthTryMsg()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertNotNull(theClient0);
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertFalse(theClient0.getTrusted());
      assertNull(theClient0.getMaxConnectionMsg());
      assertNull(theClient0.getTimeoutMsg());
      assertEquals(0, theClient0.getTimeout());
      
      String string0 = theClient0.getMaxAuthTryMsg();
      assertNull(string0);
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertFalse(theClient0.getTrusted());
      assertNull(theClient0.getMaxConnectionMsg());
      assertNull(theClient0.getTimeoutMsg());
      assertEquals(0, theClient0.getTimeout());
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * Goal 1. org.quickserver.net.server.TheClient.setClientExtendedEventHandler(Lorg/quickserver/net/server/ClientExtendedEventHandler;)V: root-Branch
   * Goal 2. org.quickserver.net.server.TheClient.getClientExtendedEventHandler()Lorg/quickserver/net/server/ClientExtendedEventHandler;: root-Branch
   */

  @Test
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertNotNull(theClient0);
      assertNull(theClient0.getMaxConnectionMsg());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
      assertNull(theClient0.getTimeoutMsg());
      assertEquals(0, theClient0.getTimeout());
      
      ClientExtendedEventHandler clientExtendedEventHandler0 = theClient0.getClientExtendedEventHandler();
      assertNull(clientExtendedEventHandler0);
      assertNull(theClient0.getMaxConnectionMsg());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
      assertNull(theClient0.getTimeoutMsg());
      assertEquals(0, theClient0.getTimeout());
      
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      assertNull(theClient0.getMaxConnectionMsg());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
      assertNull(theClient0.getTimeoutMsg());
      assertEquals(0, theClient0.getTimeout());
  }

  //Test case number: 7
  /*
   * 7 covered goals:
   * Goal 1. org.quickserver.net.server.TheClient.getClientBinaryHandler()Lorg/quickserver/net/server/ClientBinaryHandler;: root-Branch
   * Goal 2. org.quickserver.net.server.TheClient.getClientAuthenticationHandler()Lorg/quickserver/net/server/ClientAuthenticationHandler;: root-Branch
   * Goal 3. org.quickserver.net.server.TheClient.setClientWriteHandler(Lorg/quickserver/net/server/ClientWriteHandler;)V: root-Branch
   * Goal 4. org.quickserver.net.server.TheClient.getClientWriteHandler()Lorg/quickserver/net/server/ClientWriteHandler;: root-Branch
   * Goal 5. org.quickserver.net.server.TheClient.setClientObjectHandler(Lorg/quickserver/net/server/ClientObjectHandler;)V: root-Branch
   * Goal 6. org.quickserver.net.server.TheClient.setClientBinaryHandler(Lorg/quickserver/net/server/ClientBinaryHandler;)V: root-Branch
   * Goal 7. org.quickserver.net.server.TheClient.getClientObjectHandler()Lorg/quickserver/net/server/ClientObjectHandler;: root-Branch
   */

  @Test
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertNotNull(theClient0);
      assertEquals(0, theClient0.getMaxAuthTry());
      assertNull(theClient0.getTimeoutMsg());
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, theClient0.getTimeout());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertFalse(theClient0.getTrusted());
      assertNull(theClient0.getMaxConnectionMsg());
      
      ClientObjectHandler clientObjectHandler0 = theClient0.getClientObjectHandler();
      assertNull(clientObjectHandler0);
      assertEquals(0, theClient0.getMaxAuthTry());
      assertNull(theClient0.getTimeoutMsg());
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, theClient0.getTimeout());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertFalse(theClient0.getTrusted());
      assertNull(theClient0.getMaxConnectionMsg());
      
      ClientBinaryHandler clientBinaryHandler0 = theClient0.getClientBinaryHandler();
      assertNull(clientBinaryHandler0);
      assertEquals(0, theClient0.getMaxAuthTry());
      assertNull(theClient0.getTimeoutMsg());
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, theClient0.getTimeout());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertFalse(theClient0.getTrusted());
      assertNull(theClient0.getMaxConnectionMsg());
      
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      assertEquals(0, theClient0.getMaxAuthTry());
      assertNull(theClient0.getTimeoutMsg());
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, theClient0.getTimeout());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertFalse(theClient0.getTrusted());
      assertNull(theClient0.getMaxConnectionMsg());
      
      ClientAuthenticationHandler clientAuthenticationHandler0 = theClient0.getClientAuthenticationHandler();
      assertNull(clientAuthenticationHandler0);
      assertEquals(0, theClient0.getMaxAuthTry());
      assertNull(theClient0.getTimeoutMsg());
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, theClient0.getTimeout());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertFalse(theClient0.getTrusted());
      assertNull(theClient0.getMaxConnectionMsg());
      
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      assertEquals(0, theClient0.getMaxAuthTry());
      assertNull(theClient0.getTimeoutMsg());
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, theClient0.getTimeout());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertFalse(theClient0.getTrusted());
      assertNull(theClient0.getMaxConnectionMsg());
      
      ClientWriteHandler clientWriteHandler0 = theClient0.getClientWriteHandler();
      assertNull(clientWriteHandler0);
      assertEquals(0, theClient0.getMaxAuthTry());
      assertNull(theClient0.getTimeoutMsg());
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, theClient0.getTimeout());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertFalse(theClient0.getTrusted());
      assertNull(theClient0.getMaxConnectionMsg());
      
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      assertEquals(0, theClient0.getMaxAuthTry());
      assertNull(theClient0.getTimeoutMsg());
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, theClient0.getTimeout());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertFalse(theClient0.getTrusted());
      assertNull(theClient0.getMaxConnectionMsg());
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * Goal 1. org.quickserver.net.server.TheClient.getMaxConnectionMsg()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertNotNull(theClient0);
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertFalse(theClient0.getTrusted());
      assertNull(theClient0.getMaxConnectionMsg());
      assertNull(theClient0.getTimeoutMsg());
      assertEquals(0, theClient0.getTimeout());
      
      String string0 = theClient0.getMaxConnectionMsg();
      assertNull(string0);
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertFalse(theClient0.getTrusted());
      assertNull(theClient0.getMaxConnectionMsg());
      assertNull(theClient0.getTimeoutMsg());
      assertEquals(0, theClient0.getTimeout());
  }

  //Test case number: 9
  /*
   * 2 covered goals:
   * Goal 1. org.quickserver.net.server.TheClient.setAuthenticator(Lorg/quickserver/net/server/Authenticator;)V: root-Branch
   * Goal 2. org.quickserver.net.server.TheClient.getAuthenticator()Lorg/quickserver/net/server/Authenticator;: root-Branch
   */

  @Test
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertNotNull(theClient0);
      assertNull(theClient0.getMaxConnectionMsg());
      assertNull(theClient0.getTimeoutMsg());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, theClient0.getTimeout());
      
      Authenticator authenticator0 = theClient0.getAuthenticator();
      assertNull(authenticator0);
      assertNull(theClient0.getMaxConnectionMsg());
      assertNull(theClient0.getTimeoutMsg());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, theClient0.getTimeout());
      
      theClient0.setAuthenticator((Authenticator) null);
      assertNull(theClient0.getMaxConnectionMsg());
      assertNull(theClient0.getTimeoutMsg());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, theClient0.getTimeout());
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * Goal 1. org.quickserver.net.server.TheClient.setMaxAuthTry(I)V: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertNotNull(theClient0);
      assertNull(theClient0.getTimeoutMsg());
      assertNull(theClient0.getMaxConnectionMsg());
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertFalse(theClient0.getTrusted());
      assertEquals(0, theClient0.getTimeout());
      assertNull(theClient0.getMaxAuthTryMsg());
      
      theClient0.setMaxAuthTry(405);
      assertNull(theClient0.getTimeoutMsg());
      assertNull(theClient0.getMaxConnectionMsg());
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
      assertEquals(0, theClient0.getTimeout());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertEquals(405, theClient0.getMaxAuthTry());
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * Goal 1. org.quickserver.net.server.TheClient.getMaxAuthTry()I: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertNotNull(theClient0);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertNull(theClient0.getMaxConnectionMsg());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertEquals(0, theClient0.getTimeout());
      assertNull(theClient0.getTimeoutMsg());
      
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(0, int0);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertNull(theClient0.getMaxConnectionMsg());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertEquals(0, theClient0.getTimeout());
      assertNull(theClient0.getTimeoutMsg());
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * Goal 1. org.quickserver.net.server.TheClient.setMaxAuthTryMsg(Ljava/lang/String;)V: root-Branch
   */

  @Test
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertNotNull(theClient0);
      assertNull(theClient0.getTimeoutMsg());
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertFalse(theClient0.getTrusted());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertNull(theClient0.getMaxConnectionMsg());
      assertEquals(0, theClient0.getTimeout());
      
      theClient0.setMaxAuthTryMsg("Can't set Dataype.IN modeo BY*E when ClientCommandHandler s not set!");
      assertEquals("Can't set Dataype.IN modeo BY*E when ClientCommandHandler s not set!", theClient0.getMaxAuthTryMsg());
      assertNull(theClient0.getTimeoutMsg());
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertFalse(theClient0.getTrusted());
      assertNull(theClient0.getMaxConnectionMsg());
      assertEquals(0, theClient0.getTimeout());
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * Goal 1. org.quickserver.net.server.TheClient.getTrusted()Z: root-Branch
   */

  @Test
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertNotNull(theClient0);
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, theClient0.getTimeout());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertFalse(theClient0.getTrusted());
      assertNull(theClient0.getTimeoutMsg());
      assertNull(theClient0.getMaxConnectionMsg());
      
      boolean boolean0 = theClient0.getTrusted();
      assertFalse(boolean0);
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, theClient0.getTimeout());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertFalse(theClient0.getTrusted());
      assertNull(theClient0.getTimeoutMsg());
      assertNull(theClient0.getMaxConnectionMsg());
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * Goal 1. org.quickserver.net.server.TheClient.getTimeoutMsg()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test14()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertNotNull(theClient0);
      assertEquals(0, theClient0.getMaxAuthTry());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertFalse(theClient0.getTrusted());
      assertEquals(0, theClient0.getTimeout());
      assertNull(theClient0.getMaxConnectionMsg());
      assertNull(theClient0.getTimeoutMsg());
      assertTrue(theClient0.getCommunicationLogging());
      
      String string0 = theClient0.getTimeoutMsg();
      assertNull(string0);
      assertEquals(0, theClient0.getMaxAuthTry());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertFalse(theClient0.getTrusted());
      assertEquals(0, theClient0.getTimeout());
      assertNull(theClient0.getMaxConnectionMsg());
      assertNull(theClient0.getTimeoutMsg());
      assertTrue(theClient0.getCommunicationLogging());
  }

  //Test case number: 15
  /*
   * 14 covered goals:
   * Goal 1. org.quickserver.net.server.TheClient.setClientEventHandler(Lorg/quickserver/net/server/ClientEventHandler;)V: root-Branch
   * Goal 2. org.quickserver.net.server.TheClient.setClientEvent(Lorg/quickserver/net/server/ClientEvent;)V: root-Branch
   * Goal 3. org.quickserver.net.server.TheClient.getClientCommandHandler()Lorg/quickserver/net/server/ClientCommandHandler;: root-Branch
   * Goal 4. org.quickserver.net.server.TheClient.setTimeoutMsg(Ljava/lang/String;)V: root-Branch
   * Goal 5. org.quickserver.net.server.TheClient.setClientAuthenticationHandler(Lorg/quickserver/net/server/ClientAuthenticationHandler;)V: root-Branch
   * Goal 6. org.quickserver.net.server.TheClient.getCommunicationLogging()Z: root-Branch
   * Goal 7. org.quickserver.net.server.TheClient.setCommunicationLogging(Z)V: root-Branch
   * Goal 8. org.quickserver.net.server.TheClient.getClientEventHandler()Lorg/quickserver/net/server/ClientEventHandler;: root-Branch
   * Goal 9. org.quickserver.net.server.TheClient.setSocket(Ljava/net/Socket;)V: root-Branch
   * Goal 10. org.quickserver.net.server.TheClient.setClientData(Lorg/quickserver/net/server/ClientData;)V: root-Branch
   * Goal 11. org.quickserver.net.server.TheClient.getClientData()Lorg/quickserver/net/server/ClientData;: root-Branch
   * Goal 12. org.quickserver.net.server.TheClient.setClientCommandHandler(Lorg/quickserver/net/server/ClientCommandHandler;)V: root-Branch
   * Goal 13. org.quickserver.net.server.TheClient.toString()Ljava/lang/String;: I19 Branch 1 IFNULL L396 - true
   * Goal 14. org.quickserver.net.server.TheClient.toString()Ljava/lang/String;: I19 Branch 1 IFNULL L396 - false
   */

  @Test
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertNotNull(theClient0);
      assertNull(theClient0.getTimeoutMsg());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertNull(theClient0.getMaxConnectionMsg());
      assertEquals(0, theClient0.getTimeout());
      assertFalse(theClient0.getTrusted());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertTrue(theClient0.getCommunicationLogging());
      
      MockSocket mockSocket0 = new MockSocket();
      assertNotNull(mockSocket0);
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isBound());
      
      ClientEventHandler clientEventHandler0 = theClient0.getClientEventHandler();
      assertNull(clientEventHandler0);
      assertNull(theClient0.getTimeoutMsg());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertNull(theClient0.getMaxConnectionMsg());
      assertEquals(0, theClient0.getTimeout());
      assertFalse(theClient0.getTrusted());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertTrue(theClient0.getCommunicationLogging());
      
      theClient0.setClientEventHandler((ClientEventHandler) null);
      assertNull(theClient0.getTimeoutMsg());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertNull(theClient0.getMaxConnectionMsg());
      assertEquals(0, theClient0.getTimeout());
      assertFalse(theClient0.getTrusted());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertTrue(theClient0.getCommunicationLogging());
      
      theClient0.setTimeoutMsg("w9+th-4GeF2`8");
      assertEquals("w9+th-4GeF2`8", theClient0.getTimeoutMsg());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertNull(theClient0.getMaxConnectionMsg());
      assertEquals(0, theClient0.getTimeout());
      assertFalse(theClient0.getTrusted());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertTrue(theClient0.getCommunicationLogging());
      
      theClient0.setSocket((Socket) mockSocket0);
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isBound());
      assertEquals("w9+th-4GeF2`8", theClient0.getTimeoutMsg());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertNull(theClient0.getMaxConnectionMsg());
      assertEquals(0, theClient0.getTimeout());
      assertFalse(theClient0.getTrusted());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertTrue(theClient0.getCommunicationLogging());
      
      TheClient theClient1 = new TheClient();
      assertNotNull(theClient1);
      assertNull(theClient1.getMaxConnectionMsg());
      assertEquals(0, theClient1.getMaxAuthTry());
      assertNull(theClient1.getMaxAuthTryMsg());
      assertFalse(theClient1.getTrusted());
      assertTrue(theClient1.getCommunicationLogging());
      assertNull(theClient1.getTimeoutMsg());
      assertEquals(0, theClient1.getTimeout());
      assertNotSame(theClient1, theClient0);
      assertFalse(theClient1.equals((Object)theClient0));
      
      ClientEvent clientEvent0 = ClientEvent.MAX_CON_BLOCKING;
      assertNotNull(clientEvent0);
      assertEquals("(ClientEvent-Max Connection Blocking)", clientEvent0.toString());
      
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertTrue(boolean0);
      assertEquals("w9+th-4GeF2`8", theClient0.getTimeoutMsg());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertNull(theClient0.getMaxConnectionMsg());
      assertEquals(0, theClient0.getTimeout());
      assertFalse(theClient0.getTrusted());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertTrue(theClient0.getCommunicationLogging());
      assertNotSame(theClient0, theClient1);
      assertFalse(theClient0.equals((Object)theClient1));
      
      theClient1.setClientEvent(clientEvent0);
      assertEquals("(ClientEvent-Max Connection Blocking)", clientEvent0.toString());
      assertNull(theClient1.getMaxConnectionMsg());
      assertEquals(0, theClient1.getMaxAuthTry());
      assertNull(theClient1.getMaxAuthTryMsg());
      assertFalse(theClient1.getTrusted());
      assertTrue(theClient1.getCommunicationLogging());
      assertNull(theClient1.getTimeoutMsg());
      assertEquals(0, theClient1.getTimeout());
      assertNotSame(theClient1, theClient0);
      assertFalse(theClient1.equals((Object)theClient0));
      
      String string0 = theClient1.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Max Connection Blocking)}", string0);
      assertNotNull(string0);
      assertNull(theClient1.getMaxConnectionMsg());
      assertEquals(0, theClient1.getMaxAuthTry());
      assertNull(theClient1.getMaxAuthTryMsg());
      assertFalse(theClient1.getTrusted());
      assertTrue(theClient1.getCommunicationLogging());
      assertNull(theClient1.getTimeoutMsg());
      assertEquals(0, theClient1.getTimeout());
      assertNotSame(theClient1, theClient0);
      assertFalse(theClient1.equals((Object)theClient0));
      
      theClient1.setCommunicationLogging(true);
      assertNull(theClient1.getMaxConnectionMsg());
      assertEquals(0, theClient1.getMaxAuthTry());
      assertNull(theClient1.getMaxAuthTryMsg());
      assertFalse(theClient1.getTrusted());
      assertTrue(theClient1.getCommunicationLogging());
      assertNull(theClient1.getTimeoutMsg());
      assertEquals(0, theClient1.getTimeout());
      assertNotSame(theClient1, theClient0);
      assertFalse(theClient1.equals((Object)theClient0));
      
      ClientData clientData0 = theClient0.getClientData();
      assertNull(clientData0);
      assertEquals("w9+th-4GeF2`8", theClient0.getTimeoutMsg());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertNull(theClient0.getMaxConnectionMsg());
      assertEquals(0, theClient0.getTimeout());
      assertFalse(theClient0.getTrusted());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertTrue(theClient0.getCommunicationLogging());
      assertNotSame(theClient0, theClient1);
      assertFalse(theClient0.equals((Object)theClient1));
      
      String string1 = theClient0.toString();
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string1);
      assertNotNull(string1);
      assertEquals("w9+th-4GeF2`8", theClient0.getTimeoutMsg());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertNull(theClient0.getMaxConnectionMsg());
      assertEquals(0, theClient0.getTimeout());
      assertFalse(theClient0.getTrusted());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertTrue(theClient0.getCommunicationLogging());
      assertNotSame(string1, string0);
      assertNotSame(theClient0, theClient1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(theClient0.equals((Object)theClient1));
      
      theClient1.setClientData((ClientData) null);
      assertNull(theClient1.getMaxConnectionMsg());
      assertEquals(0, theClient1.getMaxAuthTry());
      assertNull(theClient1.getMaxAuthTryMsg());
      assertFalse(theClient1.getTrusted());
      assertTrue(theClient1.getCommunicationLogging());
      assertNull(theClient1.getTimeoutMsg());
      assertEquals(0, theClient1.getTimeout());
      assertNotSame(theClient1, theClient0);
      assertFalse(theClient1.equals((Object)theClient0));
      
      ClientCommandHandler clientCommandHandler0 = theClient0.getClientCommandHandler();
      assertNull(clientCommandHandler0);
      assertEquals("w9+th-4GeF2`8", theClient0.getTimeoutMsg());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertNull(theClient0.getMaxConnectionMsg());
      assertEquals(0, theClient0.getTimeout());
      assertFalse(theClient0.getTrusted());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertTrue(theClient0.getCommunicationLogging());
      assertNotSame(theClient0, theClient1);
      assertFalse(theClient0.equals((Object)theClient1));
      
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      assertEquals("w9+th-4GeF2`8", theClient0.getTimeoutMsg());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertNull(theClient0.getMaxConnectionMsg());
      assertEquals(0, theClient0.getTimeout());
      assertFalse(theClient0.getTrusted());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertTrue(theClient0.getCommunicationLogging());
      assertNotSame(theClient0, theClient1);
      assertFalse(theClient0.equals((Object)theClient1));
      
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      assertNotNull(authenticator0);
      
      theClient1.setClientAuthenticationHandler((ClientAuthenticationHandler) authenticator0);
      assertNull(theClient1.getMaxConnectionMsg());
      assertEquals(0, theClient1.getMaxAuthTry());
      assertNull(theClient1.getMaxAuthTryMsg());
      assertFalse(theClient1.getTrusted());
      assertTrue(theClient1.getCommunicationLogging());
      assertNull(theClient1.getTimeoutMsg());
      assertEquals(0, theClient1.getTimeout());
      assertNotSame(theClient1, theClient0);
      assertFalse(theClient1.equals((Object)theClient0));
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * Goal 1. org.quickserver.net.server.TheClient.setServer(Lorg/quickserver/net/server/QuickServer;)V: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertNotNull(theClient0);
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, theClient0.getTimeout());
      assertNull(theClient0.getMaxConnectionMsg());
      assertNull(theClient0.getTimeoutMsg());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertFalse(theClient0.getTrusted());
      
      QuickServer quickServer0 = new QuickServer();
      assertNotNull(quickServer0);
      assertFalse(quickServer0.isRunningSecure());
      assertNull(quickServer0.getSecurityManagerClass());
      assertEquals(5, quickServer0.getMaxAuthTry());
      assertEquals("-ERR Timeout", quickServer0.getTimeoutMsg());
      assertEquals("17050", quickServer0.getPID());
      assertNull(quickServer0.getClientEventHandler());
      assertEquals("INFO", quickServer0.getConsoleLoggingLevel());
      assertNull(quickServer0.getServerBanner());
      assertNull(quickServer0.getAuthenticator());
      assertNull(quickServer0.getClientExtendedEventHandler());
      assertNull(quickServer0.getClientBinaryHandler());
      assertEquals("2.0.0 RC1", quickServer0.getVersion());
      assertNull(quickServer0.getClientObjectHandler());
      assertEquals("-ERR Max Auth Try Reached", quickServer0.getMaxAuthTryMsg());
      assertEquals("-ERR Server Busy. Max Connection Reached", quickServer0.getMaxConnectionMsg());
      assertEquals("QuickServer", quickServer0.getName());
      assertEquals("\r\n", quickServer0.getNewLine());
      assertNull(quickServer0.getClientWriteHandler());
      assertNull(quickServer0.getClientData());
      assertEquals(100, quickServer0.getRawCommunicationMaxLength());
      assertNull(quickServer0.getApplicationJarPath());
      assertEquals((-1L), quickServer0.getMaxConnection());
      assertTrue(quickServer0.getCommunicationLogging());
      assertFalse(quickServer0.isRawCommunicationLogging());
      assertNull(quickServer0.getConsoleLoggingFormatter());
      assertTrue(quickServer0.getBlockingMode());
      assertNull(quickServer0.getClientAuthenticationHandler());
      assertNull(quickServer0.getClientCommandHandler());
      assertEquals(60000, quickServer0.getTimeout());
      assertTrue(quickServer0.isClosed());
      assertEquals(-1, quickServer0.getServiceState());
      
      theClient0.setServer(quickServer0);
      assertFalse(quickServer0.isRunningSecure());
      assertNull(quickServer0.getSecurityManagerClass());
      assertEquals(5, quickServer0.getMaxAuthTry());
      assertEquals("-ERR Timeout", quickServer0.getTimeoutMsg());
      assertEquals("17050", quickServer0.getPID());
      assertNull(quickServer0.getClientEventHandler());
      assertEquals("INFO", quickServer0.getConsoleLoggingLevel());
      assertNull(quickServer0.getServerBanner());
      assertNull(quickServer0.getAuthenticator());
      assertNull(quickServer0.getClientExtendedEventHandler());
      assertNull(quickServer0.getClientBinaryHandler());
      assertEquals("2.0.0 RC1", quickServer0.getVersion());
      assertNull(quickServer0.getClientObjectHandler());
      assertEquals("-ERR Max Auth Try Reached", quickServer0.getMaxAuthTryMsg());
      assertEquals("-ERR Server Busy. Max Connection Reached", quickServer0.getMaxConnectionMsg());
      assertEquals("QuickServer", quickServer0.getName());
      assertEquals("\r\n", quickServer0.getNewLine());
      assertNull(quickServer0.getClientWriteHandler());
      assertNull(quickServer0.getClientData());
      assertEquals(100, quickServer0.getRawCommunicationMaxLength());
      assertNull(quickServer0.getApplicationJarPath());
      assertEquals((-1L), quickServer0.getMaxConnection());
      assertTrue(quickServer0.getCommunicationLogging());
      assertFalse(quickServer0.isRawCommunicationLogging());
      assertNull(quickServer0.getConsoleLoggingFormatter());
      assertTrue(quickServer0.getBlockingMode());
      assertNull(quickServer0.getClientAuthenticationHandler());
      assertNull(quickServer0.getClientCommandHandler());
      assertEquals(60000, quickServer0.getTimeout());
      assertTrue(quickServer0.isClosed());
      assertEquals(-1, quickServer0.getServiceState());
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, theClient0.getTimeout());
      assertNull(theClient0.getMaxConnectionMsg());
      assertNull(theClient0.getTimeoutMsg());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertFalse(theClient0.getTrusted());
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * Goal 1. org.quickserver.net.server.TheClient.getServer()Lorg/quickserver/net/server/QuickServer;: root-Branch
   */

  @Test
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertNotNull(theClient0);
      assertEquals(0, theClient0.getMaxAuthTry());
      assertNull(theClient0.getTimeoutMsg());
      assertEquals(0, theClient0.getTimeout());
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertNull(theClient0.getMaxConnectionMsg());
      
      QuickServer quickServer0 = theClient0.getServer();
      assertNull(quickServer0);
      assertEquals(0, theClient0.getMaxAuthTry());
      assertNull(theClient0.getTimeoutMsg());
      assertEquals(0, theClient0.getTimeout());
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
      assertNull(theClient0.getMaxAuthTryMsg());
      assertNull(theClient0.getMaxConnectionMsg());
  }

  //Test case number: 18
  /*
   * 2 covered goals:
   * Goal 1. org.quickserver.net.server.TheClient.setTrusted(Z)V: root-Branch
   * Goal 2. org.quickserver.net.server.TheClient.<init>()V: root-Branch
   */

  @Test
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertNotNull(theClient0);
      assertNull(theClient0.getTimeoutMsg());
      assertTrue(theClient0.getCommunicationLogging());
      assertNull(theClient0.getMaxConnectionMsg());
      assertFalse(theClient0.getTrusted());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertEquals(0, theClient0.getTimeout());
      assertNull(theClient0.getMaxAuthTryMsg());
      
      theClient0.setTrusted(false);
      assertNull(theClient0.getTimeoutMsg());
      assertTrue(theClient0.getCommunicationLogging());
      assertNull(theClient0.getMaxConnectionMsg());
      assertFalse(theClient0.getTrusted());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertEquals(0, theClient0.getTimeout());
      assertNull(theClient0.getMaxAuthTryMsg());
  }
}
