/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 18 15:30:47 GMT 2015
 */

package weka.core.stemmers;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 1 covered goal:
   * Goal 1. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I680 Branch 82 IF_ICMPEQ L550 - true
   */

  @Test
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("String should not finish with ");
      assertEquals("string should not finish with ", string0);
      assertNotNull(string0);
  }

  //Test case number: 1
  /*
   * 4 covered goals:
   * Goal 1. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I946 Branch 98 IF_ICMPEQ L596 - false
   * Goal 2. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I958 Branch 99 IF_ICMPEQ L596 - false
   * Goal 3. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I970 Branch 100 IF_ICMPEQ L596 - false
   * Goal 4. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I982 Branch 101 IF_ICMPNE L596 - true
   */

  @Test
  public void test01()  throws Throwable  {
      TechnicalInformation.Field technicalInformation_Field0 = TechnicalInformation.Field.LANGUAGE;
      assertEquals(TechnicalInformation.Field.LANGUAGE, technicalInformation_Field0);
      assertEquals("language", technicalInformation_Field0.getDisplay());
      assertEquals(32, technicalInformation_Field0.ordinal());
      assertEquals("The language the document is in.", technicalInformation_Field0.getComment());
      assertEquals("LANGUAGE", technicalInformation_Field0.name());
      assertEquals("language", technicalInformation_Field0.toString());
      
      String string0 = technicalInformation_Field0.getComment();
      assertEquals("The language the document is in.", string0);
      assertEquals("language", technicalInformation_Field0.getDisplay());
      assertEquals(32, technicalInformation_Field0.ordinal());
      assertEquals("The language the document is in.", technicalInformation_Field0.getComment());
      assertEquals("LANGUAGE", technicalInformation_Field0.name());
      assertEquals("language", technicalInformation_Field0.toString());
      assertNotNull(string0);
      
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string1 = lovinsStemmer0.stemString("The language the document is in.");
      assertEquals("th langu th docum is in.", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      String string2 = lovinsStemmer0.stemString("th langu th docum is in.");
      assertEquals("th langu th docum is in.", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * Goal 1. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I22 Branch 148 IFGT L705 - true
   */

  @Test
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("<q~,_M|P30Dd");
      assertEquals("<q~,_m|p30d", string0);
      assertNotNull(string0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * Goal 1. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I866 Branch 201 IF_ICMPEQ L899 - true
   */

  @Test
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("ionet");
      assertEquals("ionet", string0);
      assertNotNull(string0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * Goal 1. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I57 Branch 153 IFGT L705 - true
   */

  @Test
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("{Jg}k [qSY1LWPP\"");
      assertEquals("{jg}k [qsy1lwp\"", string0);
      assertNotNull(string0);
  }

  //Test case number: 5
  /*
   * 4 covered goals:
   * Goal 1. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I1499 Branch 138 IF_ICMPNE L666 - false
   * Goal 2. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I1511 Branch 139 IF_ICMPNE L666 - true
   * Goal 3. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I1544 Branch 142 IF_ICMPNE L666 - false
   * Goal 4. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I1556 Branch 143 IF_ICMPNE L666 - true
   */

  @Test
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      TechnicalInformation.Field technicalInformation_Field0 = TechnicalInformation.Field.NOTE;
      String string0 = technicalInformation_Field0.getComment();
      assertEquals("Any additional information that can help the reader. The first word should be capitalized.", string0);
      assertNotNull(string0);
      
      String string1 = lovinsStemmer0.stemString("Any additional information that can help the reader. The first word should be capitalized.");
      assertEquals("any addit inform that can help th reader. th first word should be capital.", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      String string2 = lovinsStemmer0.stemString("any addit inform that can help th reader. th first word should be capital.");
      assertEquals("any addit inform that can help th reader. th first word should be capit.", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
  }

  //Test case number: 6
  /*
   * 4 covered goals:
   * Goal 1. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 33 TABLESWITCH L470 Case 82 - true
   * Goal 2. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I804 Branch 89 IF_ICMPEQ L575 - false
   * Goal 3. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I816 Branch 90 IF_ICMPNE L575 - true
   * Goal 4. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I827 Branch 198 IFLE L893 - false
   */

  @Test
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      TechnicalInformation.Field technicalInformation_Field0 = TechnicalInformation.Field.PAGES;
      String string0 = technicalInformation_Field0.getComment();
      assertEquals("One or more page numbers or range of numbers, such as 42--111 or 7,41,73--97 or 43+ (the `+' in this last example indicates pages following that don't form a simple range). To make it easier to maintain Scribe-compatible databases, the standard styles convert a single dash (as in 7-33) to the double dash used in TeX to denote number ranges (as in 7--33).", string0);
      assertNotNull(string0);
      
      String string1 = lovinsStemmer0.stemString("One or more page numbers or range of numbers, such as 42--111 or 7,41,73--97 or 43+ (the `+' in this last example indicates pages following that don't form a simple range). To make it easier to maintain Scribe-compatible databases, the standard styles convert a single dash (as in 7-33) to the double dash used in TeX to denote number ranges (as in 7--33).");
      assertEquals("on or mor pag number or rang of number, such as 42--111 or 7,41,73--97 or 43+ (th `+' in th last exampl indic pag follow that don't form a simpl rang). to mak it eas to maintain scrib-compat databas, th standard styl convers a singl dash (as in 7-33) to th doubl dash us in tic to denot number rang (as in 7--33).", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      String string2 = lovinsStemmer0.stemString("on or mor pag number or rang of number, such as 42--111 or 7,41,73--97 or 43+ (th `+' in th last exampl indic pag follow that don't form a simpl rang). to mak it eas to maintain scrib-compat databas, th standard styl convers a singl dash (as in 7-33) to th doubl dash us in tic to denot number rang (as in 7--33).");
      assertEquals("on or mor pag number or rang of number, such as 42--111 or 7,41,73--97 or 43+ (th `+' in th last exampl ind pag follow that don't form a simpl rang). to mak it ea to maintain scrib-compat datab, th standard styl conver a singl dash (as in 7-33) to th doubl dash us in tic to denot number rang (as in 7--33).", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * Goal 1. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I738 Branch 192 IF_ICMPEQ L872 - true
   */

  @Test
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("dnpher");
      assertEquals("dnpher", string0);
      assertNotNull(string0);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * Goal 1. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I163 Branch 160 IFLE L737 - false
   */

  @Test
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("rpt");
      assertEquals("rb", string0);
      assertNotNull(string0);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * Goal 1. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I738 Branch 85 IF_ICMPEQ L563 - true
   */

  @Test
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("ancies");
      assertEquals("anci", string0);
      assertNotNull(string0);
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * Goal 1. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I420 Branch 174 IFLE L798 - false
   */

  @Test
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("biax");
      assertEquals("biac", string0);
      assertNotNull(string0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * Goal 1. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I307 Branch 168 IF_ICMPEQ L768 - true
   */

  @Test
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("1mIul#U>*snoe");
      assertEquals("1miul#u>*sno", string0);
      assertNotNull(string0);
  }

  //Test case number: 12
  /*
   * 4 covered goals:
   * Goal 1. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I639 Branch 186 IF_ICMPEQ L849 - true
   * Goal 2. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I788 Branch 195 IFLE L885 - false
   * Goal 3. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I797 Branch 196 IFLT L886 - false
   * Goal 4. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I807 Branch 197 IF_ICMPEQ L886 - false
   */

  @Test
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("o>ndcisend");
      assertEquals("o>ndcisens", string0);
      assertNotNull(string0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * Goal 1. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I29 Branch 149 IFGT L705 - true
   */

  @Test
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("Ggg");
      assertEquals("gg", string0);
      assertNotNull(string0);
  }

  //Test case number: 14
  /*
   * 2 covered goals:
   * Goal 1. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I600 Branch 183 IFLE L843 - false
   * Goal 2. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I679 Branch 188 IFLE L861 - false
   */

  @Test
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("qbwydlud");
      assertEquals("qbwydlus", string0);
      assertNotNull(string0);
      
      String string1 = lovinsStemmer0.stemString("qbwydpand");
      assertEquals("qbwydpans", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotNull(string1);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * Goal 1. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I500 Branch 178 IFLE L818 - false
   */

  @Test
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("bicyzuad");
      assertEquals("bicyzuas", string0);
      assertNotNull(string0);
  }

  //Test case number: 16
  /*
   * 4 covered goals:
   * Goal 1. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 27 TABLESWITCH L470 Case 76 - true
   * Goal 2. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I546 Branch 72 IF_ICMPEQ L534 - false
   * Goal 3. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I558 Branch 73 IF_ICMPEQ L534 - false
   * Goal 4. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I570 Branch 74 IF_ICMPNE L534 - true
   */

  @Test
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("icide");
      assertEquals("ic", string0);
      assertNotNull(string0);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * Goal 1. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I235 Branch 53 IF_ICMPLE L479 - true
   */

  @Test
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("The database keyof the entry being crCss ref'reced. Any fi.lds tha are misng from #^e urrent record Se inherited from theField being sross referenced.");
      assertEquals("th databas keyof th entr being crcs ref'rec. any fi.ld th ar misng from #^e urrent record se inherit from thefield being sros refer.", string0);
      assertNotNull(string0);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * Goal 1. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I460 Branch 176 IFLE L808 - false
   */

  @Test
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      TechnicalInformation.Field technicalInformation_Field0 = TechnicalInformation.Field.MONTH;
      String string0 = technicalInformation_Field0.getComment();
      assertEquals("The month in which the work was published or, for an unpublished work, in which it was written. You should use the standard three-letter abbreviation, as described in Appendix B.1.3 of the LaTeX book.", string0);
      assertNotNull(string0);
      
      String string1 = lovinsStemmer0.stemString("The month in which the work was published or, for an unpublished work, in which it was written. You should use the standard three-letter abbreviation, as described in Appendix B.1.3 of the LaTeX book.");
      assertEquals("th month in which th work wa publ or, for an unpubl work, in which it wa writ. you should us th standard thre-letter abbrevi, as describ in appendic b.1.3 of th latic book.", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotNull(string1);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * Goal 1. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I728 Branch 191 IFLT L872 - true
   */

  @Test
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("Name(s) of ditor(s), typed as indicaed in the LaTeX book' If here is also an author field, hen theeitor field gives the editor ofthe bokKor collection in hich the reference appears.");
      assertEquals("nam(s) of dit(s), typ as indica in th latic book' if hes is als an author field, hen theeit field giv th edit ofth bokkor collect in hich th refer appear.", string0);
      assertNotNull(string0);
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * Goal 1. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I629 Branch 185 IFLT L849 - true
   */

  @Test
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("end");
      assertEquals("ens", string0);
      assertNotNull(string0);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * Goal 1. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I277 Branch 55 IF_ICMPEQ L489 - true
   */

  @Test
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("Induction of decision trees");
      assertEquals("induc of decis tree", string0);
      assertNotNull(string0);
  }

  //Test case number: 22
  /*
   * 6 covered goals:
   * Goal 1. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 40 TABLESWITCH L470 Case 89 - true
   * Goal 2. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I421 Branch 64 IF_ICMPEQ L513 - true
   * Goal 3. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I1083 Branch 107 IF_ICMPLE L615 - false
   * Goal 4. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I1095 Branch 108 IF_ICMPNE L615 - false
   * Goal 5. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I1107 Branch 109 IF_ICMPNE L615 - true
   * Goal 6. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I1130 Branch 110 IF_ICMPNE L624 - true
   */

  @Test
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      TechnicalInformation.Field technicalInformation_Field0 = TechnicalInformation.Field.KEY;
      String string0 = technicalInformation_Field0.getComment();
      assertEquals("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.", string0);
      assertNotNull(string0);
      
      String string1 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      String string2 = lovinsStemmer0.stemString("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.");
      assertEquals("us for alphab, cro refer, and creat a label when th ``author'' inform is mi. th field should not be confus with th key that appear in th cit command and at th begin of th datab entr.", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * Goal 1. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I540 Branch 180 IFLE L828 - false
   */

  @Test
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("ondcid");
      assertEquals("ondcis", string0);
      assertNotNull(string0);
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * Goal 1. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I580 Branch 182 IFLE L838 - false
   */

  @Test
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("ruderid");
      assertEquals("ruderis", string0);
      assertNotNull(string0);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * Goal 1. weka.core.stemmers.LovinsStemmer.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.toString();
      assertEquals("weka.core.stemmers.LovinsStemmer", string0);
      assertNotNull(string0);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * Goal 1. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I360 Branch 171 IFLE L783 - false
   */

  @Test
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("ciddex");
      assertEquals("ciddic", string0);
      assertNotNull(string0);
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * Goal 1. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I699 Branch 189 IFLE L866 - false
   */

  @Test
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("entrmitrud");
      assertEquals("entrmitrus", string0);
      assertNotNull(string0);
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * Goal 1. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I440 Branch 175 IFLE L803 - false
   */

  @Test
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("appearex");
      assertEquals("appearec", string0);
      assertNotNull(string0);
  }

  //Test case number: 29
  /*
   * 2 covered goals:
   * Goal 1. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I50 Branch 152 IFGT L705 - true
   * Goal 2. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I380 Branch 172 IFLE L788 - false
   */

  @Test
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and crating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and cr a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string0);
      assertNotNull(string0);
      
      String string1 = lovinsStemmer0.stemString("pex");
      assertEquals("pic", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotNull(string1);
  }

  //Test case number: 30
  /*
   * 1 covered goal:
   * Goal 1. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I906 Branch 203 IFLE L911 - false
   */

  @Test
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("jefyz");
      assertEquals("jefys", string0);
      assertNotNull(string0);
  }

  //Test case number: 31
  /*
   * 5 covered goals:
   * Goal 1. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I278 Branch 165 IFLE L767 - false
   * Goal 2. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I287 Branch 166 IFLT L768 - false
   * Goal 3. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I297 Branch 167 IF_ICMPEQ L768 - false
   * Goal 4. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I307 Branch 168 IF_ICMPEQ L768 - false
   * Goal 5. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I317 Branch 169 IF_ICMPEQ L768 - false
   */

  @Test
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("null");
      assertEquals("nl", string0);
      assertNotNull(string0);
  }

  //Test case number: 32
  /*
   * 3 covered goals:
   * Goal 1. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 37 TABLESWITCH L470 Case 86 - true
   * Goal 2. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I1005 Branch 102 IF_ICMPNE L604 - true
   * Goal 3. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I1040 Branch 104 IF_ICMPEQ L609 - true
   */

  @Test
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("z4It7.KUcL<J|O|KiuS");
      assertEquals("z4it7.kucl<j|o|kius", string0);
      assertNotNull(string0);
  }

  //Test case number: 33
  /*
   * 1 covered goal:
   * Goal 1. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I340 Branch 170 IFLE L778 - false
   */

  @Test
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("bex");
      assertEquals("bic", string0);
      assertNotNull(string0);
  }

  //Test case number: 34
  /*
   * 1 covered goal:
   * Goal 1. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I43 Branch 151 IFGT L705 - true
   */

  @Test
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("lovinsstemmery");
      assertEquals("lovinsstem", string0);
      assertNotNull(string0);
  }

  //Test case number: 35
  /*
   * 1 covered goal:
   * Goal 1. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I1487 Branch 137 IF_ICMPLE L666 - true
   */

  @Test
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("nlal");
      assertEquals("nlal", string0);
      assertNotNull(string0);
  }

  //Test case number: 36
  /*
   * 1 covered goal:
   * Goal 1. weka.core.stemmers.LovinsStemmer.main([Ljava/lang/String;)V: root-Branch
   */

  @Test
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[8];
      LovinsStemmer.main(stringArray0);
  }

  //Test case number: 37
  /*
   * 1 covered goal:
   * Goal 1. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I757 Branch 86 IF_ICMPLE L568 - true
   */

  @Test
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("Name(s) of editor(s), typeB as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or coll;ction in hich the reference appears.");
      assertEquals("nam(s) of edit(s), typeb as indic in th latic book. if ther is als an author field, then th edit field giv th edit of th book or col;ction in hich th refer appear.", string0);
      assertNotNull(string0);
  }

  //Test case number: 38
  /*
   * 1 covered goal:
   * Goal 1. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I15 Branch 147 IFGT L705 - true
   */

  @Test
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("s/\";S=/pbb}4'D3O");
      assertEquals("s/\";s=/pb}4'd3", string0);
      assertNotNull(string0);
  }

  //Test case number: 39
  /*
   * 12 covered goals:
   * Goal 1. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 24 TABLESWITCH L470 Case 73 - true
   * Goal 2. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 30 TABLESWITCH L470 Case 79 - true
   * Goal 3. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I409 Branch 63 IF_ICMPEQ L513 - false
   * Goal 4. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I421 Branch 64 IF_ICMPEQ L513 - false
   * Goal 5. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I703 Branch 83 IF_ICMPEQ L557 - false
   * Goal 6. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I715 Branch 84 IF_ICMPNE L557 - true
   * Goal 7. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I864 Branch 93 IF_ICMPNE L581 - false
   * Goal 8. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I876 Branch 94 IF_ICMPEQ L581 - false
   * Goal 9. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I911 Branch 96 IF_ICMPNE L589 - false
   * Goal 10. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I923 Branch 97 IF_ICMPEQ L589 - false
   * Goal 11. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I400 Branch 173 IFLE L793 - false
   * Goal 12. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I659 Branch 187 IFLE L856 - false
   */

  @Test
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("Name(s) of editor(s), typedas indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collecton in hich the reference appears");
      assertEquals("nam(s) of edit(s), typed indic in th latic book. if ther is als an author field, then th edit field giv th edit of th book or collect in hich th refer appear", string0);
      assertNotNull(string0);
      
      String string1 = lovinsStemmer0.stemString("tbicond");
      assertEquals("tbicons", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotNull(string1);
  }

  //Test case number: 40
  /*
   * 1 covered goal:
   * Goal 1. weka.core.stemmers.LovinsStemmer.getRevision()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      assertNotNull(string0);
  }

  //Test case number: 41
  /*
   * 16 covered goals:
   * Goal 1. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 32 TABLESWITCH L470 Case 81 - true
   * Goal 2. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I757 Branch 86 IF_ICMPLE L568 - false
   * Goal 3. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I769 Branch 87 IF_ICMPEQ L568 - false
   * Goal 4. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I781 Branch 88 IF_ICMPEQ L568 - false
   * Goal 5. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I899 Branch 95 IF_ICMPEQ L589 - false
   * Goal 6. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I911 Branch 96 IF_ICMPNE L589 - true
   * Goal 7. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I36 Branch 150 IFGT L705 - true
   * Goal 8. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I620 Branch 184 IFLE L848 - false
   * Goal 9. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I629 Branch 185 IFLT L849 - false
   * Goal 10. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I639 Branch 186 IF_ICMPEQ L849 - false
   * Goal 11. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I719 Branch 190 IFLE L871 - false
   * Goal 12. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I728 Branch 191 IFLT L872 - false
   * Goal 13. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I738 Branch 192 IF_ICMPEQ L872 - false
   * Goal 14. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I748 Branch 193 IF_ICMPEQ L872 - true
   * Goal 15. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I748 Branch 193 IF_ICMPEQ L872 - false
   * Goal 16. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I768 Branch 194 IFLE L880 - false
   */

  @Test
  public void test41()  throws Throwable  {
      TechnicalInformation.Field technicalInformation_Field0 = TechnicalInformation.Field.ADDRESS;
      String string0 = technicalInformation_Field0.getComment();
      assertEquals("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.", string0);
      assertNotNull(string0);
      
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string1 = lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      assertEquals("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotNull(string1);
  }

  //Test case number: 42
  /*
   * 1 covered goal:
   * Goal 1. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I886 Branch 202 IFLE L906 - false
   */

  @Test
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("vxzx9yt");
      assertEquals("vxzx9ys", string0);
      assertNotNull(string0);
  }

  //Test case number: 43
  /*
   * 5 covered goals:
   * Goal 1. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 28 TABLESWITCH L470 Case 77 - true
   * Goal 2. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I605 Branch 76 IF_ICMPEQ L542 - false
   * Goal 3. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I617 Branch 77 IF_ICMPEQ L542 - false
   * Goal 4. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I629 Branch 78 IF_ICMPEQ L542 - false
   * Goal 5. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I641 Branch 79 IF_ICMPEQ L542 - false
   */

  @Test
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("Machine Learing");
      assertEquals("mach lear", string0);
      assertNotNull(string0);
  }

  //Test case number: 44
  /*
   * 1 covered goal:
   * Goal 1. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I480 Branch 177 IFLE L813 - false
   */

  @Test
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("lux");
      assertEquals("luc", string0);
      assertNotNull(string0);
  }

  //Test case number: 45
  /*
   * 2 covered goals:
   * Goal 1. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 35 TABLESWITCH L470 Case 84 - true
   * Goal 2. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I899 Branch 95 IF_ICMPEQ L589 - true
   */

  @Test
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      TechnicalInformation.Field technicalInformation_Field0 = TechnicalInformation.Field.ORGANIZATION;
      String string0 = technicalInformation_Field0.getComment();
      assertEquals("The organization that sponsors a conference or that publishes a manual.", string0);
      assertNotNull(string0);
      
      String string1 = lovinsStemmer0.stemString("The organization that sponsors a conference or that publishes a manual.");
      assertEquals("th organ that sponsor a confer or that publish a manu.", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      String string2 = lovinsStemmer0.stemString("th organ that sponsor a confer or that publish a manu.");
      assertEquals("th organ that spons a confer or that publ a manu.", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
  }

  //Test case number: 46
  /*
   * 15 covered goals:
   * Goal 1. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I41 Branch 12 TABLESWITCH L444 Case 10 - true
   * Goal 2. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I41 Branch 13 TABLESWITCH L444 Case 11 - true
   * Goal 3. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 22 TABLESWITCH L470 Case 71 - true
   * Goal 4. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 39 TABLESWITCH L470 Case 88 - true
   * Goal 5. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I296 Branch 56 IF_ICMPLE L494 - false
   * Goal 6. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I308 Branch 57 IF_ICMPEQ L494 - false
   * Goal 7. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I327 Branch 58 IF_ICMPLE L500 - false
   * Goal 8. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I339 Branch 59 IF_ICMPNE L500 - true
   * Goal 9. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I1063 Branch 105 IF_ICMPEQ L615 - false
   * Goal 10. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I1075 Branch 106 IF_ICMPEQ L615 - false
   * Goal 11. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I1083 Branch 107 IF_ICMPLE L615 - true
   * Goal 12. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I1532 Branch 141 IF_ICMPLT L666 - false
   * Goal 13. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I1544 Branch 142 IF_ICMPNE L666 - true
   * Goal 14. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I78 Branch 156 IFLE L705 - false
   * Goal 15. weka.core.stemmers.LovinsStemmer.stemString(Ljava/lang/String;)Ljava/lang/String;: I67 Branch 209 IF_ICMPNE L952 - false
   */

  @Test
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      TechnicalInformation.Field technicalInformation_Field0 = TechnicalInformation.Field.YEAR;
      String string0 = technicalInformation_Field0.getComment();
      assertEquals("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `\\hbox{(about 1984)}'.", string0);
      assertNotNull(string0);
      
      String string1 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotNull(string1);
  }

  //Test case number: 47
  /*
   * 1 covered goal:
   * Goal 1. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I97 Branch 157 IFLE L720 - false
   */

  @Test
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("iev");
      assertEquals("ief", string0);
      assertNotNull(string0);
  }

  //Test case number: 48
  /*
   * 2 covered goals:
   * Goal 1. weka.core.stemmers.LovinsStemmer.globalInfo()Ljava/lang/String;: root-Branch
   * Goal 2. weka.core.stemmers.LovinsStemmer.getTechnicalInformation()Lweka/core/TechnicalInformation;: root-Branch
   */

  @Test
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      assertNotNull(string0);
  }

  //Test case number: 49
  /*
   * 15 covered goals:
   * Goal 1. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 17 TABLESWITCH L470 Case 66 - true
   * Goal 2. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 18 TABLESWITCH L470 Case 67 - true
   * Goal 3. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 49 TABLESWITCH L470 Case 98 - true
   * Goal 4. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I216 Branch 52 IF_ICMPLE L474 - true
   * Goal 5. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I216 Branch 52 IF_ICMPLE L474 - false
   * Goal 6. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I235 Branch 53 IF_ICMPLE L479 - false
   * Goal 7. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I660 Branch 80 IF_ICMPGT L550 - true
   * Goal 8. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I668 Branch 81 IF_ICMPNE L550 - true
   * Goal 9. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I1028 Branch 103 IF_ICMPEQ L609 - true
   * Goal 10. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I1365 Branch 127 IFEQ L653 - true
   * Goal 11. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I1487 Branch 137 IF_ICMPLE L666 - false
   * Goal 12. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I1499 Branch 138 IF_ICMPNE L666 - true
   * Goal 13. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I1532 Branch 141 IF_ICMPLT L666 - true
   * Goal 14. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I64 Branch 154 IFGT L705 - true
   * Goal 15. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I71 Branch 155 IFGT L705 - true
   */

  @Test
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("The database key of the entry being cross referenced. Any fields that are missing from #^e current record are inherited from the field being cross referenced.");
      assertEquals("th databas key of th entr being cros refer. any field that ar mis from #^e cur record ar inherit from th field being cros refer.", string0);
      assertNotNull(string0);
      
      String string1 = lovinsStemmer0.stemString("A a$ticle from a joral or magazin.");
      assertEquals("a a$ticl from a jor or magazin.", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotNull(string1);
  }

  //Test case number: 50
  /*
   * 4 covered goals:
   * Goal 1. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I117 Branch 158 IFLE L725 - false
   * Goal 2. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I520 Branch 179 IFLE L823 - false
   * Goal 3. weka.core.stemmers.LovinsStemmer.stemString(Ljava/lang/String;)Ljava/lang/String;: I59 Branch 208 IF_ICMPNE L951 - false
   * Goal 4. weka.core.stemmers.LovinsStemmer.stemString(Ljava/lang/String;)Ljava/lang/String;: I67 Branch 209 IF_ICMPNE L952 - true
   */

  @Test
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("Can't construct a path to file relative to user dir.");
      assertEquals("can't construc a path to fil rel to user dir.", string0);
      assertNotNull(string0);
      
      String string1 = lovinsStemmer0.stemString("vad");
      assertEquals("vas", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotNull(string1);
  }

  //Test case number: 51
  /*
   * 25 covered goals:
   * Goal 1. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I41 Branch 10 TABLESWITCH L444 Case 8 - true
   * Goal 2. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I41 Branch 11 TABLESWITCH L444 Case 9 - true
   * Goal 3. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 16 TABLESWITCH L470 Case 65 - true
   * Goal 4. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 20 TABLESWITCH L470 Case 69 - true
   * Goal 5. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 21 TABLESWITCH L470 Case 70 - true
   * Goal 6. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 29 TABLESWITCH L470 Case 78 - true
   * Goal 7. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 31 TABLESWITCH L470 Case 80 - true
   * Goal 8. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 34 TABLESWITCH L470 Case 83 - false
   * Goal 9. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 36 TABLESWITCH L470 Case 85 - true
   * Goal 10. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 38 TABLESWITCH L470 Case 87 - true
   * Goal 11. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I277 Branch 55 IF_ICMPEQ L489 - false
   * Goal 12. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I296 Branch 56 IF_ICMPLE L494 - true
   * Goal 13. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I660 Branch 80 IF_ICMPGT L550 - false
   * Goal 14. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I668 Branch 81 IF_ICMPNE L550 - false
   * Goal 15. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I680 Branch 82 IF_ICMPEQ L550 - false
   * Goal 16. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I738 Branch 85 IF_ICMPEQ L563 - false
   * Goal 17. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I946 Branch 98 IF_ICMPEQ L596 - true
   * Goal 18. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I1028 Branch 103 IF_ICMPEQ L609 - false
   * Goal 19. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I1040 Branch 104 IF_ICMPEQ L609 - false
   * Goal 20. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I847 Branch 199 IFLE L898 - false
   * Goal 21. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I856 Branch 200 IFLT L899 - false
   * Goal 22. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I866 Branch 201 IF_ICMPEQ L899 - false
   * Goal 23. weka.core.stemmers.LovinsStemmer.stem(Ljava/lang/String;)Ljava/lang/String;: I8 Branch 204 IF_ICMPLE L927 - true
   * Goal 24. weka.core.stemmers.LovinsStemmer.stemString(Ljava/lang/String;)Ljava/lang/String;: I85 Branch 210 IF_ICMPEQ L956 - true
   * Goal 25. weka.core.stemmers.LovinsStemmer.stemString(Ljava/lang/String;)Ljava/lang/String;: I121 Branch 211 IF_ICMPEQ L963 - true
   */

  @Test
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("The name of a series or set of books. When citing an entire book, thH the title field gives its title and an optional}series fieldqgives the name of a senies or multi-volume set in which the book is published.");
      assertEquals("th nam of a ser or ses of book. when cit an entir book, thh th titl field giv it titl and an opt}ser fieldqgiv th nam of a sen or mult-volum ses in which th book is publ.", string0);
      assertNotNull(string0);
      
      String string1 = lovinsStemmer0.stemString("th nam of a ser or ses of book. when cit an entir book, thh th titl field giv it titl and an opt}ser fieldqgiv th nam of a sen or mult-volum ses in which th book is publ.");
      assertEquals("th nam of a ser or se of book. when cit an entir book, thh th titl field giv it titl and an opt}ser fieldqgiv th nam of a sen or mult-vol se in which th book is publ.", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotNull(string1);
  }

  //Test case number: 52
  /*
   * 119 covered goals:
   * Goal 1. weka.core.stemmers.LovinsStemmer.<init>()V: root-Branch
   * Goal 2. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I15 Branch 1 IFLE L440 - true
   * Goal 3. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I15 Branch 1 IFLE L440 - false
   * Goal 4. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I25 Branch 2 IF_ICMPLE L441 - true
   * Goal 5. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I25 Branch 2 IF_ICMPLE L441 - false
   * Goal 6. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I41 Branch 3 TABLESWITCH L444 Case 1 - true
   * Goal 7. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I41 Branch 3 TABLESWITCH L444 Case 1 - false
   * Goal 8. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I41 Branch 4 TABLESWITCH L444 Case 2 - true
   * Goal 9. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I41 Branch 4 TABLESWITCH L444 Case 2 - false
   * Goal 10. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I41 Branch 5 TABLESWITCH L444 Case 3 - true
   * Goal 11. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I41 Branch 5 TABLESWITCH L444 Case 3 - false
   * Goal 12. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I41 Branch 6 TABLESWITCH L444 Case 4 - true
   * Goal 13. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I41 Branch 6 TABLESWITCH L444 Case 4 - false
   * Goal 14. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I41 Branch 7 TABLESWITCH L444 Case 5 - true
   * Goal 15. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I41 Branch 7 TABLESWITCH L444 Case 5 - false
   * Goal 16. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I41 Branch 8 TABLESWITCH L444 Case 6 - true
   * Goal 17. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I41 Branch 8 TABLESWITCH L444 Case 6 - false
   * Goal 18. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I41 Branch 9 TABLESWITCH L444 Case 7 - true
   * Goal 19. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I41 Branch 9 TABLESWITCH L444 Case 7 - false
   * Goal 20. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I41 Branch 10 TABLESWITCH L444 Case 8 - false
   * Goal 21. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I41 Branch 11 TABLESWITCH L444 Case 9 - false
   * Goal 22. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I41 Branch 12 TABLESWITCH L444 Case 10 - false
   * Goal 23. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I41 Branch 13 TABLESWITCH L444 Case 11 - false
   * Goal 24. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I41 Branch 14 TABLESWITCH L444 Default-Case - false
   * Goal 25. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I191 Branch 15 IFNULL L469 - true
   * Goal 26. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I191 Branch 15 IFNULL L469 - false
   * Goal 27. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 16 TABLESWITCH L470 Case 65 - false
   * Goal 28. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 17 TABLESWITCH L470 Case 66 - false
   * Goal 29. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 18 TABLESWITCH L470 Case 67 - false
   * Goal 30. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 19 TABLESWITCH L470 Case 68 - false
   * Goal 31. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 20 TABLESWITCH L470 Case 69 - false
   * Goal 32. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 21 TABLESWITCH L470 Case 70 - false
   * Goal 33. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 22 TABLESWITCH L470 Case 71 - false
   * Goal 34. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 23 TABLESWITCH L470 Case 72 - false
   * Goal 35. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 24 TABLESWITCH L470 Case 73 - false
   * Goal 36. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 25 TABLESWITCH L470 Case 74 - false
   * Goal 37. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 26 TABLESWITCH L470 Case 75 - false
   * Goal 38. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 27 TABLESWITCH L470 Case 76 - false
   * Goal 39. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 28 TABLESWITCH L470 Case 77 - false
   * Goal 40. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 29 TABLESWITCH L470 Case 78 - false
   * Goal 41. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 30 TABLESWITCH L470 Case 79 - false
   * Goal 42. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 31 TABLESWITCH L470 Case 80 - false
   * Goal 43. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 32 TABLESWITCH L470 Case 81 - false
   * Goal 44. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 33 TABLESWITCH L470 Case 82 - false
   * Goal 45. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 34 TABLESWITCH L470 Case 83 - true
   * Goal 46. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 35 TABLESWITCH L470 Case 84 - false
   * Goal 47. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 36 TABLESWITCH L470 Case 85 - false
   * Goal 48. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 37 TABLESWITCH L470 Case 86 - false
   * Goal 49. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 38 TABLESWITCH L470 Case 87 - false
   * Goal 50. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 39 TABLESWITCH L470 Case 88 - false
   * Goal 51. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 40 TABLESWITCH L470 Case 89 - false
   * Goal 52. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 41 TABLESWITCH L470 Case 90 - false
   * Goal 53. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 42 TABLESWITCH L470 Case 91 - false
   * Goal 54. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 43 TABLESWITCH L470 Case 92 - false
   * Goal 55. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 44 TABLESWITCH L470 Case 93 - false
   * Goal 56. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 45 TABLESWITCH L470 Case 94 - false
   * Goal 57. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 46 TABLESWITCH L470 Case 95 - false
   * Goal 58. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 47 TABLESWITCH L470 Case 96 - false
   * Goal 59. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 48 TABLESWITCH L470 Case 97 - false
   * Goal 60. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 49 TABLESWITCH L470 Case 98 - false
   * Goal 61. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 50 TABLESWITCH L470 Case 99 - false
   * Goal 62. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I197 Branch 51 TABLESWITCH L470 Default-Case - false
   * Goal 63. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I839 Branch 91 IF_ICMPNE L581 - true
   * Goal 64. weka.core.stemmers.LovinsStemmer.removeEnding(Ljava/lang/String;)Ljava/lang/String;: I864 Branch 93 IF_ICMPNE L581 - true
   * Goal 65. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I15 Branch 147 IFGT L705 - false
   * Goal 66. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I22 Branch 148 IFGT L705 - false
   * Goal 67. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I29 Branch 149 IFGT L705 - false
   * Goal 68. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I36 Branch 150 IFGT L705 - false
   * Goal 69. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I43 Branch 151 IFGT L705 - false
   * Goal 70. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I50 Branch 152 IFGT L705 - false
   * Goal 71. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I57 Branch 153 IFGT L705 - false
   * Goal 72. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I64 Branch 154 IFGT L705 - false
   * Goal 73. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I71 Branch 155 IFGT L705 - false
   * Goal 74. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I78 Branch 156 IFLE L705 - true
   * Goal 75. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I97 Branch 157 IFLE L720 - true
   * Goal 76. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I117 Branch 158 IFLE L725 - true
   * Goal 77. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I140 Branch 159 IFLE L731 - true
   * Goal 78. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I163 Branch 160 IFLE L737 - true
   * Goal 79. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I186 Branch 161 IFLE L743 - true
   * Goal 80. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I209 Branch 162 IFLE L749 - true
   * Goal 81. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I232 Branch 163 IFLE L755 - true
   * Goal 82. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I255 Branch 164 IFLE L761 - true
   * Goal 83. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I278 Branch 165 IFLE L767 - true
   * Goal 84. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I340 Branch 170 IFLE L778 - true
   * Goal 85. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I360 Branch 171 IFLE L783 - true
   * Goal 86. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I380 Branch 172 IFLE L788 - true
   * Goal 87. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I400 Branch 173 IFLE L793 - true
   * Goal 88. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I420 Branch 174 IFLE L798 - true
   * Goal 89. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I440 Branch 175 IFLE L803 - true
   * Goal 90. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I460 Branch 176 IFLE L808 - true
   * Goal 91. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I480 Branch 177 IFLE L813 - true
   * Goal 92. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I500 Branch 178 IFLE L818 - true
   * Goal 93. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I520 Branch 179 IFLE L823 - true
   * Goal 94. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I540 Branch 180 IFLE L828 - true
   * Goal 95. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I560 Branch 181 IFLE L833 - true
   * Goal 96. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I560 Branch 181 IFLE L833 - false
   * Goal 97. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I580 Branch 182 IFLE L838 - true
   * Goal 98. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I600 Branch 183 IFLE L843 - true
   * Goal 99. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I620 Branch 184 IFLE L848 - true
   * Goal 100. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I659 Branch 187 IFLE L856 - true
   * Goal 101. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I679 Branch 188 IFLE L861 - true
   * Goal 102. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I699 Branch 189 IFLE L866 - true
   * Goal 103. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I719 Branch 190 IFLE L871 - true
   * Goal 104. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I768 Branch 194 IFLE L880 - true
   * Goal 105. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I788 Branch 195 IFLE L885 - true
   * Goal 106. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I827 Branch 198 IFLE L893 - true
   * Goal 107. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I847 Branch 199 IFLE L898 - true
   * Goal 108. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I886 Branch 202 IFLE L906 - true
   * Goal 109. weka.core.stemmers.LovinsStemmer.recodeEnding(Ljava/lang/String;)Ljava/lang/String;: I906 Branch 203 IFLE L911 - true
   * Goal 110. weka.core.stemmers.LovinsStemmer.stem(Ljava/lang/String;)Ljava/lang/String;: I8 Branch 204 IF_ICMPLE L927 - false
   * Goal 111. weka.core.stemmers.LovinsStemmer.stemString(Ljava/lang/String;)Ljava/lang/String;: I21 Branch 205 IF_ICMPGE L945 - true
   * Goal 112. weka.core.stemmers.LovinsStemmer.stemString(Ljava/lang/String;)Ljava/lang/String;: I21 Branch 205 IF_ICMPGE L945 - false
   * Goal 113. weka.core.stemmers.LovinsStemmer.stemString(Ljava/lang/String;)Ljava/lang/String;: I35 Branch 206 IFEQ L947 - true
   * Goal 114. weka.core.stemmers.LovinsStemmer.stemString(Ljava/lang/String;)Ljava/lang/String;: I35 Branch 206 IFEQ L947 - false
   * Goal 115. weka.core.stemmers.LovinsStemmer.stemString(Ljava/lang/String;)Ljava/lang/String;: I43 Branch 207 IF_ICMPNE L948 - true
   * Goal 116. weka.core.stemmers.LovinsStemmer.stemString(Ljava/lang/String;)Ljava/lang/String;: I43 Branch 207 IF_ICMPNE L948 - false
   * Goal 117. weka.core.stemmers.LovinsStemmer.stemString(Ljava/lang/String;)Ljava/lang/String;: I59 Branch 208 IF_ICMPNE L951 - true
   * Goal 118. weka.core.stemmers.LovinsStemmer.stemString(Ljava/lang/String;)Ljava/lang/String;: I85 Branch 210 IF_ICMPEQ L956 - false
   * Goal 119. weka.core.stemmers.LovinsStemmer.stemString(Ljava/lang/String;)Ljava/lang/String;: I121 Branch 211 IF_ICMPEQ L963 - false
   */

  @Test
  public void test52()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      assertNotNull(lovinsStemmer0);
      
      String string0 = lovinsStemmer0.stemString("proceedon dlid");
      assertEquals("proceedon dlis", string0);
      assertNotNull(string0);
  }
}
