/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 19 00:43:00 GMT 2015
 */

package weka.experiment;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.junit.runner.RunWith;
import weka.experiment.ResultMatrix;
import weka.experiment.ResultMatrixCSV;
import weka.experiment.ResultMatrixGnuPlot;
import weka.experiment.ResultMatrixHTML;
import weka.experiment.ResultMatrixLatex;
import weka.experiment.ResultMatrixPlainText;
import weka.experiment.ResultMatrixSignificance;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ResultMatrix_ESTest extends ResultMatrix_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 4 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.setRanking([[I)V: I32 Branch 186 IF_ICMPGE L2251 - true
   * Goal 2. weka.experiment.ResultMatrix.setRanking([[I)V: I32 Branch 186 IF_ICMPGE L2251 - false
   * Goal 3. weka.experiment.ResultMatrix.setRanking([[I)V: I46 Branch 187 IF_ICMPGE L2252 - true
   * Goal 4. weka.experiment.ResultMatrix.setRanking([[I)V: I46 Branch 187 IF_ICMPGE L2252 - false
   */

  @Test
  public void test00()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int[][] intArray0 = new int[10][10];
      resultMatrixLatex0.setRanking(intArray0);
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
  }

  //Test case number: 1
  /*
   * 4 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.setSummary([[I[[I)V: I34 Branch 184 IF_ICMPGE L2204 - true
   * Goal 2. weka.experiment.ResultMatrix.setSummary([[I[[I)V: I34 Branch 184 IF_ICMPGE L2204 - false
   * Goal 3. weka.experiment.ResultMatrix.setSummary([[I[[I)V: I49 Branch 185 IF_ICMPGE L2205 - true
   * Goal 4. weka.experiment.ResultMatrix.setSummary([[I[[I)V: I49 Branch 185 IF_ICMPGE L2205 - false
   */

  @Test
  public void test01()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      int[][] intArray0 = new int[7][1];
      resultMatrixSignificance0.setSummary(intArray0, intArray0);
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getHeader(Ljava/lang/String;)Ljava/lang/String;: I13 Branch 183 IFNE L2151 - true
   */

  @Test
  public void test02()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 801);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV((ResultMatrix) resultMatrixHTML0);
      // Undeclared exception!
      try {
        String string0 = resultMatrixCSV0.getHeader("o");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.toString()Ljava/lang/String;: root-Branch
   * Goal 2. weka.experiment.ResultMatrix.removeFilterName(Ljava/lang/String;)Ljava/lang/String;: I7 Branch 130 IFEQ L1781 - false
   */

  @Test
  public void test03()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.m_RemoveFilterName = true;
      String string0 = resultMatrixCSV0.toString();
      assertTrue(resultMatrixCSV0.getRemoveFilterName());
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I19 Branch 123 IF_ICMPGE L1754 - true
   */

  @Test
  public void test04()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      String[][] stringArray0 = resultMatrixLatex0.toArray();
      int int0 = resultMatrixCSV0.getColSize(stringArray0, 18);
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, int0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I10 Branch 122 IFLT L1754 - true
   */

  @Test
  public void test05()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(2240, 0);
      String[][] stringArray0 = new String[5][5];
      int int0 = resultMatrixPlainText0.getColSize(stringArray0, (-1069), true, false);
      assertEquals(2240, resultMatrixPlainText0.getColCount());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, int0);
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.padString(Ljava/lang/String;IZ)Ljava/lang/String;: I62 Branch 120 IFLE L1721 - true
   */

  @Test
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ResultMatrixLatex.main(stringArray0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.trimString(Ljava/lang/String;I)Ljava/lang/String;: I13 Branch 117 IF_ICMPLE L1679 - false
   */

  @Test
  public void test07()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex((ResultMatrix) resultMatrixHTML0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV((ResultMatrix) resultMatrixLatex0);
      String string0 = resultMatrixCSV0.trimString(";a1g{%[(41D>PR)y", 2);
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(";a", string0);
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getDisplayCol(I)I: I13 Branch 112 IF_ICMPGE L1631 - true
   */

  @Test
  public void test08()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 801);
      int int0 = resultMatrixHTML0.getDisplayCol(801);
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(801, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals((-1), int0);
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getDisplayCol(I)I: I6 Branch 111 IFLT L1631 - true
   */

  @Test
  public void test09()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int int0 = resultMatrixHTML0.getDisplayCol((-228));
      assertEquals((-1), int0);
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setColOrder([I)V: I25 Branch 109 IF_ICMPNE L1602 - true
   */

  @Test
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[6];
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setColOrder(intArray0);
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
  }

  //Test case number: 11
  /*
   * 4 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.setColOrder([I)V: I6 Branch 108 IFNONNULL L1598 - true
   * Goal 2. weka.experiment.ResultMatrix.setColOrder([I)V: I25 Branch 109 IF_ICMPNE L1602 - false
   * Goal 3. weka.experiment.ResultMatrix.setColOrder([I)V: I44 Branch 110 IF_ICMPGE L1604 - true
   * Goal 4. weka.experiment.ResultMatrix.setColOrder([I)V: I44 Branch 110 IF_ICMPGE L1604 - false
   */

  @Test
  public void test11()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[] intArray0 = new int[1];
      resultMatrixCSV0.setColOrder(intArray0);
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getDisplayRow(I)I: I13 Branch 106 IF_ICMPGE L1578 - true
   */

  @Test
  public void test12()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(25, 25);
      int int0 = resultMatrixSignificance0.getDisplayRow(25);
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals((-1), int0);
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(25, resultMatrixSignificance0.getColCount());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(25, resultMatrixSignificance0.getRowCount());
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getDisplayRow(I)I: I6 Branch 105 IFLT L1578 - true
   */

  @Test
  public void test13()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int int0 = resultMatrixSignificance0.getDisplayRow((-78));
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals((-1), int0);
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
  }

  //Test case number: 14
  /*
   * 3 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.setRowOrder([I)V: I25 Branch 103 IF_ICMPNE L1549 - false
   * Goal 2. weka.experiment.ResultMatrix.setRowOrder([I)V: I44 Branch 104 IF_ICMPGE L1551 - true
   * Goal 3. weka.experiment.ResultMatrix.setRowOrder([I)V: I44 Branch 104 IF_ICMPGE L1551 - false
   */

  @Test
  public void test14()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int[] intArray0 = new int[1];
      resultMatrixHTML0.setRowOrder(intArray0);
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setRowOrder([I)V: I6 Branch 102 IFNONNULL L1545 - false
   */

  @Test
  public void test15()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setRowOrder((int[]) null);
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
  }

  //Test case number: 16
  /*
   * 2 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.setRowOrder([I)V: I6 Branch 102 IFNONNULL L1545 - true
   * Goal 2. weka.experiment.ResultMatrix.setRowOrder([I)V: I25 Branch 103 IF_ICMPNE L1549 - true
   */

  @Test
  public void test16()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int[] intArray0 = new int[6];
      resultMatrixHTML0.setRowOrder(intArray0);
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I17 Branch 97 IF_ICMPGE L1519 - true
   */

  @Test
  public void test17()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML((ResultMatrix) resultMatrixGnuPlot0);
      int int0 = resultMatrixHTML0.getSignificanceCount(1585, 1585);
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I10 Branch 96 IFLT L1519 - true
   */

  @Test
  public void test18()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int int0 = resultMatrixLatex0.getSignificanceCount((-3), 11);
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(0, int0);
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getSignificance(II)I: I25 Branch 95 IF_ICMPGE L1498 - true
   */

  @Test
  public void test19()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int int0 = resultMatrixHTML0.getSignificance(0, 191);
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getSignificance(II)I: I13 Branch 93 IF_ICMPGE L1498 - true
   */

  @Test
  public void test20()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int int0 = resultMatrixHTML0.getSignificance(12, 170);
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setSignificance(III)V: I25 Branch 91 IF_ICMPGE L1484 - true
   */

  @Test
  public void test21()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(1819, 0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex((ResultMatrix) resultMatrixSignificance0);
      resultMatrixLatex0.setSignificance(49, 49, 0);
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(1819, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setSignificance(III)V: I13 Branch 89 IF_ICMPGE L1484 - true
   */

  @Test
  public void test22()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setSignificance(354, 5318, 221);
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setSignificance(III)V: I6 Branch 88 IFLT L1484 - true
   */

  @Test
  public void test23()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex((ResultMatrix) resultMatrixHTML0);
      resultMatrixLatex0.setSignificance((-1308), (-1308), (-1308));
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getStdDev(II)D: I6 Branch 84 IFLT L1469 - true
   */

  @Test
  public void test24()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      double double0 = resultMatrixLatex0.getStdDev((-460), (-170));
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setStdDev(IID)V: I18 Branch 82 IFLT L1455 - true
   */

  @Test
  public void test25()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setStdDev(0, (-92), (-2886.0759));
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setStdDev(IID)V: I13 Branch 81 IF_ICMPGE L1455 - true
   */

  @Test
  public void test26()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setStdDev(341, (-92), (-2886.0759));
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setStdDev(IID)V: I6 Branch 80 IFLT L1455 - true
   */

  @Test
  public void test27()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setStdDev((-8), (-92), (-2888.594323944919));
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getAverage(I)D: I13 Branch 77 IF_ICMPGE L1429 - true
   */

  @Test
  public void test28()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      double double0 = resultMatrixHTML0.getAverage(2337);
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
  }

  //Test case number: 29
  /*
   * 5 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.getAverage(I)D: I6 Branch 76 IFLT L1429 - false
   * Goal 2. weka.experiment.ResultMatrix.getAverage(I)D: I13 Branch 77 IF_ICMPGE L1429 - false
   * Goal 3. weka.experiment.ResultMatrix.getAverage(I)D: I33 Branch 78 IF_ICMPGE L1433 - true
   * Goal 4. weka.experiment.ResultMatrix.getAverage(I)D: I33 Branch 78 IF_ICMPGE L1433 - false
   * Goal 5. weka.experiment.ResultMatrix.getAverage(I)D: I44 Branch 79 IFNE L1434 - true
   */

  @Test
  public void test29()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      double double0 = resultMatrixLatex0.getAverage(0);
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
  }

  //Test case number: 30
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getAverage(I)D: I6 Branch 76 IFLT L1429 - true
   */

  @Test
  public void test30()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      double double0 = resultMatrixLatex0.getAverage((-3));
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
  }

  //Test case number: 31
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getMean(II)D: I13 Branch 73 IF_ICMPGE L1410 - true
   */

  @Test
  public void test31()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      double double0 = resultMatrixHTML0.getMean(132, (-1190));
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
  }

  //Test case number: 32
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setMean(IID)V: I25 Branch 71 IF_ICMPGE L1396 - true
   */

  @Test
  public void test32()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setMean(0, 3575, (double) 3575);
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
  }

  //Test case number: 33
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setMean(IID)V: I18 Branch 70 IFLT L1396 - true
   */

  @Test
  public void test33()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setMean(0, (-793), (double) (-793));
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
  }

  //Test case number: 34
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setMean(IID)V: I13 Branch 69 IF_ICMPGE L1396 - true
   */

  @Test
  public void test34()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 0);
      resultMatrixCSV0.setMean(0, 0, 0.0);
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getVisibleColCount());
  }

  //Test case number: 35
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setMean(IID)V: I6 Branch 68 IFLT L1396 - true
   */

  @Test
  public void test35()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setMean((-2), 3575, (double) 3575);
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(1, resultMatrixHTML0.getColCount());
  }

  //Test case number: 36
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getCount(I)D: I13 Branch 67 IF_ICMPGE L1382 - true
   */

  @Test
  public void test36()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(213, 213);
      double double0 = resultMatrixSignificance0.getCount(213);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(213, resultMatrixSignificance0.getVisibleRowCount());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(213, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
  }

  //Test case number: 37
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getCount(I)D: I6 Branch 66 IFLT L1382 - true
   */

  @Test
  public void test37()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      double double0 = resultMatrixGnuPlot0.getCount((-612));
      assertEquals(0.0, double0, 0.01D);
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
  }

  //Test case number: 38
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setCount(ID)V: I13 Branch 65 IF_ICMPGE L1371 - false
   */

  @Test
  public void test38()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 5251);
      resultMatrixLatex0.setCount(2391, (double) 2391);
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(5251, resultMatrixLatex0.getRowCount());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
  }

  //Test case number: 39
  /*
   * 2 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.setCount(ID)V: I6 Branch 64 IFLT L1371 - false
   * Goal 2. weka.experiment.ResultMatrix.setCount(ID)V: I13 Branch 65 IF_ICMPGE L1371 - true
   */

  @Test
  public void test39()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setCount(34, 1028.092);
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
  }

  //Test case number: 40
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setCount(ID)V: I6 Branch 64 IFLT L1371 - true
   */

  @Test
  public void test40()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV((ResultMatrix) resultMatrixHTML0);
      resultMatrixCSV0.setCount((-2131), 0.0);
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
  }

  //Test case number: 41
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getRowHidden(I)Z: I13 Branch 63 IF_ICMPGE L1358 - true
   */

  @Test
  public void test41()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      boolean boolean0 = resultMatrixGnuPlot0.getRowHidden(5007);
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertFalse(boolean0);
  }

  //Test case number: 42
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setRowHidden(IZ)V: I13 Branch 61 IF_ICMPGE L1346 - true
   */

  @Test
  public void test42()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setRowHidden(7659, false);
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
  }

  //Test case number: 43
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setRowHidden(IZ)V: I6 Branch 60 IFLT L1346 - true
   */

  @Test
  public void test43()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setRowHidden((-1323), false);
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
  }

  //Test case number: 44
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getColHidden(I)Z: I13 Branch 59 IF_ICMPGE L1333 - true
   */

  @Test
  public void test44()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      boolean boolean0 = resultMatrixPlainText0.getColHidden(4655);
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertFalse(boolean0);
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
  }

  //Test case number: 45
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getColHidden(I)Z: I6 Branch 58 IFLT L1333 - true
   */

  @Test
  public void test45()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      boolean boolean0 = resultMatrixHTML0.getColHidden((-115));
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(boolean0);
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
  }

  //Test case number: 46
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setColHidden(IZ)V: I13 Branch 57 IF_ICMPGE L1321 - true
   */

  @Test
  public void test46()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 0);
      resultMatrixCSV0.setColHidden(25, true);
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
  }

  //Test case number: 47
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setColHidden(IZ)V: I6 Branch 56 IFLT L1321 - true
   */

  @Test
  public void test47()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setColHidden((-623), true);
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getShowAverage());
  }

  //Test case number: 48
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getRowName(I)Ljava/lang/String;: I17 Branch 53 IF_ICMPGE L1296 - true
   */

  @Test
  public void test48()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      String string0 = resultMatrixPlainText0.getRowName(5251);
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
  }

  //Test case number: 49
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getRowName(I)Ljava/lang/String;: I10 Branch 52 IFLT L1296 - true
   */

  @Test
  public void test49()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      String string0 = resultMatrixPlainText0.getRowName((-3821));
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(1, resultMatrixPlainText0.getColCount());
  }

  //Test case number: 50
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setRowName(ILjava/lang/String;)V: I13 Branch 51 IF_ICMPGE L1274 - false
   */

  @Test
  public void test50()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setRowName(0, "");
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
  }

  //Test case number: 51
  /*
   * 2 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.setRowName(ILjava/lang/String;)V: I6 Branch 50 IFLT L1274 - false
   * Goal 2. weka.experiment.ResultMatrix.setRowName(ILjava/lang/String;)V: I13 Branch 51 IF_ICMPGE L1274 - true
   */

  @Test
  public void test51()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(25, 25);
      resultMatrixSignificance0.setRowName(25, "Inf");
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(25, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
  }

  //Test case number: 52
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setRowName(ILjava/lang/String;)V: I6 Branch 50 IFLT L1274 - true
   */

  @Test
  public void test52()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setRowName((-1023), "");
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
  }

  //Test case number: 53
  /*
   * 5 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.getColName(I)Ljava/lang/String;: I48 Branch 49 IFEQ L1255 - true
   * Goal 2. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I55 Branch 100 IFEQ L1525 - false
   * Goal 3. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I301 Branch 142 IFNE L1869 - true
   * Goal 4. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I317 Branch 143 IFNE L1872 - false
   * Goal 5. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I422 Branch 147 IFNE L1890 - false
   */

  @Test
  public void test53()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance((ResultMatrix) resultMatrixGnuPlot0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex((ResultMatrix) resultMatrixSignificance0);
      String string0 = resultMatrixLatex0.toStringMatrix();
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption}\n\\footnotesize\n{\\centering \\begin{tabular}{lr}\n\\\\\n\\hline\nDataset & col0\\\\\n\\hline\nrow0                                               &     \\\\\n\\hline\n\\multicolumn{2}{c}{$\\circ$, $\\bullet$ statistically significant improvement or degradation}\\\\\n\\end{tabular} \\footnotesize \\par}\n\\end{table}\n", string0);
  }

  //Test case number: 54
  /*
   * 15 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.getColName(I)Ljava/lang/String;: I25 Branch 48 IFEQ L1250 - false
   * Goal 2. weka.experiment.ResultMatrix.getCount(I)D: I6 Branch 66 IFLT L1382 - false
   * Goal 3. weka.experiment.ResultMatrix.getCount(I)D: I13 Branch 67 IF_ICMPGE L1382 - false
   * Goal 4. weka.experiment.ResultMatrix.padString(Ljava/lang/String;IZ)Ljava/lang/String;: I15 Branch 118 IF_ICMPGE L1713 - false
   * Goal 5. weka.experiment.ResultMatrix.padString(Ljava/lang/String;IZ)Ljava/lang/String;: I22 Branch 119 IFEQ L1714 - true
   * Goal 6. weka.experiment.ResultMatrix.padString(Ljava/lang/String;IZ)Ljava/lang/String;: I22 Branch 119 IFEQ L1714 - false
   * Goal 7. weka.experiment.ResultMatrix.padString(Ljava/lang/String;IZ)Ljava/lang/String;: I69 Branch 121 IF_ICMPLE L1721 - false
   * Goal 8. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I43 Branch 126 IFEQ L1757 - false
   * Goal 9. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I65 Branch 128 IFEQ L1761 - false
   * Goal 10. weka.experiment.ResultMatrix.isMean(I)Z: I23 Branch 167 IFGE L2018 - false
   * Goal 11. weka.experiment.ResultMatrix.isAverage(I)Z: I7 Branch 171 IFEQ L2036 - true
   * Goal 12. weka.experiment.ResultMatrix.isSignificance(I)Z: I23 Branch 178 IFGE L2083 - false
   * Goal 13. weka.experiment.ResultMatrix.isSignificance(I)Z: I37 Branch 179 IF_ICMPNE L2086 - true
   * Goal 14. weka.experiment.ResultMatrix.isSignificance(I)Z: I53 Branch 180 IFGE L2089 - false
   * Goal 15. weka.experiment.ResultMatrix.isSignificance(I)Z: I67 Branch 181 IF_ICMPNE L2092 - true
   */

  @Test
  public void test54()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ResultMatrixPlainText.main(stringArray0);
  }

  //Test case number: 55
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getColName(I)Ljava/lang/String;: I17 Branch 47 IF_ICMPGE L1249 - true
   */

  @Test
  public void test55()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 0);
      String string0 = resultMatrixLatex0.getColName(169);
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getVisibleRowCount());
      assertNull(string0);
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
  }

  //Test case number: 56
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getColName(I)Ljava/lang/String;: I10 Branch 46 IFLT L1249 - true
   */

  @Test
  public void test56()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      String string0 = resultMatrixLatex0.getColName((-692));
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertNull(string0);
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
  }

  //Test case number: 57
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setColName(ILjava/lang/String;)V: I13 Branch 45 IF_ICMPGE L1227 - true
   */

  @Test
  public void test57()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setColName(14, (String) null);
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
  }

  //Test case number: 58
  /*
   * 2 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.setColName(ILjava/lang/String;)V: I6 Branch 44 IFLT L1227 - false
   * Goal 2. weka.experiment.ResultMatrix.setColName(ILjava/lang/String;)V: I13 Branch 45 IF_ICMPGE L1227 - false
   */

  @Test
  public void test58()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setColName(0, (String) null);
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
  }

  //Test case number: 59
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setColName(ILjava/lang/String;)V: I6 Branch 44 IFLT L1227 - true
   */

  @Test
  public void test59()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(354, 0);
      resultMatrixCSV0.setColName((-258), "v");
      assertEquals(354, resultMatrixCSV0.getVisibleColCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
  }

  //Test case number: 60
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setPrintColNames(Z)V: I11 Branch 38 IFNE L1018 - true
   */

  @Test
  public void test60()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(6655, 0);
      resultMatrixPlainText0.setPrintColNames(true);
      assertEquals(6655, resultMatrixPlainText0.getColCount());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
  }

  //Test case number: 61
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setCountWidth(I)V: I6 Branch 37 IFLT L865 - false
   */

  @Test
  public void test61()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance((ResultMatrix) resultMatrixGnuPlot0);
      resultMatrixSignificance0.setCountWidth(1122);
      assertEquals(1122, resultMatrixSignificance0.getCountWidth());
  }

  //Test case number: 62
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setCountWidth(I)V: I6 Branch 37 IFLT L865 - true
   */

  @Test
  public void test62()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(213, 213);
      resultMatrixSignificance0.setCountWidth((-1501));
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(213, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(213, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
  }

  //Test case number: 63
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setStdDevWidth(I)V: I6 Branch 35 IFLT L789 - true
   */

  @Test
  public void test63()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setStdDevWidth((-1252));
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
  }

  //Test case number: 64
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setMeanPrec(I)V: I6 Branch 30 IFLT L599 - true
   */

  @Test
  public void test64()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setMeanPrec((-366));
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
  }

  //Test case number: 65
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getOptions()[Ljava/lang/String;: I215 Branch 12 IFEQ L424 - false
   */

  @Test
  public void test65()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      String[] stringArray0 = resultMatrixPlainText0.getOptions();
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
  }

  //Test case number: 66
  /*
   * 8 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.setOptions([Ljava/lang/String;)V: I13 Branch 1 IFLE L319 - true
   * Goal 2. weka.experiment.ResultMatrix.setOptions([Ljava/lang/String;)V: I43 Branch 2 IFLE L325 - true
   * Goal 3. weka.experiment.ResultMatrix.setOptions([Ljava/lang/String;)V: I73 Branch 3 IFLE L331 - true
   * Goal 4. weka.experiment.ResultMatrix.setOptions([Ljava/lang/String;)V: I103 Branch 4 IFLE L337 - true
   * Goal 5. weka.experiment.ResultMatrix.setOptions([Ljava/lang/String;)V: I133 Branch 5 IFLE L343 - true
   * Goal 6. weka.experiment.ResultMatrix.setOptions([Ljava/lang/String;)V: I163 Branch 6 IFLE L349 - true
   * Goal 7. weka.experiment.ResultMatrix.setOptions([Ljava/lang/String;)V: I193 Branch 7 IFLE L355 - true
   * Goal 8. weka.experiment.ResultMatrix.setOptions([Ljava/lang/String;)V: I223 Branch 8 IFLE L361 - true
   */

  @Test
  public void test66()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "v";
      stringArray0[1] = "*";
      stringArray0[2] = "(";
      stringArray0[3] = " ";
      stringArray0[4] = " ";
      stringArray0[5] = "*";
      resultMatrixHTML0.setOptions(stringArray0);
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
  }

  //Test case number: 67
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.stdDevWidthTipText()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test67()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      String string0 = resultMatrixGnuPlot0.stdDevWidthTipText();
      assertEquals("The width of the standard deviation (0 = optimal).", string0);
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
  }

  //Test case number: 68
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.headerKeys()Ljava/util/Enumeration;: root-Branch
   */

  @Test
  public void test68()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      Enumeration enumeration0 = resultMatrixCSV0.headerKeys();
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
  }

  //Test case number: 69
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.printColNamesTipText()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test69()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      String string0 = resultMatrixCSV0.printColNamesTipText();
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", string0);
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
  }

  //Test case number: 70
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.rowNameWidthTipText()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test70()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      String string0 = resultMatrixLatex0.rowNameWidthTipText();
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("The maximum width for the row names (0 = optimal).", string0);
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
  }

  //Test case number: 71
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.meanWidthTipText()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test71()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String string0 = resultMatrixHTML0.meanWidthTipText();
      assertEquals("The width of the mean (0 = optimal).", string0);
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
  }

  //Test case number: 72
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.meanPrecTipText()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test72()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot((ResultMatrix) resultMatrixHTML0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance((ResultMatrix) resultMatrixGnuPlot0);
      String string0 = resultMatrixSignificance0.meanPrecTipText();
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", string0);
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
  }

  //Test case number: 73
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getSummaryTitle(I)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test73()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      String string0 = resultMatrixSignificance0.getSummaryTitle(0);
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("a", string0);
      assertEquals(0, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
  }

  //Test case number: 74
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.colNameWidthTipText()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test74()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance((ResultMatrix) resultMatrixGnuPlot0);
      String string0 = resultMatrixSignificance0.colNameWidthTipText();
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", string0);
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
  }

  //Test case number: 75
  /*
   * 2 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.getDefaultPrintColNames()Z: root-Branch
   * Goal 2. weka.experiment.ResultMatrix.printRowNamesTipText()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test75()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance((ResultMatrix) resultMatrixGnuPlot0);
      String string0 = resultMatrixSignificance0.printRowNamesTipText();
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to output row names or just numbers representing them.", string0);
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
  }

  //Test case number: 76
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.stdDevPrecTipText()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test76()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      String string0 = resultMatrixSignificance0.stdDevPrecTipText();
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", string0);
  }

  //Test case number: 77
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.showAverageTipText()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test77()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      String string0 = resultMatrixCSV0.showAverageTipText();
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to show the row with averages.", string0);
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
  }

  //Test case number: 78
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.showStdDevTipText()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test78()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String string0 = resultMatrixHTML0.showStdDevTipText();
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", string0);
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(1, resultMatrixHTML0.getColCount());
  }

  //Test case number: 79
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.countWidthTipText()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test79()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      String string0 = resultMatrixSignificance0.countWidthTipText();
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", string0);
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getShowAverage());
  }

  //Test case number: 80
  /*
   * 2 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.getDefaultRowNameWidth()I: root-Branch
   * Goal 2. weka.experiment.ResultMatrix.enumerateRowNamesTipText()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test80()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      String string0 = resultMatrixLatex0.enumerateRowNamesTipText();
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", string0);
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
  }

  //Test case number: 81
  /*
   * 2 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.significanceWidthTipText()Ljava/lang/String;: root-Branch
   * Goal 2. weka.experiment.ResultMatrix.getDefaultEnumerateColNames()Z: root-Branch
   */

  @Test
  public void test81()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      String string0 = resultMatrixSignificance0.significanceWidthTipText();
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", string0);
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
  }

  //Test case number: 82
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.enumerateColNamesTipText()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test82()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 801);
      String string0 = resultMatrixHTML0.enumerateColNamesTipText();
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", string0);
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(801, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
  }

  //Test case number: 83
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.listOptions()Ljava/util/Enumeration;: root-Branch
   */

  @Test
  public void test83()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      Enumeration enumeration0 = resultMatrixHTML0.listOptions();
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
  }

  //Test case number: 84
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.removeFilterNameTipText()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test84()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String string0 = resultMatrixHTML0.removeFilterNameTipText();
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", string0);
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
  }

  //Test case number: 85
  /*
   * 28 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.setShowAverage(Z)V: root-Branch
   * Goal 2. weka.experiment.ResultMatrix.getMeanWidth()I: root-Branch
   * Goal 3. weka.experiment.ResultMatrix.getCountWidth()I: root-Branch
   * Goal 4. weka.experiment.ResultMatrix.getStdDevWidth()I: root-Branch
   * Goal 5. weka.experiment.ResultMatrix.setRemoveFilterName(Z)V: root-Branch
   * Goal 6. weka.experiment.ResultMatrix.getSignificanceWidth()I: root-Branch
   * Goal 7. weka.experiment.ResultMatrix.setOptions([Ljava/lang/String;)V: I13 Branch 1 IFLE L319 - false
   * Goal 8. weka.experiment.ResultMatrix.setOptions([Ljava/lang/String;)V: I43 Branch 2 IFLE L325 - false
   * Goal 9. weka.experiment.ResultMatrix.setOptions([Ljava/lang/String;)V: I73 Branch 3 IFLE L331 - false
   * Goal 10. weka.experiment.ResultMatrix.setOptions([Ljava/lang/String;)V: I103 Branch 4 IFLE L337 - false
   * Goal 11. weka.experiment.ResultMatrix.setOptions([Ljava/lang/String;)V: I133 Branch 5 IFLE L343 - false
   * Goal 12. weka.experiment.ResultMatrix.setOptions([Ljava/lang/String;)V: I163 Branch 6 IFLE L349 - false
   * Goal 13. weka.experiment.ResultMatrix.setOptions([Ljava/lang/String;)V: I193 Branch 7 IFLE L355 - false
   * Goal 14. weka.experiment.ResultMatrix.setOptions([Ljava/lang/String;)V: I223 Branch 8 IFLE L361 - false
   * Goal 15. weka.experiment.ResultMatrix.getOptions()[Ljava/lang/String;: I173 Branch 9 IFEQ L415 - true
   * Goal 16. weka.experiment.ResultMatrix.getOptions()[Ljava/lang/String;: I187 Branch 10 IFEQ L418 - true
   * Goal 17. weka.experiment.ResultMatrix.getOptions()[Ljava/lang/String;: I201 Branch 11 IFEQ L421 - true
   * Goal 18. weka.experiment.ResultMatrix.getOptions()[Ljava/lang/String;: I215 Branch 12 IFEQ L424 - true
   * Goal 19. weka.experiment.ResultMatrix.getOptions()[Ljava/lang/String;: I229 Branch 13 IFEQ L427 - false
   * Goal 20. weka.experiment.ResultMatrix.getOptions()[Ljava/lang/String;: I243 Branch 14 IFEQ L430 - false
   * Goal 21. weka.experiment.ResultMatrix.getOptions()[Ljava/lang/String;: I257 Branch 15 IFEQ L433 - true
   * Goal 22. weka.experiment.ResultMatrix.setStdDevPrec(I)V: I6 Branch 31 IFLT L637 - false
   * Goal 23. weka.experiment.ResultMatrix.setColNameWidth(I)V: I6 Branch 32 IFLT L675 - false
   * Goal 24. weka.experiment.ResultMatrix.setRowNameWidth(I)V: I6 Branch 33 IFLT L713 - false
   * Goal 25. weka.experiment.ResultMatrix.setMeanWidth(I)V: I6 Branch 34 IFLT L751 - false
   * Goal 26. weka.experiment.ResultMatrix.setStdDevWidth(I)V: I6 Branch 35 IFLT L789 - false
   * Goal 27. weka.experiment.ResultMatrix.setSignificanceWidth(I)V: I6 Branch 36 IFLT L827 - false
   * Goal 28. weka.experiment.ResultMatrix.setPrintRowNames(Z)V: I11 Branch 39 IFNE L1059 - true
   */

  @Test
  public void test85()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      resultMatrixHTML0.setOptions(stringArray0);
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevPrec());
  }

  //Test case number: 86
  /*
   * 230 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.getColNameWidth()I: root-Branch
   * Goal 2. weka.experiment.ResultMatrix.clearSummary()V: root-Branch
   * Goal 3. weka.experiment.ResultMatrix.getDefaultShowStdDev()Z: root-Branch
   * Goal 4. weka.experiment.ResultMatrix.setEnumerateColNames(Z)V: root-Branch
   * Goal 5. weka.experiment.ResultMatrix.getStdDevPrec()I: root-Branch
   * Goal 6. weka.experiment.ResultMatrix.getRemoveFilterName()Z: root-Branch
   * Goal 7. weka.experiment.ResultMatrix.getDefaultMeanWidth()I: root-Branch
   * Goal 8. weka.experiment.ResultMatrix.<init>(Lweka/experiment/ResultMatrix;)V: root-Branch
   * Goal 9. weka.experiment.ResultMatrix.getEnumerateRowNames()Z: root-Branch
   * Goal 10. weka.experiment.ResultMatrix.getShowAverage()Z: root-Branch
   * Goal 11. weka.experiment.ResultMatrix.getDefaultShowAverage()Z: root-Branch
   * Goal 12. weka.experiment.ResultMatrix.getDefaultCountWidth()I: root-Branch
   * Goal 13. weka.experiment.ResultMatrix.getShowStdDev()Z: root-Branch
   * Goal 14. weka.experiment.ResultMatrix.clearRanking()V: root-Branch
   * Goal 15. weka.experiment.ResultMatrix.clearHeader()V: root-Branch
   * Goal 16. weka.experiment.ResultMatrix.getRowCount()I: root-Branch
   * Goal 17. weka.experiment.ResultMatrix.getDefaultStdDevWidth()I: root-Branch
   * Goal 18. weka.experiment.ResultMatrix.<init>(II)V: root-Branch
   * Goal 19. weka.experiment.ResultMatrix.getRowOrder()[I: root-Branch
   * Goal 20. weka.experiment.ResultMatrix.getDefaultEnumerateRowNames()Z: root-Branch
   * Goal 21. weka.experiment.ResultMatrix.getPrintRowNames()Z: root-Branch
   * Goal 22. weka.experiment.ResultMatrix.getPrintColNames()Z: root-Branch
   * Goal 23. weka.experiment.ResultMatrix.padString(Ljava/lang/String;I)Ljava/lang/String;: root-Branch
   * Goal 24. weka.experiment.ResultMatrix.setShowStdDev(Z)V: root-Branch
   * Goal 25. weka.experiment.ResultMatrix.getDefaultPrintRowNames()Z: root-Branch
   * Goal 26. weka.experiment.ResultMatrix.setEnumerateRowNames(Z)V: root-Branch
   * Goal 27. weka.experiment.ResultMatrix.getDefaultColNameWidth()I: root-Branch
   * Goal 28. weka.experiment.ResultMatrix.getMeanPrec()I: root-Branch
   * Goal 29. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;I)I: root-Branch
   * Goal 30. weka.experiment.ResultMatrix.getRowNameWidth()I: root-Branch
   * Goal 31. weka.experiment.ResultMatrix.getDefaultMeanPrec()I: root-Branch
   * Goal 32. weka.experiment.ResultMatrix.getDefaultRemoveFilterName()Z: root-Branch
   * Goal 33. weka.experiment.ResultMatrix.getEnumerateColNames()Z: root-Branch
   * Goal 34. weka.experiment.ResultMatrix.getDefaultSignificanceWidth()I: root-Branch
   * Goal 35. weka.experiment.ResultMatrix.getColOrder()[I: root-Branch
   * Goal 36. weka.experiment.ResultMatrix.clear()V: root-Branch
   * Goal 37. weka.experiment.ResultMatrix.getColCount()I: root-Branch
   * Goal 38. weka.experiment.ResultMatrix.getDefaultStdDevPrec()I: root-Branch
   * Goal 39. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I150 Branch 16 IF_ICMPGE L483 - true
   * Goal 40. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I150 Branch 16 IF_ICMPGE L483 - false
   * Goal 41. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I165 Branch 17 IF_ICMPGE L484 - true
   * Goal 42. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I165 Branch 17 IF_ICMPGE L484 - false
   * Goal 43. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I234 Branch 18 IF_ICMPGE L491 - true
   * Goal 44. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I234 Branch 18 IF_ICMPGE L491 - false
   * Goal 45. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I274 Branch 19 IF_ICMPGE L496 - true
   * Goal 46. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I274 Branch 19 IF_ICMPGE L496 - false
   * Goal 47. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I314 Branch 20 IF_ICMPGE L501 - true
   * Goal 48. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I314 Branch 20 IF_ICMPGE L501 - false
   * Goal 49. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I339 Branch 21 IFNULL L505 - true
   * Goal 50. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I457 Branch 24 IFNULL L520 - true
   * Goal 51. weka.experiment.ResultMatrix.setSize(II)V: I73 Branch 26 IF_ICMPGE L578 - true
   * Goal 52. weka.experiment.ResultMatrix.setSize(II)V: I73 Branch 26 IF_ICMPGE L578 - false
   * Goal 53. weka.experiment.ResultMatrix.setSize(II)V: I88 Branch 27 IF_ICMPGE L579 - true
   * Goal 54. weka.experiment.ResultMatrix.setSize(II)V: I88 Branch 27 IF_ICMPGE L579 - false
   * Goal 55. weka.experiment.ResultMatrix.setSize(II)V: I124 Branch 28 IF_ICMPGE L583 - true
   * Goal 56. weka.experiment.ResultMatrix.setSize(II)V: I124 Branch 28 IF_ICMPGE L583 - false
   * Goal 57. weka.experiment.ResultMatrix.setSize(II)V: I158 Branch 29 IF_ICMPGE L585 - true
   * Goal 58. weka.experiment.ResultMatrix.setSize(II)V: I158 Branch 29 IF_ICMPGE L585 - false
   * Goal 59. weka.experiment.ResultMatrix.setMeanPrec(I)V: I6 Branch 30 IFLT L599 - false
   * Goal 60. weka.experiment.ResultMatrix.setPrintColNames(Z)V: I11 Branch 38 IFNE L1018 - false
   * Goal 61. weka.experiment.ResultMatrix.setPrintRowNames(Z)V: I11 Branch 39 IFNE L1059 - false
   * Goal 62. weka.experiment.ResultMatrix.getVisibleColCount()I: I15 Branch 40 IF_ICMPGE L1185 - true
   * Goal 63. weka.experiment.ResultMatrix.getVisibleColCount()I: I15 Branch 40 IF_ICMPGE L1185 - false
   * Goal 64. weka.experiment.ResultMatrix.getVisibleColCount()I: I24 Branch 41 IFNE L1186 - true
   * Goal 65. weka.experiment.ResultMatrix.getVisibleColCount()I: I24 Branch 41 IFNE L1186 - false
   * Goal 66. weka.experiment.ResultMatrix.getVisibleRowCount()I: I15 Branch 42 IF_ICMPGE L1212 - true
   * Goal 67. weka.experiment.ResultMatrix.getVisibleRowCount()I: I15 Branch 42 IF_ICMPGE L1212 - false
   * Goal 68. weka.experiment.ResultMatrix.getVisibleRowCount()I: I24 Branch 43 IFNE L1213 - true
   * Goal 69. weka.experiment.ResultMatrix.getVisibleRowCount()I: I24 Branch 43 IFNE L1213 - false
   * Goal 70. weka.experiment.ResultMatrix.getColName(I)Ljava/lang/String;: I10 Branch 46 IFLT L1249 - false
   * Goal 71. weka.experiment.ResultMatrix.getColName(I)Ljava/lang/String;: I17 Branch 47 IF_ICMPGE L1249 - false
   * Goal 72. weka.experiment.ResultMatrix.getColName(I)Ljava/lang/String;: I25 Branch 48 IFEQ L1250 - true
   * Goal 73. weka.experiment.ResultMatrix.getColName(I)Ljava/lang/String;: I48 Branch 49 IFEQ L1255 - false
   * Goal 74. weka.experiment.ResultMatrix.getRowName(I)Ljava/lang/String;: I10 Branch 52 IFLT L1296 - false
   * Goal 75. weka.experiment.ResultMatrix.getRowName(I)Ljava/lang/String;: I17 Branch 53 IF_ICMPGE L1296 - false
   * Goal 76. weka.experiment.ResultMatrix.getRowName(I)Ljava/lang/String;: I25 Branch 54 IFEQ L1297 - true
   * Goal 77. weka.experiment.ResultMatrix.getRowName(I)Ljava/lang/String;: I25 Branch 54 IFEQ L1297 - false
   * Goal 78. weka.experiment.ResultMatrix.getRowName(I)Ljava/lang/String;: I48 Branch 55 IFEQ L1302 - true
   * Goal 79. weka.experiment.ResultMatrix.getRowName(I)Ljava/lang/String;: I48 Branch 55 IFEQ L1302 - false
   * Goal 80. weka.experiment.ResultMatrix.setColHidden(IZ)V: I6 Branch 56 IFLT L1321 - false
   * Goal 81. weka.experiment.ResultMatrix.setColHidden(IZ)V: I13 Branch 57 IF_ICMPGE L1321 - false
   * Goal 82. weka.experiment.ResultMatrix.getColHidden(I)Z: I6 Branch 58 IFLT L1333 - false
   * Goal 83. weka.experiment.ResultMatrix.getColHidden(I)Z: I13 Branch 59 IF_ICMPGE L1333 - false
   * Goal 84. weka.experiment.ResultMatrix.setRowHidden(IZ)V: I6 Branch 60 IFLT L1346 - false
   * Goal 85. weka.experiment.ResultMatrix.setRowHidden(IZ)V: I13 Branch 61 IF_ICMPGE L1346 - false
   * Goal 86. weka.experiment.ResultMatrix.getRowHidden(I)Z: I6 Branch 62 IFLT L1358 - false
   * Goal 87. weka.experiment.ResultMatrix.getRowHidden(I)Z: I13 Branch 63 IF_ICMPGE L1358 - false
   * Goal 88. weka.experiment.ResultMatrix.setMean(IID)V: I6 Branch 68 IFLT L1396 - false
   * Goal 89. weka.experiment.ResultMatrix.setMean(IID)V: I13 Branch 69 IF_ICMPGE L1396 - false
   * Goal 90. weka.experiment.ResultMatrix.setMean(IID)V: I18 Branch 70 IFLT L1396 - false
   * Goal 91. weka.experiment.ResultMatrix.setMean(IID)V: I25 Branch 71 IF_ICMPGE L1396 - false
   * Goal 92. weka.experiment.ResultMatrix.getMean(II)D: I6 Branch 72 IFLT L1410 - false
   * Goal 93. weka.experiment.ResultMatrix.getMean(II)D: I13 Branch 73 IF_ICMPGE L1410 - false
   * Goal 94. weka.experiment.ResultMatrix.getMean(II)D: I18 Branch 74 IFLT L1410 - false
   * Goal 95. weka.experiment.ResultMatrix.getMean(II)D: I25 Branch 75 IF_ICMPGE L1410 - false
   * Goal 96. weka.experiment.ResultMatrix.setStdDev(IID)V: I6 Branch 80 IFLT L1455 - false
   * Goal 97. weka.experiment.ResultMatrix.setStdDev(IID)V: I13 Branch 81 IF_ICMPGE L1455 - false
   * Goal 98. weka.experiment.ResultMatrix.setStdDev(IID)V: I18 Branch 82 IFLT L1455 - false
   * Goal 99. weka.experiment.ResultMatrix.setStdDev(IID)V: I25 Branch 83 IF_ICMPGE L1455 - false
   * Goal 100. weka.experiment.ResultMatrix.getStdDev(II)D: I6 Branch 84 IFLT L1469 - false
   * Goal 101. weka.experiment.ResultMatrix.getStdDev(II)D: I13 Branch 85 IF_ICMPGE L1469 - false
   * Goal 102. weka.experiment.ResultMatrix.getStdDev(II)D: I18 Branch 86 IFLT L1469 - false
   * Goal 103. weka.experiment.ResultMatrix.getStdDev(II)D: I25 Branch 87 IF_ICMPGE L1469 - false
   * Goal 104. weka.experiment.ResultMatrix.setSignificance(III)V: I6 Branch 88 IFLT L1484 - false
   * Goal 105. weka.experiment.ResultMatrix.setSignificance(III)V: I13 Branch 89 IF_ICMPGE L1484 - false
   * Goal 106. weka.experiment.ResultMatrix.setSignificance(III)V: I18 Branch 90 IFLT L1484 - false
   * Goal 107. weka.experiment.ResultMatrix.setSignificance(III)V: I25 Branch 91 IF_ICMPGE L1484 - false
   * Goal 108. weka.experiment.ResultMatrix.getSignificance(II)I: I6 Branch 92 IFLT L1498 - false
   * Goal 109. weka.experiment.ResultMatrix.getSignificance(II)I: I13 Branch 93 IF_ICMPGE L1498 - false
   * Goal 110. weka.experiment.ResultMatrix.getSignificance(II)I: I18 Branch 94 IFLT L1498 - false
   * Goal 111. weka.experiment.ResultMatrix.getSignificance(II)I: I25 Branch 95 IF_ICMPGE L1498 - false
   * Goal 112. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I10 Branch 96 IFLT L1519 - false
   * Goal 113. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I17 Branch 97 IF_ICMPGE L1519 - false
   * Goal 114. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I29 Branch 98 IF_ICMPGE L1520 - true
   * Goal 115. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I29 Branch 98 IF_ICMPGE L1520 - false
   * Goal 116. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I38 Branch 99 IFEQ L1521 - true
   * Goal 117. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I38 Branch 99 IFEQ L1521 - false
   * Goal 118. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I55 Branch 100 IFEQ L1525 - true
   * Goal 119. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I72 Branch 101 IF_ICMPNE L1528 - true
   * Goal 120. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I72 Branch 101 IF_ICMPNE L1528 - false
   * Goal 121. weka.experiment.ResultMatrix.getDisplayRow(I)I: I6 Branch 105 IFLT L1578 - false
   * Goal 122. weka.experiment.ResultMatrix.getDisplayRow(I)I: I13 Branch 106 IF_ICMPGE L1578 - false
   * Goal 123. weka.experiment.ResultMatrix.getDisplayRow(I)I: I21 Branch 107 IFNONNULL L1579 - false
   * Goal 124. weka.experiment.ResultMatrix.getDisplayCol(I)I: I6 Branch 111 IFLT L1631 - false
   * Goal 125. weka.experiment.ResultMatrix.getDisplayCol(I)I: I13 Branch 112 IF_ICMPGE L1631 - false
   * Goal 126. weka.experiment.ResultMatrix.getDisplayCol(I)I: I21 Branch 113 IFNONNULL L1632 - false
   * Goal 127. weka.experiment.ResultMatrix.doubleToString(DI)Ljava/lang/String;: I15 Branch 114 IF_ICMPNE L1658 - true
   * Goal 128. weka.experiment.ResultMatrix.doubleToString(DI)Ljava/lang/String;: I15 Branch 114 IF_ICMPNE L1658 - false
   * Goal 129. weka.experiment.ResultMatrix.doubleToString(DI)Ljava/lang/String;: I48 Branch 115 IF_ICMPGE L1663 - true
   * Goal 130. weka.experiment.ResultMatrix.doubleToString(DI)Ljava/lang/String;: I48 Branch 115 IF_ICMPGE L1663 - false
   * Goal 131. weka.experiment.ResultMatrix.trimString(Ljava/lang/String;I)Ljava/lang/String;: I6 Branch 116 IFLE L1679 - true
   * Goal 132. weka.experiment.ResultMatrix.trimString(Ljava/lang/String;I)Ljava/lang/String;: I6 Branch 116 IFLE L1679 - false
   * Goal 133. weka.experiment.ResultMatrix.trimString(Ljava/lang/String;I)Ljava/lang/String;: I13 Branch 117 IF_ICMPLE L1679 - true
   * Goal 134. weka.experiment.ResultMatrix.padString(Ljava/lang/String;IZ)Ljava/lang/String;: I15 Branch 118 IF_ICMPGE L1713 - true
   * Goal 135. weka.experiment.ResultMatrix.padString(Ljava/lang/String;IZ)Ljava/lang/String;: I62 Branch 120 IFLE L1721 - false
   * Goal 136. weka.experiment.ResultMatrix.padString(Ljava/lang/String;IZ)Ljava/lang/String;: I69 Branch 121 IF_ICMPLE L1721 - true
   * Goal 137. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I10 Branch 122 IFLT L1754 - false
   * Goal 138. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I19 Branch 123 IF_ICMPGE L1754 - false
   * Goal 139. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I31 Branch 124 IF_ICMPGE L1755 - true
   * Goal 140. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I31 Branch 124 IF_ICMPGE L1755 - false
   * Goal 141. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I38 Branch 125 IFNE L1757 - true
   * Goal 142. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I38 Branch 125 IFNE L1757 - false
   * Goal 143. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I43 Branch 126 IFEQ L1757 - true
   * Goal 144. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I60 Branch 127 IF_ICMPNE L1761 - true
   * Goal 145. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I60 Branch 127 IF_ICMPNE L1761 - false
   * Goal 146. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I65 Branch 128 IFEQ L1761 - true
   * Goal 147. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I84 Branch 129 IF_ICMPLE L1764 - true
   * Goal 148. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I84 Branch 129 IF_ICMPLE L1764 - false
   * Goal 149. weka.experiment.ResultMatrix.removeFilterName(Ljava/lang/String;)Ljava/lang/String;: I7 Branch 130 IFEQ L1781 - true
   * Goal 150. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I12 Branch 131 IFEQ L1813 - true
   * Goal 151. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I28 Branch 132 IFEQ L1816 - true
   * Goal 152. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I28 Branch 132 IFEQ L1816 - false
   * Goal 153. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I82 Branch 133 IF_ICMPGE L1826 - true
   * Goal 154. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I82 Branch 133 IF_ICMPGE L1826 - false
   * Goal 155. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I97 Branch 134 IFEQ L1828 - true
   * Goal 156. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I97 Branch 134 IFEQ L1828 - false
   * Goal 157. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I130 Branch 135 IFEQ L1835 - true
   * Goal 158. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I130 Branch 135 IFEQ L1835 - false
   * Goal 159. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I175 Branch 136 IF_ICMPGE L1846 - true
   * Goal 160. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I175 Branch 136 IF_ICMPGE L1846 - false
   * Goal 161. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I190 Branch 137 IFNE L1848 - true
   * Goal 162. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I190 Branch 137 IFNE L1848 - false
   * Goal 163. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I232 Branch 138 IF_ICMPGE L1857 - true
   * Goal 164. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I232 Branch 138 IF_ICMPGE L1857 - false
   * Goal 165. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I247 Branch 139 IFEQ L1859 - true
   * Goal 166. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I247 Branch 139 IFEQ L1859 - false
   * Goal 167. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I269 Branch 140 IF_ICMPGE L1863 - true
   * Goal 168. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I269 Branch 140 IF_ICMPGE L1863 - false
   * Goal 169. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I284 Branch 141 IFEQ L1865 - true
   * Goal 170. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I284 Branch 141 IFEQ L1865 - false
   * Goal 171. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I301 Branch 142 IFNE L1869 - false
   * Goal 172. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I317 Branch 143 IFNE L1872 - true
   * Goal 173. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I355 Branch 144 IFEQ L1879 - true
   * Goal 174. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I355 Branch 144 IFEQ L1879 - false
   * Goal 175. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I362 Branch 145 IFNE L1880 - true
   * Goal 176. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I385 Branch 146 IFEQ L1882 - true
   * Goal 177. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I422 Branch 147 IFNE L1890 - true
   * Goal 178. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I441 Branch 148 TABLESWITCH L1894 Case 0 - true
   * Goal 179. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I441 Branch 148 TABLESWITCH L1894 Case 0 - false
   * Goal 180. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I441 Branch 149 TABLESWITCH L1894 Case 1 - true
   * Goal 181. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I441 Branch 149 TABLESWITCH L1894 Case 1 - false
   * Goal 182. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I441 Branch 150 TABLESWITCH L1894 Case 2 - true
   * Goal 183. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I441 Branch 150 TABLESWITCH L1894 Case 2 - false
   * Goal 184. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I441 Branch 151 TABLESWITCH L1894 Default-Case - false
   * Goal 185. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I508 Branch 152 IFEQ L1913 - true
   * Goal 186. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I673 Branch 156 IF_ICMPGE L1948 - true
   * Goal 187. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I673 Branch 156 IF_ICMPGE L1948 - false
   * Goal 188. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I688 Branch 157 IFEQ L1950 - true
   * Goal 189. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I688 Branch 157 IFEQ L1950 - false
   * Goal 190. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I713 Branch 158 IFEQ L1958 - true
   * Goal 191. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I713 Branch 158 IFEQ L1958 - false
   * Goal 192. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I800 Branch 159 IF_ICMPGE L1976 - true
   * Goal 193. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I800 Branch 159 IF_ICMPGE L1976 - false
   * Goal 194. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I808 Branch 160 IF_ICMPNE L1978 - true
   * Goal 195. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I808 Branch 160 IF_ICMPNE L1978 - false
   * Goal 196. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I814 Branch 161 IFNE L1978 - true
   * Goal 197. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I814 Branch 161 IFNE L1978 - false
   * Goal 198. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I821 Branch 162 IF_ICMPNE L1978 - true
   * Goal 199. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I821 Branch 162 IF_ICMPNE L1978 - false
   * Goal 200. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I827 Branch 163 IFNE L1978 - true
   * Goal 201. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I827 Branch 163 IFNE L1978 - false
   * Goal 202. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I845 Branch 164 IF_ICMPGE L1982 - true
   * Goal 203. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I845 Branch 164 IF_ICMPGE L1982 - false
   * Goal 204. weka.experiment.ResultMatrix.isRowName(I)Z: I6 Branch 165 IFNE L2000 - true
   * Goal 205. weka.experiment.ResultMatrix.isRowName(I)Z: I6 Branch 165 IFNE L2000 - false
   * Goal 206. weka.experiment.ResultMatrix.isMean(I)Z: I9 Branch 166 IFNE L2012 - true
   * Goal 207. weka.experiment.ResultMatrix.isMean(I)Z: I9 Branch 166 IFNE L2012 - false
   * Goal 208. weka.experiment.ResultMatrix.isMean(I)Z: I23 Branch 167 IFGE L2018 - true
   * Goal 209. weka.experiment.ResultMatrix.isMean(I)Z: I35 Branch 168 IFEQ L2021 - true
   * Goal 210. weka.experiment.ResultMatrix.isMean(I)Z: I35 Branch 168 IFEQ L2021 - false
   * Goal 211. weka.experiment.ResultMatrix.isMean(I)Z: I45 Branch 169 IF_ICMPNE L2022 - true
   * Goal 212. weka.experiment.ResultMatrix.isMean(I)Z: I45 Branch 169 IF_ICMPNE L2022 - false
   * Goal 213. weka.experiment.ResultMatrix.isMean(I)Z: I63 Branch 170 IFNE L2024 - true
   * Goal 214. weka.experiment.ResultMatrix.isMean(I)Z: I63 Branch 170 IFNE L2024 - false
   * Goal 215. weka.experiment.ResultMatrix.isStdDev(I)Z: I13 Branch 173 IFEQ L2053 - true
   * Goal 216. weka.experiment.ResultMatrix.isStdDev(I)Z: I13 Branch 173 IFEQ L2053 - false
   * Goal 217. weka.experiment.ResultMatrix.isStdDev(I)Z: I20 Branch 174 IFNE L2054 - true
   * Goal 218. weka.experiment.ResultMatrix.isStdDev(I)Z: I20 Branch 174 IFNE L2054 - false
   * Goal 219. weka.experiment.ResultMatrix.isStdDev(I)Z: I34 Branch 175 IFGE L2060 - true
   * Goal 220. weka.experiment.ResultMatrix.isStdDev(I)Z: I34 Branch 175 IFGE L2060 - false
   * Goal 221. weka.experiment.ResultMatrix.isStdDev(I)Z: I48 Branch 176 IF_ICMPNE L2063 - true
   * Goal 222. weka.experiment.ResultMatrix.isStdDev(I)Z: I48 Branch 176 IF_ICMPNE L2063 - false
   * Goal 223. weka.experiment.ResultMatrix.isSignificance(I)Z: I13 Branch 177 IFEQ L2080 - true
   * Goal 224. weka.experiment.ResultMatrix.isSignificance(I)Z: I13 Branch 177 IFEQ L2080 - false
   * Goal 225. weka.experiment.ResultMatrix.isSignificance(I)Z: I23 Branch 178 IFGE L2083 - true
   * Goal 226. weka.experiment.ResultMatrix.isSignificance(I)Z: I37 Branch 179 IF_ICMPNE L2086 - false
   * Goal 227. weka.experiment.ResultMatrix.isSignificance(I)Z: I53 Branch 180 IFGE L2089 - true
   * Goal 228. weka.experiment.ResultMatrix.isSignificance(I)Z: I67 Branch 181 IF_ICMPNE L2092 - false
   * Goal 229. weka.experiment.ResultMatrix.addHeader(Ljava/lang/String;Ljava/lang/String;)V: I14 Branch 182 IF_ICMPLE L2131 - true
   * Goal 230. weka.experiment.ResultMatrix.addHeader(Ljava/lang/String;Ljava/lang/String;)V: I14 Branch 182 IF_ICMPLE L2131 - false
   */

  @Test
  public void test86()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ResultMatrixHTML.main(stringArray0);
  }
}
