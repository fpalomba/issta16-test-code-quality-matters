/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 18 22:49:50 GMT 2015
 */

package weka.experiment;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.TooManyResourcesException;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.junit.runner.RunWith;
import weka.experiment.ResultMatrix;
import weka.experiment.ResultMatrixCSV;
import weka.experiment.ResultMatrixGnuPlot;
import weka.experiment.ResultMatrixHTML;
import weka.experiment.ResultMatrixLatex;
import weka.experiment.ResultMatrixPlainText;
import weka.experiment.ResultMatrixSignificance;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ResultMatrix_ESTest extends ResultMatrix_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.trimString(Ljava/lang/String;I)Ljava/lang/String;: I13 Branch 117 IF_ICMPLE L1679 - false
   */

  @Test
  public void test00()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      assertNotNull(resultMatrixGnuPlot0);
      
      String string0 = resultMatrixGnuPlot0.colNameWidthTipText();
      assertEquals("The maximum width of the column names (0 = optimal).", string0);
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      assertNotNull(string0);
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance((ResultMatrix) resultMatrixGnuPlot0);
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(50, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      assertNotNull(resultMatrixSignificance0);
      
      int int0 = resultMatrixSignificance0.getColCount();
      assertEquals(1, int0);
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(50, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      
      String string1 = resultMatrixSignificance0.trimString("The maximum width of the column names (0 = optimal).", 1);
      assertNotSame(string1, string0);
      assertEquals("T", string1);
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(50, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  //Test case number: 1
  /*
   * 8 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.showAverageTipText()Ljava/lang/String;: root-Branch
   * Goal 2. weka.experiment.ResultMatrix.isStdDev(I)Z: I13 Branch 173 IFEQ L2053 - false
   * Goal 3. weka.experiment.ResultMatrix.isStdDev(I)Z: I20 Branch 174 IFNE L2054 - true
   * Goal 4. weka.experiment.ResultMatrix.isStdDev(I)Z: I20 Branch 174 IFNE L2054 - false
   * Goal 5. weka.experiment.ResultMatrix.isStdDev(I)Z: I34 Branch 175 IFGE L2060 - true
   * Goal 6. weka.experiment.ResultMatrix.isStdDev(I)Z: I34 Branch 175 IFGE L2060 - false
   * Goal 7. weka.experiment.ResultMatrix.isStdDev(I)Z: I48 Branch 176 IF_ICMPNE L2063 - true
   * Goal 8. weka.experiment.ResultMatrix.isStdDev(I)Z: I48 Branch 176 IF_ICMPNE L2063 - false
   */

  @Test
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[4];
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      assertNotNull(resultMatrixGnuPlot0);
      
      ResultMatrixHTML.main(stringArray0);
      String string0 = resultMatrixGnuPlot0.showAverageTipText();
      assertEquals("Whether to show the row with averages.", string0);
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      assertNotNull(string0);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setColHidden(IZ)V: I6 Branch 56 IFLT L1321 - true
   */

  @Test
  public void test02()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertNotNull(resultMatrixHTML0);
      
      boolean boolean0 = resultMatrixHTML0.getRemoveFilterName();
      assertFalse(boolean0);
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      
      resultMatrixHTML0.setColHidden((-595), false);
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.getColName(I)Ljava/lang/String;: I17 Branch 47 IF_ICMPGE L1249 - true
   * Goal 2. weka.experiment.ResultMatrix.getMean(II)D: I13 Branch 73 IF_ICMPGE L1410 - true
   */

  @Test
  public void test03()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixLatex0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixLatex0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixLatex0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixLatex0);
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertNotNull(resultMatrixHTML0);
      
      double double0 = resultMatrixHTML0.getMean(55, 55);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      
      String string0 = resultMatrixLatex0.getColName(55);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixLatex0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixLatex0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixLatex0.SIGNIFICANCE_WIN);
      assertNull(string0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.printColNamesTipText()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test04()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertNotNull(resultMatrixHTML0);
      
      String string0 = resultMatrixHTML0.printColNamesTipText();
      assertEquals("Whether to output column names or just numbers representing them.", string0);
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertNotNull(string0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setRowName(ILjava/lang/String;)V: I6 Branch 50 IFLT L1274 - true
   */

  @Test
  public void test05()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertNotNull(resultMatrixHTML0);
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(1, resultMatrixPlainText0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixPlainText0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixPlainText0.SIGNIFICANCE_TIE);
      assertNotNull(resultMatrixPlainText0);
      
      resultMatrixPlainText0.setRowName((-3527), "*");
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(1, resultMatrixPlainText0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixPlainText0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixPlainText0.SIGNIFICANCE_TIE);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setColHidden(IZ)V: I13 Branch 57 IF_ICMPGE L1321 - true
   */

  @Test
  public void test06()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertNotNull(resultMatrixHTML0);
      
      boolean boolean0 = resultMatrixHTML0.getRemoveFilterName();
      assertFalse(boolean0);
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      
      resultMatrixHTML0.setColHidden(0, false);
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setSignificanceWidth(I)V: I6 Branch 36 IFLT L827 - true
   */

  @Test
  public void test07()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertNotNull(resultMatrixGnuPlot0);
      
      resultMatrixGnuPlot0.setSignificanceWidth((-29));
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
  }

  //Test case number: 8
  /*
   * 2 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.setCount(ID)V: I6 Branch 64 IFLT L1371 - false
   * Goal 2. weka.experiment.ResultMatrix.setCount(ID)V: I13 Branch 65 IF_ICMPGE L1371 - false
   */

  @Test
  public void test08()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixGnuPlot0);
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV((ResultMatrix) resultMatrixGnuPlot0);
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(50, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertTrue(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixCSV0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixCSV0.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixCSV0);
      
      resultMatrixCSV0.setCount(0, (double) 676);
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(50, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertTrue(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixCSV0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixCSV0.SIGNIFICANCE_TIE);
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.countWidthTipText()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test09()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertNotNull(resultMatrixSignificance0);
      
      String string0 = resultMatrixSignificance0.countWidthTipText();
      assertEquals("The width of the counts (0 = optimal).", string0);
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertNotNull(string0);
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.toString()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test10()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(714, 60);
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(714, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(714, resultMatrixHTML0.getVisibleColCount());
      assertEquals(60, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(60, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixHTML0);
      
      // Undeclared exception!
      try {
        String string0 = resultMatrixHTML0.toString();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 100000
         //
      }
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.listOptions()Ljava/util/Enumeration;: root-Branch
   */

  @Test
  public void test11()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixCSV0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixCSV0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixCSV0);
      
      Enumeration enumeration0 = resultMatrixCSV0.listOptions();
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixCSV0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixCSV0.SIGNIFICANCE_WIN);
      assertNotNull(enumeration0);
  }

  //Test case number: 12
  /*
   * 5 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.setRowName(ILjava/lang/String;)V: I13 Branch 51 IF_ICMPGE L1274 - false
   * Goal 2. weka.experiment.ResultMatrix.getCount(I)D: I13 Branch 67 IF_ICMPGE L1382 - false
   * Goal 3. weka.experiment.ResultMatrix.padString(Ljava/lang/String;IZ)Ljava/lang/String;: I69 Branch 121 IF_ICMPLE L1721 - false
   * Goal 4. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I43 Branch 126 IFEQ L1757 - false
   * Goal 5. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I65 Branch 128 IFEQ L1761 - false
   */

  @Test
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[8];
      ResultMatrixPlainText.main(stringArray0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixGnuPlot0);
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixPlainText0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixPlainText0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixPlainText0);
      
      int int0 = resultMatrixPlainText0.getStdDevWidth();
      assertEquals(0, int0);
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixPlainText0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixPlainText0.SIGNIFICANCE_WIN);
      
      resultMatrixPlainText0.setRowName(0, "");
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixPlainText0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixPlainText0.SIGNIFICANCE_WIN);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setStdDevPrec(I)V: I6 Branch 31 IFLT L637 - true
   */

  @Test
  public void test13()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixLatex0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixLatex0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixLatex0.SIGNIFICANCE_LOSS);
      assertNotNull(resultMatrixLatex0);
      
      resultMatrixLatex0.setStdDevPrec((-747));
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixLatex0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixLatex0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixLatex0.SIGNIFICANCE_LOSS);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setCountWidth(I)V: I6 Branch 37 IFLT L865 - true
   */

  @Test
  public void test14()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixCSV0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixCSV0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixCSV0.SIGNIFICANCE_LOSS);
      assertNotNull(resultMatrixCSV0);
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML((ResultMatrix) resultMatrixCSV0);
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixCSV0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixCSV0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixCSV0.SIGNIFICANCE_LOSS);
      assertNotNull(resultMatrixHTML0);
      
      resultMatrixHTML0.setCountWidth((-2028));
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixCSV0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixCSV0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixCSV0.SIGNIFICANCE_LOSS);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setColName(ILjava/lang/String;)V: I6 Branch 44 IFLT L1227 - true
   */

  @Test
  public void test15()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertNotNull(resultMatrixHTML0);
      
      resultMatrixHTML0.setColName((-3), ")");
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.showStdDevTipText()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test16()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(45, 45);
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(45, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(45, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(45, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(45, resultMatrixHTML0.getColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixHTML0);
      
      String string0 = resultMatrixHTML0.showStdDevTipText();
      assertEquals("Whether to display the standard deviation column.", string0);
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(45, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(45, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(45, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(45, resultMatrixHTML0.getColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertNotNull(string0);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getSignificance(II)I: I13 Branch 93 IF_ICMPGE L1498 - true
   */

  @Test
  public void test17()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(0, 0);
      assertEquals(0, resultMatrixPlainText0.getVisibleColCount());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getColCount());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixPlainText0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixPlainText0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixPlainText0);
      
      int int0 = resultMatrixPlainText0.getSignificance(0, 0);
      assertEquals(0, int0);
      assertEquals(0, resultMatrixPlainText0.getVisibleColCount());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getColCount());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixPlainText0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixPlainText0.SIGNIFICANCE_WIN);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setRowHidden(IZ)V: I13 Branch 61 IF_ICMPGE L1346 - true
   */

  @Test
  public void test18()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertNotNull(resultMatrixHTML0);
      
      resultMatrixHTML0.setRowHidden(27, false);
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.stdDevPrecTipText()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test19()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(1, resultMatrixLatex0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixLatex0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixLatex0.SIGNIFICANCE_LOSS);
      assertNotNull(resultMatrixLatex0);
      
      String string0 = resultMatrixLatex0.stdDevPrecTipText();
      assertEquals("The number of decimals after the decimal point for the standard deviation.", string0);
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(1, resultMatrixLatex0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixLatex0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixLatex0.SIGNIFICANCE_LOSS);
      assertNotNull(string0);
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getStdDev(II)D: I13 Branch 85 IF_ICMPGE L1469 - true
   */

  @Test
  public void test20()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      assertEquals(0, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertNotNull(resultMatrixSignificance0);
      
      double double0 = resultMatrixSignificance0.getStdDev(0, 0);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
  }

  //Test case number: 21
  /*
   * 4 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.setRanking([[I)V: I32 Branch 186 IF_ICMPGE L2251 - true
   * Goal 2. weka.experiment.ResultMatrix.setRanking([[I)V: I32 Branch 186 IF_ICMPGE L2251 - false
   * Goal 3. weka.experiment.ResultMatrix.setRanking([[I)V: I46 Branch 187 IF_ICMPGE L2252 - true
   * Goal 4. weka.experiment.ResultMatrix.setRanking([[I)V: I46 Branch 187 IF_ICMPGE L2252 - false
   */

  @Test
  public void test21()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(2, resultMatrixPlainText0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixPlainText0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixPlainText0.SIGNIFICANCE_TIE);
      assertNotNull(resultMatrixPlainText0);
      
      int[][] intArray0 = new int[10][6];
      resultMatrixPlainText0.setRanking(intArray0);
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(2, resultMatrixPlainText0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixPlainText0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixPlainText0.SIGNIFICANCE_TIE);
  }

  //Test case number: 22
  /*
   * 2 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.significanceWidthTipText()Ljava/lang/String;: root-Branch
   * Goal 2. weka.experiment.ResultMatrix.setRowHidden(IZ)V: I6 Branch 60 IFLT L1346 - true
   */

  @Test
  public void test22()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(27, 27);
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(27, resultMatrixHTML0.getVisibleColCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(27, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(27, resultMatrixHTML0.getColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(27, resultMatrixHTML0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertNotNull(resultMatrixHTML0);
      
      resultMatrixHTML0.setRowHidden((-1154), true);
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(27, resultMatrixHTML0.getVisibleColCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(27, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(27, resultMatrixHTML0.getColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(27, resultMatrixHTML0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixPlainText0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixPlainText0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixPlainText0);
      
      String string0 = resultMatrixPlainText0.significanceWidthTipText();
      assertEquals("The width of the significance indicator (0 = optimal).", string0);
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixPlainText0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixPlainText0.SIGNIFICANCE_WIN);
      assertNotNull(string0);
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getDisplayCol(I)I: I13 Branch 112 IF_ICMPGE L1631 - true
   */

  @Test
  public void test23()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(2, resultMatrixCSV0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixCSV0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixCSV0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixCSV0);
      
      int int0 = resultMatrixCSV0.getDisplayCol(22);
      assertEquals((-1), int0);
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(2, resultMatrixCSV0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixCSV0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixCSV0.SIGNIFICANCE_WIN);
  }

  //Test case number: 24
  /*
   * 3 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I339 Branch 21 IFNULL L505 - false
   * Goal 2. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I368 Branch 22 IF_ICMPGE L508 - false
   * Goal 3. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I407 Branch 23 IF_ICMPGE L512 - false
   */

  @Test
  public void test24()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixCSV0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixCSV0.SIGNIFICANCE_TIE);
      assertNotNull(resultMatrixCSV0);
      
      int[][] intArray0 = new int[7][1];
      resultMatrixCSV0.m_NonSigWins = intArray0;
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixCSV0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixCSV0.SIGNIFICANCE_TIE);
      
      ResultMatrixCSV resultMatrixCSV1 = null;
      try {
        resultMatrixCSV1 = new ResultMatrixCSV((ResultMatrix) resultMatrixCSV0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 25
  /*
   * 4 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.setSummary([[I[[I)V: I34 Branch 184 IF_ICMPGE L2204 - true
   * Goal 2. weka.experiment.ResultMatrix.setSummary([[I[[I)V: I34 Branch 184 IF_ICMPGE L2204 - false
   * Goal 3. weka.experiment.ResultMatrix.setSummary([[I[[I)V: I49 Branch 185 IF_ICMPGE L2205 - true
   * Goal 4. weka.experiment.ResultMatrix.setSummary([[I[[I)V: I49 Branch 185 IF_ICMPGE L2205 - false
   */

  @Test
  public void test25()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixSignificance0);
      
      int[][] intArray0 = new int[10][5];
      resultMatrixSignificance0.setSummary(intArray0, intArray0);
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
  }

  //Test case number: 26
  /*
   * 3 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.getRowName(I)Ljava/lang/String;: I10 Branch 52 IFLT L1296 - true
   * Goal 2. weka.experiment.ResultMatrix.setColOrder([I)V: I6 Branch 108 IFNONNULL L1598 - true
   * Goal 3. weka.experiment.ResultMatrix.setColOrder([I)V: I25 Branch 109 IF_ICMPNE L1602 - true
   */

  @Test
  public void test26()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixCSV0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixCSV0.SIGNIFICANCE_LOSS);
      assertNotNull(resultMatrixCSV0);
      
      String string0 = resultMatrixCSV0.getRowName((-2770));
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixCSV0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixCSV0.SIGNIFICANCE_LOSS);
      assertNull(string0);
      
      int[] intArray0 = new int[4];
      resultMatrixCSV0.setColOrder(intArray0);
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixCSV0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixCSV0.SIGNIFICANCE_LOSS);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setRowNameWidth(I)V: I6 Branch 33 IFLT L713 - true
   */

  @Test
  public void test27()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixHTML0);
      
      int int0 = resultMatrixHTML0.getSignificanceWidth();
      assertEquals(0, int0);
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertNotNull(resultMatrixSignificance0);
      
      resultMatrixSignificance0.setRowNameWidth((-965));
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setPrintRowNames(Z)V: I11 Branch 39 IFNE L1059 - true
   */

  @Test
  public void test28()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixSignificance0);
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV((ResultMatrix) resultMatrixSignificance0);
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixCSV0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixCSV0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixCSV0.SIGNIFICANCE_TIE);
      assertNotNull(resultMatrixCSV0);
      
      resultMatrixCSV0.m_RemoveFilterName = true;
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixCSV0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixCSV0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixCSV0.SIGNIFICANCE_TIE);
      
      resultMatrixCSV0.setPrintRowNames(true);
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixCSV0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixCSV0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixCSV0.SIGNIFICANCE_TIE);
  }

  //Test case number: 29
  /*
   * 2 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.setPrintColNames(Z)V: I11 Branch 38 IFNE L1018 - true
   * Goal 2. weka.experiment.ResultMatrix.setMean(IID)V: I13 Branch 69 IF_ICMPGE L1396 - true
   */

  @Test
  public void test29()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      assertNotNull(resultMatrixGnuPlot0);
      
      resultMatrixGnuPlot0.setPrintColNames(true);
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      
      resultMatrixGnuPlot0.setMean(6307, 6307, (double) 6307);
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
  }

  //Test case number: 30
  /*
   * 5 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.padString(Ljava/lang/String;IZ)Ljava/lang/String;: I22 Branch 119 IFEQ L1714 - false
   * Goal 2. weka.experiment.ResultMatrix.isMean(I)Z: I35 Branch 168 IFEQ L2021 - false
   * Goal 3. weka.experiment.ResultMatrix.isMean(I)Z: I45 Branch 169 IF_ICMPNE L2022 - true
   * Goal 4. weka.experiment.ResultMatrix.isMean(I)Z: I45 Branch 169 IF_ICMPNE L2022 - false
   * Goal 5. weka.experiment.ResultMatrix.isAverage(I)Z: I7 Branch 171 IFEQ L2036 - true
   */

  @Test
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ResultMatrixLatex.main(stringArray0);
  }

  //Test case number: 31
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I10 Branch 96 IFLT L1519 - true
   */

  @Test
  public void test31()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixHTML0);
      
      int int0 = resultMatrixHTML0.getSignificanceCount((-760), (-760));
      assertEquals(0, int0);
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
  }

  //Test case number: 32
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getSummaryTitle(I)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test32()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixLatex0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixLatex0.SIGNIFICANCE_LOSS);
      assertNotNull(resultMatrixLatex0);
      
      String string0 = resultMatrixLatex0.getSummaryTitle(1129);
      assertEquals("l", string0);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixLatex0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixLatex0.SIGNIFICANCE_LOSS);
      assertNotNull(string0);
  }

  //Test case number: 33
  /*
   * 3 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.enumerateColNamesTipText()Ljava/lang/String;: root-Branch
   * Goal 2. weka.experiment.ResultMatrix.getColHidden(I)Z: I6 Branch 58 IFLT L1333 - true
   * Goal 3. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I362 Branch 145 IFNE L1880 - false
   */

  @Test
  public void test33()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      assertNotNull(resultMatrixGnuPlot0);
      
      resultMatrixGnuPlot0.setShowStdDev(true);
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertTrue(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      
      String string0 = resultMatrixGnuPlot0.toStringMatrix();
      assertEquals("\n##################\n# file: plot.dat #\n##################\n# generated by WEKA 3.7.7\n# contains the data for the plot\n\n# key for the x-axis\n# 1 - row0\n\n# data for the plot\n1 '' ''\n#######\n# end #\n#######\n\n##################\n# file: plot.scr #\n##################\n# generated by WEKA 3.7.7\n# script to plot the data\n\n# display it in a window:\nset terminal x11\nset output\n\n# to display all data rows:\nset xrange [0:2]\n\n# axis labels, e.g.:\n#set xlabel \"Datasets\"\n#set ylabel \"Accuracy in %\"\n\n# the plot commands\nplot \"plot.dat\" using 1:2:3 with yerrorbars title \"col0\"\n\n# generate ps:\n#set terminal postscript\n#set output \"plot.ps\"\n#replot\n\n# generate png:\n#set terminal png size 800,600\n#set output \"plot.png\"\n#replot\n\n# wait for user to hit <Return>\npause -1\n#######\n# end #\n#######\n", string0);
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertTrue(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      assertNotNull(string0);
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 6876);
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(6876, resultMatrixSignificance0.getVisibleRowCount());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(6876, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getColCount());
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertNotNull(resultMatrixSignificance0);
      
      boolean boolean0 = resultMatrixSignificance0.getColHidden((-317));
      assertFalse(boolean0);
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(6876, resultMatrixSignificance0.getVisibleRowCount());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(6876, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getColCount());
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML((ResultMatrix) resultMatrixSignificance0);
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(6876, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(6876, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(40, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(6876, resultMatrixSignificance0.getVisibleRowCount());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(6876, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getColCount());
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertNotNull(resultMatrixHTML0);
      
      String string1 = resultMatrixHTML0.enumerateColNamesTipText();
      assertNotSame(string1, string0);
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", string1);
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(6876, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(6876, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(40, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(6876, resultMatrixSignificance0.getVisibleRowCount());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(6876, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getColCount());
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  //Test case number: 34
  /*
   * 22 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.headerKeys()Ljava/util/Enumeration;: root-Branch
   * Goal 2. weka.experiment.ResultMatrix.getColName(I)Ljava/lang/String;: I25 Branch 48 IFEQ L1250 - false
   * Goal 3. weka.experiment.ResultMatrix.getColName(I)Ljava/lang/String;: I48 Branch 49 IFEQ L1255 - true
   * Goal 4. weka.experiment.ResultMatrix.getStdDev(II)D: I6 Branch 84 IFLT L1469 - false
   * Goal 5. weka.experiment.ResultMatrix.getStdDev(II)D: I13 Branch 85 IF_ICMPGE L1469 - false
   * Goal 6. weka.experiment.ResultMatrix.getStdDev(II)D: I18 Branch 86 IFLT L1469 - false
   * Goal 7. weka.experiment.ResultMatrix.getStdDev(II)D: I25 Branch 87 IF_ICMPGE L1469 - false
   * Goal 8. weka.experiment.ResultMatrix.doubleToString(DI)Ljava/lang/String;: I15 Branch 114 IF_ICMPNE L1658 - true
   * Goal 9. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I28 Branch 132 IFEQ L1816 - false
   * Goal 10. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I130 Branch 135 IFEQ L1835 - false
   * Goal 11. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I355 Branch 144 IFEQ L1879 - false
   * Goal 12. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I362 Branch 145 IFNE L1880 - true
   * Goal 13. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I385 Branch 146 IFEQ L1882 - true
   * Goal 14. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I713 Branch 158 IFEQ L1958 - false
   * Goal 15. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I814 Branch 161 IFNE L1978 - true
   * Goal 16. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I827 Branch 163 IFNE L1978 - true
   * Goal 17. weka.experiment.ResultMatrix.isSignificance(I)Z: I13 Branch 177 IFEQ L2080 - false
   * Goal 18. weka.experiment.ResultMatrix.isSignificance(I)Z: I23 Branch 178 IFGE L2083 - true
   * Goal 19. weka.experiment.ResultMatrix.isSignificance(I)Z: I23 Branch 178 IFGE L2083 - false
   * Goal 20. weka.experiment.ResultMatrix.isSignificance(I)Z: I37 Branch 179 IF_ICMPNE L2086 - true
   * Goal 21. weka.experiment.ResultMatrix.isSignificance(I)Z: I37 Branch 179 IF_ICMPNE L2086 - false
   * Goal 22. weka.experiment.ResultMatrix.isSignificance(I)Z: I53 Branch 180 IFGE L2089 - false
   */

  @Test
  public void test34()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(0, resultMatrixPlainText0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixPlainText0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixPlainText0.SIGNIFICANCE_LOSS);
      assertNotNull(resultMatrixPlainText0);
      
      String[] stringArray0 = new String[5];
      Enumeration enumeration0 = resultMatrixPlainText0.headerKeys();
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(0, resultMatrixPlainText0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixPlainText0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixPlainText0.SIGNIFICANCE_LOSS);
      assertNotNull(enumeration0);
      
      ResultMatrixGnuPlot.main(stringArray0);
  }

  //Test case number: 35
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.meanPrecTipText()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test35()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertNotNull(resultMatrixSignificance0);
      
      String string0 = resultMatrixSignificance0.meanPrecTipText();
      assertEquals("The number of decimals after the decimal point for the mean.", string0);
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertNotNull(string0);
  }

  //Test case number: 36
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.enumerateRowNamesTipText()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test36()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixLatex0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixLatex0.SIGNIFICANCE_LOSS);
      assertNotNull(resultMatrixLatex0);
      
      String string0 = resultMatrixLatex0.enumerateRowNamesTipText();
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", string0);
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixLatex0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixLatex0.SIGNIFICANCE_LOSS);
      assertNotNull(string0);
  }

  //Test case number: 37
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getAverage(I)D: I6 Branch 76 IFLT L1429 - true
   */

  @Test
  public void test37()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertNotNull(resultMatrixHTML0);
      
      double double0 = resultMatrixHTML0.getAverage((-743));
      assertEquals(0.0, double0, 0.01D);
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
  }

  //Test case number: 38
  /*
   * 70 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.padString(Ljava/lang/String;I)Ljava/lang/String;: root-Branch
   * Goal 2. weka.experiment.ResultMatrix.getVisibleColCount()I: I24 Branch 41 IFNE L1186 - true
   * Goal 3. weka.experiment.ResultMatrix.getVisibleRowCount()I: I24 Branch 43 IFNE L1213 - true
   * Goal 4. weka.experiment.ResultMatrix.getRowName(I)Ljava/lang/String;: I25 Branch 54 IFEQ L1297 - true
   * Goal 5. weka.experiment.ResultMatrix.getRowName(I)Ljava/lang/String;: I48 Branch 55 IFEQ L1302 - false
   * Goal 6. weka.experiment.ResultMatrix.setColHidden(IZ)V: I6 Branch 56 IFLT L1321 - false
   * Goal 7. weka.experiment.ResultMatrix.setColHidden(IZ)V: I13 Branch 57 IF_ICMPGE L1321 - false
   * Goal 8. weka.experiment.ResultMatrix.setRowHidden(IZ)V: I6 Branch 60 IFLT L1346 - false
   * Goal 9. weka.experiment.ResultMatrix.setRowHidden(IZ)V: I13 Branch 61 IF_ICMPGE L1346 - false
   * Goal 10. weka.experiment.ResultMatrix.setMean(IID)V: I25 Branch 71 IF_ICMPGE L1396 - false
   * Goal 11. weka.experiment.ResultMatrix.setStdDev(IID)V: I13 Branch 81 IF_ICMPGE L1455 - false
   * Goal 12. weka.experiment.ResultMatrix.setStdDev(IID)V: I18 Branch 82 IFLT L1455 - false
   * Goal 13. weka.experiment.ResultMatrix.setStdDev(IID)V: I25 Branch 83 IF_ICMPGE L1455 - false
   * Goal 14. weka.experiment.ResultMatrix.setSignificance(III)V: I25 Branch 91 IF_ICMPGE L1484 - false
   * Goal 15. weka.experiment.ResultMatrix.getSignificance(II)I: I18 Branch 94 IFLT L1498 - false
   * Goal 16. weka.experiment.ResultMatrix.getSignificance(II)I: I25 Branch 95 IF_ICMPGE L1498 - false
   * Goal 17. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I38 Branch 99 IFEQ L1521 - false
   * Goal 18. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I55 Branch 100 IFEQ L1525 - true
   * Goal 19. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I72 Branch 101 IF_ICMPNE L1528 - true
   * Goal 20. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I72 Branch 101 IF_ICMPNE L1528 - false
   * Goal 21. weka.experiment.ResultMatrix.doubleToString(DI)Ljava/lang/String;: I15 Branch 114 IF_ICMPNE L1658 - false
   * Goal 22. weka.experiment.ResultMatrix.doubleToString(DI)Ljava/lang/String;: I48 Branch 115 IF_ICMPGE L1663 - true
   * Goal 23. weka.experiment.ResultMatrix.doubleToString(DI)Ljava/lang/String;: I48 Branch 115 IF_ICMPGE L1663 - false
   * Goal 24. weka.experiment.ResultMatrix.padString(Ljava/lang/String;IZ)Ljava/lang/String;: I15 Branch 118 IF_ICMPGE L1713 - false
   * Goal 25. weka.experiment.ResultMatrix.padString(Ljava/lang/String;IZ)Ljava/lang/String;: I22 Branch 119 IFEQ L1714 - true
   * Goal 26. weka.experiment.ResultMatrix.padString(Ljava/lang/String;IZ)Ljava/lang/String;: I62 Branch 120 IFLE L1721 - false
   * Goal 27. weka.experiment.ResultMatrix.padString(Ljava/lang/String;IZ)Ljava/lang/String;: I69 Branch 121 IF_ICMPLE L1721 - true
   * Goal 28. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I19 Branch 123 IF_ICMPGE L1754 - false
   * Goal 29. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I31 Branch 124 IF_ICMPGE L1755 - true
   * Goal 30. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I31 Branch 124 IF_ICMPGE L1755 - false
   * Goal 31. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I38 Branch 125 IFNE L1757 - true
   * Goal 32. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I38 Branch 125 IFNE L1757 - false
   * Goal 33. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I43 Branch 126 IFEQ L1757 - true
   * Goal 34. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I60 Branch 127 IF_ICMPNE L1761 - true
   * Goal 35. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I60 Branch 127 IF_ICMPNE L1761 - false
   * Goal 36. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I65 Branch 128 IFEQ L1761 - true
   * Goal 37. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I84 Branch 129 IF_ICMPLE L1764 - true
   * Goal 38. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I84 Branch 129 IF_ICMPLE L1764 - false
   * Goal 39. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I97 Branch 134 IFEQ L1828 - false
   * Goal 40. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I190 Branch 137 IFNE L1848 - true
   * Goal 41. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I247 Branch 139 IFEQ L1859 - false
   * Goal 42. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I284 Branch 141 IFEQ L1865 - false
   * Goal 43. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I301 Branch 142 IFNE L1869 - false
   * Goal 44. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I317 Branch 143 IFNE L1872 - true
   * Goal 45. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I422 Branch 147 IFNE L1890 - true
   * Goal 46. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I441 Branch 148 TABLESWITCH L1894 Case 0 - true
   * Goal 47. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I441 Branch 148 TABLESWITCH L1894 Case 0 - false
   * Goal 48. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I441 Branch 149 TABLESWITCH L1894 Case 1 - true
   * Goal 49. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I441 Branch 149 TABLESWITCH L1894 Case 1 - false
   * Goal 50. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I441 Branch 150 TABLESWITCH L1894 Case 2 - true
   * Goal 51. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I441 Branch 150 TABLESWITCH L1894 Case 2 - false
   * Goal 52. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I441 Branch 151 TABLESWITCH L1894 Default-Case - false
   * Goal 53. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I688 Branch 157 IFEQ L1950 - false
   * Goal 54. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I808 Branch 160 IF_ICMPNE L1978 - false
   * Goal 55. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I814 Branch 161 IFNE L1978 - false
   * Goal 56. weka.experiment.ResultMatrix.isRowName(I)Z: I6 Branch 165 IFNE L2000 - true
   * Goal 57. weka.experiment.ResultMatrix.isRowName(I)Z: I6 Branch 165 IFNE L2000 - false
   * Goal 58. weka.experiment.ResultMatrix.isMean(I)Z: I9 Branch 166 IFNE L2012 - true
   * Goal 59. weka.experiment.ResultMatrix.isMean(I)Z: I9 Branch 166 IFNE L2012 - false
   * Goal 60. weka.experiment.ResultMatrix.isMean(I)Z: I23 Branch 167 IFGE L2018 - true
   * Goal 61. weka.experiment.ResultMatrix.isMean(I)Z: I23 Branch 167 IFGE L2018 - false
   * Goal 62. weka.experiment.ResultMatrix.isMean(I)Z: I35 Branch 168 IFEQ L2021 - true
   * Goal 63. weka.experiment.ResultMatrix.isMean(I)Z: I63 Branch 170 IFNE L2024 - true
   * Goal 64. weka.experiment.ResultMatrix.isMean(I)Z: I63 Branch 170 IFNE L2024 - false
   * Goal 65. weka.experiment.ResultMatrix.isSignificance(I)Z: I13 Branch 177 IFEQ L2080 - true
   * Goal 66. weka.experiment.ResultMatrix.isSignificance(I)Z: I53 Branch 180 IFGE L2089 - true
   * Goal 67. weka.experiment.ResultMatrix.isSignificance(I)Z: I67 Branch 181 IF_ICMPNE L2092 - true
   * Goal 68. weka.experiment.ResultMatrix.isSignificance(I)Z: I67 Branch 181 IF_ICMPNE L2092 - false
   * Goal 69. weka.experiment.ResultMatrix.addHeader(Ljava/lang/String;Ljava/lang/String;)V: I14 Branch 182 IF_ICMPLE L2131 - true
   * Goal 70. weka.experiment.ResultMatrix.addHeader(Ljava/lang/String;Ljava/lang/String;)V: I14 Branch 182 IF_ICMPLE L2131 - false
   */

  @Test
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ResultMatrixSignificance.main(stringArray0);
  }

  //Test case number: 39
  /*
   * 2 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.setColName(ILjava/lang/String;)V: I6 Branch 44 IFLT L1227 - false
   * Goal 2. weka.experiment.ResultMatrix.setColName(ILjava/lang/String;)V: I13 Branch 45 IF_ICMPGE L1227 - true
   */

  @Test
  public void test39()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(56, 56);
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(56, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(56, resultMatrixSignificance0.getRowCount());
      assertEquals(56, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(56, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixSignificance0);
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML((ResultMatrix) resultMatrixSignificance0);
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(56, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(56, resultMatrixSignificance0.getRowCount());
      assertEquals(56, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(56, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(56, resultMatrixHTML0.getColCount());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(56, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(56, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(56, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertNotNull(resultMatrixHTML0);
      
      resultMatrixHTML0.setColName(56, "*");
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(56, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(56, resultMatrixSignificance0.getRowCount());
      assertEquals(56, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(56, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(56, resultMatrixHTML0.getColCount());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(56, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(56, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(56, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
  }

  //Test case number: 40
  /*
   * 4 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.setRowName(ILjava/lang/String;)V: I6 Branch 50 IFLT L1274 - false
   * Goal 2. weka.experiment.ResultMatrix.setRowName(ILjava/lang/String;)V: I13 Branch 51 IF_ICMPGE L1274 - true
   * Goal 3. weka.experiment.ResultMatrix.getRowName(I)Ljava/lang/String;: I17 Branch 53 IF_ICMPGE L1296 - true
   * Goal 4. weka.experiment.ResultMatrix.getHeader(Ljava/lang/String;)Ljava/lang/String;: I13 Branch 183 IFNE L2151 - true
   */

  @Test
  public void test40()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixSignificance0);
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(5547, 0);
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(5547, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(5547, resultMatrixCSV0.getColCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixCSV0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixCSV0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixCSV0.SIGNIFICANCE_TIE);
      assertNotNull(resultMatrixCSV0);
      
      String string0 = resultMatrixCSV0.getRowName(0);
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(5547, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(5547, resultMatrixCSV0.getColCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixCSV0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixCSV0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixCSV0.SIGNIFICANCE_TIE);
      assertNull(string0);
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(5547, 0);
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(5547, resultMatrixPlainText0.getColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(5547, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(2, resultMatrixPlainText0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixPlainText0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixPlainText0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixPlainText0);
      
      resultMatrixPlainText0.setRowName(0, "*");
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(5547, resultMatrixPlainText0.getColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(5547, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(2, resultMatrixPlainText0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixPlainText0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixPlainText0.SIGNIFICANCE_WIN);
      
      // Undeclared exception!
      try {
        String string1 = resultMatrixPlainText0.getHeader("[");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 41
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getRowHidden(I)Z: I13 Branch 63 IF_ICMPGE L1358 - true
   */

  @Test
  public void test41()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertNotNull(resultMatrixSignificance0);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot((ResultMatrix) resultMatrixSignificance0);
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getColCount());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(40, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertNotNull(resultMatrixGnuPlot0);
      
      boolean boolean0 = resultMatrixGnuPlot0.getRowHidden(0);
      assertFalse(boolean0);
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getColCount());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(40, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
  }

  //Test case number: 42
  /*
   * 3 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;I)I: root-Branch
   * Goal 2. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I10 Branch 122 IFLT L1754 - false
   * Goal 3. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I19 Branch 123 IF_ICMPGE L1754 - true
   */

  @Test
  public void test42()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixPlainText0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixPlainText0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixPlainText0);
      
      String[][] stringArray0 = new String[2][1];
      int int0 = resultMatrixPlainText0.getColSize(stringArray0, 542);
      assertEquals(0, int0);
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixPlainText0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixPlainText0.SIGNIFICANCE_WIN);
  }

  //Test case number: 43
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getSignificance(II)I: I6 Branch 92 IFLT L1498 - true
   */

  @Test
  public void test43()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixPlainText0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixPlainText0.SIGNIFICANCE_TIE);
      assertNotNull(resultMatrixPlainText0);
      
      int int0 = resultMatrixPlainText0.getSignificance((-241), (-241));
      assertEquals(0, int0);
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(2, resultMatrixPlainText0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixPlainText0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixPlainText0.SIGNIFICANCE_TIE);
  }

  //Test case number: 44
  /*
   * 3 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.getSignificance(II)I: I6 Branch 92 IFLT L1498 - false
   * Goal 2. weka.experiment.ResultMatrix.getSignificance(II)I: I13 Branch 93 IF_ICMPGE L1498 - false
   * Goal 3. weka.experiment.ResultMatrix.getSignificance(II)I: I18 Branch 94 IFLT L1498 - true
   */

  @Test
  public void test44()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixSignificance0);
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText((ResultMatrix) resultMatrixSignificance0);
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(40, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(2, resultMatrixPlainText0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixPlainText0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixPlainText0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixPlainText0);
      
      int int0 = resultMatrixPlainText0.getSignificance(0, (-4520));
      assertEquals(0, int0);
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(40, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(2, resultMatrixPlainText0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixPlainText0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixPlainText0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
  }

  //Test case number: 45
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getDisplayCol(I)I: I6 Branch 111 IFLT L1631 - true
   */

  @Test
  public void test45()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixCSV0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixCSV0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixCSV0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixCSV0);
      
      int int0 = resultMatrixCSV0.getDisplayCol((-2269));
      assertEquals((-1), int0);
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixCSV0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixCSV0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixCSV0.SIGNIFICANCE_WIN);
  }

  //Test case number: 46
  /*
   * 4 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.setMean(IID)V: I6 Branch 68 IFLT L1396 - false
   * Goal 2. weka.experiment.ResultMatrix.setMean(IID)V: I13 Branch 69 IF_ICMPGE L1396 - false
   * Goal 3. weka.experiment.ResultMatrix.setMean(IID)V: I18 Branch 70 IFLT L1396 - false
   * Goal 4. weka.experiment.ResultMatrix.setMean(IID)V: I25 Branch 71 IF_ICMPGE L1396 - true
   */

  @Test
  public void test46()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixGnuPlot0);
      
      resultMatrixGnuPlot0.setMean(0, 2, (double) 0);
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
  }

  //Test case number: 47
  /*
   * 22 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.setEnumerateColNames(Z)V: root-Branch
   * Goal 2. weka.experiment.ResultMatrix.setShowAverage(Z)V: root-Branch
   * Goal 3. weka.experiment.ResultMatrix.setShowStdDev(Z)V: root-Branch
   * Goal 4. weka.experiment.ResultMatrix.setRemoveFilterName(Z)V: root-Branch
   * Goal 5. weka.experiment.ResultMatrix.stdDevWidthTipText()Ljava/lang/String;: root-Branch
   * Goal 6. weka.experiment.ResultMatrix.setOptions([Ljava/lang/String;)V: I13 Branch 1 IFLE L319 - true
   * Goal 7. weka.experiment.ResultMatrix.setOptions([Ljava/lang/String;)V: I43 Branch 2 IFLE L325 - true
   * Goal 8. weka.experiment.ResultMatrix.setOptions([Ljava/lang/String;)V: I73 Branch 3 IFLE L331 - true
   * Goal 9. weka.experiment.ResultMatrix.setOptions([Ljava/lang/String;)V: I103 Branch 4 IFLE L337 - true
   * Goal 10. weka.experiment.ResultMatrix.setOptions([Ljava/lang/String;)V: I133 Branch 5 IFLE L343 - true
   * Goal 11. weka.experiment.ResultMatrix.setOptions([Ljava/lang/String;)V: I163 Branch 6 IFLE L349 - true
   * Goal 12. weka.experiment.ResultMatrix.setOptions([Ljava/lang/String;)V: I193 Branch 7 IFLE L355 - true
   * Goal 13. weka.experiment.ResultMatrix.setOptions([Ljava/lang/String;)V: I223 Branch 8 IFLE L361 - true
   * Goal 14. weka.experiment.ResultMatrix.setMeanPrec(I)V: I6 Branch 30 IFLT L599 - false
   * Goal 15. weka.experiment.ResultMatrix.setStdDevPrec(I)V: I6 Branch 31 IFLT L637 - false
   * Goal 16. weka.experiment.ResultMatrix.setColNameWidth(I)V: I6 Branch 32 IFLT L675 - false
   * Goal 17. weka.experiment.ResultMatrix.setStdDevWidth(I)V: I6 Branch 35 IFLT L789 - false
   * Goal 18. weka.experiment.ResultMatrix.setSignificanceWidth(I)V: I6 Branch 36 IFLT L827 - false
   * Goal 19. weka.experiment.ResultMatrix.setPrintColNames(Z)V: I11 Branch 38 IFNE L1018 - false
   * Goal 20. weka.experiment.ResultMatrix.setPrintRowNames(Z)V: I11 Branch 39 IFNE L1059 - false
   * Goal 21. weka.experiment.ResultMatrix.setStdDev(IID)V: I6 Branch 80 IFLT L1455 - false
   * Goal 22. weka.experiment.ResultMatrix.setStdDev(IID)V: I13 Branch 81 IF_ICMPGE L1455 - true
   */

  @Test
  public void test47()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixCSV0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixCSV0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixCSV0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "[";
      stringArray0[1] = "*";
      stringArray0[2] = "]";
      stringArray0[3] = "]";
      resultMatrixCSV0.setStdDev(133, 133, (double) 133);
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixCSV0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixCSV0.SIGNIFICANCE_WIN);
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex((ResultMatrix) resultMatrixCSV0);
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixLatex0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixLatex0.SIGNIFICANCE_LOSS);
      assertEquals(2, resultMatrixCSV0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixCSV0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixCSV0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixLatex0);
      
      stringArray0[4] = "v";
      stringArray0[5] = "*";
      String string0 = resultMatrixCSV0.stdDevWidthTipText();
      assertEquals("The width of the standard deviation (0 = optimal).", string0);
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixCSV0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixCSV0.SIGNIFICANCE_WIN);
      assertNotNull(string0);
      
      stringArray0[6] = "]";
      resultMatrixCSV0.setOptions(stringArray0);
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertFalse(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(2, resultMatrixCSV0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixCSV0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixCSV0.SIGNIFICANCE_WIN);
  }

  //Test case number: 48
  /*
   * 2 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.getCount(I)D: I6 Branch 66 IFLT L1382 - false
   * Goal 2. weka.experiment.ResultMatrix.getCount(I)D: I13 Branch 67 IF_ICMPGE L1382 - true
   */

  @Test
  public void test48()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixSignificance0);
      
      double double0 = resultMatrixSignificance0.getCount(3698);
      assertEquals(0.0, double0, 0.01D);
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
  }

  //Test case number: 49
  /*
   * 6 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.getAverage(I)D: I13 Branch 77 IF_ICMPGE L1429 - false
   * Goal 2. weka.experiment.ResultMatrix.getAverage(I)D: I33 Branch 78 IF_ICMPGE L1433 - true
   * Goal 3. weka.experiment.ResultMatrix.getAverage(I)D: I33 Branch 78 IF_ICMPGE L1433 - false
   * Goal 4. weka.experiment.ResultMatrix.getAverage(I)D: I44 Branch 79 IFNE L1434 - true
   * Goal 5. weka.experiment.ResultMatrix.padString(Ljava/lang/String;IZ)Ljava/lang/String;: I15 Branch 118 IF_ICMPGE L1713 - true
   * Goal 6. weka.experiment.ResultMatrix.padString(Ljava/lang/String;IZ)Ljava/lang/String;: I62 Branch 120 IFLE L1721 - true
   */

  @Test
  public void test49()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixHTML0);
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex((ResultMatrix) resultMatrixHTML0);
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixLatex0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixLatex0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixLatex0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixLatex0);
      
      String string0 = resultMatrixLatex0.padString("*", (-1571), false);
      assertEquals("*", string0);
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixLatex0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixLatex0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixLatex0.SIGNIFICANCE_WIN);
      assertNotNull(string0);
      
      double double0 = resultMatrixHTML0.getAverage(0);
      assertEquals(Double.NaN, double0, 0.01D);
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
  }

  //Test case number: 50
  /*
   * 66 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.removeFilterNameTipText()Ljava/lang/String;: root-Branch
   * Goal 2. weka.experiment.ResultMatrix.printRowNamesTipText()Ljava/lang/String;: root-Branch
   * Goal 3. weka.experiment.ResultMatrix.getColOrder()[I: root-Branch
   * Goal 4. weka.experiment.ResultMatrix.getVisibleColCount()I: I15 Branch 40 IF_ICMPGE L1185 - true
   * Goal 5. weka.experiment.ResultMatrix.getVisibleColCount()I: I15 Branch 40 IF_ICMPGE L1185 - false
   * Goal 6. weka.experiment.ResultMatrix.getVisibleColCount()I: I24 Branch 41 IFNE L1186 - false
   * Goal 7. weka.experiment.ResultMatrix.getVisibleRowCount()I: I15 Branch 42 IF_ICMPGE L1212 - true
   * Goal 8. weka.experiment.ResultMatrix.getVisibleRowCount()I: I15 Branch 42 IF_ICMPGE L1212 - false
   * Goal 9. weka.experiment.ResultMatrix.getVisibleRowCount()I: I24 Branch 43 IFNE L1213 - false
   * Goal 10. weka.experiment.ResultMatrix.getColName(I)Ljava/lang/String;: I10 Branch 46 IFLT L1249 - false
   * Goal 11. weka.experiment.ResultMatrix.getColName(I)Ljava/lang/String;: I17 Branch 47 IF_ICMPGE L1249 - false
   * Goal 12. weka.experiment.ResultMatrix.getColName(I)Ljava/lang/String;: I25 Branch 48 IFEQ L1250 - true
   * Goal 13. weka.experiment.ResultMatrix.getColName(I)Ljava/lang/String;: I48 Branch 49 IFEQ L1255 - false
   * Goal 14. weka.experiment.ResultMatrix.getRowName(I)Ljava/lang/String;: I10 Branch 52 IFLT L1296 - false
   * Goal 15. weka.experiment.ResultMatrix.getRowName(I)Ljava/lang/String;: I17 Branch 53 IF_ICMPGE L1296 - false
   * Goal 16. weka.experiment.ResultMatrix.getRowName(I)Ljava/lang/String;: I25 Branch 54 IFEQ L1297 - false
   * Goal 17. weka.experiment.ResultMatrix.getRowName(I)Ljava/lang/String;: I48 Branch 55 IFEQ L1302 - true
   * Goal 18. weka.experiment.ResultMatrix.getRowHidden(I)Z: I6 Branch 62 IFLT L1358 - false
   * Goal 19. weka.experiment.ResultMatrix.getRowHidden(I)Z: I13 Branch 63 IF_ICMPGE L1358 - false
   * Goal 20. weka.experiment.ResultMatrix.getMean(II)D: I6 Branch 72 IFLT L1410 - false
   * Goal 21. weka.experiment.ResultMatrix.getMean(II)D: I13 Branch 73 IF_ICMPGE L1410 - false
   * Goal 22. weka.experiment.ResultMatrix.getMean(II)D: I18 Branch 74 IFLT L1410 - false
   * Goal 23. weka.experiment.ResultMatrix.getMean(II)D: I25 Branch 75 IF_ICMPGE L1410 - false
   * Goal 24. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I17 Branch 97 IF_ICMPGE L1519 - false
   * Goal 25. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I29 Branch 98 IF_ICMPGE L1520 - true
   * Goal 26. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I29 Branch 98 IF_ICMPGE L1520 - false
   * Goal 27. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I38 Branch 99 IFEQ L1521 - true
   * Goal 28. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I55 Branch 100 IFEQ L1525 - false
   * Goal 29. weka.experiment.ResultMatrix.getDisplayCol(I)I: I6 Branch 111 IFLT L1631 - false
   * Goal 30. weka.experiment.ResultMatrix.getDisplayCol(I)I: I13 Branch 112 IF_ICMPGE L1631 - false
   * Goal 31. weka.experiment.ResultMatrix.getDisplayCol(I)I: I21 Branch 113 IFNONNULL L1632 - false
   * Goal 32. weka.experiment.ResultMatrix.trimString(Ljava/lang/String;I)Ljava/lang/String;: I6 Branch 116 IFLE L1679 - true
   * Goal 33. weka.experiment.ResultMatrix.trimString(Ljava/lang/String;I)Ljava/lang/String;: I6 Branch 116 IFLE L1679 - false
   * Goal 34. weka.experiment.ResultMatrix.trimString(Ljava/lang/String;I)Ljava/lang/String;: I13 Branch 117 IF_ICMPLE L1679 - true
   * Goal 35. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I12 Branch 131 IFEQ L1813 - true
   * Goal 36. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I28 Branch 132 IFEQ L1816 - true
   * Goal 37. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I82 Branch 133 IF_ICMPGE L1826 - true
   * Goal 38. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I82 Branch 133 IF_ICMPGE L1826 - false
   * Goal 39. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I97 Branch 134 IFEQ L1828 - true
   * Goal 40. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I130 Branch 135 IFEQ L1835 - true
   * Goal 41. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I175 Branch 136 IF_ICMPGE L1846 - true
   * Goal 42. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I175 Branch 136 IF_ICMPGE L1846 - false
   * Goal 43. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I190 Branch 137 IFNE L1848 - false
   * Goal 44. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I232 Branch 138 IF_ICMPGE L1857 - true
   * Goal 45. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I232 Branch 138 IF_ICMPGE L1857 - false
   * Goal 46. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I247 Branch 139 IFEQ L1859 - true
   * Goal 47. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I269 Branch 140 IF_ICMPGE L1863 - true
   * Goal 48. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I269 Branch 140 IF_ICMPGE L1863 - false
   * Goal 49. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I284 Branch 141 IFEQ L1865 - true
   * Goal 50. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I301 Branch 142 IFNE L1869 - true
   * Goal 51. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I317 Branch 143 IFNE L1872 - false
   * Goal 52. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I355 Branch 144 IFEQ L1879 - true
   * Goal 53. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I422 Branch 147 IFNE L1890 - false
   * Goal 54. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I508 Branch 152 IFEQ L1913 - true
   * Goal 55. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I673 Branch 156 IF_ICMPGE L1948 - true
   * Goal 56. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I673 Branch 156 IF_ICMPGE L1948 - false
   * Goal 57. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I688 Branch 157 IFEQ L1950 - true
   * Goal 58. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I713 Branch 158 IFEQ L1958 - true
   * Goal 59. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I800 Branch 159 IF_ICMPGE L1976 - true
   * Goal 60. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I800 Branch 159 IF_ICMPGE L1976 - false
   * Goal 61. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I808 Branch 160 IF_ICMPNE L1978 - true
   * Goal 62. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I821 Branch 162 IF_ICMPNE L1978 - true
   * Goal 63. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I821 Branch 162 IF_ICMPNE L1978 - false
   * Goal 64. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I827 Branch 163 IFNE L1978 - false
   * Goal 65. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I845 Branch 164 IF_ICMPGE L1982 - true
   * Goal 66. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I845 Branch 164 IF_ICMPGE L1982 - false
   */

  @Test
  public void test50()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixSignificance0);
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(2, resultMatrixCSV0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixCSV0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixCSV0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixCSV0);
      
      String string0 = resultMatrixSignificance0.printRowNamesTipText();
      assertEquals("Whether to output row names or just numbers representing them.", string0);
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertNotNull(string0);
      
      String[][] stringArray0 = resultMatrixSignificance0.toArray();
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertNotNull(stringArray0);
      
      String string1 = resultMatrixCSV0.removeFilterNameTipText();
      assertNotSame(string1, string0);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", string1);
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(2, resultMatrixCSV0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixCSV0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixCSV0.SIGNIFICANCE_WIN);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  //Test case number: 51
  /*
   * 2 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.getAverage(I)D: I6 Branch 76 IFLT L1429 - false
   * Goal 2. weka.experiment.ResultMatrix.getAverage(I)D: I13 Branch 77 IF_ICMPGE L1429 - true
   */

  @Test
  public void test51()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertNotNull(resultMatrixHTML0);
      
      double double0 = resultMatrixHTML0.getAverage(1567);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
  }

  //Test case number: 52
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setMeanWidth(I)V: I6 Branch 34 IFLT L751 - true
   */

  @Test
  public void test52()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(67, 67);
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(67, resultMatrixPlainText0.getColCount());
      assertEquals(67, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(67, resultMatrixPlainText0.getRowCount());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(67, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(2, resultMatrixPlainText0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixPlainText0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixPlainText0.SIGNIFICANCE_TIE);
      assertNotNull(resultMatrixPlainText0);
      
      resultMatrixPlainText0.setMeanWidth((-760));
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(67, resultMatrixPlainText0.getColCount());
      assertEquals(67, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(67, resultMatrixPlainText0.getRowCount());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(67, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(2, resultMatrixPlainText0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixPlainText0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixPlainText0.SIGNIFICANCE_TIE);
  }

  //Test case number: 53
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.isStdDev(I)Z: I13 Branch 173 IFEQ L2053 - true
   */

  @Test
  public void test53()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixCSV0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixCSV0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixCSV0);
      
      boolean boolean0 = resultMatrixCSV0.isStdDev(1679);
      assertFalse(boolean0);
      assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
      assertEquals("CSV", resultMatrixCSV0.getDisplayName());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
      assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
      assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixCSV0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixCSV0.SIGNIFICANCE_WIN);
  }

  //Test case number: 54
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setSignificance(III)V: I6 Branch 88 IFLT L1484 - true
   */

  @Test
  public void test54()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(0, resultMatrixPlainText0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixPlainText0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixPlainText0.SIGNIFICANCE_LOSS);
      assertNotNull(resultMatrixPlainText0);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot((ResultMatrix) resultMatrixPlainText0);
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(5, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixPlainText0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixPlainText0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      assertNotNull(resultMatrixGnuPlot0);
      
      resultMatrixGnuPlot0.setSignificance((-1486), (-1486), (-1486));
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(5, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixPlainText0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixPlainText0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
  }

  //Test case number: 55
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setMean(IID)V: I6 Branch 68 IFLT L1396 - true
   */

  @Test
  public void test55()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixGnuPlot0);
      
      resultMatrixGnuPlot0.setMean((-1881), 2, (double) (-1881));
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
  }

  //Test case number: 56
  /*
   * 3 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.setSignificance(III)V: I13 Branch 89 IF_ICMPGE L1484 - false
   * Goal 2. weka.experiment.ResultMatrix.setSignificance(III)V: I18 Branch 90 IFLT L1484 - false
   * Goal 3. weka.experiment.ResultMatrix.setSignificance(III)V: I25 Branch 91 IF_ICMPGE L1484 - true
   */

  @Test
  public void test56()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixPlainText0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixPlainText0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixPlainText0.SIGNIFICANCE_LOSS);
      assertNotNull(resultMatrixPlainText0);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot((ResultMatrix) resultMatrixPlainText0);
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(1, resultMatrixPlainText0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixPlainText0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixPlainText0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertNotNull(resultMatrixGnuPlot0);
      
      resultMatrixGnuPlot0.setSignificance(0, 3244, 3244);
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(5, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(1, resultMatrixPlainText0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixPlainText0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixPlainText0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
  }

  //Test case number: 57
  /*
   * 2 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.getDefaultRowNameWidth()I: root-Branch
   * Goal 2. weka.experiment.ResultMatrix.setCountWidth(I)V: I6 Branch 37 IFLT L865 - false
   */

  @Test
  public void test57()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(2, resultMatrixLatex0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixLatex0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixLatex0.SIGNIFICANCE_TIE);
      assertNotNull(resultMatrixLatex0);
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML((ResultMatrix) resultMatrixLatex0);
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertEquals(2, resultMatrixLatex0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixLatex0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixLatex0.SIGNIFICANCE_TIE);
      assertNotNull(resultMatrixHTML0);
      
      resultMatrixHTML0.setCountWidth(0);
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
      assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
      assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertEquals(2, resultMatrixLatex0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixLatex0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixLatex0.SIGNIFICANCE_TIE);
  }

  //Test case number: 58
  /*
   * 4 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.setSignificance(III)V: I6 Branch 88 IFLT L1484 - false
   * Goal 2. weka.experiment.ResultMatrix.setSignificance(III)V: I13 Branch 89 IF_ICMPGE L1484 - true
   * Goal 3. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I10 Branch 96 IFLT L1519 - false
   * Goal 4. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I17 Branch 97 IF_ICMPGE L1519 - true
   */

  @Test
  public void test58()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixPlainText0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixPlainText0.SIGNIFICANCE_TIE);
      assertNotNull(resultMatrixPlainText0);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot((ResultMatrix) resultMatrixPlainText0);
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(5, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixPlainText0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixPlainText0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixPlainText0.SIGNIFICANCE_TIE);
      assertNotNull(resultMatrixGnuPlot0);
      
      resultMatrixGnuPlot0.setSignificance(2584, 2584, 2584);
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(5, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixPlainText0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixPlainText0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixPlainText0.SIGNIFICANCE_TIE);
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertNotNull(resultMatrixHTML0);
      
      int int0 = resultMatrixHTML0.getSignificanceCount(2584, 2584);
      assertEquals(0, int0);
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
  }

  //Test case number: 59
  /*
   * 8 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.getRowOrder()[I: root-Branch
   * Goal 2. weka.experiment.ResultMatrix.setMeanWidth(I)V: I6 Branch 34 IFLT L751 - false
   * Goal 3. weka.experiment.ResultMatrix.getColHidden(I)Z: I6 Branch 58 IFLT L1333 - false
   * Goal 4. weka.experiment.ResultMatrix.getColHidden(I)Z: I13 Branch 59 IF_ICMPGE L1333 - false
   * Goal 5. weka.experiment.ResultMatrix.getRowHidden(I)Z: I6 Branch 62 IFLT L1358 - true
   * Goal 6. weka.experiment.ResultMatrix.getDisplayRow(I)I: I13 Branch 106 IF_ICMPGE L1578 - false
   * Goal 7. weka.experiment.ResultMatrix.getDisplayRow(I)I: I21 Branch 107 IFNONNULL L1579 - false
   * Goal 8. weka.experiment.ResultMatrix.removeFilterName(Ljava/lang/String;)Ljava/lang/String;: I7 Branch 130 IFEQ L1781 - true
   */

  @Test
  public void test59()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertNotNull(resultMatrixSignificance0);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(191, 12);
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(191, resultMatrixGnuPlot0.getColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(12, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(191, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(12, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixGnuPlot0);
      
      String string0 = resultMatrixGnuPlot0.toStringKey();
      assertEquals("Key:\n1 col0\n2 col1\n3 col2\n4 col3\n5 col4\n6 col5\n7 col6\n8 col7\n9 col8\n10 col9\n11 col10\n12 col11\n13 col12\n14 col13\n15 col14\n16 col15\n17 col16\n18 col17\n19 col18\n20 col19\n21 col20\n22 col21\n23 col22\n24 col23\n25 col24\n26 col25\n27 col26\n28 col27\n29 col28\n30 col29\n31 col30\n32 col31\n33 col32\n34 col33\n35 col34\n36 col35\n37 col36\n38 col37\n39 col38\n40 col39\n41 col40\n42 col41\n43 col42\n44 col43\n45 col44\n46 col45\n47 col46\n48 col47\n49 col48\n50 col49\n51 col50\n52 col51\n53 col52\n54 col53\n55 col54\n56 col55\n57 col56\n58 col57\n59 col58\n60 col59\n61 col60\n62 col61\n63 col62\n64 col63\n65 col64\n66 col65\n67 col66\n68 col67\n69 col68\n70 col69\n71 col70\n72 col71\n73 col72\n74 col73\n75 col74\n76 col75\n77 col76\n78 col77\n79 col78\n80 col79\n81 col80\n82 col81\n83 col82\n84 col83\n85 col84\n86 col85\n87 col86\n88 col87\n89 col88\n90 col89\n91 col90\n92 col91\n93 col92\n94 col93\n95 col94\n96 col95\n97 col96\n98 col97\n99 col98\n100 col99\n101 col100\n102 col101\n103 col102\n104 col103\n105 col104\n106 col105\n107 col106\n108 col107\n109 col108\n110 col109\n111 col110\n112 col111\n113 col112\n114 col113\n115 col114\n116 col115\n117 col116\n118 col117\n119 col118\n120 col119\n121 col120\n122 col121\n123 col122\n124 col123\n125 col124\n126 col125\n127 col126\n128 col127\n129 col128\n130 col129\n131 col130\n132 col131\n133 col132\n134 col133\n135 col134\n136 col135\n137 col136\n138 col137\n139 col138\n140 col139\n141 col140\n142 col141\n143 col142\n144 col143\n145 col144\n146 col145\n147 col146\n148 col147\n149 col148\n150 col149\n151 col150\n152 col151\n153 col152\n154 col153\n155 col154\n156 col155\n157 col156\n158 col157\n159 col158\n160 col159\n161 col160\n162 col161\n163 col162\n164 col163\n165 col164\n166 col165\n167 col166\n168 col167\n169 col168\n170 col169\n171 col170\n172 col171\n173 col172\n174 col173\n175 col174\n176 col175\n177 col176\n178 col177\n179 col178\n180 col179\n181 col180\n182 col181\n183 col182\n184 col183\n185 col184\n186 col185\n187 col186\n188 col187\n189 col188\n190 col189\n191 col190\n", string0);
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(191, resultMatrixGnuPlot0.getColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(12, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(191, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(12, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
      assertNotNull(string0);
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixPlainText0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixPlainText0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixPlainText0);
      
      resultMatrixPlainText0.setMeanWidth(191);
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixPlainText0.printRowNamesTipText());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixPlainText0.showAverageTipText());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(191, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixPlainText0.meanPrecTipText());
      assertEquals(25, resultMatrixPlainText0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixPlainText0.printColNamesTipText());
      assertEquals("Generates the output as plain text (for fixed width fonts).", resultMatrixPlainText0.globalInfo());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(5, resultMatrixPlainText0.getDefaultCountWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixPlainText0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixPlainText0.rowNameWidthTipText());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixPlainText0.enumerateRowNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixPlainText0.removeFilterNameTipText());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixPlainText0.significanceWidthTipText());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixPlainText0.countWidthTipText());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals("Plain Text", resultMatrixPlainText0.getDisplayName());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixPlainText0.showStdDevTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixPlainText0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixPlainText0.meanWidthTipText());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixPlainText0.colNameWidthTipText());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixPlainText0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixPlainText0.SIGNIFICANCE_WIN);
      
      int int0 = resultMatrixSignificance0.getDisplayRow(0);
      assertEquals(0, int0);
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      
      boolean boolean0 = resultMatrixGnuPlot0.getRowHidden((-1439));
      assertFalse(boolean0);
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(191, resultMatrixGnuPlot0.getColCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals(12, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(191, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(12, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
  }

  //Test case number: 60
  /*
   * 2 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.getDisplayRow(I)I: I6 Branch 105 IFLT L1578 - false
   * Goal 2. weka.experiment.ResultMatrix.getDisplayRow(I)I: I13 Branch 106 IF_ICMPGE L1578 - true
   */

  @Test
  public void test60()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(15, 15);
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(15, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(15, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(15, resultMatrixSignificance0.getColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(15, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertNotNull(resultMatrixSignificance0);
      
      int int0 = resultMatrixSignificance0.getDisplayRow(15);
      assertEquals((-1), int0);
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(15, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(15, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(15, resultMatrixSignificance0.getColCount());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(15, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
  }

  //Test case number: 61
  /*
   * 26 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.getColNameWidth()I: root-Branch
   * Goal 2. weka.experiment.ResultMatrix.getStdDevPrec()I: root-Branch
   * Goal 3. weka.experiment.ResultMatrix.getRemoveFilterName()Z: root-Branch
   * Goal 4. weka.experiment.ResultMatrix.getMeanWidth()I: root-Branch
   * Goal 5. weka.experiment.ResultMatrix.getEnumerateRowNames()Z: root-Branch
   * Goal 6. weka.experiment.ResultMatrix.getShowAverage()Z: root-Branch
   * Goal 7. weka.experiment.ResultMatrix.getShowStdDev()Z: root-Branch
   * Goal 8. weka.experiment.ResultMatrix.getCountWidth()I: root-Branch
   * Goal 9. weka.experiment.ResultMatrix.getStdDevWidth()I: root-Branch
   * Goal 10. weka.experiment.ResultMatrix.getDefaultEnumerateColNames()Z: root-Branch
   * Goal 11. weka.experiment.ResultMatrix.getPrintRowNames()Z: root-Branch
   * Goal 12. weka.experiment.ResultMatrix.getPrintColNames()Z: root-Branch
   * Goal 13. weka.experiment.ResultMatrix.setEnumerateRowNames(Z)V: root-Branch
   * Goal 14. weka.experiment.ResultMatrix.getSignificanceWidth()I: root-Branch
   * Goal 15. weka.experiment.ResultMatrix.getMeanPrec()I: root-Branch
   * Goal 16. weka.experiment.ResultMatrix.getRowNameWidth()I: root-Branch
   * Goal 17. weka.experiment.ResultMatrix.getEnumerateColNames()Z: root-Branch
   * Goal 18. weka.experiment.ResultMatrix.rowNameWidthTipText()Ljava/lang/String;: root-Branch
   * Goal 19. weka.experiment.ResultMatrix.getOptions()[Ljava/lang/String;: I173 Branch 9 IFEQ L415 - true
   * Goal 20. weka.experiment.ResultMatrix.getOptions()[Ljava/lang/String;: I187 Branch 10 IFEQ L418 - true
   * Goal 21. weka.experiment.ResultMatrix.getOptions()[Ljava/lang/String;: I201 Branch 11 IFEQ L421 - true
   * Goal 22. weka.experiment.ResultMatrix.getOptions()[Ljava/lang/String;: I215 Branch 12 IFEQ L424 - true
   * Goal 23. weka.experiment.ResultMatrix.getOptions()[Ljava/lang/String;: I229 Branch 13 IFEQ L427 - false
   * Goal 24. weka.experiment.ResultMatrix.getOptions()[Ljava/lang/String;: I243 Branch 14 IFEQ L430 - false
   * Goal 25. weka.experiment.ResultMatrix.getOptions()[Ljava/lang/String;: I257 Branch 15 IFEQ L433 - true
   * Goal 26. weka.experiment.ResultMatrix.setRowNameWidth(I)V: I6 Branch 33 IFLT L713 - false
   */

  @Test
  public void test61()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertNotNull(resultMatrixHTML0);
      
      String string0 = resultMatrixHTML0.rowNameWidthTipText();
      assertEquals("The maximum width for the row names (0 = optimal).", string0);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertNotNull(string0);
      
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertNotNull(stringArray0);
      
      int int0 = resultMatrixHTML0.getSignificanceWidth();
      assertEquals(0, int0);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      
      boolean boolean0 = resultMatrixHTML0.getDefaultPrintRowNames();
      assertTrue(boolean0);
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertNotNull(resultMatrixSignificance0);
      
      resultMatrixSignificance0.setRowNameWidth(0);
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      
      resultMatrixSignificance0.setEnumerateRowNames(true);
      assertTrue(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
  }

  //Test case number: 62
  /*
   * 43 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.clearSummary()V: root-Branch
   * Goal 2. weka.experiment.ResultMatrix.getDefaultShowStdDev()Z: root-Branch
   * Goal 3. weka.experiment.ResultMatrix.getDefaultMeanWidth()I: root-Branch
   * Goal 4. weka.experiment.ResultMatrix.<init>(Lweka/experiment/ResultMatrix;)V: root-Branch
   * Goal 5. weka.experiment.ResultMatrix.getDefaultShowAverage()Z: root-Branch
   * Goal 6. weka.experiment.ResultMatrix.getDefaultCountWidth()I: root-Branch
   * Goal 7. weka.experiment.ResultMatrix.clearRanking()V: root-Branch
   * Goal 8. weka.experiment.ResultMatrix.clearHeader()V: root-Branch
   * Goal 9. weka.experiment.ResultMatrix.getRowCount()I: root-Branch
   * Goal 10. weka.experiment.ResultMatrix.getDefaultStdDevWidth()I: root-Branch
   * Goal 11. weka.experiment.ResultMatrix.<init>(II)V: root-Branch
   * Goal 12. weka.experiment.ResultMatrix.getDefaultEnumerateRowNames()Z: root-Branch
   * Goal 13. weka.experiment.ResultMatrix.getDefaultPrintRowNames()Z: root-Branch
   * Goal 14. weka.experiment.ResultMatrix.getDefaultPrintColNames()Z: root-Branch
   * Goal 15. weka.experiment.ResultMatrix.getDefaultColNameWidth()I: root-Branch
   * Goal 16. weka.experiment.ResultMatrix.getDefaultMeanPrec()I: root-Branch
   * Goal 17. weka.experiment.ResultMatrix.getDefaultRemoveFilterName()Z: root-Branch
   * Goal 18. weka.experiment.ResultMatrix.getDefaultSignificanceWidth()I: root-Branch
   * Goal 19. weka.experiment.ResultMatrix.clear()V: root-Branch
   * Goal 20. weka.experiment.ResultMatrix.getColCount()I: root-Branch
   * Goal 21. weka.experiment.ResultMatrix.getDefaultStdDevPrec()I: root-Branch
   * Goal 22. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I150 Branch 16 IF_ICMPGE L483 - true
   * Goal 23. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I150 Branch 16 IF_ICMPGE L483 - false
   * Goal 24. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I165 Branch 17 IF_ICMPGE L484 - true
   * Goal 25. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I165 Branch 17 IF_ICMPGE L484 - false
   * Goal 26. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I234 Branch 18 IF_ICMPGE L491 - true
   * Goal 27. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I234 Branch 18 IF_ICMPGE L491 - false
   * Goal 28. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I274 Branch 19 IF_ICMPGE L496 - true
   * Goal 29. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I274 Branch 19 IF_ICMPGE L496 - false
   * Goal 30. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I314 Branch 20 IF_ICMPGE L501 - true
   * Goal 31. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I314 Branch 20 IF_ICMPGE L501 - false
   * Goal 32. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I339 Branch 21 IFNULL L505 - true
   * Goal 33. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I457 Branch 24 IFNULL L520 - true
   * Goal 34. weka.experiment.ResultMatrix.setSize(II)V: I73 Branch 26 IF_ICMPGE L578 - true
   * Goal 35. weka.experiment.ResultMatrix.setSize(II)V: I73 Branch 26 IF_ICMPGE L578 - false
   * Goal 36. weka.experiment.ResultMatrix.setSize(II)V: I88 Branch 27 IF_ICMPGE L579 - true
   * Goal 37. weka.experiment.ResultMatrix.setSize(II)V: I88 Branch 27 IF_ICMPGE L579 - false
   * Goal 38. weka.experiment.ResultMatrix.setSize(II)V: I124 Branch 28 IF_ICMPGE L583 - true
   * Goal 39. weka.experiment.ResultMatrix.setSize(II)V: I124 Branch 28 IF_ICMPGE L583 - false
   * Goal 40. weka.experiment.ResultMatrix.setSize(II)V: I158 Branch 29 IF_ICMPGE L585 - true
   * Goal 41. weka.experiment.ResultMatrix.setSize(II)V: I158 Branch 29 IF_ICMPGE L585 - false
   * Goal 42. weka.experiment.ResultMatrix.setStdDevWidth(I)V: I6 Branch 35 IFLT L789 - true
   * Goal 43. weka.experiment.ResultMatrix.getDisplayRow(I)I: I6 Branch 105 IFLT L1578 - true
   */

  @Test
  public void test62()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      assertNotNull(resultMatrixHTML0);
      
      resultMatrixHTML0.setStdDevWidth((-1571));
      assertEquals("Whether to display the standard deviation column.", resultMatrixHTML0.showStdDevTipText());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixHTML0.stdDevWidthTipText());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixHTML0.meanWidthTipText());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixHTML0.stdDevPrecTipText());
      assertEquals(25, resultMatrixHTML0.getDefaultRowNameWidth());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixHTML0.printColNamesTipText());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixHTML0.removeFilterNameTipText());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateColNamesTipText());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixHTML0.significanceWidthTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixHTML0.countWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixHTML0.meanPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixHTML0.rowNameWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixHTML0.printRowNamesTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixHTML0.enumerateRowNamesTipText());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals("Generates the matrix output as HTML.", resultMatrixHTML0.globalInfo());
      assertEquals("HTML", resultMatrixHTML0.getDisplayName());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertFalse(resultMatrixHTML0.getDefaultPrintColNames());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixHTML0.showAverageTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixHTML0.colNameWidthTipText());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.SIGNIFICANCE_TIE);
      assertEquals(1, resultMatrixHTML0.SIGNIFICANCE_WIN);
      assertEquals(2, resultMatrixHTML0.SIGNIFICANCE_LOSS);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      assertNotNull(resultMatrixGnuPlot0);
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance((ResultMatrix) resultMatrixGnuPlot0);
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(50, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
      assertNotNull(resultMatrixSignificance0);
      
      int int0 = resultMatrixSignificance0.getDisplayRow((-1571));
      assertEquals((-1), int0);
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateRowNames());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixGnuPlot0.countWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultEnumerateColNames());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixGnuPlot0.enumerateColNamesTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot0.printColNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixGnuPlot0.stdDevPrecTipText());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixGnuPlot0.significanceWidthTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixGnuPlot0.rowNameWidthTipText());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixGnuPlot0.removeFilterNameTipText());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("GNUPlot", resultMatrixGnuPlot0.getDisplayName());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("Whether to display the standard deviation column.", resultMatrixGnuPlot0.showStdDevTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixGnuPlot0.meanPrecTipText());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixGnuPlot0.colNameWidthTipText());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals("Whether to show the row with averages.", resultMatrixGnuPlot0.showAverageTipText());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(50, resultMatrixGnuPlot0.getDefaultColNameWidth());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixGnuPlot0.stdDevWidthTipText());
      assertEquals("Generates output for a data and script file for GnuPlot.", resultMatrixGnuPlot0.globalInfo());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixGnuPlot0.meanWidthTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixGnuPlot0.printRowNamesTipText());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Only outputs the significance indicators. Can be used for spotting patterns.", resultMatrixSignificance0.globalInfo());
      assertFalse(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getDefaultRowNameWidth());
      assertEquals(50, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertFalse(resultMatrixSignificance0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixSignificance0.stdDevPrecTipText());
      assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixSignificance0.rowNameWidthTipText());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixSignificance0.removeFilterNameTipText());
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixSignificance0.printColNamesTipText());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixSignificance0.significanceWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixSignificance0.colNameWidthTipText());
      assertEquals("Significance only", resultMatrixSignificance0.getDisplayName());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals("Whether to show the row with averages.", resultMatrixSignificance0.showAverageTipText());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("The width of the mean (0 = optimal).", resultMatrixSignificance0.meanWidthTipText());
      assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixSignificance0.meanPrecTipText());
      assertEquals("The width of the counts (0 = optimal).", resultMatrixSignificance0.countWidthTipText());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals("Whether to display the standard deviation column.", resultMatrixSignificance0.showStdDevTipText());
      assertEquals("Whether to output row names or just numbers representing them.", resultMatrixSignificance0.printRowNamesTipText());
      assertTrue(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixSignificance0.stdDevWidthTipText());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixSignificance0.enumerateRowNamesTipText());
      assertEquals(2, resultMatrixGnuPlot0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixGnuPlot0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixGnuPlot0.SIGNIFICANCE_TIE);
      assertEquals(2, resultMatrixSignificance0.SIGNIFICANCE_LOSS);
      assertEquals(1, resultMatrixSignificance0.SIGNIFICANCE_WIN);
      assertEquals(0, resultMatrixSignificance0.SIGNIFICANCE_TIE);
  }
}
