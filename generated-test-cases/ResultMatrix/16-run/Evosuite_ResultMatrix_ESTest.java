/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 19 03:51:54 GMT 2015
 */

package weka.experiment;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.junit.runner.RunWith;
import weka.experiment.ResultMatrix;
import weka.experiment.ResultMatrixCSV;
import weka.experiment.ResultMatrixGnuPlot;
import weka.experiment.ResultMatrixHTML;
import weka.experiment.ResultMatrixLatex;
import weka.experiment.ResultMatrixPlainText;
import weka.experiment.ResultMatrixSignificance;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ResultMatrix_ESTest extends ResultMatrix_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 4 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.setRanking([[I)V: I32 Branch 186 IF_ICMPGE L2251 - true
   * Goal 2. weka.experiment.ResultMatrix.setRanking([[I)V: I32 Branch 186 IF_ICMPGE L2251 - false
   * Goal 3. weka.experiment.ResultMatrix.setRanking([[I)V: I46 Branch 187 IF_ICMPGE L2252 - true
   * Goal 4. weka.experiment.ResultMatrix.setRanking([[I)V: I46 Branch 187 IF_ICMPGE L2252 - false
   */

  @Test
  public void test00()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText((ResultMatrix) resultMatrixSignificance0);
      int[][] intArray0 = new int[7][2];
      resultMatrixPlainText0.setRanking(intArray0);
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
  }

  //Test case number: 1
  /*
   * 4 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.setSummary([[I[[I)V: I34 Branch 184 IF_ICMPGE L2204 - true
   * Goal 2. weka.experiment.ResultMatrix.setSummary([[I[[I)V: I34 Branch 184 IF_ICMPGE L2204 - false
   * Goal 3. weka.experiment.ResultMatrix.setSummary([[I[[I)V: I49 Branch 185 IF_ICMPGE L2205 - true
   * Goal 4. weka.experiment.ResultMatrix.setSummary([[I[[I)V: I49 Branch 185 IF_ICMPGE L2205 - false
   */

  @Test
  public void test01()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[][] intArray0 = new int[6][7];
      resultMatrixCSV0.setSummary(intArray0, intArray0);
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getHeader(Ljava/lang/String;)Ljava/lang/String;: I13 Branch 183 IFNE L2151 - true
   */

  @Test
  public void test02()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(61, 61);
      // Undeclared exception!
      try {
        String string0 = resultMatrixGnuPlot0.getHeader("v");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.padString(Ljava/lang/String;IZ)Ljava/lang/String;: I62 Branch 120 IFLE L1721 - true
   */

  @Test
  public void test03()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText((ResultMatrix) resultMatrixHTML0);
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      
      String string0 = resultMatrixPlainText0.toStringMatrix();
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals("Dataset                      (1) \n---------------------------------\nrow0                     (0)    |\n---------------------------------\n(v/ /*)                         |\n", string0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.trimString(Ljava/lang/String;I)Ljava/lang/String;: I13 Branch 117 IF_ICMPLE L1679 - false
   */

  @Test
  public void test04()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      String string0 = resultMatrixPlainText0.trimString("-summary data not set-", 2);
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals("-s", string0);
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getDisplayCol(I)I: I6 Branch 111 IFLT L1631 - true
   */

  @Test
  public void test05()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText((ResultMatrix) resultMatrixHTML0);
      int int0 = resultMatrixPlainText0.getDisplayCol((-4743));
      assertEquals((-1), int0);
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
  }

  //Test case number: 6
  /*
   * 2 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.setColOrder([I)V: I6 Branch 108 IFNONNULL L1598 - true
   * Goal 2. weka.experiment.ResultMatrix.setColOrder([I)V: I25 Branch 109 IF_ICMPNE L1602 - true
   */

  @Test
  public void test06()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText((ResultMatrix) resultMatrixHTML0);
      int[] intArray0 = new int[2];
      resultMatrixPlainText0.setColOrder(intArray0);
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertFalse(resultMatrixPlainText0.getShowAverage());
  }

  //Test case number: 7
  /*
   * 2 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.setRowOrder([I)V: I6 Branch 102 IFNONNULL L1545 - true
   * Goal 2. weka.experiment.ResultMatrix.setRowOrder([I)V: I25 Branch 103 IF_ICMPNE L1549 - true
   */

  @Test
  public void test07()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[] intArray0 = new int[7];
      resultMatrixGnuPlot0.setRowOrder(intArray0);
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I10 Branch 96 IFLT L1519 - true
   */

  @Test
  public void test08()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      int int0 = resultMatrixSignificance0.getSignificanceCount((-614), 0);
      assertEquals(0, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, int0);
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getSignificance(II)I: I25 Branch 95 IF_ICMPGE L1498 - true
   */

  @Test
  public void test09()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(61, 61);
      resultMatrixPlainText0.assign((ResultMatrix) resultMatrixGnuPlot0);
      int int0 = resultMatrixPlainText0.getSignificance(50, 61);
      assertEquals(61, resultMatrixPlainText0.getColCount());
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setSignificance(III)V: I13 Branch 89 IF_ICMPGE L1484 - true
   */

  @Test
  public void test10()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot((ResultMatrix) resultMatrixSignificance0);
      resultMatrixGnuPlot0.setSignificance(6978, (-3153), (-3153));
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getStdDev(II)D: I13 Branch 85 IF_ICMPGE L1469 - true
   */

  @Test
  public void test11()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      double double0 = resultMatrixGnuPlot0.getStdDev(920, 920);
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setStdDev(IID)V: I6 Branch 80 IFLT L1455 - true
   */

  @Test
  public void test12()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setStdDev((-717), 4379, 0.0);
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
  }

  //Test case number: 13
  /*
   * 2 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.getAverage(I)D: I6 Branch 76 IFLT L1429 - false
   * Goal 2. weka.experiment.ResultMatrix.getAverage(I)D: I13 Branch 77 IF_ICMPGE L1429 - true
   */

  @Test
  public void test13()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      double double0 = resultMatrixHTML0.getAverage(2635);
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getAverage(I)D: I6 Branch 76 IFLT L1429 - true
   */

  @Test
  public void test14()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot((ResultMatrix) resultMatrixLatex0);
      double double0 = resultMatrixGnuPlot0.getAverage((-1160));
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setMean(IID)V: I13 Branch 69 IF_ICMPGE L1396 - true
   */

  @Test
  public void test15()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      resultMatrixHTML0.setMean(0, 0, (double) 0);
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
  }

  //Test case number: 16
  /*
   * 11 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.getCount(I)D: I13 Branch 67 IF_ICMPGE L1382 - false
   * Goal 2. weka.experiment.ResultMatrix.padString(Ljava/lang/String;IZ)Ljava/lang/String;: I15 Branch 118 IF_ICMPGE L1713 - false
   * Goal 3. weka.experiment.ResultMatrix.padString(Ljava/lang/String;IZ)Ljava/lang/String;: I22 Branch 119 IFEQ L1714 - true
   * Goal 4. weka.experiment.ResultMatrix.padString(Ljava/lang/String;IZ)Ljava/lang/String;: I22 Branch 119 IFEQ L1714 - false
   * Goal 5. weka.experiment.ResultMatrix.padString(Ljava/lang/String;IZ)Ljava/lang/String;: I69 Branch 121 IF_ICMPLE L1721 - false
   * Goal 6. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I43 Branch 126 IFEQ L1757 - false
   * Goal 7. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I65 Branch 128 IFEQ L1761 - false
   * Goal 8. weka.experiment.ResultMatrix.isMean(I)Z: I23 Branch 167 IFGE L2018 - false
   * Goal 9. weka.experiment.ResultMatrix.isAverage(I)Z: I7 Branch 171 IFEQ L2036 - true
   * Goal 10. weka.experiment.ResultMatrix.isSignificance(I)Z: I23 Branch 178 IFGE L2083 - false
   * Goal 11. weka.experiment.ResultMatrix.isSignificance(I)Z: I37 Branch 179 IF_ICMPNE L2086 - true
   */

  @Test
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[9];
      ResultMatrixPlainText.main(stringArray0);
  }

  //Test case number: 17
  /*
   * 2 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.getCount(I)D: I6 Branch 66 IFLT L1382 - false
   * Goal 2. weka.experiment.ResultMatrix.getCount(I)D: I13 Branch 67 IF_ICMPGE L1382 - true
   */

  @Test
  public void test17()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      double double0 = resultMatrixLatex0.getCount(177);
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setColHidden(IZ)V: I13 Branch 57 IF_ICMPGE L1321 - true
   */

  @Test
  public void test18()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setColHidden(1494, true);
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setColName(ILjava/lang/String;)V: I13 Branch 45 IF_ICMPGE L1227 - false
   */

  @Test
  public void test19()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot((ResultMatrix) resultMatrixPlainText0);
      resultMatrixGnuPlot0.setColName(0, "v");
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
  }

  //Test case number: 20
  /*
   * 2 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.setColName(ILjava/lang/String;)V: I6 Branch 44 IFLT L1227 - false
   * Goal 2. weka.experiment.ResultMatrix.setColName(ILjava/lang/String;)V: I13 Branch 45 IF_ICMPGE L1227 - true
   */

  @Test
  public void test20()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setColName(177, "$circ$");
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setCountWidth(I)V: I6 Branch 37 IFLT L865 - false
   */

  @Test
  public void test21()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setCountWidth(0);
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setStdDevWidth(I)V: I6 Branch 35 IFLT L789 - true
   */

  @Test
  public void test22()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setStdDevWidth((-1039));
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setColNameWidth(I)V: I6 Branch 32 IFLT L675 - true
   */

  @Test
  public void test23()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setColNameWidth((-5653));
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.setStdDevPrec(I)V: I6 Branch 31 IFLT L637 - true
   */

  @Test
  public void test24()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setStdDevPrec((-717));
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getOptions()[Ljava/lang/String;: I173 Branch 9 IFEQ L415 - false
   */

  @Test
  public void test25()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertFalse(resultMatrixLatex0.getShowStdDev());
      
      resultMatrixLatex0.m_ShowStdDev = true;
      String[] stringArray0 = resultMatrixLatex0.getOptions();
      assertTrue(resultMatrixLatex0.getShowStdDev());
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.headerKeys()Ljava/util/Enumeration;: root-Branch
   */

  @Test
  public void test26()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      Enumeration enumeration0 = resultMatrixGnuPlot0.headerKeys();
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
  }

  //Test case number: 27
  /*
   * 9 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.toString()Ljava/lang/String;: root-Branch
   * Goal 2. weka.experiment.ResultMatrix.getColName(I)Ljava/lang/String;: I25 Branch 48 IFEQ L1250 - false
   * Goal 3. weka.experiment.ResultMatrix.getColName(I)Ljava/lang/String;: I48 Branch 49 IFEQ L1255 - true
   * Goal 4. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I55 Branch 100 IFEQ L1525 - false
   * Goal 5. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I301 Branch 142 IFNE L1869 - true
   * Goal 6. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I317 Branch 143 IFNE L1872 - false
   * Goal 7. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I422 Branch 147 IFNE L1890 - false
   * Goal 8. weka.experiment.ResultMatrix.isSignificance(I)Z: I53 Branch 180 IFGE L2089 - false
   * Goal 9. weka.experiment.ResultMatrix.isSignificance(I)Z: I67 Branch 181 IF_ICMPNE L2092 - true
   */

  @Test
  public void test27()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(61, 61);
      assertEquals(61, resultMatrixGnuPlot0.getVisibleRowCount());
      
      String string0 = resultMatrixGnuPlot0.toString();
      assertEquals("\n##################\n# file: plot.dat #\n##################\n# generated by WEKA 3.7.7\n# contains the data for the plot\n\n# key for the x-axis\n# 1 - row0\n# 2 - row1\n# 3 - row2\n# 4 - row3\n# 5 - row4\n# 6 - row5\n# 7 - row6\n# 8 - row7\n# 9 - row8\n# 10 - row9\n# 11 - row10\n# 12 - row11\n# 13 - row12\n# 14 - row13\n# 15 - row14\n# 16 - row15\n# 17 - row16\n# 18 - row17\n# 19 - row18\n# 20 - row19\n# 21 - row20\n# 22 - row21\n# 23 - row22\n# 24 - row23\n# 25 - row24\n# 26 - row25\n# 27 - row26\n# 28 - row27\n# 29 - row28\n# 30 - row29\n# 31 - row30\n# 32 - row31\n# 33 - row32\n# 34 - row33\n# 35 - row34\n# 36 - row35\n# 37 - row36\n# 38 - row37\n# 39 - row38\n# 40 - row39\n# 41 - row40\n# 42 - row41\n# 43 - row42\n# 44 - row43\n# 45 - row44\n# 46 - row45\n# 47 - row46\n# 48 - row47\n# 49 - row48\n# 50 - row49\n# 51 - row50\n# 52 - row51\n# 53 - row52\n# 54 - row53\n# 55 - row54\n# 56 - row55\n# 57 - row56\n# 58 - row57\n# 59 - row58\n# 60 - row59\n# 61 - row60\n\n# data for the plot\n1 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n2 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n3 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n4 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n5 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n6 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n7 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n8 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n9 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n10 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n11 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n12 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n13 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n14 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n15 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n16 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n17 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n18 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n19 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n20 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n21 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n22 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n23 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n24 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n25 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n26 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n27 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n28 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n29 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n30 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n31 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n32 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n33 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n34 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n35 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n36 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n37 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n38 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n39 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n40 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n41 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n42 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n43 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n44 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n45 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n46 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n47 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n48 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n49 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n50 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n51 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n52 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n53 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n54 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n55 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n56 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n57 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n58 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n59 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n60 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n61 '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''\n#######\n# end #\n#######\n\n##################\n# file: plot.scr #\n##################\n# generated by WEKA 3.7.7\n# script to plot the data\n\n# display it in a window:\nset terminal x11\nset output\n\n# to display all data rows:\nset xrange [0:62]\n\n# axis labels, e.g.:\n#set xlabel \"Datasets\"\n#set ylabel \"Accuracy in %\"\n\n# the plot commands\nplot \"plot.dat\" using 1:2 with lines title \"col0\"\nreplot \"plot.dat\" using 1:3 with lines title \"col1\"\nreplot \"plot.dat\" using 1:4 with lines title \"col2\"\nreplot \"plot.dat\" using 1:5 with lines title \"col3\"\nreplot \"plot.dat\" using 1:6 with lines title \"col4\"\nreplot \"plot.dat\" using 1:7 with lines title \"col5\"\nreplot \"plot.dat\" using 1:8 with lines title \"col6\"\nreplot \"plot.dat\" using 1:9 with lines title \"col7\"\nreplot \"plot.dat\" using 1:10 with lines title \"col8\"\nreplot \"plot.dat\" using 1:11 with lines title \"col9\"\nreplot \"plot.dat\" using 1:12 with lines title \"col10\"\nreplot \"plot.dat\" using 1:13 with lines title \"col11\"\nreplot \"plot.dat\" using 1:14 with lines title \"col12\"\nreplot \"plot.dat\" using 1:15 with lines title \"col13\"\nreplot \"plot.dat\" using 1:16 with lines title \"col14\"\nreplot \"plot.dat\" using 1:17 with lines title \"col15\"\nreplot \"plot.dat\" using 1:18 with lines title \"col16\"\nreplot \"plot.dat\" using 1:19 with lines title \"col17\"\nreplot \"plot.dat\" using 1:20 with lines title \"col18\"\nreplot \"plot.dat\" using 1:21 with lines title \"col19\"\nreplot \"plot.dat\" using 1:22 with lines title \"col20\"\nreplot \"plot.dat\" using 1:23 with lines title \"col21\"\nreplot \"plot.dat\" using 1:24 with lines title \"col22\"\nreplot \"plot.dat\" using 1:25 with lines title \"col23\"\nreplot \"plot.dat\" using 1:26 with lines title \"col24\"\nreplot \"plot.dat\" using 1:27 with lines title \"col25\"\nreplot \"plot.dat\" using 1:28 with lines title \"col26\"\nreplot \"plot.dat\" using 1:29 with lines title \"col27\"\nreplot \"plot.dat\" using 1:30 with lines title \"col28\"\nreplot \"plot.dat\" using 1:31 with lines title \"col29\"\nreplot \"plot.dat\" using 1:32 with lines title \"col30\"\nreplot \"plot.dat\" using 1:33 with lines title \"col31\"\nreplot \"plot.dat\" using 1:34 with lines title \"col32\"\nreplot \"plot.dat\" using 1:35 with lines title \"col33\"\nreplot \"plot.dat\" using 1:36 with lines title \"col34\"\nreplot \"plot.dat\" using 1:37 with lines title \"col35\"\nreplot \"plot.dat\" using 1:38 with lines title \"col36\"\nreplot \"plot.dat\" using 1:39 with lines title \"col37\"\nreplot \"plot.dat\" using 1:40 with lines title \"col38\"\nreplot \"plot.dat\" using 1:41 with lines title \"col39\"\nreplot \"plot.dat\" using 1:42 with lines title \"col40\"\nreplot \"plot.dat\" using 1:43 with lines title \"col41\"\nreplot \"plot.dat\" using 1:44 with lines title \"col42\"\nreplot \"plot.dat\" using 1:45 with lines title \"col43\"\nreplot \"plot.dat\" using 1:46 with lines title \"col44\"\nreplot \"plot.dat\" using 1:47 with lines title \"col45\"\nreplot \"plot.dat\" using 1:48 with lines title \"col46\"\nreplot \"plot.dat\" using 1:49 with lines title \"col47\"\nreplot \"plot.dat\" using 1:50 with lines title \"col48\"\nreplot \"plot.dat\" using 1:51 with lines title \"col49\"\nreplot \"plot.dat\" using 1:52 with lines title \"col50\"\nreplot \"plot.dat\" using 1:53 with lines title \"col51\"\nreplot \"plot.dat\" using 1:54 with lines title \"col52\"\nreplot \"plot.dat\" using 1:55 with lines title \"col53\"\nreplot \"plot.dat\" using 1:56 with lines title \"col54\"\nreplot \"plot.dat\" using 1:57 with lines title \"col55\"\nreplot \"plot.dat\" using 1:58 with lines title \"col56\"\nreplot \"plot.dat\" using 1:59 with lines title \"col57\"\nreplot \"plot.dat\" using 1:60 with lines title \"col58\"\nreplot \"plot.dat\" using 1:61 with lines title \"col59\"\nreplot \"plot.dat\" using 1:62 with lines title \"col60\"\n\n# generate ps:\n#set terminal postscript\n#set output \"plot.ps\"\n#replot\n\n# generate png:\n#set terminal png size 800,600\n#set output \"plot.png\"\n#replot\n\n# wait for user to hit <Return>\npause -1\n#######\n# end #\n#######\n", string0);
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(61, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.getSummaryTitle(I)Ljava/lang/String;: root-Branch
   */

  @Test
  public void test28()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      String string0 = resultMatrixCSV0.getSummaryTitle(0);
      assertEquals("a", string0);
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.colNameWidthTipText()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test29()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot((ResultMatrix) resultMatrixHTML0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText((ResultMatrix) resultMatrixGnuPlot0);
      String string0 = resultMatrixPlainText0.colNameWidthTipText();
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals("The maximum width of the column names (0 = optimal).", string0);
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
  }

  //Test case number: 30
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.printRowNamesTipText()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test30()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String string0 = resultMatrixHTML0.printRowNamesTipText();
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("Whether to output row names or just numbers representing them.", string0);
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
  }

  //Test case number: 31
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.stdDevPrecTipText()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test31()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String string0 = resultMatrixHTML0.stdDevPrecTipText();
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals("The number of decimals after the decimal point for the standard deviation.", string0);
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
  }

  //Test case number: 32
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.showAverageTipText()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test32()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot((ResultMatrix) resultMatrixLatex0);
      String string0 = resultMatrixGnuPlot0.showAverageTipText();
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals("Whether to show the row with averages.", string0);
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
  }

  //Test case number: 33
  /*
   * 173 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.getRowOrder()[I: root-Branch
   * Goal 2. weka.experiment.ResultMatrix.padString(Ljava/lang/String;I)Ljava/lang/String;: root-Branch
   * Goal 3. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;I)I: root-Branch
   * Goal 4. weka.experiment.ResultMatrix.getColOrder()[I: root-Branch
   * Goal 5. weka.experiment.ResultMatrix.getVisibleColCount()I: I15 Branch 40 IF_ICMPGE L1185 - true
   * Goal 6. weka.experiment.ResultMatrix.getVisibleColCount()I: I15 Branch 40 IF_ICMPGE L1185 - false
   * Goal 7. weka.experiment.ResultMatrix.getVisibleColCount()I: I24 Branch 41 IFNE L1186 - true
   * Goal 8. weka.experiment.ResultMatrix.getVisibleColCount()I: I24 Branch 41 IFNE L1186 - false
   * Goal 9. weka.experiment.ResultMatrix.getVisibleRowCount()I: I15 Branch 42 IF_ICMPGE L1212 - true
   * Goal 10. weka.experiment.ResultMatrix.getVisibleRowCount()I: I15 Branch 42 IF_ICMPGE L1212 - false
   * Goal 11. weka.experiment.ResultMatrix.getVisibleRowCount()I: I24 Branch 43 IFNE L1213 - true
   * Goal 12. weka.experiment.ResultMatrix.getVisibleRowCount()I: I24 Branch 43 IFNE L1213 - false
   * Goal 13. weka.experiment.ResultMatrix.getColName(I)Ljava/lang/String;: I10 Branch 46 IFLT L1249 - false
   * Goal 14. weka.experiment.ResultMatrix.getColName(I)Ljava/lang/String;: I17 Branch 47 IF_ICMPGE L1249 - false
   * Goal 15. weka.experiment.ResultMatrix.getColName(I)Ljava/lang/String;: I25 Branch 48 IFEQ L1250 - true
   * Goal 16. weka.experiment.ResultMatrix.getColName(I)Ljava/lang/String;: I48 Branch 49 IFEQ L1255 - false
   * Goal 17. weka.experiment.ResultMatrix.getRowName(I)Ljava/lang/String;: I10 Branch 52 IFLT L1296 - false
   * Goal 18. weka.experiment.ResultMatrix.getRowName(I)Ljava/lang/String;: I17 Branch 53 IF_ICMPGE L1296 - false
   * Goal 19. weka.experiment.ResultMatrix.getRowName(I)Ljava/lang/String;: I25 Branch 54 IFEQ L1297 - true
   * Goal 20. weka.experiment.ResultMatrix.getRowName(I)Ljava/lang/String;: I25 Branch 54 IFEQ L1297 - false
   * Goal 21. weka.experiment.ResultMatrix.getRowName(I)Ljava/lang/String;: I48 Branch 55 IFEQ L1302 - true
   * Goal 22. weka.experiment.ResultMatrix.getRowName(I)Ljava/lang/String;: I48 Branch 55 IFEQ L1302 - false
   * Goal 23. weka.experiment.ResultMatrix.setColHidden(IZ)V: I6 Branch 56 IFLT L1321 - false
   * Goal 24. weka.experiment.ResultMatrix.setColHidden(IZ)V: I13 Branch 57 IF_ICMPGE L1321 - false
   * Goal 25. weka.experiment.ResultMatrix.getColHidden(I)Z: I6 Branch 58 IFLT L1333 - false
   * Goal 26. weka.experiment.ResultMatrix.getColHidden(I)Z: I13 Branch 59 IF_ICMPGE L1333 - false
   * Goal 27. weka.experiment.ResultMatrix.setRowHidden(IZ)V: I6 Branch 60 IFLT L1346 - false
   * Goal 28. weka.experiment.ResultMatrix.setRowHidden(IZ)V: I13 Branch 61 IF_ICMPGE L1346 - false
   * Goal 29. weka.experiment.ResultMatrix.getRowHidden(I)Z: I6 Branch 62 IFLT L1358 - false
   * Goal 30. weka.experiment.ResultMatrix.getRowHidden(I)Z: I13 Branch 63 IF_ICMPGE L1358 - false
   * Goal 31. weka.experiment.ResultMatrix.setMean(IID)V: I6 Branch 68 IFLT L1396 - false
   * Goal 32. weka.experiment.ResultMatrix.setMean(IID)V: I13 Branch 69 IF_ICMPGE L1396 - false
   * Goal 33. weka.experiment.ResultMatrix.setMean(IID)V: I18 Branch 70 IFLT L1396 - false
   * Goal 34. weka.experiment.ResultMatrix.setMean(IID)V: I25 Branch 71 IF_ICMPGE L1396 - false
   * Goal 35. weka.experiment.ResultMatrix.getMean(II)D: I6 Branch 72 IFLT L1410 - false
   * Goal 36. weka.experiment.ResultMatrix.getMean(II)D: I13 Branch 73 IF_ICMPGE L1410 - false
   * Goal 37. weka.experiment.ResultMatrix.getMean(II)D: I18 Branch 74 IFLT L1410 - false
   * Goal 38. weka.experiment.ResultMatrix.getMean(II)D: I25 Branch 75 IF_ICMPGE L1410 - false
   * Goal 39. weka.experiment.ResultMatrix.setStdDev(IID)V: I6 Branch 80 IFLT L1455 - false
   * Goal 40. weka.experiment.ResultMatrix.setStdDev(IID)V: I13 Branch 81 IF_ICMPGE L1455 - false
   * Goal 41. weka.experiment.ResultMatrix.setStdDev(IID)V: I18 Branch 82 IFLT L1455 - false
   * Goal 42. weka.experiment.ResultMatrix.setStdDev(IID)V: I25 Branch 83 IF_ICMPGE L1455 - false
   * Goal 43. weka.experiment.ResultMatrix.getStdDev(II)D: I6 Branch 84 IFLT L1469 - false
   * Goal 44. weka.experiment.ResultMatrix.getStdDev(II)D: I13 Branch 85 IF_ICMPGE L1469 - false
   * Goal 45. weka.experiment.ResultMatrix.getStdDev(II)D: I18 Branch 86 IFLT L1469 - false
   * Goal 46. weka.experiment.ResultMatrix.getStdDev(II)D: I25 Branch 87 IF_ICMPGE L1469 - false
   * Goal 47. weka.experiment.ResultMatrix.setSignificance(III)V: I6 Branch 88 IFLT L1484 - false
   * Goal 48. weka.experiment.ResultMatrix.setSignificance(III)V: I13 Branch 89 IF_ICMPGE L1484 - false
   * Goal 49. weka.experiment.ResultMatrix.setSignificance(III)V: I18 Branch 90 IFLT L1484 - false
   * Goal 50. weka.experiment.ResultMatrix.setSignificance(III)V: I25 Branch 91 IF_ICMPGE L1484 - false
   * Goal 51. weka.experiment.ResultMatrix.getSignificance(II)I: I6 Branch 92 IFLT L1498 - false
   * Goal 52. weka.experiment.ResultMatrix.getSignificance(II)I: I13 Branch 93 IF_ICMPGE L1498 - false
   * Goal 53. weka.experiment.ResultMatrix.getSignificance(II)I: I18 Branch 94 IFLT L1498 - false
   * Goal 54. weka.experiment.ResultMatrix.getSignificance(II)I: I25 Branch 95 IF_ICMPGE L1498 - false
   * Goal 55. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I10 Branch 96 IFLT L1519 - false
   * Goal 56. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I17 Branch 97 IF_ICMPGE L1519 - false
   * Goal 57. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I29 Branch 98 IF_ICMPGE L1520 - true
   * Goal 58. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I29 Branch 98 IF_ICMPGE L1520 - false
   * Goal 59. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I38 Branch 99 IFEQ L1521 - true
   * Goal 60. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I38 Branch 99 IFEQ L1521 - false
   * Goal 61. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I55 Branch 100 IFEQ L1525 - true
   * Goal 62. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I72 Branch 101 IF_ICMPNE L1528 - true
   * Goal 63. weka.experiment.ResultMatrix.getSignificanceCount(II)I: I72 Branch 101 IF_ICMPNE L1528 - false
   * Goal 64. weka.experiment.ResultMatrix.getDisplayRow(I)I: I6 Branch 105 IFLT L1578 - false
   * Goal 65. weka.experiment.ResultMatrix.getDisplayRow(I)I: I13 Branch 106 IF_ICMPGE L1578 - false
   * Goal 66. weka.experiment.ResultMatrix.getDisplayRow(I)I: I21 Branch 107 IFNONNULL L1579 - false
   * Goal 67. weka.experiment.ResultMatrix.getDisplayCol(I)I: I6 Branch 111 IFLT L1631 - false
   * Goal 68. weka.experiment.ResultMatrix.getDisplayCol(I)I: I13 Branch 112 IF_ICMPGE L1631 - false
   * Goal 69. weka.experiment.ResultMatrix.getDisplayCol(I)I: I21 Branch 113 IFNONNULL L1632 - false
   * Goal 70. weka.experiment.ResultMatrix.doubleToString(DI)Ljava/lang/String;: I15 Branch 114 IF_ICMPNE L1658 - true
   * Goal 71. weka.experiment.ResultMatrix.doubleToString(DI)Ljava/lang/String;: I15 Branch 114 IF_ICMPNE L1658 - false
   * Goal 72. weka.experiment.ResultMatrix.doubleToString(DI)Ljava/lang/String;: I48 Branch 115 IF_ICMPGE L1663 - true
   * Goal 73. weka.experiment.ResultMatrix.doubleToString(DI)Ljava/lang/String;: I48 Branch 115 IF_ICMPGE L1663 - false
   * Goal 74. weka.experiment.ResultMatrix.trimString(Ljava/lang/String;I)Ljava/lang/String;: I6 Branch 116 IFLE L1679 - true
   * Goal 75. weka.experiment.ResultMatrix.trimString(Ljava/lang/String;I)Ljava/lang/String;: I6 Branch 116 IFLE L1679 - false
   * Goal 76. weka.experiment.ResultMatrix.trimString(Ljava/lang/String;I)Ljava/lang/String;: I13 Branch 117 IF_ICMPLE L1679 - true
   * Goal 77. weka.experiment.ResultMatrix.padString(Ljava/lang/String;IZ)Ljava/lang/String;: I15 Branch 118 IF_ICMPGE L1713 - true
   * Goal 78. weka.experiment.ResultMatrix.padString(Ljava/lang/String;IZ)Ljava/lang/String;: I62 Branch 120 IFLE L1721 - false
   * Goal 79. weka.experiment.ResultMatrix.padString(Ljava/lang/String;IZ)Ljava/lang/String;: I69 Branch 121 IF_ICMPLE L1721 - true
   * Goal 80. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I10 Branch 122 IFLT L1754 - false
   * Goal 81. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I19 Branch 123 IF_ICMPGE L1754 - false
   * Goal 82. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I31 Branch 124 IF_ICMPGE L1755 - true
   * Goal 83. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I31 Branch 124 IF_ICMPGE L1755 - false
   * Goal 84. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I38 Branch 125 IFNE L1757 - true
   * Goal 85. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I38 Branch 125 IFNE L1757 - false
   * Goal 86. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I43 Branch 126 IFEQ L1757 - true
   * Goal 87. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I60 Branch 127 IF_ICMPNE L1761 - true
   * Goal 88. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I60 Branch 127 IF_ICMPNE L1761 - false
   * Goal 89. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I65 Branch 128 IFEQ L1761 - true
   * Goal 90. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I84 Branch 129 IF_ICMPLE L1764 - true
   * Goal 91. weka.experiment.ResultMatrix.getColSize([[Ljava/lang/String;IZZ)I: I84 Branch 129 IF_ICMPLE L1764 - false
   * Goal 92. weka.experiment.ResultMatrix.removeFilterName(Ljava/lang/String;)Ljava/lang/String;: I7 Branch 130 IFEQ L1781 - true
   * Goal 93. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I12 Branch 131 IFEQ L1813 - true
   * Goal 94. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I28 Branch 132 IFEQ L1816 - true
   * Goal 95. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I28 Branch 132 IFEQ L1816 - false
   * Goal 96. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I82 Branch 133 IF_ICMPGE L1826 - true
   * Goal 97. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I82 Branch 133 IF_ICMPGE L1826 - false
   * Goal 98. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I97 Branch 134 IFEQ L1828 - true
   * Goal 99. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I97 Branch 134 IFEQ L1828 - false
   * Goal 100. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I130 Branch 135 IFEQ L1835 - true
   * Goal 101. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I130 Branch 135 IFEQ L1835 - false
   * Goal 102. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I175 Branch 136 IF_ICMPGE L1846 - true
   * Goal 103. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I175 Branch 136 IF_ICMPGE L1846 - false
   * Goal 104. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I190 Branch 137 IFNE L1848 - true
   * Goal 105. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I190 Branch 137 IFNE L1848 - false
   * Goal 106. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I232 Branch 138 IF_ICMPGE L1857 - true
   * Goal 107. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I232 Branch 138 IF_ICMPGE L1857 - false
   * Goal 108. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I247 Branch 139 IFEQ L1859 - true
   * Goal 109. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I247 Branch 139 IFEQ L1859 - false
   * Goal 110. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I269 Branch 140 IF_ICMPGE L1863 - true
   * Goal 111. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I269 Branch 140 IF_ICMPGE L1863 - false
   * Goal 112. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I284 Branch 141 IFEQ L1865 - true
   * Goal 113. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I284 Branch 141 IFEQ L1865 - false
   * Goal 114. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I301 Branch 142 IFNE L1869 - false
   * Goal 115. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I317 Branch 143 IFNE L1872 - true
   * Goal 116. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I355 Branch 144 IFEQ L1879 - true
   * Goal 117. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I355 Branch 144 IFEQ L1879 - false
   * Goal 118. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I362 Branch 145 IFNE L1880 - true
   * Goal 119. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I385 Branch 146 IFEQ L1882 - true
   * Goal 120. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I422 Branch 147 IFNE L1890 - true
   * Goal 121. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I441 Branch 148 TABLESWITCH L1894 Case 0 - true
   * Goal 122. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I441 Branch 148 TABLESWITCH L1894 Case 0 - false
   * Goal 123. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I441 Branch 149 TABLESWITCH L1894 Case 1 - true
   * Goal 124. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I441 Branch 149 TABLESWITCH L1894 Case 1 - false
   * Goal 125. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I441 Branch 150 TABLESWITCH L1894 Case 2 - true
   * Goal 126. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I441 Branch 150 TABLESWITCH L1894 Case 2 - false
   * Goal 127. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I441 Branch 151 TABLESWITCH L1894 Default-Case - false
   * Goal 128. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I508 Branch 152 IFEQ L1913 - true
   * Goal 129. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I673 Branch 156 IF_ICMPGE L1948 - true
   * Goal 130. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I673 Branch 156 IF_ICMPGE L1948 - false
   * Goal 131. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I688 Branch 157 IFEQ L1950 - true
   * Goal 132. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I688 Branch 157 IFEQ L1950 - false
   * Goal 133. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I713 Branch 158 IFEQ L1958 - true
   * Goal 134. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I713 Branch 158 IFEQ L1958 - false
   * Goal 135. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I800 Branch 159 IF_ICMPGE L1976 - true
   * Goal 136. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I800 Branch 159 IF_ICMPGE L1976 - false
   * Goal 137. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I808 Branch 160 IF_ICMPNE L1978 - true
   * Goal 138. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I808 Branch 160 IF_ICMPNE L1978 - false
   * Goal 139. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I814 Branch 161 IFNE L1978 - true
   * Goal 140. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I814 Branch 161 IFNE L1978 - false
   * Goal 141. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I821 Branch 162 IF_ICMPNE L1978 - true
   * Goal 142. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I821 Branch 162 IF_ICMPNE L1978 - false
   * Goal 143. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I827 Branch 163 IFNE L1978 - true
   * Goal 144. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I827 Branch 163 IFNE L1978 - false
   * Goal 145. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I845 Branch 164 IF_ICMPGE L1982 - true
   * Goal 146. weka.experiment.ResultMatrix.toArray()[[Ljava/lang/String;: I845 Branch 164 IF_ICMPGE L1982 - false
   * Goal 147. weka.experiment.ResultMatrix.isRowName(I)Z: I6 Branch 165 IFNE L2000 - true
   * Goal 148. weka.experiment.ResultMatrix.isRowName(I)Z: I6 Branch 165 IFNE L2000 - false
   * Goal 149. weka.experiment.ResultMatrix.isMean(I)Z: I9 Branch 166 IFNE L2012 - true
   * Goal 150. weka.experiment.ResultMatrix.isMean(I)Z: I9 Branch 166 IFNE L2012 - false
   * Goal 151. weka.experiment.ResultMatrix.isMean(I)Z: I23 Branch 167 IFGE L2018 - true
   * Goal 152. weka.experiment.ResultMatrix.isMean(I)Z: I35 Branch 168 IFEQ L2021 - true
   * Goal 153. weka.experiment.ResultMatrix.isMean(I)Z: I35 Branch 168 IFEQ L2021 - false
   * Goal 154. weka.experiment.ResultMatrix.isMean(I)Z: I45 Branch 169 IF_ICMPNE L2022 - true
   * Goal 155. weka.experiment.ResultMatrix.isMean(I)Z: I45 Branch 169 IF_ICMPNE L2022 - false
   * Goal 156. weka.experiment.ResultMatrix.isMean(I)Z: I63 Branch 170 IFNE L2024 - true
   * Goal 157. weka.experiment.ResultMatrix.isMean(I)Z: I63 Branch 170 IFNE L2024 - false
   * Goal 158. weka.experiment.ResultMatrix.isStdDev(I)Z: I13 Branch 173 IFEQ L2053 - true
   * Goal 159. weka.experiment.ResultMatrix.isStdDev(I)Z: I13 Branch 173 IFEQ L2053 - false
   * Goal 160. weka.experiment.ResultMatrix.isStdDev(I)Z: I20 Branch 174 IFNE L2054 - true
   * Goal 161. weka.experiment.ResultMatrix.isStdDev(I)Z: I20 Branch 174 IFNE L2054 - false
   * Goal 162. weka.experiment.ResultMatrix.isStdDev(I)Z: I34 Branch 175 IFGE L2060 - true
   * Goal 163. weka.experiment.ResultMatrix.isStdDev(I)Z: I34 Branch 175 IFGE L2060 - false
   * Goal 164. weka.experiment.ResultMatrix.isStdDev(I)Z: I48 Branch 176 IF_ICMPNE L2063 - true
   * Goal 165. weka.experiment.ResultMatrix.isStdDev(I)Z: I48 Branch 176 IF_ICMPNE L2063 - false
   * Goal 166. weka.experiment.ResultMatrix.isSignificance(I)Z: I13 Branch 177 IFEQ L2080 - true
   * Goal 167. weka.experiment.ResultMatrix.isSignificance(I)Z: I13 Branch 177 IFEQ L2080 - false
   * Goal 168. weka.experiment.ResultMatrix.isSignificance(I)Z: I23 Branch 178 IFGE L2083 - true
   * Goal 169. weka.experiment.ResultMatrix.isSignificance(I)Z: I37 Branch 179 IF_ICMPNE L2086 - false
   * Goal 170. weka.experiment.ResultMatrix.isSignificance(I)Z: I53 Branch 180 IFGE L2089 - true
   * Goal 171. weka.experiment.ResultMatrix.isSignificance(I)Z: I67 Branch 181 IF_ICMPNE L2092 - false
   * Goal 172. weka.experiment.ResultMatrix.addHeader(Ljava/lang/String;Ljava/lang/String;)V: I14 Branch 182 IF_ICMPLE L2131 - true
   * Goal 173. weka.experiment.ResultMatrix.addHeader(Ljava/lang/String;Ljava/lang/String;)V: I14 Branch 182 IF_ICMPLE L2131 - false
   */

  @Test
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ResultMatrixHTML.main(stringArray0);
  }

  //Test case number: 34
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.showStdDevTipText()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test34()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      String string0 = resultMatrixSignificance0.showStdDevTipText();
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals("Whether to display the standard deviation column.", string0);
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getShowAverage());
  }

  //Test case number: 35
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.enumerateRowNamesTipText()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test35()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot((ResultMatrix) resultMatrixPlainText0);
      String string0 = resultMatrixGnuPlot0.enumerateRowNamesTipText();
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", string0);
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
  }

  //Test case number: 36
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.significanceWidthTipText()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test36()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String string0 = resultMatrixHTML0.significanceWidthTipText();
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals("The width of the significance indicator (0 = optimal).", string0);
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
  }

  //Test case number: 37
  /*
   * 16 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.<init>(Lweka/experiment/ResultMatrix;)V: root-Branch
   * Goal 2. weka.experiment.ResultMatrix.listOptions()Ljava/util/Enumeration;: root-Branch
   * Goal 3. weka.experiment.ResultMatrix.getDefaultEnumerateColNames()Z: root-Branch
   * Goal 4. weka.experiment.ResultMatrix.getDefaultPrintColNames()Z: root-Branch
   * Goal 5. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I150 Branch 16 IF_ICMPGE L483 - true
   * Goal 6. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I150 Branch 16 IF_ICMPGE L483 - false
   * Goal 7. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I165 Branch 17 IF_ICMPGE L484 - true
   * Goal 8. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I165 Branch 17 IF_ICMPGE L484 - false
   * Goal 9. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I234 Branch 18 IF_ICMPGE L491 - true
   * Goal 10. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I234 Branch 18 IF_ICMPGE L491 - false
   * Goal 11. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I274 Branch 19 IF_ICMPGE L496 - true
   * Goal 12. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I274 Branch 19 IF_ICMPGE L496 - false
   * Goal 13. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I314 Branch 20 IF_ICMPGE L501 - true
   * Goal 14. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I314 Branch 20 IF_ICMPGE L501 - false
   * Goal 15. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I339 Branch 21 IFNULL L505 - true
   * Goal 16. weka.experiment.ResultMatrix.assign(Lweka/experiment/ResultMatrix;)V: I457 Branch 24 IFNULL L520 - true
   */

  @Test
  public void test37()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot((ResultMatrix) resultMatrixPlainText0);
      Enumeration enumeration0 = resultMatrixGnuPlot0.listOptions();
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
  }

  //Test case number: 38
  /*
   * 1 covered goal:
   * Goal 1. weka.experiment.ResultMatrix.removeFilterNameTipText()Ljava/lang/String;: root-Branch
   */

  @Test
  public void test38()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String string0 = resultMatrixHTML0.removeFilterNameTipText();
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", string0);
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixHTML0.getColCount());
  }

  //Test case number: 39
  /*
   * 22 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.setEnumerateColNames(Z)V: root-Branch
   * Goal 2. weka.experiment.ResultMatrix.setShowAverage(Z)V: root-Branch
   * Goal 3. weka.experiment.ResultMatrix.setShowStdDev(Z)V: root-Branch
   * Goal 4. weka.experiment.ResultMatrix.setRemoveFilterName(Z)V: root-Branch
   * Goal 5. weka.experiment.ResultMatrix.setEnumerateRowNames(Z)V: root-Branch
   * Goal 6. weka.experiment.ResultMatrix.setOptions([Ljava/lang/String;)V: I13 Branch 1 IFLE L319 - true
   * Goal 7. weka.experiment.ResultMatrix.setOptions([Ljava/lang/String;)V: I43 Branch 2 IFLE L325 - true
   * Goal 8. weka.experiment.ResultMatrix.setOptions([Ljava/lang/String;)V: I73 Branch 3 IFLE L331 - true
   * Goal 9. weka.experiment.ResultMatrix.setOptions([Ljava/lang/String;)V: I103 Branch 4 IFLE L337 - true
   * Goal 10. weka.experiment.ResultMatrix.setOptions([Ljava/lang/String;)V: I133 Branch 5 IFLE L343 - true
   * Goal 11. weka.experiment.ResultMatrix.setOptions([Ljava/lang/String;)V: I163 Branch 6 IFLE L349 - true
   * Goal 12. weka.experiment.ResultMatrix.setOptions([Ljava/lang/String;)V: I193 Branch 7 IFLE L355 - true
   * Goal 13. weka.experiment.ResultMatrix.setOptions([Ljava/lang/String;)V: I223 Branch 8 IFLE L361 - true
   * Goal 14. weka.experiment.ResultMatrix.setMeanPrec(I)V: I6 Branch 30 IFLT L599 - false
   * Goal 15. weka.experiment.ResultMatrix.setStdDevPrec(I)V: I6 Branch 31 IFLT L637 - false
   * Goal 16. weka.experiment.ResultMatrix.setColNameWidth(I)V: I6 Branch 32 IFLT L675 - false
   * Goal 17. weka.experiment.ResultMatrix.setRowNameWidth(I)V: I6 Branch 33 IFLT L713 - false
   * Goal 18. weka.experiment.ResultMatrix.setMeanWidth(I)V: I6 Branch 34 IFLT L751 - false
   * Goal 19. weka.experiment.ResultMatrix.setStdDevWidth(I)V: I6 Branch 35 IFLT L789 - false
   * Goal 20. weka.experiment.ResultMatrix.setSignificanceWidth(I)V: I6 Branch 36 IFLT L827 - false
   * Goal 21. weka.experiment.ResultMatrix.setPrintColNames(Z)V: I11 Branch 38 IFNE L1018 - false
   * Goal 22. weka.experiment.ResultMatrix.setPrintRowNames(Z)V: I11 Branch 39 IFNE L1059 - false
   */

  @Test
  public void test39()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "v";
      resultMatrixHTML0.setOptions(stringArray0);
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
  }

  //Test case number: 40
  /*
   * 50 covered goals:
   * Goal 1. weka.experiment.ResultMatrix.getColNameWidth()I: root-Branch
   * Goal 2. weka.experiment.ResultMatrix.clearSummary()V: root-Branch
   * Goal 3. weka.experiment.ResultMatrix.getDefaultShowStdDev()Z: root-Branch
   * Goal 4. weka.experiment.ResultMatrix.getStdDevPrec()I: root-Branch
   * Goal 5. weka.experiment.ResultMatrix.getRemoveFilterName()Z: root-Branch
   * Goal 6. weka.experiment.ResultMatrix.getDefaultMeanWidth()I: root-Branch
   * Goal 7. weka.experiment.ResultMatrix.getMeanWidth()I: root-Branch
   * Goal 8. weka.experiment.ResultMatrix.getEnumerateRowNames()Z: root-Branch
   * Goal 9. weka.experiment.ResultMatrix.getShowAverage()Z: root-Branch
   * Goal 10. weka.experiment.ResultMatrix.getDefaultShowAverage()Z: root-Branch
   * Goal 11. weka.experiment.ResultMatrix.getDefaultCountWidth()I: root-Branch
   * Goal 12. weka.experiment.ResultMatrix.getShowStdDev()Z: root-Branch
   * Goal 13. weka.experiment.ResultMatrix.clearRanking()V: root-Branch
   * Goal 14. weka.experiment.ResultMatrix.clearHeader()V: root-Branch
   * Goal 15. weka.experiment.ResultMatrix.getRowCount()I: root-Branch
   * Goal 16. weka.experiment.ResultMatrix.getDefaultRowNameWidth()I: root-Branch
   * Goal 17. weka.experiment.ResultMatrix.getDefaultStdDevWidth()I: root-Branch
   * Goal 18. weka.experiment.ResultMatrix.<init>(II)V: root-Branch
   * Goal 19. weka.experiment.ResultMatrix.getCountWidth()I: root-Branch
   * Goal 20. weka.experiment.ResultMatrix.getStdDevWidth()I: root-Branch
   * Goal 21. weka.experiment.ResultMatrix.getDefaultEnumerateRowNames()Z: root-Branch
   * Goal 22. weka.experiment.ResultMatrix.getPrintRowNames()Z: root-Branch
   * Goal 23. weka.experiment.ResultMatrix.getPrintColNames()Z: root-Branch
   * Goal 24. weka.experiment.ResultMatrix.getDefaultPrintRowNames()Z: root-Branch
   * Goal 25. weka.experiment.ResultMatrix.getDefaultColNameWidth()I: root-Branch
   * Goal 26. weka.experiment.ResultMatrix.getSignificanceWidth()I: root-Branch
   * Goal 27. weka.experiment.ResultMatrix.getMeanPrec()I: root-Branch
   * Goal 28. weka.experiment.ResultMatrix.getRowNameWidth()I: root-Branch
   * Goal 29. weka.experiment.ResultMatrix.getDefaultMeanPrec()I: root-Branch
   * Goal 30. weka.experiment.ResultMatrix.getDefaultRemoveFilterName()Z: root-Branch
   * Goal 31. weka.experiment.ResultMatrix.getEnumerateColNames()Z: root-Branch
   * Goal 32. weka.experiment.ResultMatrix.getDefaultSignificanceWidth()I: root-Branch
   * Goal 33. weka.experiment.ResultMatrix.clear()V: root-Branch
   * Goal 34. weka.experiment.ResultMatrix.getColCount()I: root-Branch
   * Goal 35. weka.experiment.ResultMatrix.getDefaultStdDevPrec()I: root-Branch
   * Goal 36. weka.experiment.ResultMatrix.getOptions()[Ljava/lang/String;: I173 Branch 9 IFEQ L415 - true
   * Goal 37. weka.experiment.ResultMatrix.getOptions()[Ljava/lang/String;: I187 Branch 10 IFEQ L418 - true
   * Goal 38. weka.experiment.ResultMatrix.getOptions()[Ljava/lang/String;: I201 Branch 11 IFEQ L421 - true
   * Goal 39. weka.experiment.ResultMatrix.getOptions()[Ljava/lang/String;: I215 Branch 12 IFEQ L424 - true
   * Goal 40. weka.experiment.ResultMatrix.getOptions()[Ljava/lang/String;: I229 Branch 13 IFEQ L427 - false
   * Goal 41. weka.experiment.ResultMatrix.getOptions()[Ljava/lang/String;: I243 Branch 14 IFEQ L430 - false
   * Goal 42. weka.experiment.ResultMatrix.getOptions()[Ljava/lang/String;: I257 Branch 15 IFEQ L433 - true
   * Goal 43. weka.experiment.ResultMatrix.setSize(II)V: I73 Branch 26 IF_ICMPGE L578 - true
   * Goal 44. weka.experiment.ResultMatrix.setSize(II)V: I73 Branch 26 IF_ICMPGE L578 - false
   * Goal 45. weka.experiment.ResultMatrix.setSize(II)V: I88 Branch 27 IF_ICMPGE L579 - true
   * Goal 46. weka.experiment.ResultMatrix.setSize(II)V: I88 Branch 27 IF_ICMPGE L579 - false
   * Goal 47. weka.experiment.ResultMatrix.setSize(II)V: I124 Branch 28 IF_ICMPGE L583 - true
   * Goal 48. weka.experiment.ResultMatrix.setSize(II)V: I124 Branch 28 IF_ICMPGE L583 - false
   * Goal 49. weka.experiment.ResultMatrix.setSize(II)V: I158 Branch 29 IF_ICMPGE L585 - true
   * Goal 50. weka.experiment.ResultMatrix.setSize(II)V: I158 Branch 29 IF_ICMPGE L585 - false
   */

  @Test
  public void test40()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      String[] stringArray0 = resultMatrixLatex0.getOptions();
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
  }
}
