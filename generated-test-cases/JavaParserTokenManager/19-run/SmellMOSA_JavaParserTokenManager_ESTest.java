/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 17 23:01:56 GMT 2015
 */

package com.soops.CEN4010.JMCA.JParser;

import static org.junit.Assert.*;
import org.junit.Test;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.Reader;
import java.io.StringBufferInputStream;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 125 TABLESWITCH L159 Case 109 - true
   */

  @Test
  public void test000()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("cam");
      assertNotNull(stringBufferInputStream0);
      assertEquals(3, stringBufferInputStream0.available());
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(2, stringBufferInputStream0.available());
      assertEquals(99, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(2, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      int int1 = stringBufferInputStream0.read();
      assertEquals(1, stringBufferInputStream0.available());
      assertEquals(97, int1);
      assertFalse(int1 == int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(1, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("m", token0.toString());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 399 TABLESWITCH L466 Default-Case - true
   */

  @Test
  public void test001()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("*pro*");
      assertNotNull(stringBufferInputStream0);
      assertEquals(5, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(5, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(4, stringBufferInputStream0.available());
      assertEquals(42, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(4, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("pro", token0.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 72 TABLESWITCH L159 Case 56 - true
   */

  @Test
  public void test002()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("8h%0a4iuhJ`jljZR T");
      assertNotNull(stringBufferInputStream0);
      assertEquals(19, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(19, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(19, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("8", token0.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 192 TABLESWITCH L267 Case 86 - true
   */

  @Test
  public void test003()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("<VF\"t3=");
      assertNotNull(stringBufferInputStream0);
      assertEquals(7, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(7, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(7, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("<", token0.toString());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(88, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 100 TABLESWITCH L159 Case 84 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 683 TABLESWITCH L1166 Case 8 - true
   */

  @Test
  public void test004()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("Ty .gz!Q(M2$r!X2;,");
      assertNotNull(stringBufferInputStream0);
      assertEquals(18, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(18, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(18, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("Ty", token0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(".", token1.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(85, token1.kind);
      assertEquals(4, token1.endColumn);
      assertEquals(4, token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 67 TABLESWITCH L159 Case 51 - true
   */

  @Test
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("39Oohet~%qRP2=");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) stringReader0, 20, 20, 20);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("39", token0.toString());
      assertEquals(21, javaCharStream0.getColumn());
      assertEquals(20, javaCharStream0.getBeginColumn());
      assertEquals(20, javaCharStream0.getEndLine());
      assertEquals(20, javaCharStream0.getLine());
      assertEquals(20, javaCharStream0.getBeginLine());
      assertEquals(21, javaCharStream0.getEndColumn());
      assertEquals(20, token0.beginColumn);
      assertEquals(20, token0.beginLine);
      assertEquals(21, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(20, token0.endLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.setDebugStream(Ljava/io/PrintStream;)V: root-Branch
   */

  @Test
  public void test006()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("|A=G");
      assertNotNull(stringBufferInputStream0);
      assertEquals(4, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0, 1088, 1088, 1088);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(4, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(4, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.setDebugStream(javaParserTokenManager0.debugStream);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(4, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 224 TABLESWITCH L267 Case 118 - true
   */

  @Test
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("avst~4rajcp");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) stringReader0, 481, 481, 481);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(481, javaCharStream0.getBeginColumn());
      assertEquals(481, javaCharStream0.getLine());
      assertEquals(484, javaCharStream0.getColumn());
      assertEquals(481, javaCharStream0.getEndLine());
      assertEquals(481, javaCharStream0.getBeginLine());
      assertEquals(484, javaCharStream0.getEndColumn());
      assertEquals("avst", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(481, token0.beginLine);
      assertEquals(481, token0.beginColumn);
      assertEquals(481, token0.endLine);
      assertEquals(484, token0.endColumn);
      assertEquals(74, token0.kind);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 176 TABLESWITCH L267 Case 70 - true
   */

  @Test
  public void test008()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("eF\"=");
      assertNotNull(stringBufferInputStream0);
      assertEquals(4, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(4, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(4, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("eF", token0.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
  }

  //Test case number: 9
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 112 TABLESWITCH L159 Case 96 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 202 TABLESWITCH L267 Case 96 - true
   */

  @Test
  public void test009()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("+`Dvy{Ak59");
      assertNotNull(stringBufferInputStream0);
      assertEquals(10, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(10, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(10, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("+", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(101, token0.kind);
      assertEquals(1, token0.beginColumn);
      
      // Undeclared exception!
      try {
        Token token1 = javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"`\" (96), after : \"\"
         //
      }
  }

  //Test case number: 10
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 5 TABLESWITCH L13 Case 4 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I278 Branch 30 IFNE L65 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I296 Branch 32 IF_ICMPEQ L67 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 469 TABLESWITCH L614 Default-Case - true
   */

  @Test
  public void test010()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("synch:onized");
      assertNotNull(stringBufferInputStream0);
      assertEquals(12, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(12, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(12, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("synch", token0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(":", token1.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(6, token1.endColumn);
      assertEquals(92, token1.kind);
      assertEquals(6, token1.beginColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(token1.equals((Object)token0));
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 188 TABLESWITCH L267 Case 82 - true
   */

  @Test
  public void test011()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("0bR,U!v#qyquMg");
      assertNotNull(stringBufferInputStream0);
      assertEquals(14, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(14, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(13, stringBufferInputStream0.available());
      assertEquals(48, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(13, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals("bR", token0.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
  }

  //Test case number: 12
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 217 TABLESWITCH L267 Case 111 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I510 Branch 252 IFEQ L352 - true
   */

  @Test
  public void test012()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("so");
      assertNotNull(stringBufferInputStream0);
      assertEquals(2, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(2, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(2, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals("so", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 178 TABLESWITCH L267 Case 72 - true
   */

  @Test
  public void test013()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("h/Hg0gbDPZe>vkb");
      assertNotNull(stringBufferInputStream0);
      assertEquals(15, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(15, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(14, stringBufferInputStream0.available());
      assertEquals(104, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(14, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("/", token0.toString());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(104, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 159 TABLESWITCH L267 Case 53 - true
   */

  @Test
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v5usm");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) stringReader0, 5291, 5291, 5291);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(5291, javaCharStream0.getBeginColumn());
      assertEquals(5295, javaCharStream0.getEndColumn());
      assertEquals(5295, javaCharStream0.getColumn());
      assertEquals(5291, javaCharStream0.getEndLine());
      assertEquals(5291, javaCharStream0.getBeginLine());
      assertEquals(5291, javaCharStream0.getLine());
      assertEquals("v5usm", token0.toString());
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(5295, token0.endColumn);
      assertEquals(5291, token0.beginLine);
      assertEquals(5291, token0.beginColumn);
      assertEquals(5291, token0.endLine);
      assertEquals(74, token0.kind);
  }

  //Test case number: 15
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 381 TABLESWITCH L466 Case 101 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I134 Branch 402 IFEQ L483 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I153 Branch 403 IFEQ L485 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I172 Branch 404 IFEQ L487 - false
   */

  @Test
  public void test015()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("else");
      assertNotNull(stringBufferInputStream0);
      assertEquals(4, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(4, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(4, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("else", token0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(27, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(4, token0.endColumn);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
  }

  //Test case number: 16
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 142 TABLESWITCH L159 Case 126 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 160 TABLESWITCH L267 Case 54 - true
   */

  @Test
  public void test016()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("Rv6QhzC~%");
      assertNotNull(stringBufferInputStream0);
      assertEquals(9, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0, 0, 0, 0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(9, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(9, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(8, stringBufferInputStream0.available());
      assertEquals(82, int0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("v6QhzC", token0.toString());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("~", token1.toString());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(90, token1.kind);
      assertEquals(6, token1.beginColumn);
      assertEquals(6, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertFalse(token1.equals((Object)token0));
  }

  //Test case number: 17
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 96 TABLESWITCH L159 Case 80 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 109 TABLESWITCH L159 Case 93 - true
   */

  @Test
  public void test017()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("P]E?7L$/me6?QeZ<D}");
      assertNotNull(stringBufferInputStream0);
      assertEquals(18, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(18, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(18, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("P", token0.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("]", token1.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, token1.beginColumn);
      assertEquals(82, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertFalse(token1.equals((Object)token0));
  }

  //Test case number: 18
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 601 TABLESWITCH L918 Case 49 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 603 TABLESWITCH L918 Case 51 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1378 Branch 672 IFNE L1151 - false
   */

  @Test
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '0';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'0', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) '0', (int) '0', (int) '\u0000');
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertArrayEquals(new char[] {'0', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertArrayEquals(new char[] {'0', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("0", token0.toString());
      assertEquals(48, javaCharStream0.getBeginLine());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(48, javaCharStream0.getLine());
      assertEquals(48, javaCharStream0.getEndLine());
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertEquals(48, token0.endLine);
      assertEquals(48, token0.beginLine);
      assertEquals(66, token0.kind);
      assertEquals(48, token0.beginColumn);
      assertEquals(48, token0.endColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertArrayEquals(new char[] {'0', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 19
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 70 TABLESWITCH L159 Case 54 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 144 TABLESWITCH L267 Case 38 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I43 Branch 232 IFEQ L270 - true
   */

  @Test
  public void test019()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("6c&zM{M\tBx");
      assertNotNull(stringBufferInputStream0);
      assertEquals(10, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(10, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(10, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("6", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("c", token1.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 49 TABLESWITCH L159 Case 33 - true
   */

  @Test
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!i[gG$:");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) stringReader0, 5280, 5280, 5280);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("!", token0.toString());
      assertEquals(5280, javaCharStream0.getEndColumn());
      assertEquals(5280, javaCharStream0.getColumn());
      assertEquals(5280, javaCharStream0.getLine());
      assertEquals(5280, javaCharStream0.getBeginColumn());
      assertEquals(5280, javaCharStream0.getEndLine());
      assertEquals(5280, javaCharStream0.getBeginLine());
      assertEquals(5280, token0.endColumn);
      assertEquals(5280, token0.beginLine);
      assertEquals(5280, token0.beginColumn);
      assertEquals(5280, token0.endLine);
      assertEquals(89, token0.kind);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 73 TABLESWITCH L159 Case 57 - true
   */

  @Test
  public void test021()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("9rU~x");
      assertNotNull(stringBufferInputStream0);
      assertEquals(5, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(5, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(5, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("9", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 68 TABLESWITCH L159 Case 52 - true
   */

  @Test
  public void test022()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("4!Okv");
      assertNotNull(stringBufferInputStream0);
      assertEquals(5, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(5, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(5, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("4", token0.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I173 Branch 238 IFEQ L299 - false
   */

  @Test
  public void test023()  throws Throwable  {
      char[] charArray0 = new char[17];
      charArray0[0] = '=';
      charArray0[1] = '=';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) '=', 31, (int) '^');
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("==", token0.toString());
      assertEquals(61, javaCharStream0.getBeginLine());
      assertEquals(61, javaCharStream0.getEndLine());
      assertEquals(32, javaCharStream0.getColumn());
      assertEquals(31, javaCharStream0.getBeginColumn());
      assertEquals(32, javaCharStream0.getEndColumn());
      assertEquals(61, javaCharStream0.getLine());
      assertEquals(32, token0.endColumn);
      assertEquals(61, token0.beginLine);
      assertEquals(61, token0.endLine);
      assertEquals(93, token0.kind);
      assertEquals(31, token0.beginColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 141 TABLESWITCH L159 Case 125 - true
   */

  @Test
  public void test024()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("v}o<yu^m0;");
      assertNotNull(stringBufferInputStream0);
      assertEquals(10, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(10, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(9, stringBufferInputStream0.available());
      assertEquals(118, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(9, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("}", token0.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(80, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 137 TABLESWITCH L159 Case 121 - true
   */

  @Test
  public void test025()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("synchronized");
      assertNotNull(stringBufferInputStream0);
      assertEquals(12, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(12, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(11, stringBufferInputStream0.available());
      assertEquals(115, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(11, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(11, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("ynchronized", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(10, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(11, token0.endColumn);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 310 TABLESWITCH L390 Case 101 - true
   */

  @Test
  public void test026()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("case");
      assertNotNull(stringBufferInputStream0);
      assertEquals(4, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(4, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(3, stringBufferInputStream0.available());
      assertEquals(99, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(3, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("ase", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
  }

  //Test case number: 27
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 61 TABLESWITCH L159 Case 45 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 201 TABLESWITCH L267 Case 95 - true
   */

  @Test
  public void test027()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("-_h:(C+[*q$a/t");
      assertNotNull(stringBufferInputStream0);
      assertEquals(14, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(14, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(14, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("-", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(102, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 91 TABLESWITCH L159 Case 75 - true
   */

  @Test
  public void test028()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("PK2r");
      assertNotNull(stringBufferInputStream0);
      assertEquals(4, stringBufferInputStream0.available());
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(3, stringBufferInputStream0.available());
      assertEquals(80, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(3, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(3, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("K2r", token0.toString());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, token0.beginColumn);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
  }

  //Test case number: 29
  @Test
  public void test029()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(":\r+sG/;rRdGnh~GL");
      assertNotNull(stringBufferInputStream0);
      assertEquals(16, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(16, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(15, stringBufferInputStream0.available());
      assertEquals(58, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(15, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("+", token0.toString());
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getEndLine());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, token0.endColumn);
      assertEquals(101, token0.kind);
      assertEquals(2, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
  }

  //Test case number: 30
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 95 TABLESWITCH L159 Case 79 - true
   */

  @Test
  public void test030()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("=O");
      assertNotNull(stringBufferInputStream0);
      assertEquals(2, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(2, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(2, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("=", token0.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(87, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("O", token1.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertFalse(token1.equals((Object)token0));
  }

  //Test case number: 31
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I172 Branch 24 IFEQ L42 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I206 Branch 26 IFEQ L51 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I281 Branch 337 IFEQ L436 - false
   */

  @Test
  public void test031()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      
      StringReader stringReader0 = new StringReader("int");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals("int", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(40, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
  }

  //Test case number: 32
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 390 TABLESWITCH L466 Case 110 - true
   */

  @Test
  public void test032()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("printClassifier");
      assertNotNull(stringBufferInputStream0);
      assertEquals(15, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(15, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(15, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("printClassifier", token0.toString());
      assertEquals(15, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(15, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, token0.beginLine);
      assertEquals(15, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(14, javaCharStream0.bufpos);
  }

  //Test case number: 33
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I245 Branch 242 IFEQ L307 - false
   */

  @Test
  public void test033()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("+=");
      assertNotNull(stringBufferInputStream0);
      assertEquals(2, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(2, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(2, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("+=", token0.toString());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(110, token0.kind);
      assertEquals(1, token0.beginLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
  }

  //Test case number: 34
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 59 TABLESWITCH L159 Case 43 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 149 TABLESWITCH L267 Case 43 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I80 Branch 234 IFEQ L278 - false
   */

  @Test
  public void test034()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("C#17_");
      assertNotNull(stringBufferInputStream0);
      assertEquals(5, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(5, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '+';
      charArray0[1] = '+';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'+', '+', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) charArrayReader0, (int) '\u0000', (-1));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.staticFlag);
      assertArrayEquals(new char[] {'+', '+', '\u0000'}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.staticFlag);
      assertArrayEquals(new char[] {'+', '+', '\u0000'}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertEquals("++", token0.toString());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(-1, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(99, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals((-1), token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(javaCharStream1.staticFlag);
      assertArrayEquals(new char[] {'+', '+', '\u0000'}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
  }

  //Test case number: 35
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 397 TABLESWITCH L466 Case 117 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 462 TABLESWITCH L614 Case 110 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I237 Branch 475 IFEQ L647 - false
   */

  @Test
  public void test035()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("return");
      assertNotNull(stringBufferInputStream0);
      assertEquals(6, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(6, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(6, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("return", token0.toString());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(6, token0.endColumn);
      assertEquals(50, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
  }

  //Test case number: 36
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 690 TABLESWITCH L1166 Case 15 - true
   */

  @Test
  public void test036()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("v'@a^)\":;&9mz{hm-");
      assertNotNull(stringBufferInputStream0);
      assertEquals(17, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(17, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(16, stringBufferInputStream0.available());
      assertEquals(118, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(16, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      // Undeclared exception!
      try {
        Token token0 = javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"a\" (97), after : \"\\'@\"
         //
      }
  }

  //Test case number: 37
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 84 TABLESWITCH L159 Case 68 - true
   */

  @Test
  public void test037()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("DEFAULT");
      assertNotNull(stringBufferInputStream0);
      assertEquals(7, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(7, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(7, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("DEFAULT", token0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(7, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
  }

  //Test case number: 38
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 173 TABLESWITCH L267 Case 67 - true
   */

  @Test
  public void test038()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("QvCi%");
      assertNotNull(stringBufferInputStream0);
      assertEquals(5, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(5, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(4, stringBufferInputStream0.available());
      assertEquals(81, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(4, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("vCi", token0.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
  }

  //Test case number: 39
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 69 TABLESWITCH L159 Case 53 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1561 Branch 733 IFEQ L1189 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1567 Branch 734 IF_ICMPLE L1189 - false
   */

  @Test
  public void test039()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("5F\"Jz=");
      assertNotNull(stringBufferInputStream0);
      assertEquals(6, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(6, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(6, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("5F", token0.toString());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(70, token0.kind);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
  }

  //Test case number: 40
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 214 TABLESWITCH L267 Case 108 - true
   */

  @Test
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("flavours");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals("flavours", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(8, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
  }

  //Test case number: 41
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1880 Branch 749 LOOKUPSWITCH L1252 Case 3 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1880 Branch 752 LOOKUPSWITCH L1252 Case 32 - false
   */

  @Test
  public void test041()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("\u0001\u42EA\u0001\u42EB\u0001\u1CCA\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u1CCB\u0001\u0CBD\u0001\u0CBE\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CBF\u0001L\u0001\u01AB\u0001\t\u0001\u0D0C\u0001\u0CBF\u0001\u0D4A\u0001\t\u0001L\u0001\u0CC1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u0D0C\u0001\u0D0D\u0001\u42EC\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D13\u0001\u1CC2\u0001\u0D4A\u0001\u0D16\u0001\u0D17\u0001\u0CB2\u0001\u0CB3\u0001\u0D56\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0CC3\u0001\u02EC\u0001\u0CB6\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CC4\u0001L\u0001\u01AB\u0001\t\u0001\u0D0C\u0001\u0CC4\u0001\u0D4A\u0001\t\u0001L\u0001\u0CC1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u0D0C\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D13\u0001\u1CC2\u0001\u0D4A\u0001\u0D16\u0001\u0D17\u0001\u0CB2\u0001\u0CB3\u0001\u0D56\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0CC3\u0001\u3353\u0001\u42ED\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CC4\u0001L\u0001\u01AB\u0001\t\u0001\u0D0C\u0001\u0CC4\u0001\u0D4A\u0001\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u1D0D\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D48\u0001\u1CC7\u0001\u0D4A\u0001\u0D16\u0001\u0D4B\u0001\u2096\u0001\u2097\u0001\u1CC8\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0CB5\u0001\u02EC\u0001\u0CB6\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CB8\u0001L\u0001\u01AB\u0001\t\u0001\u1D0D\u0001\u0CB8\u0001\u0D4A\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0CCF\u0001\u0CD0\u0001\u0CD1\u0001\u0CD2\u0001\u0CD3\u0001\u0CD4\u0001\u3000\u0001\u0CD2\u0001\t\u0001\u0CD2\u0001\u0CD6\u0001\u0CD7\u0001\u0CD8\u0001\u1D6A\u0001\u0CDA\u0001\u119B\u0001\u02E6\u0001\u0CDC\u0001\u0CDD\u0001\u0CD4\u0001\u0CDE\u0001\u0CDF\u0001\u1CCF\u0001\u0C81\u0001\u1CCD\u0001\u0C9E\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u01AB\u0001\t\u0001\u0CD2\u0001\u0C96\u0001\u1D6A\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0CCF\u0001\u0CD0\u0001\u0CD1\u0001\u0CD2\u0001\u0CD3\u0001\u0CD4\u0001\u0D01\u0001\u0CD2\u0001\t\u0001\u0CD2\u0001\u0CD6\u0001\u0CD7\u0001\u0CD8\u0001\u0CD9\u0001\u0CDA\u0001\u0CDB\u0001\u02E6\u0001\u0CDC\u0001\u1D55\u0001\u0CD4\u0001\u0CDE\u0001\u0CDF\u0001\u0C9B\u0001\u4126\u0001\u3392\u0001\u0C98\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u01AB\u0001\t\u0001\u0CD2\u0001\u0C96\u0001\u0CD9\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0C85\u0001\u0C86\u0001\u0C7C\u0001\u0C87\u0001\u0C88\u0001\u02DE\u0001\u02E0\u0001\u0C87\u0001\t\u0001\u0C87\u0001\u0C7D\u0001\u0C8A\u0001\u0C8B\u0001\u0C8C\u0001\u0C8D\u0001\u0C8E\u0001\u02E6\u0001\u02E7\u0001\u0C8F\u0001\u02DE\u0001\u0C90\u0001\u0C91\u0001\u42EE\u0001\u0C81\u0001\u1CCD\u0001\u1CC3\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u01AB\u0001\t\u0001\u0C87\u0001\u0C96\u0001\u0C8C\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0C85\u0001\u0C86\u0001\u0C7C\u0001\u0C87\u0001\u0C88\u0001\u02DE\u0001\u42EF\u0001\u0C87\u0001\t\u0001\u0C87\u0001\u0C7D\u0001\u0C8A\u0001\u0C8B\u0001\u0C8C\u0001\u0C8D\u0001\u0CA5\u0001\u02E6\u0001\u02E7\u0001\u0C8F\u0001\u02DE\u0001\u0C90\u0001\u0C91\u0001\u1D08\u0001\u0C81\u0001\u1CCD\u0001\u0C9E\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u01AB\u0001\t\u0001\u0C87\u0001\u0C96\u0001\u0C8C\u0001\t\u0001L\u0001\u42F0\u0001\u02DA\u0001\u0C85\u0001\u0C86\u0001\u0C7C\u0001\u0C87\u0001\u0C88\u0001\u02DE\u0001\u0C89\u0001\u0C87\u0001\t\u0001\u0C87\u0001\u0C7D\u0001\u0C8A\u0001\u0C8B\u0001\u0C8C\u0001\u0C8D\u0001\u0C8E\u0001\u02E6\u0001\u02E7\u0001\u0C8F\u0001\u02DE\u0001\u0C90\u0001\u0C91\u0001\u1D08\u0001\u0C81\u0001\u1CCD\u0001\u0C98\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u01AB\u0001\t\u0001\u0C87\u0001\u0C96\u0001\u0C8C\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0CCF\u0001\u0CD0\u0001\u42F1\u0001\u0CD2\u0001\u0CD3\u0001\u0CD4\u0001\u0CD5\u0001\u0CD2\u0001\t\u0001\u0CD2\u0001\u0CD6\u0001\u0CD7\u0001\u1D51\u0001\u0CD9\u0001\u0CDA\u0001\u0CDB\u0001\u02E6\u0001\u0CDC\u0001\u0CDD\u0001\u0CD4\u0001\u0CDE\u0001\u0CDF\u0001\u1CCF\u0001\u0C81\u0001\u1CCD\u0001\u0C98\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u01AB\u0001\t\u0001\u0CD2\u0001\u0C96\u0001\u0CD9\u0001\t\u0001L\u0001\u0C7A\u0001\u0C70\u0001\u0C7B\u0001\u02DC\u0001\u0C7C\u0001\u02DE\u0001\u02DF\u0001\u02DE\u0001\u02E0\u0001\u02DE\u0001\t\u0001\u02DE\u0001\u0C7D\u0001\u02E2\u0001\u42F2\u0001\u02E3\u0001\u02E4\u0001\u02E5\u0001\u02E6\u0001\u02E7\u0001\u0C7F\u0001\u02DE\u0001\u02E9\u0001\u02EA\u0001\u0C80\u0001\u0C81\u0001\u0C82\u0001\u0C83\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C84\u0001L\u0001\u01AB\u0001\t\u0001\u02DE\u0001\u0C84\u0001\u02E3\u0001\t\u0001L\u0001\u42F3\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u0D0C\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D13\u0001\u1CC2\u0001\u0D4A\u0001\u0D16\u0001\u0D17\u0001\u0CB2\u0001\u0CB3\u0001\u0D56\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0CC3\u0001\u02EC\u0001\u0CB6\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CC4\u0001L\u0001\u01AB\u0001\t\u0001\u0D0C\u0001\u0CC4\u0001\u0D4A\u0001\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u1CEF\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D48\u0001\u1CC7\u0001\u0D4A\u0001\u0D16\u0001\u0D4B\u0001\u0CB2\u0001\u0CB3\u0001\u2FF9\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0CB5\u0001\u02EC\u0001\u0CB6\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CB8\u0001L\u0001\u01AB\u0001\t\u0001\u1CEF\u0001\u0CB8\u0001\u0D4A\u0002\u0000\u0001\u0183\u0004\u0000\u0001\u4088\u0010\u0000\u0001\u0823\b\u0000\u0001\u02C4\u0003\u0000\u0001\u4088\u0001\u02C4\u0001\u0000\u0001\t\u0001L\u0001\u0CC1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u0D0C\u0001\u42F4\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D13\u0001\u1CC2\u0001\u0D4A\u0001\u0D16\u0001\u0D17\u0001\u0CB2\u0001\u0CB3\u0001\u0D56\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0CC3\u0001\u02EC\u0001\u0CB6\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CC4\u0001L\u0001\u01AB\u0001\t\u0001\u0D0C\u0001\u0CC4\u0001\u0D4A\u0010\u0000\u0001\u1282\u0001\u42F5\u0005\u0000\u0001\u1283\u000F\u0000\u0001\u42F5\u0005\u0000\u0001\u42F6)\u0000\u0001\u42F7\u001D\u0000\u0001\u42F7\u0013\u0000\u0001\u42F8\u0001\u0000\u0001\u42F8\u0013\u0000\u0001\u42F8\u0001\t\u0001\n\u0001\u04A9\u0001\u0466\u0001\u0093\u0001\u04AA\u0001\u0095\u0001\u04AB\u0001\u04AC\u0001\u0096\u0001\u04AD\u0001\u04AB\u0001\t\u0001\u04AB\u0001\u04AD\u0001\u04AE\u0001\u04AB\u0001\u04AF\u0001\u04B0\u0001\u049C\u0001\u017F\u0001\u0180\u0001\u42F9\u0001\u0096\u0001\u04B1\u0001\u0192\u0001\u12A4\u0001\u0539\u0001\u053A\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A7\u0001\n\u0002\t\u0001\u04AB\u0001\u04A7\u0001\u04AF\u0016\t\u0001\u359E\u0007\t\u0001\u0000\u0001|\u0001\u0000\r\t\u0001\u04A2\u0001\u060B\b\t\u0001\u12AC\t\t\u0001\u12AD\u0003\t\u0001\u0000\u0001|\u0001\u0000\u0004\t\u0001\u060B\u0003\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u0520\u0001\u0779\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12AE\u0001\u04F3\u0001\u04F4\u0001\u04F5\u0001\u017F\u0001\u0180\u0001\u12AB\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u12AF\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A7\u0001\n\u0002\t\u0001\u0779\u0001\u04A7\u0001\u04F3\u0001\t\u0001\n\u0001\u42FA\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u04E9\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12B0\u0001\u04F3\u0001\u04F4\u0001\u051E\u0001\u017F\u0001\u0180\u0001\u04F6\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u0538\u0001\u0539\u0001\u053A\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A1\u0001\n\u0002\t\u0001\u04E9\u0001\u04A1\u0001\u04F3\u0001\t\u0001\n\u0001\u0465\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u04E9\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12A6\u0001\u04F3\u0001\u04F4\u0001\u04F5\u0001\u0468\u0001\u0469\u0001\u0581\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u046A\u0001\u008E\u0001\u046B\u0001\u046C\u0001\u0000\u0001(\u0001\u0000\u0001\u046D\u0001\n\u0002\t\u0001\u04E9\u0001\u046D\u0001\u04F3\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u05D6\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12A6\u0001\u04F3\u0001\u04F4\u0001\u051E\u0001\u017F\u0001\u0180\u0001\u12AB\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u049E\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A7\u0001\n\u0002\t\u0001\u05D6\u0001\u04A7\u0001\u04F3\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u0520\u0001\u04E9\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12B7\u0001\u04F3\u0001\u04F4\u0001\u05F6\u0001\u017F\u0001\u0180\u0001\u12AB\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u12AF\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A7\u0001\n\u0002\t\u0001\u04E9\u0001\u04A7\u0001\u04F3\u000E\t\u0001\u3631\u0005\t\u0002\u16DE\b\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u051D\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u3634\u0001\u04F1\u0001\u12A6\u0001\u04F3\u0001\u04F4\u0001\u051E\u0001\u017F\u0001\u0180\u0001\u12AB\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u049E\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A7\u0001\n\u0002\t\u0001\u051D\u0001\u04A7\u0001\u04F3\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u0479\u0001\u047A\u0001\u0470\u0001\u047B\u0001\u047C\u0001\u0082\u0001\u047D\u0001\u047B\u0001\t\u0001\u047B\u0001\u0471\u0001\u047E\u0001\u047F\u0001\u0480\u0001\u0481\u0001\u0482\u0001\u0089\u0001\u008A\u0001\u0483\u0001\u0082\u0001\u0484\u0001\u0479\u0001\u42FB\u0001\u25A1\u0001\u25A2\u0001\u12A9\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u047B\u0001\u0489\u0001\u0480\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u0479\u0001\u047A\u0001\u0470\u0001\u047B\u0001\u047C\u0001\u0082\u0001\u0084\u0001\u047B\u0001\t\u0001\u047B\u0001\u0471\u0001\u047E\u0001\u047F\u0001\u0480\u0001\u0481\u0001\u0482\u0001\u14DF\u0001\u14E0\u0001\u0483\u0001\u0082\u0001\u0484\u0001\u0479\u0001\u281B\u0001\u26E6\u0001\u26EE\u0001\u12A7\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u047B\u0001\u0489\u0001\u0480\u001A\t\u0001\u42FC\u0003\t\u0001\u0000\u0001|\u0001\u0000\u0010\t\u0001\u42FD\u0014\t\u0001\u0000\u0001|\u0001\u0000\u000B\t\u0005\u12D6\u0001\u42FE\u0002\u12D6\u0001\t\u0007\u12D6\u0001\t\u0005\u12D6\u0001\u060C\u0002\u1336\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0004\t\u0001\u12D6\u0001\t\u0001\u12D6\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u04B2\u0001\u04B3\u0001\u04B4\u0001\u04B5\u0001\u04B6\u0001\u42FF\u0001\u04B8\u0001\u04B5\u0001\t\u0001\u04B5\u0001\u04B9\u0001\u04BA\u0001\u1323\u0001\u04BC\u0001\u04BD\u0001\u04BE\u0001\u0089\u0001\u04BF\u0001\u04C0\u0001\u04B7\u0001\u04C1\u0001\u04B2\u0001\u048D\u0001\u0486\u0001\u0487\u0001\u0488\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u04B5\u0001\u0489\u0001\u04BC\u0001\t\u0001\n\u0001\u04A9\u0001\u0466\u0001\u0093\u0001\u04AA\u0001\u0095\u0001\u04AB\u0001\u04AC\u0001\u0096\u0001\u04AD\u0001\u04AB\u0001\t\u0001\u04AB\u0001\u04AD\u0001\u04AE\u0001\u04AB\u0001\u04AF\u0001\u04B0\u0001\u049C\u0001\u017F\u0001\u0180\u0001\u4300\u0001\u0096\u0001\u04B1\u0001\u0192\u0001\u12A4\u0001\u0539\u0001\u053A\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A7\u0001\n\u0002\t\u0001\u04AB\u0001\u04A7\u0001\u04AF\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u1743\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12A6\u0001\u04F3\u0001\u04F4\u0001\u051E\u0001\u12B5\u0001\u12B6\u0001\u04F6\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u049E\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u3DA5\u0001\n\u0002\t\u0001\u1743\u0001\u3DA5\u0001\u04F3\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u12B8\u0001\u12B9\u0001\u12BA\u0001\u2548\u0001\u12BC\u0001\u12BD\u0001\u12BE\u0001\u12BF\u0001\u04EE\u0001\u12C0\u0001\u12C1\u0001\u12C2\u0001\u12C3\u0001\u12C4\u0001\u12C5\u0001\u12C6\u0001\u017F\u0001\u12C7\u0001\u1331\u0001\u12C9\u0001\u12CA\u0001\u12CB\u0001\u049E\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u3DA5\u0001\n\u0002\t\u0001\u2548\u0001\u3DA5\u0001\u12C4\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u051D\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12A6\u0001\u04F3\u0001\u04F4\u0001\u051E\u0001\u12B5\u0001\u12B6\u0001\u04F6\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u049E\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u3DA5\u0001\n\u0002\t\u0001\u051D\u0001\u3DA5\u0001\u04F3\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u12B8\u0001\u12B9\u0001\u12BA\u0001\u345E\u0001\u12BC\u0001\u12BD\u0001\u12BE\u0001\u12BF\u0001\u04EE\u0001\u12C0\u0001\u12C1\u0001\u12C2\u0001\u12C3\u0001\u12C4\u0001\u12C5\u0001\u12C6\u0001\u017F\u0001\u12C7\u0001\u1331\u0001\u12C9\u0001\u12CA\u0001\u12CB\u0001\u049E\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u3DA5\u0001\n\u0002\t\u0001\u345E\u0001\u3DA5\u0001\u12C4\u0001\t\u0001\n\u0001\u0092\u0001\u054B\u0001\u25E1\u0001\u25E2\u0001\u25E3\u0001\u2609\u0001\u25E5\u0001\u25E6\u0001\u25E7\u0001\u25E8\u0001\u04EE\u0001\u25E9\u0001\u25EA\u0001\u25EB\u0001\u34A6\u0001\u25ED\u0001\u25EE\u0001\u25EF\u0001\u017F\u0001\u25F0\u0001\u25F1\u0001\u25F2\u0001\u25F3\u0001\u25F4\u0001\u069E\u0001\u154F\u0001\u1550\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u3DA5\u0001\n\u0002\t\u0001\u2609\u0001\u3DA5\u0001\u25ED\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u3461\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12A6\u0001\u04F3\u0001\u04F4\u0001\u051E\u0001\u12B5\u0001\u12B6\u0001\u04F6\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u049E\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u3DA5\u0001\n\u0002\t\u0001\u3461\u0001\u3DA5\u0001\u04F3\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u3461\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u352B\u0001\u04F3\u0001\u04F4\u0001\u051E\u0001\u017F\u0001\u0180\u0001\u04F6\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u049E\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A7\u0001\n\u0002\t\u0001\u3461\u0001\u04A7\u0001\u04F3\u0006\t\u0001\u04A2\t\t\u0001\u4301\t\t\u0001\u12AD\u0003\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u0520\u0001\u04E9\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u4302\u0001\u04F3\u0001\u04F4\u0001\u04F5\u0001\u017F\u0001\u0180\u0001\u12AB\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u12AF\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A7\u0001\n\u0002\t\u0001\u04E9\u0001\u04A7\u0001\u04F3\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u1743\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u4303\u0001\u04F3\u0001\u04F4\u0001\u051E\u0001\u017F\u0001\u0180\u0001\u12AB\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u049E\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A7\u0001\n\u0002\t\u0001\u1743\u0001\u04A7\u0001\u04F3\u0016\t\u0001\u4304\u0007\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001\n\u0001\u046E\u0001~\u0001\u0479\u0001\u047A\u0001\u0470\u0001\u047B\u0001\u047C\u0001\u0082\u0001\u047D\u0001\u047B\u0001\t\u0001\u047B\u0001\u0471\u0001\u047E\u0001\u047F\u0001\u0480\u0001\u0481\u0001\u0482\u0001\u0089\u0001\u008A\u0001\u4305\u0001\u0082\u0001\u0484\u0001\u0479\u0001\u12DC\u0001\u0475\u0001\u07FF\u0001\u048F\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u047B\u0001\u0489\u0001\u0480\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u0479\u0001\u047A\u0001\u0470\u0001\u047B\u0001\u047C\u0001\u0082\u0001\u047D\u0001\u047B\u0001\t\u0001\u047B\u0001\u0471\u0001\u047E\u0001\u047F\u0001\u0480\u0001\u0481\u0001\u0482\u0001\u0089\u0001\u008A\u0001\u0483\u0001\u0082\u0001\u0484\u0001\u0479\u0001\u12DC\u0001\u0486\u0001\u0487\u0001\u048F\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u047B\u0001\u0489\u0001\u0480\u0016\t\u0001\u287B\u0007\t\u0001\u0000\u0001|\u0001\u0000\u0001\u3DA6\u0004\t\u0001\u3DA6\u0004\t\u0002\u07B9\u0001\u287E\u0001\u287F\u0005\u07B9\u0001\t\u0002\u07B9\u0001\u2880\u0001\u07B9\u0001\u2882\u0001\u07B9\u0001\u2883\u0001\t\u0001\u07B9\u0001\u2884\u0003\u07B9\u0001\u07C7\u0002\u150A\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0001\u3DA6\u0003\t\u0001\u07B9\u0001\u3DA6\u0001\u2882\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u04B2\u0001\u04B3\u0001\u04B4\u0001\u04B5\u0001\u04B6\u0001\u04B7\u0001\u04C3\u0001\u04B5\u0001\u1611\u0001\u1676\u0001\u04B9\u0001\u04BA\u0001\u04BB\u0001\u04BC\u0001\u04BD\u0001\u04BE\u0001\u0089\u0001\u04BF\u0001\u04C4\u0001\u04B7\u0001\u04C1\u0001\u04B2\u0001\u048D\u0001\u0486\u0001\u0487\u0001\u0488\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u04B5\u0001\u0489\u0001\u04BC\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u0479\u0001\u047A\u0001\u0470\u0001\u047B\u0001\u047C\u0001\u0082\u0001\u0084\u0001\u047B\u0001\t\u0001\u047B\u0001\u0471\u0001\u047E\u0001\u047F\u0001\u0480\u0001\u0481\u0001\u0482\u0001\u0089\u0001\u008A\u0001\u0483\u0001\u0082\u0001\u0484\u0001\u0479\u0001\u16CF\u0001\u16D0\u0001\u16D1\u0001\u12A7\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u047B\u0001\u0489\u0001\u0480\u0002\u0000\u0001\u0183\u0004\u0000\u0001\u4306\u001D\u0000\u0001\u4306\u0002\u0000\u0004\t\b\u2574\u0001\t\u0007\u2574\u0001\t\u0005\u2574\u0004\t\u0001\u0000\u0001\u4307\u0001\u0000\u0004\t\u0001\u2574\u0001\t\u0001\u2574\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u0479\u0001\u047A\u0001\u0470\u0001\u047B\u0001\u047C\u0001\u0082\u0001\u047D\u0001\u047B\u0001\t\u0001\u047B\u0001\u0471\u0001\u047E\u0001\u047F\u0001\u0480\u0001\u0481\u0001\u0482\u0001\u0089\u0001\u008A\u0001\u0483\u0001\u0082\u0001\u0484\u0001\u0479\u0001\u12DB\u0001\u0486\u0001\u0487\u0001\u0488\u0001\u0000\u0001\u4308\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u047B\u0001\u0489\u0001\u0480\u0018\u0000\u0001\u4309\u000F\u0000\u0006\t\u0001\u04A2\t\t\u0001\u2865\u0003\t\u0002\u12CC\u0004\t\u0001\u12AD\u0003\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u0520\u0001\u04E9\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u2866\u0001\u04F3\u0001\u04F4\u0001\u04F5\u0001\u12CD\u0001\u0180\u0001\u12AB\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u12AF\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A7\u0001\n\u0002\t\u0001\u04E9\u0001\u04A7\u0001\u04F3\u0001\t\u0001\n\u0001\u04A9\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u04E9\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u430A\u0001\u04F3\u0001\u04F4\u0001\u04F5\u0001\u017F\u0001\u0180\u0001\u04F6\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u04A6\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A7\u0001\n\u0002\t\u0001\u04E9\u0001\u04A7\u0001\u04F3\u0007\t\u0001\u15D9\u0016\t\u0001\u0000\u0001|\u0001\u0000\u0004\t\u0001\u15D9\u0003\t\u0001\n\u0001\u046E\u0001~\u0001\u04B2\u0001\u04B3\u0001\u04B4\u0001\u04B5\u0001\u04B6\u0001\u04B7\u0001\u04E3\u0001\u04B5\u0001\t\u0001\u04B5\u0001\u04B9\u0001\u04BA\u0001\u04BB\u0001\u04BC\u0001\u04BD\u0001\u04BE\u0001\u0089\u0001\u04BF\u0001\u13D7\u0001\u04B7\u0001\u04C1\u0001\u04B2\u0001\u12B2\u0001\u13D8\u0001\u13D9\u0001\u0488\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u04B5\u0001\u0489\u0001\u04BC\u0006\t\u0001\u04A2\u0001\u15D9\b\t\u0001\u051F\t\t\u0001\u12AD\u0003\t\u0001\u0000\u0001|\u0001\u0000\u0004\t\u0001\u15D9\u0003\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u0520\u0001\u1640\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12B7\u0001\u04F3\u0001\u04F4\u0001\u04F5\u0001\u017F\u0001\u0180\u0001\u12AB\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u12AF\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A7\u0001\n\u0002\t\u0001\u1640\u0001\u04A7\u0001\u04F3\u0014\t\u0002\u430B\b\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001\n\u0001\u046E\u0001~\u0001\u04B2\u0001\u04B3\u0001\u04B4\u0001\u04B5\u0001\u04B6\u0001\u04B7\u0001\u04B8\u0001\u04B5\u0001\t\u0001\u04B5\u0001\u04B9\u0001\u04BA\u0001\u04BB\u0001\u04BC\u0001\u04BD\u0001\u04BE\u0001\u430C\u0001\u430D\u0001\u04C0\u0001\u04B7\u0001\u04C1\u0001\u04B2\u0001\u12B2\u0001\u0475\u0001\u07FF\u0001\u0488\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u04B5\u0001\u0489\u0001\u04BC\u0007\t\u0001\u1346\u0016\t\u0001\u0000\u0001|\u0001\u0000\u0004\t\u0001\u1346\u0003\t\u0001\n\u0001\u04A9\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u430E\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12A6\u0001\u04F3\u0001\u04F4\u0001\u04F5\u0001\u017F\u0001\u0180\u0001\u04F6\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u04A6\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A7\u0001\n\u0002\t\u0001\u430E\u0001\u04A7\u0001\u04F3\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u3461\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12A6\u0001\u04F3\u0001\u04F4\u0001\u051E\u0001\u346C\u0001\u346D\u0001\u12AB\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u049E\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u3DA5\u0001\n\u0002\t\u0001\u3461\u0001\u3DA5\u0001\u04F3\u0004\t\u0005\u12D6\u0001\u430F\u0002\u12D6\u0001\t\u0007\u12D6\u0001\t\u0005\u12D6\u0001\u060C\u0002\u1336\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0004\t\u0001\u12D6\u0001\t\u0001\u12D6\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u04B2\u0001\u04B3\u0001\u04B4\u0001\u04B5\u0001\u04B6\u0001\u4310\u0001\u04B8\u0001\u04B5\u0001\t\u0001\u04B5\u0001\u04B9\u0001\u04BA\u0001\u1323\u0001\u04BC\u0001\u04BD\u0001\u04BE\u0001\u0089\u0001\u04BF\u0001\u04C0\u0001\u04B7\u0001\u04C1\u0001\u04B2\u0001\u048D\u0001\u0486\u0001\u0487\u0001\u0488\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u04B5\u0001\u0489\u0001\u04BC\u0010\t\u0001\u4311\r\t\u0001\u0000\u0001|\u0001\u0000\u000E\t\u0001\u4312\f\t\u0002\u430B\b\t\u0001\u0000\u0001|\u0001\u0000\u0004\t\u0001\u4312\b\t\u0001\u04A2\t\t\u0001\u4313\t\t\u0001\u12AD\u0003\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u0520\u0001\u04E9\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u4314\u0001\u04F3\u0001\u04F4\u0001\u04F5\u0001\u017F\u0001\u0180\u0001\u12AB\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u12AF\u0001\u0539\u0001\u053A\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A7\u0001\n\u0002\t\u0001\u04E9\u0001\u04A7\u0001\u04F3\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04AA\u0001\u0095\u0001\u4315\u0001\u04AC\u0001\u0096\u0001\u04AD\u0001\u04AB\u0001\t\u0001\u04AB\u0001\u04AD\u0001\u04AE\u0001\u04AB\u0001\u04AF\u0001\u04B0\u0001\u049C\u0001\u4316\u0001\u4317\u0001\u049D\u0001\u0096\u0001\u04B1\u0001\u0192\u0001\u049E\u0001\u0539\u0001\u053A\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A1\u0001\n\u0002\t\u0001\u4315\u0001\u04A1\u0001\u04AF\u0004\t\u0005\u12D6\u0001\u2541\u0002\u12D6\u0001\t\u0007\u12D6\u0001\t\u0005\u12D6\u0001\u2573\u0002\u1336\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0004\t\u0001\u12D6\u0001\t\u0001\u12D6\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u04B2\u0001\u04B3\u0001\u04B4\u0001\u04B5\u0001\u04B6\u0001\u2544\u0001\u04B8\u0001\u04B5\u0001\t\u0001\u04B5\u0001\u04B9\u0001\u04BA\u0001\u1323\u0001\u04BC\u0001\u04BD\u0001\u04BE\u0001\u0089\u0001\u04BF\u0001\u04C0\u0001\u04B7\u0001\u04C1\u0001\u04B2\u0001\u12B2\u0001\u0486\u0001\u0487\u0001\u0488\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u04B5\u0001\u0489\u0001\u04BC\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u04B2\u0001\u04B3\u0001\u04B4\u0001\u1347\u0001\u04B6\u0001\u04B7\u0001\u04B8\u0001\u04B5\u0001\t\u0001\u04B5\u0001\u04B9\u0001\u04BA\u0001\u1323\u0001\u04BC\u0001\u04BD\u0001\u04BE\u0001\u0089\u0001\u04BF\u0001\u04C0\u0001\u04B7\u0001\u04C1\u0001\u04B2\u0001\u12B2\u0001\u0475\u0001\u07FF\u0001\u0488\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u1347\u0001\u0489\u0001\u04BC\u001A\t\u0001\u4318\u0003\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001\n\u0001\u046E\u0001~\u0001\u04B2\u0001\u04B3\u0001\u04B4\u0001\u04B5\u0001\u04B6\u0001\u04B7\u0001\u04B8\u0001\u04B5\u0001\t\u0001\u04B5\u0001\u04DB\u0001\u04BA\u0001\u04BB\u0001\u04BC\u0001\u04BD\u0001\u1326\u0001\u4319\u0001\u431A\u0001\u04C0\u0001\u04B7\u0001\u04C1\u0001\u04B2\u0001\u12B1\u0001\u0475\u0001\u07FF\u0001\u0488\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u04B5\u0001\u0489\u0001\u04BC\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u0479\u0001\u047A\u0001\u0470\u0001\u047B\u0001\u047C\u0001\u0082\u0001\u0084\u0001\u047B\u0001\t\u0001\u047B\u0001\u0471\u0001\u047E\u0001\u047F\u0001\u0480\u0001\u0481\u0001\u0482\u0001\u0089\u0001\u008A\u0001\u0483\u0001\u0082\u0001\u0484\u0001\u0479\u0001\u12DC\u0001\u431B\u0001\u431C\u0001\u12A7\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u047B\u0001\u0489\u0001\u0480\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u04B2\u0001\u04B3\u0001\u04B4\u0001\u04B5\u0001\u04B6\u0001\u04B7\u0001\u04B8\u0001\u04B5\u0001\t\u0001\u04B5\u0001\u04DB\u0001\u04BA\u0001\u04BB\u0001\u04BC\u0001\u04BD\u0001\u04BE\u0001\u017F\u0001\u129F\u0001\u04C0\u0001\u04B7\u0001\u04C1\u0001\u04B2\u0001\u3635\u0001\u16D0\u0001\u16D1\u0001\u0488\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u04B5\u0001\u0489\u0001\u04BC\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u04B2\u0001\u04B3\u0001\u04B4\u0001\u04B5\u0001\u04B6\u0001\u04B7\u0001\u04B8\u0001\u04B5\u0001\t\u0001\u04B5\u0001\u04B9\u0001\u04BA\u0001\u04BB\u0001\u04BC\u0001\u04BD\u0001\u04BE\u0001\u0089\u0001\u04BF\u0001\u04C0\u0001\u131E\u0001\u04C1\u0001\u04B2\u0001\u431D\u0001\u0486\u0001\u0487\u0001\u0488\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u04B5\u0001\u0489\u0001\u04BC\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u0479\u0001\u047A\u0001\u0470\u0001\u047B\u0001\u047C\u0001\u0082\u0001\u047D\u0001\u047B\u0001\t\u0001\u047B\u0001\u0471\u0001\u047E\u0001\u047F\u0001\u0480\u0001\u0481\u0001\u0482\u0001\u0089\u0001\u008A\u0001\u0483\u0001\u0082\u0001\u0484\u0001\u0479\u0001\u343A\u0001\u0475\u0001\u07FF\u0001\u12A9\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u047B\u0001\u0489\u0001\u0480\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u04B2\u0001\u04B3\u0001\u04B4\u0001\u04B5\u0001\u04B6\u0001\u131E\u0001\u04B8\u0001\u04B5\u0001\t\u0001\u04B5\u0001\u04B9\u0001\u04BA\u0001\u04BB\u0001\u04BC\u0001\u04BD\u0001\u04BE\u0001\u0089\u0001\u04BF\u0001\u04C0\u0001\u04B7\u0001\u04C1\u0001\u04B2\u0001\u2659\u0001\u16D0\u0001\u16D1\u0001\u0488\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u04B5\u0001\u0489\u0001\u04BC\u0018\t\u0001\u0631\u0005\t\u0001\u0000\u0001|\u0001\u0000\u001A\t\u0001\u431E\n\t\u0001\u0000\u0001|\u0001\u0000!\t\u0001\u14D4\u0003\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001\n\u0001\u046E\u0001~\u0001\u04B2\u0001\u04B3\u0001\u04B4\u0001\u04B5\u0001\u04B6\u0001\u04B7\u0001\u04E3\u0001\u04B5\u0001\t\u0001\u04B5\u0001\u04B9\u0001\u04BA\u0001\u04BB\u0001\u04BC\u0001\u04BD\u0001\u04BE\u0001\u0089\u0001\u04BF\u0001\u1327\u0001\u04B7\u0001\u04C1\u0001\u04B2\u0001\u048D\u0001\u0475\u0001\u07FF\u0001\u0488\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u04B5\u0001\u0489\u0001\u04BC\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u04E9\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12B0\u0001\u04F3\u0001\u04F4\u0001\u051E\u0001\u017F\u0001\u0180\u0001\u04F6\u0001\u04F7\u0001\u061C\u0001\u04F9\u0001\u0538\u0001\u0539\u0001\u053A\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A1\u0001\n\u0002\t\u0001\u04E9\u0001\u04A1\u0001\u04F3\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u0479\u0001\u047A\u0001\u0470\u0001\u047B\u0001\u047C\u0001\u0082\u0001\u047D\u0001\u047B\u0001\t\u0001\u047B\u0001\u0471\u0001\u047E\u0001\u047F\u0001\u0480\u0001\u0481\u0001\u431F\u0001\u0089\u0001\u008A\u0001\u0483\u0001\u0082\u0001\u0484\u0001\u0479\u0001\u048D\u0001\u0486\u0001\u0487\u0001\u048F\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u047B\u0001\u0489\u0001\u0480\u001A\t\u0001\u4320\u0002\u12D3\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0011\t\u0001\u0495\t\t\u0002\u0496\u0004\t\u0001\u4320\u0002\u12A1\u0001\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001\n\u0001\u046E\u0001~\u0001\u0479\u0001\u047A\u0001\u0470\u0001\u047B\u0001\u047C\u0001\u0082\u0001\u0497\u0001\u047B\u0001\t\u0001\u047B\u0001\u0471\u0001\u047E\u0001\u047F\u0001\u0480\u0001\u0481\u0001\u0482\u0001\u0468\u0001\u0498\u0001\u0483\u0001\u0082\u0001\u0484\u0001\u0479\u0001\u4321\u0001\u12A2\u0001\u12A3\u0001\u0488\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u047B\u0001\u0489\u0001\u0480\u0018\t\u0001\u14D3\u0005\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u1743\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12A6\u0001\u04F3\u0001\u04F4\u0001\u051E\u0001\u017F\u0001\u0180\u0001\u12AB\u0001\u04F7\u0001\u14DA\u0001\u04F9\u0001\u049E\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u3DA5\u0001\n\u0002\t\u0001\u1743\u0001\u3DA5\u0001\u04F3\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u04E9\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12B0\u0001\u04F3\u0001\u04F4\u0001\u2540\u0001\u017F\u0001\u0180\u0001\u04F6\u0001\u04F7\u0001\u0654\u0001\u04F9\u0001\u0538\u0001\u0539\u0001\u053A\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A1\u0001\n\u0002\t\u0001\u04E9\u0001\u04A1\u0001\u04F3\u0018\t\u0001\u06F7\u0001\t\u0001\u079D\u0003\t\u0001\u0000\u0001|\u0001\u0000\u001A\t\u0001\u4322\n\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001\n\u0001\u04A9\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u04E9\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12B0\u0001\u04F3\u0001\u04F4\u0001\u051E\u0001\u017F\u0001\u0180\u0001\u04F6\u0001\u04F7\u0001\u0654\u0001\u04F9\u0001\u04A6\u0001\u0539\u0001\u053A\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A1\u0001\n\u0002\t\u0001\u04E9\u0001\u04A1\u0001\u04F3\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u04E9\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12B0\u0001\u04F3\u0001\u04F4\u0001\u4323\u0001\u017F\u0001\u0180\u0001\u04F6\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u0538\u0001\u0539\u0001\u053A\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A1\u0001\n\u0002\t\u0001\u04E9\u0001\u04A1\u0001\u04F3\u000E\t\u0001\u4324\u000F\t\u0001\u0000\u0001|\u0001\u0000\r\t\u0001\u04A2\u0007\t\u0001\u4324\u0001\t\u0001\u051F\u0003\t\u0002\u12CC\u0004\t\u0001\u12AD\u0003\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u0520\u0001\u04E9\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u4325\u0001\u04F1\u0001\u12B7\u0001\u04F3\u0001\u04F4\u0001\u04F5\u0001\u12CD\u0001\u0180\u0001\u12AB\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u12AF\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A7\u0001\n\u0002\t\u0001\u04E9\u0001\u04A7\u0001\u04F3\t\t\u0001\u4326\u0014\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001\n\u0001\u046E\u0001~\u0001\u0479\u0001\u047A\u0001\u0470\u0001\u047B\u0001\u047C\u0001\u0082\u0001\u0084\u0001\u047B\u0001\t\u0001\u047B\u0001\u0471\u0001\u047E\u0001\u047F\u0001\u0480\u0001\u0481\u0001\u0482\u0001\u0089\u0001\u008A\u0001\u0483\u0001\u0082\u0001\u0484\u0001\u0479\u0001\u4327\u0001\u0475\u0001\u07FF\u0001\u12A7\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u047B\u0001\u0489\u0001\u0480\u001B\t\u0002\u4328\u0001\u4329\u0001\u0000\u0001|\u0001\u0000\u0007\t\u0002\u0000\u0001\u432A%\u0000\u0004\t\b\u2574\u0001\t\u0007\u2574\u0001\t\u0005\u2574\u0004\t\u0001\u0000\u0001\u432B\u0001\u0000\u0004\t\u0001\u2574\u0001\t\u0001\u2574\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u0479\u0001\u047A\u0001\u0470\u0001\u047B\u0001\u047C\u0001\u0082\u0001\u047D\u0001\u047B\u0001\t\u0001\u047B\u0001\u0471\u0001\u047E\u0001\u047F\u0001\u0480\u0001\u0481\u0001\u0482\u0001\u0089\u0001\u008A\u0001\u0483\u0001\u0082\u0001\u0484\u0001\u0479\u0001\u12DB\u0001\u0486\u0001\u0487\u0001\u0488\u0001\u0000\u0001\u432C\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u047B\u0001\u0489\u0001\u0480\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u2549\u0001\u254A\u0001\u254B\u0001\u254C\u0001\u254D\u0001\u254E\u0001\u254F\u0001\u254C\u0001\t\u0001\u254C\u0001\u2550\u0001\u2551\u0001\u2562\u0001\u2553\u0001\u2554\u0001\u2555\u0001\u0089\u0001\u2556\u0001\u2557\u0001\u254E\u0001\u2558\u0001\u2549\u0001\u13E3\u0001\u133E\u0001\u133F\u0001\u0488\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u254C\u0001\u0489\u0001\u2553\u001A\t\u0001\u3E01\u0002\t\u0001\u0ABB\u0001\u0000\u0001|\u0001\u0000\b\t\u0001\n\u0001\u046E\u0001~\u0001\u0479\u0001\u047A\u0001\u0470\u0001\u047B\u0001\u047C\u0001\u0082\u0001\u047D\u0001\u047B\u0001\t\u0001\u047B\u0001\u0471\u0001\u047E\u0001\u047F\u0001\u0480\u0001\u0481\u0001\u0482\u0001\u0089\u0001\u008A\u0001\u0483\u0001\u0082\u0001\u0484\u0001\u0479\u0001\u4321\u0001\u0475\u0001\u07FF\u0001\u12D4\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u047B\u0001\u0489\u0001\u0480\u001D\u0000\u0001\u432D\n\u0000\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u352F\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12A6\u0001\u04F3\u0001\u04F4\u0001\u051E\u0001\u346C\u0001\u346D\u0001\u12AB\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u049E\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A7\u0001\n\u0002\t\u0001\u352F\u0001\u04A7\u0001\u04F3\u0006\t\u0001\u04A2\t\t\u0001\u432E\t\t\u0001\u12AD\u0003\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u0520\u0001\u04E9\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u432F\u0001\u04F3\u0001\u04F4\u0001\u04F5\u0001\u017F\u0001\u0180\u0001\u12AB\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u12AF\u0001\u0539\u0001\u053A\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A7\u0001\n\u0002\t\u0001\u04E9\u0001\u04A7\u0001\u04F3\u0007\t\u0001\u4330\f\t\u0002\u4331\b\t\u0001\u0000\u0001|\u0001\u0000\u0004\t\u0001\u4330\u0003\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04AA\u0001\u0095\u0001\u4332\u0001\u04AC\u0001\u0096\u0001\u04AD\u0001\u04AB\u0001\t\u0001\u04AB\u0001\u04AD\u0001\u04AE\u0001\u04AB\u0001\u04AF\u0001\u04B0\u0001\u049C\u0001\u4333\u0001\u4334\u0001\u049D\u0001\u0096\u0001\u04B1\u0001\u0192\u0001\u049E\u0001\u0539\u0001\u053A\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A1\u0001\n\u0002\t\u0001\u4332\u0001\u04A1\u0001\u04AF\u0001\t\u0001\n\u0001\u0465\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u04E9\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u067D\u0001\u04F1\u0001\u12A6\u0001\u04F3\u0001\u04F4\u0001\u04F5\u0001\u0468\u0001\u0469\u0001\u04F6\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u046A\u0001\u008E\u0001\u046B\u0001\u046C\u0001\u0000\u0001(\u0001\u0000\u0001\u046D\u0001\n\u0002\t\u0001\u04E9\u0001\u046D\u0001\u04F3\u0013\t\u0001\u4335\n\t\u0001\u0000\u0001|\u0001\u0000\u0016\t\u0001\u4336\u0001\u2878\r\t\u0001\u0000\u0001|\u0001\u0000\u001D\t\u0001\u4337\u0007\t\u0001\u0000\u0001|\u0001\u0000\u000E\t\u0001\u4338\u0016\t\u0001\u0000\u0001|\u0001\u0000\u0004\t\u0001\u4338\u0010\t\u0001\u15BE\u0007\t\u0001\u1618\u0007\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u1743\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12A6\u0001\u04F3\u0001\u04F4\u0001\u4339\u0001\u017F\u0001\u0180\u0001\u12AB\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u049E\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A7\u0001\n\u0002\t\u0001\u1743\u0001\u04A7\u0001\u04F3\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u0479\u0001\u047A\u0001\u0470\u0001\u047B\u0001\u047C\u0001\u0082\u0001\u047D\u0001\u047B\u0001\t\u0001\u047B\u0001\u0471\u0001\u047E\u0001\u047F\u0001\u0480\u0001\u0481\u0001\u0482\u0001\u0089\u0001\u008A\u0001\u0483\u0001\u0082\u0001\u0484\u0001\u0479\u0001\u1314\u0001\u25A1\u0001\u25A2\u0001\u12A9\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u047B\u0001\u0489\u0001\u0480\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u04B2\u0001\u04B3\u0001\u04B4\u0001\u04B5\u0001\u04B6\u0001\u04B7\u0001\u04B8\u0001\u04B5\u0001\t\u0001\u04B5\u0001\u156A\u0001\u04BA\u0001\u04BB\u0001\u04BC\u0001\u04BD\u0001\u04BE\u0001\u0089\u0001\u04BF\u0001\u2696\u0001\u04B7\u0001\u04C1\u0001\u04B2\u0001\u048D\u0001\u0486\u0001\u0487\u0001\u048F\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u04B5\u0001\u0489\u0001\u04BC\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u04B2\u0001\u04B3\u0001\u04B4\u0001\u04B5\u0001\u04B6\u0001\u04B7\u0001\u04B8\u0001\u04B5\u0001\t\u0001\u04B5\u0001\u04B9\u0001\u04BA\u0001\u04BB\u0001\u04BC\u0001\u04BD\u0001\u3E34\u0001\u0089\u0001\u04BF\u0001\u04C0\u0001\u04B7\u0001\u04C1\u0001\u04B2\u0001\u048D\u0001\u0486\u0001\u0487\u0001\u0488\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u04B5\u0001\u0489\u0001\u04BC\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u0479\u0001\u047A\u0001\u0470\u0001\u047B\u0001\u047C\u0001\u0082\u0001\u047D\u0001\u047B\u0001\t\u0001\u047B\u0001\u0494\u0001\u047E\u0001\u047F\u0001\u0480\u0001\u0481\u0001\u0482\u0001\u0089\u0001\u008A\u0001\u0483\u0001\u0082\u0001\u0484\u0001\u0479\u0001\u433A\u0001\u133E\u0001\u133F\u0001\u0488\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u047B\u0001\u0489\u0001\u0480\u0006\t\u0001\u04A2\t\t\u0001\u051F\u0003\t\u0002\u0591\u0004\t\u0001\u12AD\u0003\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u0520\u0001\u04E9\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12B7\u0001\u04F3\u0001\u04F4\u0001\u04F5\u0001\u433B\u0001\u433C\u0001\u12AB\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u12AF\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A7\u0001\n\u0002\t\u0001\u04E9\u0001\u04A7\u0001\u04F3\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u04B2\u0001\u04B3\u0001\u04B4\u0001\u04B5\u0001\u04B6\u0001\u04B7\u0001\u04E3\u0001\u04B5\u0001\t\u0001\u04B5\u0001\u04B9\u0001\u04BA\u0001\u04BB\u0001\u04BC\u0001\u04BD\u0001\u04BE\u0001\u0089\u0001\u04BF\u0001\u04C0\u0001\u04B7\u0001\u04C1\u0001\u04B2\u0001\u04E0\u0001\u133E\u0001\u133F\u0001\u0488\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u04B5\u0001\u0489\u0001\u04BC\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u04B2\u0001\u04B3\u0001\u04B4\u0001\u131E\u0001\u04B6\u0001\u04B7\u0001\u04B8\u0001\u04B5\u0001\t\u0001\u04B5\u0001\u04B9\u0001\u04BA\u0001\u04BB\u0001\u04BC\u0001\u04BD\u0001\u04BE\u0001\u0089\u0001\u04BF\u0001\u04C0\u0001\u04B7\u0001\u04C1\u0001\u04B2\u0001\u2659\u0001\u16D0\u0001\u16D1\u0001\u0488\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u131E\u0001\u0489\u0001\u04BC\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u04B2\u0001\u04B3\u0001\u04B4\u0001\u04B5\u0001\u04B6\u0001\u04B7\u0001\u04B8\u0001\u04B5\u0001\t\u0001\u04B5\u0001\u04B9\u0001\u04BA\u0001\u04BB\u0001\u04BC\u0001\u04BD\u0001\u04BE\u0001\u0089\u0001\u04BF\u0001\u04C0\u0001\u04B7\u0001\u04C1\u0001\u04B2\u0001\u2659\u0001\u16D0\u0001\u16D1\u0001\u0488\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u04B5\u0001\u0489\u0001\u04BC\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u04B2\u0001\u04B3\u0001\u04B4\u0001\u04B5\u0001\u04B6\u0001\u04B7\u0001\u04B8\u0001\u04B5\u0001\t\u0001\u04B5\u0001\u04DB\u0001\u04BA\u0001\u04BB\u0001\u04BC\u0001\u04BD\u0001\u04BE\u0001\u017F\u0001\u129F\u0001\u04C0\u0001\u04B7\u0001\u04C1\u0001\u04B2\u0001\u34F0\u0001\u133E\u0001\u133F\u0001\u0488\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u04B5\u0001\u0489\u0001\u04BC\u0010\t\u0001\u433D\r\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u433E\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12A6\u0001\u04F3\u0001\u04F4\u0001\u051E\u0001\u017F\u0001\u0180\u0001\u12AB\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u049E\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A1\u0001\n\u0002\t\u0001\u433E\u0001\u04A1\u0001\u04F3\u0006\t\u0001\u04A2\t\t\u0001\u433F\t\t\u0001\u12AD\u0003\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u0520\u0001\u04E9\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u4340\u0001\u04F3\u0001\u04F4\u0001\u04F5\u0001\u017F\u0001\u0180\u0001\u12AB\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u12AF\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A7\u0001\n\u0002\t\u0001\u04E9\u0001\u04A7\u0001\u04F3\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u051D\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12A6\u0001\u04F3\u0001\u04F4\u0001\u05F9\u0001\u017F\u0001\u0180\u0001\u12AB\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u049E\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A1\u0001\n\u0002\t\u0001\u051D\u0001\u04A1\u0001\u04F3\f\t\u0002\u4341\u0010\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001\n\u0001\u046E\u0001~\u0001\u04B2\u0001\u04B3\u0001\u131D\u0001\u04B5\u0001\u04B6\u0001\u04B7\u0001\u04C3\u0001\u04B5\u0001\u4341\u0001\u4342\u0001\u04B9\u0001\u04BA\u0001\u04BB\u0001\u04BC\u0001\u04BD\u0001\u04BE\u0001\u0089\u0001\u04BF\u0001\u04C4\u0001\u04B7\u0001\u04C1\u0001\u04B2\u0001\u048D\u0001\u0486\u0001\u0487\u0001\u0488\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u04B5\u0001\u0489\u0001\u04BC\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u3461\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u25AC\u0001\u04F1\u0001\u12A6\u0001\u04F3\u0001\u04F4\u0001\u051E\u0001\u017F\u0001\u0180\u0001\u04F6\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u049E\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A7\u0001\n\u0002\t\u0001\u3461\u0001\u04A7\u0001\u04F3\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u04B2\u0001\u04B3\u0001\u04B4\u0001\u04B5\u0001\u04B6\u0001\u04B7\u0001\u04B8\u0001\u04B5\u0001\t\u0001\u04B5\u0001\u04DB\u0001\u04BA\u0001\u04BB\u0001\u04BC\u0001\u04BD\u0001\u1326\u0001\u4343\u0001\u4344\u0001\u04C0\u0001\u04B7\u0001\u04C1\u0001\u04B2\u0001\u12B1\u0001\u0475\u0001\u07FF\u0001\u0488\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u04B5\u0001\u0489\u0001\u04BC\u0006\t\u0001\u04A2\t\t\u0001\u4345\t\t\u0001\u12AD\u0003\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u0520\u0001\u04E9\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u4346\u0001\u04F3\u0001\u04F4\u0001\u04F5\u0001\u017F\u0001\u0180\u0001\u12AB\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u12AF\u0001\u0539\u0001\u053A\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A7\u0001\n\u0002\t\u0001\u04E9\u0001\u04A7\u0001\u04F3\u001A\t\u0001\u12A0\u0003\t\u0001\u0000\u0001|\u0001\u0000\u0017\t\u0001\u1304\r\t\u0001\u0000\u0001|\u0001\u0000\t\t\u0001\u4347\u001B\t\u0001\u0000\u0001|\u0001\u0000\u0010\t\u0001\u4348\u0014\t\u0001\u0000\u0001|\u0001\u0000\u001A\t\u0001\u1304\n\t\u0001\u0000\u0001|\u0001\u0000!\t\u0001\u06EB\u0003\t\u0001\u0000\u0001|\u0001\u0000\u001D\t\u0001\u16F2\u0007\t\u0001\u0000\u0001|\u0001\u0000\u0010\t\u0001\u4349\u0014\t\u0001\u0000\u0001|\u0001\u0000\u0007\t\u0007\u0000\u0001\u434A\u001D\u0000\u0001\u434A\u0012\u0000\u0001\u434B\u0017\u0000\u0010\t\u0001\u29A5\r\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001\n\u0001\u046E\u0001~\u0001\u04B2\u0001\u04B3\u0001\u04B4\u0001\u04B5\u0001\u04B6\u0001\u04B7\u0001\u04B8\u0001\u04B5\u0001\t\u0001\u04B5\u0001\u04B9\u0001\u04BA\u0001\u04BB\u0001\u04BC\u0001\u04BD\u0001\u04BE\u0001\u0089\u0001\u04BF\u0001\u04C0\u0001\u04B7\u0001\u04C1\u0001\u04B2\u0001\u12B2\u0001\u0475\u0001\u07FF\u0001\u0488\u0001\u0000\u0001(\u0001\u0000\u0001\u16B6\u0001\n\u0002\t\u0001\u04B5\u0001\u16B6\u0001\u04BC\n\t\u0001\u0495\t\t\u0002\u0496\u0004\t\u0001\u12A0\u0002\u0174\u0001\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001\n\u0001\u046E\u0001~\u0001\u0479\u0001\u047A\u0001\u0470\u0001\u047B\u0001\u047C\u0001\u0082\u0001\u0497\u0001\u047B\u0001\t\u0001\u047B\u0001\u0471\u0001\u047E\u0001\u047F\u0001\u0480\u0001\u0481\u0001\u0482\u0001\u0468\u0001\u0498\u0001\u0483\u0001\u0082\u0001\u0484\u0001\u0479\u0001\u12D9\u0001\u0499\u0001\u049A\u0001\u0488\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u047B\u0001\u0489\u0001\u0480\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u051D\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u1541\u0001\u04F3\u0001\u04F4\u0001\u051E\u0001\u017F\u0001\u0180\u0001\u12AB\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u049E\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A7\u0001\n\u0002\t\u0001\u051D\u0001\u04A7\u0001\u04F3\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u051D\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12A6\u0001\u04F3\u0001\u04F4\u0001\u051E\u0001\u017F\u0001\u0180\u0001\u12AB\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u05F1\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A1\u0001\n\u0002\t\u0001\u051D\u0001\u04A1\u0001\u04F3\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u12B8\u0001\u12B9\u0001\u12BA\u0001\u434C\u0001\u12BC\u0001\u12BD\u0001\u12BE\u0001\u12BF\u0001\u04EE\u0001\u12C0\u0001\u12C1\u0001\u12C2\u0001\u12C3\u0001\u12C4\u0001\u12C5\u0001\u12C6\u0001\u017F\u0001\u12C7\u0001\u12C8\u0001\u12C9\u0001\u12CA\u0001\u12CB\u0001\u049E\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A7\u0001\n\u0002\t\u0001\u434C\u0001\u04A7\u0001\u12C4\u0001\t\u0001\n\u0001\u04A9\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u04E9\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12A6\u0001\u0637\u0001\u04F4\u0001\u04F5\u0001\u017F\u0001\u0180\u0001\u04F6\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u04A6\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A7\u0001\n\u0002\t\u0001\u04E9\u0001\u04A7\u0001\u0637\u0001\t\u0001\n\u0001\u04A9\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u04E9\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12B0\u0001\u04F3\u0001\u04F4\u0001\u2673\u0001\u017F\u0001\u0180\u0001\u04F6\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u0538\u0001\u0539\u0001\u053A\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A1\u0001\n\u0002\t\u0001\u04E9\u0001\u04A1\u0001\u04F3\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u0479\u0001\u047A\u0001\u0470\u0001\u047B\u0001\u047C\u0001\u0082\u0001\u047D\u0001\u047B\u0001\t\u0001\u047B\u0001\u0471\u0001\u047E\u0001\u047F\u0001\u0480\u0001\u0481\u0001\u2671\u0001\u0089\u0001\u008A\u0001\u0483\u0001\u0082\u0001\u0484\u0001\u0479\u0001\u07FE\u0001\u0475\u0001\u07FF\u0001\u048F\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u047B\u0001\u0489\u0001\u0480\u0006\t\u0001\u04A2\t\t\u0001\u12AC\u0001\u1304\b\t\u0001\u12AD\u0003\t\u0001\u0000\u0001|\u0001\u0000\u0006\t\u0001\u1304\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u0520\u0001\u04E9\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12AE\u0001\u0637\u0001\u04F4\u0001\u04F5\u0001\u017F\u0001\u0180\u0001\u12AB\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u12AF\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A7\u0001\n\u0002\t\u0001\u04E9\u0001\u04A7\u0001\u0637\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u051D\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12A6\u0001\u04F3\u0001\u04F4\u0001\u051E\u0001\u12B5\u0001\u12B6\u0001\u12AB\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u0738\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A1\u0001\n\u0002\t\u0001\u051D\u0001\u04A1\u0001\u04F3\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04AA\u0001\u0095\u0001\u049B\u0001\u04AC\u0001\u0096\u0001\u04AD\u0001\u04AB\u0001\t\u0001\u04AB\u0001\u04AD\u0001\u04AE\u0001\u04AB\u0001\u04AF\u0001\u04B0\u0001\u049C\u0001\u017F\u0001\u0180\u0001\u26F7\u0001\u0096\u0001\u04B1\u0001\u0192\u0001\u049E\u0001\u0539\u0001\u053A\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A1\u0001\n\u0002\t\u0001\u049B\u0001\u04A1\u0001\u04AF\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u0520\u0001\u04E9\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12AE\u0001\u04F3\u0001\u04F4\u0001\u04F5\u0001\u017F\u0001\u0180\u0001\u434D\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u12AF\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A7\u0001\n\u0002\t\u0001\u04E9\u0001\u04A7\u0001\u04F3\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u04E9\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12B0\u0001\u04F3\u0001\u04F4\u0001\u051E\u0001\u017F\u0001\u0180\u0001\u1644\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u0538\u0001\u0539\u0001\u053A\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A1\u0001\n\u0002\t\u0001\u04E9\u0001\u04A1\u0001\u04F3\t\t\u0001\u434E\u0014\t\u0001\u0000\u0001|\u0001\u0000\u000B\t\u0005\u12D6\u0001\u434F\u0002\u12D6\u0001\t\u0007\u12D6\u0001\t\u0005\u12D6\u0001\u060C\u0002\u1336\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0004\t\u0001\u12D6\u0001\t\u0001\u12D6\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u04B2\u0001\u04B3\u0001\u04B4\u0001\u04B5\u0001\u04B6\u0001\u4350\u0001\u04B8\u0001\u04B5\u0001\t\u0001\u04B5\u0001\u04B9\u0001\u04BA\u0001\u1323\u0001\u04BC\u0001\u04BD\u0001\u04BE\u0001\u0089\u0001\u04BF\u0001\u04C0\u0001\u04B7\u0001\u04C1\u0001\u04B2\u0001\u048D\u0001\u0486\u0001\u0487\u0001\u0488\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u04B5\u0001\u0489\u0001\u04BC\u0019\t\u0001\u4351\u0004\t\u0001\u0000\u0001|\u0001\u0000\u0018\t\u0001\u4352\f\t\u0001\u0000\u0001|\u0001\u0000\u0006\t\u0001\u4352\u0006\t\u0001\u04A2\t\t\u0001\u12AC\b\t\u0001\u4351\u0001\u12AD\u0003\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u0520\u0001\u04E9\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12AE\u0001\u04F3\u0001\u04F4\u0001\u04F5\u0001\u017F\u0001\u0180\u0001\u12AB\u0001\u04F7\u0001\u04F8\u0001\u4353\u0001\u12AF\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A7\u0001\n\u0002\t\u0001\u04E9\u0001\u04A7\u0001\u04F3\u0006\t\u0001\u04A2\t\t\u0001\u12AC\u0001\u4352\b\t\u0001\u12AD\u0003\t\u0001\u0000\u0001|\u0001\u0000\u0006\t\u0001\u4352\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u0520\u0001\u04E9\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12AE\u0001\u4354\u0001\u04F4\u0001\u04F5\u0001\u017F\u0001\u0180\u0001\u12AB\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u12AF\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A7\u0001\n\u0002\t\u0001\u04E9\u0001\u04A7\u0001\u4354\u0001\t\u0001\n\u0001\u04A9\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u04E9\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u153F\u0001\u04F3\u0001\u04F4\u0001\u051E\u0001\u017F\u0001\u0180\u0001\u04F6\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u0538\u0001\u0539\u0001\u053A\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A1\u0001\n\u0002\t\u0001\u04E9\u0001\u04A1\u0001\u04F3\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u04E9\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12B0\u0001\u0598\u0001\u04F4\u0001\u04F5\u0001\u017F\u0001\u0180\u0001\u04F6\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u0538\u0001\u0539\u0001\u053A\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A1\u0001\n\u0002\t\u0001\u04E9\u0001\u04A1\u0001\u0598\u001D\u0000\u0001\u4355\n\u0000\u001A\t\u0001\u4356\u0003\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001\n\u0001\u046E\u0001~\u0001\u0479\u0001\u047A\u0001\u0470\u0001\u047B\u0001\u047C\u0001\u0082\u0001\u047D\u0001\u047B\u0001\t\u0001\u047B\u0001\u0471\u0001\u047E\u0001\u047F\u0001\u0480\u0001\u0481\u0001\u0482\u0001\u0089\u0001\u008A\u0001\u0483\u0001\u0082\u0001\u0484\u0001\u0479\u0001\u1309\u0001\u0475\u0001\u07FF\u0001\u0488\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u047B\u0001\u0489\u0001\u0480\u0001\t\u0001\n\u0001\u04A9\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u4357\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12A6\u0001\u04F3\u0001\u04F4\u0001\u04F5\u0001\u017F\u0001\u0180\u0001\u04F6\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u04A6\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A7\u0001\n\u0002\t\u0001\u4357\u0001\u04A7\u0001\u04F3\u0018\t\u0001\u4358\u0005\t\u0001\u0000\u0001|\u0001\u0000\u000E\t\u0001\u4359\u0016\t\u0001\u0000\u0001|\u0001\u0000\u0004\t\u0001\u4359\u0003\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u12B8\u0001\u12B9\u0001\u12BA\u0001\u2548\u0001\u12BC\u0001\u12BD\u0001\u12BE\u0001\u12BF\u0001\u04EE\u0001\u12C0\u0001\u12C1\u0001\u12C2\u0001\u12C3\u0001\u12C4\u0001\u12C5\u0001\u12C6\u0001\u017F\u0001\u12C7\u0001\u12C8\u0001\u12C9\u0001\u143C\u0001\u12CB\u0001\u049E\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u3DA5\u0001\n\u0002\t\u0001\u2548\u0001\u3DA5\u0001\u12C4\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u12B8\u0001\u12B9\u0001\u12BA\u0001\u2548\u0001\u12BC\u0001\u12BD\u0001\u12BE\u0001\u12BF\u0001\u04EE\u0001\u12C0\u0001\u12C1\u0001\u12C2\u0001\u12C3\u0001\u12C4\u0001\u12C5\u0001\u12C6\u0001\u017F\u0001\u12C7\u0001\u12C8\u0001\u12C9\u0001\u143C\u0001\u12CB\u0001\u049E\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A1\u0001\n\u0002\t\u0001\u2548\u0001\u04A1\u0001\u12C4\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u04B2\u0001\u04B3\u0001\u04B4\u0001\u04B5\u0001\u04B6\u0001\u04B7\u0001\u04B8\u0001\u04B5\u0001\t\u0001\u04B5\u0001\u04B9\u0001\u1322\u0001\u04BB\u0001\u04BC\u0001\u04BD\u0001\u04BE\u0001\u0089\u0001\u04BF\u0001\u04C0\u0001\u04B7\u0001\u04C1\u0001\u04B2\u0001\u12B2\u0001\u0490\u0001\u0491\u0001\u048F\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u04B5\u0001\u0489\u0001\u04BC\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u04B2\u0001\u04B3\u0001\u04B4\u0001\u04B5\u0001\u04B6\u0001\u435A\u0001\u04B8\u0001\u04B5\u0001\t\u0001\u04B5\u0001\u04B9\u0001\u04BA\u0001\u1323\u0001\u04BC\u0001\u04BD\u0001\u04BE\u0001\u0089\u0001\u04BF\u0001\u04C0\u0001\u04B7\u0001\u04C1\u0001\u04B2\u0001\u048D\u0001\u0486\u0001\u0487\u0001\u0488\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u04B5\u0001\u0489\u0001\u04BC\u000E\t\u0001\u020A\u000B\t\u0001\u15D5\u0002\u15D6\u0001\t\u0001\u0000\u0001|\u0001\u0000\u000E\t\u0001\u253C\u000E\t\u0001\u287B\u0007\t\u0001\u0000\u0001|\u0001\u0000\u0004\t\u0001\u253C\u0012\t\u0001\u253D\u0005\t\u0001\u287B\u0007\t\u0001\u0000\u0001|\u0001\u0000\n\t\u0002\u07B9\u0001\u287E\u0001\u287F\u0005\u07B9\u0001\t\u0002\u07B9\u0001\u2880\u0001\u07B9\u0001\u2882\u0001\u07B9\u0001\u2883\u0001\t\u0001\u07B9\u0001\u2884\u0003\u07B9\u0001\u07C7\u0002\u150A\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0004\t\u0001\u07B9\u0001\t\u0001\u2882\t\t\u0001\u435B\u0014\t\u0001\u0000\u0001|\u0001\u0000\"\t\u0002\u435C\u0001\t\u0001\u0000\u0001|\u0001\u0000\n\t\u0002\u07B9\u0001\u287E\u0001\u287F\u0001\u435D\u0004\u07B9\u0001\t\u0002\u07B9\u0001\u2880\u0001\u2881\u0001\u2882\u0001\u07B9\u0001\u2883\u0001\t\u0001\u07B9\u0001\u2884\u0003\u07B9\u0001\u07C7\u0002\u150A\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0004\t\u0001\u435D\u0001\t\u0001\u2882\u001A\t\u0001\u435E\u0003\t\u0001\u0000\u0001|\u0001\u0000\u001E\t\u0001\u288D\u0006\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001\n\u0001\u046E\u0001~\u0001\u04B2\u0001\u04B3\u0001\u04B4\u0001\u04B5\u0001\u04B6\u0001\u04B7\u0001\u04B8\u0001\u04B5\u0001\t\u0001\u04B5\u0001\u3658\u0001\u04BA\u0001\u04BB\u0001\u04BC\u0001\u04BD\u0001\u04BE\u0001\u0089\u0001\u04BF\u0001\u04C0\u0001\u04B7\u0001\u04C1\u0001\u04B2\u0001\u2659\u0001\u16D0\u0001\u16D1\u0001\u048F\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u04B5\u0001\u0489\u0001\u04BC\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u0479\u0001\u047A\u0001\u0470\u0001\u047B\u0001\u047C\u0001\u0082\u0001\u047D\u0001\u047B\u0001\t\u0001\u047B\u0001\u0471\u0001\u047E\u0001\u047F\u0001\u0480\u0001\u0481\u0001\u0482\u0001\u0089\u0001\u008A\u0001\u0483\u0001\u0082\u0001\u0484\u0001\u0479\u0001\u343A\u0001\u3DC7\u0001\u3DC8\u0001\u12A9\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u047B\u0001\u0489\u0001\u0480\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u1743\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12A6\u0001\u04F3\u0001\u04F4\u0001\u2673\u0001\u017F\u0001\u0180\u0001\u12AB\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u049E\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A7\u0001\n\u0002\t\u0001\u1743\u0001\u04A7\u0001\u04F3\u0001\t\u0001\n\u0001\u04A9\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u04E9\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12B0\u0001\u0637\u0001\u04F4\u0001\u04F5\u0001\u017F\u0001\u0180\u0001\u04F6\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u0538\u0001\u0539\u0001\u053A\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A1\u0001\n\u0002\t\u0001\u04E9\u0001\u04A1\u0001\u0637\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u0479\u0001\u047A\u0001\u0470\u0001\u047B\u0001\u047C\u0001\u0082\u0001\u047D\u0001\u047B\u0001\t\u0001\u047B\u0001\u0471\u0001\u047E\u0001\u047F\u0001\u0480\u0001\u0481\u0001\u0482\u0001\u0089\u0001\u008A\u0001\u0483\u0001\u0082\u0001\u0484\u0001\u0479\u0001\u3567\u0001\u0486\u0001\u0487\u0001\u12A9\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u047B\u0001\u0489\u0001\u0480\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u04E9\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12B0\u0001\u04F3\u0001\u04F4\u0001\u051E\u0001\u017F\u0001\u0180\u0001\u04F6\u0001\u0787\u0001\u04F8\u0001\u04F9\u0001\u0538\u0001\u0539\u0001\u053A\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A1\u0001\n\u0002\t\u0001\u04E9\u0001\u04A1\u0001\u04F3\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u1743\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12A6\u0001\u04F3\u0001\u04F4\u0001\u435F\u0001\u017F\u0001\u0180\u0001\u12AB\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u049E\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A1\u0001\n\u0002\t\u0001\u1743\u0001\u04A1\u0001\u04F3\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u051D\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12A6\u0001\u04F3\u0001\u04F4\u0001\u051E\u0001\u017F\u0001\u0180\u0001\u04F6\u0001\u04F7\u0001\u1357\u0001\u04F9\u0001\u049E\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A1\u0001\n\u0002\t\u0001\u051D\u0001\u04A1\u0001\u04F3\u0001\t\u0001\n\u0001\u04A9\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u04E9\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12B0\u0001\u04F3\u0001\u04F4\u0001\u04F5\u0001\u017F\u0001\u0180\u0001\u04F6\u0001\u04F7\u0001\u0654\u0001\u04F9\u0001\u0538\u0001\u0539\u0001\u053A\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A1\u0001\n\u0002\t\u0001\u04E9\u0001\u04A1\u0001\u04F3\u0006\t\u0001\u04A2\t\t\u0001\u12AC\u0006\t\u0001\u05F4\u0002\t\u0001\u12AD\u0003\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u0520\u0001\u04E9\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12AE\u0001\u04F3\u0001\u04F4\u0001\u04F5\u0001\u017F\u0001\u0180\u0001\u12AB\u0001\u05F7\u0001\u04F8\u0001\u04F9\u0001\u12AF\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A7\u0001\n\u0002\t\u0001\u04E9\u0001\u04A7\u0001\u04F3\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u04E9\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12B0\u0001\u04F3\u0001\u04F4\u0001\u051E\u0001\u017F\u0001\u0180\u0001\u04F6\u0001\u05CA\u0001\u04F8\u0001\u04F9\u0001\u0538\u0001\u0539\u0001\u053A\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A1\u0001\n\u0002\t\u0001\u04E9\u0001\u04A1\u0001\u04F3\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u051D\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12A6\u0001\u04F3\u0001\u04F4\u0001\u051E\u0001\u017F\u0001\u0180\u0001\u04F6\u0001\u04F7\u0001\u146C\u0001\u04F9\u0001\u049E\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A1\u0001\n\u0002\t\u0001\u051D\u0001\u04A1\u0001\u04F3\u0001\t\u0001\n\u0001\u04A9\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u04E9\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12B0\u0001\u04F3\u0001\u04F4\u0001\u04F5\u0001\u017F\u0001\u0180\u0001\u04F6\u0001\u04F7\u0001\u146D\u0001\u04F9\u0001\u0538\u0001\u0539\u0001\u053A\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A1\u0001\n\u0002\t\u0001\u04E9\u0001\u04A1\u0001\u04F3\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u04B2\u0001\u04B3\u0001\u04B4\u0001\u04B5\u0001\u04B6\u0001\u4360\u0001\u04B8\u0001\u04B5\u0001\t\u0001\u04B5\u0001\u04B9\u0001\u04BA\u0001\u1323\u0001\u04BC\u0001\u04BD\u0001\u04BE\u0001\u0089\u0001\u04BF\u0001\u04C0\u0001\u04B7\u0001\u04C1\u0001\u04B2\u0001\u12B2\u0001\u0475\u0001\u07FF\u0001\u0488\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u04B5\u0001\u0489\u0001\u04BC\u0001\t\u0001\n\u0001\u046E\u0001~\u0001\u04B2\u0001\u04B3\u0001\u04B4\u0001\u04B5\u0001\u04B6\u0001\u4361\u0001\u04B8\u0001\u04B5\u0001\t\u0001\u04B5\u0001\u04B9\u0001\u04BA\u0001\u1323\u0001\u04BC\u0001\u04BD\u0001\u04BE\u0001\u0089\u0001\u04BF\u0001\u04C0\u0001\u04B7\u0001\u04C1\u0001\u04B2\u0001\u12B2\u0001\u0475\u0001\u07FF\u0001\u0488\u0001\u0000\u0001(\u0001\u0000\u0001\u0489\u0001\n\u0002\t\u0001\u04B5\u0001\u0489\u0001\u04BC\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04AA\u0001\u0095\u0001\u2545\u0001\u04AC\u0001\u0096\u0001\u04AD\u0001\u04AB\u0001\t\u0001\u04AB\u0001\u04AD\u0001\u04AE\u0001\u04AB\u0001\u04AF\u0001\u04B0\u0001\u049C\u0001\u1460\u0001\u1461\u0001\u049D\u0001\u0096\u0001\u04B1\u0001\u0192\u0001\u049E\u0001\u0539\u0001\u053A\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A1\u0001\n\u0002\t\u0001\u2545\u0001\u04A1\u0001\u04AF\u0016\t\u0001\u15CF\u0003\t\u0001\u079D\u0003\t\u0001\u0000\u0001|\u0001\u0000\u0017\t\u0001\u15CA\r\t\u0001\u0000\u0001|\u0001\u0000\u0015\t\u0001\u4362\u000F\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001\n\u0001\u04A9\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u04E9\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12B0\u0001\u04F3\u0001\u04F4\u0001\u051E\u0001\u017F\u0001\u0180\u0001\u1635\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u04A6\u0001\u0539\u0001\u053A\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A1\u0001\n\u0002\t\u0001\u04E9\u0001\u04A1\u0001\u04F3\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u051D\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u12A6\u0001\u0628\u0001\u04F4\u0001\u051E\u0001\u017F\u0001\u0180\u0001\u04F6\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u049E\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A1\u0001\n\u0002\t\u0001\u051D\u0001\u04A1\u0001\u0628\u0001\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u04E8\u0001\u1743\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u12A5\u0001\u04F1\u0001\u1630\u0001\u04F3\u0001\u04F4\u0001\u051E\u0001\u017F\u0001\u0180\u0001\u12AB\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u049E\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A1\u0001\n\u0002\t\u0001\u1743\u0001\u04A1\u0001\u04F3\u0006\t\u0001\u04A2\u0007\t\u0001\u4362\u0001\t\u0001\u12AC\t\t\u0001\u12AD\u0003\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001\n\u0001\u0092\u0001\u0466\u0001\u0093\u0001\u04E7\u0001\u0520\u0001\u04E9\u0001\u04EA\u0001\u04EB\u0001\u04EC\u0001\u04ED\u0001\u04EE\u0001\u04EF\u0001\u4363\u0001\u04F1\u0001\u12AE\u0001\u04F3\u0001\u04F4\u0001\u04F5\u0001\u017F\u0001\u0180\u0001\u12AB\u0001\u04F7\u0001\u04F8\u0001\u04F9\u0001\u12AF\u0001\u008E\u0001\u049F\u0001\u04A0\u0001\u0000\u0001(\u0001\u0000\u0001\u04A7\u0001\n\u0002\t\u0001\u04E9\u0001\u04A7\u0001\u04F3\u0001\t\u0001,\u0001\u080A\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u4364\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0001\u0824\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u0825\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\t\t\u0001\u4365\n\t\u0002\u0134\b\t\u0001\u0000\u0001|\u0001\u0000\u0010\t\u0001\u4365\n\t\u0002\u0134\u0001\u081D\u0003\t\u0001\u1744\u0002\u081E\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0001\u081F\u0004\t\u0001\u081F\u0002\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u4366\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u01B1\u0001\u01B2\u0001\u0820\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u1745\u0001\u0821\u0001\u0822\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u080E\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u080E\u0001\u01A0\u0016\t\u0001\u4367\u0007\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u080A\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u4368\u0001\u4369\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\n\t\u0001\u436A\u0013\t\u0001\u0000\u0001|\u0001\u0000\u0011\t\u0001\u436B\t\t\u0002\u0811\u0004\t\u0001\u079D\u0002\u0174\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0002\t\u0001\u0812\u0005\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u436C\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u0803\u0001\u0804\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0814\u0001\u0815\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u0816\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u0819\u0001\u174C\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u1746\u0001\u1747\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0296\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u000E\u0000\u0001\u436D\u001B\u0000\u0001\u02C3\u000B\u0000\u0001\u436D\t\u0000\u0001\u0823\b\u0000\u0001\u02C4\u0004\u0000\u0001\u02C4\u0017\u0000\u0001\u436E\u0011\u0000\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u080F\u0001\u1750\u0001\u1751\u0001\u080C\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u37A4\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u37A4\u0001\u01A0\u001E\t\u0001\u0000\u0001\u436F\u0001\u0000%\t\u0001\u0000\u0001|\u0001\u0000\u0001\u290E\u0004\t\u0001\u290E\u000B\t\u0001\u0495\t\t\u0002\u0811\u0005\t\u0002\u0174\u0001\t\u0001\u0000\u0001\u436F\u0001\u0000\u0002\t\u0001\u0812\u0005\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u0813\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u0803\u0001\u0804\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0807\u0001\u0814\u0001\u0815\u0001\u0242\u0001\u0000\u0001\u4370\u0001\u0000\u0001\u01AA\u0001,\u0001\u0816\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u080D\u0001\u0806\u0001\u080C\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u4371\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u4371\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u0802\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u4372\u0001\u4373\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u000E\t\u0001\u0AD5\u000F\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u174A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u0B23\u0001\u0819\u0001\u081A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u1746\u0001\u1747\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0296\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u174A\u0001\u01AA\u0001\u01A0\u001B\t\u0002\u09A1\u0001\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u4374\u0001\u4375\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u3779\u0001\u1750\u0001\u1751\u0001\u080C\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u001F\u0000\u0001\u4376\b\u0000\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u081A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u0819\u0001\u081A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u4377\u0001\u4378\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0296\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u081A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u080A\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0001\u0824\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u4379\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u001B\t\u0002\u437A\u0001\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u437B\u0001\u437C\u0001\u080C\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u080E\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u080E\u0001\u01A0\u001E\t\u0001\u0000\u0001|\u0001\u0000\u0001\u2981\u0004\t\u0001\u2981\u0002\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u080F\u0001\u0805\u0001\u0806\u0001\u080C\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u1C91\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u1C91\u0001\u01A0\u0010\t\u0001\u346B\r\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u0819\u0001\u437D\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0296\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0014\t\u0002\u29BC\b\t\u0001\u0000\u0001|\u0001\u0000\u000E\t\u0001\u437E\u0016\t\u0001\u0000\u0001|\u0001\u0000\u0004\t\u0001\u437E\u0003\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u437F\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u1750\u0001\u1751\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u437F\u0001\u01AA\u0001\u01A0\u001E\t\u0001\u0000\u0001|\u0001\u0000\u0001\u4380\u0004\t\u0001\u4380\u0017\t\u0001\u081D\u0003\t\u0001\u1744\u0002\u081E\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0001\u4380\u0004\t\u0001\u4380\u0002\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0001\u0820\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u1745\u0001\u0821\u0001\u0822\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u4381\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u4381\u0001\u01A0\u0010\t\u0001\u029C\r\t\u0001\u0000\u0001|\u0001\u0000%\t\u0001\u0000\u0001|\u0001\u0000\u0001\u2A6D\u0004\t\u0001\u2A6D\u0001\t\u0002\u0000\u0001\u4382%\u0000\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u0802\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0807\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u4383\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u4383\u0001\u01A0\u001B\t\u0002\u4384\u0001\t\u0001\u0000\u0001|\u0001\u0000\r\t\u0001\u2A39\u0017\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u4385\u0001\u4386\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u000E\u0000\u0001\u4387\u0019\u0000\u001A\t\u0001\u4388\u0003\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u0809\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u4389\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u438A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u0802\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0807\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u438B\u0001\u438C\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u438D\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u438D\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u3872\u0001\u3873\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0010\t\u0001\u438E\r\t\u0001\u0000\u0001|\u0001\u0000\u001D\t\u0001\u438F\u0007\t\u0001\u0000\u0001|\u0001\u0000\u0011\t\u0001\u0495\t\t\u0002\u0811\u0001\u438F\u0003\t\u0001\u079D\u0002\u0174\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0002\t\u0001\u0812\u0005\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u0813\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u0803\u0001\u0804\u0001\u4390\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0814\u0001\u0815\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u0816\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u001B\t\u0002\u3EFA\u0001\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u4391\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0001\u0C36\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u080D\u0001\u0806\u0001\u080C\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u080E\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u080E\u0001\u01A0\u001E\t\u0001\u0000\u0001|\u0001\u0000\u0001\u081F\u0004\t\u0001\u081F\u0002\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u0803\u0001\u0804\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u080E\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u080E\u0001\u01A0\u0010\t\u0001\u4392\r\t\u0001\u0000\u0001|\u0001\u0000\u0011\t\u0001\u4393\u0013\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u4394\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u001A\t\u0001\u3F47\u0003\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u4395\u0001\u0805\u0001\u0806\u0001\u080C\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u080A\u0001\u0198\u0001\u01AC\u0001\u1A92\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0001\u0824\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u0825\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u4396\u0001\u4397\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u001B\t\u0002\u4398\u0001\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u0809\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u4399\u0001\u439A\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0007\t\u0001\u079D\u000E\t\u0001\u081D\u0003\t\u0001\u1744\u0002\u081E\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0001\u081F\u0003\t\u0001\u079D\u0001\u081F\u001B\t\u0001\u439B\u0003\t\u0001\u0000\u0001|\u0001\u0000\u001B\t\u0002\u367B\b\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u439C\u0001\u439D\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u439E\u0001\u439F\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u001D\t\u0001\u43A0\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u0819\u0001\u081A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u09C4\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u1B2E\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u1B2E\u0001\u01A0\u0010\t\u0001\u43A1\r\t\u0001\u0000\u0001|\u0001\u0000\r\t\u0001\u43A2\b\t\u0001\u43A3\u000E\t\u0001\u0000\u0001|\u0001\u0000\r\t\u0001\u0174\u0017\t\u0001\u0000\u0001|\u0001\u0000\u001B\t\u0002\u43A4\b\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u080A\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u43A5\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0001\u0824\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u0825\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u174A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u0819\u0001\u081A\u0001\u01A0\u0001\u019A\u0001\u2AE4\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0296\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u174A\u0001\u01AA\u0001\u01A0\u0006\t\u0001\u43A2\b\t\u0001\u43A3\u0006\t\u0001\u081D\u0003\t\u0001\u1744\u0002\u081E\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0001\u081F\u0004\t\u0001\u081F\u0002\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u43A6\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u43A7\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0001\u0820\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u1745\u0001\u0821\u0001\u0822\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u080E\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u080E\u0001\u01A0\u0006\t\u0001\u0174\u000F\t\u0001\u081D\u0003\t\u0001\u1744\u0002\u081E\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0001\u081F\u0004\t\u0001\u081F\u0002\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u43A8\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0001\u0820\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u1745\u0001\u0821\u0001\u0822\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u080E\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u080E\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u0819\u0001\u081A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u43A9\u0001\u43AA\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0296\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u001B\t\u0002\u290E\u0001\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u080A\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0001\u0824\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u0825\u0001\u2AA4\u0001\u2AA5\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0007\u0000\u0001\u43AB\u001D\u0000\u0001\u43AB\u0004\u0000\u0001\u02C3\u0004\u0000\u0001\u43AB\u0010\u0000\u0001\u0823\b\u0000\u0001\u02C4\u0003\u0000\u0001\u43AB\u0001\u02C4\u001B\u0000\u0001\u43AC\r\u0000\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u0819\u0001\u081A\u0001\u01A0\u0001\u019A\u0001\u2917\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0296\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0017\t\u0001\u43AD\u0006\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u080A\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0001\u0824\u0001\u43AE\u0001\u01A3\u0001\u01A4\u0001\u0825\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u174A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u0819\u0001\u081A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u43AF\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u174A\u0001\u01AA\u0001\u01A0\u0010\t\u0001\u09A1\u0005\t\u0001\u081D\u0003\t\u0001\u1744\u0002\u081E\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0001\u081F\u0004\t\u0001\u081F\u0002\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u43B0\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0001\u0820\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u1745\u0001\u0821\u0001\u0822\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u080E\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u080E\u0001\u01A0\u0013\t\u0001\u179F\n\t\u0001\u0000\u0001|\u0001\u0000\u000F\t\u0001\u43B1\u0015\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u0802\u0001\u01A0\u0001\u019A\u0001\u43B2\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0807\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0014\t\u0002\u43B3\b\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u0819\u0001\u081A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u43B4\u0001\u43B5\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0296\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u080B\u0001\u1750\u0001\u1751\u0001\u080C\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u437F\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u437F\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u43B6\u0001\u0805\u0001\u0806\u0001\u080C\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u43B7\u0001\u1750\u0001\u1751\u0001\u080C\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u43B8\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u43B8\u0001\u01A0\u0014\t\u0002\u16DE\u0004\t\u0001\u43B9\u0003\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u43BA\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\n\t\u0001\u0495\t\t\u0002\u0811\u0005\t\u0002\u43BB\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0002\t\u0001\u0812\u0005\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u0813\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u0803\u0001\u0804\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0807\u0001\u43BC\u0001\u43BD\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u0816\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0007\t\u0001\u2946\u0016\t\u0001\u0000\u0001|\u0001\u0000\u0004\t\u0001\u2946\u0003\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u294B\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u080D\u0001\u0806\u0001\u080C\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u080E\u0001,\u0001\u01AB\u0001\t\u0001\u294B\u0001\u080E\u0001\u01A0\u001D\u0000\u0001\u43BE\f\u0000\u0001\u02C3\u0015\u0000\u0001\u0823\u0004\u0000\u0001\u43BE\u0003\u0000\u0001\u02C4\u0004\u0000\u0001\u02C4\u0001\u0000\u001B\t\u0002\u29FC\u0001\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u29FD\u0001\u29FE\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u43BF\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u080A\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u43C0\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0807\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u080A\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u43C1\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0807\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0006\t\u0001\u079D\u0017\t\u0001\u0000\u0001|\u0001\u0000\u0001\u0134\u0004\t\u0001\u0134\u000F\t\u0001\u43A2\u000F\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u080A\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u43C2\u0001\u081B\u0001\u081C\u0001\u0824\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u0825\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0013\t\u0001\u0911\n\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u0A15\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0010\t\u0001\u1C1B\r\t\u0001\u0000\u0001|\u0001\u0000\u001D\t\u0001\u1AC9\u0007\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u43C0\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0001\u18EF\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0011\t\u0001\u09FA\f\t\u0001\u0000\u0001|\u0001\u0000\u0006\t\u0001\u09FA\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u0802\u0001\u0A00\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0807\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u0A00\u001D\u0000\u0001\u43C3\n\u0000\u0018\t\u0001\u43C4\u0005\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u080A\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u0802\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u43C5\u0001\u01A4\u0001\u0807\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0016\t\u0001\u3904\u0007\t\u0001\u0000\u0001|\u0001\u0000\u001D\t\u0001\u43C6\u0003\t\u0001\u1744\u0002\u081E\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0001\u081F\u0004\t\u0001\u081F\u0002\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u1A20\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u1750\u0001\u1751\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u080A\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u28F2\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u2D0E\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u2D0E\u0001\u01A0\n\t\u0001\u0495\t\t\u0002\u0811\u0004\t\u0001\u079D\u0002\u0174\u0001\t\u0001\u0000\u0001\u43C7\u0001\u0000\u0002\t\u0001\u0812\u0005\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u0813\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u0803\u0001\u0804\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0814\u0001\u0815\u0001\u0242\u0001\u0000\u0001\u43C8\u0001\u0000\u0001\u01AA\u0001,\u0001\u0816\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0013\u0000\u0001\u1901$\u0000\u0001\u43C9\u0017\u0000\u0011\t\u0001\u029C\f\t\u0001\u0000\u0001|\u0001\u0000\u0006\t\u0001\u029C\u0001\t\u0001,\u0001\u080A\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u43CA\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0001\u0824\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u0825\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u43CA\u0005\t\u0001\u43CB\u000E\t\u0002\u185A\b\t\u0001\u0000\u0001|\u0001\u0000\u001D\t\u0001\u43CC\u0007\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u43CD\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u1947\u0001\u1948\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u0871\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0807\u0001\u43CE\u0001\u43CF\u0001\u0808\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u081B\u0001\u081C\u0001\u18FA\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u43D0\u0001\u1BA2\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u001B\u0000\u0002\u43D1\r\u0000\u0001\u02C3\u0015\u0000\u0001\u0823\u0002\u0000\u0002\u43D1\u0004\u0000\u0001\u02C4\u0004\u0000\u0001\u02C4\u0001\u0000\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u3872\u0001\u3873\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u1755\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u1755\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u43D2\u0001\u0805\u0001\u0806\u0001\u080C\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u001B\u0000\u0002\u43D3\r\u0000\u0001\u02C3\u0015\u0000\u0001\u0823\u0002\u0000\u0002\u43D3\u0004\u0000\u0001\u02C4\u0004\u0000\u0001\u02C4\u0001\u0000\u0007\t\u0001\u1B74\u0016\t\u0001\u0000\u0001|\u0001\u0000\u0004\t\u0001\u1B74\u0003\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u09EB\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u0819\u0001\u174C\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0296\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u09EB\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u1749\u0001\u0805\u0001\u0806\u0001\u43D4\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u174D\u0001\u174E\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u37D4\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u37D4\u0001\u01AA\u0001\u01A0\u001E\t\u0001\u0000\u0001|\u0001\u0000\u0001\u43D5\u0004\t\u0001\u43D5\u0002\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u43D6\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u43D6\u0001\u01A0\u0018\u0000\u0001\u43D70\u0000\u0001\u43D8\u0004\u0000\u0001\u43D8\u0001\u0000\u001B\t\u0002\u43D9\u0001\t\u0001\u0000\u0001|\u0001\u0000\u001A\t\u0001\u43DA\n\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u080A\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u0802\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0807\u0001\u43DB\u0001\u43DC\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u43DD\u0001\u0803\u0001\u0804\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u080A\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u2C36\u0001\u019F\u0001\u0802\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0807\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0003\t\u0001\u43DE\u0006\t\u0001\u0495\t\t\u0002\u0811\u0005\t\u0002\u0174\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0002\t\u0001\u0812\u0005\t\u0001,\u0001\u0197\u0001\u43DF\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u0813\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u0803\u0001\u0804\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0807\u0001\u0814\u0001\u0815\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u0816\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u43E0\u0002\u019A\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u43E0\u001A\t\u0001\u43E1\u0003\t\u0001\u0000\u0001|\u0001\u0000\r\t\u0001\u0A2A\u000F\t\u0001\u081D\u0003\t\u0001\u1744\u0002\u081E\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0001\u081F\u0004\t\u0001\u081F\u0002\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0003\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0001\u0820\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u1745\u0001\u0821\u0001\u0822\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u080E\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u080E\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u43E2\u0001\u080D\u0001\u0806\u0001\u080C\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u080E\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u080E\u0001\u01A0\u0001\t\u0001,\u0001\u080A\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0001\u0824\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u186A\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0906\u0001\u0907\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u001D\t\u0001\u4020\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u43E3\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u080A\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u43E4\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0001\u0824\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u0825\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u001B\t\u0002\u0174\u0001\u29BC\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u43E5\u0001\u0805\u0001\u0806\u0001\u080C\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0002\t\u0001\u0ABA\u001B\t\u0001\u0000\u0001|\u0001\u0000\u0001\u43E6\u0004\t\u0001\u43E6\u0002\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u0819\u0001\u081A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0296\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u43E7\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u43E7\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u18AF\u0001\u0819\u0001\u081A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0296\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u43D0\u0001\u1BA2\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u001E\t\u0001\u0000\u0001|\u0001\u0000\u0001\u3826\u0004\t\u0001\u3826\u0001\t!\u0000\u0001\u43E8\u0004\u0000\u0001\u43E8\u0001\u0000\u000E\t\u0001\u0AD8\u000F\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u080A\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u1881\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0001\u0824\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u0825\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u001E\t\u0001\u0000\u0001\u43E9\u0001\u0000\u0007\t!\u0000\u0001\u43EA\u0004\u0000\u0001\u43EA\u0001\u0000\n\t\u0001\u0495\t\t\u0002\u0811\u0004\t\u0001\u079D\u0002\u0174\u0001\t\u0001\u0000\u0001\u43E9\u0001\u0000\u0002\t\u0001\u0812\u0005\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u0813\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u0803\u0001\u0804\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0814\u0001\u0815\u0001\u0242\u0001\u0000\u0001\u43EB\u0001\u0000\u0001\u01AA\u0001,\u0001\u0816\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u080A\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0001\u43EC\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u0825\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u080A\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u43ED\u0001\u019F\u0001\u0802\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0807\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u080A\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u3F80\u0001\u081B\u0001\u081C\u0001\u0824\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u0825\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\n\t\u0001\u0495\t\t\u0002\u0811\u0004\t\u0001\u43EE\u0002\u0174\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0002\t\u0001\u0812\u0005\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u0813\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u0803\u0001\u0804\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u43EF\u0001\u0814\u0001\u0815\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u0816\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u43F0\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0014\t\u0002\u16DE\u0004\t\u0001\u43F1\u0003\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u43F2\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u0819\u0001\u43F3\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0296\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0010\t\u0001\u43F4\r\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u0819\u0001\u43F5\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0296\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\n\t\u0001\u0495\u0004\t\u0001\u43F6\u0004\t\u0002\u0811\u0004\t\u0001\u079D\u0002\u0174\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0002\t\u0001\u0812\u0005\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u0813\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u43F7\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u0803\u0001\u0804\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0814\u0001\u0815\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u0816\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u0809\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u4068\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0014\t\u0002\u43F8\b\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u0819\u0001\u081A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u43F9\u0001\u43FA\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0296\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u001A\t\u0001\u09FA\u0002\u0174\u0001\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0BE4\u0001\u0814\u0001\u0815\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u001D\t\u0001\u43FB\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u43FC\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u0809\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u001B\t\u0002\u0BDB\u0001\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u0809\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0BF0\u0001\u0BF1\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u1996\u0001\u0835\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u19B5\u0001\u189E\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u43FD\u0001\u0802\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0807\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u080D\u0001\u0806\u0001\u080C\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u43FE\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u43FE\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u0802\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0807\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u43FF\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u43FF\u0001\u01A0\u000E\t\u0001\u4400\u0007\t\u0001\u081D\u0003\t\u0001\u1744\u0002\u081E\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0001\u081F\u0004\t\u0001\u081F\u0015\t\u0002\u4401\b\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u0819\u0001\u081A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u4402\u0001\u4403\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0296\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u081B\u0001\u081C\u0001\u4404\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u4405\u0001\u3EE5\u0001\u080C\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u080E\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u080E\u0001\u01A0\u000E\t\u0001\u4406\u000F\t\u0001\u0000\u0001|\u0001\u0000\u0007\t\u001A\u0000\u0001\u4407,\u0000\u0001\u4408\b\u0000\u000E\t\u0001\u4406\u0007\t\u0001\u174B\u0003\t\u0001\u1744\u0002\u081E\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0001\u081F\u0004\t\u0001\u081F\u0002\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u4409\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0001\u0820\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u1745\u0001\u0821\u0001\u0822\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u080E\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u080E\u0001\u01A0\u0005\u0000\u0001\u0C1B\u0019\u0000\u0001\u4408\b\u0000\u0006\t\u0001\u2907\u000F\t\u0001\u081D\u0003\t\u0001\u1744\u0002\u081E\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0001\u081F\u0004\t\u0001\u081F\u0002\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u2910\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0001\u0820\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u1745\u0001\u0821\u0001\u0822\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u080E\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u080E\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u0803\u0001\u0804\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u294E\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0001\u29E3\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u025E\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0001\u081A\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u0819\u0001\u174C\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0001\u440A\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u0296\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u080A\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u0802\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0807\u0001\u01A6\u0001\u01A7\u0001\u3825\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0002\u0000\u0001\u440B%\u0000\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u174A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u0819\u0001\u081A\u0001\u01A0\u0001\u019A\u0001\u2C2D\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0296\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u174A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u081A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u0819\u0001\u081A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0296\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u0802\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0807\u0001\u01A6\u0001\u01A7\u0001\u1B79\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u001E\t\u0001\u0000\u0001\u440C\u0001\u0000\u0015\t\u0001\u440D\u000F\t\u0001\u0000\u0001|\u0001\u0000\u0011\t\u0001\u0495\t\t\u0002\u0811\u0004\t\u0001\u079D\u0002\u0174\u0001\t\u0001\u0000\u0001\u440C\u0001\u0000\u0002\t\u0001\u0812\u0005\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u0813\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u0803\u0001\u0804\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0814\u0001\u0815\u0001\u0242\u0001\u0000\u0001\u440E\u0001\u0000\u0001\u01AA\u0001,\u0001\u0816\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u080A\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u440F\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0001\u0824\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u0825\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u08D1\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u01B1\u0001\u01B2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u001E\t\u0001\u0000\u0001|\u0001\u0000\u0001\u4410\u0004\t\u0001\u4410\u0002\t\u0001,\u0001\u080A\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u4411\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u4411\u0001\u01A0\u0001\t\u0001,\u0001\u080A\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u4412\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0001\u0824\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u0825\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u4413\u0001\u4414\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\n\t\u0001\u0495\t\t\u0002\u0811\u0004\t\u0001\u079D\u0002\u0174\u0001\t\u0001\u0000\u0001\u26F2\u0001\u0000\u0002\t\u0001\u0812\u0005\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u0813\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u0803\u0001\u0804\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0814\u0001\u0815\u0001\u0242\u0001\u0000\u0001\u4415\u0001\u0000\u0001\u01AA\u0001,\u0001\u0816\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u1BF7\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u1755\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u1755\u0001\u01A0\u0013\t\u0001\u1816\n\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u0819\u0001\u081A\u0001\u01A0\u0001\u019A\u0001\u4416\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0296\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u000F\t\u0001\u2B89\r\t\u0001\u0ABB\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u4417\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u19A9\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u1755\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u1755\u0001\u01A0\u0006\t\u0001\u4418\u0017\t\u0001\u0000\u0001|\u0001\u0000\u001D\t\u0001\u3EFA\u0007\t\u0001\u0000\u0001|\u0001\u0000\r\t\u0001\u2BAF\u0017\t\u0001\u0000\u0001|\u0001\u0000\u000E\t\u0001\u0911\u0016\t\u0001\u0000\u0001|\u0001\u0000\u0004\t\u0001\u0911\t\t\u0001\u1AAE\u0016\t\u0001\u0000\u0001|\u0001\u0000\u0004\t\u0001\u1AAE \t\u0001\u0000\u0001|\u0001\u0000\u0001\u09A1\u0004\t\u0001\u09A1\u001B\t\u0001\u4419\u0003\t\u0001\u0000\u0001|\u0001\u0000!\t\u0001\u441A\u0003\t\u0001\u0000\u0001|\u0001\u0000!\t\u0001\u3768\u0003\t\u0001\u0000\u0001|\u0001\u0000%\t\u0001\u0000\u0001\u441B\u0001\u0000\u001D\t\u0001\u024E\u0007\t\u0001\u0000\u0001|\u0001\u0000\r\t\u0001\u441C\u0017\t\u0001\u0000\u0001|\u0001\u0000\u0015\t\u0001\u3F37\u000F\t\u0001\u0000\u0001|\u0001\u0000%\t\u0001\u0000\u0001|\u0001\u0000\u0001\u441D\u0004\t\u0001\u441D\u000F\t\u0001\u441E\u000F\t\u0001\u0000\u0001|\u0001\u0000\u001A\t\u0001\u441F\n\t\u0001\u0000\u0001|\u0001\u0000\u001D\t\u0001\u4420\u0007\t\u0001\u0000\u0001|\u0001\u0000\u0016\t\u0001\u09A1\u000E\t\u0001\u0000\u0001|\u0001\u0000\u0007\t\u001F\u0000\u0001\u4421\b\u0000\u000E\t\u0001\u4422\u000F\t\u0001\u0000\u0001|\u0001\u0000\u001A\t\u0001\u2BB9\n\t\u0001\u0000\u0001|\u0001\u0000%\t\u0001\u0000\u0001|\u0001\u0000\u0001\u0174\u0004\t\u0001\u0174\u0002\t\u0001,\u0001\u080A\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0001\u4423\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u0825\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0014\t\u0002\u0134\u0001\u174B\u0003\t\u0001\u1744\u0002\u081E\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0001\u081F\u0004\t\u0001\u081F\u000B\t\u0001\u0495\t\t\u0002\u4424\u0004\t\u0001\u079D\u0002\u0174\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0002\t\u0001\u0812\u0005\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u0813\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u4425\u0001\u4426\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0814\u0001\u0815\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u0816\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0006\t\u0001\u2BAF\u000F\t\u0001\u081D\u0003\t\u0001\u1744\u0002\u081E\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0001\u081F\u0004\t\u0001\u081F\u0002\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u4427\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0001\u0820\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u1745\u0001\u0821\u0001\u0822\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u080E\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u080E\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u0A15\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u0A15\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u4428\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u4428\u0001\u01AA\u0001\u01A0\u0014\t\u0002\u0134\u0001\u174B\u0003\t\u0001\u1744\u0002\u081E\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0001\u0134\u0004\t\u0001\u0134\u0002\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u1C4B\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u1C4B\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u4429\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u0809\u0001\u019A\u0001\t\u0001\u019A\u0001\u1C52\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u0809\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u442A\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u0819\u0001\u081A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0296\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u442B\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0001\u025E\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u442C\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u442C\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u442D\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u080D\u0001\u0806\u0001\u080C\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u080E\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u080E\u0001\u01A0\u0001\t\u0001,\u0001\u080A\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u442E\u0001\u081B\u0001\u081C\u0001\u0824\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u0825\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0001\u442F\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u000E\t\u0001\u0AD8\u0001\u09A1\u0006\t\u0001\u081D\u0003\t\u0001\u1744\u0002\u081E\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0001\u081F\u0004\t\u0001\u081F\u0002\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u1881\u0001\u4430\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0001\u0820\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u1745\u0001\u0821\u0001\u0822\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u080E\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u080E\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u4431\u0001\u0819\u0001\u081A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0296\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u080A\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u094B\u0001\u081B\u0001\u081C\u0001\u0824\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u0825\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u29E7\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u29E7\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u0819\u0001\u081A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u0803\u0001\u0804\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0296\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u4432\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u0819\u0001\u081A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0296\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0935\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u0802\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u4433\u0001\u081A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0296\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0013\t\u0001\u4434\n\t\u0001\u0000\u0001|\u0001\u0000\u001A\t\u0001\u4434\u0002\t\u0001\u081D\u0003\t\u0001\u1744\u0002\u081E\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0001\u081F\u0004\t\u0001\u081F\u0002\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u4435\u0001\u081B\u0001\u081C\u0001\u0820\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u1745\u0001\u0821\u0001\u0822\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u080E\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u080E\u0001\u01A0\u0014\t\u0002\u09A1\b\t\u0001\u0000\u0001|\u0001\u0000\u0001\u4436\u0004\t\u0001\u4436\u0002\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u0819\u0001\u081A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u1746\u0001\u1747\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0296\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u28E6\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u28E6\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u4437\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u080F\u0001\u0805\u0001\u0806\u0001\u080C\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u080B\u0001\u0805\u0001\u0806\u0001\u4438\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u001B\t\u0002\u4439\u0001\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u443A\u0001\u443B\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0906\u0001\u0907\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u080A\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u0B72\u0001\u081C\u0001\u0824\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u0825\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u080A\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u443C\u0001\u081B\u0001\u081C\u0001\u0824\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u0825\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u443D\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u000E\t\u0001\u2BA6\u000F\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u443E\u0001\u0819\u0001\u081A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0296\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0010\t\u0001\u443F\r\t\u0001\u0000\u0001|\u0001\u0000\u0017\t\u0001\u443F\u0005\t\u0001\u081D\u0003\t\u0001\u1744\u0002\u081E\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0001\u081F\u0004\t\u0001\u081F\u0002\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u4440\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0001\u0820\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u1745\u0001\u0821\u0001\u0822\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u080E\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u080E\u0001\u01A0\u0016\t\u0001\u4441\u0007\t\u0001\u0000\u0001|\u0001\u0000\"\t\u0002\u2932\u0001\t\u0001\u0000\u0001|\u0001\u0000\u001B\t\u0002\u0134\u0001\u4441\u0007\t\u0001\u0000\u0001|\u0001\u0000\u001B\t\u0002\u0134\u0001\u4442\u0003\t\u0001\u1744\u0002\u081E\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0001\u081F\u0004\t\u0001\u081F\u0002\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u4443\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u4444\u0001\u4445\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0006\t\u0001\u4446\u0003\t\u0001\u0495\t\t\u0002\u0811\u0005\t\u0002\u0174\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0002\t\u0001\u0812\u0005\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u4447\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u0813\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u0803\u0001\u0804\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0807\u0001\u0814\u0001\u0815\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u0816\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u28F1\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u000E\u0000\u0001\u4448\u001B\u0000\u0001\u02C3\u000B\u0000\u0001\u4448\t\u0000\u0001\u0823\b\u0000\u0001\u02C4\u0004\u0000\u0001\u02C4\u0001\u0000\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u2D27\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u43C0\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0807\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u2D27\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u080A\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u0802\u0001\u4449\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0807\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u4449\u0013\t\u0001\u2924\n\t\u0001\u0000\u0001|\u0001\u0000\u001D\t\u0001\u3FB1\u0007\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u444A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u000E\t\u0001\u3FFF\u000F\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u444B\u0001\u0819\u0001\u081A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0296\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0014\t\u0002\u185A\u0001\u081D\u0003\t\u0001\u1744\u0002\u081E\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0001\u0134\u0004\t\u0001\u0134\u0002\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u1947\u0001\u1948\u0001\u0820\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u1745\u0001\u0821\u0001\u0822\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u0A0F\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u0A0F\u0001\u01A0\b\t\u0001\u444C\u0015\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u444D\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u001E\t\u0001\u0000\u0001|\u0001\u0000\u0001\u444E\u0004\t\u0001\u444E\u0017\t\u0001\u18FE\u0007\t\u0001\u0000\u0001|\u0001\u0000!\t\u0001\u444F\u0003\t\u0001\u0000\u0001|\u0001\u0000\u001D\t\u0001\u38B1\u0007\t\u0001\u0000\u0001|\u0001\u0000\u0010\t\u0001\u4450\u0014\t\u0001\u0000\u0001|\u0001\u0000\u000B\t\u0001\u2BB8\u0019\t\u0001\u0000\u0001|\u0001\u0000\u0010\t\u0001\u1ACB\u0014\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u4451\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u4451\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u0810\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0001\u01EB\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u080C\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u4452\u0001\u0805\u0001\u0806\u0001\u080C\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0010\t\u0001\u0174\u0003\t\u0002\u2543\b\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u0819\u0001\u2B81\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u28D0\u0001\u28D1\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0296\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\t\t\u0001\u4450\f\t\u0001\u174B\u0003\t\u0001\u1744\u0002\u081E\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0001\u081F\u0004\t\u0001\u081F\u0002\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u4453\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0001\u0820\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u1745\u0001\u0821\u0001\u0822\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u080E\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u080E\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u2B65\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u0819\u0001\u174C\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0296\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u4454\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u0819\u0001\u081A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0296\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0014\t\u0002\u16DE\u0001\u174B\u0003\t\u0001\u1744\u0002\u081E\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0001\u081F\u0004\t\u0001\u081F\u0002\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u081B\u0001\u081C\u0001\u0BFF\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0016\t\u0001\u37B1\u0007\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u080A\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0001\u4455\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u0825\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u001A\t\u0001\u1744\u0003\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u4456\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0010\t\u0001\u3735\r\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u0802\u0001\u4457\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0807\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u4457\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u0819\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u080D\u0001\u0806\u0001\u080C\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u080E\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u080E\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u4458\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0807\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u080A\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0001\u0824\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u4459\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u445A\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u445A\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u368F\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u18A7\u0001\u1750\u0001\u1751\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0016\t\u0001\u174B\u0001\u09CD\u0002\t\u0001\u1744\u0002\u081E\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0001\u081F\u0004\t\u0001\u081F\u0002\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u0C17\u0001\u0C18\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u1750\u0001\u1751\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\n\t\u0001\u0495\t\t\u0002\u0811\u0001\u37B1\u0003\t\u0001\u079D\u0002\u0174\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0002\t\u0001\u0812\u0005\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u0813\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u0803\u0001\u0804\u0001\u445B\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0814\u0001\u0815\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u0816\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u174A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u0819\u0001\u081A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u29E5\u0001\u29E6\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0296\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u174A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u080F\u0001\u0805\u0001\u0806\u0001\u37EB\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u1933\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u1755\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u1755\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u09DD\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u09DD\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u0819\u0001\u081A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u081B\u0001\u081C\u0001\u2B26\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u0296\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0014\t\u0002\u445C\b\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u0802\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u445D\u0001\u445E\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0014\t\u0002\u445F\b\t\u0001\u0000\u0001|\u0001\u0000\u001D\t\u0001\u4460\u0007\t\u0001\u0000\u0001|\u0001\u0000\t\t\u0001\u192E\u001B\t\u0001\u0000\u0001|\u0001\u0000\n\t\u0001\u4461\u001A\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u0802\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u4462\u0001\u4463\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0807\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\n\t\u0001\u0495\t\t\u0002\u0811\u0001\u4460\u0003\t\u0001\u079D\u0002\u0174\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0002\t\u0001\u0812\u0005\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u0813\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u0803\u0001\u0804\u0001\u4464\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0814\u0001\u0815\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u0816\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u1933\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u0819\u0001\u081A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u4465\u0001\u4466\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u0296\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u001A\t\u0001\u37EE\u0003\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001,\u0001\u0197\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u4467\u0001\u174D\u0001\u174E\u0001\u174F\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0011\t\u0001\u4468\f\t\u0001\u0000\u0001|\u0001\u0000\u0006\t\u0001\u4468\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u4469\u0001\u019A\u0001\u0802\u0001\u0803\u0001\u0804\u0002\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u4469\u0001\t\u0001,\u0001\u0197\u0001\u0198\u0001\u01AC\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0001\u019A\u0001\u0802\u0001\u01B1\u0001\u01B2\u0001\u2A17\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u01A6\u0001\u01A7\u0001\u01A8\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u001A\u0000\u0001\u446A\r\u0000\u0001\t\u0001,\u0001\u080A\u0001\u0198\u0001\u0199\u0001\u019A\u0001\u019B\u0001\u019A\u0001\u019C\u0001\u019A\u0001\u019D\u0001\u019A\u0001\t\u0001\u019A\u0001\u019E\u0001\u019F\u0001\u019A\u0001\u01A0\u0002\u019A\u0001\u01A1\u0001\u01A2\u0001\u086F\u0001\u019A\u0001\u01A3\u0001\u01A4\u0001\u01A5\u0001\u0805\u0001\u0806\u0001\u0242\u0001\u0000\u0001\u01A9\u0001\u0000\u0001\u01AA\u0001,\u0001\u01AB\u0001\t\u0001\u019A\u0001\u01AA\u0001\u01A0\u0001\t\u0001L\u0001\u0CC1\u0001\u0C70\u0001\u02F2\u0001\u0CC5\u0001\u02F4\u0001\u0CC6\u0001\u0CC7\u0001\u02F5\u0001\u0CC8\u0001\u0CC6\u0001\t\u0001\u0CC6\u0001\u0CC9\u0001\u0CCA\u0001\u0CC6\u0001\u0CCB\u0001\u0CCC\u0001\u0CB1\u0001\u0CB2\u0001\u0CB3\u0001\u446B\u0001\u02F5\u0001\u0CCD\u0001\u0CCE\u0001\u1CC0\u0001\u0D75\u0001\u0D76\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CC4\u0001L\u0001\u01AB\u0001\t\u0001\u0CC6\u0001\u0CC4\u0001\u0CCB\u0006\t\u0001\u04A2\u0001\u060B\b\t\u0001\u12AC\u0005\t\u0001\u081D\u0003\t\u0001\u12AD\u0002\u081E\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0001\u081F\u0003\t\u0001\u060B\u0001\u081F\u0002\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D4F\u0001\u1159\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D13\u0001\u1CC9\u0001\u0D4A\u0001\u0D16\u0001\u0D17\u0001\u0CB2\u0001\u0CB3\u0001\u1CCA\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u1CCB\u0001\u0CBD\u0001\u0CBE\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CBF\u0001L\u0001\u01AB\u0001\t\u0001\u1159\u0001\u0CBF\u0001\u0D4A\u0001\t\u0001L\u0001\u446C\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u0D0C\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D13\u0001\u1CCC\u0001\u0D4A\u0001\u0D16\u0001\u0D4B\u0001\u0CB2\u0001\u0CB3\u0001\u0D18\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0D74\u0001\u0D75\u0001\u0D76\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CB8\u0001L\u0001\u01AB\u0001\t\u0001\u0D0C\u0001\u0CB8\u0001\u0D4A\u0001\t\u0001L\u0001\u0C6F\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u0D0C\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D13\u0001\u1CC2\u0001\u0D4A\u0001\u0D16\u0001\u0D17\u0001\u0C74\u0001\u0C75\u0001\u0F4E\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0C76\u0001\u02EC\u0001\u0C77\u0001\u0C78\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C79\u0001L\u0001\u01AB\u0001\t\u0001\u0D0C\u0001\u0C79\u0001\u0D4A\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0C85\u0001\u0C86\u0001\u0C7C\u0001\u0C87\u0001\u0C88\u0001\u02DE\u0001\u0C89\u0001\u0C87\u0001\t\u0001\u0C87\u0001\u0C7D\u0001\u0C8A\u0001\u0C8B\u0001\u0C8C\u0001\u0C8D\u0001\u0C8E\u0001\u02E6\u0001\u02E7\u0001\u0C8F\u0001\u02DE\u0001\u0C90\u0001\u0C91\u0001\u1CC4\u0001\u0C9F\u0001\u0C94\u0001\u39BC\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CA0\u0001L\u0001\u01AB\u0001\t\u0001\u0C87\u0001\u0CA0\u0001\u0C8C\u0001\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u0E84\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D48\u0001\u1CC7\u0001\u0D4A\u0001\u0D16\u0001\u0D4B\u0001\u0CB2\u0001\u0CB3\u0001\u1CC8\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0CB5\u0001\u02EC\u0001\u0CB6\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CC4\u0001L\u0001\u01AB\u0001\t\u0001\u0E84\u0001\u0CC4\u0001\u0D4A\u0001\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D4F\u0001\u0D0C\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D13\u0001\u1CD8\u0001\u0D4A\u0001\u0D16\u0001\u2E12\u0001\u0CB2\u0001\u0CB3\u0001\u1CCA\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u1CCB\u0001\u0CBD\u0001\u0CBE\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CBF\u0001L\u0001\u01AB\u0001\t\u0001\u0D0C\u0001\u0CBF\u0001\u0D4A\u0001\t\u0001L\u0001\u0CC1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u0D0C\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D13\u0001\u446D\u0001\u0D4A\u0001\u0D16\u0001\u0D17\u0001\u0CB2\u0001\u0CB3\u0001\u0D56\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0CC3\u0001\u101E\u0001\u101F\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CC4\u0001L\u0001\u01AB\u0001\t\u0001\u0D0C\u0001\u0CC4\u0001\u0D4A\u0001\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u0D47\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u3D3D\u0001\u0D48\u0001\u1CC7\u0001\u0D4A\u0001\u0D16\u0001\u0D4B\u0001\u0CB2\u0001\u0CB3\u0001\u1CC8\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0CB5\u0001\u02EC\u0001\u0CB6\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CC4\u0001L\u0001\u01AB\u0001\t\u0001\u0D47\u0001\u0CC4\u0001\u0D4A\u0006\t\u0001\u04A2\u0002\t\u0001\u4365\u0006\t\u0001\u051F\u0003\t\u0002\u0134\u0001\u081D\u0003\t\u0001\u12AD\u0002\u081E\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0001\u081F\u0004\t\u0001\u081F\u0002\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D4F\u0001\u0D0C\u0001\u0D0D\u0001\u446E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D13\u0001\u1CD8\u0001\u0D4A\u0001\u0D16\u0001\u0D17\u0001\u1CFC\u0001\u1CFD\u0001\u1CCA\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u1CCB\u0001\u0CBD\u0001\u0CBE\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CBF\u0001L\u0001\u01AB\u0001\t\u0001\u0D0C\u0001\u0CBF\u0001\u0D4A\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0C85\u0001\u0C86\u0001\u0C7C\u0001\u0C87\u0001\u0C88\u0001\u02DE\u0001\u0C89\u0001\u0C87\u0001\t\u0001\u0C87\u0001\u0C7D\u0001\u0C8A\u0001\u0C8B\u0001\u0C8C\u0001\u0C8D\u0001\u0C8E\u0001\u02E6\u0001\u02E7\u0001\u0C8F\u0001\u02DE\u0001\u0C90\u0001\u0C91\u0001\u446F\u0001\u3944\u0001\u2D90\u0001\u1CC5\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CA0\u0001L\u0001\u01AB\u0001\t\u0001\u0C87\u0001\u0CA0\u0001\u0C8C\u0004\t\u0005\u12D6\u0001\u2541\u0002\u12D6\u0001\t\u0007\u12D6\u0001\t\u0005\u12D6\u0001\u060C\u0002\u2DBF\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0004\t\u0001\u12D6\u0001\t\u0001\u12D6\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0CCF\u0001\u0CD0\u0001\u0CD1\u0001\u0CD2\u0001\u0CD3\u0001\u2D32\u0001\u0CD5\u0001\u0CD2\u0001\t\u0001\u0CD2\u0001\u0CD6\u0001\u0CD7\u0001\u1D51\u0001\u0CD9\u0001\u0CDA\u0001\u0CDB\u0001\u02E6\u0001\u0CDC\u0001\u0CDD\u0001\u0CD4\u0001\u0CDE\u0001\u0CDF\u0001\u0C9B\u0001\u1D6B\u0001\u1D6C\u0001\u0C98\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u01AB\u0001\t\u0001\u0CD2\u0001\u0C96\u0001\u0CD9\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0C85\u0001\u0C86\u0001\u0C7C\u0001\u0C87\u0001\u0C88\u0001\u02DE\u0001\u02E0\u0001\u0C87\u0001\t\u0001\u0C87\u0001\u0C7D\u0001\u0C8A\u0001\u0C8B\u0001\u0C8C\u0001\u0C8D\u0001\u0C8E\u0001\u0F42\u0001\u0F43\u0001\u0C8F\u0001\u02DE\u0001\u0C90\u0001\u0C91\u0001\u3296\u0001\u2FD8\u0001\u2FF0\u0001\u1CC3\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u01AB\u0001\t\u0001\u0C87\u0001\u0C96\u0001\u0C8C\u0001\t\u0001L\u0001\u0C9C\u0001\u02DA\u0001\u0C85\u0001\u0C86\u0001\u0C7C\u0001\u0C87\u0001\u0C88\u0001\u02DE\u0001\u0C89\u0001\u0C87\u0001\t\u0001\u0C87\u0001\u0C7D\u0001\u0C8A\u0001\u0C8B\u0001\u0C8C\u0001\u0C8D\u0001\u0C8E\u0001\u02E6\u0001\u02E7\u0001\u0C8F\u0001\u02DE\u0001\u0C90\u0001\u0C91\u0001\u1D08\u0001\u4470\u0001\u4471\u0001\u0C98\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u01AB\u0001\t\u0001\u0C87\u0001\u0C96\u0001\u0C8C\n\t\u0001\u436B\t\t\u0002\u0496\u0004\t\u0001\u079D\u0002\u0174\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0002\t\u0001\u0812\u0005\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0CCF\u0001\u0CD0\u0001\u0CD1\u0001\u0CD2\u0001\u0CD3\u0001\u0CD4\u0001\u4472\u0001\u0CD2\u0001\t\u0001\u0CD2\u0001\u0CD6\u0001\u0CD7\u0001\u0CD8\u0001\u0CD9\u0001\u0CDA\u0001\u0CDB\u0001\u0C74\u0001\u0CFD\u0001\u0CDD\u0001\u0CD4\u0001\u0CDE\u0001\u0CDF\u0001\u0C9B\u0001\u0CAA\u0001\u0CAB\u0001\u0C98\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u0816\u0001\t\u0001\u0CD2\u0001\u0C96\u0001\u0CD9\u0001\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u1CDA\u0001\u1CDB\u0001\u1CDC\u0001\u2D36\u0001\u1CDE\u0001\u1CDF\u0001\u1CE0\u0001\u1CE1\u0001\u04EE\u0001\u1CE2\u0001\u1CE3\u0001\u1CE4\u0001\u4473\u0001\u1CE6\u0001\u1CE7\u0001\u1CE8\u0001\u0CB2\u0001\u1CE9\u0001\u1CEA\u0001\u1CEB\u0001\u1CEC\u0001\u1CED\u0001\u0CB5\u0001\u02EC\u0001\u0CB6\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CB8\u0001L\u0001\u01AB\u0001\t\u0001\u2D36\u0001\u0CB8\u0001\u1CE6\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0CCF\u0001\u0CD0\u0001\u0CD1\u0001\u0CD2\u0001\u0CD3\u0001\u4474\u0001\u0CD5\u0001\u0CD2\u0001\t\u0001\u0CD2\u0001\u0CD6\u0001\u0CD7\u0001\u1D51\u0001\u0CD9\u0001\u0CDA\u0001\u0CDB\u0001\u02E6\u0001\u0CDC\u0001\u0CDD\u0001\u0CD4\u0001\u0CDE\u0001\u0CDF\u0001\u0C9B\u0001\u0C93\u0001\u0C94\u0001\u0C98\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u01AB\u0001\t\u0001\u0CD2\u0001\u0C96\u0001\u0CD9\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0CCF\u0001\u0CD0\u0001\u0CD1\u0001\u0CD2\u0001\u0CD3\u0001\u0CD4\u0001\u0CD5\u0001\u0CD2\u0001\t\u0001\u0CD2\u0001\u2D30\u0001\u0CD7\u0001\u0CD8\u0001\u0CD9\u0001\u0CDA\u0001\u0CDB\u0001\u02E6\u0001\u0CDC\u0001\u0CDD\u0001\u0CD4\u0001\u0CDE\u0001\u0CDF\u0001\u0C9B\u0001\u1ED7\u0001\u1D6C\u0001\u0C9E\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CA0\u0001L\u0001\u01AB\u0001\t\u0001\u0CD2\u0001\u0CA0\u0001\u0CD9\u0001\t\u0001L\u0001\u0CC1\u0001\u0C70\u0001\u02F2\u0001\u0CC5\u0001\u02F4\u0001\u0CC6\u0001\u0CC7\u0001\u02F5\u0001\u0CC8\u0001\u0CC6\u0001\t\u0001\u0CC6\u0001\u0CC9\u0001\u0CCA\u0001\u0CC6\u0001\u0CCB\u0001\u0CCC\u0001\u0CB1\u0001\u0CB2\u0001\u0CB3\u0001\u4475\u0001\u02F5\u0001\u0CCD\u0001\u0CCE\u0001\u1CC0\u0001\u0D75\u0001\u0D76\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CC4\u0001L\u0001\u01AB\u0001\t\u0001\u0CC6\u0001\u0CC4\u0001\u0CCB\u001A\t\u0001\u3446\u0002\u3FF4\u0001\t\u0001\u0000\u0001|\u0001\u0000\b\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u2514\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D48\u0001\u1CC7\u0001\u0D4A\u0001\u0D16\u0001\u0D4B\u0001\u1CD6\u0001\u1CD7\u0001\u0D18\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0CB5\u0001\u02EC\u0001\u0CB6\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u408A\u0001L\u0001\u01AB\u0001\t\u0001\u2514\u0001\u408A\u0001\u0D4A\u0001\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u1CDA\u0001\u1CDB\u0001\u1CDC\u0001\u2D36\u0001\u1CDE\u0001\u1CDF\u0001\u1CE0\u0001\u1CE1\u0001\u04EE\u0001\u1CE2\u0001\u1CE3\u0001\u1CE4\u0001\u1CE5\u0001\u1CE6\u0001\u1CE7\u0001\u1CE8\u0001\u0CB2\u0001\u1CE9\u0001\u1D62\u0001\u1CEB\u0001\u1CEC\u0001\u1CED\u0001\u0CB5\u0001\u02EC\u0001\u0CB6\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u408A\u0001L\u0001\u01AB\u0001\t\u0001\u2D36\u0001\u408A\u0001\u1CE6\u0001\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u2D37\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D48\u0001\u1CC7\u0001\u0D4A\u0001\u0D16\u0001\u0D4B\u0001\u0CB2\u0001\u0CB3\u0001\u0D18\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0CB5\u0001\u02EC\u0001\u0CB6\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u408A\u0001L\u0001\u01AB\u0001\t\u0001\u2D37\u0001\u408A\u0001\u0D4A\u0001\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u2514\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D48\u0001\u1CF0\u0001\u0D4A\u0001\u0D16\u0001\u0D4B\u0001\u0CB2\u0001\u0CB3\u0001\u0D18\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0CB5\u0001\u02EC\u0001\u0CB6\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u408A\u0001L\u0001\u01AB\u0001\t\u0001\u2514\u0001\u408A\u0001\u0D4A\u0001\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u0D47\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D48\u0001\u1CC7\u0001\u0D4A\u0001\u0D16\u0001\u0D4B\u0001\u1CD6\u0001\u1CD7\u0001\u0D18\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0CB5\u0001\u02EC\u0001\u0CB6\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u408A\u0001L\u0001\u01AB\u0001\t\u0001\u0D47\u0001\u408A\u0001\u0D4A\u0001\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u1CDA\u0001\u1CDB\u0001\u1CDC\u0001\u396D\u0001\u1CDE\u0001\u1CDF\u0001\u1CE0\u0001\u1CE1\u0001\u04EE\u0001\u1CE2\u0001\u1CE3\u0001\u1CE4\u0001\u1CE5\u0001\u1CE6\u0001\u1CE7\u0001\u1CE8\u0001\u0CB2\u0001\u1CE9\u0001\u1D62\u0001\u1CEB\u0001\u1CEC\u0001\u1CED\u0001\u0CB5\u0001\u02EC\u0001\u0CB6\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u408A\u0001L\u0001\u01AB\u0001\t\u0001\u396D\u0001\u408A\u0001\u1CE6\u0001\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u2D37\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D48\u0001\u1CC7\u0001\u0D4A\u0001\u0D16\u0001\u0D4B\u0001\u1CD6\u0001\u1CD7\u0001\u0D18\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0CB5\u0001\u02EC\u0001\u0CB6\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u408A\u0001L\u0001\u01AB\u0001\t\u0001\u2D37\u0001\u408A\u0001\u0D4A\u0001\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u3970\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D48\u0001\u1CC7\u0001\u0D4A\u0001\u0D16\u0001\u0D4B\u0001\u0CB2\u0001\u0CB3\u0001\u0D18\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0CB5\u0001\u02EC\u0001\u0CB6\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u408A\u0001L\u0001\u01AB\u0001\t\u0001\u3970\u0001\u408A\u0001\u0D4A\u0001\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u396F\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D48\u0001\u1CF0\u0001\u0D4A\u0001\u0D16\u0001\u0D4B\u0001\u0CB2\u0001\u0CB3\u0001\u0D18\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0CB5\u0001\u02EC\u0001\u0CB6\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u408A\u0001L\u0001\u01AB\u0001\t\u0001\u396F\u0001\u408A\u0001\u0D4A\u0001\t\u0001L\u0001\u02F1\u0001\u0D90\u0001\u2DF4\u0001\u2DF5\u0001\u2DF6\u0001\u2E2D\u0001\u2DF8\u0001\u2DF9\u0001\u2DFA\u0001\u2DFB\u0001\u04EE\u0001\u2DFC\u0001\u2DFD\u0001\u2DFE\u0001\u39C9\u0001\u2E00\u0001\u2E01\u0001\u2E02\u0001\u0CB2\u0001\u2E03\u0001\u2E04\u0001\u2E05\u0001\u2E06\u0001\u2E07\u0001\u1042\u0001\u2193\u0001\u2194\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u408A\u0001L\u0001\u01AB\u0001\t\u0001\u2E2D\u0001\u408A\u0001\u2E00\u0001\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u1CEF\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D48\u0001\u1CC7\u0001\u0D4A\u0001\u0D16\u0001\u0D4B\u0001\u0CB2\u0001\u0CB3\u0001\u0D18\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0CB5\u0001\u02EC\u0001\u0CB6\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u408A\u0001L\u0001\u01AB\u0001\t\u0001\u1CEF\u0001\u408A\u0001\u0D4A\u0001\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u396F\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D48\u0001\u1CC7\u0001\u0D4A\u0001\u0D16\u0001\u0D4B\u0001\u1CD6\u0001\u1CD7\u0001\u0D18\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0CB5\u0001\u02EC\u0001\u0CB6\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u408A\u0001L\u0001\u01AB\u0001\t\u0001\u396F\u0001\u408A\u0001\u0D4A\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0CCF\u0001\u0CD0\u0001\u0CD1\u0001\u0CD2\u0001\u0CD3\u0001\u0CD4\u0001\u4476\u0001\u0CD2\u0001\t\u0001\u0CD2\u0001\u0CD6\u0001\u0CD7\u0001\u0CD8\u0001\u0CD9\u0001\u0CDA\u0001\u0CDB\u0001\u02E6\u0001\u0CDC\u0001\u1D55\u0001\u0CD4\u0001\u0CDE\u0001\u0CDF\u0001\u0C9B\u0001\u0C93\u0001\u0C94\u0001\u0C98\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u01AB\u0001\t\u0001\u0CD2\u0001\u0C96\u0001\u0CD9\u0001\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u396F\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D48\u0001\u3ABF\u0001\u0D4A\u0001\u0D16\u0001\u0D4B\u0001\u0CB2\u0001\u0CB3\u0001\u0D18\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0CB5\u0001\u02EC\u0001\u0CB6\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CC4\u0001L\u0001\u01AB\u0001\t\u0001\u396F\u0001\u0CC4\u0001\u0D4A\u0006\t\u0001\u04A2\t\t\u0001\u4301\u0005\t\u0001\u174B\u0003\t\u0001\u12AD\u0002\u081E\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0001\u081F\u0004\t\u0001\u081F\u0002\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D4F\u0001\u0D0C\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D13\u0001\u4477\u0001\u0D4A\u0001\u0D16\u0001\u0D17\u0001\u0CB2\u0001\u0CB3\u0001\u1CCA\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u1CCB\u0001\u0CBD\u0001\u0CBE\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CBF\u0001L\u0001\u01AB\u0001\t\u0001\u0D0C\u0001\u0CBF\u0001\u0D4A\u0006\t\u0001\u04A2\t\t\u0001\u131A\u0005\t\u0001\u174B\u0003\t\u0001\u12AD\u0002\u081E\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0001\u081F\u0004\t\u0001\u081F\u0002\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u2514\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D48\u0001\u4478\u0001\u0D4A\u0001\u0D16\u0001\u0D4B\u0001\u0CB2\u0001\u0CB3\u0001\u1CC8\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0CB5\u0001\u02EC\u0001\u0CB6\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CC4\u0001L\u0001\u01AB\u0001\t\u0001\u2514\u0001\u0CC4\u0001\u0D4A\u0001\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u0D47\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D48\u0001\u1CF0\u0001\u0D4A\u0001\u0D16\u0001\u0D4B\u0001\u1CD6\u0001\u1CD7\u0001\u1CC8\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0CB5\u0001\u02EC\u0001\u0CB6\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CB8\u0001L\u0001\u01AB\u0001\t\u0001\u0D47\u0001\u0CB8\u0001\u0D4A\u0002\u0000\u0001\u0183\u000B\u0000\u0001\u436D\t\u0000\u0001\u0823\b\u0000\u0001\u02C4\u0004\u0000\u0001\u02C4\u0001\u0000\u0006\t\u0001\u04A2\t\t\u0001\u4479\u0005\t\u0001\u081D\u0003\t\u0001\u12AD\u0002\u081E\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0001\u081F\u0004\t\u0001\u081F\u0002\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D4F\u0001\u0D0C\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D13\u0001\u447A\u0001\u0D4A\u0001\u0D16\u0001\u0D17\u0001\u0CB2\u0001\u0CB3\u0001\u1CCA\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u1CCB\u0001\u0CBD\u0001\u0CBE\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CBF\u0001L\u0001\u01AB\u0001\t\u0001\u0D0C\u0001\u0CBF\u0001\u0D4A\u0001\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u2D37\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D48\u0001\u0D6E\u0001\u0D4A\u0001\u0D16\u0001\u0D4B\u0001\u1CD6\u0001\u1CD7\u0001\u0D18\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0CB5\u0001\u02EC\u0001\u0CB6\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CC4\u0001L\u0001\u01AB\u0001\t\u0001\u2D37\u0001\u0CC4\u0001\u0D4A\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0CCF\u0001\u0CD0\u0001\u0CD1\u0001\u0CD2\u0001\u0CD3\u0001\u0CD4\u0001\u2F96\u0001\u0CD2\u0001\t\u0001\u0CD2\u0001\u0CD6\u0001\u0CD7\u0001\u0CD8\u0001\u0CD9\u0001\u0CDA\u0001\u0CDB\u0001\u02E6\u0001\u0CDC\u0001\u0CDD\u0001\u0CD4\u0001\u0CDE\u0001\u0CDF\u0001\u1CCF\u0001\u0C81\u0001\u1CCD\u0001\u0C98\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u1D04\u0001L\u0001\u01AB\u0001\t\u0001\u0CD2\u0001\u1D04\u0001\u0CD9\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u2D38\u0001\u2D39\u0001\u2D3A\u0001\u2D3B\u0001\u2D3C\u0001\u2D3D\u0001\u2D3E\u0001\u2D3B\u0001\t\u0001\u2D3B\u0001\u2D57\u0001\u2D40\u0001\u2D41\u0001\u2D42\u0001\u2D43\u0001\u2D58\u0001\u0CB2\u0001\u2D59\u0001\u2D46\u0001\u2D3D\u0001\u2D47\u0001\u2D48\u0001\u1CCE\u0001\u2080\u0001\u2081\u0001\u0C98\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u01AB\u0001\t\u0001\u2D3B\u0001\u0C96\u0001\u2D42\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0C85\u0001\u0C86\u0001\u0C7C\u0001\u0C87\u0001\u0C88\u0001\u02DE\u0001\u0C89\u0001\u0C87\u0001\t\u0001\u0C87\u0001\u0C7D\u0001\u0C8A\u0001\u0C8B\u0001\u0C8C\u0001\u0C8D\u0001\u0C8E\u0001\u02E6\u0001\u02E7\u0001\u447B\u0001\u02DE\u0001\u0C90\u0001\u0C91\u0001\u1D09\u0001\u0C81\u0001\u1CCD\u0001\u0C9E\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u01AB\u0001\t\u0001\u0C87\u0001\u0C96\u0001\u0C8C\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0C85\u0001\u0C86\u0001\u0C7C\u0001\u0C87\u0001\u0C88\u0001\u02DE\u0001\u0C89\u0001\u0C87\u0001\t\u0001\u0C87\u0001\u0C7D\u0001\u0C8A\u0001\u0C8B\u0001\u0C8C\u0001\u0C8D\u0001\u0C8E\u0001\u02E6\u0001\u02E7\u0001\u0C8F\u0001\u02DE\u0001\u0C90\u0001\u0C91\u0001\u1D09\u0001\u0C93\u0001\u0C94\u0001\u0C9E\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u01AB\u0001\t\u0001\u0C87\u0001\u0C96\u0001\u0C8C\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0CCF\u0001\u0CD0\u0001\u0CD1\u0001\u0CD2\u0001\u0CD3\u0001\u0CD4\u0001\u0CD5\u0001\u0CD2\u0001\t\u0001\u0CD2\u0001\u0CD6\u0001\u1D50\u0001\u0CD8\u0001\u0CD9\u0001\u0CDA\u0001\u0CDB\u0001\u02E6\u0001\u0CDC\u0001\u0CDD\u0001\u0CD4\u0001\u0CDE\u0001\u0CDF\u0001\u0CA1\u0001\u1CFE\u0001\u1CFF\u0001\u0C9E\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u3B70\u0001L\u0001\u01AB\u0001\t\u0001\u0CD2\u0001\u3B70\u0001\u0CD9\n\t\u0001\u0495\t\t\u0002\u0496\u0005\t\u0002\u0174\u0001\t\u0001\u0000\u0001\u436F\u0001\u0000\u0002\t\u0001\u0812\u0005\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0C85\u0001\u0C86\u0001\u0C7C\u0001\u0C87\u0001\u0C88\u0001\u02DE\u0001\u0CA8\u0001\u0C87\u0001\t\u0001\u0C87\u0001\u0C7D\u0001\u0C8A\u0001\u0C8B\u0001\u0C8C\u0001\u0C8D\u0001\u0C8E\u0001\u0C74\u0001\u0CA9\u0001\u0C8F\u0001\u02DE\u0001\u0C90\u0001\u0C91\u0001\u1D0C\u0001\u0CAA\u0001\u0CAB\u0001\u0C98\u0001\u0000\u0001\u447C\u0001\u0000\u0001\u0C96\u0001L\u0001\u0816\u0001\t\u0001\u0C87\u0001\u0C96\u0001\u0C8C\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0CCF\u0001\u0CD0\u0001\u0CD1\u0001\u1206\u0001\u0CD3\u0001\u0CD4\u0001\u0CD5\u0001\u0CD2\u0001\t\u0001\u0CD2\u0001\u0CFB\u0001\u0CD7\u0001\u0CD8\u0001\u0CD9\u0001\u0CDA\u0001\u0CDB\u0001\u0CB2\u0001\u1256\u0001\u0CDD\u0001\u0CD4\u0001\u0CDE\u0001\u0CDF\u0001\u1CCE\u0001\u0C81\u0001\u1CCD\u0001\u0C98\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u01AB\u0001\t\u0001\u1206\u0001\u0C96\u0001\u0CD9\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0CCF\u0001\u0CD0\u0001\u0CD1\u0001\u0CD2\u0001\u0CD3\u0001\u0CD4\u0001\u0CD5\u0001\u0CD2\u0001\t\u0001\u0CD2\u0001\u2D30\u0001\u0CD7\u0001\u0CD8\u0001\u0CD9\u0001\u0CDA\u0001\u0CDB\u0001\u02E6\u0001\u0CDC\u0001\u0CDD\u0001\u0CD4\u0001\u0CDE\u0001\u0CDF\u0001\u0C9B\u0001\u0C9F\u0001\u0C94\u0001\u0C9E\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u447D\u0001L\u0001\u01AB\u0001\t\u0001\u0CD2\u0001\u447D\u0001\u0CD9\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0C85\u0001\u0C86\u0001\u0C7C\u0001\u0C87\u0001\u0C88\u0001\u02DE\u0001\u02E0\u0001\u0C87\u0001\t\u0001\u0C87\u0001\u0C7D\u0001\u0C8A\u0001\u0C8B\u0001\u0C8C\u0001\u0C8D\u0001\u0C8E\u0001\u02E6\u0001\u02E7\u0001\u0C8F\u0001\u02DE\u0001\u0C90\u0001\u0C91\u0001\u2D91\u0001\u312B\u0001\u312C\u0001\u1CC3\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u01AB\u0001\t\u0001\u0C87\u0001\u0C96\u0001\u0C8C\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0CCF\u0001\u0CD0\u0001\u0CD1\u0001\u0CD2\u0001\u0CD3\u0001\u0CD4\u0001\u0CE1\u0001\u0CD2\u0001\u1611\u0001\u232E\u0001\u0CD6\u0001\u0CD7\u0001\u0CD8\u0001\u0CD9\u0001\u0CDA\u0001\u0CDB\u0001\u02E6\u0001\u0CDC\u0001\u0CE2\u0001\u0CD4\u0001\u0CDE\u0001\u0CDF\u0001\u0C9B\u0001\u0C93\u0001\u0C94\u0001\u0C98\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u01AB\u0001\t\u0001\u0CD2\u0001\u0C96\u0001\u0CD9\u0001\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0CC5\u0001\u02F4\u0001\u0CC6\u0001\u0CC7\u0001\u02F5\u0001\u0CC8\u0001\u0CC6\u0001\t\u0001\u0CC6\u0001\u0CC9\u0001\u0CCA\u0001\u0D08\u0001\u0CCB\u0001\u0CCC\u0001\u0CB1\u0001\u0CB2\u0001\u0CB3\u0001\u0CB4\u0001\u02F5\u0001\u0CCD\u0001\u0CCE\u0001\u1CBD\u0001\u447E\u0001\u447F\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CB8\u0001L\u0001\u01AB\u0001\t\u0001\u0CC6\u0001\u0CB8\u0001\u0CCB\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0C85\u0001\u0C86\u0001\u0C7C\u0001\u0C87\u0001\u0C88\u0001\u02DE\u0001\u02E0\u0001\u0C87\u0001\t\u0001\u0C87\u0001\u0C7D\u0001\u0C8A\u0001\u0C8B\u0001\u0C8C\u0001\u0C8D\u0001\u0C8E\u0001\u02E6\u0001\u02E7\u0001\u0C8F\u0001\u02DE\u0001\u0C90\u0001\u0C91\u0001\u23FB\u0001\u23FC\u0001\u23FD\u0001\u1CC3\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u01AB\u0001\t\u0001\u0C87\u0001\u0C96\u0001\u0C8C\u0002\u0000\u0001\u0183\u0004\u0000\u0001\u4306\u0010\u0000\u0001\u0823\b\u0000\u0001\u02C4\u0003\u0000\u0001\u4306\u0001\u02C4\u0001\u0000\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0C85\u0001\u0C86\u0001\u0C7C\u0001\u0C87\u0001\u0C88\u0001\u02DE\u0001\u0C89\u0001\u0C87\u0001\t\u0001\u0C87\u0001\u0C7D\u0001\u0C8A\u0001\u0C8B\u0001\u0C8C\u0001\u0C8D\u0001\u0C8E\u0001\u02E6\u0001\u02E7\u0001\u0C8F\u0001\u02DE\u0001\u0C90\u0001\u0C91\u0001\u1D07\u0001\u0C93\u0001\u0C94\u0001\u0C98\u0001\u0000\u0001\u4480\u0001\u0000\u0001\u0C96\u0001L\u0001\u01AB\u0001\t\u0001\u0C87\u0001\u0C96\u0001\u0C8C\u0001\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u3347\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D48\u0001\u1CF0\u0001\u0D4A\u0001\u0D16\u0001\u0D4B\u0001\u0CB2\u0001\u0CB3\u0001\u1CC8\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0CB5\u0001\u02EC\u0001\u0CB6\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CB8\u0001L\u0001\u01AB\u0001\t\u0001\u3347\u0001\u0CB8\u0001\u0D4A\u0006\t\u0001\u04A2\t\t\u0001\u2865\u0003\t\u0002\u12CC\u0001\u081D\u0003\t\u0001\u12AD\u0002\u081E\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0001\u081F\u0004\t\u0001\u081F\u0002\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D4F\u0001\u0D0C\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D13\u0001\u3348\u0001\u0D4A\u0001\u0D16\u0001\u0D17\u0001\u1CF1\u0001\u0CB3\u0001\u1CCA\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u1CCB\u0001\u0CBD\u0001\u0CBE\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CBF\u0001L\u0001\u01AB\u0001\t\u0001\u0D0C\u0001\u0CBF\u0001\u0D4A\u0001\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u2D37\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u41AB\u0001\u0D48\u0001\u1CC7\u0001\u0D4A\u0001\u0D16\u0001\u0D4B\u0001\u1CD6\u0001\u1CD7\u0001\u1CC8\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0CB5\u0001\u02EC\u0001\u0CB6\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CB8\u0001L\u0001\u01AB\u0001\t\u0001\u2D37\u0001\u0CB8\u0001\u0D4A\u0001\t\u0001L\u0001\u0CC1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u0D0C\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D13\u0001\u4481\u0001\u0D4A\u0001\u0D16\u0001\u0D17\u0001\u0CB2\u0001\u0CB3\u0001\u0D56\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0CC3\u0001\u02EC\u0001\u0CB6\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CC4\u0001L\u0001\u01AB\u0001\t\u0001\u0D0C\u0001\u0CC4\u0001\u0D4A\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0CCF\u0001\u0CD0\u0001\u0CD1\u0001\u0CD2\u0001\u0CD3\u0001\u0CD4\u0001\u0D01\u0001\u0CD2\u0001\t\u0001\u0CD2\u0001\u0CD6\u0001\u0CD7\u0001\u0CD8\u0001\u0CD9\u0001\u0CDA\u0001\u0CDB\u0001\u02E6\u0001\u0CDC\u0001\u3248\u0001\u0CD4\u0001\u0CDE\u0001\u0CDF\u0001\u1CCF\u0001\u1E43\u0001\u1E44\u0001\u0C98\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u01AB\u0001\t\u0001\u0CD2\u0001\u0C96\u0001\u0CD9\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0CCF\u0001\u0CD0\u0001\u0CD1\u0001\u1D4D\u0001\u0CD3\u0001\u0CD4\u0001\u0CD5\u0001\u0CD2\u0001\t\u0001\u0CD2\u0001\u0CD6\u0001\u0CD7\u0001\u0CD8\u0001\u0CD9\u0001\u0CDA\u0001\u0CDB\u0001\u02E6\u0001\u0CDC\u0001\u0CDD\u0001\u0CD4\u0001\u0CDE\u0001\u0CDF\u0001\u0C9B\u0001\u0C93\u0001\u0C94\u0001\u0C98\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u1F0D\u0001L\u0001\u01AB\u0001\t\u0001\u1D4D\u0001\u1F0D\u0001\u0CD9\u0006\t\u0001\u04A2\u0001\u15D9\b\t\u0001\u051F\u0005\t\u0001\u174B\u0003\t\u0001\u12AD\u0002\u081E\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0001\u081F\u0003\t\u0001\u15D9\u0001\u081F\u0002\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D4F\u0001\u22D2\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D13\u0001\u1CD8\u0001\u0D4A\u0001\u0D16\u0001\u0D17\u0001\u0CB2\u0001\u0CB3\u0001\u1CCA\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u1CCB\u0001\u0CBD\u0001\u0CBE\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CBF\u0001L\u0001\u01AB\u0001\t\u0001\u22D2\u0001\u0CBF\u0001\u0D4A\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0C85\u0001\u0C86\u0001\u0C7C\u0001\u0C87\u0001\u0C88\u0001\u02DE\u0001\u02E0\u0001\u0C87\u0001\t\u0001\u0C87\u0001\u0C7D\u0001\u0C8A\u0001\u0C8B\u0001\u0C8C\u0001\u0C8D\u0001\u0C8E\u0001\u02E6\u0001\u02E7\u0001\u0C8F\u0001\u02DE\u0001\u0C90\u0001\u0C91\u0001\u2D91\u0001\u4482\u0001\u4483\u0001\u1CC3\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u01AB\u0001\t\u0001\u0C87\u0001\u0C96\u0001\u0C8C\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0CCF\u0001\u0CD0\u0001\u0CD1\u0001\u0CD2\u0001\u0CD3\u0001\u0CD4\u0001\u0CD5\u0001\u0CD2\u0001\t\u0001\u0CD2\u0001\u0CD6\u0001\u0CD7\u0001\u0CD8\u0001\u0CD9\u0001\u0CDA\u0001\u0CDB\u0001\u4484\u0001\u4485\u0001\u0CDD\u0001\u0CD4\u0001\u0CDE\u0001\u0CDF\u0001\u1CCF\u0001\u0C81\u0001\u1CCD\u0001\u0C98\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u01AB\u0001\t\u0001\u0CD2\u0001\u0C96\u0001\u0CD9\u0001\t\u0001L\u0001\u0CC1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u4486\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D13\u0001\u1CC2\u0001\u0D4A\u0001\u0D16\u0001\u0D17\u0001\u0CB2\u0001\u0CB3\u0001\u0D56\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0CC3\u0001\u02EC\u0001\u0CB6\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CC4\u0001L\u0001\u01AB\u0001\t\u0001\u4486\u0001\u0CC4\u0001\u0D4A\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0CCF\u0001\u0CD0\u0001\u0CD1\u0001\u0CD2\u0001\u0CD3\u0001\u0CD4\u0001\u0CD5\u0001\u0CD2\u0001\t\u0001\u0CD2\u0001\u0CD6\u0001\u1D50\u0001\u0CD8\u0001\u0CD9\u0001\u0CDA\u0001\u0CDB\u0001\u02E6\u0001\u0CDC\u0001\u0CDD\u0001\u0CD4\u0001\u0CDE\u0001\u0CDF\u0001\u3B42\u0001\u1CFE\u0001\u1CFF\u0001\u0C9E\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u01AB\u0001\t\u0001\u0CD2\u0001\u0C96\u0001\u0CD9\u0001\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u396F\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D48\u0001\u1CC7\u0001\u0D4A\u0001\u0D16\u0001\u0D4B\u0001\u397C\u0001\u397D\u0001\u1CC8\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0CB5\u0001\u02EC\u0001\u0CB6\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u408A\u0001L\u0001\u01AB\u0001\t\u0001\u396F\u0001\u408A\u0001\u0D4A\u0001\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u2514\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D48\u0001\u1CC7\u0001\u0D4A\u0001\u0D16\u0001\u0D4B\u0001\u0CB2\u0001\u0CB3\u0001\u3A83\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0CB5\u0001\u02EC\u0001\u0CB6\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u408A\u0001L\u0001\u01AB\u0001\t\u0001\u2514\u0001\u408A\u0001\u0D4A\u0001\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u4487\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D48\u0001\u1CC7\u0001\u0D4A\u0001\u0D16\u0001\u0D4B\u0001\u4488\u0001\u4489\u0001\u1CC8\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0CB5\u0001\u02EC\u0001\u0CB6\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CB8\u0001L\u0001\u01AB\u0001\t\u0001\u4487\u0001\u0CB8\u0001\u0D4A\u0001\t\u0001L\u0001\u0CC1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u0D0C\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D13\u0001\u1CC2\u0001\u0D4A\u0001\u0D16\u0001\u0D17\u0001\u0CB2\u0001\u0CB3\u0001\u0D56\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u448A\u0001\u02EC\u0001\u0CB6\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CC4\u0001L\u0001\u01AB\u0001\t\u0001\u0D0C\u0001\u0CC4\u0001\u0D4A\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0CCF\u0001\u0CD0\u0001\u0CD1\u0001\u0CD2\u0001\u0CD3\u0001\u0CD4\u0001\u0CD5\u0001\u0CD2\u0001\t\u0001\u0CD2\u0001\u0CFB\u0001\u0CD7\u0001\u0CD8\u0001\u0CD9\u0001\u0CDA\u0001\u0CDB\u0001\u02E6\u0001\u0CDC\u0001\u0CDD\u0001\u0CD4\u0001\u0CDE\u0001\u0CDF\u0001\u0C9B\u0001\u448B\u0001\u448C\u0001\u0C9E\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CA0\u0001L\u0001\u01AB\u0001\t\u0001\u0CD2\u0001\u0CA0\u0001\u0CD9\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0C85\u0001\u0C86\u0001\u0C7C\u0001\u0C87\u0001\u0C88\u0001\u02DE\u0001\u0C89\u0001\u0C87\u0001\t\u0001\u0C87\u0001\u0C7D\u0001\u0C8A\u0001\u0C8B\u0001\u0C8C\u0001\u0C8D\u0001\u0C8E\u0001\u02E6\u0001\u02E7\u0001\u0C8F\u0001\u02DE\u0001\u0C90\u0001\u0C91\u0001\u1CD1\u0001\u1CD2\u0001\u1CD3\u0001\u0C9E\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u24F6\u0001L\u0001\u01AB\u0001\t\u0001\u0C87\u0001\u24F6\u0001\u0C8C\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0CCF\u0001\u0CD0\u0001\u0CD1\u0001\u0CD2\u0001\u0CD3\u0001\u448D\u0001\u0CD5\u0001\u0CD2\u0001\t\u0001\u0CD2\u0001\u0CD6\u0001\u0CD7\u0001\u1D51\u0001\u0CD9\u0001\u0CDA\u0001\u0CDB\u0001\u02E6\u0001\u0CDC\u0001\u0CDD\u0001\u0CD4\u0001\u0CDE\u0001\u0CDF\u0001\u0C9B\u0001\u0C93\u0001\u0C94\u0001\u0C98\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u01AB\u0001\t\u0001\u0CD2\u0001\u0C96\u0001\u0CD9\u0001\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u1CDA\u0001\u1CDB\u0001\u1CDC\u0001\u2D36\u0001\u1CDE\u0001\u1CDF\u0001\u1CE0\u0001\u1CE1\u0001\u04EE\u0001\u1CE2\u0001\u1CE3\u0001\u1CE4\u0001\u448E\u0001\u1CE6\u0001\u1CE7\u0001\u1CE8\u0001\u0CB2\u0001\u1CE9\u0001\u1CEA\u0001\u1CEB\u0001\u1CEC\u0001\u1CED\u0001\u0CB5\u0001\u02EC\u0001\u0CB6\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CB8\u0001L\u0001\u01AB\u0001\t\u0001\u2D36\u0001\u0CB8\u0001\u1CE6\n\t\u0001\u0495\t\t\u0002\u0496\u0004\t\u0001\u2985\u0002\u0174\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0002\t\u0001\u0812\u0005\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0CCF\u0001\u0CD0\u0001\u0CD1\u0001\u0CD2\u0001\u0CD3\u0001\u0CD4\u0001\u0CFC\u0001\u0CD2\u0001\t\u0001\u0CD2\u0001\u0CD6\u0001\u0CD7\u0001\u0CD8\u0001\u0CD9\u0001\u0CDA\u0001\u0CDB\u0001\u0C74\u0001\u0CFD\u0001\u0CDD\u0001\u0CD4\u0001\u0CDE\u0001\u0CDF\u0001\u1EEE\u0001\u0CAA\u0001\u0CAB\u0001\u0C98\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u0816\u0001\t\u0001\u0CD2\u0001\u0C96\u0001\u0CD9\u0006\t\u0001\u04A2\t\t\u0001\u4313\u0005\t\u0001\u081D\u0003\t\u0001\u12AD\u0002\u081E\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0001\u081F\u0004\t\u0001\u081F\u0002\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D4F\u0001\u0D0C\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D13\u0001\u448F\u0001\u0D4A\u0001\u0D16\u0001\u0D17\u0001\u0CB2\u0001\u0CB3\u0001\u1CCA\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u1CCB\u0001\u1CBE\u0001\u1CBF\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CBF\u0001L\u0001\u01AB\u0001\t\u0001\u0D0C\u0001\u0CBF\u0001\u0D4A\u0001\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0CC5\u0001\u02F4\u0001\u4490\u0001\u0CC7\u0001\u02F5\u0001\u0CC8\u0001\u0CC6\u0001\t\u0001\u0CC6\u0001\u0CC9\u0001\u0D05\u0001\u0D06\u0001\u0CCB\u0001\u0CCC\u0001\u0CB1\u0001\u4491\u0001\u4492\u0001\u0CB4\u0001\u02F5\u0001\u0CCD\u0001\u0CCE\u0001\u0CB5\u0001\u0D75\u0001\u0D76\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CB8\u0001L\u0001\u01AB\u0001\t\u0001\u4490\u0001\u0CB8\u0001\u0CCB\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0CCF\u0001\u0CD0\u0001\u0CD1\u0001\u0CD2\u0001\u0CD3\u0001\u2D32\u0001\u0CD5\u0001\u0CD2\u0001\t\u0001\u0CD2\u0001\u0CD6\u0001\u0CD7\u0001\u1D51\u0001\u0CD9\u0001\u0CDA\u0001\u0CDB\u0001\u02E6\u0001\u0CDC\u0001\u0CDD\u0001\u0CD4\u0001\u0CDE\u0001\u0CDF\u0001\u1CCF\u0001\u0C93\u0001\u0C94\u0001\u0C98\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u01AB\u0001\t\u0001\u0CD2\u0001\u0C96\u0001\u0CD9\u0001\t\u0001L\u0001\u3198\u0001\u0C70\u0001\u1CDA\u0001\u1CDB\u0001\u1CDC\u0001\u2D36\u0001\u1CDE\u0001\u1CDF\u0001\u1CE0\u0001\u1CE1\u0001\u04EE\u0001\u1CE2\u0001\u1CE3\u0001\u1CE4\u0001\u1CE5\u0001\u1CE6\u0001\u1CE7\u0001\u1CE8\u0001\u0CB2\u0001\u1CE9\u0001\u1CEA\u0001\u1CEB\u0001\u1CEC\u0001\u1CED\u0001\u0CB5\u0001\u02EC\u0001\u0CB6\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CB8\u0001L\u0001\u01AB\u0001\t\u0001\u2D36\u0001\u0CB8\u0001\u1CE6\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0C85\u0001\u0C86\u0001\u0C7C\u0001\u0C87\u0001\u0C88\u0001\u02DE\u0001\u0C89\u0001\u0C87\u0001\t\u0001\u0C87\u0001\u0C7D\u0001\u0C8A\u0001\u0C8B\u0001\u0C8C\u0001\u0C8D\u0001\u0C8E\u0001\u02E6\u0001\u02E7\u0001\u0C8F\u0001\u02DE\u0001\u0C90\u0001\u0C91\u0001\u4493\u0001\u1CFA\u0001\u1CCD\u0001\u1CC5\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CA0\u0001L\u0001\u01AB\u0001\t\u0001\u0C87\u0001\u0CA0\u0001\u0C8C\u0007\t\u0001\u4494\u0016\t\u0001\u0000\u0001|\u0001\u0000\u0004\t\u0001\u4494\u0003\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0CCF\u0001\u0CD0\u0001\u0CD1\u0001\u4495\u0001\u0CD3\u0001\u0CD4\u0001\u0CD5\u0001\u0CD2\u0001\t\u0001\u0CD2\u0001\u0CD6\u0001\u0CD7\u0001\u1D51\u0001\u0CD9\u0001\u0CDA\u0001\u0CDB\u0001\u02E6\u0001\u0CDC\u0001\u0CDD\u0001\u0CD4\u0001\u0CDE\u0001\u0CDF\u0001\u1CCF\u0001\u1D49\u0001\u1D4A\u0001\u0C98\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u01AB\u0001\t\u0001\u4495\u0001\u0C96\u0001\u0CD9\u0006\t\u0001\u04A2\t\t\u0001\u12AC\u0005\t\u0001\u081D\u0003\t\u0001\u12AD\u0002\u081E\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0001\u4380\u0004\t\u0001\u4380\u0002\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D4F\u0001\u0D0C\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D13\u0001\u1CC9\u0001\u0D4A\u0001\u0D16\u0001\u0D17\u0001\u0CB2\u0001\u0CB3\u0001\u1CCA\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u1CCB\u0001\u0CBD\u0001\u0CBE\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u4496\u0001L\u0001\u01AB\u0001\t\u0001\u0D0C\u0001\u4496\u0001\u0D4A\u0001\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u0D0C\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D13\u0001\u2DB9\u0001\u0D4A\u0001\u0D16\u0001\u0D4B\u0001\u0CB2\u0001\u0CB3\u0001\u0D18\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0D74\u0001\u0D75\u0001\u0D76\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CB8\u0001L\u0001\u01AB\u0001\t\u0001\u0D0C\u0001\u0CB8\u0001\u0D4A\u0001\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u0D0C\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D13\u0001\u1CCC\u0001\u0D4A\u0001\u0D16\u0001\u0D4B\u0001\u0CB2\u0001\u0CB3\u0001\u0D18\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0D74\u0001\u0D75\u0001\u0D76\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u4497\u0001L\u0001\u01AB\u0001\t\u0001\u0D0C\u0001\u4497\u0001\u0D4A\u0001\t\u0001L\u0001\u0CC1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u0D0C\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D13\u0001\u1CCC\u0001\u0D4A\u0001\u0D16\u0001\u0D4B\u0001\u121C\u0001\u121D\u0001\u0D18\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0D74\u0001\u0D75\u0001\u0D76\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CB8\u0001L\u0001\u01AB\u0001\t\u0001\u0D0C\u0001\u0CB8\u0001\u0D4A\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0CCF\u0001\u0CD0\u0001\u0CD1\u0001\u0CD2\u0001\u0CD3\u0001\u0CD4\u0001\u0CD5\u0001\u0CD2\u0001\t\u0001\u0CD2\u0001\u0CD6\u0001\u0CD7\u0001\u1D51\u0001\u0CD9\u0001\u0CDA\u0001\u0CDB\u0001\u0CB2\u0001\u1256\u0001\u0CDD\u0001\u0CD4\u0001\u0CDE\u0001\u0CDF\u0001\u1CCF\u0001\u4498\u0001\u4499\u0001\u0C98\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u01AB\u0001\t\u0001\u0CD2\u0001\u0C96\u0001\u0CD9\u0006\t\u0001\u3028\t\t\u0001\u12AC\u0005\t\u0001\u081D\u0003\t\u0001\u12AD\u0002\u081E\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0001\u081F\u0004\t\u0001\u081F\u0002\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0CCF\u0001\u0CD0\u0001\u0CD1\u0001\u0CD2\u0001\u0CD3\u0001\u0CD4\u0001\u0CD5\u0001\u0CD2\u0001\t\u0001\u0CD2\u0001\u0CFB\u0001\u0CD7\u0001\u0CD8\u0001\u0CD9\u0001\u0CDA\u0001\u1D54\u0001\u449A\u0001\u449B\u0001\u0CDD\u0001\u0CD4\u0001\u0CDE\u0001\u0CDF\u0001\u1CCE\u0001\u0C81\u0001\u1CCD\u0001\u0C98\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u01AB\u0001\t\u0001\u0CD2\u0001\u0C96\u0001\u0CD9\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0C85\u0001\u0C86\u0001\u0C7C\u0001\u0C87\u0001\u0C88\u0001\u02DE\u0001\u0C99\u0001\u0C87\u0001\t\u0001\u0C87\u0001\u0C7D\u0001\u0C8A\u0001\u0C8B\u0001\u0C8C\u0001\u0C8D\u0001\u0C8E\u0001\u02E6\u0001\u02E7\u0001\u0C9A\u0001\u02DE\u0001\u0C90\u0001\u0C91\u0001\u449C\u0001\u0C93\u0001\u0C94\u0001\u1CC3\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u01AB\u0001\t\u0001\u0C87\u0001\u0C96\u0001\u0C8C\u0001\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u449D\u0001\u0D0B\u0001\u0D0C\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D13\u0001\u1CCC\u0001\u0D4A\u0001\u0D16\u0001\u0D4B\u0001\u0CB2\u0001\u0CB3\u0001\u0D18\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0D74\u0001\u0D75\u0001\u0D76\u0001\u0CB7\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CB8\u0001L\u0001\u01AB\u0001\t\u0001\u0D0C\u0001\u0CB8\u0001\u0D4A\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0C85\u0001\u0C86\u0001\u0C7C\u0001\u0C87\u0001\u0C88\u0001\u02DE\u0001\u02E0\u0001\u0C87\u0001\t\u0001\u0C87\u0001\u0C7D\u0001\u0C8A\u0001\u0C8B\u0001\u0C8C\u0001\u0C8D\u0001\u0C8E\u0001\u02E6\u0001\u02E7\u0001\u0C8F\u0001\u02DE\u0001\u0C90\u0001\u0C91\u0001\u1D08\u0001\u449E\u0001\u449F\u0001\u1CC3\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u44A0\u0001L\u0001\u01AB\u0001\t\u0001\u0C87\u0001\u44A0\u0001\u0C8C\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0C85\u0001\u0C86\u0001\u0C7C\u0001\u0C87\u0001\u0C88\u0001\u02DE\u0001\u02E0\u0001\u0C87\u0001\t\u0001\u0C87\u0001\u0C7D\u0001\u0C8A\u0001\u0C8B\u0001\u0C8C\u0001\u0C8D\u0001\u0C8E\u0001\u02E6\u0001\u02E7\u0001\u0C8F\u0001\u02DE\u0001\u0C90\u0001\u0C91\u0001\u2D91\u0001\u44A1\u0001\u44A2\u0001\u1CC3\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u01AB\u0001\t\u0001\u0C87\u0001\u0C96\u0001\u0C8C\u0007\t\u0001\u1452\f\t\u0002\u185A\b\t\u0001\u0000\u0001|\u0001\u0000\u0004\t\u0001\u1452\u0003\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0CCF\u0001\u0CD0\u0001\u0CD1\u0001\u0CD2\u0001\u0CD3\u0001\u0CD4\u0001\u0CD5\u0001\u0CD2\u0001\t\u0001\u0CD2\u0001\u0CFB\u0001\u0CD7\u0001\u0CD8\u0001\u0CD9\u0001\u0CDA\u0001\u0CDB\u0001\u0CB2\u0001\u1256\u0001\u0CDD\u0001\u0CD4\u0001\u0CDE\u0001\u0CDF\u0001\u3D42\u0001\u23FC\u0001\u23FD\u0001\u0C98\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u01AB\u0001\t\u0001\u0CD2\u0001\u0C96\u0001\u0CD9\n\t\u0001\u0495\t\t\u0002\u0496\u0001\u438F\u0003\t\u0001\u079D\u0002\u0174\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0002\t\u0001\u0812\u0005\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0CCF\u0001\u0CD0\u0001\u0CD1\u0001\u0CD2\u0001\u0CD3\u0001\u0CD4\u0001\u0CFC\u0001\u0CD2\u0001\t\u0001\u0CD2\u0001\u0CD6\u0001\u0CD7\u0001\u0CD8\u0001\u0CD9\u0001\u0CDA\u0001\u0CDB\u0001\u0C74\u0001\u0CFD\u0001\u44A3\u0001\u0CD4\u0001\u0CDE\u0001\u0CDF\u0001\u0C9B\u0001\u0CAA\u0001\u0CAB\u0001\u0C98\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u0816\u0001\t\u0001\u0CD2\u0001\u0C96\u0001\u0CD9\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u2D38\u0001\u2D39\u0001\u2D3A\u0001\u2D3B\u0001\u2D3C\u0001\u2D3D\u0001\u2D5C\u0001\u2D3B\u0001\t\u0001\u2D3B\u0001\u2D3F\u0001\u2D40\u0001\u2D41\u0001\u2D42\u0001\u2D43\u0001\u2D44\u0001\u02E6\u0001\u2D45\u0001\u2D5D\u0001\u2D3D\u0001\u2D47\u0001\u2D48\u0001\u44A4\u0001\u0C81\u0001\u1CCD\u0001\u0C98\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u01AB\u0001\t\u0001\u2D3B\u0001\u0C96\u0001\u2D42\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0CCF\u0001\u0CD0\u0001\u0CD1\u0001\u0CD2\u0001\u0CD3\u0001\u0CD4\u0001\u0CD5\u0001\u0CD2\u0001\t\u0001\u0CD2\u0001\u2D30\u0001\u0CD7\u0001\u0CD8\u0001\u0CD9\u0001\u0CDA\u0001\u0CDB\u0001\u02E6\u0001\u0CDC\u0001\u1244\u0001\u0CD4\u0001\u0CDE\u0001\u0CDF\u0001\u0C9B\u0001\u0C9F\u0001\u0C94\u0001\u0C9E\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0CA0\u0001L\u0001\u01AB\u0001\t\u0001\u0CD2\u0001\u0CA0\u0001\u0CD9\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0CCF\u0001\u0CD0\u0001\u0CD1\u0001\u0CD2\u0001\u0CD3\u0001\u0CD4\u0001\u0CD5\u0001\u0CD2\u0001\t\u0001\u0CD2\u0001\u0CD6\u0001\u0CD7\u0001\u0CD8\u0001\u0CD9\u0001\u0CDA\u0001\u0CDB\u0001\u02E6\u0001\u0CDC\u0001\u0CDD\u0001\u1D4D\u0001\u0CDE\u0001\u0CDF\u0001\u44A5\u0001\u0C93\u0001\u0C94\u0001\u0C98\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u01AB\u0001\t\u0001\u0CD2\u0001\u0C96\u0001\u0CD9\u0001\t\u0001L\u0001\u0C7A\u0001\u02DA\u0001\u0C85\u0001\u0C86\u0001\u0C7C\u0001\u0C87\u0001\u0C88\u0001\u02DE\u0001\u02E0\u0001\u0C87\u0001\t\u0001\u0C87\u0001\u0C7D\u0001\u0C8A\u0001\u0C8B\u0001\u0C8C\u0001\u0C8D\u0001\u0C8E\u0001\u20F1\u0001\u2490\u0001\u0C8F\u0001\u02DE\u0001\u0C90\u0001\u0C91\u0001\u1D08\u0001\u0C81\u0001\u1CCD\u0001\u1CC3\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u0C96\u0001L\u0001\u01AB\u0001\t\u0001\u0C87\u0001\u0C96\u0001\u0C8C\u0001\t\u0001L\u0001\u0C6F\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D0B\u0001\u0D0C\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D13\u0001\u1CC2\u0001\u0D4A\u0001\u0D16\u0001\u0D17\u0001\u0C74\u0001\u0C75\u0001\u0D18\u0001\u0D19\u0001\u0D1A\u0001\u0D1B\u0001\u0C76\u0001\u02EC\u0001\u0C77\u0001\u0C78\u0001\u0000\u0001\u02EF\u0001\u0000\u0001\u44A6\u0001L\u0001\u01AB\u0001\t\u0001\u0D0C\u0001\u44A6\u0001\u0D4A\u0006\t\u0001\u04A2\t\t\u0001\u131A\u0005\t\u0001\u081D\u0003\t\u0001\u12AD\u0002\u081E\u0001\t\u0001\u0000\u0001|\u0001\u0000\u0001\u0134\u0004\t\u0001\u0134\u0002\t\u0001L\u0001\u02F1\u0001\u0C70\u0001\u02F2\u0001\u0D0A\u0001\u0D4F\u0001\u0D0C\u0001\u0D0D\u0001\u0D0E\u0001\u0D0F\u0001\u0D10\u0001\u04EE\u0001\u0D11\u0001\u1CC1\u0001\u0D13\u0001\u1D43\u0001\u0D4A\u0001\u0D16\u0001\u0D17\u0001\u0CB2\u0001\u0CB3");
      assertNotNull(stringBufferInputStream0);
      assertEquals(40320, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(40320, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(40319, stringBufferInputStream0.available());
      assertEquals(1, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(40319, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      // Undeclared exception!
      try {
        Token token0 = javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
      }
  }

  //Test case number: 42
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 87 TABLESWITCH L159 Case 71 - true
   */

  @Test
  public void test042()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("KG");
      assertNotNull(stringBufferInputStream0);
      assertEquals(2, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(2, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(1, stringBufferInputStream0.available());
      assertEquals(75, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("G", token0.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
  }

  //Test case number: 43
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I738 Branch 640 IFEQ L1035 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I778 Branch 642 IF_ICMPNE L1043 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I784 Branch 643 IF_ICMPLE L1043 - false
   */

  @Test
  public void test043()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("\">\"");
      assertNotNull(stringBufferInputStream0);
      assertEquals(3, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(3, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(3, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("\">\"", token0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, token0.endLine);
      assertEquals(73, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
  }

  //Test case number: 44
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 139 TABLESWITCH L159 Case 123 - true
   */

  @Test
  public void test044()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("{=3*# G0h~AR422A");
      assertNotNull(stringBufferInputStream0);
      assertEquals(16, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(16, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(16, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("{", token0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(79, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
  }

  //Test case number: 45
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 110 TABLESWITCH L159 Case 94 - true
   */

  @Test
  public void test045()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("^");
      assertNotNull(stringBufferInputStream0);
      assertEquals(1, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("^", token0.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(107, token0.kind);
  }

  //Test case number: 46
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 229 TABLESWITCH L267 Case 123 - true
   */

  @Test
  public void test046()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("EZ/{5L=");
      assertNotNull(stringBufferInputStream0);
      assertEquals(7, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(7, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(7, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("EZ", token0.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("/", token1.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.beginColumn);
      assertEquals(104, token1.kind);
      assertEquals(3, token1.endColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(token1.equals((Object)token0));
  }

  //Test case number: 47
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 106 TABLESWITCH L159 Case 90 - true
   */

  @Test
  public void test047()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("EZ/75LB=");
      assertNotNull(stringBufferInputStream0);
      assertEquals(8, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(8, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(7, stringBufferInputStream0.available());
      assertEquals(69, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(7, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("Z", token0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
  }

  //Test case number: 48
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.SkipLexicalActions(Lcom/soops/CEN4010/JMCA/JParser/Token;)V: I4 Branch 840 LOOKUPSWITCH L1715 Default-Case - true
   */

  @Test
  public void test048()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.SkipLexicalActions((Token) null);
  }

  //Test case number: 49
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 94 TABLESWITCH L159 Case 78 - true
   */

  @Test
  public void test049()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("IN_SINGLE_LINE_COMMENT");
      assertNotNull(stringBufferInputStream0);
      assertEquals(22, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(22, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(21, stringBufferInputStream0.available());
      assertEquals(73, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(21, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("N_SINGLE_LINE_COMMENT", token0.toString());
      assertEquals(21, javaCharStream0.getEndColumn());
      assertEquals(21, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(21, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(20, javaCharStream0.bufpos);
  }

  //Test case number: 50
  /*
   * 8 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 167 TABLESWITCH L267 Case 61 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I173 Branch 238 IFEQ L299 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I191 Branch 239 IFEQ L301 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I209 Branch 240 IFEQ L303 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I227 Branch 241 IFEQ L305 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I245 Branch 242 IFEQ L307 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I263 Branch 243 IFEQ L309 - true
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I281 Branch 244 IFEQ L311 - false
   */

  @Test
  public void test050()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("*=t");
      assertNotNull(stringBufferInputStream0);
      assertEquals(3, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(3, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(3, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("*=", token0.toString());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(112, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
  }

  //Test case number: 51
  /*
   * 5 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I387 Branch 622 IFNE L970 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I401 Branch 623 IF_ICMPLE L972 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I992 Branch 653 IFEQ L1081 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1154 Branch 661 IFEQ L1110 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1236 Branch 665 IFEQ L1125 - false
   */

  @Test
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = '1';
      charArray0[0] = '1';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'1', '1', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) '1', (int) '1', (int) 'G');
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'1', '1', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (int) '\u0000');
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'1', '1', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("11", token0.toString());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(49, javaCharStream0.getEndLine());
      assertEquals(49, javaCharStream0.getBeginLine());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(49, javaCharStream0.getLine());
      assertEquals(49, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(49, token0.beginLine);
      assertEquals(50, token0.endColumn);
      assertEquals(49, token0.endLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'1', '1', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 52
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 222 TABLESWITCH L267 Case 116 - true
   */

  @Test
  public void test052()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("*t");
      assertNotNull(stringBufferInputStream0);
      assertEquals(2, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(2, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(2, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("*", token0.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(103, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
  }

  //Test case number: 53
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I163 Branch 23 IFNE L42 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 226 TABLESWITCH L267 Case 120 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 350 TABLESWITCH L466 Case 70 - true
   */

  @Test
  public void test053()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("textFile");
      assertNotNull(stringBufferInputStream0);
      assertEquals(8, stringBufferInputStream0.available());
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(7, stringBufferInputStream0.available());
      assertEquals(116, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(7, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(7, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("extFile", token0.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(7, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
  }

  //Test case number: 54
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 111 TABLESWITCH L159 Case 95 - true
   */

  @Test
  public void test054()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("d_0A)wtGJ;");
      assertNotNull(stringBufferInputStream0);
      assertEquals(11, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(11, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(10, stringBufferInputStream0.available());
      assertEquals(100, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(10, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("_0A", token0.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
  }

  //Test case number: 55
  /*
   * 14 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 50 TABLESWITCH L159 Case 34 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 82 TABLESWITCH L159 Case 66 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 575 TABLESWITCH L918 Case 23 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 576 TABLESWITCH L918 Case 24 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 578 TABLESWITCH L918 Case 26 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I125 Branch 608 IF_ICMPNE L929 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I738 Branch 640 IFEQ L1035 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I778 Branch 642 IF_ICMPNE L1043 - true
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 698 TABLESWITCH L1166 Case 23 - true
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 699 TABLESWITCH L1166 Case 24 - true
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 701 TABLESWITCH L1166 Case 26 - true
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1645 Branch 738 IFEQ L1205 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1664 Branch 739 IF_ICMPNE L1209 - true
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I542 Branch 835 IF_ICMPGT L1696 - true
   */

  @Test
  public void test055()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("BF\"t3=");
      assertNotNull(stringBufferInputStream0);
      assertEquals(6, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(6, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(6, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("BF", token0.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      // Undeclared exception!
      try {
        Token token1 = javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 7.  Encountered: <EOF> after : \"\\\"t3=\"
         //
      }
  }

  //Test case number: 56
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 134 TABLESWITCH L159 Case 118 - true
   */

  @Test
  public void test056()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("Rv'u");
      assertNotNull(stringBufferInputStream0);
      assertEquals(4, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(4, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(3, stringBufferInputStream0.available());
      assertEquals(82, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(3, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("v", token0.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
  }

  //Test case number: 57
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 116 TABLESWITCH L159 Case 100 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 312 TABLESWITCH L390 Case 103 - true
   */

  @Test
  public void test057()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("degas");
      assertNotNull(stringBufferInputStream0);
      assertEquals(5, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(5, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(5, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("degas", token0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
  }

  //Test case number: 58
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 191 TABLESWITCH L267 Case 85 - true
   */

  @Test
  public void test058()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("9rU~x");
      assertNotNull(stringBufferInputStream0);
      assertEquals(5, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(5, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(4, stringBufferInputStream0.available());
      assertEquals(57, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(4, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("rU", token0.toString());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
  }

  //Test case number: 59
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 220 TABLESWITCH L267 Case 114 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 306 TABLESWITCH L390 Case 97 - true
   */

  @Test
  public void test059()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("sprag");
      assertNotNull(stringBufferInputStream0);
      assertEquals(5, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(5, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(4, stringBufferInputStream0.available());
      assertEquals(115, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(4, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("prag", token0.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(4, token0.endColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
  }

  //Test case number: 60
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 157 TABLESWITCH L267 Case 51 - true
   */

  @Test
  public void test060()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = '3';
      charArray0[0] = '*';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'*', '3', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) '*', (int) '3', (int) '3');
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertArrayEquals(new char[] {'*', '3', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertArrayEquals(new char[] {'*', '3', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(42, javaCharStream0.getLine());
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals(42, javaCharStream0.getBeginLine());
      assertEquals(51, javaCharStream0.getBeginColumn());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals(42, javaCharStream0.getEndLine());
      assertEquals("*", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(42, token0.beginLine);
      assertEquals(51, token0.endColumn);
      assertEquals(42, token0.endLine);
      assertEquals(103, token0.kind);
      assertEquals(51, token0.beginColumn);
      assertArrayEquals(new char[] {'*', '3', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 61
  /*
   * 5 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 64 TABLESWITCH L159 Case 48 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I236 Branch 614 IF_ICMPNE L943 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I244 Branch 615 IF_ICMPLE L945 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 724 TABLESWITCH L1166 Case 49 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1769 Branch 744 IFEQ L1229 - true
   */

  @Test
  public void test061()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("0b,U!v#qyquMg");
      assertNotNull(stringBufferInputStream0);
      assertEquals(13, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0, 20, 20);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(13, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(13, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("0", token0.toString());
      assertEquals(20, javaCharStream0.getBeginColumn());
      assertEquals(20, javaCharStream0.getEndLine());
      assertEquals(20, javaCharStream0.getLine());
      assertEquals(20, javaCharStream0.getEndColumn());
      assertEquals(20, javaCharStream0.getBeginLine());
      assertEquals(20, javaCharStream0.getColumn());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(20, token0.endLine);
      assertEquals(20, token0.endColumn);
      assertEquals(20, token0.beginColumn);
      assertEquals(20, token0.beginLine);
      assertEquals(66, token0.kind);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
  }

  //Test case number: 62
  /*
   * 16 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1431 Branch 675 IF_ICMPGE L1161 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1880 Branch 748 LOOKUPSWITCH L1252 Case 1 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1880 Branch 749 LOOKUPSWITCH L1252 Case 3 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1880 Branch 750 LOOKUPSWITCH L1252 Case 14 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1880 Branch 751 LOOKUPSWITCH L1252 Case 23 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1880 Branch 752 LOOKUPSWITCH L1252 Case 32 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1880 Branch 753 LOOKUPSWITCH L1252 Default-Case - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1892 Branch 754 IFNE L1256 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I2006 Branch 760 IF_ICMPNE L1276 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCanMove_1(IIIJJ)Z: I3 Branch 797 LOOKUPSWITCH L1447 Case 0 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCanMove_1(IIIJJ)Z: I3 Branch 798 LOOKUPSWITCH L1447 Case 48 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCanMove_1(IIIJJ)Z: I3 Branch 799 LOOKUPSWITCH L1447 Case 49 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCanMove_1(IIIJJ)Z: I3 Branch 800 LOOKUPSWITCH L1447 Case 51 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCanMove_1(IIIJJ)Z: I3 Branch 801 LOOKUPSWITCH L1447 Case 61 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCanMove_1(IIIJJ)Z: I3 Branch 802 LOOKUPSWITCH L1447 Default-Case - true
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCanMove_1(IIIJJ)Z: I126 Branch 808 IFEQ L1460 - true
   */

  @Test
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-59);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(10, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)74, (byte) (-59), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(10, byteArrayInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)74, (byte) (-59), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(10, byteArrayInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)74, (byte) (-59), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("J", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertArrayEquals(new byte[] {(byte)74, (byte) (-59), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  //Test case number: 63
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 92 TABLESWITCH L159 Case 76 - true
   */

  @Test
  public void test063()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("?LW{qCVxmA+M].");
      assertNotNull(stringBufferInputStream0);
      assertEquals(15, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(15, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(14, stringBufferInputStream0.available());
      assertEquals(63, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(14, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("LW", token0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
  }

  //Test case number: 64
  /*
   * 6 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 377 TABLESWITCH L466 Case 97 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 424 TABLESWITCH L542 Case 108 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I191 Branch 441 IFEQ L565 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 460 TABLESWITCH L614 Case 108 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 504 TABLESWITCH L676 Case 121 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I237 Branch 511 IFEQ L709 - false
   */

  @Test
  public void test064()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("finally");
      assertNotNull(stringBufferInputStream0);
      assertEquals(7, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0, (int) (byte) (-59), (int) (byte) (-59));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(7, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(7, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("finally", token0.toString());
      assertEquals(-59, javaCharStream0.getLine());
      assertEquals(-59, javaCharStream0.getBeginColumn());
      assertEquals(-59, javaCharStream0.getBeginLine());
      assertEquals(-53, javaCharStream0.getColumn());
      assertEquals(-53, javaCharStream0.getEndColumn());
      assertEquals(-59, javaCharStream0.getEndLine());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals((-59), token0.endLine);
      assertEquals((-59), token0.beginColumn);
      assertEquals((-59), token0.beginLine);
      assertEquals((-53), token0.endColumn);
      assertEquals(32, token0.kind);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
  }

  //Test case number: 65
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 105 TABLESWITCH L159 Case 89 - true
   */

  @Test
  public void test065()  throws Throwable  {
      char[] charArray0 = new char[12];
      charArray0[0] = 'Y';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) '\u0000', (int) (byte) (-23), (int) '\u0000');
      assertNotNull(javaCharStream0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(-23, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(-23, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(-23, javaCharStream0.getBeginColumn());
      assertEquals("Y", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, token0.beginLine);
      assertEquals((-23), token0.endColumn);
      assertEquals((-23), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(0, token0.endLine);
  }

  //Test case number: 66
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 57 TABLESWITCH L159 Case 41 - true
   */

  @Test
  public void test066()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("G),h\";yN1qix<&]");
      assertNotNull(stringBufferInputStream0);
      assertEquals(15, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(15, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(14, stringBufferInputStream0.available());
      assertEquals(71, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(14, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(")", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
  }

  //Test case number: 67
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 228 TABLESWITCH L267 Case 122 - true
   */

  @Test
  public void test067()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("pzn!-tI{qp_%telj)");
      assertNotNull(stringBufferInputStream0);
      assertEquals(17, stringBufferInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) stringBufferInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(17, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) dataInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(17, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(17, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("pzn", token0.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(3, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
  }

  //Test case number: 68
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 122 TABLESWITCH L159 Case 106 - true
   */

  @Test
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("abstrajct");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) stringReader0, 5280, 6, 6);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      long long0 = stringReader0.skip((long) 6);
      assertEquals(6L, long0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(5280, javaCharStream0.getEndLine());
      assertEquals(5280, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(5280, javaCharStream0.getBeginLine());
      assertEquals("jct", token0.toString());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(6, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(5280, token0.endLine);
      assertEquals(5280, token0.beginLine);
      assertEquals(8, token0.endColumn);
  }

  //Test case number: 69
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 98 TABLESWITCH L159 Case 82 - true
   */

  @Test
  public void test069()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("Rv6QhC~%");
      assertNotNull(stringBufferInputStream0);
      assertEquals(8, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(8, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(8, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("Rv6QhC", token0.toString());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(6, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
  }

  //Test case number: 70
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 179 TABLESWITCH L267 Case 73 - true
   */

  @Test
  public void test070()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("|I_");
      assertNotNull(stringBufferInputStream0);
      assertEquals(3, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(3, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(3, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("|", token0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(106, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
  }

  //Test case number: 71
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 216 TABLESWITCH L267 Case 110 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 328 TABLESWITCH L390 Case 119 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I320 Branch 338 IFEQ L445 - true
   */

  @Test
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("inwerface");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) stringReader0, (int) '*', (int) '*', 304);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("inwerface", token0.toString());
      assertEquals(42, javaCharStream0.getBeginColumn());
      assertEquals(42, javaCharStream0.getBeginLine());
      assertEquals(42, javaCharStream0.getLine());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(42, javaCharStream0.getEndLine());
      assertEquals(42, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(42, token0.beginColumn);
      assertEquals(42, token0.endLine);
      assertEquals(50, token0.endColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(8, javaCharStream0.bufpos);
  }

  //Test case number: 72
  /*
   * 15 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 557 TABLESWITCH L918 Case 5 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 558 TABLESWITCH L918 Case 6 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 564 TABLESWITCH L918 Case 12 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 586 TABLESWITCH L918 Case 34 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 587 TABLESWITCH L918 Case 35 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 592 TABLESWITCH L918 Case 40 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 593 TABLESWITCH L918 Case 41 - true
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 596 TABLESWITCH L918 Case 44 - true
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 597 TABLESWITCH L918 Case 45 - true
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I387 Branch 622 IFNE L970 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I992 Branch 653 IFEQ L1081 - true
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1011 Branch 654 IF_ICMPEQ L1085 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1154 Branch 661 IFEQ L1110 - true
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1236 Branch 665 IFEQ L1125 - true
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1416 Branch 674 IF_ICMPNE L1159 - true
   */

  @Test
  public void test072()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[4] = '7';
      charArray0[0] = '7';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'7', '\u0000', '\u0000', '\u0000', '7'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) '7', (int) (byte) (-25), (int) '7');
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'7', '\u0000', '\u0000', '\u0000', '7'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'7', '\u0000', '\u0000', '\u0000', '7'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("7", token0.toString());
      assertEquals(-25, javaCharStream0.getColumn());
      assertEquals(55, javaCharStream0.getEndLine());
      assertEquals(55, javaCharStream0.getLine());
      assertEquals(55, javaCharStream0.getBeginLine());
      assertEquals(-25, javaCharStream0.getBeginColumn());
      assertEquals(-25, javaCharStream0.getEndColumn());
      assertEquals(66, token0.kind);
      assertEquals(55, token0.beginLine);
      assertEquals((-25), token0.beginColumn);
      assertEquals((-25), token0.endColumn);
      assertEquals(55, token0.endLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'7', '\u0000', '\u0000', '\u0000', '7'}, charArray0);
  }

  //Test case number: 73
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 93 TABLESWITCH L159 Case 77 - true
   */

  @Test
  public void test073()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("EMZ/75L=");
      assertNotNull(stringBufferInputStream0);
      assertEquals(8, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(8, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(7, stringBufferInputStream0.available());
      assertEquals(69, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(7, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("MZ", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
  }

  //Test case number: 74
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 101 TABLESWITCH L159 Case 85 - true
   */

  @Test
  public void test074()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("bUQs&t");
      assertNotNull(stringBufferInputStream0);
      assertEquals(6, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(6, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(5, stringBufferInputStream0.available());
      assertEquals(98, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(5, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("UQs", token0.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
  }

  //Test case number: 75
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 151 TABLESWITCH L267 Case 45 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I98 Branch 235 IFEQ L282 - true
   */

  @Test
  public void test075()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("k&-at");
      assertNotNull(stringBufferInputStream0);
      assertEquals(5, stringBufferInputStream0.available());
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(4, stringBufferInputStream0.available());
      assertEquals(107, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(4, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(4, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("&", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(105, token0.kind);
  }

  //Test case number: 76
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 4 TABLESWITCH L13 Case 3 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I225 Branch 27 IFNE L55 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 436 TABLESWITCH L542 Default-Case - true
   */

  @Test
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader("abst~4rajcp");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) stringReader0, (int) '@', (int) '@', (int) '@');
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("abst", token0.toString());
      assertEquals(64, javaCharStream0.getBeginLine());
      assertEquals(64, javaCharStream0.getEndLine());
      assertEquals(67, javaCharStream0.getColumn());
      assertEquals(67, javaCharStream0.getEndColumn());
      assertEquals(64, javaCharStream0.getLine());
      assertEquals(64, javaCharStream0.getBeginColumn());
      assertEquals(64, token0.endLine);
      assertEquals(64, token0.beginLine);
      assertEquals(64, token0.beginColumn);
      assertEquals(67, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
  }

  //Test case number: 77
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 52 TABLESWITCH L159 Case 36 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I95 Branch 606 IF_ICMPNE L923 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I103 Branch 607 IF_ICMPLE L925 - false
   */

  @Test
  public void test077()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("$Ls!");
      assertNotNull(stringBufferInputStream0);
      assertEquals(4, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(4, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(4, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("$Ls", token0.toString());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
  }

  //Test case number: 78
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 79 TABLESWITCH L159 Case 63 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 124 TABLESWITCH L159 Case 108 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 169 TABLESWITCH L267 Case 63 - true
   */

  @Test
  public void test078()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("l?c\"_}i'Qh4^bLrT}#");
      assertNotNull(stringBufferInputStream0);
      assertEquals(18, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(18, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(18, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("l", token0.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("?", token1.toString());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(91, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertFalse(token1.equals((Object)token0));
  }

  //Test case number: 79
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 187 TABLESWITCH L267 Case 81 - true
   */

  @Test
  public void test079()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("n|Q7");
      assertNotNull(stringBufferInputStream0);
      assertEquals(4, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(4, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(4, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("n", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("|", token1.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(106, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
  }

  //Test case number: 80
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 211 TABLESWITCH L267 Case 105 - true
   */

  @Test
  public void test080()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("richochet");
      assertNotNull(stringBufferInputStream0);
      assertEquals(9, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(9, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(9, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("richochet", token0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(9, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
  }

  //Test case number: 81
  /*
   * 27 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 227 TABLESWITCH L267 Case 121 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 319 TABLESWITCH L390 Case 110 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 420 TABLESWITCH L542 Case 104 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I135 Branch 439 IFEQ L555 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 466 TABLESWITCH L614 Case 114 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 494 TABLESWITCH L676 Case 111 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa7_0(JJJJ)I: I59 Branch 515 LOOKUPSWITCH L726 Case 110 - true
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa7_0(JJJJ)I: I59 Branch 517 LOOKUPSWITCH L726 Case 116 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa8_0(JJJJ)I: I18 Branch 523 IFNE L753 - true
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa8_0(JJJJ)I: I59 Branch 524 LOOKUPSWITCH L760 Case 100 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa8_0(JJJJ)I: I59 Branch 525 LOOKUPSWITCH L760 Case 101 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa8_0(JJJJ)I: I59 Branch 526 LOOKUPSWITCH L760 Case 105 - true
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa8_0(JJJJ)I: I59 Branch 527 LOOKUPSWITCH L760 Case 111 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa8_0(JJJJ)I: I59 Branch 528 LOOKUPSWITCH L760 Case 116 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa8_0(JJJJ)I: I59 Branch 529 LOOKUPSWITCH L760 Default-Case - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa9_0(JJ)I: I12 Branch 533 IFNE L785 - true
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa9_0(JJ)I: I53 Branch 534 LOOKUPSWITCH L792 Case 102 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa9_0(JJ)I: I53 Branch 535 LOOKUPSWITCH L792 Case 115 - false
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa9_0(JJ)I: I53 Branch 536 LOOKUPSWITCH L792 Case 122 - true
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa9_0(JJ)I: I53 Branch 537 LOOKUPSWITCH L792 Default-Case - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa10_0(JJ)I: I12 Branch 540 IFNE L811 - true
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa10_0(JJ)I: I53 Branch 541 LOOKUPSWITCH L818 Case 101 - true
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa10_0(JJ)I: I53 Branch 542 LOOKUPSWITCH L818 Default-Case - false
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa11_0(JJ)I: I12 Branch 543 IFNE L829 - true
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa11_0(JJ)I: I53 Branch 544 LOOKUPSWITCH L836 Case 100 - true
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa11_0(JJ)I: I53 Branch 545 LOOKUPSWITCH L836 Default-Case - false
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa11_0(JJ)I: I64 Branch 546 IFEQ L839 - false
   */

  @Test
  public void test081()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("synchronized");
      assertNotNull(stringBufferInputStream0);
      assertEquals(12, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(12, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(12, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("synchronized", token0.toString());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(12, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(12, javaCharStream0.getColumn());
      assertEquals(56, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(12, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(11, javaCharStream0.bufpos);
  }

  //Test case number: 82
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 185 TABLESWITCH L267 Case 79 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 677 TABLESWITCH L1166 Case 2 - true
   */

  @Test
  public void test082()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("/O0]zr+");
      assertNotNull(stringBufferInputStream0);
      assertEquals(7, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(7, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(7, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("/", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(104, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
  }

  //Test case number: 83
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 119 TABLESWITCH L159 Case 103 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 145 TABLESWITCH L267 Case 39 - true
   */

  @Test
  public void test083()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("g'~v-&Z#");
      assertNotNull(stringBufferInputStream0);
      assertEquals(8, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(8, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(8, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("g", token0.toString());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
  }

  //Test case number: 84
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 318 TABLESWITCH L390 Case 109 - true
   */

  @Test
  public void test084()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("lcam");
      assertNotNull(stringBufferInputStream0);
      assertEquals(4, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(4, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(3, stringBufferInputStream0.available());
      assertEquals(108, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(3, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals("cam", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
  }

  //Test case number: 85
  /*
   * 7 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 90 TABLESWITCH L159 Case 74 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 143 TABLESWITCH L159 Default-Case - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I144 Branch 609 IF_ICMPNE L931 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I163 Branch 610 IF_ICMPNE L933 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I181 Branch 611 IF_ICMPNE L935 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I84 Branch 819 IFEQ L1609 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I604 Branch 839 IF_ICMPGT L1706 - false
   */

  @Test
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)74;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(10, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)74, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)74, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)74, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("J", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertArrayEquals(new byte[] {(byte)74, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try {
        Token token1 = javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\" (0), after : \"\"
         //
      }
  }

  //Test case number: 86
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 75 TABLESWITCH L159 Case 59 - true
   */

  @Test
  public void test086()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(";@z&oshO`11AN");
      assertNotNull(stringBufferInputStream0);
      assertEquals(13, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(13, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(13, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(";", token0.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(83, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
  }

  //Test case number: 87
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 97 TABLESWITCH L159 Case 81 - true
   */

  @Test
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",Q8'I7$yY-");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) stringReader0, 5280, 5280, 5280);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(5280, javaCharStream0.getBeginColumn());
      assertEquals(5280, javaCharStream0.getColumn());
      assertEquals(5280, javaCharStream0.getLine());
      assertEquals(5280, javaCharStream0.getEndColumn());
      assertEquals(5280, javaCharStream0.getBeginLine());
      assertEquals(5280, javaCharStream0.getEndLine());
      assertEquals(",", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(5280, token0.beginLine);
      assertEquals(5280, token0.endColumn);
      assertEquals(5280, token0.beginColumn);
      assertEquals(84, token0.kind);
      assertEquals(5280, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(5281, javaCharStream0.getBeginColumn());
      assertEquals(5282, javaCharStream0.getEndColumn());
      assertEquals(5280, javaCharStream0.getLine());
      assertEquals(5280, javaCharStream0.getBeginLine());
      assertEquals(5280, javaCharStream0.getEndLine());
      assertEquals(5282, javaCharStream0.getColumn());
      assertEquals("Q8", token1.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(5282, token1.endColumn);
      assertEquals(5280, token1.endLine);
      assertEquals(5280, token1.beginLine);
      assertEquals(5281, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertFalse(token1.equals((Object)token0));
  }

  //Test case number: 88
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I14 Branch 13 IFNE L16 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 63 TABLESWITCH L159 Case 47 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 554 TABLESWITCH L918 Case 2 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I318 Branch 619 IF_ICMPNE L959 - true
   */

  @Test
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'/', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) '/', (int) '/', (int) 'O');
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertArrayEquals(new char[] {'/', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertArrayEquals(new char[] {'/', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals("/", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(47, token0.endColumn);
      assertEquals(104, token0.kind);
      assertEquals(47, token0.endLine);
      assertEquals(47, token0.beginColumn);
      assertEquals(47, token0.beginLine);
      assertArrayEquals(new char[] {'/', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 89
  /*
   * 8 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I38 Branch 15 IFEQ L18 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 54 TABLESWITCH L159 Case 38 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 62 TABLESWITCH L159 Case 46 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 152 TABLESWITCH L267 Case 46 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 153 TABLESWITCH L267 Case 47 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I125 Branch 236 IFEQ L288 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 560 TABLESWITCH L918 Case 8 - true
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I446 Branch 625 IFNE L981 - false
   */

  @Test
  public void test089()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("&./PdJHMi");
      assertNotNull(stringBufferInputStream0);
      assertEquals(9, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(9, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(9, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("&", token0.toString());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(105, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(".", token1.toString());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(85, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(token1.equals((Object)token0));
  }

  //Test case number: 90
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 128 TABLESWITCH L159 Case 112 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 147 TABLESWITCH L267 Case 41 - true
   */

  @Test
  public void test090()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("1p)_");
      assertNotNull(stringBufferInputStream0);
      assertEquals(4, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(4, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(3, stringBufferInputStream0.available());
      assertEquals(49, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(3, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("p", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
  }

  //Test case number: 91
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 118 TABLESWITCH L159 Case 102 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 327 TABLESWITCH L390 Case 118 - true
   */

  @Test
  public void test091()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("favouring");
      assertNotNull(stringBufferInputStream0);
      assertEquals(9, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(9, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(9, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("favouring", token0.toString());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(74, token0.kind);
      assertEquals(9, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
  }

  //Test case number: 92
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 56 TABLESWITCH L159 Case 40 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 60 TABLESWITCH L159 Case 44 - true
   */

  @Test
  public void test092()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("7(@,i&B&O;!{4N0q");
      assertNotNull(stringBufferInputStream0);
      assertEquals(16, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(16, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(15, stringBufferInputStream0.available());
      assertEquals(55, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(15, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("(", token0.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(77, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("@", token1.toString());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(86, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(",", token2.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(84, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(3, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(3, token2.beginColumn);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
  }

  //Test case number: 93
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 127 TABLESWITCH L159 Case 111 - true
   */

  @Test
  public void test093()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("oCpwIUf?iPU@;Nvr[8\"/");
      assertNotNull(stringBufferInputStream0);
      assertEquals(20, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(20, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(20, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("oCpwIUf", token0.toString());
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(7, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
  }

  //Test case number: 94
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 182 TABLESWITCH L267 Case 76 - true
   */

  @Test
  public void test094()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("@aL)DV}FzqI8'21FMmL");
      assertNotNull(stringBufferInputStream0);
      assertEquals(19, stringBufferInputStream0.available());
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(18, stringBufferInputStream0.available());
      assertEquals(64, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(18, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(18, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("aL", token0.toString());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
  }

  //Test case number: 95
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 138 TABLESWITCH L159 Case 122 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 223 TABLESWITCH L267 Case 117 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I931 Branch 650 IFNE L1070 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I945 Branch 651 IF_ICMPLE L1072 - false
   */

  @Test
  public void test095()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("zqJ$bO6WR_P<uf<O|");
      assertNotNull(stringBufferInputStream0);
      assertEquals(17, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(17, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(17, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(11, javaCharStream0.getColumn());
      assertEquals(11, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("zqJ$bO6WR_P", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(10, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(11, token0.endColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("<", token1.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(12, javaCharStream0.getColumn());
      assertEquals(12, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(12, javaCharStream0.getEndColumn());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, token1.endLine);
      assertEquals(12, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(12, token1.endColumn);
      assertEquals(88, token1.kind);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(11, javaCharStream0.bufpos);
      assertFalse(token1.equals((Object)token0));
  }

  //Test case number: 96
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 114 TABLESWITCH L159 Case 98 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 213 TABLESWITCH L267 Case 107 - true
   */

  @Test
  public void test096()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("bkQs&t");
      assertNotNull(stringBufferInputStream0);
      assertEquals(6, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(6, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(6, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals("bkQs", token0.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
  }

  //Test case number: 97
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 71 TABLESWITCH L159 Case 55 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 102 TABLESWITCH L159 Case 86 - true
   */

  @Test
  public void test097()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("7Vdzegas");
      assertNotNull(stringBufferInputStream0);
      assertEquals(8, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(8, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(8, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("7", token0.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("Vdzegas", token1.toString());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(8, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(token1.equals((Object)token0));
  }

  //Test case number: 98
  /*
   * 10 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 482 TABLESWITCH L676 Case 99 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 489 TABLESWITCH L676 Case 106 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa7_0(JJJJ)I: I18 Branch 512 IFNE L719 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa7_0(JJJJ)I: I59 Branch 513 LOOKUPSWITCH L726 Case 99 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa7_0(JJJJ)I: I59 Branch 514 LOOKUPSWITCH L726 Case 101 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa7_0(JJJJ)I: I59 Branch 515 LOOKUPSWITCH L726 Case 110 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa7_0(JJJJ)I: I59 Branch 516 LOOKUPSWITCH L726 Case 112 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa7_0(JJJJ)I: I59 Branch 517 LOOKUPSWITCH L726 Case 116 - true
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa7_0(JJJJ)I: I59 Branch 518 LOOKUPSWITCH L726 Default-Case - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa7_0(JJJJ)I: I154 Branch 522 IFEQ L743 - false
   */

  @Test
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("abstract");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) stringReader0, 5280, 5280, 5280);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("abstract", token0.toString());
      assertEquals(5280, javaCharStream0.getEndLine());
      assertEquals(5280, javaCharStream0.getLine());
      assertEquals(5280, javaCharStream0.getBeginColumn());
      assertEquals(5287, javaCharStream0.getColumn());
      assertEquals(5280, javaCharStream0.getBeginLine());
      assertEquals(5287, javaCharStream0.getEndColumn());
      assertEquals(13, token0.kind);
      assertEquals(5287, token0.endColumn);
      assertEquals(5280, token0.beginLine);
      assertEquals(5280, token0.endLine);
      assertEquals(5280, token0.beginColumn);
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
  }

  //Test case number: 99
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 130 TABLESWITCH L159 Case 114 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 189 TABLESWITCH L267 Case 83 - true
   */

  @Test
  public void test099()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("9rS~X");
      assertNotNull(stringBufferInputStream0);
      assertEquals(5, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(5, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(4, stringBufferInputStream0.available());
      assertEquals(57, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(4, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals("rS", token0.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
  }

  //Test case number: 100
  /*
   * 10 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 3 TABLESWITCH L13 Case 2 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I163 Branch 23 IFNE L42 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I172 Branch 24 IFEQ L42 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I181 Branch 25 IF_ICMPEQ L44 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 135 TABLESWITCH L159 Case 119 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 314 TABLESWITCH L390 Case 105 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 379 TABLESWITCH L466 Case 99 - true
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I18 Branch 412 IFNE L535 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I72 Branch 818 IF_ICMPGT L1609 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I84 Branch 819 IFEQ L1609 - false
   */

  @Test
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" which takes an integer argument.  Will use the no argument constructor instead.");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) stringReader0, 308, (int) '-', (int) '-');
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(308, javaCharStream0.getBeginLine());
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertEquals(308, javaCharStream0.getLine());
      assertEquals(308, javaCharStream0.getEndLine());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals("which", token0.toString());
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(308, token0.beginLine);
      assertEquals(46, token0.beginColumn);
      assertEquals(50, token0.endColumn);
      assertEquals(308, token0.endLine);
  }

  //Test case number: 101
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 150 TABLESWITCH L267 Case 44 - true
   */

  @Test
  public void test101()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("n,AQPhrG");
      assertNotNull(stringBufferInputStream0);
      assertEquals(8, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(8, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(8, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("n", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
  }

  //Test case number: 102
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 221 TABLESWITCH L267 Case 115 - true
   */

  @Test
  public void test102()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("das");
      assertNotNull(stringBufferInputStream0);
      assertEquals(3, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(3, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(0, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('d', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(0, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("as", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(2, token0.beginColumn);
      assertEquals(1, token0.beginLine);
  }

  //Test case number: 103
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I143 Branch 237 IFEQ L292 - true
   */

  @Test
  public void test103()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("t<");
      assertNotNull(stringBufferInputStream0);
      assertEquals(2, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(2, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(2, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("t", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
  }

  //Test case number: 104
  /*
   * 12 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStartNfaWithStates_0(III)I: root-Branch
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 203 TABLESWITCH L267 Case 97 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 325 TABLESWITCH L390 Case 116 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I281 Branch 337 IFEQ L436 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 385 TABLESWITCH L466 Case 105 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 396 TABLESWITCH L466 Case 116 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 430 TABLESWITCH L542 Case 114 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 434 TABLESWITCH L542 Case 118 - true
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 449 TABLESWITCH L614 Case 97 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 453 TABLESWITCH L614 Case 101 - true
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I135 Branch 472 IFEQ L627 - true
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I154 Branch 473 IFEQ L629 - false
   */

  @Test
  public void test104()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("native");
      assertNotNull(stringBufferInputStream0);
      assertEquals(6, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(6, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(6, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("native", token0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(43, token0.kind);
      assertEquals(6, token0.endColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
  }

  //Test case number: 105
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 215 TABLESWITCH L267 Case 109 - true
   */

  @Test
  public void test105()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("cam");
      assertNotNull(stringBufferInputStream0);
      assertEquals(3, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(3, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(2, stringBufferInputStream0.available());
      assertEquals(99, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(2, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("am", token0.toString());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
  }

  //Test case number: 106
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 81 TABLESWITCH L159 Case 65 - true
   */

  @Test
  public void test106()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("nA_ZrT^}");
      assertNotNull(stringBufferInputStream0);
      assertEquals(8, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(8, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(7, stringBufferInputStream0.available());
      assertEquals(110, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(7, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("A_ZrT", token0.toString());
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
  }

  //Test case number: 107
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 66 TABLESWITCH L159 Case 50 - true
   */

  @Test
  public void test107()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("2HHRpYPpaOi90Y:q5S");
      assertNotNull(stringBufferInputStream0);
      assertEquals(18, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(18, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(18, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("2", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
  }

  //Test case number: 108
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 136 TABLESWITCH L159 Case 120 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 177 TABLESWITCH L267 Case 71 - true
   */

  @Test
  public void test108()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("nxAQ=G");
      assertNotNull(stringBufferInputStream0);
      assertEquals(6, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(6, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(5, stringBufferInputStream0.available());
      assertEquals(110, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(5, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals("xAQ", token0.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals("=", token1.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(87, token1.kind);
      assertEquals(4, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(4, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
  }

  //Test case number: 109
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 58 TABLESWITCH L159 Case 42 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 148 TABLESWITCH L267 Case 42 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I61 Branch 233 IFEQ L274 - true
   */

  @Test
  public void test109()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = '*';
      charArray0[0] = '*';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'*', '*', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) '\u0000', (int) (byte)58, (int) (byte)58);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertArrayEquals(new char[] {'*', '*', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertArrayEquals(new char[] {'*', '*', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(58, javaCharStream0.getEndColumn());
      assertEquals(58, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(58, javaCharStream0.getColumn());
      assertEquals("*", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(58, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(103, token0.kind);
      assertEquals(58, token0.beginColumn);
      assertArrayEquals(new char[] {'*', '*', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 110
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 88 TABLESWITCH L159 Case 72 - true
   */

  @Test
  public void test110()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("rHchmchet");
      assertNotNull(stringBufferInputStream0);
      assertEquals(9, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(9, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(8, stringBufferInputStream0.available());
      assertEquals(114, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(8, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals("Hchmchet", token0.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(8, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
  }

  //Test case number: 111
  /*
   * 7 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I101 Branch 19 IFNE L29 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I119 Branch 21 IF_ICMPEQ L31 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 115 TABLESWITCH L159 Case 99 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 210 TABLESWITCH L267 Case 104 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 320 TABLESWITCH L390 Case 111 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 324 TABLESWITCH L390 Case 115 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I18 Branch 340 IFNE L459 - false
   */

  @Test
  public void test111()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("richochet");
      assertNotNull(stringBufferInputStream0);
      assertEquals(9, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(9, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(8, stringBufferInputStream0.available());
      assertEquals(114, int0);
      
      int int1 = stringBufferInputStream0.read();
      assertEquals(7, stringBufferInputStream0.available());
      assertEquals(105, int1);
      assertFalse(int1 == int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(7, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("chochet", token0.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(7, token0.endColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
  }

  //Test case number: 112
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 85 TABLESWITCH L159 Case 69 - true
   */

  @Test
  public void test112()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("EZ/75LB=");
      assertNotNull(stringBufferInputStream0);
      assertEquals(8, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(8, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(8, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("EZ", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
  }

  //Test case number: 113
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 117 TABLESWITCH L159 Case 101 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 209 TABLESWITCH L267 Case 103 - true
   */

  @Test
  public void test113()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("degas");
      assertNotNull(stringBufferInputStream0);
      assertEquals(5, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(5, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals('d', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals("egas", token0.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(1, token0.beginLine);
  }

  //Test case number: 114
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 132 TABLESWITCH L159 Case 116 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 207 TABLESWITCH L267 Case 101 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I18 Branch 254 IFNE L383 - false
   */

  @Test
  public void test114()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("textFile");
      assertNotNull(stringBufferInputStream0);
      assertEquals(8, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(8, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(8, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("textFile", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(8, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
  }

  //Test case number: 115
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 77 TABLESWITCH L159 Case 61 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 231 TABLESWITCH L267 Default-Case - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 604 TABLESWITCH L918 Default-Case - true
   */

  @Test
  public void test115()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("= tIm]]O|lh1 O1X=X");
      assertNotNull(stringBufferInputStream0);
      assertEquals(18, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(18, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(18, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("=", token0.toString());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(87, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
  }

  //Test case number: 116
  /*
   * 18 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 55 TABLESWITCH L159 Case 39 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjAddStates(II)V: I23 Branch 548 IF_ICMPNE L859 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjAddStates(II)V: I23 Branch 548 IF_ICMPNE L859 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 567 TABLESWITCH L918 Case 15 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I76 Branch 605 IFEQ L921 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I95 Branch 606 IF_ICMPNE L923 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I125 Branch 608 IF_ICMPNE L929 - true
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I144 Branch 609 IF_ICMPNE L931 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I205 Branch 612 IFEQ L937 - true
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I236 Branch 614 IF_ICMPNE L943 - true
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I585 Branch 632 IF_ICMPNE L1007 - true
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 689 TABLESWITCH L1166 Case 14 - true
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 691 TABLESWITCH L1166 Case 16 - true
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1586 Branch 735 IFEQ L1193 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1604 Branch 736 IF_ICMPNE L1197 - true
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I251 Branch 826 IF_ICMPEQ L1645 - true
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I590 Branch 838 IFNE L1704 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I604 Branch 839 IF_ICMPGT L1706 - true
   */

  @Test
  public void test116()  throws Throwable  {
      StringReader stringReader0 = new StringReader("h_'x;PB>w9d0qZp;Du");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("h_", token0.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      // Undeclared exception!
      try {
        Token token1 = javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 5.  Encountered: \";\" (59), after : \"\\'x\"
         //
      }
  }

  //Test case number: 117
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 80 TABLESWITCH L159 Case 64 - true
   */

  @Test
  public void test117()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("@@Qp*N% Nv+fdy!'t");
      assertNotNull(stringBufferInputStream0);
      assertEquals(17, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(17, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(17, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("@", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(86, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
  }

  //Test case number: 118
  /*
   * 8 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 2 TABLESWITCH L13 Case 1 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I86 Branch 18 IFEQ L27 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I101 Branch 19 IFNE L29 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I110 Branch 20 IFEQ L29 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I144 Branch 22 IFEQ L38 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 76 TABLESWITCH L159 Case 60 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 166 TABLESWITCH L267 Case 60 - true
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I143 Branch 237 IFEQ L292 - false
   */

  @Test
  public void test118()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("<<");
      assertNotNull(stringBufferInputStream0);
      assertEquals(2, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(2, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(2, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("<<", token0.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(109, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
  }

  //Test case number: 119
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 83 TABLESWITCH L159 Case 67 - true
   */

  @Test
  public void test119()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("CQ+Y");
      assertNotNull(stringBufferInputStream0);
      assertEquals(4, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(4, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(4, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("CQ", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
  }

  //Test case number: 120
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 121 TABLESWITCH L159 Case 105 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 205 TABLESWITCH L267 Case 99 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.SwitchTo(I)V: I7 Branch 810 IF_ICMPGE L1553 - true
   */

  @Test
  public void test120()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("richochet");
      assertNotNull(stringBufferInputStream0);
      assertEquals(9, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(9, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(8, stringBufferInputStream0.available());
      assertEquals(114, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(8, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("ichochet", token0.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(74, token0.kind);
      assertEquals(8, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 7);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 7. State unchanged.
         //
      }
  }

  //Test case number: 121
  /*
   * 23 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCheckNAddTwoStates(II)V: root-Branch
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 65 TABLESWITCH L159 Case 49 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCheckNAddStates(II)V: I15 Branch 549 IF_ICMPNE L870 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCheckNAddStates(II)V: I15 Branch 549 IF_ICMPNE L870 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 555 TABLESWITCH L918 Case 3 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 584 TABLESWITCH L918 Case 32 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I76 Branch 605 IFEQ L921 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I205 Branch 612 IFEQ L937 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I213 Branch 613 IF_ICMPLE L939 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 680 TABLESWITCH L1166 Case 5 - true
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 681 TABLESWITCH L1166 Case 6 - true
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 687 TABLESWITCH L1166 Case 12 - true
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 709 TABLESWITCH L1166 Case 34 - true
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 710 TABLESWITCH L1166 Case 35 - true
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 715 TABLESWITCH L1166 Case 40 - true
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 716 TABLESWITCH L1166 Case 41 - true
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 719 TABLESWITCH L1166 Case 44 - true
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 720 TABLESWITCH L1166 Case 45 - true
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1515 Branch 730 IFEQ L1181 - true
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1561 Branch 733 IFEQ L1189 - true
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1727 Branch 742 IFEQ L1221 - true
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1748 Branch 743 IFEQ L1225 - true
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1827 Branch 747 IF_ICMPNE L1241 - true
   */

  @Test
  public void test121()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '1';
      charArray0[1] = 'G';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'1', 'G', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) '\u0000', (int) '\u0000', (int) '\u0000');
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertArrayEquals(new char[] {'1', 'G', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (int) '\u0000');
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertArrayEquals(new char[] {'1', 'G', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals("1", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(66, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertArrayEquals(new char[] {'1', 'G', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 122
  /*
   * 9 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I53 Branch 16 IFNE L20 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I62 Branch 17 IFEQ L20 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 126 TABLESWITCH L159 Case 110 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 140 TABLESWITCH L159 Case 124 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 171 TABLESWITCH L267 Case 65 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 230 TABLESWITCH L267 Case 124 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I603 Branch 253 IFEQ L373 - true
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 726 TABLESWITCH L1166 Default-Case - true
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1459 Branch 727 IFNE L1170 - false
   */

  @Test
  public void test122()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("n|AQ7G");
      assertNotNull(stringBufferInputStream0);
      assertEquals(6, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(6, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(6, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("n", token0.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("|", token1.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(106, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
  }

  //Test case number: 123
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.ReInit(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V: root-Branch
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.ReInit(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;I)V: root-Branch
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.ReInitRounds()V: I15 Branch 809 IFLE L1543 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.ReInitRounds()V: I15 Branch 809 IFLE L1543 - false
   */

  @Test
  public void test123()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      
      StringReader stringReader0 = new StringReader("int");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.ReInit(javaCharStream0, 0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  //Test case number: 124
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 99 TABLESWITCH L159 Case 83 - true
   */

  @Test
  public void test124()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("S");
      assertNotNull(stringBufferInputStream0);
      assertEquals(1, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(1, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(1, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("S", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
  }

  //Test case number: 125
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 120 TABLESWITCH L159 Case 104 - true
   */

  @Test
  public void test125()  throws Throwable  {
      StringReader stringReader0 = new StringReader("h_'x;PB>w9d0qZp;Du");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) stringReader0, 5297, 5297, 5297);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("h_", token0.toString());
      assertEquals(5297, javaCharStream0.getBeginColumn());
      assertEquals(5297, javaCharStream0.getLine());
      assertEquals(5298, javaCharStream0.getEndColumn());
      assertEquals(5297, javaCharStream0.getBeginLine());
      assertEquals(5298, javaCharStream0.getColumn());
      assertEquals(5297, javaCharStream0.getEndLine());
      assertEquals(74, token0.kind);
      assertEquals(5297, token0.beginColumn);
      assertEquals(5298, token0.endColumn);
      assertEquals(5297, token0.endLine);
      assertEquals(5297, token0.beginLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
  }

  //Test case number: 126
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.SwitchTo(I)V: I12 Branch 811 IFGE L1553 - false
   */

  @Test
  public void test126()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, (-6));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -6. State unchanged.
         //
      }
  }

  //Test case number: 127
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 133 TABLESWITCH L159 Case 117 - true
   */

  @Test
  public void test127()  throws Throwable  {
      StringReader stringReader0 = new StringReader("uusm");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) stringReader0, 5291, 5291, 5291);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("uusm", token0.toString());
      assertEquals(5291, javaCharStream0.getBeginLine());
      assertEquals(5291, javaCharStream0.getEndLine());
      assertEquals(5294, javaCharStream0.getColumn());
      assertEquals(5291, javaCharStream0.getBeginColumn());
      assertEquals(5291, javaCharStream0.getLine());
      assertEquals(5294, javaCharStream0.getEndColumn());
      assertEquals(5291, token0.endLine);
      assertEquals(5291, token0.beginLine);
      assertEquals(5291, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(5294, token0.endColumn);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
  }

  //Test case number: 128
  /*
   * 35 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.<init>(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;I)V: root-Branch
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_1()I: root-Branch
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 123 TABLESWITCH L159 Case 107 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 678 TABLESWITCH L1166 Case 3 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 707 TABLESWITCH L1166 Case 32 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_1(II)I: I37 Branch 768 IF_ICMPNE L1332 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_1(II)I: I50 Branch 769 IF_ICMPGE L1334 - true
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_1(II)I: I50 Branch 769 IF_ICMPGE L1334 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_1(II)I: I65 Branch 770 TABLESWITCH L1339 Case 0 - true
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_1(II)I: I65 Branch 771 TABLESWITCH L1339 Case 1 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_1(II)I: I65 Branch 772 TABLESWITCH L1339 Case 2 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_1(II)I: I65 Branch 773 TABLESWITCH L1339 Default-Case - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_1(II)I: I76 Branch 774 IFEQ L1342 - true
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_1(II)I: I97 Branch 776 IF_ICMPNE L1347 - true
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_1(II)I: I171 Branch 780 IF_ICMPNE L1360 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_1(II)I: I186 Branch 781 IF_ICMPGE L1362 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_1(II)I: I203 Branch 782 LOOKUPSWITCH L1367 Default-Case - true
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_1(II)I: I211 Branch 783 IF_ICMPNE L1371 - false
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_1(II)I: I280 Branch 786 IF_ICMPEQ L1388 - true
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_1(II)I: I315 Branch 787 IF_ICMPNE L1395 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.SwitchTo(I)V: I7 Branch 810 IF_ICMPGE L1553 - false
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.SwitchTo(I)V: I12 Branch 811 IFGE L1553 - true
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I57 Branch 813 TABLESWITCH L1605 Case 0 - false
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I57 Branch 814 TABLESWITCH L1605 Case 1 - true
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I152 Branch 820 IFNE L1621 - false
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I159 Branch 821 IF_ICMPLE L1621 - false
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I294 Branch 828 IFEQ L1649 - true
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I353 Branch 830 IFEQ L1658 - true
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I458 Branch 834 IF_ICMPEQ L1679 - true
   * Goal 30. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I542 Branch 835 IF_ICMPGT L1696 - false
   * Goal 31. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I562 Branch 836 IF_ICMPEQ L1697 - false
   * Goal 32. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I569 Branch 837 IF_ICMPNE L1697 - true
   * Goal 33. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I590 Branch 838 IFNE L1704 - true
   * Goal 34. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.MoreLexicalActions()V: I18 Branch 841 LOOKUPSWITCH L1724 Case 7 - false
   * Goal 35. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.MoreLexicalActions()V: I18 Branch 842 LOOKUPSWITCH L1724 Default-Case - true
   */

  @Test
  public void test128()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("bkQs&8t");
      assertNotNull(stringBufferInputStream0);
      assertEquals(7, stringBufferInputStream0.available());
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(6, stringBufferInputStream0.available());
      assertEquals(98, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(6, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(6, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("kQs", token0.toString());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      // Undeclared exception!
      try {
        Token token1 = javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 7.  Encountered: <EOF> after : \"\"
         //
      }
  }

  //Test case number: 129
  /*
   * 278 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 1 TABLESWITCH L13 Case 0 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 6 TABLESWITCH L13 Case 5 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I349 Branch 35 IFNE L78 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 113 TABLESWITCH L159 Case 97 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 164 TABLESWITCH L267 Case 58 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 204 TABLESWITCH L267 Case 98 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I18 Branch 254 IFNE L383 - true
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 255 TABLESWITCH L390 Case 46 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 256 TABLESWITCH L390 Case 47 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 257 TABLESWITCH L390 Case 48 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 258 TABLESWITCH L390 Case 49 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 259 TABLESWITCH L390 Case 50 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 260 TABLESWITCH L390 Case 51 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 261 TABLESWITCH L390 Case 52 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 262 TABLESWITCH L390 Case 53 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 263 TABLESWITCH L390 Case 54 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 264 TABLESWITCH L390 Case 55 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 265 TABLESWITCH L390 Case 56 - false
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 266 TABLESWITCH L390 Case 57 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 267 TABLESWITCH L390 Case 58 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 268 TABLESWITCH L390 Case 59 - false
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 269 TABLESWITCH L390 Case 60 - false
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 270 TABLESWITCH L390 Case 61 - false
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 271 TABLESWITCH L390 Case 62 - false
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 272 TABLESWITCH L390 Case 63 - false
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 273 TABLESWITCH L390 Case 64 - false
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 274 TABLESWITCH L390 Case 65 - false
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 275 TABLESWITCH L390 Case 66 - false
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 276 TABLESWITCH L390 Case 67 - false
   * Goal 30. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 277 TABLESWITCH L390 Case 68 - false
   * Goal 31. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 278 TABLESWITCH L390 Case 69 - false
   * Goal 32. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 279 TABLESWITCH L390 Case 70 - false
   * Goal 33. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 280 TABLESWITCH L390 Case 71 - false
   * Goal 34. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 281 TABLESWITCH L390 Case 72 - false
   * Goal 35. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 282 TABLESWITCH L390 Case 73 - false
   * Goal 36. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 283 TABLESWITCH L390 Case 74 - false
   * Goal 37. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 284 TABLESWITCH L390 Case 75 - false
   * Goal 38. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 285 TABLESWITCH L390 Case 76 - false
   * Goal 39. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 286 TABLESWITCH L390 Case 77 - false
   * Goal 40. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 287 TABLESWITCH L390 Case 78 - false
   * Goal 41. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 288 TABLESWITCH L390 Case 79 - false
   * Goal 42. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 289 TABLESWITCH L390 Case 80 - false
   * Goal 43. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 290 TABLESWITCH L390 Case 81 - false
   * Goal 44. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 291 TABLESWITCH L390 Case 82 - false
   * Goal 45. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 292 TABLESWITCH L390 Case 83 - false
   * Goal 46. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 293 TABLESWITCH L390 Case 84 - false
   * Goal 47. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 294 TABLESWITCH L390 Case 85 - false
   * Goal 48. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 295 TABLESWITCH L390 Case 86 - false
   * Goal 49. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 296 TABLESWITCH L390 Case 87 - false
   * Goal 50. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 297 TABLESWITCH L390 Case 88 - false
   * Goal 51. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 298 TABLESWITCH L390 Case 89 - false
   * Goal 52. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 299 TABLESWITCH L390 Case 90 - false
   * Goal 53. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 300 TABLESWITCH L390 Case 91 - false
   * Goal 54. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 301 TABLESWITCH L390 Case 92 - false
   * Goal 55. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 302 TABLESWITCH L390 Case 93 - false
   * Goal 56. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 303 TABLESWITCH L390 Case 94 - false
   * Goal 57. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 304 TABLESWITCH L390 Case 95 - false
   * Goal 58. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 305 TABLESWITCH L390 Case 96 - false
   * Goal 59. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 306 TABLESWITCH L390 Case 97 - false
   * Goal 60. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 307 TABLESWITCH L390 Case 98 - false
   * Goal 61. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 308 TABLESWITCH L390 Case 99 - false
   * Goal 62. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 309 TABLESWITCH L390 Case 100 - false
   * Goal 63. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 310 TABLESWITCH L390 Case 101 - false
   * Goal 64. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 311 TABLESWITCH L390 Case 102 - false
   * Goal 65. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 312 TABLESWITCH L390 Case 103 - false
   * Goal 66. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 313 TABLESWITCH L390 Case 104 - false
   * Goal 67. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 314 TABLESWITCH L390 Case 105 - false
   * Goal 68. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 315 TABLESWITCH L390 Case 106 - false
   * Goal 69. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 316 TABLESWITCH L390 Case 107 - false
   * Goal 70. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 317 TABLESWITCH L390 Case 108 - false
   * Goal 71. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 318 TABLESWITCH L390 Case 109 - false
   * Goal 72. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 319 TABLESWITCH L390 Case 110 - false
   * Goal 73. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 320 TABLESWITCH L390 Case 111 - false
   * Goal 74. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 321 TABLESWITCH L390 Case 112 - false
   * Goal 75. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 322 TABLESWITCH L390 Case 113 - false
   * Goal 76. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 323 TABLESWITCH L390 Case 114 - false
   * Goal 77. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 324 TABLESWITCH L390 Case 115 - true
   * Goal 78. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 325 TABLESWITCH L390 Case 116 - false
   * Goal 79. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 326 TABLESWITCH L390 Case 117 - false
   * Goal 80. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 327 TABLESWITCH L390 Case 118 - false
   * Goal 81. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 328 TABLESWITCH L390 Case 119 - false
   * Goal 82. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 329 TABLESWITCH L390 Case 120 - false
   * Goal 83. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 330 TABLESWITCH L390 Case 121 - false
   * Goal 84. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 331 TABLESWITCH L390 Default-Case - false
   * Goal 85. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I18 Branch 340 IFNE L459 - true
   * Goal 86. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 341 TABLESWITCH L466 Case 61 - false
   * Goal 87. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 342 TABLESWITCH L466 Case 62 - false
   * Goal 88. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 343 TABLESWITCH L466 Case 63 - false
   * Goal 89. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 344 TABLESWITCH L466 Case 64 - false
   * Goal 90. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 345 TABLESWITCH L466 Case 65 - false
   * Goal 91. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 346 TABLESWITCH L466 Case 66 - false
   * Goal 92. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 347 TABLESWITCH L466 Case 67 - false
   * Goal 93. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 348 TABLESWITCH L466 Case 68 - false
   * Goal 94. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 349 TABLESWITCH L466 Case 69 - false
   * Goal 95. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 350 TABLESWITCH L466 Case 70 - false
   * Goal 96. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 351 TABLESWITCH L466 Case 71 - false
   * Goal 97. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 352 TABLESWITCH L466 Case 72 - false
   * Goal 98. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 353 TABLESWITCH L466 Case 73 - false
   * Goal 99. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 354 TABLESWITCH L466 Case 74 - false
   * Goal 100. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 355 TABLESWITCH L466 Case 75 - false
   * Goal 101. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 356 TABLESWITCH L466 Case 76 - false
   * Goal 102. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 357 TABLESWITCH L466 Case 77 - false
   * Goal 103. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 358 TABLESWITCH L466 Case 78 - false
   * Goal 104. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 359 TABLESWITCH L466 Case 79 - false
   * Goal 105. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 360 TABLESWITCH L466 Case 80 - false
   * Goal 106. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 361 TABLESWITCH L466 Case 81 - false
   * Goal 107. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 362 TABLESWITCH L466 Case 82 - false
   * Goal 108. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 363 TABLESWITCH L466 Case 83 - false
   * Goal 109. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 364 TABLESWITCH L466 Case 84 - false
   * Goal 110. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 365 TABLESWITCH L466 Case 85 - false
   * Goal 111. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 366 TABLESWITCH L466 Case 86 - false
   * Goal 112. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 367 TABLESWITCH L466 Case 87 - false
   * Goal 113. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 368 TABLESWITCH L466 Case 88 - false
   * Goal 114. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 369 TABLESWITCH L466 Case 89 - false
   * Goal 115. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 370 TABLESWITCH L466 Case 90 - false
   * Goal 116. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 371 TABLESWITCH L466 Case 91 - false
   * Goal 117. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 372 TABLESWITCH L466 Case 92 - false
   * Goal 118. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 373 TABLESWITCH L466 Case 93 - false
   * Goal 119. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 374 TABLESWITCH L466 Case 94 - false
   * Goal 120. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 375 TABLESWITCH L466 Case 95 - false
   * Goal 121. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 376 TABLESWITCH L466 Case 96 - false
   * Goal 122. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 377 TABLESWITCH L466 Case 97 - false
   * Goal 123. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 378 TABLESWITCH L466 Case 98 - false
   * Goal 124. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 379 TABLESWITCH L466 Case 99 - false
   * Goal 125. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 380 TABLESWITCH L466 Case 100 - false
   * Goal 126. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 381 TABLESWITCH L466 Case 101 - false
   * Goal 127. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 382 TABLESWITCH L466 Case 102 - false
   * Goal 128. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 383 TABLESWITCH L466 Case 103 - false
   * Goal 129. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 384 TABLESWITCH L466 Case 104 - false
   * Goal 130. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 385 TABLESWITCH L466 Case 105 - false
   * Goal 131. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 386 TABLESWITCH L466 Case 106 - false
   * Goal 132. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 387 TABLESWITCH L466 Case 107 - false
   * Goal 133. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 388 TABLESWITCH L466 Case 108 - false
   * Goal 134. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 389 TABLESWITCH L466 Case 109 - false
   * Goal 135. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 390 TABLESWITCH L466 Case 110 - false
   * Goal 136. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 391 TABLESWITCH L466 Case 111 - false
   * Goal 137. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 392 TABLESWITCH L466 Case 112 - false
   * Goal 138. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 393 TABLESWITCH L466 Case 113 - false
   * Goal 139. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 394 TABLESWITCH L466 Case 114 - false
   * Goal 140. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 395 TABLESWITCH L466 Case 115 - false
   * Goal 141. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 396 TABLESWITCH L466 Case 116 - true
   * Goal 142. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 397 TABLESWITCH L466 Case 117 - false
   * Goal 143. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 398 TABLESWITCH L466 Case 118 - false
   * Goal 144. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 399 TABLESWITCH L466 Default-Case - false
   * Goal 145. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I18 Branch 412 IFNE L535 - true
   * Goal 146. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 413 TABLESWITCH L542 Case 97 - false
   * Goal 147. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 414 TABLESWITCH L542 Case 98 - false
   * Goal 148. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 415 TABLESWITCH L542 Case 99 - false
   * Goal 149. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 416 TABLESWITCH L542 Case 100 - false
   * Goal 150. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 417 TABLESWITCH L542 Case 101 - false
   * Goal 151. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 418 TABLESWITCH L542 Case 102 - false
   * Goal 152. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 419 TABLESWITCH L542 Case 103 - false
   * Goal 153. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 420 TABLESWITCH L542 Case 104 - false
   * Goal 154. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 421 TABLESWITCH L542 Case 105 - false
   * Goal 155. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 422 TABLESWITCH L542 Case 106 - false
   * Goal 156. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 423 TABLESWITCH L542 Case 107 - false
   * Goal 157. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 424 TABLESWITCH L542 Case 108 - false
   * Goal 158. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 425 TABLESWITCH L542 Case 109 - false
   * Goal 159. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 426 TABLESWITCH L542 Case 110 - false
   * Goal 160. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 427 TABLESWITCH L542 Case 111 - false
   * Goal 161. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 428 TABLESWITCH L542 Case 112 - false
   * Goal 162. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 429 TABLESWITCH L542 Case 113 - false
   * Goal 163. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 430 TABLESWITCH L542 Case 114 - true
   * Goal 164. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 431 TABLESWITCH L542 Case 115 - false
   * Goal 165. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 432 TABLESWITCH L542 Case 116 - false
   * Goal 166. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 433 TABLESWITCH L542 Case 117 - false
   * Goal 167. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 434 TABLESWITCH L542 Case 118 - false
   * Goal 168. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 435 TABLESWITCH L542 Case 119 - false
   * Goal 169. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 436 TABLESWITCH L542 Default-Case - false
   * Goal 170. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I230 Branch 442 IFEQ L574 - true
   * Goal 171. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I18 Branch 448 IFNE L607 - true
   * Goal 172. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 449 TABLESWITCH L614 Case 97 - true
   * Goal 173. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 450 TABLESWITCH L614 Case 98 - false
   * Goal 174. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 451 TABLESWITCH L614 Case 99 - false
   * Goal 175. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 452 TABLESWITCH L614 Case 100 - false
   * Goal 176. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 453 TABLESWITCH L614 Case 101 - false
   * Goal 177. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 454 TABLESWITCH L614 Case 102 - false
   * Goal 178. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 455 TABLESWITCH L614 Case 103 - false
   * Goal 179. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 456 TABLESWITCH L614 Case 104 - false
   * Goal 180. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 457 TABLESWITCH L614 Case 105 - false
   * Goal 181. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 458 TABLESWITCH L614 Case 106 - false
   * Goal 182. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 459 TABLESWITCH L614 Case 107 - false
   * Goal 183. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 460 TABLESWITCH L614 Case 108 - false
   * Goal 184. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 461 TABLESWITCH L614 Case 109 - false
   * Goal 185. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 462 TABLESWITCH L614 Case 110 - false
   * Goal 186. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 463 TABLESWITCH L614 Case 111 - false
   * Goal 187. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 464 TABLESWITCH L614 Case 112 - false
   * Goal 188. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 465 TABLESWITCH L614 Case 113 - false
   * Goal 189. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 466 TABLESWITCH L614 Case 114 - false
   * Goal 190. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 467 TABLESWITCH L614 Case 115 - false
   * Goal 191. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 468 TABLESWITCH L614 Case 116 - false
   * Goal 192. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 469 TABLESWITCH L614 Default-Case - false
   * Goal 193. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I18 Branch 479 IFNE L669 - true
   * Goal 194. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 480 TABLESWITCH L676 Case 97 - false
   * Goal 195. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 481 TABLESWITCH L676 Case 98 - false
   * Goal 196. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 482 TABLESWITCH L676 Case 99 - false
   * Goal 197. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 483 TABLESWITCH L676 Case 100 - false
   * Goal 198. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 484 TABLESWITCH L676 Case 101 - false
   * Goal 199. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 485 TABLESWITCH L676 Case 102 - false
   * Goal 200. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 486 TABLESWITCH L676 Case 103 - false
   * Goal 201. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 487 TABLESWITCH L676 Case 104 - false
   * Goal 202. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 488 TABLESWITCH L676 Case 105 - false
   * Goal 203. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 489 TABLESWITCH L676 Case 106 - true
   * Goal 204. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 490 TABLESWITCH L676 Case 107 - false
   * Goal 205. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 491 TABLESWITCH L676 Case 108 - false
   * Goal 206. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 492 TABLESWITCH L676 Case 109 - false
   * Goal 207. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 493 TABLESWITCH L676 Case 110 - false
   * Goal 208. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 494 TABLESWITCH L676 Case 111 - false
   * Goal 209. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 495 TABLESWITCH L676 Case 112 - false
   * Goal 210. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 496 TABLESWITCH L676 Case 113 - false
   * Goal 211. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 497 TABLESWITCH L676 Case 114 - false
   * Goal 212. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 498 TABLESWITCH L676 Case 115 - false
   * Goal 213. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 499 TABLESWITCH L676 Case 116 - false
   * Goal 214. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 500 TABLESWITCH L676 Case 117 - false
   * Goal 215. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 501 TABLESWITCH L676 Case 118 - false
   * Goal 216. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 502 TABLESWITCH L676 Case 119 - false
   * Goal 217. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 503 TABLESWITCH L676 Case 120 - false
   * Goal 218. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 504 TABLESWITCH L676 Case 121 - false
   * Goal 219. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 505 TABLESWITCH L676 Default-Case - false
   * Goal 220. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCheckNAdd(I)V: I11 Branch 547 IF_ICMPEQ L849 - false
   * Goal 221. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I50 Branch 551 IF_ICMPGE L913 - true
   * Goal 222. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1431 Branch 675 IF_ICMPGE L1161 - false
   * Goal 223. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 676 TABLESWITCH L1166 Case 1 - false
   * Goal 224. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 677 TABLESWITCH L1166 Case 2 - false
   * Goal 225. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 678 TABLESWITCH L1166 Case 3 - false
   * Goal 226. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 679 TABLESWITCH L1166 Case 4 - false
   * Goal 227. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 680 TABLESWITCH L1166 Case 5 - false
   * Goal 228. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 681 TABLESWITCH L1166 Case 6 - false
   * Goal 229. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 682 TABLESWITCH L1166 Case 7 - false
   * Goal 230. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 683 TABLESWITCH L1166 Case 8 - false
   * Goal 231. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 684 TABLESWITCH L1166 Case 9 - false
   * Goal 232. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 685 TABLESWITCH L1166 Case 10 - false
   * Goal 233. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 686 TABLESWITCH L1166 Case 11 - false
   * Goal 234. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 687 TABLESWITCH L1166 Case 12 - false
   * Goal 235. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 688 TABLESWITCH L1166 Case 13 - false
   * Goal 236. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 689 TABLESWITCH L1166 Case 14 - false
   * Goal 237. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 690 TABLESWITCH L1166 Case 15 - false
   * Goal 238. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 691 TABLESWITCH L1166 Case 16 - false
   * Goal 239. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 692 TABLESWITCH L1166 Case 17 - false
   * Goal 240. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 693 TABLESWITCH L1166 Case 18 - false
   * Goal 241. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 694 TABLESWITCH L1166 Case 19 - false
   * Goal 242. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 695 TABLESWITCH L1166 Case 20 - false
   * Goal 243. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 696 TABLESWITCH L1166 Case 21 - false
   * Goal 244. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 697 TABLESWITCH L1166 Case 22 - false
   * Goal 245. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 698 TABLESWITCH L1166 Case 23 - false
   * Goal 246. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 699 TABLESWITCH L1166 Case 24 - false
   * Goal 247. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 700 TABLESWITCH L1166 Case 25 - false
   * Goal 248. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 701 TABLESWITCH L1166 Case 26 - false
   * Goal 249. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 702 TABLESWITCH L1166 Case 27 - false
   * Goal 250. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 703 TABLESWITCH L1166 Case 28 - false
   * Goal 251. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 704 TABLESWITCH L1166 Case 29 - false
   * Goal 252. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 705 TABLESWITCH L1166 Case 30 - false
   * Goal 253. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 706 TABLESWITCH L1166 Case 31 - false
   * Goal 254. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 707 TABLESWITCH L1166 Case 32 - true
   * Goal 255. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 708 TABLESWITCH L1166 Case 33 - false
   * Goal 256. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 709 TABLESWITCH L1166 Case 34 - false
   * Goal 257. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 710 TABLESWITCH L1166 Case 35 - false
   * Goal 258. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 711 TABLESWITCH L1166 Case 36 - false
   * Goal 259. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 712 TABLESWITCH L1166 Case 37 - false
   * Goal 260. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 713 TABLESWITCH L1166 Case 38 - false
   * Goal 261. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 714 TABLESWITCH L1166 Case 39 - false
   * Goal 262. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 715 TABLESWITCH L1166 Case 40 - false
   * Goal 263. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 716 TABLESWITCH L1166 Case 41 - false
   * Goal 264. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 717 TABLESWITCH L1166 Case 42 - false
   * Goal 265. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 718 TABLESWITCH L1166 Case 43 - false
   * Goal 266. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 719 TABLESWITCH L1166 Case 44 - false
   * Goal 267. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 720 TABLESWITCH L1166 Case 45 - false
   * Goal 268. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 721 TABLESWITCH L1166 Case 46 - false
   * Goal 269. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 722 TABLESWITCH L1166 Case 47 - false
   * Goal 270. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 723 TABLESWITCH L1166 Case 48 - false
   * Goal 271. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 724 TABLESWITCH L1166 Case 49 - false
   * Goal 272. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 725 TABLESWITCH L1166 Case 50 - false
   * Goal 273. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 726 TABLESWITCH L1166 Default-Case - false
   * Goal 274. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1459 Branch 727 IFNE L1170 - true
   * Goal 275. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1473 Branch 728 IF_ICMPLE L1172 - false
   * Goal 276. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1827 Branch 747 IF_ICMPNE L1241 - false
   * Goal 277. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I2014 Branch 761 IF_ICMPEQ L1278 - false
   * Goal 278. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I2049 Branch 762 IF_ICMPNE L1285 - true
   */

  @Test
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader("abstrajct");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) stringReader0, 5280, 5280, 5280);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(5288, javaCharStream0.getEndColumn());
      assertEquals(5288, javaCharStream0.getColumn());
      assertEquals(5280, javaCharStream0.getBeginColumn());
      assertEquals(5280, javaCharStream0.getEndLine());
      assertEquals(5280, javaCharStream0.getLine());
      assertEquals(5280, javaCharStream0.getBeginLine());
      assertEquals("abstrajct", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(8, javaCharStream0.bufpos);
      assertEquals(5280, token0.beginColumn);
      assertEquals(5280, token0.beginLine);
      assertEquals(5288, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(5280, token0.endLine);
  }

  //Test case number: 130
  /*
   * 279 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.<init>(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V: root-Branch
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStartNfa_0(IJJ)I: root-Branch
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopAtPos(II)I: root-Branch
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 1 TABLESWITCH L13 Case 0 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 2 TABLESWITCH L13 Case 1 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 3 TABLESWITCH L13 Case 2 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 4 TABLESWITCH L13 Case 3 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 5 TABLESWITCH L13 Case 4 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 6 TABLESWITCH L13 Case 5 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 7 TABLESWITCH L13 Case 6 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 8 TABLESWITCH L13 Case 7 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 9 TABLESWITCH L13 Case 8 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 10 TABLESWITCH L13 Case 9 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 11 TABLESWITCH L13 Case 10 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 12 TABLESWITCH L13 Default-Case - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I14 Branch 13 IFNE L16 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I23 Branch 14 IFEQ L16 - true
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I38 Branch 15 IFEQ L18 - true
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I53 Branch 16 IFNE L20 - true
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 49 TABLESWITCH L159 Case 33 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 50 TABLESWITCH L159 Case 34 - false
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 51 TABLESWITCH L159 Case 35 - false
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 52 TABLESWITCH L159 Case 36 - false
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 53 TABLESWITCH L159 Case 37 - false
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 54 TABLESWITCH L159 Case 38 - false
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 55 TABLESWITCH L159 Case 39 - false
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 56 TABLESWITCH L159 Case 40 - false
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 57 TABLESWITCH L159 Case 41 - false
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 58 TABLESWITCH L159 Case 42 - false
   * Goal 30. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 59 TABLESWITCH L159 Case 43 - false
   * Goal 31. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 60 TABLESWITCH L159 Case 44 - false
   * Goal 32. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 61 TABLESWITCH L159 Case 45 - false
   * Goal 33. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 62 TABLESWITCH L159 Case 46 - false
   * Goal 34. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 63 TABLESWITCH L159 Case 47 - false
   * Goal 35. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 64 TABLESWITCH L159 Case 48 - false
   * Goal 36. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 65 TABLESWITCH L159 Case 49 - false
   * Goal 37. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 66 TABLESWITCH L159 Case 50 - false
   * Goal 38. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 67 TABLESWITCH L159 Case 51 - false
   * Goal 39. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 68 TABLESWITCH L159 Case 52 - false
   * Goal 40. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 69 TABLESWITCH L159 Case 53 - false
   * Goal 41. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 70 TABLESWITCH L159 Case 54 - false
   * Goal 42. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 71 TABLESWITCH L159 Case 55 - false
   * Goal 43. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 72 TABLESWITCH L159 Case 56 - false
   * Goal 44. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 73 TABLESWITCH L159 Case 57 - false
   * Goal 45. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 74 TABLESWITCH L159 Case 58 - true
   * Goal 46. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 74 TABLESWITCH L159 Case 58 - false
   * Goal 47. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 75 TABLESWITCH L159 Case 59 - false
   * Goal 48. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 76 TABLESWITCH L159 Case 60 - false
   * Goal 49. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 77 TABLESWITCH L159 Case 61 - false
   * Goal 50. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 78 TABLESWITCH L159 Case 62 - false
   * Goal 51. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 79 TABLESWITCH L159 Case 63 - false
   * Goal 52. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 80 TABLESWITCH L159 Case 64 - false
   * Goal 53. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 81 TABLESWITCH L159 Case 65 - false
   * Goal 54. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 82 TABLESWITCH L159 Case 66 - false
   * Goal 55. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 83 TABLESWITCH L159 Case 67 - false
   * Goal 56. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 84 TABLESWITCH L159 Case 68 - false
   * Goal 57. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 85 TABLESWITCH L159 Case 69 - false
   * Goal 58. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 86 TABLESWITCH L159 Case 70 - false
   * Goal 59. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 87 TABLESWITCH L159 Case 71 - false
   * Goal 60. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 88 TABLESWITCH L159 Case 72 - false
   * Goal 61. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 89 TABLESWITCH L159 Case 73 - false
   * Goal 62. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 90 TABLESWITCH L159 Case 74 - false
   * Goal 63. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 91 TABLESWITCH L159 Case 75 - false
   * Goal 64. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 92 TABLESWITCH L159 Case 76 - false
   * Goal 65. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 93 TABLESWITCH L159 Case 77 - false
   * Goal 66. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 94 TABLESWITCH L159 Case 78 - false
   * Goal 67. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 95 TABLESWITCH L159 Case 79 - false
   * Goal 68. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 96 TABLESWITCH L159 Case 80 - false
   * Goal 69. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 97 TABLESWITCH L159 Case 81 - false
   * Goal 70. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 98 TABLESWITCH L159 Case 82 - false
   * Goal 71. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 99 TABLESWITCH L159 Case 83 - false
   * Goal 72. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 100 TABLESWITCH L159 Case 84 - false
   * Goal 73. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 101 TABLESWITCH L159 Case 85 - false
   * Goal 74. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 102 TABLESWITCH L159 Case 86 - false
   * Goal 75. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 103 TABLESWITCH L159 Case 87 - false
   * Goal 76. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 104 TABLESWITCH L159 Case 88 - false
   * Goal 77. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 105 TABLESWITCH L159 Case 89 - false
   * Goal 78. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 106 TABLESWITCH L159 Case 90 - false
   * Goal 79. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 107 TABLESWITCH L159 Case 91 - false
   * Goal 80. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 108 TABLESWITCH L159 Case 92 - false
   * Goal 81. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 109 TABLESWITCH L159 Case 93 - false
   * Goal 82. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 110 TABLESWITCH L159 Case 94 - false
   * Goal 83. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 111 TABLESWITCH L159 Case 95 - false
   * Goal 84. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 112 TABLESWITCH L159 Case 96 - false
   * Goal 85. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 113 TABLESWITCH L159 Case 97 - false
   * Goal 86. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 114 TABLESWITCH L159 Case 98 - false
   * Goal 87. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 115 TABLESWITCH L159 Case 99 - false
   * Goal 88. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 116 TABLESWITCH L159 Case 100 - false
   * Goal 89. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 117 TABLESWITCH L159 Case 101 - false
   * Goal 90. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 118 TABLESWITCH L159 Case 102 - false
   * Goal 91. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 119 TABLESWITCH L159 Case 103 - false
   * Goal 92. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 120 TABLESWITCH L159 Case 104 - false
   * Goal 93. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 121 TABLESWITCH L159 Case 105 - false
   * Goal 94. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 122 TABLESWITCH L159 Case 106 - false
   * Goal 95. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 123 TABLESWITCH L159 Case 107 - false
   * Goal 96. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 124 TABLESWITCH L159 Case 108 - false
   * Goal 97. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 125 TABLESWITCH L159 Case 109 - false
   * Goal 98. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 126 TABLESWITCH L159 Case 110 - false
   * Goal 99. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 127 TABLESWITCH L159 Case 111 - false
   * Goal 100. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 128 TABLESWITCH L159 Case 112 - false
   * Goal 101. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 129 TABLESWITCH L159 Case 113 - false
   * Goal 102. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 130 TABLESWITCH L159 Case 114 - false
   * Goal 103. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 131 TABLESWITCH L159 Case 115 - true
   * Goal 104. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 131 TABLESWITCH L159 Case 115 - false
   * Goal 105. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 132 TABLESWITCH L159 Case 116 - false
   * Goal 106. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 133 TABLESWITCH L159 Case 117 - false
   * Goal 107. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 134 TABLESWITCH L159 Case 118 - false
   * Goal 108. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 135 TABLESWITCH L159 Case 119 - false
   * Goal 109. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 136 TABLESWITCH L159 Case 120 - false
   * Goal 110. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 137 TABLESWITCH L159 Case 121 - false
   * Goal 111. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 138 TABLESWITCH L159 Case 122 - false
   * Goal 112. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 139 TABLESWITCH L159 Case 123 - false
   * Goal 113. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 140 TABLESWITCH L159 Case 124 - false
   * Goal 114. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 141 TABLESWITCH L159 Case 125 - false
   * Goal 115. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 142 TABLESWITCH L159 Case 126 - false
   * Goal 116. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 143 TABLESWITCH L159 Default-Case - false
   * Goal 117. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 144 TABLESWITCH L267 Case 38 - false
   * Goal 118. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 145 TABLESWITCH L267 Case 39 - false
   * Goal 119. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 146 TABLESWITCH L267 Case 40 - false
   * Goal 120. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 147 TABLESWITCH L267 Case 41 - false
   * Goal 121. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 148 TABLESWITCH L267 Case 42 - false
   * Goal 122. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 149 TABLESWITCH L267 Case 43 - false
   * Goal 123. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 150 TABLESWITCH L267 Case 44 - false
   * Goal 124. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 151 TABLESWITCH L267 Case 45 - false
   * Goal 125. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 152 TABLESWITCH L267 Case 46 - false
   * Goal 126. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 153 TABLESWITCH L267 Case 47 - false
   * Goal 127. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 154 TABLESWITCH L267 Case 48 - false
   * Goal 128. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 155 TABLESWITCH L267 Case 49 - false
   * Goal 129. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 156 TABLESWITCH L267 Case 50 - false
   * Goal 130. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 157 TABLESWITCH L267 Case 51 - false
   * Goal 131. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 158 TABLESWITCH L267 Case 52 - false
   * Goal 132. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 159 TABLESWITCH L267 Case 53 - false
   * Goal 133. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 160 TABLESWITCH L267 Case 54 - false
   * Goal 134. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 161 TABLESWITCH L267 Case 55 - false
   * Goal 135. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 162 TABLESWITCH L267 Case 56 - false
   * Goal 136. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 163 TABLESWITCH L267 Case 57 - false
   * Goal 137. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 164 TABLESWITCH L267 Case 58 - true
   * Goal 138. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 165 TABLESWITCH L267 Case 59 - false
   * Goal 139. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 166 TABLESWITCH L267 Case 60 - false
   * Goal 140. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 167 TABLESWITCH L267 Case 61 - false
   * Goal 141. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 168 TABLESWITCH L267 Case 62 - false
   * Goal 142. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 169 TABLESWITCH L267 Case 63 - false
   * Goal 143. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 170 TABLESWITCH L267 Case 64 - false
   * Goal 144. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 171 TABLESWITCH L267 Case 65 - false
   * Goal 145. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 172 TABLESWITCH L267 Case 66 - false
   * Goal 146. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 173 TABLESWITCH L267 Case 67 - false
   * Goal 147. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 174 TABLESWITCH L267 Case 68 - false
   * Goal 148. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 175 TABLESWITCH L267 Case 69 - false
   * Goal 149. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 176 TABLESWITCH L267 Case 70 - false
   * Goal 150. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 177 TABLESWITCH L267 Case 71 - false
   * Goal 151. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 178 TABLESWITCH L267 Case 72 - false
   * Goal 152. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 179 TABLESWITCH L267 Case 73 - false
   * Goal 153. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 180 TABLESWITCH L267 Case 74 - false
   * Goal 154. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 181 TABLESWITCH L267 Case 75 - false
   * Goal 155. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 182 TABLESWITCH L267 Case 76 - false
   * Goal 156. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 183 TABLESWITCH L267 Case 77 - false
   * Goal 157. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 184 TABLESWITCH L267 Case 78 - false
   * Goal 158. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 185 TABLESWITCH L267 Case 79 - false
   * Goal 159. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 186 TABLESWITCH L267 Case 80 - false
   * Goal 160. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 187 TABLESWITCH L267 Case 81 - false
   * Goal 161. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 188 TABLESWITCH L267 Case 82 - false
   * Goal 162. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 189 TABLESWITCH L267 Case 83 - false
   * Goal 163. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 190 TABLESWITCH L267 Case 84 - false
   * Goal 164. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 191 TABLESWITCH L267 Case 85 - false
   * Goal 165. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 192 TABLESWITCH L267 Case 86 - false
   * Goal 166. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 193 TABLESWITCH L267 Case 87 - false
   * Goal 167. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 194 TABLESWITCH L267 Case 88 - false
   * Goal 168. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 195 TABLESWITCH L267 Case 89 - false
   * Goal 169. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 196 TABLESWITCH L267 Case 90 - false
   * Goal 170. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 197 TABLESWITCH L267 Case 91 - false
   * Goal 171. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 198 TABLESWITCH L267 Case 92 - false
   * Goal 172. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 199 TABLESWITCH L267 Case 93 - false
   * Goal 173. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 200 TABLESWITCH L267 Case 94 - false
   * Goal 174. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 201 TABLESWITCH L267 Case 95 - false
   * Goal 175. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 202 TABLESWITCH L267 Case 96 - false
   * Goal 176. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 203 TABLESWITCH L267 Case 97 - false
   * Goal 177. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 204 TABLESWITCH L267 Case 98 - false
   * Goal 178. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 205 TABLESWITCH L267 Case 99 - false
   * Goal 179. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 206 TABLESWITCH L267 Case 100 - false
   * Goal 180. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 207 TABLESWITCH L267 Case 101 - false
   * Goal 181. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 208 TABLESWITCH L267 Case 102 - false
   * Goal 182. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 209 TABLESWITCH L267 Case 103 - false
   * Goal 183. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 210 TABLESWITCH L267 Case 104 - false
   * Goal 184. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 211 TABLESWITCH L267 Case 105 - false
   * Goal 185. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 212 TABLESWITCH L267 Case 106 - false
   * Goal 186. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 213 TABLESWITCH L267 Case 107 - false
   * Goal 187. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 214 TABLESWITCH L267 Case 108 - false
   * Goal 188. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 215 TABLESWITCH L267 Case 109 - false
   * Goal 189. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 216 TABLESWITCH L267 Case 110 - false
   * Goal 190. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 217 TABLESWITCH L267 Case 111 - false
   * Goal 191. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 218 TABLESWITCH L267 Case 112 - false
   * Goal 192. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 219 TABLESWITCH L267 Case 113 - false
   * Goal 193. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 220 TABLESWITCH L267 Case 114 - false
   * Goal 194. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 221 TABLESWITCH L267 Case 115 - false
   * Goal 195. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 222 TABLESWITCH L267 Case 116 - false
   * Goal 196. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 223 TABLESWITCH L267 Case 117 - false
   * Goal 197. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 224 TABLESWITCH L267 Case 118 - false
   * Goal 198. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 225 TABLESWITCH L267 Case 119 - false
   * Goal 199. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 226 TABLESWITCH L267 Case 120 - false
   * Goal 200. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 227 TABLESWITCH L267 Case 121 - false
   * Goal 201. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 228 TABLESWITCH L267 Case 122 - false
   * Goal 202. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 229 TABLESWITCH L267 Case 123 - false
   * Goal 203. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 230 TABLESWITCH L267 Case 124 - false
   * Goal 204. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 231 TABLESWITCH L267 Default-Case - false
   * Goal 205. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I37 Branch 550 IF_ICMPNE L911 - true
   * Goal 206. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I50 Branch 551 IF_ICMPGE L913 - false
   * Goal 207. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 552 TABLESWITCH L918 Case 0 - false
   * Goal 208. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 553 TABLESWITCH L918 Case 1 - false
   * Goal 209. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 554 TABLESWITCH L918 Case 2 - false
   * Goal 210. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 555 TABLESWITCH L918 Case 3 - false
   * Goal 211. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 556 TABLESWITCH L918 Case 4 - false
   * Goal 212. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 557 TABLESWITCH L918 Case 5 - false
   * Goal 213. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 558 TABLESWITCH L918 Case 6 - false
   * Goal 214. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 559 TABLESWITCH L918 Case 7 - false
   * Goal 215. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 560 TABLESWITCH L918 Case 8 - false
   * Goal 216. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 561 TABLESWITCH L918 Case 9 - false
   * Goal 217. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 562 TABLESWITCH L918 Case 10 - false
   * Goal 218. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 563 TABLESWITCH L918 Case 11 - false
   * Goal 219. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 564 TABLESWITCH L918 Case 12 - false
   * Goal 220. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 565 TABLESWITCH L918 Case 13 - false
   * Goal 221. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 566 TABLESWITCH L918 Case 14 - false
   * Goal 222. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 567 TABLESWITCH L918 Case 15 - false
   * Goal 223. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 568 TABLESWITCH L918 Case 16 - false
   * Goal 224. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 569 TABLESWITCH L918 Case 17 - false
   * Goal 225. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 570 TABLESWITCH L918 Case 18 - false
   * Goal 226. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 571 TABLESWITCH L918 Case 19 - false
   * Goal 227. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 572 TABLESWITCH L918 Case 20 - false
   * Goal 228. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 573 TABLESWITCH L918 Case 21 - false
   * Goal 229. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 574 TABLESWITCH L918 Case 22 - false
   * Goal 230. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 575 TABLESWITCH L918 Case 23 - false
   * Goal 231. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 576 TABLESWITCH L918 Case 24 - false
   * Goal 232. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 577 TABLESWITCH L918 Case 25 - false
   * Goal 233. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 578 TABLESWITCH L918 Case 26 - false
   * Goal 234. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 579 TABLESWITCH L918 Case 27 - false
   * Goal 235. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 580 TABLESWITCH L918 Case 28 - false
   * Goal 236. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 581 TABLESWITCH L918 Case 29 - false
   * Goal 237. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 582 TABLESWITCH L918 Case 30 - false
   * Goal 238. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 583 TABLESWITCH L918 Case 31 - false
   * Goal 239. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 584 TABLESWITCH L918 Case 32 - true
   * Goal 240. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 585 TABLESWITCH L918 Case 33 - false
   * Goal 241. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 586 TABLESWITCH L918 Case 34 - false
   * Goal 242. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 587 TABLESWITCH L918 Case 35 - false
   * Goal 243. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 588 TABLESWITCH L918 Case 36 - false
   * Goal 244. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 589 TABLESWITCH L918 Case 37 - false
   * Goal 245. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 590 TABLESWITCH L918 Case 38 - false
   * Goal 246. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 591 TABLESWITCH L918 Case 39 - false
   * Goal 247. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 592 TABLESWITCH L918 Case 40 - false
   * Goal 248. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 593 TABLESWITCH L918 Case 41 - false
   * Goal 249. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 594 TABLESWITCH L918 Case 42 - false
   * Goal 250. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 595 TABLESWITCH L918 Case 43 - false
   * Goal 251. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 596 TABLESWITCH L918 Case 44 - false
   * Goal 252. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 597 TABLESWITCH L918 Case 45 - false
   * Goal 253. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 598 TABLESWITCH L918 Case 46 - false
   * Goal 254. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 599 TABLESWITCH L918 Case 47 - false
   * Goal 255. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 600 TABLESWITCH L918 Case 48 - false
   * Goal 256. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 601 TABLESWITCH L918 Case 49 - false
   * Goal 257. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 602 TABLESWITCH L918 Case 50 - false
   * Goal 258. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 603 TABLESWITCH L918 Case 51 - false
   * Goal 259. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 604 TABLESWITCH L918 Default-Case - false
   * Goal 260. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I931 Branch 650 IFNE L1070 - false
   * Goal 261. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1416 Branch 674 IF_ICMPNE L1159 - false
   * Goal 262. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I2014 Branch 761 IF_ICMPEQ L1278 - true
   * Goal 263. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I2049 Branch 762 IF_ICMPNE L1285 - false
   * Goal 264. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjFillToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I26 Branch 812 IFNONNULL L1564 - true
   * Goal 265. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjFillToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I26 Branch 812 IFNONNULL L1564 - false
   * Goal 266. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I57 Branch 813 TABLESWITCH L1605 Case 0 - true
   * Goal 267. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I57 Branch 814 TABLESWITCH L1605 Case 1 - false
   * Goal 268. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I57 Branch 815 TABLESWITCH L1605 Case 2 - false
   * Goal 269. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I57 Branch 816 TABLESWITCH L1605 Case 3 - false
   * Goal 270. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I57 Branch 817 TABLESWITCH L1605 Default-Case - false
   * Goal 271. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I72 Branch 818 IF_ICMPGT L1609 - true
   * Goal 272. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I251 Branch 826 IF_ICMPEQ L1645 - false
   * Goal 273. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I262 Branch 827 IF_ICMPGE L1647 - true
   * Goal 274. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I262 Branch 827 IF_ICMPGE L1647 - false
   * Goal 275. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I294 Branch 828 IFEQ L1649 - false
   * Goal 276. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I320 Branch 829 IF_ICMPEQ L1654 - true
   * Goal 277. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.TokenLexicalActions(Lcom/soops/CEN4010/JMCA/JParser/Token;)V: I4 Branch 844 LOOKUPSWITCH L1740 Case 122 - false
   * Goal 278. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.TokenLexicalActions(Lcom/soops/CEN4010/JMCA/JParser/Token;)V: I4 Branch 845 LOOKUPSWITCH L1740 Case 123 - false
   * Goal 279. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.TokenLexicalActions(Lcom/soops/CEN4010/JMCA/JParser/Token;)V: I4 Branch 846 LOOKUPSWITCH L1740 Default-Case - true
   */

  @Test
  public void test130()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("Qs:t");
      assertNotNull(stringBufferInputStream0);
      assertEquals(4, stringBufferInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(4, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      int int0 = stringBufferInputStream0.read();
      assertEquals(3, stringBufferInputStream0.available());
      assertEquals(81, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(3, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("s", token0.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(":", token1.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(92, token1.kind);
      assertFalse(token1.equals((Object)token0));
  }
}
