/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 17 23:12:39 GMT 2015
 */

package com.soops.CEN4010.JMCA.JParser;

import static org.junit.Assert.*;
import org.junit.Test;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.Reader;
import java.io.StringBufferInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 67 TABLESWITCH L159 Case 51 - true
   */

  @Test
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'3', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'3', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) '3', (int) '3');
      assertArrayEquals(new char[] {'3', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'3', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'3', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(51, token0.endColumn);
      assertEquals(51, token0.beginLine);
      assertEquals(66, token0.kind);
      assertEquals(51, token0.endLine);
      assertEquals(51, token0.beginColumn);
      assertEquals(51, javaCharStream0.getLine());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals(51, javaCharStream0.getBeginLine());
      assertEquals(51, javaCharStream0.getBeginColumn());
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals(51, javaCharStream0.getEndLine());
      assertEquals("3", token0.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(token0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 86 TABLESWITCH L159 Case 70 - true
   */

  @Test
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'F';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'F', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) '\u0000', (int) 'F');
      assertArrayEquals(new char[] {'F', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'F', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'F', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(70, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(70, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("F", token0.toString());
      assertEquals(70, javaCharStream0.getColumn());
      assertEquals(70, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(70, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertNotNull(token0);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 71 TABLESWITCH L159 Case 55 - true
   */

  @Test
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '7';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'7', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'7', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'7', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'7', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("7", token0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertNotNull(token0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 57 TABLESWITCH L159 Case 41 - true
   */

  @Test
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[16];
      charArray0[0] = ')';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) ')', (int) '\u0000');
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(41, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(41, token0.beginLine);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(")", token0.toString());
      assertNotNull(token0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 74 TABLESWITCH L159 Case 58 - true
   */

  @Test
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {':', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) '\u0000', (int) ':');
      assertArrayEquals(new char[] {':', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {':', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {':', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(92, token0.kind);
      assertEquals(58, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(58, token0.beginColumn);
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(58, javaCharStream0.getColumn());
      assertEquals(58, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(58, javaCharStream0.getBeginColumn());
      assertEquals(":", token0.toString());
      assertNotNull(token0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 93 TABLESWITCH L159 Case 77 - true
   */

  @Test
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'M';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'M', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'M', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'M', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'M', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("M", token0.toString());
      assertNotNull(token0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 109 TABLESWITCH L159 Case 93 - true
   */

  @Test
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = ']';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {']', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) '\u0000', (int) '`');
      assertArrayEquals(new char[] {']', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {']', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {']', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, token0.beginLine);
      assertEquals(82, token0.kind);
      assertEquals(96, token0.beginColumn);
      assertEquals(96, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(96, javaCharStream0.getEndColumn());
      assertEquals(96, javaCharStream0.getBeginColumn());
      assertEquals(96, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals("]", token0.toString());
      assertNotNull(token0);
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 75 TABLESWITCH L159 Case 59 - true
   */

  @Test
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[16];
      char[] charArray1 = new char[12];
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      
      charArray1[0] = ';';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) ';', (int) '\u0000');
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(83, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(59, token0.beginLine);
      assertEquals(59, token0.endLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotSame(charArray1, charArray0);
      assertEquals(";", token0.toString());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(59, javaCharStream0.getEndLine());
      assertEquals(59, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(59, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(token0);
  }

  //Test case number: 8
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 125 TABLESWITCH L159 Case 109 - true
   */

  @Test
  public void test08()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("mS$");
      assertEquals(3, stringBufferInputStream0.available());
      assertNotNull(stringBufferInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0, 0, 0, 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(3, stringBufferInputStream0.available());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(3, stringBufferInputStream0.available());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("mS$", token0.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertNotNull(token0);
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 100 TABLESWITCH L159 Case 84 - true
   */

  @Test
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'T';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'T', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'T', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) 'T', (int) 'T');
      assertArrayEquals(new char[] {'T', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'T', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'T', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(84, token0.beginColumn);
      assertEquals(84, token0.beginLine);
      assertEquals(84, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(84, token0.endLine);
      assertEquals(84, javaCharStream0.getEndColumn());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(84, javaCharStream0.getBeginColumn());
      assertEquals(84, javaCharStream0.getColumn());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals("T", token0.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(token0);
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 53 TABLESWITCH L159 Case 37 - true
   */

  @Test
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'%', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'%', '\u0000'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) '%', (int) '\u0000');
      assertArrayEquals(new char[] {'%', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'%', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'%', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(108, token0.kind);
      assertEquals(37, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(37, token0.beginLine);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(37, javaCharStream0.getEndLine());
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals(37, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals("%", token0.toString());
      assertNotNull(token0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 97 TABLESWITCH L159 Case 81 - true
   */

  @Test
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = 'Q';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'Q', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'Q', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) '\u0000', (int) '\u0000');
      assertArrayEquals(new char[] {'Q', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'Q', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'Q', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals("Q", token0.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(token0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 138 TABLESWITCH L159 Case 122 - true
   */

  @Test
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'z';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'z', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'z', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) 'z', (int) '\u0000');
      assertArrayEquals(new char[] {'z', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'z', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'z', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(122, token0.beginLine);
      assertEquals(122, token0.endLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals("z", token0.toString());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(122, javaCharStream0.getEndLine());
      assertNotNull(token0);
  }

  //Test case number: 13
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 118 TABLESWITCH L159 Case 102 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 208 TABLESWITCH L267 Case 102 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I446 Branch 251 IFEQ L338 - true
   */

  @Test
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[21];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) 'f', (int) 'f');
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(102, token0.endLine);
      assertEquals(102, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(102, token0.beginColumn);
      assertEquals(103, token0.endColumn);
      assertEquals(102, javaCharStream0.getLine());
      assertEquals(102, javaCharStream0.getBeginLine());
      assertEquals(103, javaCharStream0.getEndColumn());
      assertEquals(102, javaCharStream0.getBeginColumn());
      assertEquals(102, javaCharStream0.getEndLine());
      assertEquals(103, javaCharStream0.getColumn());
      assertEquals("ff", token0.toString());
      assertNotNull(token0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 79 TABLESWITCH L159 Case 63 - true
   */

  @Test
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '?';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'?', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) '\u0000', (int) '?');
      assertArrayEquals(new char[] {'?', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'?', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'?', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(91, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(63, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(63, token0.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals("?", token0.toString());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(63, javaCharStream0.getColumn());
      assertEquals(63, javaCharStream0.getBeginColumn());
      assertEquals(63, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertNotNull(token0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 56 TABLESWITCH L159 Case 40 - true
   */

  @Test
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[12];
      charArray0[0] = '(';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) 'q', (int) '\u0000');
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(77, token0.kind);
      assertEquals(113, token0.endLine);
      assertEquals(113, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(113, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(113, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(113, javaCharStream0.getEndLine());
      assertEquals("(", token0.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(token0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 96 TABLESWITCH L159 Case 80 - true
   */

  @Test
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'P';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'P'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) 'k', (int) (byte)87);
      assertArrayEquals(new char[] {'P'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'P'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'P'}, charArray0);
      assertEquals(107, token0.endLine);
      assertEquals(107, token0.beginLine);
      assertEquals(87, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(87, token0.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals("P", token0.toString());
      assertEquals(107, javaCharStream0.getBeginLine());
      assertEquals(107, javaCharStream0.getEndLine());
      assertEquals(87, javaCharStream0.getEndColumn());
      assertEquals(87, javaCharStream0.getColumn());
      assertEquals(87, javaCharStream0.getBeginColumn());
      assertEquals(107, javaCharStream0.getLine());
      assertNotNull(token0);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 137 TABLESWITCH L159 Case 121 - true
   */

  @Test
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'y';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'y', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) (byte)87, (int) '\u0000', (int) '\u0000');
      assertArrayEquals(new char[] {'y', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'y', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'y', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(87, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(87, token0.endLine);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(87, javaCharStream0.getEndLine());
      assertEquals(87, javaCharStream0.getBeginLine());
      assertEquals(87, javaCharStream0.getLine());
      assertEquals("y", token0.toString());
      assertNotNull(token0);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 101 TABLESWITCH L159 Case 85 - true
   */

  @Test
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'U';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'U', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) '\u0000', (int) 'U');
      assertArrayEquals(new char[] {'U', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'U', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'U', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(85, token0.endColumn);
      assertEquals(85, token0.beginColumn);
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(85, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getBeginColumn());
      assertEquals("U", token0.toString());
      assertNotNull(token0);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 136 TABLESWITCH L159 Case 120 - true
   */

  @Test
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[23];
      charArray0[0] = 'x';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader((Reader) charArrayReader0);
      assertNotNull(bufferedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) bufferedReader0, (int) 'x', (int) 'x');
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(120, token0.endLine);
      assertEquals(120, token0.endColumn);
      assertEquals(120, token0.beginColumn);
      assertEquals(120, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(120, javaCharStream0.getEndColumn());
      assertEquals(120, javaCharStream0.getLine());
      assertEquals(120, javaCharStream0.getBeginLine());
      assertEquals(120, javaCharStream0.getBeginColumn());
      assertEquals(120, javaCharStream0.getColumn());
      assertEquals(120, javaCharStream0.getEndLine());
      assertEquals("x", token0.toString());
      assertNotNull(token0);
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 122 TABLESWITCH L159 Case 106 - true
   */

  @Test
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'j';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'j', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'j', '\u0000'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) 'j', (int) 'b');
      assertArrayEquals(new char[] {'j', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'j', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'j', '\u0000'}, charArray0);
      assertEquals(98, token0.beginColumn);
      assertEquals(106, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(98, token0.endColumn);
      assertEquals(106, token0.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals("j", token0.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(98, javaCharStream0.getBeginColumn());
      assertEquals(98, javaCharStream0.getColumn());
      assertEquals(106, javaCharStream0.getLine());
      assertEquals(106, javaCharStream0.getBeginLine());
      assertEquals(98, javaCharStream0.getEndColumn());
      assertEquals(106, javaCharStream0.getEndLine());
      assertNotNull(token0);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 218 TABLESWITCH L267 Case 112 - true
   */

  @Test
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'p';
      charArray0[1] = 'p';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'p', 'p'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'p', 'p'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) 'p', (int) 'p');
      assertArrayEquals(new char[] {'p', 'p'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'p', 'p'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'p', 'p'}, charArray0);
      assertEquals(113, token0.endColumn);
      assertEquals(112, token0.beginLine);
      assertEquals(112, token0.endLine);
      assertEquals(112, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals("pp", token0.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(112, javaCharStream0.getBeginColumn());
      assertEquals(112, javaCharStream0.getEndLine());
      assertEquals(113, javaCharStream0.getEndColumn());
      assertEquals(112, javaCharStream0.getLine());
      assertEquals(113, javaCharStream0.getColumn());
      assertEquals(112, javaCharStream0.getBeginLine());
      assertNotNull(token0);
  }

  //Test case number: 22
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 129 TABLESWITCH L159 Case 113 - true
   */

  @Test
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'q', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'q', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) (byte)87, (int) (byte)87);
      assertArrayEquals(new char[] {'q', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'q', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'q', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(87, token0.endColumn);
      assertEquals(87, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(87, token0.beginLine);
      assertEquals(87, token0.endLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals("q", token0.toString());
      assertEquals(87, javaCharStream0.getBeginLine());
      assertEquals(87, javaCharStream0.getLine());
      assertEquals(87, javaCharStream0.getEndLine());
      assertEquals(87, javaCharStream0.getColumn());
      assertEquals(87, javaCharStream0.getEndColumn());
      assertEquals(87, javaCharStream0.getBeginColumn());
      assertNotNull(token0);
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 94 TABLESWITCH L159 Case 78 - true
   */

  @Test
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'N';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'N', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'N', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) 'N', (int) '\u0000');
      assertArrayEquals(new char[] {'N', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'N', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'N', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(78, token0.beginLine);
      assertEquals(78, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(78, javaCharStream0.getLine());
      assertEquals(78, javaCharStream0.getBeginLine());
      assertEquals(78, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals("N", token0.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(token0);
  }

  //Test case number: 24
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 128 TABLESWITCH L159 Case 112 - true
   */

  @Test
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'p';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'p', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'p', '\u0000'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) 'p', (int) '\u0000');
      assertArrayEquals(new char[] {'p', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'p', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'p', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(112, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(112, token0.endLine);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(112, javaCharStream0.getLine());
      assertEquals(112, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(112, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals("p", token0.toString());
      assertNotNull(token0);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 60 TABLESWITCH L159 Case 44 - true
   */

  @Test
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[16];
      charArray0[0] = ',';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) '\u0000', (int) '\u0000');
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertEquals(84, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(",", token0.toString());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertNotNull(token0);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 83 TABLESWITCH L159 Case 67 - true
   */

  @Test
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'C';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'C', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'C', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) 'C', (int) 'C');
      assertArrayEquals(new char[] {'C', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'C', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'C', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(74, token0.kind);
      assertEquals(67, token0.endColumn);
      assertEquals(67, token0.beginLine);
      assertEquals(67, token0.endLine);
      assertEquals(67, token0.beginColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("C", token0.toString());
      assertEquals(67, javaCharStream0.getLine());
      assertEquals(67, javaCharStream0.getEndLine());
      assertEquals(67, javaCharStream0.getColumn());
      assertEquals(67, javaCharStream0.getBeginColumn());
      assertEquals(67, javaCharStream0.getBeginLine());
      assertEquals(67, javaCharStream0.getEndColumn());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(token0);
  }

  //Test case number: 27
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 73 TABLESWITCH L159 Case 57 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1880 Branch 753 LOOKUPSWITCH L1252 Default-Case - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I2006 Branch 760 IF_ICMPNE L1276 - true
   */

  @Test
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[12];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = '\u0083';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) 'q', (int) 'q');
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(113, token0.beginColumn);
      assertEquals(113, token0.endLine);
      assertEquals(114, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(113, token0.beginLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals("99", token0.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(113, javaCharStream0.getEndLine());
      assertEquals(113, javaCharStream0.getBeginLine());
      assertEquals(113, javaCharStream0.getBeginColumn());
      assertEquals(113, javaCharStream0.getLine());
      assertEquals(114, javaCharStream0.getEndColumn());
      assertEquals(114, javaCharStream0.getColumn());
      assertNotNull(token0);
  }

  //Test case number: 28
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 123 TABLESWITCH L159 Case 107 - true
   */

  @Test
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'k';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'k', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'k', '\u0000'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) 'k', (int) '\u0000');
      assertArrayEquals(new char[] {'k', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'k', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'k', '\u0000'}, charArray0);
      assertEquals(0, token0.endColumn);
      assertEquals(107, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(107, token0.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals("k", token0.toString());
      assertEquals(107, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(107, javaCharStream0.getLine());
      assertEquals(107, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertNotNull(token0);
  }

  //Test case number: 29
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 141 TABLESWITCH L159 Case 125 - true
   */

  @Test
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '}';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) '}', (int) '}');
      assertArrayEquals(new char[] {'}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(125, token0.endLine);
      assertEquals(125, token0.endColumn);
      assertEquals(80, token0.kind);
      assertEquals(125, token0.beginColumn);
      assertEquals(125, token0.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals("}", token0.toString());
      assertEquals(125, javaCharStream0.getBeginColumn());
      assertEquals(125, javaCharStream0.getEndLine());
      assertEquals(125, javaCharStream0.getEndColumn());
      assertEquals(125, javaCharStream0.getLine());
      assertEquals(125, javaCharStream0.getColumn());
      assertEquals(125, javaCharStream0.getBeginLine());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(token0);
  }

  //Test case number: 30
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.MoreLexicalActions()V: I18 Branch 841 LOOKUPSWITCH L1724 Case 7 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.MoreLexicalActions()V: I18 Branch 842 LOOKUPSWITCH L1724 Default-Case - true
   */

  @Test
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) byteArrayInputStream0, (int) (byte) (-23), (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
  }

  //Test case number: 31
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 61 TABLESWITCH L159 Case 45 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I98 Branch 235 IFEQ L282 - false
   */

  @Test
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'-', '-', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) '-', (int) '-');
      assertArrayEquals(new char[] {'-', '-', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'-', '-', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'-', '-', '\u0000'}, charArray0);
      assertEquals(45, token0.beginColumn);
      assertEquals(45, token0.beginLine);
      assertEquals(46, token0.endColumn);
      assertEquals(100, token0.kind);
      assertEquals(45, token0.endLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals("--", token0.toString());
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals(45, javaCharStream0.getBeginColumn());
      assertEquals(45, javaCharStream0.getLine());
      assertEquals(46, javaCharStream0.getEndColumn());
      assertEquals(46, javaCharStream0.getColumn());
      assertEquals(45, javaCharStream0.getEndLine());
      assertNotNull(token0);
  }

  //Test case number: 32
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 133 TABLESWITCH L159 Case 117 - true
   */

  @Test
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'u';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'u', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) (byte)87, (int) 'u', (int) 'u');
      assertArrayEquals(new char[] {'u', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'u', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'u', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(87, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(117, token0.endColumn);
      assertEquals(87, token0.beginLine);
      assertEquals(117, token0.beginColumn);
      assertEquals(87, javaCharStream0.getEndLine());
      assertEquals(87, javaCharStream0.getBeginLine());
      assertEquals(117, javaCharStream0.getEndColumn());
      assertEquals(117, javaCharStream0.getBeginColumn());
      assertEquals(87, javaCharStream0.getLine());
      assertEquals(117, javaCharStream0.getColumn());
      assertEquals("u", token0.toString());
      assertNotNull(token0);
  }

  //Test case number: 33
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 106 TABLESWITCH L159 Case 90 - true
   */

  @Test
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'Z'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'Z'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) 'Z', (int) 'Z');
      assertArrayEquals(new char[] {'Z'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'Z'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'Z'}, charArray0);
      assertEquals(90, token0.endLine);
      assertEquals(90, token0.beginColumn);
      assertEquals(90, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(90, token0.endColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("Z", token0.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(90, javaCharStream0.getColumn());
      assertEquals(90, javaCharStream0.getLine());
      assertEquals(90, javaCharStream0.getEndLine());
      assertEquals(90, javaCharStream0.getBeginColumn());
      assertEquals(90, javaCharStream0.getBeginLine());
      assertEquals(90, javaCharStream0.getEndColumn());
      assertNotNull(token0);
  }

  //Test case number: 34
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I542 Branch 835 IF_ICMPGT L1696 - false
   */

  @Test
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'A', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'A', '\u0000'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) 'A', (int) 'A');
      assertArrayEquals(new char[] {'A', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'A', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'A', '\u0000'}, charArray0);
      assertEquals(65, token0.endLine);
      assertEquals(65, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(65, token0.endColumn);
      assertEquals(65, token0.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals("A", token0.toString());
      assertEquals(65, javaCharStream0.getBeginColumn());
      assertEquals(65, javaCharStream0.getColumn());
      assertEquals(65, javaCharStream0.getLine());
      assertEquals(65, javaCharStream0.getEndColumn());
      assertEquals(65, javaCharStream0.getEndLine());
      assertEquals(65, javaCharStream0.getBeginLine());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(token0);
      
      // Undeclared exception!
      try {
        Token token1 = javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 65, column 67.  Encountered: <EOF> after : \"\"
         //
      }
  }

  //Test case number: 35
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 84 TABLESWITCH L159 Case 68 - true
   */

  @Test
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[25];
      charArray0[0] = 'D';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) 'D', (int) 'D');
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(68, token0.beginColumn);
      assertEquals(68, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(68, token0.endLine);
      assertEquals(68, token0.endColumn);
      assertEquals(68, javaCharStream0.getBeginLine());
      assertEquals(68, javaCharStream0.getBeginColumn());
      assertEquals(68, javaCharStream0.getLine());
      assertEquals(68, javaCharStream0.getColumn());
      assertEquals(68, javaCharStream0.getEndLine());
      assertEquals(68, javaCharStream0.getEndColumn());
      assertEquals("D", token0.toString());
      assertNotNull(token0);
  }

  //Test case number: 36
  /*
   * 6 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 575 TABLESWITCH L918 Case 23 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 576 TABLESWITCH L918 Case 24 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 578 TABLESWITCH L918 Case 26 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I738 Branch 640 IFEQ L1035 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I778 Branch 642 IF_ICMPNE L1043 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I784 Branch 643 IF_ICMPLE L1043 - false
   */

  @Test
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\"', '\"'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'\"', '\"'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) '\"', (int) '\"');
      assertArrayEquals(new char[] {'\"', '\"'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'\"', '\"'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'\"', '\"'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(34, token0.beginLine);
      assertEquals(34, token0.beginColumn);
      assertEquals(35, token0.endColumn);
      assertEquals(73, token0.kind);
      assertEquals(34, token0.endLine);
      assertEquals(35, javaCharStream0.getColumn());
      assertEquals(34, javaCharStream0.getBeginColumn());
      assertEquals(34, javaCharStream0.getEndLine());
      assertEquals(34, javaCharStream0.getBeginLine());
      assertEquals(35, javaCharStream0.getEndColumn());
      assertEquals(34, javaCharStream0.getLine());
      assertEquals("\"\"", token0.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(token0);
  }

  //Test case number: 37
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 77 TABLESWITCH L159 Case 61 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 151 TABLESWITCH L267 Case 45 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I98 Branch 235 IFEQ L282 - true
   */

  @Test
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[13];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[0] = '=';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) '=', (int) '\u0000');
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(87, token0.kind);
      assertEquals(61, token0.endLine);
      assertEquals(61, token0.beginLine);
      assertEquals(61, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(61, javaCharStream0.getBeginLine());
      assertEquals(61, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals("=", token0.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(token0);
  }

  //Test case number: 38
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 52 TABLESWITCH L159 Case 36 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I95 Branch 606 IF_ICMPNE L923 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I103 Branch 607 IF_ICMPLE L925 - false
   */

  @Test
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[16];
      charArray0[0] = '$';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) '$', (int) '$');
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(36, token0.endLine);
      assertEquals(36, token0.beginColumn);
      assertEquals(36, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(36, token0.beginLine);
      assertEquals(36, javaCharStream0.getEndColumn());
      assertEquals(36, javaCharStream0.getBeginColumn());
      assertEquals(36, javaCharStream0.getColumn());
      assertEquals(36, javaCharStream0.getBeginLine());
      assertEquals(36, javaCharStream0.getLine());
      assertEquals(36, javaCharStream0.getEndLine());
      assertEquals("$", token0.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(token0);
  }

  //Test case number: 39
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 111 TABLESWITCH L159 Case 95 - true
   */

  @Test
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '_';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'_', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) '_', (int) '_');
      assertArrayEquals(new char[] {'_', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'_', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'_', '\u0000'}, charArray0);
      assertEquals(95, token0.endColumn);
      assertEquals(95, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(95, token0.beginColumn);
      assertEquals(95, token0.endLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("_", token0.toString());
      assertEquals(95, javaCharStream0.getBeginLine());
      assertEquals(95, javaCharStream0.getEndLine());
      assertEquals(95, javaCharStream0.getBeginColumn());
      assertEquals(95, javaCharStream0.getEndColumn());
      assertEquals(95, javaCharStream0.getLine());
      assertEquals(95, javaCharStream0.getColumn());
      assertNotNull(token0);
  }

  //Test case number: 40
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 726 TABLESWITCH L1166 Default-Case - true
   */

  @Test
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[25];
      charArray0[0] = '&';
      charArray0[1] = 'g';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) '&', (int) 'g');
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(38, token0.beginLine);
      assertEquals(103, token0.beginColumn);
      assertEquals(38, token0.endLine);
      assertEquals(105, token0.kind);
      assertEquals(103, token0.endColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals("&", token0.toString());
      assertEquals(103, javaCharStream0.getBeginColumn());
      assertEquals(103, javaCharStream0.getColumn());
      assertEquals(38, javaCharStream0.getEndLine());
      assertEquals(38, javaCharStream0.getBeginLine());
      assertEquals(103, javaCharStream0.getEndColumn());
      assertEquals(38, javaCharStream0.getLine());
      assertNotNull(token0);
  }

  //Test case number: 41
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1561 Branch 733 IFEQ L1189 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1567 Branch 734 IF_ICMPLE L1189 - false
   */

  @Test
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[16];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = '5';
      charArray0[4] = '5';
      charArray0[5] = 'F';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) '5', (int) '5');
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(53, token0.beginLine);
      assertEquals(58, token0.endColumn);
      assertEquals(53, token0.endLine);
      assertEquals(70, token0.kind);
      assertEquals(53, token0.beginColumn);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals("55555F", token0.toString());
      assertEquals(58, javaCharStream0.getColumn());
      assertEquals(53, javaCharStream0.getEndLine());
      assertEquals(53, javaCharStream0.getBeginLine());
      assertEquals(53, javaCharStream0.getLine());
      assertEquals(58, javaCharStream0.getEndColumn());
      assertEquals(53, javaCharStream0.getBeginColumn());
      assertNotNull(token0);
  }

  //Test case number: 42
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 54 TABLESWITCH L159 Case 38 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 144 TABLESWITCH L267 Case 38 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I43 Branch 232 IFEQ L270 - false
   */

  @Test
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[25];
      charArray0[0] = '&';
      charArray0[1] = '&';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) '&', (int) '&');
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(38, token0.endLine);
      assertEquals(98, token0.kind);
      assertEquals(38, token0.beginColumn);
      assertEquals(38, token0.beginLine);
      assertEquals(39, token0.endColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals("&&", token0.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(38, javaCharStream0.getBeginLine());
      assertEquals(39, javaCharStream0.getEndColumn());
      assertEquals(38, javaCharStream0.getLine());
      assertEquals(38, javaCharStream0.getBeginColumn());
      assertEquals(39, javaCharStream0.getColumn());
      assertEquals(38, javaCharStream0.getEndLine());
      assertNotNull(token0);
  }

  //Test case number: 43
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 95 TABLESWITCH L159 Case 79 - true
   */

  @Test
  public void test43()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'O', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'O', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) 'O', (int) 'O');
      assertArrayEquals(new char[] {'O', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'O', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'O', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(79, token0.beginLine);
      assertEquals(79, token0.beginColumn);
      assertEquals(79, token0.endColumn);
      assertEquals(79, token0.endLine);
      assertEquals(74, token0.kind);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("O", token0.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(79, javaCharStream0.getBeginLine());
      assertEquals(79, javaCharStream0.getBeginColumn());
      assertEquals(79, javaCharStream0.getEndColumn());
      assertEquals(79, javaCharStream0.getLine());
      assertEquals(79, javaCharStream0.getEndLine());
      assertEquals(79, javaCharStream0.getColumn());
      assertNotNull(token0);
  }

  //Test case number: 44
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 117 TABLESWITCH L159 Case 101 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 207 TABLESWITCH L267 Case 101 - true
   */

  @Test
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[21];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) 'e', (int) 'e');
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(101, token0.beginLine);
      assertEquals(101, token0.endLine);
      assertEquals(101, token0.beginColumn);
      assertEquals(102, token0.endColumn);
      assertEquals(74, token0.kind);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals("ee", token0.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(102, javaCharStream0.getColumn());
      assertEquals(102, javaCharStream0.getEndColumn());
      assertEquals(101, javaCharStream0.getLine());
      assertEquals(101, javaCharStream0.getBeginLine());
      assertEquals(101, javaCharStream0.getEndLine());
      assertEquals(101, javaCharStream0.getBeginColumn());
      assertNotNull(token0);
  }

  //Test case number: 45
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I62 Branch 17 IFEQ L20 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 49 TABLESWITCH L159 Case 33 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 604 TABLESWITCH L918 Default-Case - true
   */

  @Test
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '!';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'!', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'!', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) '$', (int) '$');
      assertArrayEquals(new char[] {'!', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'!', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'!', '\u0000', '\u0000'}, charArray0);
      assertEquals(36, token0.endLine);
      assertEquals(36, token0.beginLine);
      assertEquals(89, token0.kind);
      assertEquals(36, token0.beginColumn);
      assertEquals(36, token0.endColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("!", token0.toString());
      assertEquals(36, javaCharStream0.getEndColumn());
      assertEquals(36, javaCharStream0.getLine());
      assertEquals(36, javaCharStream0.getEndLine());
      assertEquals(36, javaCharStream0.getColumn());
      assertEquals(36, javaCharStream0.getBeginLine());
      assertEquals(36, javaCharStream0.getBeginColumn());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(token0);
  }

  //Test case number: 46
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.SkipLexicalActions(Lcom/soops/CEN4010/JMCA/JParser/Token;)V: I4 Branch 840 LOOKUPSWITCH L1715 Default-Case - true
   */

  @Test
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte) (-70), (int) (byte) (-70));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(-70, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) byteArrayInputStream0, (int) (byte) (-70), (int) (byte) (-70), (int) (byte) (-70));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(-70, byteArrayInputStream0.available());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(-70, byteArrayInputStream0.available());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = Token.newToken((int) (byte) (-70));
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNull(token0.toString());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(-70, byteArrayInputStream0.available());
  }

  //Test case number: 47
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 99 TABLESWITCH L159 Case 83 - true
   */

  @Test
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[25];
      charArray0[0] = 'S';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) 'S', (int) 'S');
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(83, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(83, token0.endLine);
      assertEquals(83, token0.beginColumn);
      assertEquals(83, token0.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals("S", token0.toString());
      assertEquals(83, javaCharStream0.getLine());
      assertEquals(83, javaCharStream0.getEndColumn());
      assertEquals(83, javaCharStream0.getBeginColumn());
      assertEquals(83, javaCharStream0.getBeginLine());
      assertEquals(83, javaCharStream0.getEndLine());
      assertEquals(83, javaCharStream0.getColumn());
      assertNotNull(token0);
  }

  //Test case number: 48
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 121 TABLESWITCH L159 Case 105 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 198 TABLESWITCH L267 Case 92 - true
   */

  @Test
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      charArray0[1] = '\\';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'i', '\\', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) '\u0000', (int) '$');
      assertArrayEquals(new char[] {'i', '\\', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'i', '\\', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'i', '\\', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(36, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(36, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(36, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(36, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(36, javaCharStream0.getBeginColumn());
      assertEquals("i", token0.toString());
      assertNotNull(token0);
  }

  //Test case number: 49
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 120 TABLESWITCH L159 Case 104 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I931 Branch 650 IFNE L1070 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I945 Branch 651 IF_ICMPLE L1072 - false
   */

  @Test
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      charArray0[2] = '9';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'h', 'h', '9', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'h', 'h', '9', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) '\u0000', (int) 'h');
      assertArrayEquals(new char[] {'h', 'h', '9', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'h', 'h', '9', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'h', 'h', '9', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(0, token0.beginLine);
      assertEquals(106, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(104, token0.beginColumn);
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(104, javaCharStream0.getBeginColumn());
      assertEquals(106, javaCharStream0.getColumn());
      assertEquals(106, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals("hh9", token0.toString());
      assertNotNull(token0);
  }

  //Test case number: 50
  /*
   * 5 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1880 Branch 749 LOOKUPSWITCH L1252 Case 3 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1880 Branch 752 LOOKUPSWITCH L1252 Case 32 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCanMove_1(IIIJJ)Z: I3 Branch 797 LOOKUPSWITCH L1447 Case 0 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCanMove_1(IIIJJ)Z: I3 Branch 802 LOOKUPSWITCH L1447 Default-Case - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCanMove_1(IIIJJ)Z: I126 Branch 808 IFEQ L1460 - true
   */

  @Test
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte) (-27);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(25, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) byteArrayInputStream0, (int) (byte)0, (int) (byte)0, (int) (byte)0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(25, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(25, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try {
        Token token0 = javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 0.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
      }
  }

  //Test case number: 51
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I53 Branch 16 IFNE L20 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I62 Branch 17 IFEQ L20 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 135 TABLESWITCH L159 Case 119 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 225 TABLESWITCH L267 Case 119 - true
   */

  @Test
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'w', 'w', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'w', 'w', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) 'w', (int) 'w');
      assertArrayEquals(new char[] {'w', 'w', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'w', 'w', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'w', 'w', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(119, token0.beginColumn);
      assertEquals(119, token0.beginLine);
      assertEquals(119, token0.endLine);
      assertEquals(120, token0.endColumn);
      assertEquals(119, javaCharStream0.getEndLine());
      assertEquals(120, javaCharStream0.getEndColumn());
      assertEquals(119, javaCharStream0.getLine());
      assertEquals(120, javaCharStream0.getColumn());
      assertEquals(119, javaCharStream0.getBeginColumn());
      assertEquals(119, javaCharStream0.getBeginLine());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals("ww", token0.toString());
      assertNotNull(token0);
  }

  //Test case number: 52
  /*
   * 8 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 1 TABLESWITCH L13 Case 0 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 2 TABLESWITCH L13 Case 1 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I86 Branch 18 IFEQ L27 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I101 Branch 19 IFNE L29 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I119 Branch 21 IF_ICMPEQ L31 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 113 TABLESWITCH L159 Case 97 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 221 TABLESWITCH L267 Case 115 - true
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I18 Branch 254 IFNE L383 - true
   */

  @Test
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'a';
      charArray0[1] = 's';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'a', 's'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'a', 's'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) 'a', (int) 's');
      assertArrayEquals(new char[] {'a', 's'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'a', 's'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'a', 's'}, charArray0);
      assertEquals(115, token0.beginColumn);
      assertEquals(97, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(116, token0.endColumn);
      assertEquals(97, token0.beginLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals("as", token0.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(97, javaCharStream0.getBeginLine());
      assertEquals(97, javaCharStream0.getEndLine());
      assertEquals(116, javaCharStream0.getColumn());
      assertEquals(97, javaCharStream0.getLine());
      assertEquals(116, javaCharStream0.getEndColumn());
      assertEquals(115, javaCharStream0.getBeginColumn());
      assertNotNull(token0);
  }

  //Test case number: 53
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 114 TABLESWITCH L159 Case 98 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 204 TABLESWITCH L267 Case 98 - true
   */

  @Test
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'b', 'b', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'b', 'b', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) 'b', (int) 'b');
      assertArrayEquals(new char[] {'b', 'b', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'b', 'b', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'b', 'b', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(98, token0.beginLine);
      assertEquals(99, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(98, token0.endLine);
      assertEquals(98, token0.beginColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals("bb", token0.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(98, javaCharStream0.getBeginLine());
      assertEquals(98, javaCharStream0.getBeginColumn());
      assertEquals(98, javaCharStream0.getLine());
      assertEquals(99, javaCharStream0.getEndColumn());
      assertEquals(99, javaCharStream0.getColumn());
      assertEquals(98, javaCharStream0.getEndLine());
      assertNotNull(token0);
  }

  //Test case number: 54
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 81 TABLESWITCH L159 Case 65 - true
   */

  @Test
  public void test54()  throws Throwable  {
      char[] charArray0 = new char[25];
      charArray0[0] = 'A';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) 'A', (int) '\u0000');
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.endColumn);
      assertEquals(65, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(65, token0.endLine);
      assertEquals(65, javaCharStream0.getBeginLine());
      assertEquals(65, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(65, javaCharStream0.getLine());
      assertEquals("A", token0.toString());
      assertNotNull(token0);
  }

  //Test case number: 55
  /*
   * 14 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 69 TABLESWITCH L159 Case 53 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 680 TABLESWITCH L1166 Case 5 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 681 TABLESWITCH L1166 Case 6 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 687 TABLESWITCH L1166 Case 12 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 709 TABLESWITCH L1166 Case 34 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 710 TABLESWITCH L1166 Case 35 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 715 TABLESWITCH L1166 Case 40 - true
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 716 TABLESWITCH L1166 Case 41 - true
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 719 TABLESWITCH L1166 Case 44 - true
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 720 TABLESWITCH L1166 Case 45 - true
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1515 Branch 730 IFEQ L1181 - true
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1561 Branch 733 IFEQ L1189 - true
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1727 Branch 742 IFEQ L1221 - true
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1748 Branch 743 IFEQ L1225 - true
   */

  @Test
  public void test55()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      charArray0[1] = 'a';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'5', 'a'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'5', 'a'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) '5', (int) '5', (int) '5');
      assertArrayEquals(new char[] {'5', 'a'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'5', 'a'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'5', 'a'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(66, token0.kind);
      assertEquals(53, token0.endLine);
      assertEquals(53, token0.beginColumn);
      assertEquals(53, token0.endColumn);
      assertEquals(53, token0.beginLine);
      assertEquals(53, javaCharStream0.getBeginLine());
      assertEquals(53, javaCharStream0.getEndLine());
      assertEquals(53, javaCharStream0.getEndColumn());
      assertEquals(53, javaCharStream0.getColumn());
      assertEquals(53, javaCharStream0.getLine());
      assertEquals(53, javaCharStream0.getBeginColumn());
      assertEquals("5", token0.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(token0);
  }

  //Test case number: 56
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 115 TABLESWITCH L159 Case 99 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 205 TABLESWITCH L267 Case 99 - true
   */

  @Test
  public void test56()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'c', 'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'c', 'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) 'c', (int) 'c');
      assertArrayEquals(new char[] {'c', 'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'c', 'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'c', 'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(99, token0.beginLine);
      assertEquals(99, token0.beginColumn);
      assertEquals(100, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(99, token0.endLine);
      assertEquals(99, javaCharStream0.getBeginLine());
      assertEquals(99, javaCharStream0.getBeginColumn());
      assertEquals(100, javaCharStream0.getColumn());
      assertEquals(100, javaCharStream0.getEndColumn());
      assertEquals(99, javaCharStream0.getLine());
      assertEquals(99, javaCharStream0.getEndLine());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals("cc", token0.toString());
      assertNotNull(token0);
  }

  //Test case number: 57
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 131 TABLESWITCH L159 Case 115 - true
   */

  @Test
  public void test57()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 's';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'s', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'s', '\u0000'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) 's', (int) 's');
      assertArrayEquals(new char[] {'s', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertArrayEquals(new char[] {'s', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'s', '\u0000'}, charArray0);
      assertEquals(74, token0.kind);
      assertEquals(115, token0.endColumn);
      assertEquals(115, token0.beginColumn);
      assertEquals(115, token0.beginLine);
      assertEquals(115, token0.endLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals("s", token0.toString());
      assertEquals(115, javaCharStream0.getBeginLine());
      assertEquals(115, javaCharStream0.getBeginColumn());
      assertEquals(115, javaCharStream0.getLine());
      assertEquals(115, javaCharStream0.getEndColumn());
      assertEquals(115, javaCharStream0.getEndLine());
      assertEquals(115, javaCharStream0.getColumn());
      assertNotNull(token0);
  }

  //Test case number: 58
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.setDebugStream(Ljava/io/PrintStream;)V: root-Branch
   */

  @Test
  public void test58()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("L");
      assertNotNull(mockPrintStream0);
      
      javaParserTokenManager0.setDebugStream((PrintStream) mockPrintStream0);
  }

  //Test case number: 59
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 116 TABLESWITCH L159 Case 100 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 203 TABLESWITCH L267 Case 97 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I18 Branch 254 IFNE L383 - false
   */

  @Test
  public void test59()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'd';
      charArray0[1] = 'a';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'d', 'a'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'d', 'a'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) 'a', (int) 'd');
      assertArrayEquals(new char[] {'d', 'a'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertArrayEquals(new char[] {'d', 'a'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'d', 'a'}, charArray0);
      assertEquals(97, token0.beginLine);
      assertEquals(97, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(101, token0.endColumn);
      assertEquals(100, token0.beginColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals("da", token0.toString());
      assertEquals(97, javaCharStream0.getBeginLine());
      assertEquals(101, javaCharStream0.getEndColumn());
      assertEquals(101, javaCharStream0.getColumn());
      assertEquals(97, javaCharStream0.getLine());
      assertEquals(97, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getBeginColumn());
      assertNotNull(token0);
  }

  //Test case number: 60
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 134 TABLESWITCH L159 Case 118 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 193 TABLESWITCH L267 Case 87 - true
   */

  @Test
  public void test60()  throws Throwable  {
      char[] charArray0 = new char[19];
      charArray0[0] = 'v';
      charArray0[1] = 'W';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) 'W', (int) 'W');
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(88, token0.endColumn);
      assertEquals(87, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(87, token0.beginColumn);
      assertEquals(87, token0.endLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals("vW", token0.toString());
      assertEquals(87, javaCharStream0.getEndLine());
      assertEquals(87, javaCharStream0.getLine());
      assertEquals(88, javaCharStream0.getColumn());
      assertEquals(88, javaCharStream0.getEndColumn());
      assertEquals(87, javaCharStream0.getBeginLine());
      assertEquals(87, javaCharStream0.getBeginColumn());
      assertNotNull(token0);
  }

  //Test case number: 61
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 104 TABLESWITCH L159 Case 88 - true
   */

  @Test
  public void test61()  throws Throwable  {
      char[] charArray0 = new char[16];
      charArray0[0] = 'X';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) '8', (int) '\u0000');
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(56, token0.beginLine);
      assertEquals(56, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals("X", token0.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(56, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(56, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(56, javaCharStream0.getLine());
      assertNotNull(token0);
  }

  //Test case number: 62
  /*
   * 8 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 89 TABLESWITCH L159 Case 73 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 143 TABLESWITCH L159 Default-Case - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I125 Branch 608 IF_ICMPNE L929 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I144 Branch 609 IF_ICMPNE L931 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I163 Branch 610 IF_ICMPNE L933 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I181 Branch 611 IF_ICMPNE L935 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I72 Branch 818 IF_ICMPGT L1609 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I84 Branch 819 IFEQ L1609 - true
   */

  @Test
  public void test62()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'I';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'I', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) 'I', (int) 'I');
      assertArrayEquals(new char[] {'I', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'I', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'I', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(73, token0.beginColumn);
      assertEquals(73, token0.endColumn);
      assertEquals(73, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(73, token0.beginLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("I", token0.toString());
      assertEquals(73, javaCharStream0.getEndLine());
      assertEquals(73, javaCharStream0.getEndColumn());
      assertEquals(73, javaCharStream0.getLine());
      assertEquals(73, javaCharStream0.getColumn());
      assertEquals(73, javaCharStream0.getBeginColumn());
      assertEquals(73, javaCharStream0.getBeginLine());
      assertNotNull(token0);
      
      // Undeclared exception!
      try {
        Token token1 = javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 73, column 74.  Encountered: \"\" (0), after : \"\"
         //
      }
  }

  //Test case number: 63
  /*
   * 17 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 127 TABLESWITCH L159 Case 111 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1431 Branch 675 IF_ICMPGE L1161 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1880 Branch 748 LOOKUPSWITCH L1252 Case 1 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1880 Branch 749 LOOKUPSWITCH L1252 Case 3 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1880 Branch 750 LOOKUPSWITCH L1252 Case 14 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1880 Branch 751 LOOKUPSWITCH L1252 Case 23 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1880 Branch 752 LOOKUPSWITCH L1252 Case 32 - true
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1880 Branch 753 LOOKUPSWITCH L1252 Default-Case - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1892 Branch 754 IFNE L1256 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I2006 Branch 760 IF_ICMPNE L1276 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCanMove_1(IIIJJ)Z: I3 Branch 797 LOOKUPSWITCH L1447 Case 0 - true
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCanMove_1(IIIJJ)Z: I3 Branch 798 LOOKUPSWITCH L1447 Case 48 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCanMove_1(IIIJJ)Z: I3 Branch 799 LOOKUPSWITCH L1447 Case 49 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCanMove_1(IIIJJ)Z: I3 Branch 800 LOOKUPSWITCH L1447 Case 51 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCanMove_1(IIIJJ)Z: I3 Branch 801 LOOKUPSWITCH L1447 Case 61 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCanMove_1(IIIJJ)Z: I3 Branch 802 LOOKUPSWITCH L1447 Default-Case - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCanMove_1(IIIJJ)Z: I16 Branch 803 IFEQ L1450 - true
   */

  @Test
  public void test63()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'o';
      charArray0[1] = '\u0081';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'o', '\u0081', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) '\u0081', (int) 'o');
      assertArrayEquals(new char[] {'o', '\u0081', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'o', '\u0081', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'o', '\u0081', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(74, token0.kind);
      assertEquals(129, token0.endLine);
      assertEquals(111, token0.beginColumn);
      assertEquals(111, token0.endColumn);
      assertEquals(129, token0.beginLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("o", token0.toString());
      assertEquals(111, javaCharStream0.getBeginColumn());
      assertEquals(129, javaCharStream0.getEndLine());
      assertEquals(129, javaCharStream0.getLine());
      assertEquals(111, javaCharStream0.getEndColumn());
      assertEquals(111, javaCharStream0.getColumn());
      assertEquals(129, javaCharStream0.getBeginLine());
      assertNotNull(token0);
  }

  //Test case number: 64
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 124 TABLESWITCH L159 Case 108 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 209 TABLESWITCH L267 Case 103 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 231 TABLESWITCH L267 Default-Case - true
   */

  @Test
  public void test64()  throws Throwable  {
      char[] charArray0 = new char[21];
      charArray0[0] = 'l';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) 'l', (int) '\u0000');
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(108, token0.beginLine);
      assertEquals(108, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals("l", token0.toString());
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertNotNull(token0);
  }

  //Test case number: 65
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 80 TABLESWITCH L159 Case 64 - true
   */

  @Test
  public void test65()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '@';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'@', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'@', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) '\u0000', (int) '\u0000');
      assertArrayEquals(new char[] {'@', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'@', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'@', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(86, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals("@", token0.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(token0);
  }

  //Test case number: 66
  /*
   * 106 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStartNfa_0(IJJ)I: root-Branch
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 1 TABLESWITCH L13 Case 0 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 2 TABLESWITCH L13 Case 1 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 3 TABLESWITCH L13 Case 2 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 4 TABLESWITCH L13 Case 3 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 5 TABLESWITCH L13 Case 4 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 6 TABLESWITCH L13 Case 5 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 7 TABLESWITCH L13 Case 6 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 8 TABLESWITCH L13 Case 7 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 9 TABLESWITCH L13 Case 8 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 10 TABLESWITCH L13 Case 9 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 11 TABLESWITCH L13 Case 10 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 12 TABLESWITCH L13 Default-Case - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I14 Branch 13 IFNE L16 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I23 Branch 14 IFEQ L16 - true
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I38 Branch 15 IFEQ L18 - true
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I53 Branch 16 IFNE L20 - true
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 119 TABLESWITCH L159 Case 103 - true
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 144 TABLESWITCH L267 Case 38 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 145 TABLESWITCH L267 Case 39 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 146 TABLESWITCH L267 Case 40 - false
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 147 TABLESWITCH L267 Case 41 - false
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 148 TABLESWITCH L267 Case 42 - false
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 149 TABLESWITCH L267 Case 43 - false
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 150 TABLESWITCH L267 Case 44 - false
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 151 TABLESWITCH L267 Case 45 - false
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 152 TABLESWITCH L267 Case 46 - false
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 153 TABLESWITCH L267 Case 47 - false
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 154 TABLESWITCH L267 Case 48 - false
   * Goal 30. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 155 TABLESWITCH L267 Case 49 - false
   * Goal 31. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 156 TABLESWITCH L267 Case 50 - false
   * Goal 32. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 157 TABLESWITCH L267 Case 51 - false
   * Goal 33. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 158 TABLESWITCH L267 Case 52 - false
   * Goal 34. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 159 TABLESWITCH L267 Case 53 - false
   * Goal 35. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 160 TABLESWITCH L267 Case 54 - false
   * Goal 36. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 161 TABLESWITCH L267 Case 55 - false
   * Goal 37. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 162 TABLESWITCH L267 Case 56 - false
   * Goal 38. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 163 TABLESWITCH L267 Case 57 - false
   * Goal 39. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 164 TABLESWITCH L267 Case 58 - false
   * Goal 40. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 165 TABLESWITCH L267 Case 59 - false
   * Goal 41. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 166 TABLESWITCH L267 Case 60 - false
   * Goal 42. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 167 TABLESWITCH L267 Case 61 - false
   * Goal 43. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 168 TABLESWITCH L267 Case 62 - false
   * Goal 44. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 169 TABLESWITCH L267 Case 63 - false
   * Goal 45. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 170 TABLESWITCH L267 Case 64 - false
   * Goal 46. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 171 TABLESWITCH L267 Case 65 - false
   * Goal 47. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 172 TABLESWITCH L267 Case 66 - false
   * Goal 48. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 173 TABLESWITCH L267 Case 67 - false
   * Goal 49. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 174 TABLESWITCH L267 Case 68 - false
   * Goal 50. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 175 TABLESWITCH L267 Case 69 - false
   * Goal 51. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 176 TABLESWITCH L267 Case 70 - false
   * Goal 52. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 177 TABLESWITCH L267 Case 71 - false
   * Goal 53. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 178 TABLESWITCH L267 Case 72 - false
   * Goal 54. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 179 TABLESWITCH L267 Case 73 - false
   * Goal 55. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 180 TABLESWITCH L267 Case 74 - false
   * Goal 56. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 181 TABLESWITCH L267 Case 75 - false
   * Goal 57. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 182 TABLESWITCH L267 Case 76 - false
   * Goal 58. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 183 TABLESWITCH L267 Case 77 - false
   * Goal 59. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 184 TABLESWITCH L267 Case 78 - false
   * Goal 60. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 185 TABLESWITCH L267 Case 79 - false
   * Goal 61. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 186 TABLESWITCH L267 Case 80 - false
   * Goal 62. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 187 TABLESWITCH L267 Case 81 - false
   * Goal 63. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 188 TABLESWITCH L267 Case 82 - false
   * Goal 64. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 189 TABLESWITCH L267 Case 83 - false
   * Goal 65. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 190 TABLESWITCH L267 Case 84 - false
   * Goal 66. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 191 TABLESWITCH L267 Case 85 - false
   * Goal 67. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 192 TABLESWITCH L267 Case 86 - false
   * Goal 68. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 193 TABLESWITCH L267 Case 87 - false
   * Goal 69. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 194 TABLESWITCH L267 Case 88 - false
   * Goal 70. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 195 TABLESWITCH L267 Case 89 - false
   * Goal 71. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 196 TABLESWITCH L267 Case 90 - false
   * Goal 72. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 197 TABLESWITCH L267 Case 91 - false
   * Goal 73. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 198 TABLESWITCH L267 Case 92 - false
   * Goal 74. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 199 TABLESWITCH L267 Case 93 - false
   * Goal 75. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 200 TABLESWITCH L267 Case 94 - false
   * Goal 76. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 201 TABLESWITCH L267 Case 95 - false
   * Goal 77. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 202 TABLESWITCH L267 Case 96 - false
   * Goal 78. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 203 TABLESWITCH L267 Case 97 - false
   * Goal 79. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 204 TABLESWITCH L267 Case 98 - false
   * Goal 80. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 205 TABLESWITCH L267 Case 99 - false
   * Goal 81. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 206 TABLESWITCH L267 Case 100 - false
   * Goal 82. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 207 TABLESWITCH L267 Case 101 - false
   * Goal 83. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 208 TABLESWITCH L267 Case 102 - false
   * Goal 84. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 209 TABLESWITCH L267 Case 103 - true
   * Goal 85. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 210 TABLESWITCH L267 Case 104 - false
   * Goal 86. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 211 TABLESWITCH L267 Case 105 - false
   * Goal 87. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 212 TABLESWITCH L267 Case 106 - false
   * Goal 88. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 213 TABLESWITCH L267 Case 107 - false
   * Goal 89. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 214 TABLESWITCH L267 Case 108 - false
   * Goal 90. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 215 TABLESWITCH L267 Case 109 - false
   * Goal 91. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 216 TABLESWITCH L267 Case 110 - false
   * Goal 92. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 217 TABLESWITCH L267 Case 111 - false
   * Goal 93. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 218 TABLESWITCH L267 Case 112 - false
   * Goal 94. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 219 TABLESWITCH L267 Case 113 - false
   * Goal 95. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 220 TABLESWITCH L267 Case 114 - false
   * Goal 96. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 221 TABLESWITCH L267 Case 115 - false
   * Goal 97. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 222 TABLESWITCH L267 Case 116 - false
   * Goal 98. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 223 TABLESWITCH L267 Case 117 - false
   * Goal 99. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 224 TABLESWITCH L267 Case 118 - false
   * Goal 100. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 225 TABLESWITCH L267 Case 119 - false
   * Goal 101. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 226 TABLESWITCH L267 Case 120 - false
   * Goal 102. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 227 TABLESWITCH L267 Case 121 - false
   * Goal 103. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 228 TABLESWITCH L267 Case 122 - false
   * Goal 104. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 229 TABLESWITCH L267 Case 123 - false
   * Goal 105. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 230 TABLESWITCH L267 Case 124 - false
   * Goal 106. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 231 TABLESWITCH L267 Default-Case - false
   */

  @Test
  public void test66()  throws Throwable  {
      char[] charArray0 = new char[21];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) 'g', (int) 'g');
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(103, token0.beginLine);
      assertEquals(103, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(103, token0.endLine);
      assertEquals(104, token0.endColumn);
      assertEquals(103, javaCharStream0.getBeginLine());
      assertEquals(103, javaCharStream0.getEndLine());
      assertEquals(103, javaCharStream0.getBeginColumn());
      assertEquals(104, javaCharStream0.getColumn());
      assertEquals(104, javaCharStream0.getEndColumn());
      assertEquals(103, javaCharStream0.getLine());
      assertEquals("gg", token0.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(token0);
  }

  //Test case number: 67
  /*
   * 5 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.ReInit(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V: root-Branch
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.ReInit(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;I)V: root-Branch
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.ReInitRounds()V: I15 Branch 809 IFLE L1543 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.ReInitRounds()V: I15 Branch 809 IFLE L1543 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.SwitchTo(I)V: I12 Branch 811 IFGE L1553 - false
   */

  @Test
  public void test67()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try {
        javaParserTokenManager0.ReInit((JavaCharStream) null, (-1367));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1367. State unchanged.
         //
      }
  }

  //Test case number: 68
  /*
   * 25 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCheckNAddTwoStates(II)V: root-Branch
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 66 TABLESWITCH L159 Case 50 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 557 TABLESWITCH L918 Case 5 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 558 TABLESWITCH L918 Case 6 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 564 TABLESWITCH L918 Case 12 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 586 TABLESWITCH L918 Case 34 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 587 TABLESWITCH L918 Case 35 - true
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 592 TABLESWITCH L918 Case 40 - true
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 593 TABLESWITCH L918 Case 41 - true
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 596 TABLESWITCH L918 Case 44 - true
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 597 TABLESWITCH L918 Case 45 - true
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I76 Branch 605 IFEQ L921 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I205 Branch 612 IFEQ L937 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I213 Branch 613 IF_ICMPLE L939 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I387 Branch 622 IFNE L970 - true
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I387 Branch 622 IFNE L970 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I401 Branch 623 IF_ICMPLE L972 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I992 Branch 653 IFEQ L1081 - true
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I992 Branch 653 IFEQ L1081 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1011 Branch 654 IF_ICMPEQ L1085 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1154 Branch 661 IFEQ L1110 - true
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1154 Branch 661 IFEQ L1110 - false
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1236 Branch 665 IFEQ L1125 - true
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1236 Branch 665 IFEQ L1125 - false
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1416 Branch 674 IF_ICMPNE L1159 - true
   */

  @Test
  public void test68()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '2';
      charArray0[1] = '2';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'2', '2', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'2', '2', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) '2', (int) '2');
      assertArrayEquals(new char[] {'2', '2', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'2', '2', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'2', '2', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(66, token0.kind);
      assertEquals(50, token0.endLine);
      assertEquals(50, token0.beginLine);
      assertEquals(50, token0.beginColumn);
      assertEquals(51, token0.endColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals("22", token0.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getLine());
      assertNotNull(token0);
  }

  //Test case number: 69
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 92 TABLESWITCH L159 Case 76 - true
   */

  @Test
  public void test69()  throws Throwable  {
      char[] charArray0 = new char[13];
      charArray0[0] = 'L';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) 'L', (int) '\u0000');
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(74, token0.kind);
      assertEquals(76, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(76, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("L", token0.toString());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(76, javaCharStream0.getEndLine());
      assertEquals(76, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(76, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(token0);
  }

  //Test case number: 70
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopAtPos(II)I: root-Branch
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 142 TABLESWITCH L159 Case 126 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjFillToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I26 Branch 812 IFNONNULL L1564 - true
   */

  @Test
  public void test70()  throws Throwable  {
      char[] charArray0 = new char[23];
      charArray0[0] = '~';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) '\u0000', (int) '~', (int) '\u0000');
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(90, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(126, token0.beginColumn);
      assertEquals(126, token0.endColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("~", token0.toString());
      assertEquals(126, javaCharStream0.getColumn());
      assertEquals(126, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(126, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(token0);
  }

  //Test case number: 71
  /*
   * 20 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 50 TABLESWITCH L159 Case 34 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCheckNAddStates(II)V: I15 Branch 549 IF_ICMPNE L870 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCheckNAddStates(II)V: I15 Branch 549 IF_ICMPNE L870 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 555 TABLESWITCH L918 Case 3 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 584 TABLESWITCH L918 Case 32 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I76 Branch 605 IFEQ L921 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I95 Branch 606 IF_ICMPNE L923 - true
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I125 Branch 608 IF_ICMPNE L929 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I205 Branch 612 IFEQ L937 - true
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I236 Branch 614 IF_ICMPNE L943 - true
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 698 TABLESWITCH L1166 Case 23 - true
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 699 TABLESWITCH L1166 Case 24 - true
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 701 TABLESWITCH L1166 Case 26 - true
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1645 Branch 738 IFEQ L1205 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1664 Branch 739 IF_ICMPNE L1209 - true
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1827 Branch 747 IF_ICMPNE L1241 - true
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I542 Branch 835 IF_ICMPGT L1696 - true
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I562 Branch 836 IF_ICMPEQ L1697 - false
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I569 Branch 837 IF_ICMPNE L1697 - true
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I590 Branch 838 IFNE L1704 - true
   */

  @Test
  public void test71()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '\"';
      charArray0[1] = '~';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\"', '~'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'\"', '~'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) '\"', (int) '~');
      assertArrayEquals(new char[] {'\"', '~'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'\"', '~'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try {
        Token token0 = javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 34, column 128.  Encountered: <EOF> after : \"\\\"~\"
         //
      }
  }

  //Test case number: 72
  /*
   * 58 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 102 TABLESWITCH L159 Case 86 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I50 Branch 551 IF_ICMPGE L913 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 552 TABLESWITCH L918 Case 0 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 553 TABLESWITCH L918 Case 1 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 554 TABLESWITCH L918 Case 2 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 555 TABLESWITCH L918 Case 3 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 556 TABLESWITCH L918 Case 4 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 557 TABLESWITCH L918 Case 5 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 558 TABLESWITCH L918 Case 6 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 559 TABLESWITCH L918 Case 7 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 560 TABLESWITCH L918 Case 8 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 561 TABLESWITCH L918 Case 9 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 562 TABLESWITCH L918 Case 10 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 563 TABLESWITCH L918 Case 11 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 564 TABLESWITCH L918 Case 12 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 565 TABLESWITCH L918 Case 13 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 566 TABLESWITCH L918 Case 14 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 567 TABLESWITCH L918 Case 15 - false
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 568 TABLESWITCH L918 Case 16 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 569 TABLESWITCH L918 Case 17 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 570 TABLESWITCH L918 Case 18 - false
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 571 TABLESWITCH L918 Case 19 - false
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 572 TABLESWITCH L918 Case 20 - false
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 573 TABLESWITCH L918 Case 21 - false
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 574 TABLESWITCH L918 Case 22 - false
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 575 TABLESWITCH L918 Case 23 - false
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 576 TABLESWITCH L918 Case 24 - false
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 577 TABLESWITCH L918 Case 25 - false
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 578 TABLESWITCH L918 Case 26 - false
   * Goal 30. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 579 TABLESWITCH L918 Case 27 - false
   * Goal 31. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 580 TABLESWITCH L918 Case 28 - false
   * Goal 32. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 581 TABLESWITCH L918 Case 29 - false
   * Goal 33. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 582 TABLESWITCH L918 Case 30 - false
   * Goal 34. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 583 TABLESWITCH L918 Case 31 - false
   * Goal 35. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 584 TABLESWITCH L918 Case 32 - true
   * Goal 36. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 585 TABLESWITCH L918 Case 33 - false
   * Goal 37. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 586 TABLESWITCH L918 Case 34 - false
   * Goal 38. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 587 TABLESWITCH L918 Case 35 - false
   * Goal 39. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 588 TABLESWITCH L918 Case 36 - false
   * Goal 40. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 589 TABLESWITCH L918 Case 37 - false
   * Goal 41. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 590 TABLESWITCH L918 Case 38 - false
   * Goal 42. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 591 TABLESWITCH L918 Case 39 - false
   * Goal 43. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 592 TABLESWITCH L918 Case 40 - false
   * Goal 44. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 593 TABLESWITCH L918 Case 41 - false
   * Goal 45. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 594 TABLESWITCH L918 Case 42 - false
   * Goal 46. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 595 TABLESWITCH L918 Case 43 - false
   * Goal 47. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 596 TABLESWITCH L918 Case 44 - false
   * Goal 48. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 597 TABLESWITCH L918 Case 45 - false
   * Goal 49. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 598 TABLESWITCH L918 Case 46 - false
   * Goal 50. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 599 TABLESWITCH L918 Case 47 - false
   * Goal 51. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 600 TABLESWITCH L918 Case 48 - false
   * Goal 52. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 601 TABLESWITCH L918 Case 49 - false
   * Goal 53. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 602 TABLESWITCH L918 Case 50 - false
   * Goal 54. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 603 TABLESWITCH L918 Case 51 - false
   * Goal 55. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 604 TABLESWITCH L918 Default-Case - false
   * Goal 56. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I931 Branch 650 IFNE L1070 - false
   * Goal 57. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1416 Branch 674 IF_ICMPNE L1159 - false
   * Goal 58. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I262 Branch 827 IF_ICMPGE L1647 - false
   */

  @Test
  public void test72()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'V';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'V', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) '\u0000', (int) 'V');
      assertArrayEquals(new char[] {'V', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'V', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'V', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(86, token0.beginColumn);
      assertEquals(86, token0.endColumn);
      assertEquals(74, token0.kind);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("V", token0.toString());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(86, javaCharStream0.getEndColumn());
      assertEquals(86, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(86, javaCharStream0.getColumn());
      assertNotNull(token0);
  }

  //Test case number: 73
  /*
   * 8 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 88 TABLESWITCH L159 Case 72 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 112 TABLESWITCH L159 Case 96 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1459 Branch 727 IFNE L1170 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I2014 Branch 761 IF_ICMPEQ L1278 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I2049 Branch 762 IF_ICMPNE L1285 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I251 Branch 826 IF_ICMPEQ L1645 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I590 Branch 838 IFNE L1704 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I604 Branch 839 IF_ICMPGT L1706 - false
   */

  @Test
  public void test73()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '`';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'`', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) '\u0000', (int) '`');
      assertArrayEquals(new char[] {'`', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'`', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try {
        Token token0 = javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 96.  Encountered: \"`\" (96), after : \"\"
         //
      }
  }

  //Test case number: 74
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.SwitchTo(I)V: I7 Branch 810 IF_ICMPGE L1553 - true
   */

  @Test
  public void test74()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) pipedReader0, 24, 24);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 24);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 24. State unchanged.
         //
      }
  }

  //Test case number: 75
  /*
   * 175 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.<init>(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V: root-Branch
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.<init>(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;I)V: root-Branch
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 49 TABLESWITCH L159 Case 33 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 50 TABLESWITCH L159 Case 34 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 51 TABLESWITCH L159 Case 35 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 52 TABLESWITCH L159 Case 36 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 53 TABLESWITCH L159 Case 37 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 54 TABLESWITCH L159 Case 38 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 55 TABLESWITCH L159 Case 39 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 56 TABLESWITCH L159 Case 40 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 57 TABLESWITCH L159 Case 41 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 58 TABLESWITCH L159 Case 42 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 59 TABLESWITCH L159 Case 43 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 60 TABLESWITCH L159 Case 44 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 61 TABLESWITCH L159 Case 45 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 62 TABLESWITCH L159 Case 46 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 63 TABLESWITCH L159 Case 47 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 64 TABLESWITCH L159 Case 48 - false
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 65 TABLESWITCH L159 Case 49 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 66 TABLESWITCH L159 Case 50 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 67 TABLESWITCH L159 Case 51 - false
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 68 TABLESWITCH L159 Case 52 - false
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 69 TABLESWITCH L159 Case 53 - false
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 70 TABLESWITCH L159 Case 54 - false
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 71 TABLESWITCH L159 Case 55 - false
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 72 TABLESWITCH L159 Case 56 - false
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 73 TABLESWITCH L159 Case 57 - false
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 74 TABLESWITCH L159 Case 58 - false
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 75 TABLESWITCH L159 Case 59 - false
   * Goal 30. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 76 TABLESWITCH L159 Case 60 - false
   * Goal 31. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 77 TABLESWITCH L159 Case 61 - false
   * Goal 32. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 78 TABLESWITCH L159 Case 62 - false
   * Goal 33. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 79 TABLESWITCH L159 Case 63 - false
   * Goal 34. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 80 TABLESWITCH L159 Case 64 - false
   * Goal 35. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 81 TABLESWITCH L159 Case 65 - false
   * Goal 36. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 82 TABLESWITCH L159 Case 66 - false
   * Goal 37. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 83 TABLESWITCH L159 Case 67 - false
   * Goal 38. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 84 TABLESWITCH L159 Case 68 - false
   * Goal 39. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 85 TABLESWITCH L159 Case 69 - false
   * Goal 40. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 86 TABLESWITCH L159 Case 70 - false
   * Goal 41. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 87 TABLESWITCH L159 Case 71 - false
   * Goal 42. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 88 TABLESWITCH L159 Case 72 - true
   * Goal 43. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 89 TABLESWITCH L159 Case 73 - false
   * Goal 44. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 90 TABLESWITCH L159 Case 74 - false
   * Goal 45. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 91 TABLESWITCH L159 Case 75 - false
   * Goal 46. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 92 TABLESWITCH L159 Case 76 - false
   * Goal 47. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 93 TABLESWITCH L159 Case 77 - false
   * Goal 48. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 94 TABLESWITCH L159 Case 78 - false
   * Goal 49. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 95 TABLESWITCH L159 Case 79 - false
   * Goal 50. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 96 TABLESWITCH L159 Case 80 - false
   * Goal 51. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 97 TABLESWITCH L159 Case 81 - false
   * Goal 52. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 98 TABLESWITCH L159 Case 82 - false
   * Goal 53. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 99 TABLESWITCH L159 Case 83 - false
   * Goal 54. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 100 TABLESWITCH L159 Case 84 - false
   * Goal 55. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 101 TABLESWITCH L159 Case 85 - false
   * Goal 56. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 102 TABLESWITCH L159 Case 86 - false
   * Goal 57. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 103 TABLESWITCH L159 Case 87 - false
   * Goal 58. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 104 TABLESWITCH L159 Case 88 - false
   * Goal 59. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 105 TABLESWITCH L159 Case 89 - false
   * Goal 60. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 106 TABLESWITCH L159 Case 90 - false
   * Goal 61. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 107 TABLESWITCH L159 Case 91 - false
   * Goal 62. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 108 TABLESWITCH L159 Case 92 - false
   * Goal 63. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 109 TABLESWITCH L159 Case 93 - false
   * Goal 64. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 110 TABLESWITCH L159 Case 94 - false
   * Goal 65. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 111 TABLESWITCH L159 Case 95 - false
   * Goal 66. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 112 TABLESWITCH L159 Case 96 - false
   * Goal 67. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 113 TABLESWITCH L159 Case 97 - false
   * Goal 68. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 114 TABLESWITCH L159 Case 98 - false
   * Goal 69. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 115 TABLESWITCH L159 Case 99 - false
   * Goal 70. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 116 TABLESWITCH L159 Case 100 - false
   * Goal 71. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 117 TABLESWITCH L159 Case 101 - false
   * Goal 72. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 118 TABLESWITCH L159 Case 102 - false
   * Goal 73. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 119 TABLESWITCH L159 Case 103 - false
   * Goal 74. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 120 TABLESWITCH L159 Case 104 - false
   * Goal 75. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 121 TABLESWITCH L159 Case 105 - false
   * Goal 76. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 122 TABLESWITCH L159 Case 106 - false
   * Goal 77. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 123 TABLESWITCH L159 Case 107 - false
   * Goal 78. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 124 TABLESWITCH L159 Case 108 - false
   * Goal 79. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 125 TABLESWITCH L159 Case 109 - false
   * Goal 80. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 126 TABLESWITCH L159 Case 110 - false
   * Goal 81. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 127 TABLESWITCH L159 Case 111 - false
   * Goal 82. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 128 TABLESWITCH L159 Case 112 - false
   * Goal 83. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 129 TABLESWITCH L159 Case 113 - false
   * Goal 84. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 130 TABLESWITCH L159 Case 114 - false
   * Goal 85. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 131 TABLESWITCH L159 Case 115 - false
   * Goal 86. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 132 TABLESWITCH L159 Case 116 - false
   * Goal 87. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 133 TABLESWITCH L159 Case 117 - false
   * Goal 88. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 134 TABLESWITCH L159 Case 118 - false
   * Goal 89. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 135 TABLESWITCH L159 Case 119 - false
   * Goal 90. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 136 TABLESWITCH L159 Case 120 - false
   * Goal 91. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 137 TABLESWITCH L159 Case 121 - false
   * Goal 92. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 138 TABLESWITCH L159 Case 122 - false
   * Goal 93. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 139 TABLESWITCH L159 Case 123 - false
   * Goal 94. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 140 TABLESWITCH L159 Case 124 - false
   * Goal 95. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 141 TABLESWITCH L159 Case 125 - false
   * Goal 96. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 142 TABLESWITCH L159 Case 126 - false
   * Goal 97. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 143 TABLESWITCH L159 Default-Case - false
   * Goal 98. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCheckNAdd(I)V: I11 Branch 547 IF_ICMPEQ L849 - false
   * Goal 99. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I37 Branch 550 IF_ICMPNE L911 - true
   * Goal 100. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I50 Branch 551 IF_ICMPGE L913 - true
   * Goal 101. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1431 Branch 675 IF_ICMPGE L1161 - false
   * Goal 102. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 676 TABLESWITCH L1166 Case 1 - false
   * Goal 103. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 677 TABLESWITCH L1166 Case 2 - false
   * Goal 104. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 678 TABLESWITCH L1166 Case 3 - true
   * Goal 105. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 678 TABLESWITCH L1166 Case 3 - false
   * Goal 106. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 679 TABLESWITCH L1166 Case 4 - false
   * Goal 107. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 680 TABLESWITCH L1166 Case 5 - false
   * Goal 108. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 681 TABLESWITCH L1166 Case 6 - false
   * Goal 109. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 682 TABLESWITCH L1166 Case 7 - false
   * Goal 110. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 683 TABLESWITCH L1166 Case 8 - false
   * Goal 111. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 684 TABLESWITCH L1166 Case 9 - false
   * Goal 112. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 685 TABLESWITCH L1166 Case 10 - false
   * Goal 113. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 686 TABLESWITCH L1166 Case 11 - false
   * Goal 114. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 687 TABLESWITCH L1166 Case 12 - false
   * Goal 115. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 688 TABLESWITCH L1166 Case 13 - false
   * Goal 116. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 689 TABLESWITCH L1166 Case 14 - false
   * Goal 117. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 690 TABLESWITCH L1166 Case 15 - false
   * Goal 118. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 691 TABLESWITCH L1166 Case 16 - false
   * Goal 119. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 692 TABLESWITCH L1166 Case 17 - false
   * Goal 120. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 693 TABLESWITCH L1166 Case 18 - false
   * Goal 121. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 694 TABLESWITCH L1166 Case 19 - false
   * Goal 122. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 695 TABLESWITCH L1166 Case 20 - false
   * Goal 123. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 696 TABLESWITCH L1166 Case 21 - false
   * Goal 124. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 697 TABLESWITCH L1166 Case 22 - false
   * Goal 125. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 698 TABLESWITCH L1166 Case 23 - false
   * Goal 126. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 699 TABLESWITCH L1166 Case 24 - false
   * Goal 127. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 700 TABLESWITCH L1166 Case 25 - false
   * Goal 128. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 701 TABLESWITCH L1166 Case 26 - false
   * Goal 129. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 702 TABLESWITCH L1166 Case 27 - false
   * Goal 130. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 703 TABLESWITCH L1166 Case 28 - false
   * Goal 131. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 704 TABLESWITCH L1166 Case 29 - false
   * Goal 132. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 705 TABLESWITCH L1166 Case 30 - false
   * Goal 133. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 706 TABLESWITCH L1166 Case 31 - false
   * Goal 134. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 707 TABLESWITCH L1166 Case 32 - true
   * Goal 135. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 707 TABLESWITCH L1166 Case 32 - false
   * Goal 136. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 708 TABLESWITCH L1166 Case 33 - false
   * Goal 137. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 709 TABLESWITCH L1166 Case 34 - false
   * Goal 138. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 710 TABLESWITCH L1166 Case 35 - false
   * Goal 139. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 711 TABLESWITCH L1166 Case 36 - false
   * Goal 140. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 712 TABLESWITCH L1166 Case 37 - false
   * Goal 141. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 713 TABLESWITCH L1166 Case 38 - false
   * Goal 142. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 714 TABLESWITCH L1166 Case 39 - false
   * Goal 143. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 715 TABLESWITCH L1166 Case 40 - false
   * Goal 144. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 716 TABLESWITCH L1166 Case 41 - false
   * Goal 145. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 717 TABLESWITCH L1166 Case 42 - false
   * Goal 146. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 718 TABLESWITCH L1166 Case 43 - false
   * Goal 147. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 719 TABLESWITCH L1166 Case 44 - false
   * Goal 148. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 720 TABLESWITCH L1166 Case 45 - false
   * Goal 149. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 721 TABLESWITCH L1166 Case 46 - false
   * Goal 150. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 722 TABLESWITCH L1166 Case 47 - false
   * Goal 151. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 723 TABLESWITCH L1166 Case 48 - false
   * Goal 152. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 724 TABLESWITCH L1166 Case 49 - false
   * Goal 153. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 725 TABLESWITCH L1166 Case 50 - false
   * Goal 154. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 726 TABLESWITCH L1166 Default-Case - false
   * Goal 155. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1459 Branch 727 IFNE L1170 - true
   * Goal 156. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1473 Branch 728 IF_ICMPLE L1172 - false
   * Goal 157. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1827 Branch 747 IF_ICMPNE L1241 - false
   * Goal 158. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I2014 Branch 761 IF_ICMPEQ L1278 - false
   * Goal 159. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I2049 Branch 762 IF_ICMPNE L1285 - true
   * Goal 160. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.SwitchTo(I)V: I7 Branch 810 IF_ICMPGE L1553 - false
   * Goal 161. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.SwitchTo(I)V: I12 Branch 811 IFGE L1553 - true
   * Goal 162. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjFillToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I26 Branch 812 IFNONNULL L1564 - false
   * Goal 163. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I57 Branch 813 TABLESWITCH L1605 Case 0 - true
   * Goal 164. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I57 Branch 814 TABLESWITCH L1605 Case 1 - false
   * Goal 165. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I57 Branch 815 TABLESWITCH L1605 Case 2 - false
   * Goal 166. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I57 Branch 816 TABLESWITCH L1605 Case 3 - false
   * Goal 167. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I57 Branch 817 TABLESWITCH L1605 Default-Case - false
   * Goal 168. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I72 Branch 818 IF_ICMPGT L1609 - true
   * Goal 169. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I251 Branch 826 IF_ICMPEQ L1645 - false
   * Goal 170. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I262 Branch 827 IF_ICMPGE L1647 - true
   * Goal 171. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I294 Branch 828 IFEQ L1649 - false
   * Goal 172. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I320 Branch 829 IF_ICMPEQ L1654 - true
   * Goal 173. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.TokenLexicalActions(Lcom/soops/CEN4010/JMCA/JParser/Token;)V: I4 Branch 844 LOOKUPSWITCH L1740 Case 122 - false
   * Goal 174. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.TokenLexicalActions(Lcom/soops/CEN4010/JMCA/JParser/Token;)V: I4 Branch 845 LOOKUPSWITCH L1740 Case 123 - false
   * Goal 175. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.TokenLexicalActions(Lcom/soops/CEN4010/JMCA/JParser/Token;)V: I4 Branch 846 LOOKUPSWITCH L1740 Default-Case - true
   */

  @Test
  public void test75()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'H', 'H'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'H', 'H'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) lineNumberReader0, (int) 'H', (int) 'H');
      assertArrayEquals(new char[] {'H', 'H'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertArrayEquals(new char[] {'H', 'H'}, charArray0);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'H', 'H'}, charArray0);
      assertEquals(72, token0.endLine);
      assertEquals(73, token0.endColumn);
      assertEquals(72, token0.beginLine);
      assertEquals(72, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals("HH", token0.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(72, javaCharStream0.getBeginColumn());
      assertEquals(73, javaCharStream0.getColumn());
      assertEquals(72, javaCharStream0.getEndLine());
      assertEquals(72, javaCharStream0.getBeginLine());
      assertEquals(73, javaCharStream0.getEndColumn());
      assertEquals(72, javaCharStream0.getLine());
      assertNotNull(token0);
  }
}
