/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 17 22:33:30 GMT 2015
 */

package com.soops.CEN4010.JMCA.JParser;

import static org.junit.Assert.*;
import org.junit.Test;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberInputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringBufferInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I14 Branch 13 IFNE L16 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 63 TABLESWITCH L159 Case 47 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 554 TABLESWITCH L918 Case 2 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I318 Branch 619 IF_ICMPNE L959 - true
   */

  @Test
  public void test000()  throws Throwable  {
      char[] charArray0 = new char[12];
      charArray0[0] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("/", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(104, token0.kind);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 67 TABLESWITCH L159 Case 51 - true
   */

  @Test
  public void test001()  throws Throwable  {
      char[] charArray0 = new char[13];
      charArray0[0] = '3';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("3", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 79 TABLESWITCH L159 Case 63 - true
   */

  @Test
  public void test002()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'?', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'?', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'?', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("?", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(91, token0.kind);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'?', '\u0000'}, charArray0);
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 198 TABLESWITCH L267 Case 92 - true
   */

  @Test
  public void test003()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'd';
      charArray0[1] = '\\';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'d', '\\', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'d', '\\', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'d', '\\', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("d", token0.toString());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'d', '\\', '\u0000'}, charArray0);
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 226 TABLESWITCH L267 Case 120 - true
   */

  @Test
  public void test004()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'g';
      charArray0[1] = 'x';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'g', 'x'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'g', 'x'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'g', 'x'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("gx", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'g', 'x'}, charArray0);
  }

  //Test case number: 5
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 70 TABLESWITCH L159 Case 54 - true
   */

  @Test
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '6';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'6', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'6', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'6', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("6", token0.toString());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'6', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 6
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 152 TABLESWITCH L267 Case 46 - true
   */

  @Test
  public void test006()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("s.");
      assertEquals(2, stringBufferInputStream0.available());
      assertNotNull(stringBufferInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0, (int) 'g', (int) 'g');
      assertEquals(2, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(2, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(103, javaCharStream0.getLine());
      assertEquals(103, javaCharStream0.getEndColumn());
      assertEquals(103, javaCharStream0.getEndLine());
      assertEquals(103, javaCharStream0.getColumn());
      assertEquals(103, javaCharStream0.getBeginLine());
      assertEquals(103, javaCharStream0.getBeginColumn());
      assertEquals("s", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(103, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(103, token0.beginLine);
      assertEquals(103, token0.endLine);
      assertEquals(103, token0.beginColumn);
      assertNotNull(token0);
  }

  //Test case number: 7
  @Test
  public void test007()  throws Throwable  {
      char[] charArray0 = new char[17];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      charArray0[0] = '^';
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("^", token0.toString());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, token0.endColumn);
      assertEquals(107, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
  }

  //Test case number: 8
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1378 Branch 672 IFNE L1151 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1392 Branch 673 IF_ICMPLE L1153 - false
   */

  @Test
  public void test008()  throws Throwable  {
      char[] charArray0 = new char[19];
      charArray0[0] = '0';
      charArray0[1] = '0';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("00", token0.toString());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotNull(token0);
  }

  //Test case number: 9
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 208 TABLESWITCH L267 Case 102 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I446 Branch 251 IFEQ L338 - true
   */

  @Test
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'f', 'f'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'f', 'f'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'f', 'f'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("ff", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'f', 'f'}, charArray0);
  }

  //Test case number: 10
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 66 TABLESWITCH L159 Case 50 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1515 Branch 730 IFEQ L1181 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1521 Branch 731 IF_ICMPLE L1181 - false
   */

  @Test
  public void test010()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      charArray0[1] = 'l';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'2', 'l', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'2', 'l', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'2', 'l', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("2l", token0.toString());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'2', 'l', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 11
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 209 TABLESWITCH L267 Case 103 - true
   */

  @Test
  public void test011()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'c';
      charArray0[1] = 'g';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'c', 'g', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'c', 'g', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'c', 'g', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("cg", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'c', 'g', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 12
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 190 TABLESWITCH L267 Case 84 - true
   */

  @Test
  public void test012()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      charArray0[0] = '!';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'!', 'T', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'!', 'T', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'!', 'T', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("!", token0.toString());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, token0.beginLine);
      assertEquals(89, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'!', 'T', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 13
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 91 TABLESWITCH L159 Case 75 - true
   */

  @Test
  public void test013()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = 'K';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("K", token0.toString());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 331 TABLESWITCH L390 Default-Case - true
   */

  @Test
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '<';
      charArray0[1] = '<';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'<', '<', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'<', '<', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'<', '<', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("<<", token0.toString());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(109, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'<', '<', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 83 TABLESWITCH L159 Case 67 - true
   */

  @Test
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'C'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'C'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'C'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("C", token0.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'C'}, charArray0);
  }

  //Test case number: 16
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 142 TABLESWITCH L159 Case 126 - true
   */

  @Test
  public void test016()  throws Throwable  {
      char[] charArray0 = new char[23];
      charArray0[2] = '!';
      charArray0[1] = '~';
      charArray0[7] = '!';
      charArray0[0] = '!';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("!", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(89, token0.kind);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("~", token1.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(90, token1.kind);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  //Test case number: 17
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 97 TABLESWITCH L159 Case 81 - true
   */

  @Test
  public void test017()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'Q';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'Q', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'Q', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'Q', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("Q", token0.toString());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'Q', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 178 TABLESWITCH L267 Case 72 - true
   */

  @Test
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 't';
      charArray0[1] = 'H';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'t', 'H', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'t', 'H', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'t', 'H', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("tH", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'t', 'H', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 19
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 170 TABLESWITCH L267 Case 64 - true
   */

  @Test
  public void test019()  throws Throwable  {
      char[] charArray0 = new char[20];
      charArray0[1] = '@';
      charArray0[0] = 't';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("t", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  //Test case number: 20
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 139 TABLESWITCH L159 Case 123 - true
   */

  @Test
  public void test020()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("{", token0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(79, token0.kind);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 223 TABLESWITCH L267 Case 117 - true
   */

  @Test
  public void test021()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = 'u';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', 'u', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'\u0000', 'u', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      charArray0[0] = 't';
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'t', 'u', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("tu", token0.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'t', 'u', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 22
  /*
   * 12 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I173 Branch 238 IFEQ L299 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I191 Branch 239 IFEQ L301 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I209 Branch 240 IFEQ L303 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I227 Branch 241 IFEQ L305 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I245 Branch 242 IFEQ L307 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I263 Branch 243 IFEQ L309 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I281 Branch 244 IFEQ L311 - true
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I299 Branch 245 IFEQ L313 - true
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I317 Branch 246 IFEQ L315 - true
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I335 Branch 247 IFEQ L317 - true
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I353 Branch 248 IFEQ L319 - true
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I371 Branch 249 IFEQ L321 - false
   */

  @Test
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[8];
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("%=");
      assertEquals(2, stringBufferInputStream0.available());
      assertNotNull(stringBufferInputStream0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream((InputStream) stringBufferInputStream0, (-1), (-1));
      assertEquals(2, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(2, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(-1, javaCharStream1.getEndLine());
      assertEquals(-1, javaCharStream1.getLine());
      assertEquals(-1, javaCharStream1.getBeginColumn());
      assertEquals(-1, javaCharStream1.getBeginLine());
      assertEquals("%=", token0.toString());
      assertFalse(javaCharStream1.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals((-1), token0.beginLine);
      assertEquals((-1), token0.endLine);
      assertEquals(117, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals((-1), token0.beginColumn);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
  }

  //Test case number: 23
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 219 TABLESWITCH L267 Case 113 - true
   */

  @Test
  public void test023()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = 'q';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'-', 'q', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'-', 'q', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'-', 'q', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("-", token0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(102, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'-', 'q', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 24
  /*
   * 13 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 217 TABLESWITCH L267 Case 111 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I510 Branch 252 IFEQ L352 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 320 TABLESWITCH L390 Case 111 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 379 TABLESWITCH L466 Case 99 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 388 TABLESWITCH L466 Case 108 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I256 Branch 407 IFEQ L501 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 417 TABLESWITCH L542 Case 101 - true
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 420 TABLESWITCH L542 Case 104 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I88 Branch 437 IFEQ L549 - true
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I107 Branch 438 IFEQ L551 - true
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 449 TABLESWITCH L614 Case 97 - true
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 466 TABLESWITCH L614 Case 114 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I153 Branch 508 IFEQ L693 - false
   */

  @Test
  public void test024()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("boolean");
      assertEquals(7, stringBufferInputStream0.available());
      assertNotNull(stringBufferInputStream0);
      
      byte[] byteArray0 = new byte[25];
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0, (int) (byte)0, (-3392));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(7, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(7, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(-3392, javaCharStream0.getBeginColumn());
      assertEquals(-3386, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(-3386, javaCharStream0.getEndColumn());
      assertEquals("boolean", token0.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(15, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals((-3392), token0.beginColumn);
      assertEquals((-3386), token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertNotNull(token0);
  }

  //Test case number: 25
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 80 TABLESWITCH L159 Case 64 - true
   */

  @Test
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'@', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'@', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'@', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("@", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(86, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'@', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 26
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 206 TABLESWITCH L267 Case 100 - true
   */

  @Test
  public void test026()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'d', 'd', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'d', 'd', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'d', 'd', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("dd", token0.toString());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'d', 'd', '\u0000'}, charArray0);
  }

  //Test case number: 27
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 201 TABLESWITCH L267 Case 95 - true
   */

  @Test
  public void test027()  throws Throwable  {
      char[] charArray0 = new char[13];
      charArray0[0] = '-';
      charArray0[7] = '_';
      charArray0[1] = '_';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("-", token0.toString());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(102, token0.kind);
      assertEquals(1, token0.endColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
  }

  //Test case number: 28
  /*
   * 5 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 689 TABLESWITCH L1166 Case 14 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 690 TABLESWITCH L1166 Case 15 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 691 TABLESWITCH L1166 Case 16 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1586 Branch 735 IFEQ L1193 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1604 Branch 736 IF_ICMPNE L1197 - true
   */

  @Test
  public void test028()  throws Throwable  {
      char[] charArray0 = new char[20];
      charArray0[0] = '\'';
      charArray0[1] = 'T';
      charArray0[5] = 'T';
      charArray0[2] = 'T';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try {
        Token token0 = javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"T\" (84), after : \"\\'T\"
         //
      }
  }

  //Test case number: 29
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.ReInit(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V: root-Branch
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.ReInit(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;I)V: root-Branch
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.ReInitRounds()V: I15 Branch 809 IFLE L1543 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.ReInitRounds()V: I15 Branch 809 IFLE L1543 - false
   */

  @Test
  public void test029()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      PushbackReader pushbackReader0 = new PushbackReader((Reader) charArrayReader0);
      assertNotNull(pushbackReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) pushbackReader0, (int) '\u0000', (int) '-');
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      javaParserTokenManager0.ReInit(javaCharStream0, (int) '\u0000');
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 30
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I38 Branch 15 IFEQ L18 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 62 TABLESWITCH L159 Case 46 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 560 TABLESWITCH L918 Case 8 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I446 Branch 625 IFNE L981 - false
   */

  @Test
  public void test030()  throws Throwable  {
      char[] charArray0 = new char[12];
      charArray0[0] = '.';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(".", token0.toString());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(85, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(token0);
  }

  //Test case number: 31
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 76 TABLESWITCH L159 Case 60 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I143 Branch 237 IFEQ L292 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 269 TABLESWITCH L390 Case 60 - true
   */

  @Test
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '<';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'<', '<', '<', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'<', '<', '<', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'<', '<', '<', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("<<", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(109, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'<', '<', '<', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 32
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 176 TABLESWITCH L267 Case 70 - true
   */

  @Test
  public void test032()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[3] = 'd';
      charArray0[0] = 'd';
      charArray0[1] = 'F';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'d', 'F', '\u0000', 'd', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'d', 'F', '\u0000', 'd', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'d', 'F', '\u0000', 'd', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("dF", token0.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'d', 'F', '\u0000', 'd', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 33
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 101 TABLESWITCH L159 Case 85 - true
   */

  @Test
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'U';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'U', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'U', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'U', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("U", token0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'U', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 34
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 215 TABLESWITCH L267 Case 109 - true
   */

  @Test
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '>';
      charArray0[1] = 'm';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'>', 'm', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'>', 'm', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'>', 'm', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token.GTToken token_GTToken0 = (Token.GTToken)javaParserTokenManager0.getNextToken();
      assertEquals(">", token_GTToken0.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, token_GTToken0.beginColumn);
      assertEquals(1, token_GTToken0.endColumn);
      assertEquals(1, token_GTToken0.beginLine);
      assertEquals(124, token_GTToken0.kind);
      assertEquals(1, token_GTToken0.endLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(token_GTToken0);
      assertArrayEquals(new char[] {'>', 'm', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 35
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 92 TABLESWITCH L159 Case 76 - true
   */

  @Test
  public void test035()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'V';
      charArray0[3] = 'V';
      charArray0[0] = 'L';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'L', '\u0000', '\u0000', 'V', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader((Reader) charArrayReader0, (int) 'V');
      assertNotNull(bufferedReader0);
      assertArrayEquals(new char[] {'L', '\u0000', '\u0000', 'V', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) bufferedReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'L', '\u0000', '\u0000', 'V', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'L', '\u0000', '\u0000', 'V', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("L", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'L', '\u0000', '\u0000', 'V', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 36
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 174 TABLESWITCH L267 Case 68 - true
   */

  @Test
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'D';
      charArray0[1] = 'D';
      charArray0[0] = '+';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'+', 'D', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'+', 'D', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'+', 'D', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("+", token0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(101, token0.kind);
      assertEquals(1, token0.endLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'+', 'D', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 37
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 99 TABLESWITCH L159 Case 83 - true
   */

  @Test
  public void test037()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("SZ1|=ax,sQ1Lgi7");
      assertEquals(15, stringBufferInputStream0.available());
      assertNotNull(stringBufferInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0, (int) 'S', (int) 'S');
      assertEquals(15, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(15, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(83, javaCharStream0.getBeginLine());
      assertEquals(83, javaCharStream0.getLine());
      assertEquals(85, javaCharStream0.getEndColumn());
      assertEquals(83, javaCharStream0.getEndLine());
      assertEquals(85, javaCharStream0.getColumn());
      assertEquals(83, javaCharStream0.getBeginColumn());
      assertEquals("SZ1", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(85, token0.endColumn);
      assertEquals(83, token0.endLine);
      assertEquals(83, token0.beginLine);
      assertEquals(83, token0.beginColumn);
      assertNotNull(token0);
  }

  //Test case number: 38
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 110 TABLESWITCH L159 Case 94 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 200 TABLESWITCH L267 Case 94 - true
   */

  @Test
  public void test038()  throws Throwable  {
      char[] charArray0 = new char[20];
      charArray0[0] = '^';
      charArray0[1] = '^';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("^", token0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(107, token0.kind);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(token0);
  }

  //Test case number: 39
  /*
   * 10 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I101 Branch 19 IFNE L29 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I110 Branch 20 IFEQ L29 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I144 Branch 22 IFEQ L38 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 78 TABLESWITCH L159 Case 62 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 168 TABLESWITCH L267 Case 62 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I389 Branch 250 IFEQ L325 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 287 TABLESWITCH L390 Case 78 - true
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.TokenLexicalActions(Lcom/soops/CEN4010/JMCA/JParser/Token;)V: I4 Branch 845 LOOKUPSWITCH L1740 Case 123 - true
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.TokenLexicalActions(Lcom/soops/CEN4010/JMCA/JParser/Token;)V: I4 Branch 846 LOOKUPSWITCH L1740 Default-Case - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.TokenLexicalActions(Lcom/soops/CEN4010/JMCA/JParser/Token;)V: I66 Branch 848 IFNONNULL L1752 - false
   */

  @Test
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[14];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = 'N';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token.GTToken token_GTToken0 = (Token.GTToken)javaParserTokenManager0.getNextToken();
      assertEquals(">>", token_GTToken0.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, token_GTToken0.endColumn);
      assertEquals(124, token_GTToken0.kind);
      assertEquals(1, token_GTToken0.endLine);
      assertEquals(1, token_GTToken0.beginColumn);
      assertEquals(1, token_GTToken0.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(token_GTToken0);
  }

  //Test case number: 40
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 82 TABLESWITCH L159 Case 66 - true
   */

  @Test
  public void test040()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'B';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'B', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'B', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'B', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("B", token0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'B', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 41
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 185 TABLESWITCH L267 Case 79 - true
   */

  @Test
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'e';
      charArray0[1] = 'O';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'e', 'O', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'e', 'O', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'e', 'O', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("eO", token0.toString());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'e', 'O', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 42
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 230 TABLESWITCH L267 Case 124 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I603 Branch 253 IFEQ L373 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I603 Branch 253 IFEQ L373 - false
   */

  @Test
  public void test042()  throws Throwable  {
      char[] charArray0 = new char[22];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = '|';
      charArray0[3] = '%';
      charArray0[4] = '|';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("||", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(97, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("|", token1.toString());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.endColumn);
      assertEquals(3, token1.beginColumn);
      assertEquals(106, token1.kind);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals("%", token2.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(108, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(4, token2.endColumn);
      assertEquals(4, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
  }

  //Test case number: 43
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 7 TABLESWITCH L13 Case 6 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I402 Branch 38 IFNE L88 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa7_0(JJJJ)I: I59 Branch 515 LOOKUPSWITCH L726 Case 110 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa7_0(JJJJ)I: I59 Branch 518 LOOKUPSWITCH L726 Default-Case - true
   */

  @Test
  public void test043()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("synchrolizd");
      assertEquals(11, stringBufferInputStream0.available());
      assertNotNull(stringBufferInputStream0);
      
      byte[] byteArray0 = new byte[26];
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0, (int) (byte)0, (-3392));
      assertEquals(11, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(11, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("synchrolizd", token0.toString());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(-3382, javaCharStream0.getEndColumn());
      assertEquals(-3392, javaCharStream0.getBeginColumn());
      assertEquals(-3382, javaCharStream0.getColumn());
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals((-3382), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-3392), token0.beginColumn);
      assertEquals(10, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(token0);
  }

  //Test case number: 44
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 85 TABLESWITCH L159 Case 69 - true
   */

  @Test
  public void test044()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'E';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'E', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'E', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'E', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("E", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'E', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 45
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 75 TABLESWITCH L159 Case 59 - true
   */

  @Test
  public void test045()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ';';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {';', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0, (int) '\u0000', (int) ';');
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {';', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {';', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(";", token0.toString());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(59, javaCharStream0.getEndColumn());
      assertEquals(59, javaCharStream0.getColumn());
      assertEquals(59, javaCharStream0.getBeginColumn());
      assertEquals(83, token0.kind);
      assertEquals(59, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(59, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertArrayEquals(new char[] {';', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 46
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 86 TABLESWITCH L159 Case 70 - true
   */

  @Test
  public void test046()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'F', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'F', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'F', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("F", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'F', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 47
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 182 TABLESWITCH L267 Case 76 - true
   */

  @Test
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 't';
      char[] charArray1 = new char[22];
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[1] = 'L';
      charArray1[0] = 't';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("tL", token0.toString());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(token0);
  }

  //Test case number: 48
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 179 TABLESWITCH L267 Case 73 - true
   */

  @Test
  public void test048()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[1] = 's';
      charArray0[2] = 's';
      charArray0[2] = 'I';
      charArray0[0] = ' ';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {' ', 's', 'I', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {' ', 's', 'I', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {' ', 's', 'I', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("sI", token0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(token0);
      assertArrayEquals(new char[] {' ', 's', 'I', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 49
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 68 TABLESWITCH L159 Case 52 - true
   */

  @Test
  public void test049()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '4';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'4', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'4', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'4', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("4", token0.toString());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'4', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 50
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 105 TABLESWITCH L159 Case 89 - true
   */

  @Test
  public void test050()  throws Throwable  {
      char[] charArray0 = new char[14];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      charArray0[0] = 'Y';
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("Y", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  //Test case number: 51
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 53 TABLESWITCH L159 Case 37 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 222 TABLESWITCH L267 Case 116 - true
   */

  @Test
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[27];
      charArray0[1] = 't';
      charArray0[0] = '%';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("%", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(108, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  //Test case number: 52
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 89 TABLESWITCH L159 Case 73 - true
   */

  @Test
  public void test052()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'I', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'I', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'I', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("I", token0.toString());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'I', '\u0000'}, charArray0);
  }

  //Test case number: 53
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 9 TABLESWITCH L13 Case 8 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I508 Branch 44 IFEQ L108 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa9_0(JJ)I: I53 Branch 536 LOOKUPSWITCH L792 Case 122 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa9_0(JJ)I: I53 Branch 537 LOOKUPSWITCH L792 Default-Case - true
   */

  @Test
  public void test053()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("synchroniLed");
      assertEquals(12, stringBufferInputStream0.available());
      assertNotNull(stringBufferInputStream0);
      
      byte[] byteArray0 = new byte[26];
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0, (int) (byte)0, (-3421));
      assertEquals(12, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(12, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("synchroniLed", token0.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(-3410, javaCharStream0.getEndColumn());
      assertEquals(-3410, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(-3421, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(74, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals((-3421), token0.beginColumn);
      assertEquals((-3410), token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(11, javaCharStream0.bufpos);
      assertNotNull(token0);
  }

  //Test case number: 54
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 73 TABLESWITCH L159 Case 57 - true
   */

  @Test
  public void test054()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '9';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'9', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'9', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'9', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("9", token0.toString());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'9', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 55
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I84 Branch 819 IFEQ L1609 - false
   */

  @Test
  public void test055()  throws Throwable  {
      char[] charArray0 = new char[19];
      charArray0[0] = ' ';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try {
        Token token0 = javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\" (0), after : \"\"
         //
      }
  }

  //Test case number: 56
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 109 TABLESWITCH L159 Case 93 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 122 TABLESWITCH L159 Case 106 - true
   */

  @Test
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'j';
      charArray0[1] = ']';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'j', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'j', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'j', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("j", token0.toString());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'j', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("]", token1.toString());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(82, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'j', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 57
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 159 TABLESWITCH L267 Case 53 - true
   */

  @Test
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[26];
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("83w5Z^K+3%2Kn8$H");
      assertEquals(16, stringBufferInputStream0.available());
      assertNotNull(stringBufferInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0, (int) '\u0000', (int) '\u0000');
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(16, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(16, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("83", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(0, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals("w5Z", token1.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(4, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(0, token1.endLine);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  //Test case number: 58
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I2006 Branch 760 IF_ICMPNE L1276 - true
   */

  @Test
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[14];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      charArray0[0] = '5';
      charArray0[1] = '\u0084';
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("5", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
  }

  //Test case number: 59
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 150 TABLESWITCH L267 Case 44 - true
   */

  @Test
  public void test059()  throws Throwable  {
      char[] charArray0 = new char[26];
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("83w,Z^K+3%2Kn8$H");
      assertEquals(16, stringBufferInputStream0.available());
      assertNotNull(stringBufferInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0, (int) '\u0000', (int) 'N');
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(16, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(16, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(79, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(78, javaCharStream0.getBeginColumn());
      assertEquals(79, javaCharStream0.getEndColumn());
      assertEquals("83", token0.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(79, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(78, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(80, javaCharStream0.getColumn());
      assertEquals(80, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(80, javaCharStream0.getEndColumn());
      assertEquals("w", token1.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(80, token1.beginColumn);
      assertEquals(80, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  //Test case number: 60
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 196 TABLESWITCH L267 Case 90 - true
   */

  @Test
  public void test060()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'r';
      charArray0[1] = 'Z';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'r', 'Z', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'r', 'Z', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'r', 'Z', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("rZ", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'r', 'Z', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 61
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 207 TABLESWITCH L267 Case 101 - true
   */

  @Test
  public void test061()  throws Throwable  {
      char[] charArray0 = new char[16];
      charArray0[0] = '-';
      charArray0[1] = 'e';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("-", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(102, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  //Test case number: 62
  /*
   * 16 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 50 TABLESWITCH L159 Case 34 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 575 TABLESWITCH L918 Case 23 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 576 TABLESWITCH L918 Case 24 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 578 TABLESWITCH L918 Case 26 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I125 Branch 608 IF_ICMPNE L929 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I738 Branch 640 IFEQ L1035 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I738 Branch 640 IFEQ L1035 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I778 Branch 642 IF_ICMPNE L1043 - true
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I778 Branch 642 IF_ICMPNE L1043 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I784 Branch 643 IF_ICMPLE L1043 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 698 TABLESWITCH L1166 Case 23 - true
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 699 TABLESWITCH L1166 Case 24 - true
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 701 TABLESWITCH L1166 Case 26 - true
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1645 Branch 738 IFEQ L1205 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1664 Branch 739 IF_ICMPNE L1209 - true
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I542 Branch 835 IF_ICMPGT L1696 - true
   */

  @Test
  public void test062()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\"';
      charArray0[3] = '\"';
      charArray0[4] = '\"';
      charArray0[2] = 'H';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\"', '\u0000', 'H', '\"', '\"', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'\"', '\u0000', 'H', '\"', '\"', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'\"', '\u0000', 'H', '\"', '\"', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("\"\u0000H\"", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(4, token0.endColumn);
      assertEquals(73, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'\"', '\u0000', 'H', '\"', '\"', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try {
        Token token1 = javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 8.  Encountered: <EOF> after : \"\\\"\"
         //
      }
  }

  //Test case number: 63
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 77 TABLESWITCH L159 Case 61 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 167 TABLESWITCH L267 Case 61 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I173 Branch 238 IFEQ L299 - false
   */

  @Test
  public void test063()  throws Throwable  {
      char[] charArray0 = new char[21];
      charArray0[0] = '=';
      charArray0[1] = '=';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("==", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(93, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
  }

  //Test case number: 64
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 133 TABLESWITCH L159 Case 117 - true
   */

  @Test
  public void test064()  throws Throwable  {
      char[] charArray0 = new char[23];
      charArray0[0] = 'u';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("u", token0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(token0);
  }

  //Test case number: 65
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 107 TABLESWITCH L159 Case 91 - true
   */

  @Test
  public void test065()  throws Throwable  {
      char[] charArray0 = new char[14];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      charArray0[0] = '[';
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("[", token0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(81, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(token0);
  }

  //Test case number: 66
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 116 TABLESWITCH L159 Case 100 - true
   */

  @Test
  public void test066()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'd';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'d', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'d', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'d', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("d", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'d', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 67
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 129 TABLESWITCH L159 Case 113 - true
   */

  @Test
  public void test067()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'q';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'q', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'q', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'q', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("q", token0.toString());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'q', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 68
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 187 TABLESWITCH L267 Case 81 - true
   */

  @Test
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = '&';
      charArray0[3] = 'Q';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'n', 'n', '&', 'Q', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'n', 'n', '&', 'Q', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'n', 'n', '&', 'Q', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("nn", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'n', 'n', '&', 'Q', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("&", token1.toString());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(105, token1.kind);
      assertEquals(3, token1.endColumn);
      assertEquals(3, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'n', 'n', '&', 'Q', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 69
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 94 TABLESWITCH L159 Case 78 - true
   */

  @Test
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = 'N';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'N', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'N', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'N', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("N", token0.toString());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'N', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 70
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 171 TABLESWITCH L267 Case 65 - true
   */

  @Test
  public void test070()  throws Throwable  {
      char[] charArray0 = new char[13];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[1] = 'A';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("-", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(102, token0.kind);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
  }

  //Test case number: 71
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 106 TABLESWITCH L159 Case 90 - true
   */

  @Test
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '\"';
      charArray0[0] = 'Z';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'Z', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'Z', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'Z', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("Z", token0.toString());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'Z', '\u0000'}, charArray0);
  }

  //Test case number: 72
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 164 TABLESWITCH L267 Case 58 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 186 TABLESWITCH L267 Case 80 - true
   */

  @Test
  public void test072()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 't';
      charArray0[2] = '+';
      charArray0[3] = ':';
      charArray0[1] = 'P';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'t', 'P', '+', ':', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'t', 'P', '+', ':', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'t', 'P', '+', ':', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("tP", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'t', 'P', '+', ':', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals("+", token1.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(3, token1.beginColumn);
      assertEquals(101, token1.kind);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'t', 'P', '+', ':', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 73
  /*
   * 7 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 64 TABLESWITCH L159 Case 48 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 154 TABLESWITCH L267 Case 48 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 601 TABLESWITCH L918 Case 49 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 603 TABLESWITCH L918 Case 51 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I236 Branch 614 IF_ICMPNE L943 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I244 Branch 615 IF_ICMPLE L945 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1378 Branch 672 IFNE L1151 - false
   */

  @Test
  public void test073()  throws Throwable  {
      char[] charArray0 = new char[19];
      charArray0[0] = '+';
      charArray0[1] = '0';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("+", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(101, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("0", token1.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(66, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  //Test case number: 74
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 136 TABLESWITCH L159 Case 120 - true
   */

  @Test
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'x', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'x', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'x', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("x", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'x', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 75
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 279 TABLESWITCH L390 Case 70 - true
   */

  @Test
  public void test075()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("syFnchrolizd");
      assertEquals(12, stringBufferInputStream0.available());
      assertNotNull(stringBufferInputStream0);
      
      byte[] byteArray0 = new byte[26];
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0, (int) (byte)0, (-3392));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(12, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(12, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(-3381, javaCharStream0.getColumn());
      assertEquals(-3381, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(-3392, javaCharStream0.getBeginColumn());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("syFnchrolizd", token0.toString());
      assertEquals(11, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-3381), token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals((-3392), token0.beginColumn);
      assertNotNull(token0);
  }

  //Test case number: 76
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 108 TABLESWITCH L159 Case 92 - true
   */

  @Test
  public void test076()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\\';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try {
        Token token0 = javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\\\\" (92), after : \"\"
         //
      }
  }

  //Test case number: 77
  /*
   * 5 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 6 TABLESWITCH L13 Case 5 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I349 Branch 35 IFNE L78 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 493 TABLESWITCH L676 Case 110 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 494 TABLESWITCH L676 Case 111 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I153 Branch 508 IFEQ L693 - true
   */

  @Test
  public void test077()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("synchrnzeB");
      assertEquals(10, stringBufferInputStream0.available());
      assertNotNull(stringBufferInputStream0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader((InputStream) stringBufferInputStream0);
      assertEquals(10, stringBufferInputStream0.available());
      assertNotNull(inputStreamReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) inputStreamReader0, (int) '~', (-3334));
      assertEquals(10, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertEquals(10, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("synchrnzeB", token0.toString());
      assertEquals(-3334, javaCharStream0.getBeginColumn());
      assertEquals(126, javaCharStream0.getBeginLine());
      assertEquals(126, javaCharStream0.getLine());
      assertEquals(-3325, javaCharStream0.getColumn());
      assertEquals(-3325, javaCharStream0.getEndColumn());
      assertEquals(126, javaCharStream0.getEndLine());
      assertEquals(126, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-3325), token0.endColumn);
      assertEquals(126, token0.beginLine);
      assertEquals((-3334), token0.beginColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(9, javaCharStream0.bufpos);
      assertNotNull(token0);
  }

  //Test case number: 78
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 125 TABLESWITCH L159 Case 109 - true
   */

  @Test
  public void test078()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'm';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'m', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'m', '\u0000'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertNotNull(token_GTToken0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'m', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("m", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'m', '\u0000'}, charArray0);
  }

  //Test case number: 79
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 103 TABLESWITCH L159 Case 87 - true
   */

  @Test
  public void test079()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'W', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'W', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'W', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("W", token0.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'W', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 80
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 173 TABLESWITCH L267 Case 67 - true
   */

  @Test
  public void test080()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = 'C';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'|', 'C', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'|', 'C', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'|', 'C', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("|", token0.toString());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(106, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'|', 'C', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 81
  /*
   * 15 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_2()I: I4 Branch 788 LOOKUPSWITCH L1403 Case 42 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_2()I: I4 Branch 789 LOOKUPSWITCH L1403 Default-Case - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I57 Branch 813 TABLESWITCH L1605 Case 0 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I57 Branch 815 TABLESWITCH L1605 Case 2 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I191 Branch 822 IFNE L1630 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I198 Branch 823 IF_ICMPLE L1630 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I294 Branch 828 IFEQ L1649 - true
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I353 Branch 830 IFEQ L1658 - true
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I458 Branch 834 IF_ICMPEQ L1679 - true
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I542 Branch 835 IF_ICMPGT L1696 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I562 Branch 836 IF_ICMPEQ L1697 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I569 Branch 837 IF_ICMPNE L1697 - true
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I590 Branch 838 IFNE L1704 - true
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.MoreLexicalActions()V: I18 Branch 841 LOOKUPSWITCH L1724 Case 7 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.MoreLexicalActions()V: I18 Branch 842 LOOKUPSWITCH L1724 Default-Case - true
   */

  @Test
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      LineNumberInputStream lineNumberInputStream0 = new LineNumberInputStream((InputStream) byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, lineNumberInputStream0.getLineNumber());
      assertNotNull(lineNumberInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) lineNumberInputStream0, (int) (byte)0, (int) (byte)0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, lineNumberInputStream0.getLineNumber());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 2);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, lineNumberInputStream0.getLineNumber());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try {
        Token token0 = javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 5.  Encountered: <EOF> after : \"\"
         //
      }
  }

  //Test case number: 82
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 157 TABLESWITCH L267 Case 51 - true
   */

  @Test
  public void test082()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = '3';
      charArray0[0] = 'f';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'f', '3', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'f', '3', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'f', '3', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("f3", token0.toString());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'f', '3', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 83
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 261 TABLESWITCH L390 Case 52 - true
   */

  @Test
  public void test083()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("sy4nchrolizd");
      assertEquals(12, stringBufferInputStream0.available());
      assertNotNull(stringBufferInputStream0);
      
      byte[] byteArray0 = new byte[28];
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0, (int) (byte)0, (-3434));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(12, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(12, stringBufferInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(-3434, javaCharStream0.getBeginColumn());
      assertEquals(-3423, javaCharStream0.getEndColumn());
      assertEquals(-3423, javaCharStream0.getColumn());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("sy4nchrolizd", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(11, javaCharStream0.bufpos);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals((-3423), token0.endColumn);
      assertEquals((-3434), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
  }

  //Test case number: 84
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 166 TABLESWITCH L267 Case 60 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I143 Branch 237 IFEQ L292 - true
   */

  @Test
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = '<';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'e', '<'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'e', '<'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'e', '<'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("e", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'e', '<'}, charArray0);
  }

  //Test case number: 85
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 90 TABLESWITCH L159 Case 74 - true
   */

  @Test
  public void test085()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = 'J';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'J', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'J', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'J', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("J", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'J', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 86
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 127 TABLESWITCH L159 Case 111 - true
   */

  @Test
  public void test086()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = 'o';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'o', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'o', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'o', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("o", token0.toString());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'o', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 87
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 114 TABLESWITCH L159 Case 98 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 204 TABLESWITCH L267 Case 98 - true
   */

  @Test
  public void test087()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'b', 'b', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'b', 'b', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'b', 'b', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("bb", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'b', 'b', '\u0000'}, charArray0);
  }

  //Test case number: 88
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 153 TABLESWITCH L267 Case 47 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I125 Branch 236 IFEQ L288 - true
   */

  @Test
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'-', '/', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'-', '/', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'-', '/', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("-", token0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(102, token0.kind);
      assertEquals(1, token0.endColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'-', '/', '\u0000'}, charArray0);
  }

  //Test case number: 89
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 113 TABLESWITCH L159 Case 97 - true
   */

  @Test
  public void test089()  throws Throwable  {
      char[] charArray0 = new char[18];
      charArray0[0] = 'a';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("a", token0.toString());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
  }

  //Test case number: 90
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.setDebugStream(Ljava/io/PrintStream;)V: root-Branch
   */

  @Test
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) byteArrayInputStream0, (int) (byte)0, (int) (byte)0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (int) (byte)0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("W@2<xW7s0.NH-");
      assertNotNull(mockPrintStream0);
      
      javaParserTokenManager0.setDebugStream((PrintStream) mockPrintStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  //Test case number: 91
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 87 TABLESWITCH L159 Case 71 - true
   */

  @Test
  public void test091()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("Gsynchronized");
      assertEquals(13, stringBufferInputStream0.available());
      assertNotNull(stringBufferInputStream0);
      
      byte[] byteArray0 = new byte[25];
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0, (int) (byte)0, (int) (byte)0, (int) (byte)0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(13, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(13, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(12, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getEndColumn());
      assertEquals("Gsynchronized", token0.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(12, javaCharStream0.bufpos);
      assertEquals(0, token0.beginLine);
      assertEquals(12, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
  }

  //Test case number: 92
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 51 TABLESWITCH L159 Case 35 - true
   */

  @Test
  public void test092()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '#';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'#', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'#', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'#', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try {
        Token token0 = javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"#\" (35), after : \"\"
         //
      }
  }

  //Test case number: 93
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 211 TABLESWITCH L267 Case 105 - true
   */

  @Test
  public void test093()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'i', 'i'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'i', 'i'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'i', 'i'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("ii", token0.toString());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'i', 'i'}, charArray0);
  }

  //Test case number: 94
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 137 TABLESWITCH L159 Case 121 - true
   */

  @Test
  public void test094()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("year");
      assertEquals(4, stringBufferInputStream0.available());
      assertNotNull(stringBufferInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0, (int) (byte)1, (int) (byte)1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(4, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(4, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("year", token0.toString());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertNotNull(token0);
  }

  //Test case number: 95
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 57 TABLESWITCH L159 Case 41 - true
   */

  @Test
  public void test095()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = ')';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {')', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {')', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {')', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(")", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
      assertArrayEquals(new char[] {')', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 96
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 225 TABLESWITCH L267 Case 119 - true
   */

  @Test
  public void test096()  throws Throwable  {
      char[] charArray0 = new char[11];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("ww", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertNotNull(token0);
  }

  //Test case number: 97
  /*
   * 8 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 72 TABLESWITCH L159 Case 56 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I387 Branch 622 IFNE L970 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I401 Branch 623 IF_ICMPLE L972 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I992 Branch 653 IFEQ L1081 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1154 Branch 661 IFEQ L1110 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1236 Branch 665 IFEQ L1125 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1561 Branch 733 IFEQ L1189 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1567 Branch 734 IF_ICMPLE L1189 - false
   */

  @Test
  public void test097()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[2] = '8';
      charArray0[1] = '8';
      charArray0[3] = 'f';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'8', '8', '8', 'f', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'8', '8', '8', 'f', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'8', '8', '8', 'f', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("888f", token0.toString());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(70, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(4, token0.endColumn);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'8', '8', '8', 'f', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 98
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 96 TABLESWITCH L159 Case 80 - true
   */

  @Test
  public void test098()  throws Throwable  {
      char[] charArray0 = new char[11];
      charArray0[0] = 'P';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("P", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
  }

  //Test case number: 99
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 118 TABLESWITCH L159 Case 102 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 180 TABLESWITCH L267 Case 74 - true
   */

  @Test
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'f';
      charArray0[1] = 'J';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'f', 'J', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'f', 'J', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'f', 'J', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("fJ", token0.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'f', 'J', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 100
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 112 TABLESWITCH L159 Case 96 - true
   */

  @Test
  public void test100()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("`ze_N>wMN?x?eaH");
      assertEquals(15, stringBufferInputStream0.available());
      assertNotNull(stringBufferInputStream0);
      
      char[] charArray0 = new char[21];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream((InputStream) stringBufferInputStream0, (-1), (int) '\u0000');
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(15, stringBufferInputStream0.available());
      assertFalse(javaCharStream1.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(15, stringBufferInputStream0.available());
      assertFalse(javaCharStream1.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try {
        Token token0 = javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1, column 0.  Encountered: \"`\" (96), after : \"\"
         //
      }
  }

  //Test case number: 101
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 71 TABLESWITCH L159 Case 55 - true
   */

  @Test
  public void test101()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '7';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'7', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'7', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'7', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("7", token0.toString());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'7', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 102
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 74 TABLESWITCH L159 Case 58 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 132 TABLESWITCH L159 Case 116 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 192 TABLESWITCH L267 Case 86 - true
   */

  @Test
  public void test102()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 't';
      charArray0[2] = ':';
      charArray0[1] = 'V';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'t', 'V', ':', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'t', 'V', ':', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'t', 'V', ':', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("tV", token0.toString());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'t', 'V', ':', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(":", token1.toString());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(92, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.beginColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'t', 'V', ':', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 103
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 104 TABLESWITCH L159 Case 88 - true
   */

  @Test
  public void test103()  throws Throwable  {
      char[] charArray0 = new char[17];
      charArray0[0] = 'X';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("X", token0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(token0);
  }

  //Test case number: 104
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 88 TABLESWITCH L159 Case 72 - true
   */

  @Test
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[14];
      charArray0[0] = 'H';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("H", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  //Test case number: 105
  /*
   * 165 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStartNfaWithStates_0(III)I: root-Branch
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 227 TABLESWITCH L267 Case 121 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 301 TABLESWITCH L390 Case 92 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 319 TABLESWITCH L390 Case 110 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I18 Branch 340 IFNE L459 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 341 TABLESWITCH L466 Case 61 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 342 TABLESWITCH L466 Case 62 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 343 TABLESWITCH L466 Case 63 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 344 TABLESWITCH L466 Case 64 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 345 TABLESWITCH L466 Case 65 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 346 TABLESWITCH L466 Case 66 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 347 TABLESWITCH L466 Case 67 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 348 TABLESWITCH L466 Case 68 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 349 TABLESWITCH L466 Case 69 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 350 TABLESWITCH L466 Case 70 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 351 TABLESWITCH L466 Case 71 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 352 TABLESWITCH L466 Case 72 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 353 TABLESWITCH L466 Case 73 - false
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 354 TABLESWITCH L466 Case 74 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 355 TABLESWITCH L466 Case 75 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 356 TABLESWITCH L466 Case 76 - false
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 357 TABLESWITCH L466 Case 77 - false
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 358 TABLESWITCH L466 Case 78 - false
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 359 TABLESWITCH L466 Case 79 - false
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 360 TABLESWITCH L466 Case 80 - false
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 361 TABLESWITCH L466 Case 81 - false
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 362 TABLESWITCH L466 Case 82 - false
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 363 TABLESWITCH L466 Case 83 - false
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 364 TABLESWITCH L466 Case 84 - false
   * Goal 30. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 365 TABLESWITCH L466 Case 85 - false
   * Goal 31. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 366 TABLESWITCH L466 Case 86 - false
   * Goal 32. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 367 TABLESWITCH L466 Case 87 - false
   * Goal 33. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 368 TABLESWITCH L466 Case 88 - false
   * Goal 34. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 369 TABLESWITCH L466 Case 89 - false
   * Goal 35. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 370 TABLESWITCH L466 Case 90 - false
   * Goal 36. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 371 TABLESWITCH L466 Case 91 - false
   * Goal 37. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 372 TABLESWITCH L466 Case 92 - false
   * Goal 38. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 373 TABLESWITCH L466 Case 93 - false
   * Goal 39. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 374 TABLESWITCH L466 Case 94 - false
   * Goal 40. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 375 TABLESWITCH L466 Case 95 - false
   * Goal 41. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 376 TABLESWITCH L466 Case 96 - false
   * Goal 42. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 377 TABLESWITCH L466 Case 97 - false
   * Goal 43. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 378 TABLESWITCH L466 Case 98 - false
   * Goal 44. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 379 TABLESWITCH L466 Case 99 - true
   * Goal 45. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 380 TABLESWITCH L466 Case 100 - false
   * Goal 46. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 381 TABLESWITCH L466 Case 101 - false
   * Goal 47. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 382 TABLESWITCH L466 Case 102 - false
   * Goal 48. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 383 TABLESWITCH L466 Case 103 - false
   * Goal 49. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 384 TABLESWITCH L466 Case 104 - false
   * Goal 50. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 385 TABLESWITCH L466 Case 105 - false
   * Goal 51. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 386 TABLESWITCH L466 Case 106 - false
   * Goal 52. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 387 TABLESWITCH L466 Case 107 - false
   * Goal 53. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 388 TABLESWITCH L466 Case 108 - false
   * Goal 54. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 389 TABLESWITCH L466 Case 109 - false
   * Goal 55. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 390 TABLESWITCH L466 Case 110 - false
   * Goal 56. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 391 TABLESWITCH L466 Case 111 - false
   * Goal 57. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 392 TABLESWITCH L466 Case 112 - false
   * Goal 58. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 393 TABLESWITCH L466 Case 113 - false
   * Goal 59. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 394 TABLESWITCH L466 Case 114 - false
   * Goal 60. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 395 TABLESWITCH L466 Case 115 - false
   * Goal 61. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 396 TABLESWITCH L466 Case 116 - false
   * Goal 62. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 397 TABLESWITCH L466 Case 117 - false
   * Goal 63. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 398 TABLESWITCH L466 Case 118 - false
   * Goal 64. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(JJJJ)I: I59 Branch 399 TABLESWITCH L466 Default-Case - false
   * Goal 65. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I18 Branch 412 IFNE L535 - true
   * Goal 66. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 413 TABLESWITCH L542 Case 97 - false
   * Goal 67. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 414 TABLESWITCH L542 Case 98 - false
   * Goal 68. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 415 TABLESWITCH L542 Case 99 - false
   * Goal 69. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 416 TABLESWITCH L542 Case 100 - false
   * Goal 70. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 417 TABLESWITCH L542 Case 101 - false
   * Goal 71. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 418 TABLESWITCH L542 Case 102 - false
   * Goal 72. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 419 TABLESWITCH L542 Case 103 - false
   * Goal 73. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 420 TABLESWITCH L542 Case 104 - true
   * Goal 74. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 421 TABLESWITCH L542 Case 105 - false
   * Goal 75. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 422 TABLESWITCH L542 Case 106 - false
   * Goal 76. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 423 TABLESWITCH L542 Case 107 - false
   * Goal 77. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 424 TABLESWITCH L542 Case 108 - false
   * Goal 78. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 425 TABLESWITCH L542 Case 109 - false
   * Goal 79. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 426 TABLESWITCH L542 Case 110 - false
   * Goal 80. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 427 TABLESWITCH L542 Case 111 - false
   * Goal 81. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 428 TABLESWITCH L542 Case 112 - false
   * Goal 82. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 429 TABLESWITCH L542 Case 113 - false
   * Goal 83. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 430 TABLESWITCH L542 Case 114 - false
   * Goal 84. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 431 TABLESWITCH L542 Case 115 - false
   * Goal 85. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 432 TABLESWITCH L542 Case 116 - false
   * Goal 86. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 433 TABLESWITCH L542 Case 117 - false
   * Goal 87. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 434 TABLESWITCH L542 Case 118 - false
   * Goal 88. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 435 TABLESWITCH L542 Case 119 - false
   * Goal 89. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I59 Branch 436 TABLESWITCH L542 Default-Case - false
   * Goal 90. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(JJJJ)I: I135 Branch 439 IFEQ L555 - true
   * Goal 91. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I18 Branch 448 IFNE L607 - true
   * Goal 92. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 449 TABLESWITCH L614 Case 97 - false
   * Goal 93. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 450 TABLESWITCH L614 Case 98 - false
   * Goal 94. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 451 TABLESWITCH L614 Case 99 - false
   * Goal 95. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 452 TABLESWITCH L614 Case 100 - false
   * Goal 96. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 453 TABLESWITCH L614 Case 101 - false
   * Goal 97. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 454 TABLESWITCH L614 Case 102 - false
   * Goal 98. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 455 TABLESWITCH L614 Case 103 - false
   * Goal 99. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 456 TABLESWITCH L614 Case 104 - false
   * Goal 100. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 457 TABLESWITCH L614 Case 105 - false
   * Goal 101. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 458 TABLESWITCH L614 Case 106 - false
   * Goal 102. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 459 TABLESWITCH L614 Case 107 - false
   * Goal 103. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 460 TABLESWITCH L614 Case 108 - false
   * Goal 104. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 461 TABLESWITCH L614 Case 109 - false
   * Goal 105. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 462 TABLESWITCH L614 Case 110 - false
   * Goal 106. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 463 TABLESWITCH L614 Case 111 - false
   * Goal 107. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 464 TABLESWITCH L614 Case 112 - false
   * Goal 108. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 465 TABLESWITCH L614 Case 113 - false
   * Goal 109. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 466 TABLESWITCH L614 Case 114 - true
   * Goal 110. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 467 TABLESWITCH L614 Case 115 - false
   * Goal 111. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 468 TABLESWITCH L614 Case 116 - false
   * Goal 112. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(JJJJ)I: I59 Branch 469 TABLESWITCH L614 Default-Case - false
   * Goal 113. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I18 Branch 479 IFNE L669 - true
   * Goal 114. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 480 TABLESWITCH L676 Case 97 - false
   * Goal 115. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 481 TABLESWITCH L676 Case 98 - false
   * Goal 116. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 482 TABLESWITCH L676 Case 99 - false
   * Goal 117. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 483 TABLESWITCH L676 Case 100 - false
   * Goal 118. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 484 TABLESWITCH L676 Case 101 - false
   * Goal 119. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 485 TABLESWITCH L676 Case 102 - false
   * Goal 120. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 486 TABLESWITCH L676 Case 103 - false
   * Goal 121. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 487 TABLESWITCH L676 Case 104 - false
   * Goal 122. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 488 TABLESWITCH L676 Case 105 - false
   * Goal 123. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 489 TABLESWITCH L676 Case 106 - false
   * Goal 124. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 490 TABLESWITCH L676 Case 107 - false
   * Goal 125. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 491 TABLESWITCH L676 Case 108 - false
   * Goal 126. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 492 TABLESWITCH L676 Case 109 - false
   * Goal 127. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 493 TABLESWITCH L676 Case 110 - false
   * Goal 128. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 494 TABLESWITCH L676 Case 111 - true
   * Goal 129. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 495 TABLESWITCH L676 Case 112 - false
   * Goal 130. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 496 TABLESWITCH L676 Case 113 - false
   * Goal 131. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 497 TABLESWITCH L676 Case 114 - false
   * Goal 132. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 498 TABLESWITCH L676 Case 115 - false
   * Goal 133. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 499 TABLESWITCH L676 Case 116 - false
   * Goal 134. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 500 TABLESWITCH L676 Case 117 - false
   * Goal 135. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 501 TABLESWITCH L676 Case 118 - false
   * Goal 136. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 502 TABLESWITCH L676 Case 119 - false
   * Goal 137. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 503 TABLESWITCH L676 Case 120 - false
   * Goal 138. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 504 TABLESWITCH L676 Case 121 - false
   * Goal 139. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(JJJJ)I: I59 Branch 505 TABLESWITCH L676 Default-Case - false
   * Goal 140. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa7_0(JJJJ)I: I18 Branch 512 IFNE L719 - true
   * Goal 141. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa7_0(JJJJ)I: I59 Branch 513 LOOKUPSWITCH L726 Case 99 - false
   * Goal 142. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa7_0(JJJJ)I: I59 Branch 514 LOOKUPSWITCH L726 Case 101 - false
   * Goal 143. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa7_0(JJJJ)I: I59 Branch 515 LOOKUPSWITCH L726 Case 110 - true
   * Goal 144. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa7_0(JJJJ)I: I59 Branch 516 LOOKUPSWITCH L726 Case 112 - false
   * Goal 145. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa7_0(JJJJ)I: I59 Branch 517 LOOKUPSWITCH L726 Case 116 - false
   * Goal 146. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa7_0(JJJJ)I: I59 Branch 518 LOOKUPSWITCH L726 Default-Case - false
   * Goal 147. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa8_0(JJJJ)I: I18 Branch 523 IFNE L753 - true
   * Goal 148. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa8_0(JJJJ)I: I59 Branch 524 LOOKUPSWITCH L760 Case 100 - false
   * Goal 149. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa8_0(JJJJ)I: I59 Branch 525 LOOKUPSWITCH L760 Case 101 - false
   * Goal 150. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa8_0(JJJJ)I: I59 Branch 526 LOOKUPSWITCH L760 Case 105 - true
   * Goal 151. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa8_0(JJJJ)I: I59 Branch 527 LOOKUPSWITCH L760 Case 111 - false
   * Goal 152. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa8_0(JJJJ)I: I59 Branch 528 LOOKUPSWITCH L760 Case 116 - false
   * Goal 153. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa8_0(JJJJ)I: I59 Branch 529 LOOKUPSWITCH L760 Default-Case - false
   * Goal 154. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa9_0(JJ)I: I12 Branch 533 IFNE L785 - true
   * Goal 155. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa9_0(JJ)I: I53 Branch 534 LOOKUPSWITCH L792 Case 102 - false
   * Goal 156. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa9_0(JJ)I: I53 Branch 535 LOOKUPSWITCH L792 Case 115 - false
   * Goal 157. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa9_0(JJ)I: I53 Branch 536 LOOKUPSWITCH L792 Case 122 - true
   * Goal 158. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa9_0(JJ)I: I53 Branch 537 LOOKUPSWITCH L792 Default-Case - false
   * Goal 159. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa10_0(JJ)I: I12 Branch 540 IFNE L811 - true
   * Goal 160. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa10_0(JJ)I: I53 Branch 541 LOOKUPSWITCH L818 Case 101 - true
   * Goal 161. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa10_0(JJ)I: I53 Branch 542 LOOKUPSWITCH L818 Default-Case - false
   * Goal 162. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa11_0(JJ)I: I12 Branch 543 IFNE L829 - true
   * Goal 163. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa11_0(JJ)I: I53 Branch 544 LOOKUPSWITCH L836 Case 100 - true
   * Goal 164. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa11_0(JJ)I: I53 Branch 545 LOOKUPSWITCH L836 Default-Case - false
   * Goal 165. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa11_0(JJ)I: I64 Branch 546 IFEQ L839 - false
   */

  @Test
  public void test105()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("synchronized");
      assertEquals(12, stringBufferInputStream0.available());
      assertNotNull(stringBufferInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0, (int) (byte) (-33), (-3424));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(12, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(12, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(-33, javaCharStream0.getEndLine());
      assertEquals(-33, javaCharStream0.getLine());
      assertEquals(-3424, javaCharStream0.getBeginColumn());
      assertEquals(-3413, javaCharStream0.getEndColumn());
      assertEquals(-3413, javaCharStream0.getColumn());
      assertEquals(-33, javaCharStream0.getBeginLine());
      assertEquals("synchronized", token0.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(11, javaCharStream0.bufpos);
      assertEquals((-3424), token0.beginColumn);
      assertEquals((-33), token0.endLine);
      assertEquals(56, token0.kind);
      assertEquals((-3413), token0.endColumn);
      assertEquals((-33), token0.beginLine);
      assertNotNull(token0);
  }

  //Test case number: 106
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 138 TABLESWITCH L159 Case 122 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I43 Branch 232 IFEQ L270 - false
   */

  @Test
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[1] = 'I';
      charArray0[2] = 'z';
      charArray0[0] = '&';
      charArray0[1] = '&';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'&', '&', 'z', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'&', '&', 'z', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'&', '&', 'z', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("&&", token0.toString());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, token0.endColumn);
      assertEquals(98, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'&', '&', 'z', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("z", token1.toString());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'&', '&', 'z', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 107
  /*
   * 84 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 1 TABLESWITCH L13 Case 0 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 2 TABLESWITCH L13 Case 1 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I86 Branch 18 IFEQ L27 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I101 Branch 19 IFNE L29 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I119 Branch 21 IF_ICMPEQ L31 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 216 TABLESWITCH L267 Case 110 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I18 Branch 254 IFNE L383 - true
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 255 TABLESWITCH L390 Case 46 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 256 TABLESWITCH L390 Case 47 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 257 TABLESWITCH L390 Case 48 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 258 TABLESWITCH L390 Case 49 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 259 TABLESWITCH L390 Case 50 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 260 TABLESWITCH L390 Case 51 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 261 TABLESWITCH L390 Case 52 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 262 TABLESWITCH L390 Case 53 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 263 TABLESWITCH L390 Case 54 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 264 TABLESWITCH L390 Case 55 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 265 TABLESWITCH L390 Case 56 - false
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 266 TABLESWITCH L390 Case 57 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 267 TABLESWITCH L390 Case 58 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 268 TABLESWITCH L390 Case 59 - false
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 269 TABLESWITCH L390 Case 60 - false
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 270 TABLESWITCH L390 Case 61 - false
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 271 TABLESWITCH L390 Case 62 - false
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 272 TABLESWITCH L390 Case 63 - false
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 273 TABLESWITCH L390 Case 64 - false
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 274 TABLESWITCH L390 Case 65 - false
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 275 TABLESWITCH L390 Case 66 - false
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 276 TABLESWITCH L390 Case 67 - false
   * Goal 30. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 277 TABLESWITCH L390 Case 68 - false
   * Goal 31. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 278 TABLESWITCH L390 Case 69 - false
   * Goal 32. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 279 TABLESWITCH L390 Case 70 - false
   * Goal 33. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 280 TABLESWITCH L390 Case 71 - false
   * Goal 34. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 281 TABLESWITCH L390 Case 72 - false
   * Goal 35. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 282 TABLESWITCH L390 Case 73 - false
   * Goal 36. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 283 TABLESWITCH L390 Case 74 - false
   * Goal 37. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 284 TABLESWITCH L390 Case 75 - false
   * Goal 38. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 285 TABLESWITCH L390 Case 76 - false
   * Goal 39. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 286 TABLESWITCH L390 Case 77 - false
   * Goal 40. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 287 TABLESWITCH L390 Case 78 - false
   * Goal 41. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 288 TABLESWITCH L390 Case 79 - false
   * Goal 42. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 289 TABLESWITCH L390 Case 80 - false
   * Goal 43. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 290 TABLESWITCH L390 Case 81 - false
   * Goal 44. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 291 TABLESWITCH L390 Case 82 - false
   * Goal 45. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 292 TABLESWITCH L390 Case 83 - false
   * Goal 46. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 293 TABLESWITCH L390 Case 84 - false
   * Goal 47. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 294 TABLESWITCH L390 Case 85 - false
   * Goal 48. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 295 TABLESWITCH L390 Case 86 - false
   * Goal 49. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 296 TABLESWITCH L390 Case 87 - false
   * Goal 50. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 297 TABLESWITCH L390 Case 88 - false
   * Goal 51. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 298 TABLESWITCH L390 Case 89 - false
   * Goal 52. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 299 TABLESWITCH L390 Case 90 - false
   * Goal 53. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 300 TABLESWITCH L390 Case 91 - false
   * Goal 54. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 301 TABLESWITCH L390 Case 92 - true
   * Goal 55. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 302 TABLESWITCH L390 Case 93 - false
   * Goal 56. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 303 TABLESWITCH L390 Case 94 - false
   * Goal 57. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 304 TABLESWITCH L390 Case 95 - false
   * Goal 58. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 305 TABLESWITCH L390 Case 96 - false
   * Goal 59. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 306 TABLESWITCH L390 Case 97 - false
   * Goal 60. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 307 TABLESWITCH L390 Case 98 - false
   * Goal 61. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 308 TABLESWITCH L390 Case 99 - false
   * Goal 62. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 309 TABLESWITCH L390 Case 100 - false
   * Goal 63. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 310 TABLESWITCH L390 Case 101 - false
   * Goal 64. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 311 TABLESWITCH L390 Case 102 - false
   * Goal 65. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 312 TABLESWITCH L390 Case 103 - false
   * Goal 66. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 313 TABLESWITCH L390 Case 104 - false
   * Goal 67. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 314 TABLESWITCH L390 Case 105 - false
   * Goal 68. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 315 TABLESWITCH L390 Case 106 - false
   * Goal 69. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 316 TABLESWITCH L390 Case 107 - false
   * Goal 70. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 317 TABLESWITCH L390 Case 108 - false
   * Goal 71. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 318 TABLESWITCH L390 Case 109 - false
   * Goal 72. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 319 TABLESWITCH L390 Case 110 - false
   * Goal 73. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 320 TABLESWITCH L390 Case 111 - false
   * Goal 74. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 321 TABLESWITCH L390 Case 112 - false
   * Goal 75. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 322 TABLESWITCH L390 Case 113 - false
   * Goal 76. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 323 TABLESWITCH L390 Case 114 - false
   * Goal 77. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 324 TABLESWITCH L390 Case 115 - false
   * Goal 78. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 325 TABLESWITCH L390 Case 116 - false
   * Goal 79. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 326 TABLESWITCH L390 Case 117 - false
   * Goal 80. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 327 TABLESWITCH L390 Case 118 - false
   * Goal 81. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 328 TABLESWITCH L390 Case 119 - false
   * Goal 82. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 329 TABLESWITCH L390 Case 120 - false
   * Goal 83. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 330 TABLESWITCH L390 Case 121 - false
   * Goal 84. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I59 Branch 331 TABLESWITCH L390 Default-Case - false
   */

  @Test
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[1] = 'n';
      charArray0[2] = '\\';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'e', 'n', '\\', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'e', 'n', '\\', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'e', 'n', '\\', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("en", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'e', 'n', '\\', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 108
  /*
   * 16 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 65 TABLESWITCH L159 Case 49 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 155 TABLESWITCH L267 Case 49 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 680 TABLESWITCH L1166 Case 5 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 681 TABLESWITCH L1166 Case 6 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 687 TABLESWITCH L1166 Case 12 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 709 TABLESWITCH L1166 Case 34 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 710 TABLESWITCH L1166 Case 35 - true
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 715 TABLESWITCH L1166 Case 40 - true
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 716 TABLESWITCH L1166 Case 41 - true
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 719 TABLESWITCH L1166 Case 44 - true
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 720 TABLESWITCH L1166 Case 45 - true
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1515 Branch 730 IFEQ L1181 - true
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1561 Branch 733 IFEQ L1189 - true
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1727 Branch 742 IFEQ L1221 - true
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1748 Branch 743 IFEQ L1225 - true
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1827 Branch 747 IF_ICMPNE L1241 - true
   */

  @Test
  public void test108()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '|';
      charArray0[2] = '|';
      charArray0[1] = '1';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'|', '1', '|', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'|', '1', '|', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'|', '1', '|', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("|", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(106, token0.kind);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'|', '1', '|', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("1", token1.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token1.beginColumn);
      assertEquals(66, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'|', '1', '|', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 109
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 131 TABLESWITCH L159 Case 115 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 147 TABLESWITCH L267 Case 41 - true
   */

  @Test
  public void test109()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("s).");
      assertEquals(3, stringBufferInputStream0.available());
      assertNotNull(stringBufferInputStream0);
      
      byte[] byteArray0 = new byte[25];
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0, (int) (byte)0, (-3392));
      assertEquals(3, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(3, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("s", token0.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(-3392, javaCharStream0.getEndColumn());
      assertEquals(-3392, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(-3392, javaCharStream0.getBeginColumn());
      assertEquals((-3392), token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals((-3392), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
  }

  //Test case number: 110
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 95 TABLESWITCH L159 Case 79 - true
   */

  @Test
  public void test110()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'O', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'O', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'O', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("O", token0.toString());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'O', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 111
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 126 TABLESWITCH L159 Case 110 - true
   */

  @Test
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = 'n';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'n', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'n', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'n', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("n", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'n', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 112
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 197 TABLESWITCH L267 Case 91 - true
   */

  @Test
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'e';
      charArray0[1] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'e', '[', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'e', '[', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'e', '[', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("e", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'e', '[', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 113
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 123 TABLESWITCH L159 Case 107 - true
   */

  @Test
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'k';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'k', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'k', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'k', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("k", token0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'k', '\u0000'}, charArray0);
  }

  //Test case number: 114
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 60 TABLESWITCH L159 Case 44 - true
   */

  @Test
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ',';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {',', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {',', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {',', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(",", token0.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, token0.beginLine);
      assertEquals(84, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(token0);
      assertArrayEquals(new char[] {',', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 115
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 56 TABLESWITCH L159 Case 40 - true
   */

  @Test
  public void test115()  throws Throwable  {
      char[] charArray0 = new char[14];
      charArray0[0] = '(';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("(", token0.toString());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(77, token0.kind);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
  }

  //Test case number: 116
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 177 TABLESWITCH L267 Case 71 - true
   */

  @Test
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'g';
      charArray0[1] = 'G';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'g', 'G', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'g', 'G', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'g', 'G', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("gG", token0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'g', 'G', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 117
  /*
   * 6 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I62 Branch 17 IFEQ L20 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 135 TABLESWITCH L159 Case 119 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 156 TABLESWITCH L267 Case 50 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 212 TABLESWITCH L267 Case 106 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I931 Branch 650 IFNE L1070 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I945 Branch 651 IF_ICMPLE L1072 - false
   */

  @Test
  public void test117()  throws Throwable  {
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("w2|jWj@M5ECq)0");
      assertEquals(14, stringBufferInputStream0.available());
      assertNotNull(stringBufferInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0, (int) '\u0086', (int) '\u0086');
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(14, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(14, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(134, javaCharStream0.getLine());
      assertEquals(134, javaCharStream0.getBeginColumn());
      assertEquals(135, javaCharStream0.getEndColumn());
      assertEquals(134, javaCharStream0.getBeginLine());
      assertEquals(134, javaCharStream0.getEndLine());
      assertEquals(135, javaCharStream0.getColumn());
      assertEquals("w2", token0.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(134, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(134, token0.beginColumn);
      assertEquals(135, token0.endColumn);
      assertEquals(134, token0.endLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(134, javaCharStream0.getLine());
      assertEquals(134, javaCharStream0.getBeginLine());
      assertEquals(136, javaCharStream0.getBeginColumn());
      assertEquals(134, javaCharStream0.getEndLine());
      assertEquals(136, javaCharStream0.getEndColumn());
      assertEquals(136, javaCharStream0.getColumn());
      assertEquals("|", token1.toString());
      assertEquals(0, stringBufferInputStream0.available());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(136, token1.endColumn);
      assertEquals(134, token1.beginLine);
      assertEquals(134, token1.endLine);
      assertEquals(106, token1.kind);
      assertEquals(136, token1.beginColumn);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  //Test case number: 118
  /*
   * 21 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCheckNAddTwoStates(II)V: root-Branch
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 69 TABLESWITCH L159 Case 53 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCheckNAddStates(II)V: I15 Branch 549 IF_ICMPNE L870 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCheckNAddStates(II)V: I15 Branch 549 IF_ICMPNE L870 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 557 TABLESWITCH L918 Case 5 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 558 TABLESWITCH L918 Case 6 - true
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 564 TABLESWITCH L918 Case 12 - true
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 586 TABLESWITCH L918 Case 34 - true
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 587 TABLESWITCH L918 Case 35 - true
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 592 TABLESWITCH L918 Case 40 - true
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 593 TABLESWITCH L918 Case 41 - true
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 596 TABLESWITCH L918 Case 44 - true
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 597 TABLESWITCH L918 Case 45 - true
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I76 Branch 605 IFEQ L921 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I205 Branch 612 IFEQ L937 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I213 Branch 613 IF_ICMPLE L939 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I387 Branch 622 IFNE L970 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I992 Branch 653 IFEQ L1081 - true
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1011 Branch 654 IF_ICMPEQ L1085 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1154 Branch 661 IFEQ L1110 - true
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1236 Branch 665 IFEQ L1125 - true
   */

  @Test
  public void test118()  throws Throwable  {
      char[] charArray0 = new char[14];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      charArray0[0] = '5';
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("5", token0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
  }

  //Test case number: 119
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 145 TABLESWITCH L267 Case 39 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 567 TABLESWITCH L918 Case 15 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I567 Branch 631 IFEQ L1003 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I585 Branch 632 IF_ICMPNE L1007 - true
   */

  @Test
  public void test119()  throws Throwable  {
      char[] charArray0 = new char[26];
      charArray0[1] = '\'';
      charArray0[0] = '|';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("|", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(106, token0.kind);
      assertNotNull(token0);
      
      // Undeclared exception!
      try {
        Token token1 = javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: \"\" (0), after : \"\\'\"
         //
      }
  }

  //Test case number: 120
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 193 TABLESWITCH L267 Case 87 - true
   */

  @Test
  public void test120()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      charArray0[1] = 'W';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'v', 'W', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'v', 'W', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'v', 'W', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("vW", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'v', 'W', '\u0000'}, charArray0);
  }

  //Test case number: 121
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1880 Branch 749 LOOKUPSWITCH L1252 Case 3 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCanMove_1(IIIJJ)Z: I3 Branch 797 LOOKUPSWITCH L1447 Case 0 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCanMove_1(IIIJJ)Z: I3 Branch 802 LOOKUPSWITCH L1447 Default-Case - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCanMove_1(IIIJJ)Z: I126 Branch 808 IFEQ L1460 - true
   */

  @Test
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-53);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) byteArrayInputStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try {
        Token token0 = javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
      }
  }

  //Test case number: 122
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 115 TABLESWITCH L159 Case 99 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 220 TABLESWITCH L267 Case 114 - true
   */

  @Test
  public void test122()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'c';
      charArray0[1] = 'r';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'c', 'r', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'c', 'r', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'c', 'r', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("cr", token0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'c', 'r', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 123
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 119 TABLESWITCH L159 Case 103 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 189 TABLESWITCH L267 Case 83 - true
   */

  @Test
  public void test123()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[1] = 'S';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'g', 'S', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'g', 'S', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'g', 'S', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("gS", token0.toString());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'g', 'S', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 124
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 214 TABLESWITCH L267 Case 108 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(JJJJ)I: I18 Branch 254 IFNE L383 - false
   */

  @Test
  public void test124()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'l', 'l', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'l', 'l', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'l', 'l', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("ll", token0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'l', 'l', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 125
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 121 TABLESWITCH L159 Case 105 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 165 TABLESWITCH L267 Case 59 - true
   */

  @Test
  public void test125()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = ';';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'i', ';', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'i', ';', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'i', ';', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("i", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'i', ';', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 126
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 134 TABLESWITCH L159 Case 118 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 224 TABLESWITCH L267 Case 118 - true
   */

  @Test
  public void test126()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = 'v';
      charArray0[1] = 'v';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'v', 'v', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'v', 'v', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'v', 'v', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("vv", token0.toString());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'v', 'v', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 127
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 128 TABLESWITCH L159 Case 112 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 218 TABLESWITCH L267 Case 112 - true
   */

  @Test
  public void test127()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'p';
      charArray0[1] = 'p';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'p', 'p', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'p', 'p', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'p', 'p', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("pp", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'p', 'p', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 128
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 148 TABLESWITCH L267 Case 42 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I61 Branch 233 IFEQ L274 - true
   */

  @Test
  public void test128()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '-';
      charArray0[1] = '*';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'-', '*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'-', '*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'-', '*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("-", token0.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, token0.beginColumn);
      assertEquals(102, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'-', '*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 129
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 205 TABLESWITCH L267 Case 99 - true
   */

  @Test
  public void test129()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'r';
      charArray0[1] = 'c';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'r', 'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'r', 'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'r', 'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("rc", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'r', 'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 130
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 49 TABLESWITCH L159 Case 33 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 228 TABLESWITCH L267 Case 122 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 726 TABLESWITCH L1166 Default-Case - true
   */

  @Test
  public void test130()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '!';
      charArray0[1] = 'z';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'!', 'z', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'!', 'z', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'!', 'z', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("!", token0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(89, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'!', 'z', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 131
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 120 TABLESWITCH L159 Case 104 - true
   */

  @Test
  public void test131()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'h', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'h', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'h', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("h", token0.toString());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'h', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 132
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 81 TABLESWITCH L159 Case 65 - true
   */

  @Test
  public void test132()  throws Throwable  {
      char[] charArray0 = new char[13];
      charArray0[0] = 'S';
      charArray0[0] = 'A';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("A", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  //Test case number: 133
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 111 TABLESWITCH L159 Case 95 - true
   */

  @Test
  public void test133()  throws Throwable  {
      char[] charArray0 = new char[14];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      charArray0[0] = '_';
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("_", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
  }

  //Test case number: 134
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 58 TABLESWITCH L159 Case 42 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1880 Branch 752 LOOKUPSWITCH L1252 Case 32 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1880 Branch 753 LOOKUPSWITCH L1252 Default-Case - true
   */

  @Test
  public void test134()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '*';
      charArray0[1] = '\u0082';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'*', '\u0082', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'*', '\u0082', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'*', '\u0082', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("*", token0.toString());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(103, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'*', '\u0082', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 135
  /*
   * 2 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 117 TABLESWITCH L159 Case 101 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I98 Branch 235 IFEQ L282 - true
   */

  @Test
  public void test135()  throws Throwable  {
      char[] charArray0 = new char[18];
      charArray0[0] = 'e';
      charArray0[1] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("e", token0.toString());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(token0);
  }

  //Test case number: 136
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 98 TABLESWITCH L159 Case 82 - true
   */

  @Test
  public void test136()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = 'R';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'R', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'R', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'R', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("R", token0.toString());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'R', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 137
  /*
   * 9 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 55 TABLESWITCH L159 Case 39 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjAddStates(II)V: I23 Branch 548 IF_ICMPNE L859 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjAddStates(II)V: I23 Branch 548 IF_ICMPNE L859 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 566 TABLESWITCH L918 Case 14 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 568 TABLESWITCH L918 Case 16 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I144 Branch 609 IF_ICMPNE L931 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I567 Branch 631 IFEQ L1003 - true
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1416 Branch 674 IF_ICMPNE L1159 - true
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I604 Branch 839 IF_ICMPGT L1706 - true
   */

  @Test
  public void test137()  throws Throwable  {
      char[] charArray0 = new char[14];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try {
        Token token0 = javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\\'\" (39), after : \"\\'\"
         //
      }
  }

  //Test case number: 138
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 54 TABLESWITCH L159 Case 38 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 124 TABLESWITCH L159 Case 108 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 144 TABLESWITCH L267 Case 38 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I43 Branch 232 IFEQ L270 - true
   */

  @Test
  public void test138()  throws Throwable  {
      char[] charArray0 = new char[22];
      charArray0[0] = 'l';
      charArray0[1] = '&';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("l", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("&", token1.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, token1.beginLine);
      assertEquals(105, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  //Test case number: 139
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 84 TABLESWITCH L159 Case 68 - true
   */

  @Test
  public void test139()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'D', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'D', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'D', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("D", token0.toString());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'D', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 140
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 93 TABLESWITCH L159 Case 77 - true
   */

  @Test
  public void test140()  throws Throwable  {
      char[] charArray0 = new char[23];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      charArray0[0] = 'M';
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("M", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
  }

  //Test case number: 141
  /*
   * 3 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 61 TABLESWITCH L159 Case 45 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 151 TABLESWITCH L267 Case 45 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I98 Branch 235 IFEQ L282 - false
   */

  @Test
  public void test141()  throws Throwable  {
      char[] charArray0 = new char[13];
      charArray0[0] = '-';
      charArray0[1] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("--", token0.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(100, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(token0);
  }

  //Test case number: 142
  /*
   * 6 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I53 Branch 16 IFNE L20 - false
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I62 Branch 17 IFEQ L20 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 140 TABLESWITCH L159 Case 124 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 231 TABLESWITCH L267 Default-Case - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I80 Branch 234 IFEQ L278 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 604 TABLESWITCH L918 Default-Case - true
   */

  @Test
  public void test142()  throws Throwable  {
      char[] charArray0 = new char[25];
      charArray0[1] = '+';
      charArray0[0] = '|';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("|", token0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(106, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("+", token1.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(101, token1.kind);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  //Test case number: 143
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 102 TABLESWITCH L159 Case 86 - true
   */

  @Test
  public void test143()  throws Throwable  {
      char[] charArray0 = new char[11];
      charArray0[0] = 'V';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("V", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
  }

  //Test case number: 144
  /*
   * 4 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 52 TABLESWITCH L159 Case 36 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I95 Branch 606 IF_ICMPNE L923 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I103 Branch 607 IF_ICMPLE L925 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1459 Branch 727 IFNE L1170 - false
   */

  @Test
  public void test144()  throws Throwable  {
      char[] charArray0 = new char[8];
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("$|");
      assertEquals(2, stringBufferInputStream0.available());
      assertNotNull(stringBufferInputStream0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream((InputStream) stringBufferInputStream0, (-3398), (-1));
      assertEquals(2, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(2, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals(-3398, javaCharStream1.getEndLine());
      assertEquals(-1, javaCharStream1.getColumn());
      assertEquals(-1, javaCharStream1.getBeginColumn());
      assertEquals(-3398, javaCharStream1.getBeginLine());
      assertEquals(-3398, javaCharStream1.getLine());
      assertEquals(-1, javaCharStream1.getEndColumn());
      assertEquals("$", token0.toString());
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(javaCharStream1.staticFlag);
      assertEquals((-1), token0.endColumn);
      assertEquals((-1), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-3398), token0.beginLine);
      assertEquals((-3398), token0.endLine);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
  }

  //Test case number: 145
  /*
   * 6 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 100 TABLESWITCH L159 Case 84 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 555 TABLESWITCH L918 Case 3 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 584 TABLESWITCH L918 Case 32 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I931 Branch 650 IFNE L1070 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 678 TABLESWITCH L1166 Case 3 - true
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 707 TABLESWITCH L1166 Case 32 - false
   */

  @Test
  public void test145()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'T';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'T', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'T', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'T', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("T", token0.toString());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'T', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 146
  /*
   * 1 covered goal:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.SwitchTo(I)V: I12 Branch 811 IFGE L1553 - false
   */

  @Test
  public void test146()  throws Throwable  {
      char[] charArray0 = new char[8];
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream("K$");
      assertEquals(2, stringBufferInputStream0.available());
      assertNotNull(stringBufferInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) stringBufferInputStream0, (int) '\u0000', (int) '\u0000', (-3430));
      assertEquals(2, stringBufferInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (-3430));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -3430. State unchanged.
         //
      }
  }

  //Test case number: 147
  /*
   * 73 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 59 TABLESWITCH L159 Case 43 - true
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 143 TABLESWITCH L159 Default-Case - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 149 TABLESWITCH L267 Case 43 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 191 TABLESWITCH L267 Case 85 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I80 Branch 234 IFEQ L278 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I50 Branch 551 IF_ICMPGE L913 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 552 TABLESWITCH L918 Case 0 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 553 TABLESWITCH L918 Case 1 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 554 TABLESWITCH L918 Case 2 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 555 TABLESWITCH L918 Case 3 - true
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 556 TABLESWITCH L918 Case 4 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 557 TABLESWITCH L918 Case 5 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 558 TABLESWITCH L918 Case 6 - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 559 TABLESWITCH L918 Case 7 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 560 TABLESWITCH L918 Case 8 - false
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 561 TABLESWITCH L918 Case 9 - false
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 562 TABLESWITCH L918 Case 10 - false
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 563 TABLESWITCH L918 Case 11 - false
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 564 TABLESWITCH L918 Case 12 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 565 TABLESWITCH L918 Case 13 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 566 TABLESWITCH L918 Case 14 - false
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 567 TABLESWITCH L918 Case 15 - false
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 568 TABLESWITCH L918 Case 16 - false
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 569 TABLESWITCH L918 Case 17 - false
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 570 TABLESWITCH L918 Case 18 - false
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 571 TABLESWITCH L918 Case 19 - false
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 572 TABLESWITCH L918 Case 20 - false
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 573 TABLESWITCH L918 Case 21 - false
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 574 TABLESWITCH L918 Case 22 - false
   * Goal 30. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 575 TABLESWITCH L918 Case 23 - false
   * Goal 31. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 576 TABLESWITCH L918 Case 24 - false
   * Goal 32. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 577 TABLESWITCH L918 Case 25 - false
   * Goal 33. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 578 TABLESWITCH L918 Case 26 - false
   * Goal 34. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 579 TABLESWITCH L918 Case 27 - false
   * Goal 35. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 580 TABLESWITCH L918 Case 28 - false
   * Goal 36. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 581 TABLESWITCH L918 Case 29 - false
   * Goal 37. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 582 TABLESWITCH L918 Case 30 - false
   * Goal 38. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 583 TABLESWITCH L918 Case 31 - false
   * Goal 39. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 584 TABLESWITCH L918 Case 32 - false
   * Goal 40. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 585 TABLESWITCH L918 Case 33 - false
   * Goal 41. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 586 TABLESWITCH L918 Case 34 - false
   * Goal 42. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 587 TABLESWITCH L918 Case 35 - false
   * Goal 43. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 588 TABLESWITCH L918 Case 36 - false
   * Goal 44. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 589 TABLESWITCH L918 Case 37 - false
   * Goal 45. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 590 TABLESWITCH L918 Case 38 - false
   * Goal 46. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 591 TABLESWITCH L918 Case 39 - false
   * Goal 47. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 592 TABLESWITCH L918 Case 40 - false
   * Goal 48. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 593 TABLESWITCH L918 Case 41 - false
   * Goal 49. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 594 TABLESWITCH L918 Case 42 - false
   * Goal 50. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 595 TABLESWITCH L918 Case 43 - false
   * Goal 51. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 596 TABLESWITCH L918 Case 44 - false
   * Goal 52. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 597 TABLESWITCH L918 Case 45 - false
   * Goal 53. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 598 TABLESWITCH L918 Case 46 - false
   * Goal 54. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 599 TABLESWITCH L918 Case 47 - false
   * Goal 55. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 600 TABLESWITCH L918 Case 48 - false
   * Goal 56. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 601 TABLESWITCH L918 Case 49 - false
   * Goal 57. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 602 TABLESWITCH L918 Case 50 - false
   * Goal 58. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 603 TABLESWITCH L918 Case 51 - false
   * Goal 59. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I65 Branch 604 TABLESWITCH L918 Default-Case - false
   * Goal 60. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I76 Branch 605 IFEQ L921 - true
   * Goal 61. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I95 Branch 606 IF_ICMPNE L923 - true
   * Goal 62. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I125 Branch 608 IF_ICMPNE L929 - true
   * Goal 63. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I144 Branch 609 IF_ICMPNE L931 - true
   * Goal 64. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I163 Branch 610 IF_ICMPNE L933 - true
   * Goal 65. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I181 Branch 611 IF_ICMPNE L935 - true
   * Goal 66. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I205 Branch 612 IFEQ L937 - true
   * Goal 67. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I236 Branch 614 IF_ICMPNE L943 - true
   * Goal 68. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1416 Branch 674 IF_ICMPNE L1159 - false
   * Goal 69. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I72 Branch 818 IF_ICMPGT L1609 - false
   * Goal 70. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I84 Branch 819 IFEQ L1609 - true
   * Goal 71. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I251 Branch 826 IF_ICMPEQ L1645 - true
   * Goal 72. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I590 Branch 838 IFNE L1704 - false
   * Goal 73. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I604 Branch 839 IF_ICMPGT L1706 - false
   */

  @Test
  public void test147()  throws Throwable  {
      char[] charArray0 = new char[25];
      charArray0[1] = '+';
      charArray0[0] = '+';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("++", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(99, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      // Undeclared exception!
      try {
        Token token1 = javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"\" (0), after : \"\"
         //
      }
  }

  //Test case number: 148
  /*
   * 5 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopAtPos(II)I: root-Branch
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 130 TABLESWITCH L159 Case 114 - false
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 141 TABLESWITCH L159 Case 125 - true
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjFillToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I26 Branch 812 IFNONNULL L1564 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I262 Branch 827 IF_ICMPGE L1647 - true
   */

  @Test
  public void test148()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '}';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("}", token0.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(80, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  //Test case number: 149
  /*
   * 293 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStartNfa_0(IJJ)I: root-Branch
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 1 TABLESWITCH L13 Case 0 - true
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 2 TABLESWITCH L13 Case 1 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 3 TABLESWITCH L13 Case 2 - false
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 4 TABLESWITCH L13 Case 3 - false
   * Goal 6. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 5 TABLESWITCH L13 Case 4 - false
   * Goal 7. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 6 TABLESWITCH L13 Case 5 - false
   * Goal 8. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 7 TABLESWITCH L13 Case 6 - false
   * Goal 9. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 8 TABLESWITCH L13 Case 7 - false
   * Goal 10. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 9 TABLESWITCH L13 Case 8 - false
   * Goal 11. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 10 TABLESWITCH L13 Case 9 - false
   * Goal 12. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 11 TABLESWITCH L13 Case 10 - false
   * Goal 13. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I3 Branch 12 TABLESWITCH L13 Default-Case - false
   * Goal 14. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I14 Branch 13 IFNE L16 - false
   * Goal 15. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I23 Branch 14 IFEQ L16 - true
   * Goal 16. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I38 Branch 15 IFEQ L18 - true
   * Goal 17. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjStopStringLiteralDfa_0(IJJ)I: I53 Branch 16 IFNE L20 - true
   * Goal 18. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 49 TABLESWITCH L159 Case 33 - false
   * Goal 19. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 50 TABLESWITCH L159 Case 34 - false
   * Goal 20. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 51 TABLESWITCH L159 Case 35 - false
   * Goal 21. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 52 TABLESWITCH L159 Case 36 - false
   * Goal 22. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 53 TABLESWITCH L159 Case 37 - false
   * Goal 23. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 54 TABLESWITCH L159 Case 38 - false
   * Goal 24. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 55 TABLESWITCH L159 Case 39 - false
   * Goal 25. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 56 TABLESWITCH L159 Case 40 - false
   * Goal 26. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 57 TABLESWITCH L159 Case 41 - false
   * Goal 27. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 58 TABLESWITCH L159 Case 42 - false
   * Goal 28. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 59 TABLESWITCH L159 Case 43 - false
   * Goal 29. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 60 TABLESWITCH L159 Case 44 - false
   * Goal 30. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 61 TABLESWITCH L159 Case 45 - false
   * Goal 31. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 62 TABLESWITCH L159 Case 46 - false
   * Goal 32. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 63 TABLESWITCH L159 Case 47 - false
   * Goal 33. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 64 TABLESWITCH L159 Case 48 - false
   * Goal 34. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 65 TABLESWITCH L159 Case 49 - false
   * Goal 35. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 66 TABLESWITCH L159 Case 50 - false
   * Goal 36. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 67 TABLESWITCH L159 Case 51 - false
   * Goal 37. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 68 TABLESWITCH L159 Case 52 - false
   * Goal 38. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 69 TABLESWITCH L159 Case 53 - false
   * Goal 39. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 70 TABLESWITCH L159 Case 54 - false
   * Goal 40. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 71 TABLESWITCH L159 Case 55 - false
   * Goal 41. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 72 TABLESWITCH L159 Case 56 - false
   * Goal 42. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 73 TABLESWITCH L159 Case 57 - false
   * Goal 43. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 74 TABLESWITCH L159 Case 58 - false
   * Goal 44. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 75 TABLESWITCH L159 Case 59 - false
   * Goal 45. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 76 TABLESWITCH L159 Case 60 - false
   * Goal 46. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 77 TABLESWITCH L159 Case 61 - false
   * Goal 47. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 78 TABLESWITCH L159 Case 62 - false
   * Goal 48. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 79 TABLESWITCH L159 Case 63 - false
   * Goal 49. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 80 TABLESWITCH L159 Case 64 - false
   * Goal 50. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 81 TABLESWITCH L159 Case 65 - false
   * Goal 51. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 82 TABLESWITCH L159 Case 66 - false
   * Goal 52. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 83 TABLESWITCH L159 Case 67 - false
   * Goal 53. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 84 TABLESWITCH L159 Case 68 - false
   * Goal 54. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 85 TABLESWITCH L159 Case 69 - false
   * Goal 55. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 86 TABLESWITCH L159 Case 70 - false
   * Goal 56. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 87 TABLESWITCH L159 Case 71 - false
   * Goal 57. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 88 TABLESWITCH L159 Case 72 - false
   * Goal 58. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 89 TABLESWITCH L159 Case 73 - false
   * Goal 59. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 90 TABLESWITCH L159 Case 74 - false
   * Goal 60. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 91 TABLESWITCH L159 Case 75 - false
   * Goal 61. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 92 TABLESWITCH L159 Case 76 - false
   * Goal 62. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 93 TABLESWITCH L159 Case 77 - false
   * Goal 63. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 94 TABLESWITCH L159 Case 78 - false
   * Goal 64. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 95 TABLESWITCH L159 Case 79 - false
   * Goal 65. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 96 TABLESWITCH L159 Case 80 - false
   * Goal 66. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 97 TABLESWITCH L159 Case 81 - false
   * Goal 67. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 98 TABLESWITCH L159 Case 82 - false
   * Goal 68. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 99 TABLESWITCH L159 Case 83 - false
   * Goal 69. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 100 TABLESWITCH L159 Case 84 - false
   * Goal 70. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 101 TABLESWITCH L159 Case 85 - false
   * Goal 71. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 102 TABLESWITCH L159 Case 86 - false
   * Goal 72. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 103 TABLESWITCH L159 Case 87 - false
   * Goal 73. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 104 TABLESWITCH L159 Case 88 - false
   * Goal 74. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 105 TABLESWITCH L159 Case 89 - false
   * Goal 75. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 106 TABLESWITCH L159 Case 90 - false
   * Goal 76. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 107 TABLESWITCH L159 Case 91 - false
   * Goal 77. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 108 TABLESWITCH L159 Case 92 - false
   * Goal 78. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 109 TABLESWITCH L159 Case 93 - false
   * Goal 79. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 110 TABLESWITCH L159 Case 94 - false
   * Goal 80. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 111 TABLESWITCH L159 Case 95 - false
   * Goal 81. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 112 TABLESWITCH L159 Case 96 - false
   * Goal 82. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 113 TABLESWITCH L159 Case 97 - false
   * Goal 83. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 114 TABLESWITCH L159 Case 98 - false
   * Goal 84. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 115 TABLESWITCH L159 Case 99 - false
   * Goal 85. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 116 TABLESWITCH L159 Case 100 - false
   * Goal 86. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 117 TABLESWITCH L159 Case 101 - false
   * Goal 87. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 118 TABLESWITCH L159 Case 102 - false
   * Goal 88. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 119 TABLESWITCH L159 Case 103 - false
   * Goal 89. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 120 TABLESWITCH L159 Case 104 - false
   * Goal 90. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 121 TABLESWITCH L159 Case 105 - false
   * Goal 91. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 122 TABLESWITCH L159 Case 106 - false
   * Goal 92. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 123 TABLESWITCH L159 Case 107 - false
   * Goal 93. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 124 TABLESWITCH L159 Case 108 - false
   * Goal 94. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 125 TABLESWITCH L159 Case 109 - false
   * Goal 95. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 126 TABLESWITCH L159 Case 110 - false
   * Goal 96. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 127 TABLESWITCH L159 Case 111 - false
   * Goal 97. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 128 TABLESWITCH L159 Case 112 - false
   * Goal 98. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 129 TABLESWITCH L159 Case 113 - false
   * Goal 99. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 130 TABLESWITCH L159 Case 114 - true
   * Goal 100. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 131 TABLESWITCH L159 Case 115 - false
   * Goal 101. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 132 TABLESWITCH L159 Case 116 - false
   * Goal 102. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 133 TABLESWITCH L159 Case 117 - false
   * Goal 103. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 134 TABLESWITCH L159 Case 118 - false
   * Goal 104. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 135 TABLESWITCH L159 Case 119 - false
   * Goal 105. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 136 TABLESWITCH L159 Case 120 - false
   * Goal 106. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 137 TABLESWITCH L159 Case 121 - false
   * Goal 107. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 138 TABLESWITCH L159 Case 122 - false
   * Goal 108. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 139 TABLESWITCH L159 Case 123 - false
   * Goal 109. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 140 TABLESWITCH L159 Case 124 - false
   * Goal 110. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 141 TABLESWITCH L159 Case 125 - false
   * Goal 111. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 142 TABLESWITCH L159 Case 126 - false
   * Goal 112. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()I: I4 Branch 143 TABLESWITCH L159 Default-Case - false
   * Goal 113. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 144 TABLESWITCH L267 Case 38 - false
   * Goal 114. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 145 TABLESWITCH L267 Case 39 - false
   * Goal 115. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 146 TABLESWITCH L267 Case 40 - false
   * Goal 116. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 147 TABLESWITCH L267 Case 41 - false
   * Goal 117. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 148 TABLESWITCH L267 Case 42 - false
   * Goal 118. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 149 TABLESWITCH L267 Case 43 - false
   * Goal 119. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 150 TABLESWITCH L267 Case 44 - false
   * Goal 120. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 151 TABLESWITCH L267 Case 45 - false
   * Goal 121. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 152 TABLESWITCH L267 Case 46 - false
   * Goal 122. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 153 TABLESWITCH L267 Case 47 - false
   * Goal 123. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 154 TABLESWITCH L267 Case 48 - false
   * Goal 124. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 155 TABLESWITCH L267 Case 49 - false
   * Goal 125. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 156 TABLESWITCH L267 Case 50 - false
   * Goal 126. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 157 TABLESWITCH L267 Case 51 - false
   * Goal 127. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 158 TABLESWITCH L267 Case 52 - false
   * Goal 128. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 159 TABLESWITCH L267 Case 53 - false
   * Goal 129. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 160 TABLESWITCH L267 Case 54 - false
   * Goal 130. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 161 TABLESWITCH L267 Case 55 - false
   * Goal 131. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 162 TABLESWITCH L267 Case 56 - false
   * Goal 132. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 163 TABLESWITCH L267 Case 57 - false
   * Goal 133. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 164 TABLESWITCH L267 Case 58 - false
   * Goal 134. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 165 TABLESWITCH L267 Case 59 - false
   * Goal 135. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 166 TABLESWITCH L267 Case 60 - false
   * Goal 136. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 167 TABLESWITCH L267 Case 61 - false
   * Goal 137. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 168 TABLESWITCH L267 Case 62 - false
   * Goal 138. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 169 TABLESWITCH L267 Case 63 - false
   * Goal 139. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 170 TABLESWITCH L267 Case 64 - false
   * Goal 140. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 171 TABLESWITCH L267 Case 65 - false
   * Goal 141. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 172 TABLESWITCH L267 Case 66 - false
   * Goal 142. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 173 TABLESWITCH L267 Case 67 - false
   * Goal 143. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 174 TABLESWITCH L267 Case 68 - false
   * Goal 144. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 175 TABLESWITCH L267 Case 69 - false
   * Goal 145. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 176 TABLESWITCH L267 Case 70 - false
   * Goal 146. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 177 TABLESWITCH L267 Case 71 - false
   * Goal 147. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 178 TABLESWITCH L267 Case 72 - false
   * Goal 148. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 179 TABLESWITCH L267 Case 73 - false
   * Goal 149. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 180 TABLESWITCH L267 Case 74 - false
   * Goal 150. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 181 TABLESWITCH L267 Case 75 - false
   * Goal 151. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 182 TABLESWITCH L267 Case 76 - false
   * Goal 152. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 183 TABLESWITCH L267 Case 77 - false
   * Goal 153. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 184 TABLESWITCH L267 Case 78 - false
   * Goal 154. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 185 TABLESWITCH L267 Case 79 - false
   * Goal 155. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 186 TABLESWITCH L267 Case 80 - false
   * Goal 156. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 187 TABLESWITCH L267 Case 81 - false
   * Goal 157. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 188 TABLESWITCH L267 Case 82 - false
   * Goal 158. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 189 TABLESWITCH L267 Case 83 - false
   * Goal 159. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 190 TABLESWITCH L267 Case 84 - false
   * Goal 160. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 191 TABLESWITCH L267 Case 85 - true
   * Goal 161. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 192 TABLESWITCH L267 Case 86 - false
   * Goal 162. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 193 TABLESWITCH L267 Case 87 - false
   * Goal 163. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 194 TABLESWITCH L267 Case 88 - false
   * Goal 164. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 195 TABLESWITCH L267 Case 89 - false
   * Goal 165. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 196 TABLESWITCH L267 Case 90 - false
   * Goal 166. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 197 TABLESWITCH L267 Case 91 - false
   * Goal 167. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 198 TABLESWITCH L267 Case 92 - false
   * Goal 168. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 199 TABLESWITCH L267 Case 93 - false
   * Goal 169. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 200 TABLESWITCH L267 Case 94 - false
   * Goal 170. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 201 TABLESWITCH L267 Case 95 - false
   * Goal 171. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 202 TABLESWITCH L267 Case 96 - false
   * Goal 172. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 203 TABLESWITCH L267 Case 97 - false
   * Goal 173. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 204 TABLESWITCH L267 Case 98 - false
   * Goal 174. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 205 TABLESWITCH L267 Case 99 - false
   * Goal 175. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 206 TABLESWITCH L267 Case 100 - false
   * Goal 176. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 207 TABLESWITCH L267 Case 101 - false
   * Goal 177. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 208 TABLESWITCH L267 Case 102 - false
   * Goal 178. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 209 TABLESWITCH L267 Case 103 - false
   * Goal 179. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 210 TABLESWITCH L267 Case 104 - false
   * Goal 180. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 211 TABLESWITCH L267 Case 105 - false
   * Goal 181. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 212 TABLESWITCH L267 Case 106 - false
   * Goal 182. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 213 TABLESWITCH L267 Case 107 - false
   * Goal 183. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 214 TABLESWITCH L267 Case 108 - false
   * Goal 184. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 215 TABLESWITCH L267 Case 109 - false
   * Goal 185. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 216 TABLESWITCH L267 Case 110 - false
   * Goal 186. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 217 TABLESWITCH L267 Case 111 - false
   * Goal 187. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 218 TABLESWITCH L267 Case 112 - false
   * Goal 188. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 219 TABLESWITCH L267 Case 113 - false
   * Goal 189. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 220 TABLESWITCH L267 Case 114 - false
   * Goal 190. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 221 TABLESWITCH L267 Case 115 - false
   * Goal 191. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 222 TABLESWITCH L267 Case 116 - false
   * Goal 192. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 223 TABLESWITCH L267 Case 117 - false
   * Goal 193. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 224 TABLESWITCH L267 Case 118 - false
   * Goal 194. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 225 TABLESWITCH L267 Case 119 - false
   * Goal 195. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 226 TABLESWITCH L267 Case 120 - false
   * Goal 196. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 227 TABLESWITCH L267 Case 121 - false
   * Goal 197. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 228 TABLESWITCH L267 Case 122 - false
   * Goal 198. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 229 TABLESWITCH L267 Case 123 - false
   * Goal 199. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 230 TABLESWITCH L267 Case 124 - false
   * Goal 200. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(JJ)I: I32 Branch 231 TABLESWITCH L267 Default-Case - false
   * Goal 201. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCheckNAdd(I)V: I11 Branch 547 IF_ICMPEQ L849 - false
   * Goal 202. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I37 Branch 550 IF_ICMPNE L911 - true
   * Goal 203. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I50 Branch 551 IF_ICMPGE L913 - true
   * Goal 204. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1431 Branch 675 IF_ICMPGE L1161 - true
   * Goal 205. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1431 Branch 675 IF_ICMPGE L1161 - false
   * Goal 206. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 676 TABLESWITCH L1166 Case 1 - false
   * Goal 207. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 677 TABLESWITCH L1166 Case 2 - false
   * Goal 208. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 678 TABLESWITCH L1166 Case 3 - false
   * Goal 209. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 679 TABLESWITCH L1166 Case 4 - false
   * Goal 210. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 680 TABLESWITCH L1166 Case 5 - false
   * Goal 211. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 681 TABLESWITCH L1166 Case 6 - false
   * Goal 212. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 682 TABLESWITCH L1166 Case 7 - false
   * Goal 213. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 683 TABLESWITCH L1166 Case 8 - false
   * Goal 214. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 684 TABLESWITCH L1166 Case 9 - false
   * Goal 215. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 685 TABLESWITCH L1166 Case 10 - false
   * Goal 216. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 686 TABLESWITCH L1166 Case 11 - false
   * Goal 217. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 687 TABLESWITCH L1166 Case 12 - false
   * Goal 218. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 688 TABLESWITCH L1166 Case 13 - false
   * Goal 219. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 689 TABLESWITCH L1166 Case 14 - false
   * Goal 220. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 690 TABLESWITCH L1166 Case 15 - false
   * Goal 221. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 691 TABLESWITCH L1166 Case 16 - false
   * Goal 222. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 692 TABLESWITCH L1166 Case 17 - false
   * Goal 223. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 693 TABLESWITCH L1166 Case 18 - false
   * Goal 224. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 694 TABLESWITCH L1166 Case 19 - false
   * Goal 225. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 695 TABLESWITCH L1166 Case 20 - false
   * Goal 226. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 696 TABLESWITCH L1166 Case 21 - false
   * Goal 227. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 697 TABLESWITCH L1166 Case 22 - false
   * Goal 228. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 698 TABLESWITCH L1166 Case 23 - false
   * Goal 229. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 699 TABLESWITCH L1166 Case 24 - false
   * Goal 230. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 700 TABLESWITCH L1166 Case 25 - false
   * Goal 231. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 701 TABLESWITCH L1166 Case 26 - false
   * Goal 232. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 702 TABLESWITCH L1166 Case 27 - false
   * Goal 233. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 703 TABLESWITCH L1166 Case 28 - false
   * Goal 234. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 704 TABLESWITCH L1166 Case 29 - false
   * Goal 235. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 705 TABLESWITCH L1166 Case 30 - false
   * Goal 236. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 706 TABLESWITCH L1166 Case 31 - false
   * Goal 237. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 707 TABLESWITCH L1166 Case 32 - true
   * Goal 238. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 708 TABLESWITCH L1166 Case 33 - false
   * Goal 239. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 709 TABLESWITCH L1166 Case 34 - false
   * Goal 240. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 710 TABLESWITCH L1166 Case 35 - false
   * Goal 241. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 711 TABLESWITCH L1166 Case 36 - false
   * Goal 242. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 712 TABLESWITCH L1166 Case 37 - false
   * Goal 243. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 713 TABLESWITCH L1166 Case 38 - false
   * Goal 244. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 714 TABLESWITCH L1166 Case 39 - false
   * Goal 245. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 715 TABLESWITCH L1166 Case 40 - false
   * Goal 246. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 716 TABLESWITCH L1166 Case 41 - false
   * Goal 247. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 717 TABLESWITCH L1166 Case 42 - false
   * Goal 248. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 718 TABLESWITCH L1166 Case 43 - false
   * Goal 249. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 719 TABLESWITCH L1166 Case 44 - false
   * Goal 250. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 720 TABLESWITCH L1166 Case 45 - false
   * Goal 251. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 721 TABLESWITCH L1166 Case 46 - false
   * Goal 252. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 722 TABLESWITCH L1166 Case 47 - false
   * Goal 253. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 723 TABLESWITCH L1166 Case 48 - false
   * Goal 254. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 724 TABLESWITCH L1166 Case 49 - false
   * Goal 255. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 725 TABLESWITCH L1166 Case 50 - false
   * Goal 256. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1448 Branch 726 TABLESWITCH L1166 Default-Case - false
   * Goal 257. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1459 Branch 727 IFNE L1170 - true
   * Goal 258. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1473 Branch 728 IF_ICMPLE L1172 - false
   * Goal 259. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1827 Branch 747 IF_ICMPNE L1241 - false
   * Goal 260. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1880 Branch 748 LOOKUPSWITCH L1252 Case 1 - false
   * Goal 261. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1880 Branch 749 LOOKUPSWITCH L1252 Case 3 - false
   * Goal 262. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1880 Branch 750 LOOKUPSWITCH L1252 Case 14 - false
   * Goal 263. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1880 Branch 751 LOOKUPSWITCH L1252 Case 23 - false
   * Goal 264. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1880 Branch 752 LOOKUPSWITCH L1252 Case 32 - true
   * Goal 265. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1880 Branch 753 LOOKUPSWITCH L1252 Default-Case - false
   * Goal 266. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I1892 Branch 754 IFNE L1256 - false
   * Goal 267. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I2006 Branch 760 IF_ICMPNE L1276 - false
   * Goal 268. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I2014 Branch 761 IF_ICMPEQ L1278 - true
   * Goal 269. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I2014 Branch 761 IF_ICMPEQ L1278 - false
   * Goal 270. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I2049 Branch 762 IF_ICMPNE L1285 - true
   * Goal 271. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjMoveNfa_0(II)I: I2049 Branch 762 IF_ICMPNE L1285 - false
   * Goal 272. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCanMove_1(IIIJJ)Z: I3 Branch 797 LOOKUPSWITCH L1447 Case 0 - true
   * Goal 273. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCanMove_1(IIIJJ)Z: I3 Branch 798 LOOKUPSWITCH L1447 Case 48 - false
   * Goal 274. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCanMove_1(IIIJJ)Z: I3 Branch 799 LOOKUPSWITCH L1447 Case 49 - false
   * Goal 275. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCanMove_1(IIIJJ)Z: I3 Branch 800 LOOKUPSWITCH L1447 Case 51 - false
   * Goal 276. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCanMove_1(IIIJJ)Z: I3 Branch 801 LOOKUPSWITCH L1447 Case 61 - false
   * Goal 277. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCanMove_1(IIIJJ)Z: I3 Branch 802 LOOKUPSWITCH L1447 Default-Case - false
   * Goal 278. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjCanMove_1(IIIJJ)Z: I16 Branch 803 IFEQ L1450 - true
   * Goal 279. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.SwitchTo(I)V: I7 Branch 810 IF_ICMPGE L1553 - true
   * Goal 280. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.jjFillToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I26 Branch 812 IFNONNULL L1564 - false
   * Goal 281. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I57 Branch 813 TABLESWITCH L1605 Case 0 - true
   * Goal 282. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I57 Branch 814 TABLESWITCH L1605 Case 1 - false
   * Goal 283. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I57 Branch 815 TABLESWITCH L1605 Case 2 - false
   * Goal 284. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I57 Branch 816 TABLESWITCH L1605 Case 3 - false
   * Goal 285. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I57 Branch 817 TABLESWITCH L1605 Default-Case - false
   * Goal 286. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I72 Branch 818 IF_ICMPGT L1609 - true
   * Goal 287. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I251 Branch 826 IF_ICMPEQ L1645 - false
   * Goal 288. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I262 Branch 827 IF_ICMPGE L1647 - false
   * Goal 289. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I294 Branch 828 IFEQ L1649 - false
   * Goal 290. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.getNextToken()Lcom/soops/CEN4010/JMCA/JParser/Token;: I320 Branch 829 IF_ICMPEQ L1654 - true
   * Goal 291. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.TokenLexicalActions(Lcom/soops/CEN4010/JMCA/JParser/Token;)V: I4 Branch 844 LOOKUPSWITCH L1740 Case 122 - false
   * Goal 292. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.TokenLexicalActions(Lcom/soops/CEN4010/JMCA/JParser/Token;)V: I4 Branch 845 LOOKUPSWITCH L1740 Case 123 - false
   * Goal 293. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.TokenLexicalActions(Lcom/soops/CEN4010/JMCA/JParser/Token;)V: I4 Branch 846 LOOKUPSWITCH L1740 Default-Case - true
   */

  @Test
  public void test149()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'r';
      charArray0[2] = 'r';
      charArray0[2] = '\u0080';
      charArray0[1] = 'U';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'r', 'U', '\u0080', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) charArrayReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'r', 'U', '\u0080', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'r', 'U', '\u0080', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("rU", token0.toString());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.staticFlag);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'r', 'U', '\u0080', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (int) 'r');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 114. State unchanged.
         //
      }
  }

  //Test case number: 150
  /*
   * 5 covered goals:
   * Goal 1. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.<init>(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;)V: root-Branch
   * Goal 2. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.<init>(Lcom/soops/CEN4010/JMCA/JParser/JavaCharStream;I)V: root-Branch
   * Goal 3. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.SwitchTo(I)V: I7 Branch 810 IF_ICMPGE L1553 - false
   * Goal 4. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.SwitchTo(I)V: I12 Branch 811 IFGE L1553 - true
   * Goal 5. com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager.SkipLexicalActions(Lcom/soops/CEN4010/JMCA/JParser/Token;)V: I4 Branch 840 LOOKUPSWITCH L1715 Default-Case - true
   */

  @Test
  public void test150()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNotNull(token_GTToken0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) pushbackInputStream0);
      assertNotNull(dataInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((InputStream) dataInputStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertFalse(javaCharStream0.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
  }
}
