/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 19 19:46:32 GMT 2015
 */

package client.network;

import static org.junit.Assert.*;
import org.junit.Test;
import client.BomberClient;
import client.ClientGameSession;
import client.network.ClientMsgReceiver;
import java.awt.HeadlessException;
import java.awt.event.InvocationEvent;
import java.net.Socket;
import java.util.HashMap;
import java.util.List;
import java.util.ResourceBundle;
import javax.swing.ImageIcon;
import messages.round.ClientQuitRunningSessionMsg;
import messages.round.RoundStateMsg;
import messages.session.SessionParticipationMsg;
import messages.session.SessionScoreMsg;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ClientMsgReceiver_ESTest extends ClientMsgReceiver_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 1 covered goal:
   * Goal 1. client.network.ClientMsgReceiver.processMsg(Lmessages/Message;)V: I38 Branch 2 IFNULL L74 - true
   */

  @Test
  public void test0()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isConnected());
      assertNotNull(mockSocket0);
      
      BomberClient bomberClient0 = BomberClient.getInstance();
      assertEquals(0, bomberClient0.countObservers());
      assertEquals("client", bomberClient0.getPlayerName());
      assertFalse(bomberClient0.hasChanged());
      assertNotNull(bomberClient0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SessionScoreMsg sessionScoreMsg0 = new SessionScoreMsg(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(sessionScoreMsg0);
      
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver((Socket) mockSocket0, bomberClient0);
      assertFalse(clientMsgReceiver0.isDaemon());
      assertEquals(0, clientMsgReceiver0.countStackFrames());
      assertFalse(clientMsgReceiver0.isInterrupted());
      assertEquals(0, bomberClient0.countObservers());
      assertEquals("client", bomberClient0.getPlayerName());
      assertFalse(bomberClient0.hasChanged());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isConnected());
      assertNotNull(clientMsgReceiver0);
      
      clientMsgReceiver0.processMsg(sessionScoreMsg0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(clientMsgReceiver0.isDaemon());
      assertEquals(0, clientMsgReceiver0.countStackFrames());
      assertFalse(clientMsgReceiver0.isInterrupted());
      assertEquals(0, bomberClient0.countObservers());
      assertEquals("client", bomberClient0.getPlayerName());
      assertFalse(bomberClient0.hasChanged());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isConnected());
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * Goal 1. client.network.ClientMsgReceiver.processMsg(Lmessages/Message;)V: I71 Branch 4 IFEQ L78 - true
   */

  @Test
  public void test1()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertNotNull(mockSocket0);
      
      BomberClient bomberClient0 = BomberClient.getInstance();
      assertEquals(0, bomberClient0.countObservers());
      assertEquals("client", bomberClient0.getPlayerName());
      assertFalse(bomberClient0.hasChanged());
      assertNotNull(bomberClient0);
      
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver((Socket) mockSocket0, bomberClient0);
      assertFalse(clientMsgReceiver0.isDaemon());
      assertEquals(0, clientMsgReceiver0.countStackFrames());
      assertFalse(clientMsgReceiver0.isInterrupted());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(0, bomberClient0.countObservers());
      assertEquals("client", bomberClient0.getPlayerName());
      assertFalse(bomberClient0.hasChanged());
      assertNotNull(clientMsgReceiver0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteArray0[5] = (byte)49;
      ImageIcon imageIcon0 = new ImageIcon(byteArray0);
      assertArrayEquals(new byte[] {(byte)49, (byte)0, (byte)0, (byte)0, (byte)0, (byte)49, (byte)0}, byteArray0);
      assertNotNull(imageIcon0);
      
      List<String> list0 = ResourceBundle.Control.FORMAT_CLASS;
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      ClientGameSession clientGameSession0 = new ClientGameSession("", list0, imageIcon0, (int) (byte)49, (int) (byte)49, (int) (byte)49);
      assertArrayEquals(new byte[] {(byte)49, (byte)0, (byte)0, (byte)0, (byte)0, (byte)49, (byte)0}, byteArray0);
      assertEquals(49, clientGameSession0.getTotalNrOfPlayers());
      assertEquals(0, clientGameSession0.getCurrentRoundNr());
      assertEquals("", clientGameSession0.getName());
      assertEquals(49, clientGameSession0.getId());
      assertEquals(49, clientGameSession0.getTotalRounds());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(clientGameSession0);
      
      bomberClient0.setCurrentSession(clientGameSession0);
      assertArrayEquals(new byte[] {(byte)49, (byte)0, (byte)0, (byte)0, (byte)0, (byte)49, (byte)0}, byteArray0);
      assertEquals(49, clientGameSession0.getTotalNrOfPlayers());
      assertEquals(0, clientGameSession0.getCurrentRoundNr());
      assertEquals("", clientGameSession0.getName());
      assertEquals(49, clientGameSession0.getId());
      assertEquals(49, clientGameSession0.getTotalRounds());
      assertEquals(0, bomberClient0.countObservers());
      assertEquals("client", bomberClient0.getPlayerName());
      assertFalse(bomberClient0.hasChanged());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      ClientQuitRunningSessionMsg clientQuitRunningSessionMsg0 = new ClientQuitRunningSessionMsg((int) (byte)49);
      assertNotNull(clientQuitRunningSessionMsg0);
      
      // Undeclared exception!
      try {
        clientMsgReceiver0.processMsg(clientQuitRunningSessionMsg0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown message type: class messages.round.ClientQuitRunningSessionMsg
         //
      }
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * Goal 1. client.network.ClientMsgReceiver.processMsg(Lmessages/Message;)V: I8 Branch 1 IFEQ L68 - false
   */

  @Test
  public void test2()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isConnected());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertNotNull(mockSocket0);
      
      BomberClient bomberClient0 = BomberClient.getInstance();
      assertEquals(0, bomberClient0.countObservers());
      assertEquals("client", bomberClient0.getPlayerName());
      assertFalse(bomberClient0.hasChanged());
      assertNotNull(bomberClient0);
      
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver((Socket) mockSocket0, bomberClient0);
      assertEquals(0, clientMsgReceiver0.countStackFrames());
      assertFalse(clientMsgReceiver0.isInterrupted());
      assertFalse(clientMsgReceiver0.isDaemon());
      assertEquals(0, bomberClient0.countObservers());
      assertEquals("client", bomberClient0.getPlayerName());
      assertFalse(bomberClient0.hasChanged());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isConnected());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertNotNull(clientMsgReceiver0);
      
      SessionParticipationMsg sessionParticipationMsg0 = new SessionParticipationMsg(false, 32, "Fbqrr$\"*_2g|Z");
      assertNotNull(sessionParticipationMsg0);
      
      clientMsgReceiver0.processMsg(sessionParticipationMsg0);
      assertEquals(0, clientMsgReceiver0.countStackFrames());
      assertFalse(clientMsgReceiver0.isInterrupted());
      assertFalse(clientMsgReceiver0.isDaemon());
      assertEquals(0, bomberClient0.countObservers());
      assertEquals("client", bomberClient0.getPlayerName());
      assertFalse(bomberClient0.hasChanged());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isConnected());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * Goal 1. client.network.ClientMsgReceiver.closeConnection()V: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertNotNull(mockSocket0);
      
      BomberClient bomberClient0 = BomberClient.getInstance();
      assertEquals(0, bomberClient0.countObservers());
      assertEquals("client", bomberClient0.getPlayerName());
      assertFalse(bomberClient0.hasChanged());
      assertNotNull(bomberClient0);
      
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver((Socket) mockSocket0, bomberClient0);
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertEquals(0, clientMsgReceiver0.countStackFrames());
      assertFalse(clientMsgReceiver0.isDaemon());
      assertFalse(clientMsgReceiver0.isInterrupted());
      assertEquals(0, bomberClient0.countObservers());
      assertEquals("client", bomberClient0.getPlayerName());
      assertFalse(bomberClient0.hasChanged());
      assertNotNull(clientMsgReceiver0);
      
      // Undeclared exception!
      try {
        clientMsgReceiver0.closeConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 4
  /*
   * 3 covered goals:
   * Goal 1. client.network.ClientMsgReceiver.processMsg(Lmessages/Message;)V: I47 Branch 3 IFEQ L75 - true
   * Goal 2. client.network.ClientMsgReceiver.processMsg(Lmessages/Message;)V: I71 Branch 4 IFEQ L78 - false
   * Goal 3. client.network.ClientMsgReceiver.processMsg(Lmessages/Message;)V: I88 Branch 5 IFNULL L81 - true
   */

  @Test
  public void test4()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isConnected());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertNotNull(mockSocket0);
      
      BomberClient bomberClient0 = BomberClient.getInstance();
      assertEquals(0, bomberClient0.countObservers());
      assertEquals("client", bomberClient0.getPlayerName());
      assertFalse(bomberClient0.hasChanged());
      assertNotNull(bomberClient0);
      
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver((Socket) mockSocket0, bomberClient0);
      assertFalse(clientMsgReceiver0.isDaemon());
      assertFalse(clientMsgReceiver0.isInterrupted());
      assertEquals(0, clientMsgReceiver0.countStackFrames());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isConnected());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(0, bomberClient0.countObservers());
      assertEquals("client", bomberClient0.getPlayerName());
      assertFalse(bomberClient0.hasChanged());
      assertNotNull(clientMsgReceiver0);
      
      List<String> list0 = ResourceBundle.Control.FORMAT_PROPERTIES;
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)80;
      ImageIcon imageIcon0 = new ImageIcon(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)80, (byte)0, (byte)0}, byteArray0);
      assertNotNull(imageIcon0);
      
      ClientGameSession clientGameSession0 = new ClientGameSession("vqd(", list0, imageIcon0, (int) (byte)80, (int) (byte)80, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)80, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, clientGameSession0.getId());
      assertEquals(80, clientGameSession0.getTotalNrOfPlayers());
      assertEquals("vqd(", clientGameSession0.getName());
      assertEquals(0, clientGameSession0.getCurrentRoundNr());
      assertEquals(80, clientGameSession0.getTotalRounds());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(clientGameSession0);
      
      bomberClient0.setCurrentSession(clientGameSession0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)80, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, clientGameSession0.getId());
      assertEquals(80, clientGameSession0.getTotalNrOfPlayers());
      assertEquals("vqd(", clientGameSession0.getName());
      assertEquals(0, clientGameSession0.getCurrentRoundNr());
      assertEquals(80, clientGameSession0.getTotalRounds());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(0, bomberClient0.countObservers());
      assertEquals("client", bomberClient0.getPlayerName());
      assertFalse(bomberClient0.hasChanged());
      
      RoundStateMsg roundStateMsg0 = new RoundStateMsg((int) (byte) (-65));
      assertEquals(2, roundStateMsg0.START_GAME_ROUND);
      assertEquals(1, roundStateMsg0.READY);
      assertNotNull(roundStateMsg0);
      
      clientMsgReceiver0.processMsg(roundStateMsg0);
      assertEquals(2, roundStateMsg0.START_GAME_ROUND);
      assertEquals(1, roundStateMsg0.READY);
      assertFalse(clientMsgReceiver0.isDaemon());
      assertFalse(clientMsgReceiver0.isInterrupted());
      assertEquals(0, clientMsgReceiver0.countStackFrames());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isConnected());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertEquals(0, bomberClient0.countObservers());
      assertEquals("client", bomberClient0.getPlayerName());
      assertFalse(bomberClient0.hasChanged());
  }

  //Test case number: 5
  /*
   * 2 covered goals:
   * Goal 1. client.network.ClientMsgReceiver.handleConnectionLoss(Ljava/lang/Exception;)V: root-Branch
   * Goal 2. client.network.ClientMsgReceiver.displayErrorMessage()V: I7 Branch 6 IFNE L100 - false
   */

  @Test
  public void test5()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      //  // Unstable assertion: assertFalse(mockSocket0.isBound());
      //  // Unstable assertion: assertEquals("Socket[unconnected]", mockSocket0.toString());
      //  // Unstable assertion: assertFalse(mockSocket0.isInputShutdown());
      //  // Unstable assertion: assertFalse(mockSocket0.isOutputShutdown());
      //  // Unstable assertion: assertFalse(mockSocket0.isConnected());
      //  // Unstable assertion: assertFalse(mockSocket0.isClosed());
      //  // Unstable assertion: assertNotNull(mockSocket0);
      
      BomberClient bomberClient0 = BomberClient.getInstance();
      //  // Unstable assertion: assertEquals(0, bomberClient0.countObservers());
      //  // Unstable assertion: assertEquals("client", bomberClient0.getPlayerName());
      //  // Unstable assertion: assertFalse(bomberClient0.hasChanged());
      //  // Unstable assertion: assertNotNull(bomberClient0);
      
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver((Socket) mockSocket0, bomberClient0);
      //  // Unstable assertion: assertEquals(0, bomberClient0.countObservers());
      //  // Unstable assertion: assertEquals("client", bomberClient0.getPlayerName());
      //  // Unstable assertion: assertFalse(bomberClient0.hasChanged());
      //  // Unstable assertion: assertEquals(0, clientMsgReceiver0.countStackFrames());
      //  // Unstable assertion: assertFalse(clientMsgReceiver0.isDaemon());
      //  // Unstable assertion: assertFalse(clientMsgReceiver0.isInterrupted());
      //  // Unstable assertion: assertFalse(mockSocket0.isBound());
      //  // Unstable assertion: assertEquals("Socket[unconnected]", mockSocket0.toString());
      //  // Unstable assertion: assertFalse(mockSocket0.isInputShutdown());
      //  // Unstable assertion: assertFalse(mockSocket0.isOutputShutdown());
      //  // Unstable assertion: assertFalse(mockSocket0.isConnected());
      //  // Unstable assertion: assertFalse(mockSocket0.isClosed());
      //  // Unstable assertion: assertNotNull(clientMsgReceiver0);
      
      InvocationEvent invocationEvent0 = new InvocationEvent((Object) bomberClient0, (Runnable) clientMsgReceiver0, (Runnable) clientMsgReceiver0, false);
      //  // Unstable assertion: assertEquals(0, bomberClient0.countObservers());
      //  // Unstable assertion: assertEquals("client", bomberClient0.getPlayerName());
      //  // Unstable assertion: assertFalse(bomberClient0.hasChanged());
      //  // Unstable assertion: assertEquals("INVOCATION_DEFAULT,runnable=Thread[Thread-0,5,Test_Execution_Group],notifier=null,catchExceptions=false,when=1450554388061", invocationEvent0.paramString());
      //  // Unstable assertion: assertEquals(1200, invocationEvent0.getID());
      //  // Unstable assertion: assertEquals(0, clientMsgReceiver0.countStackFrames());
      //  // Unstable assertion: assertFalse(clientMsgReceiver0.isDaemon());
      //  // Unstable assertion: assertFalse(clientMsgReceiver0.isInterrupted());
      //  // Unstable assertion: assertFalse(mockSocket0.isBound());
      //  // Unstable assertion: assertEquals("Socket[unconnected]", mockSocket0.toString());
      //  // Unstable assertion: assertFalse(mockSocket0.isInputShutdown());
      //  // Unstable assertion: assertFalse(mockSocket0.isOutputShutdown());
      //  // Unstable assertion: assertFalse(mockSocket0.isConnected());
      //  // Unstable assertion: assertFalse(mockSocket0.isClosed());
      //  // Unstable assertion: assertNotNull(invocationEvent0);
      
      Exception exception0 = invocationEvent0.getException();
      //  // Unstable assertion: assertEquals(0, bomberClient0.countObservers());
      //  // Unstable assertion: assertEquals("client", bomberClient0.getPlayerName());
      //  // Unstable assertion: assertFalse(bomberClient0.hasChanged());
      //  // Unstable assertion: assertEquals("INVOCATION_DEFAULT,runnable=Thread[Thread-0,5,Test_Execution_Group],notifier=null,catchExceptions=false,when=1450554388061", invocationEvent0.paramString());
      //  // Unstable assertion: assertEquals(1200, invocationEvent0.getID());
      //  // Unstable assertion: assertEquals(0, clientMsgReceiver0.countStackFrames());
      //  // Unstable assertion: assertFalse(clientMsgReceiver0.isDaemon());
      //  // Unstable assertion: assertFalse(clientMsgReceiver0.isInterrupted());
      //  // Unstable assertion: assertFalse(mockSocket0.isBound());
      //  // Unstable assertion: assertEquals("Socket[unconnected]", mockSocket0.toString());
      //  // Unstable assertion: assertFalse(mockSocket0.isInputShutdown());
      //  // Unstable assertion: assertFalse(mockSocket0.isOutputShutdown());
      //  // Unstable assertion: assertFalse(mockSocket0.isConnected());
      //  // Unstable assertion: assertFalse(mockSocket0.isClosed());
      //  // Unstable assertion: assertNull(exception0);
      
      // Undeclared exception!
      try {
        clientMsgReceiver0.handleConnectionLoss((Exception) null);
       //  fail("Expecting exception: HeadlessException");
       // Unstable assertion
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 6
  /*
   * 3 covered goals:
   * Goal 1. client.network.ClientMsgReceiver.processMsg(Lmessages/Message;)V: I8 Branch 1 IFEQ L68 - true
   * Goal 2. client.network.ClientMsgReceiver.processMsg(Lmessages/Message;)V: I38 Branch 2 IFNULL L74 - false
   * Goal 3. client.network.ClientMsgReceiver.processMsg(Lmessages/Message;)V: I47 Branch 3 IFEQ L75 - false
   */

  @Test
  public void test6()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertNotNull(mockSocket0);
      
      BomberClient bomberClient0 = BomberClient.getInstance();
      assertEquals("client", bomberClient0.getPlayerName());
      assertFalse(bomberClient0.hasChanged());
      assertEquals(0, bomberClient0.countObservers());
      assertNotNull(bomberClient0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SessionScoreMsg sessionScoreMsg0 = new SessionScoreMsg(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(sessionScoreMsg0);
      
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver((Socket) mockSocket0, bomberClient0);
      assertEquals("client", bomberClient0.getPlayerName());
      assertFalse(bomberClient0.hasChanged());
      assertEquals(0, bomberClient0.countObservers());
      assertFalse(clientMsgReceiver0.isInterrupted());
      assertFalse(clientMsgReceiver0.isDaemon());
      assertEquals(0, clientMsgReceiver0.countStackFrames());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertNotNull(clientMsgReceiver0);
      
      List<String> list0 = ResourceBundle.Control.FORMAT_PROPERTIES;
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)71;
      ImageIcon imageIcon0 = new ImageIcon(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)71, (byte)0}, byteArray0);
      assertNotNull(imageIcon0);
      
      ClientGameSession clientGameSession0 = new ClientGameSession("vqd(", list0, imageIcon0, (int) (byte)71, (int) (byte)71, (int) (byte)71);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)71, (byte)0}, byteArray0);
      assertEquals(0, clientGameSession0.getCurrentRoundNr());
      assertEquals(71, clientGameSession0.getId());
      assertEquals("vqd(", clientGameSession0.getName());
      assertEquals(71, clientGameSession0.getTotalNrOfPlayers());
      assertEquals(71, clientGameSession0.getTotalRounds());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(clientGameSession0);
      
      bomberClient0.setCurrentSession(clientGameSession0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)71, (byte)0}, byteArray0);
      assertEquals("client", bomberClient0.getPlayerName());
      assertFalse(bomberClient0.hasChanged());
      assertEquals(0, bomberClient0.countObservers());
      assertEquals(0, clientGameSession0.getCurrentRoundNr());
      assertEquals(71, clientGameSession0.getId());
      assertEquals("vqd(", clientGameSession0.getName());
      assertEquals(71, clientGameSession0.getTotalNrOfPlayers());
      assertEquals(71, clientGameSession0.getTotalRounds());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      // Undeclared exception!
      try {
        clientMsgReceiver0.processMsg(sessionScoreMsg0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 7
  /*
   * 1 covered goal:
   * Goal 1. client.network.ClientMsgReceiver.<init>(Ljava/net/Socket;Lclient/BomberClient;)V: root-Branch
   */

  @Test
  public void test7()  throws Throwable  {
      BomberClient bomberClient0 = BomberClient.getInstance();
      assertEquals(0, bomberClient0.countObservers());
      assertEquals("client", bomberClient0.getPlayerName());
      assertFalse(bomberClient0.hasChanged());
      assertNotNull(bomberClient0);
      
      ClientMsgReceiver clientMsgReceiver0 = null;
      try {
        clientMsgReceiver0 = new ClientMsgReceiver((Socket) null, bomberClient0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
