/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 19 19:55:25 GMT 2015
 */

package client.network;

import static org.junit.Assert.*;
import org.junit.Test;
import client.BomberClient;
import client.network.ClientMsgReceiver;
import edu.stanford.nlp.util.HashableCoreMap;
import java.awt.HeadlessException;
import java.net.Proxy;
import java.net.Socket;
import java.util.ArrayList;
import messages.global.ScoreMsg;
import messages.round.RoundStateMsg;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ClientMsgReceiver_ESTest extends ClientMsgReceiver_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 2 covered goals:
   * Goal 1. client.network.ClientMsgReceiver.handleConnectionLoss(Ljava/lang/Exception;)V: root-Branch
   * Goal 2. client.network.ClientMsgReceiver.displayErrorMessage()V: I7 Branch 6 IFNE L100 - false
   */

  @Test
  public void test0()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      
      MockSocket mockSocket0 = new MockSocket(proxy0);
      assertNotNull(mockSocket0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertFalse(mockSocket0.isBound());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      
      BomberClient bomberClient0 = BomberClient.getInstance();
      assertNotNull(bomberClient0);
      assertFalse(bomberClient0.hasChanged());
      assertEquals("client", bomberClient0.getPlayerName());
      assertEquals(0, bomberClient0.countObservers());
      
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver((Socket) mockSocket0, bomberClient0);
      assertNotNull(clientMsgReceiver0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertFalse(bomberClient0.hasChanged());
      assertEquals("client", bomberClient0.getPlayerName());
      assertEquals(0, bomberClient0.countObservers());
      assertFalse(clientMsgReceiver0.isDaemon());
      assertEquals(0, clientMsgReceiver0.countStackFrames());
      assertFalse(clientMsgReceiver0.isInterrupted());
      assertFalse(mockSocket0.isBound());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      
      MockException mockException0 = new MockException("data.length                   ");
      assertNotNull(mockException0);
      
      // Undeclared exception!
      try {
        clientMsgReceiver0.handleConnectionLoss(mockException0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * Goal 1. client.network.ClientMsgReceiver.processMsg(Lmessages/Message;)V: I8 Branch 1 IFEQ L68 - true
   * Goal 2. client.network.ClientMsgReceiver.processMsg(Lmessages/Message;)V: I38 Branch 2 IFNULL L74 - true
   */

  @Test
  public void test1()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      //  // Unstable assertion: assertNotNull(mockSocket0);
      //  // Unstable assertion: assertFalse(mockSocket0.isConnected());
      //  // Unstable assertion: assertFalse(mockSocket0.isOutputShutdown());
      //  // Unstable assertion: assertFalse(mockSocket0.isBound());
      //  // Unstable assertion: assertFalse(mockSocket0.isClosed());
      //  // Unstable assertion: assertEquals("Socket[unconnected]", mockSocket0.toString());
      //  // Unstable assertion: assertFalse(mockSocket0.isInputShutdown());
      
      BomberClient bomberClient0 = BomberClient.getInstance();
      //  // Unstable assertion: assertNotNull(bomberClient0);
      //  // Unstable assertion: assertFalse(bomberClient0.hasChanged());
      //  // Unstable assertion: assertEquals(0, bomberClient0.countObservers());
      //  // Unstable assertion: assertEquals("client", bomberClient0.getPlayerName());
      
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver((Socket) mockSocket0, bomberClient0);
      //  // Unstable assertion: assertNotNull(clientMsgReceiver0);
      //  // Unstable assertion: assertFalse(mockSocket0.isConnected());
      //  // Unstable assertion: assertFalse(mockSocket0.isOutputShutdown());
      //  // Unstable assertion: assertFalse(mockSocket0.isBound());
      //  // Unstable assertion: assertFalse(mockSocket0.isClosed());
      //  // Unstable assertion: assertEquals("Socket[unconnected]", mockSocket0.toString());
      //  // Unstable assertion: assertFalse(mockSocket0.isInputShutdown());
      //  // Unstable assertion: assertEquals(0, clientMsgReceiver0.countStackFrames());
      //  // Unstable assertion: assertFalse(clientMsgReceiver0.isInterrupted());
      //  // Unstable assertion: assertFalse(clientMsgReceiver0.isDaemon());
      //  // Unstable assertion: assertFalse(bomberClient0.hasChanged());
      //  // Unstable assertion: assertEquals(0, bomberClient0.countObservers());
      //  // Unstable assertion: assertEquals("client", bomberClient0.getPlayerName());
      
      Thread[] threadArray0 = new Thread[9];
      int int0 = MockThread.enumerate(threadArray0);
      //  // Unstable assertion: assertEquals(1, int0);
      
      RoundStateMsg roundStateMsg0 = new RoundStateMsg(2);
      //  // Unstable assertion: assertEquals(2, roundStateMsg0.START_GAME_ROUND);
      //  // Unstable assertion: assertEquals(1, roundStateMsg0.READY);
      //  // Unstable assertion: assertNotNull(roundStateMsg0);
      
      clientMsgReceiver0.processMsg(roundStateMsg0);
      //  // Unstable assertion: assertEquals(2, roundStateMsg0.START_GAME_ROUND);
      //  // Unstable assertion: assertEquals(1, roundStateMsg0.READY);
      //  // Unstable assertion: assertFalse(mockSocket0.isConnected());
      //  // Unstable assertion: assertFalse(mockSocket0.isOutputShutdown());
      //  // Unstable assertion: assertFalse(mockSocket0.isBound());
      //  // Unstable assertion: assertFalse(mockSocket0.isClosed());
      //  // Unstable assertion: assertEquals("Socket[unconnected]", mockSocket0.toString());
      //  // Unstable assertion: assertFalse(mockSocket0.isInputShutdown());
      //  // Unstable assertion: assertEquals(0, clientMsgReceiver0.countStackFrames());
      //  // Unstable assertion: assertFalse(clientMsgReceiver0.isInterrupted());
      //  // Unstable assertion: assertFalse(clientMsgReceiver0.isDaemon());
      //  // Unstable assertion: assertFalse(bomberClient0.hasChanged());
      //  // Unstable assertion: assertEquals(0, bomberClient0.countObservers());
      //  // Unstable assertion: assertEquals("client", bomberClient0.getPlayerName());
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * Goal 1. client.network.ClientMsgReceiver.processMsg(Lmessages/Message;)V: I8 Branch 1 IFEQ L68 - false
   */

  @Test
  public void test2()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      
      MockSocket mockSocket0 = new MockSocket(proxy0);
      assertNotNull(mockSocket0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertFalse(mockSocket0.isConnected());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      
      BomberClient bomberClient0 = BomberClient.getInstance();
      assertNotNull(bomberClient0);
      assertEquals(0, bomberClient0.countObservers());
      assertFalse(bomberClient0.hasChanged());
      assertEquals("client", bomberClient0.getPlayerName());
      
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver((Socket) mockSocket0, bomberClient0);
      assertNotNull(clientMsgReceiver0);
      assertEquals(0, bomberClient0.countObservers());
      assertFalse(bomberClient0.hasChanged());
      assertEquals("client", bomberClient0.getPlayerName());
      assertFalse(clientMsgReceiver0.isInterrupted());
      assertFalse(clientMsgReceiver0.isDaemon());
      assertEquals(0, clientMsgReceiver0.countStackFrames());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertFalse(mockSocket0.isConnected());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      
      ArrayList<HashableCoreMap> arrayList0 = new ArrayList<HashableCoreMap>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ScoreMsg scoreMsg0 = new ScoreMsg(arrayList0);
      assertNotNull(scoreMsg0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      // Undeclared exception!
      try {
        clientMsgReceiver0.processMsg(scoreMsg0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 3
  /*
   * 1 covered goal:
   * Goal 1. client.network.ClientMsgReceiver.closeConnection()V: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      assertNotNull(mockSocket0);
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      
      BomberClient bomberClient0 = BomberClient.getInstance();
      assertNotNull(bomberClient0);
      assertFalse(bomberClient0.hasChanged());
      assertEquals("client", bomberClient0.getPlayerName());
      assertEquals(0, bomberClient0.countObservers());
      
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver((Socket) mockSocket0, bomberClient0);
      assertNotNull(clientMsgReceiver0);
      assertFalse(clientMsgReceiver0.isInterrupted());
      assertEquals(0, clientMsgReceiver0.countStackFrames());
      assertFalse(clientMsgReceiver0.isDaemon());
      assertFalse(bomberClient0.hasChanged());
      assertEquals("client", bomberClient0.getPlayerName());
      assertEquals(0, bomberClient0.countObservers());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      
      // Undeclared exception!
      try {
        clientMsgReceiver0.closeConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 4
  /*
   * 1 covered goal:
   * Goal 1. client.network.ClientMsgReceiver.<init>(Ljava/net/Socket;Lclient/BomberClient;)V: root-Branch
   */

  @Test
  public void test4()  throws Throwable  {
      BomberClient bomberClient0 = BomberClient.getInstance();
      assertNotNull(bomberClient0);
      assertFalse(bomberClient0.hasChanged());
      assertEquals("client", bomberClient0.getPlayerName());
      assertEquals(0, bomberClient0.countObservers());
      
      ClientMsgReceiver clientMsgReceiver0 = null;
      try {
        clientMsgReceiver0 = new ClientMsgReceiver((Socket) null, bomberClient0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
