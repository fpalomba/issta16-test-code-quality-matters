/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 19 19:50:58 GMT 2015
 */

package client.network;

import static org.junit.Assert.*;
import org.junit.Test;
import client.BomberClient;
import client.network.ClientMsgReceiver;
import java.awt.HeadlessException;
import java.awt.event.InvocationEvent;
import java.net.Socket;
import messages.global.SessionListMsg;
import messages.round.BombMoveMsg;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ClientMsgReceiver_ESTest extends ClientMsgReceiver_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 1 covered goal:
   * Goal 1. client.network.ClientMsgReceiver.processMsg(Lmessages/Message;)V: I8 Branch 1 IFEQ L68 - false
   */

  @Test
  public void test0()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      assertNotNull(mockSocket0);
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isConnected());
      
      BomberClient bomberClient0 = BomberClient.getInstance();
      assertNotNull(bomberClient0);
      assertFalse(bomberClient0.hasChanged());
      assertEquals(0, bomberClient0.countObservers());
      assertEquals("client", bomberClient0.getPlayerName());
      
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver((Socket) mockSocket0, bomberClient0);
      assertNotNull(clientMsgReceiver0);
      assertFalse(bomberClient0.hasChanged());
      assertEquals(0, bomberClient0.countObservers());
      assertEquals("client", bomberClient0.getPlayerName());
      assertFalse(clientMsgReceiver0.isInterrupted());
      assertFalse(clientMsgReceiver0.isDaemon());
      assertEquals(0, clientMsgReceiver0.countStackFrames());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isConnected());
      
      SessionListMsg sessionListMsg0 = new SessionListMsg();
      assertNotNull(sessionListMsg0);
      
      // Undeclared exception!
      try {
        clientMsgReceiver0.processMsg(sessionListMsg0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 1
  /*
   * 2 covered goals:
   * Goal 1. client.network.ClientMsgReceiver.processMsg(Lmessages/Message;)V: I8 Branch 1 IFEQ L68 - true
   * Goal 2. client.network.ClientMsgReceiver.processMsg(Lmessages/Message;)V: I38 Branch 2 IFNULL L74 - true
   */

  @Test
  public void test1()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      //  // Unstable assertion: assertNotNull(mockSocket0);
      //  // Unstable assertion: assertFalse(mockSocket0.isOutputShutdown());
      //  // Unstable assertion: assertEquals("Socket[unconnected]", mockSocket0.toString());
      //  // Unstable assertion: assertFalse(mockSocket0.isClosed());
      //  // Unstable assertion: assertFalse(mockSocket0.isBound());
      //  // Unstable assertion: assertFalse(mockSocket0.isInputShutdown());
      //  // Unstable assertion: assertFalse(mockSocket0.isConnected());
      
      BomberClient bomberClient0 = BomberClient.getInstance();
      //  // Unstable assertion: assertNotNull(bomberClient0);
      //  // Unstable assertion: assertFalse(bomberClient0.hasChanged());
      //  // Unstable assertion: assertEquals(0, bomberClient0.countObservers());
      //  // Unstable assertion: assertEquals("client", bomberClient0.getPlayerName());
      
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver((Socket) mockSocket0, bomberClient0);
      //  // Unstable assertion: assertNotNull(clientMsgReceiver0);
      //  // Unstable assertion: assertFalse(bomberClient0.hasChanged());
      //  // Unstable assertion: assertEquals(0, bomberClient0.countObservers());
      //  // Unstable assertion: assertEquals("client", bomberClient0.getPlayerName());
      //  // Unstable assertion: assertFalse(mockSocket0.isOutputShutdown());
      //  // Unstable assertion: assertEquals("Socket[unconnected]", mockSocket0.toString());
      //  // Unstable assertion: assertFalse(mockSocket0.isClosed());
      //  // Unstable assertion: assertFalse(mockSocket0.isBound());
      //  // Unstable assertion: assertFalse(mockSocket0.isInputShutdown());
      //  // Unstable assertion: assertFalse(mockSocket0.isConnected());
      //  // Unstable assertion: assertFalse(clientMsgReceiver0.isDaemon());
      //  // Unstable assertion: assertFalse(clientMsgReceiver0.isInterrupted());
      //  // Unstable assertion: assertEquals(0, clientMsgReceiver0.countStackFrames());
      
      Thread[] threadArray0 = new Thread[9];
      int int0 = MockThread.enumerate(threadArray0);
      //  // Unstable assertion: assertEquals(1, int0);
      
      int[] intArray0 = new int[4];
      BombMoveMsg bombMoveMsg0 = new BombMoveMsg(2, intArray0, intArray0, false);
      //  // Unstable assertion: assertNotNull(bombMoveMsg0);
      //  // Unstable assertion: assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      clientMsgReceiver0.processMsg(bombMoveMsg0);
      //  // Unstable assertion: assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      //  // Unstable assertion: assertFalse(bomberClient0.hasChanged());
      //  // Unstable assertion: assertEquals(0, bomberClient0.countObservers());
      //  // Unstable assertion: assertEquals("client", bomberClient0.getPlayerName());
      //  // Unstable assertion: assertFalse(mockSocket0.isOutputShutdown());
      //  // Unstable assertion: assertEquals("Socket[unconnected]", mockSocket0.toString());
      //  // Unstable assertion: assertFalse(mockSocket0.isClosed());
      //  // Unstable assertion: assertFalse(mockSocket0.isBound());
      //  // Unstable assertion: assertFalse(mockSocket0.isInputShutdown());
      //  // Unstable assertion: assertFalse(mockSocket0.isConnected());
      //  // Unstable assertion: assertFalse(clientMsgReceiver0.isDaemon());
      //  // Unstable assertion: assertFalse(clientMsgReceiver0.isInterrupted());
      //  // Unstable assertion: assertEquals(0, clientMsgReceiver0.countStackFrames());
  }

  //Test case number: 2
  /*
   * 2 covered goals:
   * Goal 1. client.network.ClientMsgReceiver.handleConnectionLoss(Ljava/lang/Exception;)V: root-Branch
   * Goal 2. client.network.ClientMsgReceiver.displayErrorMessage()V: I7 Branch 6 IFNE L100 - false
   */

  @Test
  public void test2()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      //  // Unstable assertion: assertNotNull(mockSocket0);
      //  // Unstable assertion: assertFalse(mockSocket0.isClosed());
      //  // Unstable assertion: assertFalse(mockSocket0.isBound());
      //  // Unstable assertion: assertFalse(mockSocket0.isOutputShutdown());
      //  // Unstable assertion: assertFalse(mockSocket0.isConnected());
      //  // Unstable assertion: assertEquals("Socket[unconnected]", mockSocket0.toString());
      //  // Unstable assertion: assertFalse(mockSocket0.isInputShutdown());
      
      BomberClient bomberClient0 = BomberClient.getInstance();
      //  // Unstable assertion: assertNotNull(bomberClient0);
      //  // Unstable assertion: assertEquals(0, bomberClient0.countObservers());
      //  // Unstable assertion: assertFalse(bomberClient0.hasChanged());
      //  // Unstable assertion: assertEquals("client", bomberClient0.getPlayerName());
      
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver((Socket) mockSocket0, bomberClient0);
      //  // Unstable assertion: assertNotNull(clientMsgReceiver0);
      //  // Unstable assertion: assertEquals(0, bomberClient0.countObservers());
      //  // Unstable assertion: assertFalse(bomberClient0.hasChanged());
      //  // Unstable assertion: assertEquals("client", bomberClient0.getPlayerName());
      //  // Unstable assertion: assertFalse(clientMsgReceiver0.isInterrupted());
      //  // Unstable assertion: assertFalse(clientMsgReceiver0.isDaemon());
      //  // Unstable assertion: assertEquals(0, clientMsgReceiver0.countStackFrames());
      //  // Unstable assertion: assertFalse(mockSocket0.isClosed());
      //  // Unstable assertion: assertFalse(mockSocket0.isBound());
      //  // Unstable assertion: assertFalse(mockSocket0.isOutputShutdown());
      //  // Unstable assertion: assertFalse(mockSocket0.isConnected());
      //  // Unstable assertion: assertEquals("Socket[unconnected]", mockSocket0.toString());
      //  // Unstable assertion: assertFalse(mockSocket0.isInputShutdown());
      
      InvocationEvent invocationEvent0 = new InvocationEvent((Object) bomberClient0, (Runnable) clientMsgReceiver0, (Runnable) clientMsgReceiver0, true);
      //  // Unstable assertion: assertNotNull(invocationEvent0);
      //  // Unstable assertion: assertEquals(0, bomberClient0.countObservers());
      //  // Unstable assertion: assertFalse(bomberClient0.hasChanged());
      //  // Unstable assertion: assertEquals("client", bomberClient0.getPlayerName());
      //  // Unstable assertion: assertFalse(clientMsgReceiver0.isInterrupted());
      //  // Unstable assertion: assertFalse(clientMsgReceiver0.isDaemon());
      //  // Unstable assertion: assertEquals(0, clientMsgReceiver0.countStackFrames());
      //  // Unstable assertion: assertFalse(mockSocket0.isClosed());
      //  // Unstable assertion: assertFalse(mockSocket0.isBound());
      //  // Unstable assertion: assertFalse(mockSocket0.isOutputShutdown());
      //  // Unstable assertion: assertFalse(mockSocket0.isConnected());
      //  // Unstable assertion: assertEquals("Socket[unconnected]", mockSocket0.toString());
      //  // Unstable assertion: assertFalse(mockSocket0.isInputShutdown());
      //  // Unstable assertion: assertEquals(1200, invocationEvent0.getID());
      //  // Unstable assertion: assertEquals("INVOCATION_DEFAULT,runnable=Thread[Thread-0,5,Test_Execution_Group],notifier=null,catchExceptions=true,when=1450554654109", invocationEvent0.paramString());
      
      Exception exception0 = invocationEvent0.getException();
      //  // Unstable assertion: assertNull(exception0);
      //  // Unstable assertion: assertEquals(0, bomberClient0.countObservers());
      //  // Unstable assertion: assertFalse(bomberClient0.hasChanged());
      //  // Unstable assertion: assertEquals("client", bomberClient0.getPlayerName());
      //  // Unstable assertion: assertFalse(clientMsgReceiver0.isInterrupted());
      //  // Unstable assertion: assertFalse(clientMsgReceiver0.isDaemon());
      //  // Unstable assertion: assertEquals(0, clientMsgReceiver0.countStackFrames());
      //  // Unstable assertion: assertFalse(mockSocket0.isClosed());
      //  // Unstable assertion: assertFalse(mockSocket0.isBound());
      //  // Unstable assertion: assertFalse(mockSocket0.isOutputShutdown());
      //  // Unstable assertion: assertFalse(mockSocket0.isConnected());
      //  // Unstable assertion: assertEquals("Socket[unconnected]", mockSocket0.toString());
      //  // Unstable assertion: assertFalse(mockSocket0.isInputShutdown());
      //  // Unstable assertion: assertEquals(1200, invocationEvent0.getID());
      //  // Unstable assertion: assertEquals("INVOCATION_DEFAULT,runnable=Thread[Thread-0,5,Test_Execution_Group],notifier=null,catchExceptions=true,when=1450554654109", invocationEvent0.paramString());
      
      // Undeclared exception!
      try {
        clientMsgReceiver0.handleConnectionLoss((Exception) null);
       //  fail("Expecting exception: HeadlessException");
       // Unstable assertion
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * Goal 1. client.network.ClientMsgReceiver.<init>(Ljava/net/Socket;Lclient/BomberClient;)V: root-Branch
   * Goal 2. client.network.ClientMsgReceiver.closeConnection()V: root-Branch
   */

  @Test
  public void test3()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      assertNotNull(mockSocket0);
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isConnected());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isBound());
      
      BomberClient bomberClient0 = BomberClient.getInstance();
      assertNotNull(bomberClient0);
      assertEquals(0, bomberClient0.countObservers());
      assertFalse(bomberClient0.hasChanged());
      assertEquals("client", bomberClient0.getPlayerName());
      
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver((Socket) mockSocket0, bomberClient0);
      assertNotNull(clientMsgReceiver0);
      assertFalse(clientMsgReceiver0.isDaemon());
      assertFalse(clientMsgReceiver0.isInterrupted());
      assertEquals(0, clientMsgReceiver0.countStackFrames());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isConnected());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isBound());
      assertEquals(0, bomberClient0.countObservers());
      assertFalse(bomberClient0.hasChanged());
      assertEquals("client", bomberClient0.getPlayerName());
      
      // Undeclared exception!
      try {
        clientMsgReceiver0.closeConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
